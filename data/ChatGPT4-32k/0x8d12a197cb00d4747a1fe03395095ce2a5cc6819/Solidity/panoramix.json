{
	"address": "0x8d12a197cb00d4747a1fe03395095ce2a5cc6819",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the provided decompiled code, here is a Solidity contract that has similar behaviour. Note that the decompiled code is in a high-level language that is not Solidity and contains constructs not available in Solidity, hence, an exact conversion is not possible. \n\n```solidity\npragma solidity ^0.8.0;\n\ncontract TradingContract {\n    address public adminAddress;\n    address public feeAccount;\n    address public accountLevelsAddr;\n    uint256 public feeMake;\n    uint256 public feeTake;\n    uint256 public feeRebate;\n    \n    mapping (address => mapping (address => uint256)) public tokens;\n    mapping (address => mapping (bytes32 => uint256)) public orderFills;\n    mapping (address => mapping (bytes32 => bool)) public orders;\n\n    event Order(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user);\n    event Cancel(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s);\n    event Deposit(address token, address user, uint256 amount, uint256 balance);\n    event Withdraw(address token, address user, uint256 amount, uint256 balance);\n    \n    modifier onlyAdmin() {\n        require(msg.sender == adminAddress, \"Only admin can call this function\");\n        _;\n    }\n    \n    function changeAdmin(address newAdmin) public onlyAdmin {\n        adminAddress = newAdmin;\n    }\n\n    function changeFeeAccount(address newFeeAccount) public onlyAdmin {\n        feeAccount = newFeeAccount;\n    }\n\n    function changeAccountLevelsAddr(address newAccountLevelsAddr) public onlyAdmin {\n        accountLevelsAddr = newAccountLevelsAddr;\n    }\n\n    function changeFeeMake(uint256 newFeeMake) public onlyAdmin {\n        require(newFeeMake <= feeMake, \"newFeeMake should be less than or equal to feeMake\");\n        feeMake = newFeeMake;\n    }\n\n    function changeFeeTake(uint256 newFeeTake) public onlyAdmin {\n        require(newFeeTake <= feeTake, \"newFeeTake should be less than or equal to feeTake\");\n        require(newFeeTake >= feeRebate, \"newFeeTake should be greater than or equal to feeRebate\");\n        feeTake = newFeeTake;\n    }\n\n    function changeFeeRebate(uint256 newFeeRebate) public onlyAdmin {\n        require(newFeeRebate >= feeRebate, \"newFeeRebate should be greater than or equal to feeRebate\");\n        require(newFeeRebate <= feeTake, \"newFeeRebate should be less than or equal to feeTake\");\n        feeRebate = newFeeRebate;\n    }\n\n    function deposit() public payable {\n        tokens[address(0)][msg.sender] += msg.value;\n        emit Deposit(address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\n    }\n\n    function withdraw(uint256 amount) public {\n        require(tokens[address(0)][msg.sender] >= amount, \"Insufficient balance\");\n        tokens[address(0)][msg.sender] -= amount;\n        payable(msg.sender).transfer(amount);\n        emit Withdraw(address(0), msg.sender, amount, tokens[address(0)][msg.sender]);\n    }\n\n    function depositToken(address token, uint256 amount) public {\n        // TODO: Implement token deposit function, it requires interaction with the token contract.\n    }\n\n    function withdrawToken(address token, uint256 amount) public {\n        // TODO: Implement token withdrawal function, it requires interaction with the token contract.\n    }\n\n    function order(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce) public {\n        // TODO: Implement order function, it requires interaction with the token contract.\n    }\n\n    function cancelOrder(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, uint8 v, bytes32 r, bytes32 s) public {\n        // TODO: Implement cancel order function, it requires interaction with the token contract.\n    }\n}\n```\nPlease note that Solidity does not support some of the features implied by the decompiled code, and an exact conversion is not possible. For example, explicit gas control, gas remaining check, and explicit call success check are not supported in Solidity. Also, the contract does not include a mechanism for transferring tokens, as it would require interaction with an ERC20 contract. The `order`, `cancelOrder`, `depositToken`, and `withdrawToken` functions are placeholders for the actual implementation.",
				"role": "assistant"
			}
		}
	],
	"created": 1700470702,
	"id": "chatcmpl-8MuOkH4uDIS7t5AHjh9bI0y20IzJF",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\ndef storage:\n  adminAddress is address at storage 0\n  feeAccount is address at storage 1\n  accountLevelsAddr is address at storage 2\n  feeMake is uint256 at storage 3\n  feeTake is uint256 at storage 4\n  feeRebate is uint256 at storage 5\n  tokens is mapping of uint256 at storage 6\n  stor7 is mapping of uint8 at storage 7\n  orderFills is mapping of uint256 at storage 8\n\ndef orderFills(address _param1, bytes32 _param2): # not payable\n  return orderFills[_param1][_param2]\n\ndef amountFilled(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s): # not payable\n  hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n  require sha256hash.result\n  return orderFills[address(user)][hash]\n\ndef tokens(address _param1, address _param2): # not payable\n  return tokens[_param1][_param2]\n\ndef feeMake(): # not payable\n  return feeMake\n\ndef feeAccount(): # not payable\n  return feeAccount\n\ndef feeRebate(): # not payable\n  return feeRebate\n\ndef orders(address _param1, bytes32 _param2): # not payable\n  return bool(stor7[_param1][_param2])\n\ndef feeTake(): # not payable\n  return feeTake\n\ndef accountLevelsAddr(): # not payable\n  return accountLevelsAddr\n\ndef balanceOf(address token, address user): # not payable\n  return tokens[address(token)][address(user)]\n\ndef admin(): # not payable\n  return adminAddress\n\n#\n#  Regular functions\n#\n\ndef _fallback(?): # not payable, default function\n  revert \n\ndef changeAdmin(address newAdmin): # not payable\n  require adminAddress == caller\n  adminAddress = newAdmin\n\ndef changeFeeAccount(address feeAccount_): # not payable\n  require adminAddress == caller\n  feeAccount = feeAccount_\n\ndef changeAccountLevelsAddr(address accountLevelsAddr_): # not payable\n  require adminAddress == caller\n  accountLevelsAddr = accountLevelsAddr_\n\ndef changeFeeMake(uint256 feeMake_): # not payable\n  require adminAddress == caller\n  require feeMake_ <= feeMake\n  feeMake = feeMake_\n\ndef changeFeeTake(uint256 feeTake_): # not payable\n  require adminAddress == caller\n  require feeTake_ <= feeTake\n  require feeTake_ >= feeRebate\n  feeTake = feeTake_\n\ndef changeFeeRebate(uint256 feeRebate_): # not payable\n  require adminAddress == caller\n  require feeRebate_ >= feeRebate\n  require feeRebate_ <= feeTake\n  feeRebate = feeRebate_\n\ndef deposit() payable: \n  require call.value + tokens[0][caller] >= tokens[0][caller]\n  require call.value + tokens[0][caller] >= call.value\n  tokens[0][caller] += call.value\n  log Deposit(\n        address token=0,\n        address user=caller,\n        uint256 amount=call.value,\n        uint256 balance=call.value + tokens[0][caller])\n\ndef withdraw(uint256 amount): # not payable\n  require tokens[0][caller] >= amount\n  require amount <= tokens[0][caller]\n  tokens[0][caller] -= amount\n  call caller with:\n     value amount wei\n       gas gas_remaining - 34050 wei\n  require ext_call.success\n  log Withdraw(\n        address token=0,\n        address user=caller,\n        uint256 amount=amount,\n        uint256 balance=tokens[0][caller])\n\ndef order(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce): # not payable\n  hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n  require sha256hash.result\n  stor7[caller][hash] = 1\n  log Order(\n        address tokenGet=tokenGet,\n        uint256 amountGet=0,\n        address tokenGive=address(tokenGive),\n        uint256 amountGive=amountGive,\n        uint256 expires=expires,\n        uint256 nonce=nonce,\n        address user=caller)\n\ndef withdrawToken(address token, uint256 amount): # not payable\n  require token\n  require tokens[address(token)][caller] >= amount\n  require amount <= tokens[address(token)][caller]\n  tokens[address(token)][caller] -= amount\n  require ext_code.size(token)\n  call token.transfer(address recipient, uint256 amount) with:\n       gas gas_remaining - 50 wei\n      args caller, amount\n  require ext_call.success\n  require ext_call.return_data[0]\n  log Withdraw(\n        address token=address(token),\n        address user=caller,\n        uint256 amount=amount,\n        uint256 balance=tokens[address(token)][caller])\n\ndef depositToken(address token, uint256 amount): # not payable\n  require token\n  require ext_code.size(token)\n  call token.transferFrom(address sender, address recipient, uint256 amount) with:\n       gas gas_remaining - 50 wei\n      args caller, address(this.address), amount\n  require ext_call.success\n  require ext_call.return_data[0]\n  require amount + tokens[address(token)][caller] >= tokens[address(token)][caller]\n  require amount + tokens[address(token)][caller] >= amount\n  tokens[address(token)][caller] += amount\n  log Deposit(\n        address token=address(token),\n        address user=caller,\n        uint256 amount=amount,\n        uint256 balance=amount + tokens[address(token)][caller])\n\ndef cancelOrder(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, uint8 v, bytes32 r, bytes32 s): # not payable\n  hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n  require sha256hash.result\n  if stor7[caller][hash]:\n      orderFills[caller][hash] = amountGet\n      log Cancel(\n            address tokenGet=tokenGet,\n            uint256 amountGet=0,\n            address tokenGive=address(tokenGive),\n            uint256 amountGive=amountGive,\n            uint256 expires=expires,\n            uint256 nonce=nonce,\n            address user=caller,\n            uint8 v=v << 248,\n            bytes32 r=r,\n            bytes32 s=s)\n  else:\n      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, hash), v << 248, r, s) # precompiled\n      require erecover.result\n      require address(signer) == caller\n      orderFills[caller][hash] = amountGet\n      log Cancel(\n            address tokenGet=address(tokenGet),\n            uint256 amountGet=amountGet,\n            address tokenGive=address(tokenGive),\n            uint256 amountGive=amountGive,\n            uint256 expires=expires,\n            uint256 nonce=nonce,\n            address user=caller,\n            uint8 v=v << 248,\n            bytes32 r=r,\n            bytes32 s=s)\n\ndef availableVolume(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s): # not payable\n  hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n  require sha256hash.result\n  if not stor7[address(user)][hash]:\n      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, hash), v << 248, r, s) # precompiled\n      require erecover.result\n      if address(signer) != user:\n          return 0\n  if block.number > expires:\n      return 0\n  require orderFills[address(user)][hash] <= amountGet\n  if tokens[address(tokenGive)][address(user)]:\n      require tokens[address(tokenGive)][address(user)]\n      require amountGet * tokens[address(tokenGive)][address(user)] / tokens[address(tokenGive)][address(user)] == amountGet\n  require amountGive\n  if amountGet - orderFills[address(user)][hash] >= amountGet * tokens[address(tokenGive)][address(user)] / amountGive:\n      return (amountGet * tokens[address(tokenGive)][address(user)] / amountGive)\n  return (amountGet - orderFills[address(user)][hash])\n\ndef testTrade(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s, uint256 amount, address sender): # not payable\n  if tokens[address(tokenGet)][address(sender)] >= amount:\n      hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n      require sha256hash.result\n      if stor7[address(user)][hash]:\n          if block.number > expires:\n              if 0 >= amount:\n                  return 1\n          else:\n              require orderFills[address(user)][hash] <= amountGet\n              if tokens[address(tokenGive)][address(user)]:\n                  require tokens[address(tokenGive)][address(user)]\n                  require amountGet * tokens[address(tokenGive)][address(user)] / tokens[address(tokenGive)][address(user)] == amountGet\n              require amountGive\n              if amountGet - orderFills[address(user)][hash] >= amountGet * tokens[address(tokenGive)][address(user)] / amountGive:\n                  if amountGet * tokens[address(tokenGive)][address(user)] / amountGive >= amount:\n                      return 1\n              else:\n                  if amountGet - orderFills[address(user)][hash] >= amount:\n                      return 1\n      else:\n          signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, hash), v << 248, r, s) # precompiled\n          require erecover.result\n          if address(signer) != user:\n              if 0 >= amount:\n                  return 1\n          else:\n              if block.number > expires:\n                  if 0 >= amount:\n                      return 1\n              else:\n                  require orderFills[address(user)][hash] <= amountGet\n                  if tokens[address(tokenGive)][address(user)]:\n                      require tokens[address(tokenGive)][address(user)]\n                      require amountGet * tokens[address(tokenGive)][address(user)] / tokens[address(tokenGive)][address(user)] == amountGet\n                  require amountGive\n                  if amountGet - orderFills[address(user)][hash] >= amountGet * tokens[address(tokenGive)][address(user)] / amountGive:\n                      if amountGet * tokens[address(tokenGive)][address(user)] / amountGive >= amount:\n                          return 1\n                  else:\n                      if amountGet - orderFills[address(user)][hash] >= amount:\n                          return 1\n      return 0\n  else:\n      return 0\n\ndef trade(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s, uint256 amount): # not payable\n  hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n  require sha256hash.result\n  if stor7[address(user)][hash]:\n      require block.number <= expires\n      require amount + orderFills[address(user)][hash] >= orderFills[address(user)][hash]\n      require amount + orderFills[address(user)][hash] >= amount\n      require amount + orderFills[address(user)][hash] <= amountGet\n      if not amount:\n          if not amount:\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]\n                  require tokens[address(tokenGet)][stor1] >= 0\n                  tokens[address(tokenGet)][stor1] = (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1]\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require ext_code.size(accountLevelsAddr)\n              call accountLevelsAddr.accountLevel(address user) with:\n                   gas gas_remaining - 50 wei\n                  args user\n              require ext_call.success\n              if ext_call.return_data[0] != 1:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  if 2 == ext_call.return_data[0]:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  else:\n                      require amount >= amount\n                      require amount >= 0\n                      require feeMake * amount / 10^18 <= amount\n                      require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              if not amount:\n                  if ext_call.return_data[0] != 2:\n                      if (feeTake * amount / 10^18) + amount >= amount:\n                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                              if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                  if (feeRebate * amount / 10^18) + amount >= amount:\n                                      if (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18:\n                                          if feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount:\n                                              if (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                  if tokens[address(tokenGet)][user] >= 0:\n                                                      tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  else:\n                      if (feeTake * amount / 10^18) + amount >= amount:\n                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                              if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                  if (feeTake * amount / 10^18) + amount >= amount:\n                                      if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                          if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                              if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                  if tokens[address(tokenGet)][user] >= 0:\n                                                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              else:\n                  require amount\n                  if feeRebate * amount / amount == feeRebate:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeRebate * amount / 10^18) + amount >= amount:\n                                          if (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount:\n                                                  if (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              revert \n          require amount\n          require feeTake * amount / amount == feeTake\n          if not accountLevelsAddr:\n              require (feeTake * amount / 10^18) + amount >= amount\n              require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n              require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n              tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n              require amount >= amount\n              require amount >= 0\n              require feeMake * amount / 10^18 <= amount\n              require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n              require tokens[address(tokenGet)][user] >= 0\n              tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n              require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n              require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n              require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n              require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]\n              require tokens[address(tokenGet)][stor1] >= 0\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          require ext_code.size(accountLevelsAddr)\n          call accountLevelsAddr.accountLevel(address user) with:\n               gas gas_remaining - 50 wei\n              args user\n          require ext_call.success\n          if ext_call.return_data[0] != 1:\n              require (feeTake * amount / 10^18) + amount >= amount\n              require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n              require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n              tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n              if ext_call.return_data[0] != 2:\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n              else:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                  require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n          else:\n              if not amount:\n                  if ext_call.return_data[0] != 2:\n                      if (feeTake * amount / 10^18) + amount >= amount:\n                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                              if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                  if (feeRebate * amount / 10^18) + amount >= amount:\n                                      if (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18:\n                                          if feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount:\n                                              if (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                  if tokens[address(tokenGet)][user] >= 0:\n                                                      tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  else:\n                      if (feeTake * amount / 10^18) + amount >= amount:\n                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                              if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                  if (feeTake * amount / 10^18) + amount >= amount:\n                                      if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                          if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                              if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                  if tokens[address(tokenGet)][user] >= 0:\n                                                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  revert \n              require amount\n              require feeRebate * amount / amount == feeRebate\n              require (feeTake * amount / 10^18) + amount >= amount\n              require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n              require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n              tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n              if ext_call.return_data[0] != 2:\n                  require (feeRebate * amount / 10^18) + amount >= amount\n                  require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                  require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                  require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n              else:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                  require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n      else:\n          require amount\n          require feeMake * amount / amount == feeMake\n          if not amount:\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]\n                  require tokens[address(tokenGet)][stor1] >= 0\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require ext_code.size(accountLevelsAddr)\n              call accountLevelsAddr.accountLevel(address user) with:\n                   gas gas_remaining - 50 wei\n                  args user\n              require ext_call.success\n              if ext_call.return_data[0] != 1:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  if ext_call.return_data[0] != 2:\n                      require amount >= amount\n                      require amount >= 0\n                      require feeMake * amount / 10^18 <= amount\n                      require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  else:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n              else:\n                  if not amount:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeRebate * amount / 10^18) + amount >= amount:\n                                          if (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount:\n                                                  if (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert \n                  require amount\n                  require feeRebate * amount / amount == feeRebate\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  if ext_call.return_data[0] != 2:\n                      require (feeRebate * amount / 10^18) + amount >= amount\n                      require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                      require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  else:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n          else:\n              require amount\n              require feeTake * amount / amount == feeTake\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]:\n              else:\n                  require ext_code.size(accountLevelsAddr)\n                  call accountLevelsAddr.accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args user\n                  require ext_call.success\n                  if ext_call.return_data[0] != 1:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if amount >= amount:\n                                          if amount >= 0:\n                                              if feeMake * amount / 10^18 <= amount:\n                                                  if amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert \n                  if not amount:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                  else:\n                      require amount\n                      require feeRebate * amount / amount == feeRebate\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n  else:\n      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, hash), v << 248, r, s) # precompiled\n      require erecover.result\n      require address(signer) == user\n      require block.number <= expires\n      require amount + orderFills[address(user)][hash] >= orderFills[address(user)][hash]\n      require amount + orderFills[address(user)][hash] >= amount\n      require amount + orderFills[address(user)][hash] <= amountGet\n      if not amount:\n          if not amount:\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]\n                  require tokens[address(tokenGet)][stor1] >= 0\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require ext_code.size(accountLevelsAddr)\n              call accountLevelsAddr.accountLevel(address user) with:\n                   gas gas_remaining - 50 wei\n                  args user\n              require ext_call.success\n              if ext_call.return_data[0] != 1:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  if ext_call.return_data[0] != 2:\n                      require amount >= amount\n                      require amount >= 0\n                      require feeMake * amount / 10^18 <= amount\n                      require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  else:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n              else:\n                  if not amount:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeRebate * amount / 10^18) + amount >= amount:\n                                          if (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount:\n                                                  if (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert \n                  require amount\n                  require feeRebate * amount / amount == feeRebate\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  if ext_call.return_data[0] != 2:\n                      require (feeRebate * amount / 10^18) + amount >= amount\n                      require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                      require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  else:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n          else:\n              require amount\n              require feeTake * amount / amount == feeTake\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]:\n              else:\n                  require ext_code.size(accountLevelsAddr)\n                  call accountLevelsAddr.accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args user\n                  require ext_call.success\n                  if ext_call.return_data[0] != 1:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if amount >= amount:\n                                          if amount >= 0:\n                                              if feeMake * amount / 10^18 <= amount:\n                                                  if amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert \n                  if not amount:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                  else:\n                      require amount\n                      require feeRebate * amount / amount == feeRebate\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n      else:\n          require amount\n          require feeMake * amount / amount == feeMake\n          if not amount:\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]:\n              else:\n                  require ext_code.size(accountLevelsAddr)\n                  call accountLevelsAddr.accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args user\n                  require ext_call.success\n                  if ext_call.return_data[0] != 1:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if amount >= amount:\n                                          if amount >= 0:\n                                              if feeMake * amount / 10^18 <= amount:\n                                                  if amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert \n                  if not amount:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                  else:\n                      require amount\n                      require feeRebate * amount / amount == feeRebate\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n          else:\n              require amount\n              require feeTake * amount / amount == feeTake\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n              else:\n                  require ext_code.size(accountLevelsAddr)\n                  call accountLevelsAddr.accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args user\n                  require ext_call.success\n                  if ext_call.return_data[0] != 1:\n                      if ext_call.return_data[0] != 2:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                          tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                          require amount >= amount\n                          require amount >= 0\n                          require feeMake * amount / 10^18 <= amount\n                          require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                          require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                          require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  else:\n                      if not amount:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                          tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                          if ext_call.return_data[0] != 2:\n                              require (feeRebate * amount / 10^18) + amount >= amount\n                              require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                              require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                              require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                              require tokens[address(tokenGet)][user] >= 0\n                              tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          else:\n                              require (feeTake * amount / 10^18) + amount >= amount\n                              require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                              require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                              require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                              require tokens[address(tokenGet)][user] >= 0\n                              tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      else:\n                          require amount\n                          require feeRebate * amount / amount == feeRebate\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                          tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                          if 2 == ext_call.return_data[0]:\n                              require (feeTake * amount / 10^18) + amount >= amount\n                              require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                              require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                              require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                              require tokens[address(tokenGet)][user] >= 0\n                              tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          else:\n                              require (feeRebate * amount / 10^18) + amount >= amount\n                              require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                              require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                              require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                              require tokens[address(tokenGet)][user] >= 0\n                              tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: # Palkeoramix decompiler. \n\ndef storage:\n  adminAddress is address at storage 0\n  feeAccount is address at storage 1\n  accountLevelsAddr is address at storage 2\n  feeMake is uint256 at storage 3\n  feeTake is uint256 at storage 4\n  feeRebate is uint256 at storage 5\n  tokens is mapping of uint256 at storage 6\n  stor7 is mapping of uint8 at storage 7\n  orderFills is mapping of uint256 at storage 8\n\ndef orderFills(address _param1, bytes32 _param2): # not payable\n  return orderFills[_param1][_param2]\n\ndef amountFilled(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s): # not payable\n  hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n  require sha256hash.result\n  return orderFills[address(user)][hash]\n\ndef tokens(address _param1, address _param2): # not payable\n  return tokens[_param1][_param2]\n\ndef feeMake(): # not payable\n  return feeMake\n\ndef feeAccount(): # not payable\n  return feeAccount\n\ndef feeRebate(): # not payable\n  return feeRebate\n\ndef orders(address _param1, bytes32 _param2): # not payable\n  return bool(stor7[_param1][_param2])\n\ndef feeTake(): # not payable\n  return feeTake\n\ndef accountLevelsAddr(): # not payable\n  return accountLevelsAddr\n\ndef balanceOf(address token, address user): # not payable\n  return tokens[address(token)][address(user)]\n\ndef admin(): # not payable\n  return adminAddress\n\n#\n#  Regular functions\n#\n\ndef _fallback(?): # not payable, default function\n  revert \n\ndef changeAdmin(address newAdmin): # not payable\n  require adminAddress == caller\n  adminAddress = newAdmin\n\ndef changeFeeAccount(address feeAccount_): # not payable\n  require adminAddress == caller\n  feeAccount = feeAccount_\n\ndef changeAccountLevelsAddr(address accountLevelsAddr_): # not payable\n  require adminAddress == caller\n  accountLevelsAddr = accountLevelsAddr_\n\ndef changeFeeMake(uint256 feeMake_): # not payable\n  require adminAddress == caller\n  require feeMake_ <= feeMake\n  feeMake = feeMake_\n\ndef changeFeeTake(uint256 feeTake_): # not payable\n  require adminAddress == caller\n  require feeTake_ <= feeTake\n  require feeTake_ >= feeRebate\n  feeTake = feeTake_\n\ndef changeFeeRebate(uint256 feeRebate_): # not payable\n  require adminAddress == caller\n  require feeRebate_ >= feeRebate\n  require feeRebate_ <= feeTake\n  feeRebate = feeRebate_\n\ndef deposit() payable: \n  require call.value + tokens[0][caller] >= tokens[0][caller]\n  require call.value + tokens[0][caller] >= call.value\n  tokens[0][caller] += call.value\n  log Deposit(\n        address token=0,\n        address user=caller,\n        uint256 amount=call.value,\n        uint256 balance=call.value + tokens[0][caller])\n\ndef withdraw(uint256 amount): # not payable\n  require tokens[0][caller] >= amount\n  require amount <= tokens[0][caller]\n  tokens[0][caller] -= amount\n  call caller with:\n     value amount wei\n       gas gas_remaining - 34050 wei\n  require ext_call.success\n  log Withdraw(\n        address token=0,\n        address user=caller,\n        uint256 amount=amount,\n        uint256 balance=tokens[0][caller])\n\ndef order(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce): # not payable\n  hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n  require sha256hash.result\n  stor7[caller][hash] = 1\n  log Order(\n        address tokenGet=tokenGet,\n        uint256 amountGet=0,\n        address tokenGive=address(tokenGive),\n        uint256 amountGive=amountGive,\n        uint256 expires=expires,\n        uint256 nonce=nonce,\n        address user=caller)\n\ndef withdrawToken(address token, uint256 amount): # not payable\n  require token\n  require tokens[address(token)][caller] >= amount\n  require amount <= tokens[address(token)][caller]\n  tokens[address(token)][caller] -= amount\n  require ext_code.size(token)\n  call token.transfer(address recipient, uint256 amount) with:\n       gas gas_remaining - 50 wei\n      args caller, amount\n  require ext_call.success\n  require ext_call.return_data[0]\n  log Withdraw(\n        address token=address(token),\n        address user=caller,\n        uint256 amount=amount,\n        uint256 balance=tokens[address(token)][caller])\n\ndef depositToken(address token, uint256 amount): # not payable\n  require token\n  require ext_code.size(token)\n  call token.transferFrom(address sender, address recipient, uint256 amount) with:\n       gas gas_remaining - 50 wei\n      args caller, address(this.address), amount\n  require ext_call.success\n  require ext_call.return_data[0]\n  require amount + tokens[address(token)][caller] >= tokens[address(token)][caller]\n  require amount + tokens[address(token)][caller] >= amount\n  tokens[address(token)][caller] += amount\n  log Deposit(\n        address token=address(token),\n        address user=caller,\n        uint256 amount=amount,\n        uint256 balance=amount + tokens[address(token)][caller])\n\ndef cancelOrder(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, uint8 v, bytes32 r, bytes32 s): # not payable\n  hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n  require sha256hash.result\n  if stor7[caller][hash]:\n      orderFills[caller][hash] = amountGet\n      log Cancel(\n            address tokenGet=tokenGet,\n            uint256 amountGet=0,\n            address tokenGive=address(tokenGive),\n            uint256 amountGive=amountGive,\n            uint256 expires=expires,\n            uint256 nonce=nonce,\n            address user=caller,\n            uint8 v=v << 248,\n            bytes32 r=r,\n            bytes32 s=s)\n  else:\n      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, hash), v << 248, r, s) # precompiled\n      require erecover.result\n      require address(signer) == caller\n      orderFills[caller][hash] = amountGet\n      log Cancel(\n            address tokenGet=address(tokenGet),\n            uint256 amountGet=amountGet,\n            address tokenGive=address(tokenGive),\n            uint256 amountGive=amountGive,\n            uint256 expires=expires,\n            uint256 nonce=nonce,\n            address user=caller,\n            uint8 v=v << 248,\n            bytes32 r=r,\n            bytes32 s=s)\n\ndef availableVolume(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s): # not payable\n  hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n  require sha256hash.result\n  if not stor7[address(user)][hash]:\n      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, hash), v << 248, r, s) # precompiled\n      require erecover.result\n      if address(signer) != user:\n          return 0\n  if block.number > expires:\n      return 0\n  require orderFills[address(user)][hash] <= amountGet\n  if tokens[address(tokenGive)][address(user)]:\n      require tokens[address(tokenGive)][address(user)]\n      require amountGet * tokens[address(tokenGive)][address(user)] / tokens[address(tokenGive)][address(user)] == amountGet\n  require amountGive\n  if amountGet - orderFills[address(user)][hash] >= amountGet * tokens[address(tokenGive)][address(user)] / amountGive:\n      return (amountGet * tokens[address(tokenGive)][address(user)] / amountGive)\n  return (amountGet - orderFills[address(user)][hash])\n\ndef testTrade(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s, uint256 amount, address sender): # not payable\n  if tokens[address(tokenGet)][address(sender)] >= amount:\n      hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n      require sha256hash.result\n      if stor7[address(user)][hash]:\n          if block.number > expires:\n              if 0 >= amount:\n                  return 1\n          else:\n              require orderFills[address(user)][hash] <= amountGet\n              if tokens[address(tokenGive)][address(user)]:\n                  require tokens[address(tokenGive)][address(user)]\n                  require amountGet * tokens[address(tokenGive)][address(user)] / tokens[address(tokenGive)][address(user)] == amountGet\n              require amountGive\n              if amountGet - orderFills[address(user)][hash] >= amountGet * tokens[address(tokenGive)][address(user)] / amountGive:\n                  if amountGet * tokens[address(tokenGive)][address(user)] / amountGive >= amount:\n                      return 1\n              else:\n                  if amountGet - orderFills[address(user)][hash] >= amount:\n                      return 1\n      else:\n          signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, hash), v << 248, r, s) # precompiled\n          require erecover.result\n          if address(signer) != user:\n              if 0 >= amount:\n                  return 1\n          else:\n              if block.number > expires:\n                  if 0 >= amount:\n                      return 1\n              else:\n                  require orderFills[address(user)][hash] <= amountGet\n                  if tokens[address(tokenGive)][address(user)]:\n                      require tokens[address(tokenGive)][address(user)]\n                      require amountGet * tokens[address(tokenGive)][address(user)] / tokens[address(tokenGive)][address(user)] == amountGet\n                  require amountGive\n                  if amountGet - orderFills[address(user)][hash] >= amountGet * tokens[address(tokenGive)][address(user)] / amountGive:\n                      if amountGet * tokens[address(tokenGive)][address(user)] / amountGive >= amount:\n                          return 1\n                  else:\n                      if amountGet - orderFills[address(user)][hash] >= amount:\n                          return 1\n      return 0\n  else:\n      return 0\n\ndef trade(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s, uint256 amount): # not payable\n  hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n  require sha256hash.result\n  if stor7[address(user)][hash]:\n      require block.number <= expires\n      require amount + orderFills[address(user)][hash] >= orderFills[address(user)][hash]\n      require amount + orderFills[address(user)][hash] >= amount\n      require amount + orderFills[address(user)][hash] <= amountGet\n      if not amount:\n          if not amount:\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]\n                  require tokens[address(tokenGet)][stor1] >= 0\n                  tokens[address(tokenGet)][stor1] = (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1]\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require ext_code.size(accountLevelsAddr)\n              call accountLevelsAddr.accountLevel(address user) with:\n                   gas gas_remaining - 50 wei\n                  args user\n              require ext_call.success\n              if ext_call.return_data[0] != 1:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  if 2 == ext_call.return_data[0]:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  else:\n                      require amount >= amount\n                      require amount >= 0\n                      require feeMake * amount / 10^18 <= amount\n                      require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              if not amount:\n                  if ext_call.return_data[0] != 2:\n                      if (feeTake * amount / 10^18) + amount >= amount:\n                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                              if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                  if (feeRebate * amount / 10^18) + amount >= amount:\n                                      if (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18:\n                                          if feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount:\n                                              if (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                  if tokens[address(tokenGet)][user] >= 0:\n                                                      tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  else:\n                      if (feeTake * amount / 10^18) + amount >= amount:\n                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                              if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                  if (feeTake * amount / 10^18) + amount >= amount:\n                                      if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                          if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                              if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                  if tokens[address(tokenGet)][user] >= 0:\n                                                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              else:\n                  require amount\n                  if feeRebate * amount / amount == feeRebate:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeRebate * amount / 10^18) + amount >= amount:\n                                          if (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount:\n                                                  if (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              revert \n          require amount\n          require feeTake * amount / amount == feeTake\n          if not accountLevelsAddr:\n              require (feeTake * amount / 10^18) + amount >= amount\n              require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n              require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n              tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n              require amount >= amount\n              require amount >= 0\n              require feeMake * amount / 10^18 <= amount\n              require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n              require tokens[address(tokenGet)][user] >= 0\n              tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n              require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n              require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n              require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n              require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]\n              require tokens[address(tokenGet)][stor1] >= 0\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          require ext_code.size(accountLevelsAddr)\n          call accountLevelsAddr.accountLevel(address user) with:\n               gas gas_remaining - 50 wei\n              args user\n          require ext_call.success\n          if ext_call.return_data[0] != 1:\n              require (feeTake * amount / 10^18) + amount >= amount\n              require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n              require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n              tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n              if ext_call.return_data[0] != 2:\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n              else:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                  require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n          else:\n              if not amount:\n                  if ext_call.return_data[0] != 2:\n                      if (feeTake * amount / 10^18) + amount >= amount:\n                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                              if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                  if (feeRebate * amount / 10^18) + amount >= amount:\n                                      if (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18:\n                                          if feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount:\n                                              if (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                  if tokens[address(tokenGet)][user] >= 0:\n                                                      tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  else:\n                      if (feeTake * amount / 10^18) + amount >= amount:\n                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                              if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                  if (feeTake * amount / 10^18) + amount >= amount:\n                                      if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                          if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                              if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                  if tokens[address(tokenGet)][user] >= 0:\n                                                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  revert \n              require amount\n              require feeRebate * amount / amount == feeRebate\n              require (feeTake * amount / 10^18) + amount >= amount\n              require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n              require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n              tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n              if ext_call.return_data[0] != 2:\n                  require (feeRebate * amount / 10^18) + amount >= amount\n                  require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                  require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                  require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n              else:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                  require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n      else:\n          require amount\n          require feeMake * amount / amount == feeMake\n          if not amount:\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]\n                  require tokens[address(tokenGet)][stor1] >= 0\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require ext_code.size(accountLevelsAddr)\n              call accountLevelsAddr.accountLevel(address user) with:\n                   gas gas_remaining - 50 wei\n                  args user\n              require ext_call.success\n              if ext_call.return_data[0] != 1:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  if ext_call.return_data[0] != 2:\n                      require amount >= amount\n                      require amount >= 0\n                      require feeMake * amount / 10^18 <= amount\n                      require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  else:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n              else:\n                  if not amount:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeRebate * amount / 10^18) + amount >= amount:\n                                          if (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount:\n                                                  if (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert \n                  require amount\n                  require feeRebate * amount / amount == feeRebate\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  if ext_call.return_data[0] != 2:\n                      require (feeRebate * amount / 10^18) + amount >= amount\n                      require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                      require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  else:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n          else:\n              require amount\n              require feeTake * amount / amount == feeTake\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]:\n              else:\n                  require ext_code.size(accountLevelsAddr)\n                  call accountLevelsAddr.accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args user\n                  require ext_call.success\n                  if ext_call.return_data[0] != 1:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if amount >= amount:\n                                          if amount >= 0:\n                                              if feeMake * amount / 10^18 <= amount:\n                                                  if amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert \n                  if not amount:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                  else:\n                      require amount\n                      require feeRebate * amount / amount == feeRebate\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n  else:\n      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, hash), v << 248, r, s) # precompiled\n      require erecover.result\n      require address(signer) == user\n      require block.number <= expires\n      require amount + orderFills[address(user)][hash] >= orderFills[address(user)][hash]\n      require amount + orderFills[address(user)][hash] >= amount\n      require amount + orderFills[address(user)][hash] <= amountGet\n      if not amount:\n          if not amount:\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]\n                  require tokens[address(tokenGet)][stor1] >= 0\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require ext_code.size(accountLevelsAddr)\n              call accountLevelsAddr.accountLevel(address user) with:\n                   gas gas_remaining - 50 wei\n                  args user\n              require ext_call.success\n              if ext_call.return_data[0] != 1:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  if ext_call.return_data[0] != 2:\n                      require amount >= amount\n                      require amount >= 0\n                      require feeMake * amount / 10^18 <= amount\n                      require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  else:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n              else:\n                  if not amount:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeRebate * amount / 10^18) + amount >= amount:\n                                          if (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount:\n                                                  if (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert \n                  require amount\n                  require feeRebate * amount / amount == feeRebate\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  if ext_call.return_data[0] != 2:\n                      require (feeRebate * amount / 10^18) + amount >= amount\n                      require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                      require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  else:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n          else:\n              require amount\n              require feeTake * amount / amount == feeTake\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]:\n              else:\n                  require ext_code.size(accountLevelsAddr)\n                  call accountLevelsAddr.accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args user\n                  require ext_call.success\n                  if ext_call.return_data[0] != 1:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if amount >= amount:\n                                          if amount >= 0:\n                                              if feeMake * amount / 10^18 <= amount:\n                                                  if amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert \n                  if not amount:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                  else:\n                      require amount\n                      require feeRebate * amount / amount == feeRebate\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n      else:\n          require amount\n          require feeMake * amount / amount == feeMake\n          if not amount:\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]:\n              else:\n                  require ext_code.size(accountLevelsAddr)\n                  call accountLevelsAddr.accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args user\n                  require ext_call.success\n                  if ext_call.return_data[0] != 1:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if amount >= amount:\n                                          if amount >= 0:\n                                              if feeMake * amount / 10^18 <= amount:\n                                                  if amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert \n                  if not amount:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                  else:\n                      require amount\n                      require feeRebate * amount / amount == feeRebate\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n          else:\n              require amount\n              require feeTake * amount / amount == feeTake\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n              else:\n                  require ext_code.size(accountLevelsAddr)\n                  call accountLevelsAddr.accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args user\n                  require ext_call.success\n                  if ext_call.return_data[0] != 1:\n                      if ext_call.return_data[0] != 2:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                          tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                          require amount >= amount\n                          require amount >= 0\n                          require feeMake * amount / 10^18 <= amount\n                          require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                          require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                          require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  else:\n                      if not amount:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                          tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                          if ext_call.return_data[0] != 2:\n                              require (feeRebate * amount / 10^18) + amount >= amount\n                              require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                              require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                              require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                              require tokens[address(tokenGet)][user] >= 0\n                              tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          else:\n                              require (feeTake * amount / 10^18) + amount >= amount\n                              require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                              require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                              require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                              require tokens[address(tokenGet)][user] >= 0\n                              tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      else:\n                          require amount\n                          require feeRebate * amount / amount == feeRebate\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                          tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                          if 2 == ext_call.return_data[0]:\n                              require (feeTake * amount / 10^18) + amount >= amount\n                              require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                              require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                              require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                              require tokens[address(tokenGet)][user] >= 0\n                              tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          else:\n                              require (feeRebate * amount / 10^18) + amount >= amount\n                              require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                              require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                              require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                              require tokens[address(tokenGet)][user] >= 0\n                              tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: # Palkeoramix decompiler. \n\ndef storage:\n  adminAddress is address at storage 0\n  feeAccount is address at storage 1\n  accountLevelsAddr is address at storage 2\n  feeMake is uint256 at storage 3\n  feeTake is uint256 at storage 4\n  feeRebate is uint256 at storage 5\n  tokens is mapping of uint256 at storage 6\n  stor7 is mapping of uint8 at storage 7\n  orderFills is mapping of uint256 at storage 8\n\ndef orderFills(address _param1, bytes32 _param2): # not payable\n  return orderFills[_param1][_param2]\n\ndef amountFilled(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s): # not payable\n  hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n  require sha256hash.result\n  return orderFills[address(user)][hash]\n\ndef tokens(address _param1, address _param2): # not payable\n  return tokens[_param1][_param2]\n\ndef feeMake(): # not payable\n  return feeMake\n\ndef feeAccount(): # not payable\n  return feeAccount\n\ndef feeRebate(): # not payable\n  return feeRebate\n\ndef orders(address _param1, bytes32 _param2): # not payable\n  return bool(stor7[_param1][_param2])\n\ndef feeTake(): # not payable\n  return feeTake\n\ndef accountLevelsAddr(): # not payable\n  return accountLevelsAddr\n\ndef balanceOf(address token, address user): # not payable\n  return tokens[address(token)][address(user)]\n\ndef admin(): # not payable\n  return adminAddress\n\n#\n#  Regular functions\n#\n\ndef _fallback(?): # not payable, default function\n  revert \n\ndef changeAdmin(address newAdmin): # not payable\n  require adminAddress == caller\n  adminAddress = newAdmin\n\ndef changeFeeAccount(address feeAccount_): # not payable\n  require adminAddress == caller\n  feeAccount = feeAccount_\n\ndef changeAccountLevelsAddr(address accountLevelsAddr_): # not payable\n  require adminAddress == caller\n  accountLevelsAddr = accountLevelsAddr_\n\ndef changeFeeMake(uint256 feeMake_): # not payable\n  require adminAddress == caller\n  require feeMake_ <= feeMake\n  feeMake = feeMake_\n\ndef changeFeeTake(uint256 feeTake_): # not payable\n  require adminAddress == caller\n  require feeTake_ <= feeTake\n  require feeTake_ >= feeRebate\n  feeTake = feeTake_\n\ndef changeFeeRebate(uint256 feeRebate_): # not payable\n  require adminAddress == caller\n  require feeRebate_ >= feeRebate\n  require feeRebate_ <= feeTake\n  feeRebate = feeRebate_\n\ndef deposit() payable: \n  require call.value + tokens[0][caller] >= tokens[0][caller]\n  require call.value + tokens[0][caller] >= call.value\n  tokens[0][caller] += call.value\n  log Deposit(\n        address token=0,\n        address user=caller,\n        uint256 amount=call.value,\n        uint256 balance=call.value + tokens[0][caller])\n\ndef withdraw(uint256 amount): # not payable\n  require tokens[0][caller] >= amount\n  require amount <= tokens[0][caller]\n  tokens[0][caller] -= amount\n  call caller with:\n     value amount wei\n       gas gas_remaining - 34050 wei\n  require ext_call.success\n  log Withdraw(\n        address token=0,\n        address user=caller,\n        uint256 amount=amount,\n        uint256 balance=tokens[0][caller])\n\ndef order(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce): # not payable\n  hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n  require sha256hash.result\n  stor7[caller][hash] = 1\n  log Order(\n        address tokenGet=tokenGet,\n        uint256 amountGet=0,\n        address tokenGive=address(tokenGive),\n        uint256 amountGive=amountGive,\n        uint256 expires=expires,\n        uint256 nonce=nonce,\n        address user=caller)\n\ndef withdrawToken(address token, uint256 amount): # not payable\n  require token\n  require tokens[address(token)][caller] >= amount\n  require amount <= tokens[address(token)][caller]\n  tokens[address(token)][caller] -= amount\n  require ext_code.size(token)\n  call token.transfer(address recipient, uint256 amount) with:\n       gas gas_remaining - 50 wei\n      args caller, amount\n  require ext_call.success\n  require ext_call.return_data[0]\n  log Withdraw(\n        address token=address(token),\n        address user=caller,\n        uint256 amount=amount,\n        uint256 balance=tokens[address(token)][caller])\n\ndef depositToken(address token, uint256 amount): # not payable\n  require token\n  require ext_code.size(token)\n  call token.transferFrom(address sender, address recipient, uint256 amount) with:\n       gas gas_remaining - 50 wei\n      args caller, address(this.address), amount\n  require ext_call.success\n  require ext_call.return_data[0]\n  require amount + tokens[address(token)][caller] >= tokens[address(token)][caller]\n  require amount + tokens[address(token)][caller] >= amount\n  tokens[address(token)][caller] += amount\n  log Deposit(\n        address token=address(token),\n        address user=caller,\n        uint256 amount=amount,\n        uint256 balance=amount + tokens[address(token)][caller])\n\ndef cancelOrder(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, uint8 v, bytes32 r, bytes32 s): # not payable\n  hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n  require sha256hash.result\n  if stor7[caller][hash]:\n      orderFills[caller][hash] = amountGet\n      log Cancel(\n            address tokenGet=tokenGet,\n            uint256 amountGet=0,\n            address tokenGive=address(tokenGive),\n            uint256 amountGive=amountGive,\n            uint256 expires=expires,\n            uint256 nonce=nonce,\n            address user=caller,\n            uint8 v=v << 248,\n            bytes32 r=r,\n            bytes32 s=s)\n  else:\n      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, hash), v << 248, r, s) # precompiled\n      require erecover.result\n      require address(signer) == caller\n      orderFills[caller][hash] = amountGet\n      log Cancel(\n            address tokenGet=address(tokenGet),\n            uint256 amountGet=amountGet,\n            address tokenGive=address(tokenGive),\n            uint256 amountGive=amountGive,\n            uint256 expires=expires,\n            uint256 nonce=nonce,\n            address user=caller,\n            uint8 v=v << 248,\n            bytes32 r=r,\n            bytes32 s=s)\n\ndef availableVolume(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s): # not payable\n  hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n  require sha256hash.result\n  if not stor7[address(user)][hash]:\n      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, hash), v << 248, r, s) # precompiled\n      require erecover.result\n      if address(signer) != user:\n          return 0\n  if block.number > expires:\n      return 0\n  require orderFills[address(user)][hash] <= amountGet\n  if tokens[address(tokenGive)][address(user)]:\n      require tokens[address(tokenGive)][address(user)]\n      require amountGet * tokens[address(tokenGive)][address(user)] / tokens[address(tokenGive)][address(user)] == amountGet\n  require amountGive\n  if amountGet - orderFills[address(user)][hash] >= amountGet * tokens[address(tokenGive)][address(user)] / amountGive:\n      return (amountGet * tokens[address(tokenGive)][address(user)] / amountGive)\n  return (amountGet - orderFills[address(user)][hash])\n\ndef testTrade(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s, uint256 amount, address sender): # not payable\n  if tokens[address(tokenGet)][address(sender)] >= amount:\n      hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n      require sha256hash.result\n      if stor7[address(user)][hash]:\n          if block.number > expires:\n              if 0 >= amount:\n                  return 1\n          else:\n              require orderFills[address(user)][hash] <= amountGet\n              if tokens[address(tokenGive)][address(user)]:\n                  require tokens[address(tokenGive)][address(user)]\n                  require amountGet * tokens[address(tokenGive)][address(user)] / tokens[address(tokenGive)][address(user)] == amountGet\n              require amountGive\n              if amountGet - orderFills[address(user)][hash] >= amountGet * tokens[address(tokenGive)][address(user)] / amountGive:\n                  if amountGet * tokens[address(tokenGive)][address(user)] / amountGive >= amount:\n                      return 1\n              else:\n                  if amountGet - orderFills[address(user)][hash] >= amount:\n                      return 1\n      else:\n          signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, hash), v << 248, r, s) # precompiled\n          require erecover.result\n          if address(signer) != user:\n              if 0 >= amount:\n                  return 1\n          else:\n              if block.number > expires:\n                  if 0 >= amount:\n                      return 1\n              else:\n                  require orderFills[address(user)][hash] <= amountGet\n                  if tokens[address(tokenGive)][address(user)]:\n                      require tokens[address(tokenGive)][address(user)]\n                      require amountGet * tokens[address(tokenGive)][address(user)] / tokens[address(tokenGive)][address(user)] == amountGet\n                  require amountGive\n                  if amountGet - orderFills[address(user)][hash] >= amountGet * tokens[address(tokenGive)][address(user)] / amountGive:\n                      if amountGet * tokens[address(tokenGive)][address(user)] / amountGive >= amount:\n                          return 1\n                  else:\n                      if amountGet - orderFills[address(user)][hash] >= amount:\n                          return 1\n      return 0\n  else:\n      return 0\n\ndef trade(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s, uint256 amount): # not payable\n  hash = sha256hash(address(this.address), 0, uint64(amountGet), tokenGive, amountGive, expires, nonce) # precompiled\n  require sha256hash.result\n  if stor7[address(user)][hash]:\n      require block.number <= expires\n      require amount + orderFills[address(user)][hash] >= orderFills[address(user)][hash]\n      require amount + orderFills[address(user)][hash] >= amount\n      require amount + orderFills[address(user)][hash] <= amountGet\n      if not amount:\n          if not amount:\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]\n                  require tokens[address(tokenGet)][stor1] >= 0\n                  tokens[address(tokenGet)][stor1] = (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1]\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require ext_code.size(accountLevelsAddr)\n              call accountLevelsAddr.accountLevel(address user) with:\n                   gas gas_remaining - 50 wei\n                  args user\n              require ext_call.success\n              if ext_call.return_data[0] != 1:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  if 2 == ext_call.return_data[0]:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  else:\n                      require amount >= amount\n                      require amount >= 0\n                      require feeMake * amount / 10^18 <= amount\n                      require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              if not amount:\n                  if ext_call.return_data[0] != 2:\n                      if (feeTake * amount / 10^18) + amount >= amount:\n                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                              if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                  if (feeRebate * amount / 10^18) + amount >= amount:\n                                      if (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18:\n                                          if feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount:\n                                              if (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                  if tokens[address(tokenGet)][user] >= 0:\n                                                      tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  else:\n                      if (feeTake * amount / 10^18) + amount >= amount:\n                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                              if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                  if (feeTake * amount / 10^18) + amount >= amount:\n                                      if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                          if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                              if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                  if tokens[address(tokenGet)][user] >= 0:\n                                                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              else:\n                  require amount\n                  if feeRebate * amount / amount == feeRebate:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeRebate * amount / 10^18) + amount >= amount:\n                                          if (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount:\n                                                  if (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              revert \n          require amount\n          require feeTake * amount / amount == feeTake\n          if not accountLevelsAddr:\n              require (feeTake * amount / 10^18) + amount >= amount\n              require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n              require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n              tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n              require amount >= amount\n              require amount >= 0\n              require feeMake * amount / 10^18 <= amount\n              require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n              require tokens[address(tokenGet)][user] >= 0\n              tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n              require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n              require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n              require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n              require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]\n              require tokens[address(tokenGet)][stor1] >= 0\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          require ext_code.size(accountLevelsAddr)\n          call accountLevelsAddr.accountLevel(address user) with:\n               gas gas_remaining - 50 wei\n              args user\n          require ext_call.success\n          if ext_call.return_data[0] != 1:\n              require (feeTake * amount / 10^18) + amount >= amount\n              require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n              require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n              tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n              if ext_call.return_data[0] != 2:\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n              else:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                  require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n          else:\n              if not amount:\n                  if ext_call.return_data[0] != 2:\n                      if (feeTake * amount / 10^18) + amount >= amount:\n                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                              if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                  if (feeRebate * amount / 10^18) + amount >= amount:\n                                      if (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18:\n                                          if feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount:\n                                              if (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                  if tokens[address(tokenGet)][user] >= 0:\n                                                      tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  else:\n                      if (feeTake * amount / 10^18) + amount >= amount:\n                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                              if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                  if (feeTake * amount / 10^18) + amount >= amount:\n                                      if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                          if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                              if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                  if tokens[address(tokenGet)][user] >= 0:\n                                                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  revert \n              require amount\n              require feeRebate * amount / amount == feeRebate\n              require (feeTake * amount / 10^18) + amount >= amount\n              require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n              require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n              tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n              if ext_call.return_data[0] != 2:\n                  require (feeRebate * amount / 10^18) + amount >= amount\n                  require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                  require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                  require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n              else:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                  require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n      else:\n          require amount\n          require feeMake * amount / amount == feeMake\n          if not amount:\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]\n                  require tokens[address(tokenGet)][stor1] >= 0\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require ext_code.size(accountLevelsAddr)\n              call accountLevelsAddr.accountLevel(address user) with:\n                   gas gas_remaining - 50 wei\n                  args user\n              require ext_call.success\n              if ext_call.return_data[0] != 1:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  if ext_call.return_data[0] != 2:\n                      require amount >= amount\n                      require amount >= 0\n                      require feeMake * amount / 10^18 <= amount\n                      require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  else:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n              else:\n                  if not amount:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeRebate * amount / 10^18) + amount >= amount:\n                                          if (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount:\n                                                  if (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert \n                  require amount\n                  require feeRebate * amount / amount == feeRebate\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  if ext_call.return_data[0] != 2:\n                      require (feeRebate * amount / 10^18) + amount >= amount\n                      require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                      require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  else:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n          else:\n              require amount\n              require feeTake * amount / amount == feeTake\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]:\n              else:\n                  require ext_code.size(accountLevelsAddr)\n                  call accountLevelsAddr.accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args user\n                  require ext_call.success\n                  if ext_call.return_data[0] != 1:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if amount >= amount:\n                                          if amount >= 0:\n                                              if feeMake * amount / 10^18 <= amount:\n                                                  if amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert \n                  if not amount:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                  else:\n                      require amount\n                      require feeRebate * amount / amount == feeRebate\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n  else:\n      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, hash), v << 248, r, s) # precompiled\n      require erecover.result\n      require address(signer) == user\n      require block.number <= expires\n      require amount + orderFills[address(user)][hash] >= orderFills[address(user)][hash]\n      require amount + orderFills[address(user)][hash] >= amount\n      require amount + orderFills[address(user)][hash] <= amountGet\n      if not amount:\n          if not amount:\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]\n                  require tokens[address(tokenGet)][stor1] >= 0\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require ext_code.size(accountLevelsAddr)\n              call accountLevelsAddr.accountLevel(address user) with:\n                   gas gas_remaining - 50 wei\n                  args user\n              require ext_call.success\n              if ext_call.return_data[0] != 1:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  if ext_call.return_data[0] != 2:\n                      require amount >= amount\n                      require amount >= 0\n                      require feeMake * amount / 10^18 <= amount\n                      require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  else:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                      require feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n              else:\n                  if not amount:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeRebate * amount / 10^18) + amount >= amount:\n                                          if (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount:\n                                                  if (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert \n                  require amount\n                  require feeRebate * amount / amount == feeRebate\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  if ext_call.return_data[0] != 2:\n                      require (feeRebate * amount / 10^18) + amount >= amount\n                      require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                      require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  else:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n          else:\n              require amount\n              require feeTake * amount / amount == feeTake\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]:\n              else:\n                  require ext_code.size(accountLevelsAddr)\n                  call accountLevelsAddr.accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args user\n                  require ext_call.success\n                  if ext_call.return_data[0] != 1:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if amount >= amount:\n                                          if amount >= 0:\n                                              if feeMake * amount / 10^18 <= amount:\n                                                  if amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert \n                  if not amount:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                  else:\n                      require amount\n                      require feeRebate * amount / amount == feeRebate\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n      else:\n          require amount\n          require feeMake * amount / amount == feeMake\n          if not amount:\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                  if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) + tokens[address(tokenGet)][stor1] >= tokens[address(tokenGet)][stor1]:\n              else:\n                  require ext_code.size(accountLevelsAddr)\n                  call accountLevelsAddr.accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args user\n                  require ext_call.success\n                  if ext_call.return_data[0] != 1:\n                      if ext_call.return_data[0] != 2:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if amount >= amount:\n                                          if amount >= 0:\n                                              if feeMake * amount / 10^18 <= amount:\n                                                  if amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if (feeTake * amount / 10^18) + amount >= amount:\n                              if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                  if (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]:\n                                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                                      if (feeTake * amount / 10^18) + amount >= amount:\n                                          if (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18:\n                                              if feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount:\n                                                  if (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]:\n                                                      if tokens[address(tokenGet)][user] >= 0:\n                                                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                                                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                                                              if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18:\n                                                                  if feeTake * amount / 10^18 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert \n                  if not amount:\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          if (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18:\n                  else:\n                      require amount\n                      require feeRebate * amount / amount == feeRebate\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      if ext_call.return_data[0] != 2:\n                          require (feeRebate * amount / 10^18) + amount >= amount\n                          require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                          require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      else:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                          require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n          else:\n              require amount\n              require feeTake * amount / amount == feeTake\n              if not accountLevelsAddr:\n                  require (feeTake * amount / 10^18) + amount >= amount\n                  require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                  require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                  tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                  require amount >= amount\n                  require amount >= 0\n                  require feeMake * amount / 10^18 <= amount\n                  require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                  require tokens[address(tokenGet)][user] >= 0\n                  tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                  require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n              else:\n                  require ext_code.size(accountLevelsAddr)\n                  call accountLevelsAddr.accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args user\n                  require ext_call.success\n                  if ext_call.return_data[0] != 1:\n                      if ext_call.return_data[0] != 2:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                          tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                          require amount >= amount\n                          require amount >= 0\n                          require feeMake * amount / 10^18 <= amount\n                          require amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                          require tokens[address(tokenGet)][user] >= 0\n                          tokens[address(tokenGet)][address(user)] = amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                          require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                          require 0 <= (feeTake * amount / 10^18) + (feeMake * amount / 10^18)\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                      tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                      require (feeTake * amount / 10^18) + amount >= amount\n                      require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                      require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                      require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                      require tokens[address(tokenGet)][user] >= 0\n                      tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeMake * amount / 10^18\n                      require (feeTake * amount / 10^18) + (feeMake * amount / 10^18) >= feeTake * amount / 10^18\n                  else:\n                      if not amount:\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                          tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                          if ext_call.return_data[0] != 2:\n                              require (feeRebate * amount / 10^18) + amount >= amount\n                              require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                              require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                              require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                              require tokens[address(tokenGet)][user] >= 0\n                              tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          else:\n                              require (feeTake * amount / 10^18) + amount >= amount\n                              require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                              require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                              require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                              require tokens[address(tokenGet)][user] >= 0\n                              tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                      else:\n                          require amount\n                          require feeRebate * amount / amount == feeRebate\n                          require (feeTake * amount / 10^18) + amount >= amount\n                          require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                          require (feeTake * amount / 10^18) + amount <= tokens[address(tokenGet)][caller]\n                          tokens[address(tokenGet)][caller] = tokens[address(tokenGet)][caller] - (feeTake * amount / 10^18) - amount\n                          if 2 == ext_call.return_data[0]:\n                              require (feeTake * amount / 10^18) + amount >= amount\n                              require (feeTake * amount / 10^18) + amount >= feeTake * amount / 10^18\n                              require feeMake * amount / 10^18 <= (feeTake * amount / 10^18) + amount\n                              require (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                              require tokens[address(tokenGet)][user] >= 0\n                              tokens[address(tokenGet)][address(user)] = (feeTake * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n                          else:\n                              require (feeRebate * amount / 10^18) + amount >= amount\n                              require (feeRebate * amount / 10^18) + amount >= feeRebate * amount / 10^18\n                              require feeMake * amount / 10^18 <= (feeRebate * amount / 10^18) + amount\n                              require (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user] >= tokens[address(tokenGet)][user]\n                              require tokens[address(tokenGet)][user] >= 0\n                              tokens[address(tokenGet)][address(user)] = (feeRebate * amount / 10^18) + amount - (feeMake * amount / 10^18) + tokens[address(tokenGet)][user]\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n.",
	"status": "1",
	"time_cost": 59.580867767333984,
	"usage": {
		"completion_tokens": 971,
		"prompt_tokens": 21461,
		"total_tokens": 22432
	}
}