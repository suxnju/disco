{
	"address": "0x428472c5664d079eb4f035d872801241a4e8a4de",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity smart contract code based on the decompiled EVM bytecode:\n\n```solidity\npragma solidity >=0.5.0 <0.8.0;\n\ncontract InvestmentContract {\n    \n    uint256 private _currentInvestment;\n    address payable private _currentInvestor;\n    \n    function currentInvestment() public view returns (uint256) { \n        return _currentInvestment;\n    }\n    \n    function() external payable { \n        require(msg.value > _currentInvestment, \"Invested amount must be greater than the current investment\");\n        bool success = _currentInvestor.send(_currentInvestment);\n        require(success, \"Failed to send Ether\");\n        _currentInvestor = msg.sender;\n        _currentInvestment = msg.value;\n    }\n    \n    function currentInvestor() public view returns (address) { \n        return _currentInvestor;\n    }\n    \n    // Removed function selector part because it's not required in Solidity.\n}\n```\nPlease note that the original decompiled code is written in a language that is very close to assembly, not in a high-level language such as Solidity. Some parts (like function selector logic) are automatically handled by the Solidity compiler and EVM, and hence are not present in the resulting Solidity code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701469833,
	"id": "chatcmpl-8R6JlpgtuCH8EzIOYweXsNdEuUrej",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 00:14 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _currentInvestment; // STORAGE[0x1]\naddress _currentInvestor; // STORAGE[0x0] bytes 0 to 19\n\n\nfunction currentInvestment() public nonPayable { \n    return _currentInvestment;\n}\n\nfunction fallback() public payable { \n    require(msg.value > _currentInvestment);\n    v0 = _currentInvestor.call().value(_currentInvestment).gas(!_currentInvestment * 2300);\n    _currentInvestor = msg.sender;\n    _currentInvestment = msg.value;\n}\n\nfunction currentInvestor() public nonPayable { \n    return _currentInvestor;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x523e27d4 == function_selector) {\n            currentInvestor();\n        } else if (0xb2667cd0 == function_selector) {\n            currentInvestment();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 00:14 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _currentInvestment; // STORAGE[0x1]\naddress _currentInvestor; // STORAGE[0x0] bytes 0 to 19\n\n\nfunction currentInvestment() public nonPayable { \n    return _currentInvestment;\n}\n\nfunction fallback() public payable { \n    require(msg.value > _currentInvestment);\n    v0 = _currentInvestor.call().value(_currentInvestment).gas(!_currentInvestment * 2300);\n    _currentInvestor = msg.sender;\n    _currentInvestment = msg.value;\n}\n\nfunction currentInvestor() public nonPayable { \n    return _currentInvestor;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x523e27d4 == function_selector) {\n            currentInvestor();\n        } else if (0xb2667cd0 == function_selector) {\n            currentInvestment();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 00:14 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _currentInvestment; // STORAGE[0x1]\naddress _currentInvestor; // STORAGE[0x0] bytes 0 to 19\n\n\nfunction currentInvestment() public nonPayable { \n    return _currentInvestment;\n}\n\nfunction fallback() public payable { \n    require(msg.value > _currentInvestment);\n    v0 = _currentInvestor.call().value(_currentInvestment).gas(!_currentInvestment * 2300);\n    _currentInvestor = msg.sender;\n    _currentInvestment = msg.value;\n}\n\nfunction currentInvestor() public nonPayable { \n    return _currentInvestor;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x523e27d4 == function_selector) {\n            currentInvestor();\n        } else if (0xb2667cd0 == function_selector) {\n            currentInvestment();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 9.174736261367798,
	"usage": {
		"completion_tokens": 264,
		"prompt_tokens": 333,
		"total_tokens": 597
	}
}