{
	"address": "0x67c2fc3b654c04ad5284508ef6fe7fa387f5f050",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity code corresponding to the given decompiled EVM Bytecode's contract is :\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n    uint256 totalSupply_;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor(uint256 total) public {\n        totalSupply_ = total;\n        balances[msg.sender] = totalSupply_;\n        emit Transfer(address(0), msg.sender, totalSupply_);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function balanceOf(address tokenOwner) public view returns (uint256) {\n        return balances[tokenOwner];\n    }\n\n    function transfer(address receiver, uint256 numTokens) public returns (bool) {\n        require(numTokens <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender] - numTokens;\n        balances[receiver] = balances[receiver] + numTokens;\n        emit Transfer(msg.sender, receiver, numTokens);\n        return true;\n    }\n\n    function approve(address delegate, uint256 numTokens) public returns (bool) {\n        allowed[msg.sender][delegate] = numTokens;\n        emit Approval(msg.sender, delegate, numTokens);\n        return true;\n    }\n\n    function allowance(address owner, address delegate) public view returns (uint) {\n        return allowed[owner][delegate];\n    }\n\n    function transferFrom(address owner, address buyer, uint256 numTokens) public returns (bool) {\n        require(numTokens <= balances[owner]);\n        require(numTokens <= allowed[owner][msg.sender]);\n\n        balances[owner] = balances[owner] - numTokens;\n        allowed[owner][msg.sender] = allowed[owner][msg.sender] - numTokens;\n        balances[buyer] = balances[buyer] + numTokens;\n        emit Transfer(owner, buyer, numTokens);\n        return true;\n    }\n}\n```\n\nThis represents a simple ERC20 token contract where tokens can be minted at contract creation, transferred between accounts and allowances can be set and used. \n\nPlease note: The provided decompiled code seems to be incomplete and contains many unresolved symbols and jump destinations, hence the solidity code provided is just a reference implementation of a ERC20 contract and may not replicate all the functionality of the original contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700631950,
	"id": "chatcmpl-8NaLWvfgZoDGYWfKINwONrwREyYJ6",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (0x7d1db4a5 > var0) {\n                if (0x2d53e1bd > var0) {\n                    if (var0 == 0x06fdde03) {\n                        // Dispatch table entry for name()\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var temp0 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp0 + 0x40;\n                        memory[temp0:temp0 + 0x20] = 0x0c;\n                        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x29b4a0b734a1902a37b5b2b7 << 0xa1;\n                        var1 = 0x016d;\n                        var var3 = memory[0x40:0x60];\n                        var var2 = temp0;\n                        var1 = symbol(var2, var3);\n                    \n                    label_016D:\n                        var temp1 = memory[0x40:0x60];\n                        return memory[temp1:temp1 + var1 - temp1];\n                    } else if (var0 == 0x095ea7b3) {\n                        // Dispatch table entry for approve(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0196;\n                        var2 = 0x0191;\n                        var3 = msg.data.length;\n                        var var4 = 0x04;\n                        var2, var3 = func_1620(var3, var4);\n                        var4 = 0x00;\n                        var var5 = 0x0418;\n                        var var6 = msg.sender;\n                        var var7 = var2;\n                        var var8 = var3;\n                        func_0AD0(var6, var7, var8);\n                    \n                    label_0418:\n                        var4 = 0x01;\n                        var1 = var4;\n                        // Error: Could not resolve jump destination!\n                    } else if (var0 == 0x0faee56f) {\n                        // Dispatch table entry for 0x0faee56f (unknown)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x01bc;\n                        var2 = storage[0x12];\n                    \n                    label_01BC:\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = var2;\n                        var2 = temp2 + 0x20;\n                        goto label_016D;\n                    } else if (var0 == 0x18160ddd) {\n                        // Dispatch table entry for totalSupply()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x01bc;\n                        var1 = totalSupply();\n                        goto label_01BC;\n                    } else if (var0 == 0x23b872dd) {\n                        // Dispatch table entry for transferFrom(address,address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0196;\n                        var2 = 0x01fa;\n                        var3 = msg.data.length;\n                        var4 = 0x04;\n                        var2, var3, var4 = func_164C(var3, var4);\n                        var5 = 0x00;\n                        var6 = 0x0450;\n                        var7 = var2;\n                        var8 = var3;\n                        var var9 = var4;\n                        func_0BF4(var7, var8, var9);\n                        var6 = 0x04a2;\n                        var7 = var2;\n                        var8 = msg.sender;\n                        var9 = 0x049d;\n                        var temp3 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp3 + 0x60;\n                        memory[temp3:temp3 + 0x20] = 0x28;\n                        memory[temp3 + 0x20:temp3 + 0x20 + 0x28] = code[0x1a69:0x1a91];\n                        memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x02;\n                        var temp4 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp4;\n                        var var10 = storage[keccak256(memory[0x00:0x40])];\n                        var var11 = var4;\n                        var var12 = temp3;\n                        var9 = func_120D(var10, var11, var12);\n                        func_0AD0(var7, var8, var9);\n                        // Error: Could not resolve method call return address!\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x2d53e1bd) {\n                    // Dispatch table entry for 0x2d53e1bd (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0214;\n                    func_04AC();\n                    stop();\n                } else if (var0 == 0x313ce567) {\n                    // Dispatch table entry for decimals()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0x09;\n                    var1 = temp5 + 0x20;\n                    goto label_016D;\n                } else if (var0 == 0x3bbac579) {\n                    // Dispatch table entry for isBot(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0196;\n                    var2 = 0x024d;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_168D(var3, var4);\n                    var1 = func_024D(var2);\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = !!var1;\n                    var1 = temp6 + 0x20;\n                    goto label_016D;\n                } else if (var0 == 0x70a08231) {\n                    // Dispatch table entry for balanceOf(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01bc;\n                    var2 = 0x0286;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_168D(var3, var4);\n                    var1 = func_0286(var2);\n                    goto label_01BC;\n                } else if (var0 == 0x715018a6) {\n                    // Dispatch table entry for renounceOwnership()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0214;\n                    renounceOwnership();\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0xbf474bed > var0) {\n                if (var0 == 0x7d1db4a5) {\n                    // Dispatch table entry for _maxTxAmount()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01bc;\n                    var2 = storage[0x0f];\n                    goto label_01BC;\n                } else if (var0 == 0x8da5cb5b) {\n                    // Dispatch table entry for owner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = storage[0x00] & (0x01 << 0xa0) - 0x01;\n                    var1 = temp7 + 0x20;\n                    goto label_016D;\n                } else if (var0 == 0x8f9a55c0) {\n                    // Dispatch table entry for _maxWalletSize()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01bc;\n                    var2 = storage[0x10];\n                    goto label_01BC;\n                } else if (var0 == 0x95d89b41) {\n                    // Dispatch table entry for symbol()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp8 = memory[0x40:0x60];\n                    var1 = temp8;\n                    memory[0x40:0x60] = var1 + 0x40;\n                    memory[var1:var1 + 0x20] = 0x07;\n                    memory[var1 + 0x20:var1 + 0x20 + 0x20] = 0x245349414e4943 << 0xc8;\n                    var temp9 = var1;\n                    var1 = 0x016d;\n                    var2 = temp9;\n                    var3 = memory[0x40:0x60];\n                    var1 = symbol(var2, var3);\n                    goto label_016D;\n                } else if (var0 == 0xa9059cbb) {\n                    // Dispatch table entry for transfer(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0196;\n                    var2 = 0x0355;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2, var3 = func_1620(var3, var4);\n                    var4 = 0x00;\n                    var5 = 0x0418;\n                    var6 = msg.sender;\n                    var7 = var2;\n                    var8 = var3;\n                    func_0BF4(var6, var7, var8);\n                    goto label_0418;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0xbf474bed) {\n                // Dispatch table entry for 0xbf474bed (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01bc;\n                var2 = storage[0x11];\n                goto label_01BC;\n            } else if (var0 == 0xc9567bf9) {\n                // Dispatch table entry for openTrading()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0214;\n            \n                if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n                    var temp18 = memory[0x40:0x60];\n                    memory[temp18:temp18 + 0x20] = 0x461bcd << 0xe5;\n                    var2 = 0x04d6;\n                    var3 = temp18 + 0x04;\n                    var2 = func_18DE(var3);\n                    goto label_04D6;\n                } else if (!(storage[0x14] / (0x01 << 0xa0) & 0xff)) {\n                    storage[0x13] = (storage[0x13] & ~((0x01 << 0xa0) - 0x01)) | 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                    var2 = 0x06b5;\n                    var4 = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                    var3 = address(this);\n                    var5 = 0x06a7;\n                    var6 = 0x09;\n                    var7 = 0x0a;\n                    var5 = func_18B8(var6, var7);\n                    func_06A7(var3, var4, var5);\n                    var2 = storage[0x13] & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                    var3 = 0xc45a0155;\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n                    var4 = temp10 + 0x04;\n                    var temp11 = memory[0x40:0x60];\n                    var temp12;\n                    temp12, memory[temp11:temp11 + 0x20] = address(var2).staticcall.gas(msg.gas)(memory[temp11:temp11 + var4 - temp11]);\n                    var5 = !temp12;\n                \n                    if (!var5) {\n                        var temp13 = memory[0x40:0x60];\n                        var temp14 = returndata.length;\n                        memory[0x40:0x60] = temp13 + (temp14 + 0x1f & ~0x1f);\n                        var2 = 0x072c;\n                        var3 = temp13 + temp14;\n                        var4 = temp13;\n                        var5 = 0x00;\n                    \n                        if (var3 - var4 i< 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var6 = memory[var4:var4 + 0x20];\n                        var7 = 0x12c9;\n                        var8 = var6;\n                        func_15F8(var8);\n                        var2 = var6;\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        var temp15 = returndata.length;\n                        memory[0x00:0x00 + temp15] = returndata[0x00:0x00 + temp15];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp16 = memory[0x40:0x60];\n                    memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = 0x20;\n                    memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x17;\n                    memory[temp16 + 0x44:temp16 + 0x44 + 0x20] = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n                    var2 = temp16 + 0x64;\n                \n                label_04D6:\n                    var temp17 = memory[0x40:0x60];\n                    revert(memory[temp17:temp17 + var2 - temp17]);\n                }\n            } else if (var0 == 0xc97c1821) {\n                // Dispatch table entry for 0xc97c1821 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0214;\n                var2 = 0x03a0;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_16C0(var3, var4);\n                func_03A0(var2);\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01bc;\n                var2 = 0x03c0;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_1785(var3, var4);\n                var1 = func_03C0(var2, var3);\n                goto label_01BC;\n            } else if (var0 == 0xe644f514) {\n                // Dispatch table entry for 0xe644f514 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0214;\n                var2 = 0x0406;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_16C0(var3, var4);\n                func_0406(var2);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (msg.data.length) { revert(memory[0x00:0x00]); }\n        else { stop(); }\n    }\n    \n    function func_024D(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_0286(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_03A0(var arg0) {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x00;\n        \n            if (var0 >= memory[arg0:arg0 + 0x20]) {\n            label_0A3A:\n                return;\n            } else {\n            label_09DF:\n                var var1 = 0x00;\n                var var2 = 0x04;\n                var var3 = 0x00;\n                var var4 = arg0;\n                var var5 = var0;\n            \n                if (var5 < memory[var4:var4 + 0x20]) {\n                    var temp0 = var3;\n                    memory[temp0:temp0 + 0x20] = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20] & (0x01 << 0xa0) - 0x01;\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n                    var temp1 = keccak256(memory[0x00:0x00 + temp0 + 0x40]);\n                    storage[temp1] = !!var1 | (storage[temp1] & ~0xff);\n                    var1 = var0;\n                    var2 = 0x0a32;\n                    var3 = var1;\n                    var2 = func_1996(var3);\n                    var0 = var2;\n                \n                    if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_0A3A; }\n                    else { goto label_09DF; }\n                } else {\n                    var var6 = 0x09f6;\n                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp2 + 0x04;\n            var0 = 0x04d6;\n            var0 = func_18DE(var1);\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function func_03C0(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0406(var arg0) {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x00;\n        \n            if (var0 >= memory[arg0:arg0 + 0x20]) {\n            label_0A3A:\n                return;\n            } else {\n            label_0A75:\n                var var1 = 0x01;\n                var var2 = 0x04;\n                var var3 = 0x00;\n                var var4 = arg0;\n                var var5 = var0;\n            \n                if (var5 < memory[var4:var4 + 0x20]) {\n                    var temp0 = var3;\n                    memory[temp0:temp0 + 0x20] = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20] & (0x01 << 0xa0) - 0x01;\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n                    var temp1 = keccak256(memory[0x00:0x00 + temp0 + 0x40]);\n                    storage[temp1] = !!var1 | (storage[temp1] & ~0xff);\n                    var1 = var0;\n                    var2 = 0x0ac8;\n                    var3 = var1;\n                    var2 = func_1996(var3);\n                    var0 = var2;\n                \n                    if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_0A3A; }\n                    else { goto label_0A75; }\n                } else {\n                    var var6 = 0x0a8c;\n                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x04d6;\n            var1 = temp2 + 0x04;\n            var0 = func_18DE(var1);\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function totalSupply() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0430;\n        var var2 = 0x09;\n        var var3 = 0x0a;\n        var1 = func_18B8(var2, var3);\n        var2 = var1;\n        var1 = 0x043e;\n        var3 = 0x05f5e100;\n        return func_18C7(var2, var3);\n    }\n    \n    function func_04AC() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x04eb;\n            var var1 = 0x09;\n            var var2 = 0x0a;\n            var0 = func_18B8(var1, var2);\n            var1 = var0;\n            var0 = 0x04f9;\n            var2 = 0x05f5e100;\n            var0 = func_18C7(var1, var2);\n            storage[0x0f] = var0;\n            var0 = 0x0508;\n            var1 = 0x09;\n            var2 = 0x0a;\n            var0 = func_18B8(var1, var2);\n            var1 = var0;\n            var0 = 0x0516;\n            var2 = 0x05f5e100;\n            var0 = func_18C7(var1, var2);\n            storage[0x10] = var0;\n            var0 = 0x947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf;\n            var1 = 0x0546;\n            var2 = 0x09;\n            var var3 = 0x0a;\n            var1 = func_18B8(var2, var3);\n            var2 = var1;\n            var1 = 0x0554;\n            var3 = 0x05f5e100;\n            var1 = func_18C7(var2, var3);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [stack[-2]]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp2 + 0x04;\n            var0 = 0x04d6;\n            var0 = func_18DE(var1);\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function renounceOwnership() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & (0x01 << 0xa0) - 0x01, 0x00]);\n            storage[0x00] = storage[0x00] & ~((0x01 << 0xa0) - 0x01);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var var1 = temp0 + 0x04;\n            var var0 = 0x04d6;\n            var0 = func_18DE(var1);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_06A7(var arg0, var arg1, var arg2) {\n        var temp0 = arg2;\n        arg2 = 0x049d;\n        var var0 = temp0;\n        var var1 = 0x05f5e100;\n        arg2 = func_18C7(var0, var1);\n        func_0AD0(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0AD0(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x24;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = 0x72657373 << 0xe0;\n            var0 = temp9 + 0x84;\n            goto label_04D6;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = temp0 & arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x22;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7373 << 0xf0;\n            var var0 = temp7 + 0x84;\n        \n        label_04D6:\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_0BF4(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = 0x20;\n            memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = 0x25;\n            memory[temp18 + 0x44:temp18 + 0x44 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n            memory[temp18 + 0x64:temp18 + 0x64 + 0x20] = 0x6472657373 << 0xd8;\n            var0 = temp18 + 0x84;\n            goto label_04D6;\n        } else if (!(arg1 & (0x01 << 0xa0) - 0x01)) {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x23;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n            memory[temp17 + 0x64:temp17 + 0x64 + 0x20] = 0x657373 << 0xe8;\n            var0 = temp17 + 0x84;\n            goto label_04D6;\n        } else if (arg2 > 0x00) {\n            var var0 = 0x00;\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var var1 = storage[var0] & temp0 == temp0 & arg0;\n        \n            if (storage[var0] & temp0 == temp0 & arg0) {\n                var temp15 = (0x01 << 0xa0) - 0x01;\n            \n                if (storage[0x00] & temp15 == temp15 & arg1) { goto label_10CA; }\n                else { goto label_0D4F; }\n            } else if (!var1) {\n            label_10CA:\n            \n                if (!var0) {\n                label_1144:\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    var1 = 0x1167;\n                    var var2 = storage[keccak256(memory[0x00:0x40])];\n                    var var3 = arg2;\n                    var1 = func_153A(var2, var3);\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var1 = 0x11ac;\n                    var2 = 0x118d;\n                    var3 = arg2;\n                    var var4 = var0;\n                    var2 = func_153A(var3, var4);\n                    var1 = func_118D(arg1, var2);\n                    var temp1 = (0x01 << 0xa0) - 0x01;\n                    memory[0x00:0x20] = arg1 & temp1;\n                    memory[0x20:0x40] = 0x01;\n                    var temp2 = var1;\n                    var1 = arg1 & temp1;\n                    storage[keccak256(memory[0x00:0x40])] = temp2;\n                    var2 = arg0 & temp1;\n                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                    var4 = 0x11f6;\n                    var var5 = arg2;\n                    var var6 = var0;\n                    var4 = func_153A(var5, var6);\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var4;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [stack[-2], stack[-3], stack[-4]]);\n                    return;\n                } else {\n                    memory[0x00:0x20] = address(this);\n                    memory[0x20:0x40] = 0x01;\n                    var2 = storage[keccak256(memory[0x00:0x40])];\n                    var1 = 0x10ea;\n                    var3 = var0;\n                    var1 = func_14DB(var2, var3);\n                    memory[0x00:0x20] = address(this);\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var1 = address(this);\n                    var temp5 = memory[0x40:0x60];\n                    var2 = arg0 & (0x01 << 0xa0) - 0x01;\n                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                    memory[temp5:temp5 + 0x20] = var0;\n                    var4 = temp5 + 0x20;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + var4 - temp6], [stack[-2], stack[-3], stack[-4]]);\n                    goto label_1144;\n                }\n            } else {\n            label_0D4F:\n                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x04;\n                var1 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n            \n                if (var1) {\n                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                \n                    if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { goto label_0D99; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (var1) {\n                label_0D99:\n                    var1 = 0x0dc5;\n                    var2 = 0x64;\n                    var3 = 0x0dbf;\n                \n                    if (storage[0x0e] > storage[0x0b]) {\n                        var3 = func_0DB4(arg2);\n                    \n                    label_0DBF:\n                        var temp7 = var2;\n                        var2 = var3;\n                        var3 = temp7;\n                        var4 = 0x00;\n                        var5 = 0x12c9;\n                        var6 = var2;\n                        var var7 = var3;\n                        var temp8 = memory[0x40:0x60];\n                        var var8 = temp8;\n                        memory[0x40:0x60] = var8 + 0x40;\n                        memory[var8:var8 + 0x20] = 0x1a;\n                        memory[var8 + 0x20:var8 + 0x20 + 0x20] = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n                        var var9 = 0x00;\n                        var var10 = var8;\n                    \n                        if (var7) {\n                            var10 = 0x00;\n                            var var11 = 0x123e;\n                            var var12 = var7;\n                            var var13 = var6;\n                            var11 = func_19D5(var12, var13);\n                            var5 = var11;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            var temp9 = memory[0x40:0x60];\n                            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n                            var temp10 = var10;\n                            var10 = 0x04d6;\n                            var11 = temp10;\n                            var12 = temp9 + 0x04;\n                            var10 = symbol(var11, var12);\n                        \n                        label_04D6:\n                            var temp11 = memory[0x40:0x60];\n                            revert(memory[temp11:temp11 + var10 - temp11]);\n                        }\n                    } else {\n                        var4 = storage[0x07];\n                        var temp12 = var4;\n                        var4 = arg2;\n                        var5 = temp12;\n                        var6 = 0x00;\n                    \n                        if (0x00 - var4) {\n                            var7 = 0x00;\n                            var8 = 0x1265;\n                            var9 = var5;\n                            var10 = var4;\n                            var8 = func_18C7(var9, var10);\n                            var temp13 = var8;\n                            var7 = temp13;\n                            var8 = var5;\n                            var9 = 0x1272;\n                            var10 = var4;\n                            var11 = var7;\n                            var9 = func_19D5(var10, var11);\n                        \n                            if (var9 == var8) {\n                                var3 = var7;\n                                // Error: Could not resolve jump destination!\n                            } else {\n                                var temp14 = memory[0x40:0x60];\n                                memory[temp14:temp14 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp14 + 0x04:temp14 + 0x04 + 0x20] = 0x20;\n                                memory[temp14 + 0x24:temp14 + 0x24 + 0x20] = 0x21;\n                                memory[temp14 + 0x44:temp14 + 0x44 + 0x20] = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n                                memory[temp14 + 0x64:temp14 + 0x64 + 0x20] = 0x77 << 0xf8;\n                                var8 = temp14 + 0x84;\n                                goto label_04D6;\n                            }\n                        } else {\n                            var6 = 0x00;\n                            var3 = var6;\n                            // Error: Could not resolve jump destination!\n                        }\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = 0x20;\n            memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x29;\n            memory[temp16 + 0x44:temp16 + 0x44 + 0x20] = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n            memory[temp16 + 0x64:temp16 + 0x64 + 0x20] = 0x7468616e207a65726f << 0xb8;\n            var0 = temp16 + 0x84;\n            goto label_04D6;\n        }\n    }\n    \n    function func_0DB4(var arg0) returns (var r0) {\n        var var1 = storage[0x09];\n        var var0 = arg0;\n        var var2 = 0x00;\n    \n        if (!(0x00 - var0)) { return 0x00; }\n    \n        var var3 = 0x00;\n        var var4 = 0x1265;\n        var var5 = var1;\n        var var6 = var0;\n        var4 = func_18C7(var5, var6);\n        var temp0 = var4;\n        var3 = temp0;\n        var4 = var1;\n        var5 = 0x1272;\n        var6 = var0;\n        var var7 = var3;\n        var5 = func_19D5(var6, var7);\n    \n        if (var5 == var4) { return var3; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x21;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        memory[temp1 + 0x64:temp1 + 0x64 + 0x20] = 0x77 << 0xf8;\n        var4 = temp1 + 0x84;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + var4 - temp2]);\n    }\n    \n    function func_118D(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var var0 = arg1;\n        arg1 = storage[keccak256(memory[0x00:0x40])];\n        r0 = func_14DB(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_120D(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) {\n            var1 = 0x00;\n            var var2 = 0x123e;\n            var var3 = arg1;\n            var var4 = arg0;\n            return func_19C2(var3, var4);\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = var1;\n            var1 = 0x04d6;\n            var2 = temp1;\n            var3 = temp0 + 0x04;\n            var1 = symbol(var2, var3);\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + var1 - temp2]);\n        }\n    }\n    \n    function func_14DB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x14e8;\n        var var3 = arg1;\n        var var4 = arg0;\n        var2 = func_19AF(var3, var4);\n        var1 = var2;\n    \n        if (var1 >= arg0) { return var1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1b;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var2 = temp0 + 0x64;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + var2 - temp1]);\n    }\n    \n    function func_153A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x12c9;\n        var var2 = arg0;\n        var var3 = arg1;\n        var temp0 = memory[0x40:0x60];\n        var var4 = temp0;\n        memory[0x40:0x60] = var4 + 0x40;\n        memory[var4:var4 + 0x20] = 0x1e;\n        memory[var4 + 0x20:var4 + 0x20 + 0x20] = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        return func_120D(var2, var3, var4);\n    }\n    \n    function symbol(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = 0x00;\n    \n        if (var3 >= var2) {\n        label_15D7:\n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = 0x00;\n            return temp3 + (temp2 + 0x1f & ~0x1f) + 0x40;\n        } else {\n        label_15C4:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_15D7; }\n            else { goto label_15C4; }\n        }\n    }\n    \n    function func_15F8(var arg0) {\n        var temp0 = arg0;\n    \n        if (temp0 == temp0 & (0x01 << 0xa0) - 0x01) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1610(var arg0) returns (var r0) {\n        var var0 = msg.data[arg0:arg0 + 0x20];\n        var var1 = 0x161b;\n        var var2 = var0;\n        func_15F8(var2);\n        return var0;\n    }\n    \n    function func_1620(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x163e;\n        var var4 = var2;\n        func_15F8(var4);\n        r0 = var2;\n        arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_164C(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var var3 = msg.data[arg1:arg1 + 0x20];\n        var var4 = 0x166c;\n        var var5 = var3;\n        func_15F8(var5);\n        var0 = var3;\n        var3 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var4 = 0x167c;\n        var5 = var3;\n        func_15F8(var5);\n        r0 = var0;\n        arg0 = var3;\n        arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n        return r0, arg0, arg1;\n    }\n    \n    function func_168D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var2 = 0x12c9;\n        var var3 = var1;\n        func_15F8(var3);\n        return var1;\n    }\n    \n    function func_16C0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n    \n        if (arg0 - arg1 i< var1) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0xffffffffffffffff;\n    \n        if (var2 > var3) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1 + var2;\n        var2 = temp0;\n    \n        if (var2 + 0x1f i>= arg0) { revert(memory[0x00:0x00]); }\n    \n        var var4 = msg.data[var2:var2 + 0x20];\n    \n        if (var4 <= var3) {\n            var var5 = var4 << 0x05;\n            var temp1 = memory[0x40:0x60];\n            var var6 = temp1;\n            var temp2 = var6 + (var5 + 0x3f & ~0x1f);\n            var var7 = temp2;\n        \n            if (!((var7 > var3) | (var7 < var6))) {\n                memory[0x40:0x60] = var7;\n                var temp3 = var6;\n                memory[temp3:temp3 + 0x20] = var4;\n                var temp4 = var1;\n                var3 = temp3 + temp4;\n                var4 = temp4 + var5 + var2;\n                var6 = temp3;\n            \n                if (var4 > arg0) { revert(memory[0x00:0x00]); }\n            \n                var temp5 = var1 + var2;\n                var6 = var6;\n                var2 = temp5;\n            \n                if (var2 >= var4) {\n                label_1779:\n                    return var6;\n                } else {\n                label_1762:\n                    var7 = 0x176a;\n                    var var8 = var2;\n                    var7 = func_1610(var8);\n                    var temp6 = var3;\n                    memory[temp6:temp6 + 0x20] = var7;\n                    var temp7 = var1;\n                    var2 = temp7 + var2;\n                    var6 = var6;\n                    var3 = temp7 + temp6;\n                \n                    if (var2 >= var4) { goto label_1779; }\n                    else { goto label_1762; }\n                }\n            } else {\n                var8 = 0x1736;\n            \n            label_16AA:\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x41;\n                revert(memory[0x00:0x24]);\n            }\n        } else {\n            var5 = 0x1711;\n            goto label_16AA;\n        }\n    }\n    \n    function func_1785(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x17a3;\n        var var4 = var2;\n        func_15F8(var4);\n        var0 = var2;\n        var2 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var3 = 0x17b3;\n        var4 = var2;\n        func_15F8(var4);\n        arg0 = var2;\n        r0 = var0;\n        return r0, arg0;\n    }\n    \n    function func_17D4(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x01;\n        var var1 = arg1;\n        var var2 = var0;\n    \n        if (arg0 <= var2) {\n        label_180F:\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n        label_17E2:\n            var temp0 = var1;\n        \n            if (temp0 > ~0x00 / temp0) {\n                var var3 = 0x17f5;\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            } else if (!(arg0 & var2)) {\n                arg0 = arg0 >> var2;\n                var temp1 = var1;\n                var1 = temp1 * temp1;\n                var2 = var2;\n            \n            label_17D9:\n            \n                if (arg0 <= var2) { goto label_180F; }\n                else { goto label_17E2; }\n            } else {\n                var temp2 = var1;\n                var0 = temp2 * var0;\n                arg0 = arg0 >> var2;\n                var2 = var2;\n                var1 = temp2 * temp2;\n                goto label_17D9;\n            }\n        }\n    }\n    \n    function func_1817(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg0) {\n            var0 = 0x01;\n            goto label_041C;\n        } else if (arg1) {\n            var var1 = arg1;\n        \n            if (var1 == 0x01) {\n                var0 = 0x01;\n            \n            label_041C:\n                return var0;\n            } else if (var1 != 0x02) {\n                var temp0 = arg0;\n                var temp1 = arg1;\n            \n                if (!(((temp1 < 0x0b) & (temp0 < 0x4e)) | ((temp1 < 0x0133) & (temp0 < 0x20)))) {\n                    var1 = 0x189c;\n                    var2 = arg0;\n                    var var3 = arg1;\n                    var1, var2 = func_17D4(var2, var3);\n                \n                    if (var1 <= ~0x00 / var2) { return var2 * var1; }\n                \n                    var3 = 0x18b0;\n                    goto label_17BE;\n                } else {\n                    var0 = arg1 ** arg0;\n                    goto label_041C;\n                }\n            } else if (arg0 <= 0xff) {\n                var0 = 0x01 << arg0;\n                goto label_041C;\n            } else {\n                var var2 = 0x1864;\n            \n            label_17BE:\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_041C;\n        }\n    }\n    \n    function func_18B8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x12c9;\n        var var2 = arg0 & 0xff;\n        var var3 = arg1;\n        var1 = func_1817(var2, var3);\n    \n    label_12C9:\n        return var1;\n    }\n    \n    function func_18C7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg0;\n        var var0 = temp1 * temp0;\n    \n        if ((temp1 == var0 / temp0) | !temp0) { return var0; }\n    \n        var var1 = 0x041c;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_18DE(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x20;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        return temp0 + 0x60;\n    }\n    \n    function func_1996(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 + 0x01) { return arg0 + 0x01; }\n    \n        var var1 = 0x19a8;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_19AF(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = arg0 + temp0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var var1 = 0x041c;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_19C2(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 - arg0;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var var1 = 0x041c;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_19D5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) { return arg1 / arg0; }\n    \n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x12;\n        revert(memory[0x00:0x24]);\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (0x7d1db4a5 > var0) {\n                if (0x2d53e1bd > var0) {\n                    if (var0 == 0x06fdde03) {\n                        // Dispatch table entry for name()\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var temp0 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp0 + 0x40;\n                        memory[temp0:temp0 + 0x20] = 0x0c;\n                        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x29b4a0b734a1902a37b5b2b7 << 0xa1;\n                        var1 = 0x016d;\n                        var var3 = memory[0x40:0x60];\n                        var var2 = temp0;\n                        var1 = symbol(var2, var3);\n                    \n                    label_016D:\n                        var temp1 = memory[0x40:0x60];\n                        return memory[temp1:temp1 + var1 - temp1];\n                    } else if (var0 == 0x095ea7b3) {\n                        // Dispatch table entry for approve(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0196;\n                        var2 = 0x0191;\n                        var3 = msg.data.length;\n                        var var4 = 0x04;\n                        var2, var3 = func_1620(var3, var4);\n                        var4 = 0x00;\n                        var var5 = 0x0418;\n                        var var6 = msg.sender;\n                        var var7 = var2;\n                        var var8 = var3;\n                        func_0AD0(var6, var7, var8);\n                    \n                    label_0418:\n                        var4 = 0x01;\n                        var1 = var4;\n                        // Error: Could not resolve jump destination!\n                    } else if (var0 == 0x0faee56f) {\n                        // Dispatch table entry for 0x0faee56f (unknown)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x01bc;\n                        var2 = storage[0x12];\n                    \n                    label_01BC:\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = var2;\n                        var2 = temp2 + 0x20;\n                        goto label_016D;\n                    } else if (var0 == 0x18160ddd) {\n                        // Dispatch table entry for totalSupply()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x01bc;\n                        var1 = totalSupply();\n                        goto label_01BC;\n                    } else if (var0 == 0x23b872dd) {\n                        // Dispatch table entry for transferFrom(address,address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0196;\n                        var2 = 0x01fa;\n                        var3 = msg.data.length;\n                        var4 = 0x04;\n                        var2, var3, var4 = func_164C(var3, var4);\n                        var5 = 0x00;\n                        var6 = 0x0450;\n                        var7 = var2;\n                        var8 = var3;\n                        var var9 = var4;\n                        func_0BF4(var7, var8, var9);\n                        var6 = 0x04a2;\n                        var7 = var2;\n                        var8 = msg.sender;\n                        var9 = 0x049d;\n                        var temp3 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp3 + 0x60;\n                        memory[temp3:temp3 + 0x20] = 0x28;\n                        memory[temp3 + 0x20:temp3 + 0x20 + 0x28] = code[0x1a69:0x1a91];\n                        memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x02;\n                        var temp4 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp4;\n                        var var10 = storage[keccak256(memory[0x00:0x40])];\n                        var var11 = var4;\n                        var var12 = temp3;\n                        var9 = func_120D(var10, var11, var12);\n                        func_0AD0(var7, var8, var9);\n                        // Error: Could not resolve method call return address!\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x2d53e1bd) {\n                    // Dispatch table entry for 0x2d53e1bd (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0214;\n                    func_04AC();\n                    stop();\n                } else if (var0 == 0x313ce567) {\n                    // Dispatch table entry for decimals()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0x09;\n                    var1 = temp5 + 0x20;\n                    goto label_016D;\n                } else if (var0 == 0x3bbac579) {\n                    // Dispatch table entry for isBot(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0196;\n                    var2 = 0x024d;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_168D(var3, var4);\n                    var1 = func_024D(var2);\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = !!var1;\n                    var1 = temp6 + 0x20;\n                    goto label_016D;\n                } else if (var0 == 0x70a08231) {\n                    // Dispatch table entry for balanceOf(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01bc;\n                    var2 = 0x0286;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_168D(var3, var4);\n                    var1 = func_0286(var2);\n                    goto label_01BC;\n                } else if (var0 == 0x715018a6) {\n                    // Dispatch table entry for renounceOwnership()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0214;\n                    renounceOwnership();\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0xbf474bed > var0) {\n                if (var0 == 0x7d1db4a5) {\n                    // Dispatch table entry for _maxTxAmount()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01bc;\n                    var2 = storage[0x0f];\n                    goto label_01BC;\n                } else if (var0 == 0x8da5cb5b) {\n                    // Dispatch table entry for owner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = storage[0x00] & (0x01 << 0xa0) - 0x01;\n                    var1 = temp7 + 0x20;\n                    goto label_016D;\n                } else if (var0 == 0x8f9a55c0) {\n                    // Dispatch table entry for _maxWalletSize()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01bc;\n                    var2 = storage[0x10];\n                    goto label_01BC;\n                } else if (var0 == 0x95d89b41) {\n                    // Dispatch table entry for symbol()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp8 = memory[0x40:0x60];\n                    var1 = temp8;\n                    memory[0x40:0x60] = var1 + 0x40;\n                    memory[var1:var1 + 0x20] = 0x07;\n                    memory[var1 + 0x20:var1 + 0x20 + 0x20] = 0x245349414e4943 << 0xc8;\n                    var temp9 = var1;\n                    var1 = 0x016d;\n                    var2 = temp9;\n                    var3 = memory[0x40:0x60];\n                    var1 = symbol(var2, var3);\n                    goto label_016D;\n                } else if (var0 == 0xa9059cbb) {\n                    // Dispatch table entry for transfer(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0196;\n                    var2 = 0x0355;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2, var3 = func_1620(var3, var4);\n                    var4 = 0x00;\n                    var5 = 0x0418;\n                    var6 = msg.sender;\n                    var7 = var2;\n                    var8 = var3;\n                    func_0BF4(var6, var7, var8);\n                    goto label_0418;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0xbf474bed) {\n                // Dispatch table entry for 0xbf474bed (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01bc;\n                var2 = storage[0x11];\n                goto label_01BC;\n            } else if (var0 == 0xc9567bf9) {\n                // Dispatch table entry for openTrading()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0214;\n            \n                if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n                    var temp18 = memory[0x40:0x60];\n                    memory[temp18:temp18 + 0x20] = 0x461bcd << 0xe5;\n                    var2 = 0x04d6;\n                    var3 = temp18 + 0x04;\n                    var2 = func_18DE(var3);\n                    goto label_04D6;\n                } else if (!(storage[0x14] / (0x01 << 0xa0) & 0xff)) {\n                    storage[0x13] = (storage[0x13] & ~((0x01 << 0xa0) - 0x01)) | 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                    var2 = 0x06b5;\n                    var4 = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                    var3 = address(this);\n                    var5 = 0x06a7;\n                    var6 = 0x09;\n                    var7 = 0x0a;\n                    var5 = func_18B8(var6, var7);\n                    func_06A7(var3, var4, var5);\n                    var2 = storage[0x13] & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                    var3 = 0xc45a0155;\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n                    var4 = temp10 + 0x04;\n                    var temp11 = memory[0x40:0x60];\n                    var temp12;\n                    temp12, memory[temp11:temp11 + 0x20] = address(var2).staticcall.gas(msg.gas)(memory[temp11:temp11 + var4 - temp11]);\n                    var5 = !temp12;\n                \n                    if (!var5) {\n                        var temp13 = memory[0x40:0x60];\n                        var temp14 = returndata.length;\n                        memory[0x40:0x60] = temp13 + (temp14 + 0x1f & ~0x1f);\n                        var2 = 0x072c;\n                        var3 = temp13 + temp14;\n                        var4 = temp13;\n                        var5 = 0x00;\n                    \n                        if (var3 - var4 i< 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var6 = memory[var4:var4 + 0x20];\n                        var7 = 0x12c9;\n                        var8 = var6;\n                        func_15F8(var8);\n                        var2 = var6;\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        var temp15 = returndata.length;\n                        memory[0x00:0x00 + temp15] = returndata[0x00:0x00 + temp15];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp16 = memory[0x40:0x60];\n                    memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = 0x20;\n                    memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x17;\n                    memory[temp16 + 0x44:temp16 + 0x44 + 0x20] = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n                    var2 = temp16 + 0x64;\n                \n                label_04D6:\n                    var temp17 = memory[0x40:0x60];\n                    revert(memory[temp17:temp17 + var2 - temp17]);\n                }\n            } else if (var0 == 0xc97c1821) {\n                // Dispatch table entry for 0xc97c1821 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0214;\n                var2 = 0x03a0;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_16C0(var3, var4);\n                func_03A0(var2);\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01bc;\n                var2 = 0x03c0;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_1785(var3, var4);\n                var1 = func_03C0(var2, var3);\n                goto label_01BC;\n            } else if (var0 == 0xe644f514) {\n                // Dispatch table entry for 0xe644f514 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0214;\n                var2 = 0x0406;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_16C0(var3, var4);\n                func_0406(var2);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (msg.data.length) { revert(memory[0x00:0x00]); }\n        else { stop(); }\n    }\n    \n    function func_024D(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_0286(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_03A0(var arg0) {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x00;\n        \n            if (var0 >= memory[arg0:arg0 + 0x20]) {\n            label_0A3A:\n                return;\n            } else {\n            label_09DF:\n                var var1 = 0x00;\n                var var2 = 0x04;\n                var var3 = 0x00;\n                var var4 = arg0;\n                var var5 = var0;\n            \n                if (var5 < memory[var4:var4 + 0x20]) {\n                    var temp0 = var3;\n                    memory[temp0:temp0 + 0x20] = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20] & (0x01 << 0xa0) - 0x01;\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n                    var temp1 = keccak256(memory[0x00:0x00 + temp0 + 0x40]);\n                    storage[temp1] = !!var1 | (storage[temp1] & ~0xff);\n                    var1 = var0;\n                    var2 = 0x0a32;\n                    var3 = var1;\n                    var2 = func_1996(var3);\n                    var0 = var2;\n                \n                    if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_0A3A; }\n                    else { goto label_09DF; }\n                } else {\n                    var var6 = 0x09f6;\n                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp2 + 0x04;\n            var0 = 0x04d6;\n            var0 = func_18DE(var1);\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function func_03C0(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0406(var arg0) {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x00;\n        \n            if (var0 >= memory[arg0:arg0 + 0x20]) {\n            label_0A3A:\n                return;\n            } else {\n            label_0A75:\n                var var1 = 0x01;\n                var var2 = 0x04;\n                var var3 = 0x00;\n                var var4 = arg0;\n                var var5 = var0;\n            \n                if (var5 < memory[var4:var4 + 0x20]) {\n                    var temp0 = var3;\n                    memory[temp0:temp0 + 0x20] = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20] & (0x01 << 0xa0) - 0x01;\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n                    var temp1 = keccak256(memory[0x00:0x00 + temp0 + 0x40]);\n                    storage[temp1] = !!var1 | (storage[temp1] & ~0xff);\n                    var1 = var0;\n                    var2 = 0x0ac8;\n                    var3 = var1;\n                    var2 = func_1996(var3);\n                    var0 = var2;\n                \n                    if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_0A3A; }\n                    else { goto label_0A75; }\n                } else {\n                    var var6 = 0x0a8c;\n                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x04d6;\n            var1 = temp2 + 0x04;\n            var0 = func_18DE(var1);\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function totalSupply() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0430;\n        var var2 = 0x09;\n        var var3 = 0x0a;\n        var1 = func_18B8(var2, var3);\n        var2 = var1;\n        var1 = 0x043e;\n        var3 = 0x05f5e100;\n        return func_18C7(var2, var3);\n    }\n    \n    function func_04AC() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x04eb;\n            var var1 = 0x09;\n            var var2 = 0x0a;\n            var0 = func_18B8(var1, var2);\n            var1 = var0;\n            var0 = 0x04f9;\n            var2 = 0x05f5e100;\n            var0 = func_18C7(var1, var2);\n            storage[0x0f] = var0;\n            var0 = 0x0508;\n            var1 = 0x09;\n            var2 = 0x0a;\n            var0 = func_18B8(var1, var2);\n            var1 = var0;\n            var0 = 0x0516;\n            var2 = 0x05f5e100;\n            var0 = func_18C7(var1, var2);\n            storage[0x10] = var0;\n            var0 = 0x947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf;\n            var1 = 0x0546;\n            var2 = 0x09;\n            var var3 = 0x0a;\n            var1 = func_18B8(var2, var3);\n            var2 = var1;\n            var1 = 0x0554;\n            var3 = 0x05f5e100;\n            var1 = func_18C7(var2, var3);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [stack[-2]]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp2 + 0x04;\n            var0 = 0x04d6;\n            var0 = func_18DE(var1);\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function renounceOwnership() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & (0x01 << 0xa0) - 0x01, 0x00]);\n            storage[0x00] = storage[0x00] & ~((0x01 << 0xa0) - 0x01);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var var1 = temp0 + 0x04;\n            var var0 = 0x04d6;\n            var0 = func_18DE(var1);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_06A7(var arg0, var arg1, var arg2) {\n        var temp0 = arg2;\n        arg2 = 0x049d;\n        var var0 = temp0;\n        var var1 = 0x05f5e100;\n        arg2 = func_18C7(var0, var1);\n        func_0AD0(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0AD0(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x24;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = 0x72657373 << 0xe0;\n            var0 = temp9 + 0x84;\n            goto label_04D6;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = temp0 & arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x22;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7373 << 0xf0;\n            var var0 = temp7 + 0x84;\n        \n        label_04D6:\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_0BF4(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = 0x20;\n            memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = 0x25;\n            memory[temp18 + 0x44:temp18 + 0x44 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n            memory[temp18 + 0x64:temp18 + 0x64 + 0x20] = 0x6472657373 << 0xd8;\n            var0 = temp18 + 0x84;\n            goto label_04D6;\n        } else if (!(arg1 & (0x01 << 0xa0) - 0x01)) {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x23;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n            memory[temp17 + 0x64:temp17 + 0x64 + 0x20] = 0x657373 << 0xe8;\n            var0 = temp17 + 0x84;\n            goto label_04D6;\n        } else if (arg2 > 0x00) {\n            var var0 = 0x00;\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var var1 = storage[var0] & temp0 == temp0 & arg0;\n        \n            if (storage[var0] & temp0 == temp0 & arg0) {\n                var temp15 = (0x01 << 0xa0) - 0x01;\n            \n                if (storage[0x00] & temp15 == temp15 & arg1) { goto label_10CA; }\n                else { goto label_0D4F; }\n            } else if (!var1) {\n            label_10CA:\n            \n                if (!var0) {\n                label_1144:\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    var1 = 0x1167;\n                    var var2 = storage[keccak256(memory[0x00:0x40])];\n                    var var3 = arg2;\n                    var1 = func_153A(var2, var3);\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var1 = 0x11ac;\n                    var2 = 0x118d;\n                    var3 = arg2;\n                    var var4 = var0;\n                    var2 = func_153A(var3, var4);\n                    var1 = func_118D(arg1, var2);\n                    var temp1 = (0x01 << 0xa0) - 0x01;\n                    memory[0x00:0x20] = arg1 & temp1;\n                    memory[0x20:0x40] = 0x01;\n                    var temp2 = var1;\n                    var1 = arg1 & temp1;\n                    storage[keccak256(memory[0x00:0x40])] = temp2;\n                    var2 = arg0 & temp1;\n                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                    var4 = 0x11f6;\n                    var var5 = arg2;\n                    var var6 = var0;\n                    var4 = func_153A(var5, var6);\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var4;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [stack[-2], stack[-3], stack[-4]]);\n                    return;\n                } else {\n                    memory[0x00:0x20] = address(this);\n                    memory[0x20:0x40] = 0x01;\n                    var2 = storage[keccak256(memory[0x00:0x40])];\n                    var1 = 0x10ea;\n                    var3 = var0;\n                    var1 = func_14DB(var2, var3);\n                    memory[0x00:0x20] = address(this);\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var1 = address(this);\n                    var temp5 = memory[0x40:0x60];\n                    var2 = arg0 & (0x01 << 0xa0) - 0x01;\n                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                    memory[temp5:temp5 + 0x20] = var0;\n                    var4 = temp5 + 0x20;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + var4 - temp6], [stack[-2], stack[-3], stack[-4]]);\n                    goto label_1144;\n                }\n            } else {\n            label_0D4F:\n                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x04;\n                var1 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n            \n                if (var1) {\n                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                \n                    if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { goto label_0D99; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (var1) {\n                label_0D99:\n                    var1 = 0x0dc5;\n                    var2 = 0x64;\n                    var3 = 0x0dbf;\n                \n                    if (storage[0x0e] > storage[0x0b]) {\n                        var3 = func_0DB4(arg2);\n                    \n                    label_0DBF:\n                        var temp7 = var2;\n                        var2 = var3;\n                        var3 = temp7;\n                        var4 = 0x00;\n                        var5 = 0x12c9;\n                        var6 = var2;\n                        var var7 = var3;\n                        var temp8 = memory[0x40:0x60];\n                        var var8 = temp8;\n                        memory[0x40:0x60] = var8 + 0x40;\n                        memory[var8:var8 + 0x20] = 0x1a;\n                        memory[var8 + 0x20:var8 + 0x20 + 0x20] = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n                        var var9 = 0x00;\n                        var var10 = var8;\n                    \n                        if (var7) {\n                            var10 = 0x00;\n                            var var11 = 0x123e;\n                            var var12 = var7;\n                            var var13 = var6;\n                            var11 = func_19D5(var12, var13);\n                            var5 = var11;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            var temp9 = memory[0x40:0x60];\n                            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n                            var temp10 = var10;\n                            var10 = 0x04d6;\n                            var11 = temp10;\n                            var12 = temp9 + 0x04;\n                            var10 = symbol(var11, var12);\n                        \n                        label_04D6:\n                            var temp11 = memory[0x40:0x60];\n                            revert(memory[temp11:temp11 + var10 - temp11]);\n                        }\n                    } else {\n                        var4 = storage[0x07];\n                        var temp12 = var4;\n                        var4 = arg2;\n                        var5 = temp12;\n                        var6 = 0x00;\n                    \n                        if (0x00 - var4) {\n                            var7 = 0x00;\n                            var8 = 0x1265;\n                            var9 = var5;\n                            var10 = var4;\n                            var8 = func_18C7(var9, var10);\n                            var temp13 = var8;\n                            var7 = temp13;\n                            var8 = var5;\n                            var9 = 0x1272;\n                            var10 = var4;\n                            var11 = var7;\n                            var9 = func_19D5(var10, var11);\n                        \n                            if (var9 == var8) {\n                                var3 = var7;\n                                // Error: Could not resolve jump destination!\n                            } else {\n                                var temp14 = memory[0x40:0x60];\n                                memory[temp14:temp14 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp14 + 0x04:temp14 + 0x04 + 0x20] = 0x20;\n                                memory[temp14 + 0x24:temp14 + 0x24 + 0x20] = 0x21;\n                                memory[temp14 + 0x44:temp14 + 0x44 + 0x20] = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n                                memory[temp14 + 0x64:temp14 + 0x64 + 0x20] = 0x77 << 0xf8;\n                                var8 = temp14 + 0x84;\n                                goto label_04D6;\n                            }\n                        } else {\n                            var6 = 0x00;\n                            var3 = var6;\n                            // Error: Could not resolve jump destination!\n                        }\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = 0x20;\n            memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x29;\n            memory[temp16 + 0x44:temp16 + 0x44 + 0x20] = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n            memory[temp16 + 0x64:temp16 + 0x64 + 0x20] = 0x7468616e207a65726f << 0xb8;\n            var0 = temp16 + 0x84;\n            goto label_04D6;\n        }\n    }\n    \n    function func_0DB4(var arg0) returns (var r0) {\n        var var1 = storage[0x09];\n        var var0 = arg0;\n        var var2 = 0x00;\n    \n        if (!(0x00 - var0)) { return 0x00; }\n    \n        var var3 = 0x00;\n        var var4 = 0x1265;\n        var var5 = var1;\n        var var6 = var0;\n        var4 = func_18C7(var5, var6);\n        var temp0 = var4;\n        var3 = temp0;\n        var4 = var1;\n        var5 = 0x1272;\n        var6 = var0;\n        var var7 = var3;\n        var5 = func_19D5(var6, var7);\n    \n        if (var5 == var4) { return var3; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x21;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        memory[temp1 + 0x64:temp1 + 0x64 + 0x20] = 0x77 << 0xf8;\n        var4 = temp1 + 0x84;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + var4 - temp2]);\n    }\n    \n    function func_118D(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var var0 = arg1;\n        arg1 = storage[keccak256(memory[0x00:0x40])];\n        r0 = func_14DB(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_120D(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) {\n            var1 = 0x00;\n            var var2 = 0x123e;\n            var var3 = arg1;\n            var var4 = arg0;\n            return func_19C2(var3, var4);\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = var1;\n            var1 = 0x04d6;\n            var2 = temp1;\n            var3 = temp0 + 0x04;\n            var1 = symbol(var2, var3);\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + var1 - temp2]);\n        }\n    }\n    \n    function func_14DB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x14e8;\n        var var3 = arg1;\n        var var4 = arg0;\n        var2 = func_19AF(var3, var4);\n        var1 = var2;\n    \n        if (var1 >= arg0) { return var1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1b;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var2 = temp0 + 0x64;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + var2 - temp1]);\n    }\n    \n    function func_153A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x12c9;\n        var var2 = arg0;\n        var var3 = arg1;\n        var temp0 = memory[0x40:0x60];\n        var var4 = temp0;\n        memory[0x40:0x60] = var4 + 0x40;\n        memory[var4:var4 + 0x20] = 0x1e;\n        memory[var4 + 0x20:var4 + 0x20 + 0x20] = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        return func_120D(var2, var3, var4);\n    }\n    \n    function symbol(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = 0x00;\n    \n        if (var3 >= var2) {\n        label_15D7:\n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = 0x00;\n            return temp3 + (temp2 + 0x1f & ~0x1f) + 0x40;\n        } else {\n        label_15C4:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_15D7; }\n            else { goto label_15C4; }\n        }\n    }\n    \n    function func_15F8(var arg0) {\n        var temp0 = arg0;\n    \n        if (temp0 == temp0 & (0x01 << 0xa0) - 0x01) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1610(var arg0) returns (var r0) {\n        var var0 = msg.data[arg0:arg0 + 0x20];\n        var var1 = 0x161b;\n        var var2 = var0;\n        func_15F8(var2);\n        return var0;\n    }\n    \n    function func_1620(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x163e;\n        var var4 = var2;\n        func_15F8(var4);\n        r0 = var2;\n        arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_164C(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var var3 = msg.data[arg1:arg1 + 0x20];\n        var var4 = 0x166c;\n        var var5 = var3;\n        func_15F8(var5);\n        var0 = var3;\n        var3 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var4 = 0x167c;\n        var5 = var3;\n        func_15F8(var5);\n        r0 = var0;\n        arg0 = var3;\n        arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n        return r0, arg0, arg1;\n    }\n    \n    function func_168D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var2 = 0x12c9;\n        var var3 = var1;\n        func_15F8(var3);\n        return var1;\n    }\n    \n    function func_16C0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n    \n        if (arg0 - arg1 i< var1) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0xffffffffffffffff;\n    \n        if (var2 > var3) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1 + var2;\n        var2 = temp0;\n    \n        if (var2 + 0x1f i>= arg0) { revert(memory[0x00:0x00]); }\n    \n        var var4 = msg.data[var2:var2 + 0x20];\n    \n        if (var4 <= var3) {\n            var var5 = var4 << 0x05;\n            var temp1 = memory[0x40:0x60];\n            var var6 = temp1;\n            var temp2 = var6 + (var5 + 0x3f & ~0x1f);\n            var var7 = temp2;\n        \n            if (!((var7 > var3) | (var7 < var6))) {\n                memory[0x40:0x60] = var7;\n                var temp3 = var6;\n                memory[temp3:temp3 + 0x20] = var4;\n                var temp4 = var1;\n                var3 = temp3 + temp4;\n                var4 = temp4 + var5 + var2;\n                var6 = temp3;\n            \n                if (var4 > arg0) { revert(memory[0x00:0x00]); }\n            \n                var temp5 = var1 + var2;\n                var6 = var6;\n                var2 = temp5;\n            \n                if (var2 >= var4) {\n                label_1779:\n                    return var6;\n                } else {\n                label_1762:\n                    var7 = 0x176a;\n                    var var8 = var2;\n                    var7 = func_1610(var8);\n                    var temp6 = var3;\n                    memory[temp6:temp6 + 0x20] = var7;\n                    var temp7 = var1;\n                    var2 = temp7 + var2;\n                    var6 = var6;\n                    var3 = temp7 + temp6;\n                \n                    if (var2 >= var4) { goto label_1779; }\n                    else { goto label_1762; }\n                }\n            } else {\n                var8 = 0x1736;\n            \n            label_16AA:\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x41;\n                revert(memory[0x00:0x24]);\n            }\n        } else {\n            var5 = 0x1711;\n            goto label_16AA;\n        }\n    }\n    \n    function func_1785(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x17a3;\n        var var4 = var2;\n        func_15F8(var4);\n        var0 = var2;\n        var2 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var3 = 0x17b3;\n        var4 = var2;\n        func_15F8(var4);\n        arg0 = var2;\n        r0 = var0;\n        return r0, arg0;\n    }\n    \n    function func_17D4(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x01;\n        var var1 = arg1;\n        var var2 = var0;\n    \n        if (arg0 <= var2) {\n        label_180F:\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n        label_17E2:\n            var temp0 = var1;\n        \n            if (temp0 > ~0x00 / temp0) {\n                var var3 = 0x17f5;\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            } else if (!(arg0 & var2)) {\n                arg0 = arg0 >> var2;\n                var temp1 = var1;\n                var1 = temp1 * temp1;\n                var2 = var2;\n            \n            label_17D9:\n            \n                if (arg0 <= var2) { goto label_180F; }\n                else { goto label_17E2; }\n            } else {\n                var temp2 = var1;\n                var0 = temp2 * var0;\n                arg0 = arg0 >> var2;\n                var2 = var2;\n                var1 = temp2 * temp2;\n                goto label_17D9;\n            }\n        }\n    }\n    \n    function func_1817(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg0) {\n            var0 = 0x01;\n            goto label_041C;\n        } else if (arg1) {\n            var var1 = arg1;\n        \n            if (var1 == 0x01) {\n                var0 = 0x01;\n            \n            label_041C:\n                return var0;\n            } else if (var1 != 0x02) {\n                var temp0 = arg0;\n                var temp1 = arg1;\n            \n                if (!(((temp1 < 0x0b) & (temp0 < 0x4e)) | ((temp1 < 0x0133) & (temp0 < 0x20)))) {\n                    var1 = 0x189c;\n                    var2 = arg0;\n                    var var3 = arg1;\n                    var1, var2 = func_17D4(var2, var3);\n                \n                    if (var1 <= ~0x00 / var2) { return var2 * var1; }\n                \n                    var3 = 0x18b0;\n                    goto label_17BE;\n                } else {\n                    var0 = arg1 ** arg0;\n                    goto label_041C;\n                }\n            } else if (arg0 <= 0xff) {\n                var0 = 0x01 << arg0;\n                goto label_041C;\n            } else {\n                var var2 = 0x1864;\n            \n            label_17BE:\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_041C;\n        }\n    }\n    \n    function func_18B8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x12c9;\n        var var2 = arg0 & 0xff;\n        var var3 = arg1;\n        var1 = func_1817(var2, var3);\n    \n    label_12C9:\n        return var1;\n    }\n    \n    function func_18C7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg0;\n        var var0 = temp1 * temp0;\n    \n        if ((temp1 == var0 / temp0) | !temp0) { return var0; }\n    \n        var var1 = 0x041c;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_18DE(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x20;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        return temp0 + 0x60;\n    }\n    \n    function func_1996(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 + 0x01) { return arg0 + 0x01; }\n    \n        var var1 = 0x19a8;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_19AF(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = arg0 + temp0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var var1 = 0x041c;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_19C2(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 - arg0;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var var1 = 0x041c;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_19D5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) { return arg1 / arg0; }\n    \n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x12;\n        revert(memory[0x00:0x24]);\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (0x7d1db4a5 > var0) {\n                if (0x2d53e1bd > var0) {\n                    if (var0 == 0x06fdde03) {\n                        // Dispatch table entry for name()\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var temp0 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp0 + 0x40;\n                        memory[temp0:temp0 + 0x20] = 0x0c;\n                        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x29b4a0b734a1902a37b5b2b7 << 0xa1;\n                        var1 = 0x016d;\n                        var var3 = memory[0x40:0x60];\n                        var var2 = temp0;\n                        var1 = symbol(var2, var3);\n                    \n                    label_016D:\n                        var temp1 = memory[0x40:0x60];\n                        return memory[temp1:temp1 + var1 - temp1];\n                    } else if (var0 == 0x095ea7b3) {\n                        // Dispatch table entry for approve(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0196;\n                        var2 = 0x0191;\n                        var3 = msg.data.length;\n                        var var4 = 0x04;\n                        var2, var3 = func_1620(var3, var4);\n                        var4 = 0x00;\n                        var var5 = 0x0418;\n                        var var6 = msg.sender;\n                        var var7 = var2;\n                        var var8 = var3;\n                        func_0AD0(var6, var7, var8);\n                    \n                    label_0418:\n                        var4 = 0x01;\n                        var1 = var4;\n                        // Error: Could not resolve jump destination!\n                    } else if (var0 == 0x0faee56f) {\n                        // Dispatch table entry for 0x0faee56f (unknown)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x01bc;\n                        var2 = storage[0x12];\n                    \n                    label_01BC:\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = var2;\n                        var2 = temp2 + 0x20;\n                        goto label_016D;\n                    } else if (var0 == 0x18160ddd) {\n                        // Dispatch table entry for totalSupply()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x01bc;\n                        var1 = totalSupply();\n                        goto label_01BC;\n                    } else if (var0 == 0x23b872dd) {\n                        // Dispatch table entry for transferFrom(address,address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0196;\n                        var2 = 0x01fa;\n                        var3 = msg.data.length;\n                        var4 = 0x04;\n                        var2, var3, var4 = func_164C(var3, var4);\n                        var5 = 0x00;\n                        var6 = 0x0450;\n                        var7 = var2;\n                        var8 = var3;\n                        var var9 = var4;\n                        func_0BF4(var7, var8, var9);\n                        var6 = 0x04a2;\n                        var7 = var2;\n                        var8 = msg.sender;\n                        var9 = 0x049d;\n                        var temp3 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp3 + 0x60;\n                        memory[temp3:temp3 + 0x20] = 0x28;\n                        memory[temp3 + 0x20:temp3 + 0x20 + 0x28] = code[0x1a69:0x1a91];\n                        memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x02;\n                        var temp4 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp4;\n                        var var10 = storage[keccak256(memory[0x00:0x40])];\n                        var var11 = var4;\n                        var var12 = temp3;\n                        var9 = func_120D(var10, var11, var12);\n                        func_0AD0(var7, var8, var9);\n                        // Error: Could not resolve method call return address!\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x2d53e1bd) {\n                    // Dispatch table entry for 0x2d53e1bd (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0214;\n                    func_04AC();\n                    stop();\n                } else if (var0 == 0x313ce567) {\n                    // Dispatch table entry for decimals()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0x09;\n                    var1 = temp5 + 0x20;\n                    goto label_016D;\n                } else if (var0 == 0x3bbac579) {\n                    // Dispatch table entry for isBot(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0196;\n                    var2 = 0x024d;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_168D(var3, var4);\n                    var1 = func_024D(var2);\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = !!var1;\n                    var1 = temp6 + 0x20;\n                    goto label_016D;\n                } else if (var0 == 0x70a08231) {\n                    // Dispatch table entry for balanceOf(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01bc;\n                    var2 = 0x0286;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_168D(var3, var4);\n                    var1 = func_0286(var2);\n                    goto label_01BC;\n                } else if (var0 == 0x715018a6) {\n                    // Dispatch table entry for renounceOwnership()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0214;\n                    renounceOwnership();\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0xbf474bed > var0) {\n                if (var0 == 0x7d1db4a5) {\n                    // Dispatch table entry for _maxTxAmount()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01bc;\n                    var2 = storage[0x0f];\n                    goto label_01BC;\n                } else if (var0 == 0x8da5cb5b) {\n                    // Dispatch table entry for owner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = storage[0x00] & (0x01 << 0xa0) - 0x01;\n                    var1 = temp7 + 0x20;\n                    goto label_016D;\n                } else if (var0 == 0x8f9a55c0) {\n                    // Dispatch table entry for _maxWalletSize()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01bc;\n                    var2 = storage[0x10];\n                    goto label_01BC;\n                } else if (var0 == 0x95d89b41) {\n                    // Dispatch table entry for symbol()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp8 = memory[0x40:0x60];\n                    var1 = temp8;\n                    memory[0x40:0x60] = var1 + 0x40;\n                    memory[var1:var1 + 0x20] = 0x07;\n                    memory[var1 + 0x20:var1 + 0x20 + 0x20] = 0x245349414e4943 << 0xc8;\n                    var temp9 = var1;\n                    var1 = 0x016d;\n                    var2 = temp9;\n                    var3 = memory[0x40:0x60];\n                    var1 = symbol(var2, var3);\n                    goto label_016D;\n                } else if (var0 == 0xa9059cbb) {\n                    // Dispatch table entry for transfer(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0196;\n                    var2 = 0x0355;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2, var3 = func_1620(var3, var4);\n                    var4 = 0x00;\n                    var5 = 0x0418;\n                    var6 = msg.sender;\n                    var7 = var2;\n                    var8 = var3;\n                    func_0BF4(var6, var7, var8);\n                    goto label_0418;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0xbf474bed) {\n                // Dispatch table entry for 0xbf474bed (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01bc;\n                var2 = storage[0x11];\n                goto label_01BC;\n            } else if (var0 == 0xc9567bf9) {\n                // Dispatch table entry for openTrading()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0214;\n            \n                if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n                    var temp18 = memory[0x40:0x60];\n                    memory[temp18:temp18 + 0x20] = 0x461bcd << 0xe5;\n                    var2 = 0x04d6;\n                    var3 = temp18 + 0x04;\n                    var2 = func_18DE(var3);\n                    goto label_04D6;\n                } else if (!(storage[0x14] / (0x01 << 0xa0) & 0xff)) {\n                    storage[0x13] = (storage[0x13] & ~((0x01 << 0xa0) - 0x01)) | 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                    var2 = 0x06b5;\n                    var4 = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                    var3 = address(this);\n                    var5 = 0x06a7;\n                    var6 = 0x09;\n                    var7 = 0x0a;\n                    var5 = func_18B8(var6, var7);\n                    func_06A7(var3, var4, var5);\n                    var2 = storage[0x13] & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                    var3 = 0xc45a0155;\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n                    var4 = temp10 + 0x04;\n                    var temp11 = memory[0x40:0x60];\n                    var temp12;\n                    temp12, memory[temp11:temp11 + 0x20] = address(var2).staticcall.gas(msg.gas)(memory[temp11:temp11 + var4 - temp11]);\n                    var5 = !temp12;\n                \n                    if (!var5) {\n                        var temp13 = memory[0x40:0x60];\n                        var temp14 = returndata.length;\n                        memory[0x40:0x60] = temp13 + (temp14 + 0x1f & ~0x1f);\n                        var2 = 0x072c;\n                        var3 = temp13 + temp14;\n                        var4 = temp13;\n                        var5 = 0x00;\n                    \n                        if (var3 - var4 i< 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var6 = memory[var4:var4 + 0x20];\n                        var7 = 0x12c9;\n                        var8 = var6;\n                        func_15F8(var8);\n                        var2 = var6;\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        var temp15 = returndata.length;\n                        memory[0x00:0x00 + temp15] = returndata[0x00:0x00 + temp15];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp16 = memory[0x40:0x60];\n                    memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = 0x20;\n                    memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x17;\n                    memory[temp16 + 0x44:temp16 + 0x44 + 0x20] = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n                    var2 = temp16 + 0x64;\n                \n                label_04D6:\n                    var temp17 = memory[0x40:0x60];\n                    revert(memory[temp17:temp17 + var2 - temp17]);\n                }\n            } else if (var0 == 0xc97c1821) {\n                // Dispatch table entry for 0xc97c1821 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0214;\n                var2 = 0x03a0;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_16C0(var3, var4);\n                func_03A0(var2);\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01bc;\n                var2 = 0x03c0;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_1785(var3, var4);\n                var1 = func_03C0(var2, var3);\n                goto label_01BC;\n            } else if (var0 == 0xe644f514) {\n                // Dispatch table entry for 0xe644f514 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0214;\n                var2 = 0x0406;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_16C0(var3, var4);\n                func_0406(var2);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (msg.data.length) { revert(memory[0x00:0x00]); }\n        else { stop(); }\n    }\n    \n    function func_024D(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_0286(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_03A0(var arg0) {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x00;\n        \n            if (var0 >= memory[arg0:arg0 + 0x20]) {\n            label_0A3A:\n                return;\n            } else {\n            label_09DF:\n                var var1 = 0x00;\n                var var2 = 0x04;\n                var var3 = 0x00;\n                var var4 = arg0;\n                var var5 = var0;\n            \n                if (var5 < memory[var4:var4 + 0x20]) {\n                    var temp0 = var3;\n                    memory[temp0:temp0 + 0x20] = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20] & (0x01 << 0xa0) - 0x01;\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n                    var temp1 = keccak256(memory[0x00:0x00 + temp0 + 0x40]);\n                    storage[temp1] = !!var1 | (storage[temp1] & ~0xff);\n                    var1 = var0;\n                    var2 = 0x0a32;\n                    var3 = var1;\n                    var2 = func_1996(var3);\n                    var0 = var2;\n                \n                    if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_0A3A; }\n                    else { goto label_09DF; }\n                } else {\n                    var var6 = 0x09f6;\n                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp2 + 0x04;\n            var0 = 0x04d6;\n            var0 = func_18DE(var1);\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function func_03C0(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0406(var arg0) {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x00;\n        \n            if (var0 >= memory[arg0:arg0 + 0x20]) {\n            label_0A3A:\n                return;\n            } else {\n            label_0A75:\n                var var1 = 0x01;\n                var var2 = 0x04;\n                var var3 = 0x00;\n                var var4 = arg0;\n                var var5 = var0;\n            \n                if (var5 < memory[var4:var4 + 0x20]) {\n                    var temp0 = var3;\n                    memory[temp0:temp0 + 0x20] = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20] & (0x01 << 0xa0) - 0x01;\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n                    var temp1 = keccak256(memory[0x00:0x00 + temp0 + 0x40]);\n                    storage[temp1] = !!var1 | (storage[temp1] & ~0xff);\n                    var1 = var0;\n                    var2 = 0x0ac8;\n                    var3 = var1;\n                    var2 = func_1996(var3);\n                    var0 = var2;\n                \n                    if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_0A3A; }\n                    else { goto label_0A75; }\n                } else {\n                    var var6 = 0x0a8c;\n                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x04d6;\n            var1 = temp2 + 0x04;\n            var0 = func_18DE(var1);\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function totalSupply() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0430;\n        var var2 = 0x09;\n        var var3 = 0x0a;\n        var1 = func_18B8(var2, var3);\n        var2 = var1;\n        var1 = 0x043e;\n        var3 = 0x05f5e100;\n        return func_18C7(var2, var3);\n    }\n    \n    function func_04AC() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x04eb;\n            var var1 = 0x09;\n            var var2 = 0x0a;\n            var0 = func_18B8(var1, var2);\n            var1 = var0;\n            var0 = 0x04f9;\n            var2 = 0x05f5e100;\n            var0 = func_18C7(var1, var2);\n            storage[0x0f] = var0;\n            var0 = 0x0508;\n            var1 = 0x09;\n            var2 = 0x0a;\n            var0 = func_18B8(var1, var2);\n            var1 = var0;\n            var0 = 0x0516;\n            var2 = 0x05f5e100;\n            var0 = func_18C7(var1, var2);\n            storage[0x10] = var0;\n            var0 = 0x947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf;\n            var1 = 0x0546;\n            var2 = 0x09;\n            var var3 = 0x0a;\n            var1 = func_18B8(var2, var3);\n            var2 = var1;\n            var1 = 0x0554;\n            var3 = 0x05f5e100;\n            var1 = func_18C7(var2, var3);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [stack[-2]]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp2 + 0x04;\n            var0 = 0x04d6;\n            var0 = func_18DE(var1);\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function renounceOwnership() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & (0x01 << 0xa0) - 0x01, 0x00]);\n            storage[0x00] = storage[0x00] & ~((0x01 << 0xa0) - 0x01);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var var1 = temp0 + 0x04;\n            var var0 = 0x04d6;\n            var0 = func_18DE(var1);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_06A7(var arg0, var arg1, var arg2) {\n        var temp0 = arg2;\n        arg2 = 0x049d;\n        var var0 = temp0;\n        var var1 = 0x05f5e100;\n        arg2 = func_18C7(var0, var1);\n        func_0AD0(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0AD0(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x24;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = 0x72657373 << 0xe0;\n            var0 = temp9 + 0x84;\n            goto label_04D6;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = temp0 & arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x22;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7373 << 0xf0;\n            var var0 = temp7 + 0x84;\n        \n        label_04D6:\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_0BF4(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = 0x20;\n            memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = 0x25;\n            memory[temp18 + 0x44:temp18 + 0x44 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n            memory[temp18 + 0x64:temp18 + 0x64 + 0x20] = 0x6472657373 << 0xd8;\n            var0 = temp18 + 0x84;\n            goto label_04D6;\n        } else if (!(arg1 & (0x01 << 0xa0) - 0x01)) {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x23;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n            memory[temp17 + 0x64:temp17 + 0x64 + 0x20] = 0x657373 << 0xe8;\n            var0 = temp17 + 0x84;\n            goto label_04D6;\n        } else if (arg2 > 0x00) {\n            var var0 = 0x00;\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var var1 = storage[var0] & temp0 == temp0 & arg0;\n        \n            if (storage[var0] & temp0 == temp0 & arg0) {\n                var temp15 = (0x01 << 0xa0) - 0x01;\n            \n                if (storage[0x00] & temp15 == temp15 & arg1) { goto label_10CA; }\n                else { goto label_0D4F; }\n            } else if (!var1) {\n            label_10CA:\n            \n                if (!var0) {\n                label_1144:\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    var1 = 0x1167;\n                    var var2 = storage[keccak256(memory[0x00:0x40])];\n                    var var3 = arg2;\n                    var1 = func_153A(var2, var3);\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var1 = 0x11ac;\n                    var2 = 0x118d;\n                    var3 = arg2;\n                    var var4 = var0;\n                    var2 = func_153A(var3, var4);\n                    var1 = func_118D(arg1, var2);\n                    var temp1 = (0x01 << 0xa0) - 0x01;\n                    memory[0x00:0x20] = arg1 & temp1;\n                    memory[0x20:0x40] = 0x01;\n                    var temp2 = var1;\n                    var1 = arg1 & temp1;\n                    storage[keccak256(memory[0x00:0x40])] = temp2;\n                    var2 = arg0 & temp1;\n                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                    var4 = 0x11f6;\n                    var var5 = arg2;\n                    var var6 = var0;\n                    var4 = func_153A(var5, var6);\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var4;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [stack[-2], stack[-3], stack[-4]]);\n                    return;\n                } else {\n                    memory[0x00:0x20] = address(this);\n                    memory[0x20:0x40] = 0x01;\n                    var2 = storage[keccak256(memory[0x00:0x40])];\n                    var1 = 0x10ea;\n                    var3 = var0;\n                    var1 = func_14DB(var2, var3);\n                    memory[0x00:0x20] = address(this);\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var1 = address(this);\n                    var temp5 = memory[0x40:0x60];\n                    var2 = arg0 & (0x01 << 0xa0) - 0x01;\n                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                    memory[temp5:temp5 + 0x20] = var0;\n                    var4 = temp5 + 0x20;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + var4 - temp6], [stack[-2], stack[-3], stack[-4]]);\n                    goto label_1144;\n                }\n            } else {\n            label_0D4F:\n                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x04;\n                var1 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n            \n                if (var1) {\n                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                \n                    if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { goto label_0D99; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (var1) {\n                label_0D99:\n                    var1 = 0x0dc5;\n                    var2 = 0x64;\n                    var3 = 0x0dbf;\n                \n                    if (storage[0x0e] > storage[0x0b]) {\n                        var3 = func_0DB4(arg2);\n                    \n                    label_0DBF:\n                        var temp7 = var2;\n                        var2 = var3;\n                        var3 = temp7;\n                        var4 = 0x00;\n                        var5 = 0x12c9;\n                        var6 = var2;\n                        var var7 = var3;\n                        var temp8 = memory[0x40:0x60];\n                        var var8 = temp8;\n                        memory[0x40:0x60] = var8 + 0x40;\n                        memory[var8:var8 + 0x20] = 0x1a;\n                        memory[var8 + 0x20:var8 + 0x20 + 0x20] = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n                        var var9 = 0x00;\n                        var var10 = var8;\n                    \n                        if (var7) {\n                            var10 = 0x00;\n                            var var11 = 0x123e;\n                            var var12 = var7;\n                            var var13 = var6;\n                            var11 = func_19D5(var12, var13);\n                            var5 = var11;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            var temp9 = memory[0x40:0x60];\n                            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n                            var temp10 = var10;\n                            var10 = 0x04d6;\n                            var11 = temp10;\n                            var12 = temp9 + 0x04;\n                            var10 = symbol(var11, var12);\n                        \n                        label_04D6:\n                            var temp11 = memory[0x40:0x60];\n                            revert(memory[temp11:temp11 + var10 - temp11]);\n                        }\n                    } else {\n                        var4 = storage[0x07];\n                        var temp12 = var4;\n                        var4 = arg2;\n                        var5 = temp12;\n                        var6 = 0x00;\n                    \n                        if (0x00 - var4) {\n                            var7 = 0x00;\n                            var8 = 0x1265;\n                            var9 = var5;\n                            var10 = var4;\n                            var8 = func_18C7(var9, var10);\n                            var temp13 = var8;\n                            var7 = temp13;\n                            var8 = var5;\n                            var9 = 0x1272;\n                            var10 = var4;\n                            var11 = var7;\n                            var9 = func_19D5(var10, var11);\n                        \n                            if (var9 == var8) {\n                                var3 = var7;\n                                // Error: Could not resolve jump destination!\n                            } else {\n                                var temp14 = memory[0x40:0x60];\n                                memory[temp14:temp14 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp14 + 0x04:temp14 + 0x04 + 0x20] = 0x20;\n                                memory[temp14 + 0x24:temp14 + 0x24 + 0x20] = 0x21;\n                                memory[temp14 + 0x44:temp14 + 0x44 + 0x20] = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n                                memory[temp14 + 0x64:temp14 + 0x64 + 0x20] = 0x77 << 0xf8;\n                                var8 = temp14 + 0x84;\n                                goto label_04D6;\n                            }\n                        } else {\n                            var6 = 0x00;\n                            var3 = var6;\n                            // Error: Could not resolve jump destination!\n                        }\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = 0x20;\n            memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x29;\n            memory[temp16 + 0x44:temp16 + 0x44 + 0x20] = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n            memory[temp16 + 0x64:temp16 + 0x64 + 0x20] = 0x7468616e207a65726f << 0xb8;\n            var0 = temp16 + 0x84;\n            goto label_04D6;\n        }\n    }\n    \n    function func_0DB4(var arg0) returns (var r0) {\n        var var1 = storage[0x09];\n        var var0 = arg0;\n        var var2 = 0x00;\n    \n        if (!(0x00 - var0)) { return 0x00; }\n    \n        var var3 = 0x00;\n        var var4 = 0x1265;\n        var var5 = var1;\n        var var6 = var0;\n        var4 = func_18C7(var5, var6);\n        var temp0 = var4;\n        var3 = temp0;\n        var4 = var1;\n        var5 = 0x1272;\n        var6 = var0;\n        var var7 = var3;\n        var5 = func_19D5(var6, var7);\n    \n        if (var5 == var4) { return var3; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x21;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        memory[temp1 + 0x64:temp1 + 0x64 + 0x20] = 0x77 << 0xf8;\n        var4 = temp1 + 0x84;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + var4 - temp2]);\n    }\n    \n    function func_118D(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var var0 = arg1;\n        arg1 = storage[keccak256(memory[0x00:0x40])];\n        r0 = func_14DB(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_120D(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) {\n            var1 = 0x00;\n            var var2 = 0x123e;\n            var var3 = arg1;\n            var var4 = arg0;\n            return func_19C2(var3, var4);\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = var1;\n            var1 = 0x04d6;\n            var2 = temp1;\n            var3 = temp0 + 0x04;\n            var1 = symbol(var2, var3);\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + var1 - temp2]);\n        }\n    }\n    \n    function func_14DB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x14e8;\n        var var3 = arg1;\n        var var4 = arg0;\n        var2 = func_19AF(var3, var4);\n        var1 = var2;\n    \n        if (var1 >= arg0) { return var1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1b;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var2 = temp0 + 0x64;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + var2 - temp1]);\n    }\n    \n    function func_153A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x12c9;\n        var var2 = arg0;\n        var var3 = arg1;\n        var temp0 = memory[0x40:0x60];\n        var var4 = temp0;\n        memory[0x40:0x60] = var4 + 0x40;\n        memory[var4:var4 + 0x20] = 0x1e;\n        memory[var4 + 0x20:var4 + 0x20 + 0x20] = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        return func_120D(var2, var3, var4);\n    }\n    \n    function symbol(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = 0x00;\n    \n        if (var3 >= var2) {\n        label_15D7:\n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = 0x00;\n            return temp3 + (temp2 + 0x1f & ~0x1f) + 0x40;\n        } else {\n        label_15C4:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_15D7; }\n            else { goto label_15C4; }\n        }\n    }\n    \n    function func_15F8(var arg0) {\n        var temp0 = arg0;\n    \n        if (temp0 == temp0 & (0x01 << 0xa0) - 0x01) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1610(var arg0) returns (var r0) {\n        var var0 = msg.data[arg0:arg0 + 0x20];\n        var var1 = 0x161b;\n        var var2 = var0;\n        func_15F8(var2);\n        return var0;\n    }\n    \n    function func_1620(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x163e;\n        var var4 = var2;\n        func_15F8(var4);\n        r0 = var2;\n        arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_164C(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var var3 = msg.data[arg1:arg1 + 0x20];\n        var var4 = 0x166c;\n        var var5 = var3;\n        func_15F8(var5);\n        var0 = var3;\n        var3 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var4 = 0x167c;\n        var5 = var3;\n        func_15F8(var5);\n        r0 = var0;\n        arg0 = var3;\n        arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n        return r0, arg0, arg1;\n    }\n    \n    function func_168D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var2 = 0x12c9;\n        var var3 = var1;\n        func_15F8(var3);\n        return var1;\n    }\n    \n    function func_16C0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n    \n        if (arg0 - arg1 i< var1) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0xffffffffffffffff;\n    \n        if (var2 > var3) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1 + var2;\n        var2 = temp0;\n    \n        if (var2 + 0x1f i>= arg0) { revert(memory[0x00:0x00]); }\n    \n        var var4 = msg.data[var2:var2 + 0x20];\n    \n        if (var4 <= var3) {\n            var var5 = var4 << 0x05;\n            var temp1 = memory[0x40:0x60];\n            var var6 = temp1;\n            var temp2 = var6 + (var5 + 0x3f & ~0x1f);\n            var var7 = temp2;\n        \n            if (!((var7 > var3) | (var7 < var6))) {\n                memory[0x40:0x60] = var7;\n                var temp3 = var6;\n                memory[temp3:temp3 + 0x20] = var4;\n                var temp4 = var1;\n                var3 = temp3 + temp4;\n                var4 = temp4 + var5 + var2;\n                var6 = temp3;\n            \n                if (var4 > arg0) { revert(memory[0x00:0x00]); }\n            \n                var temp5 = var1 + var2;\n                var6 = var6;\n                var2 = temp5;\n            \n                if (var2 >= var4) {\n                label_1779:\n                    return var6;\n                } else {\n                label_1762:\n                    var7 = 0x176a;\n                    var var8 = var2;\n                    var7 = func_1610(var8);\n                    var temp6 = var3;\n                    memory[temp6:temp6 + 0x20] = var7;\n                    var temp7 = var1;\n                    var2 = temp7 + var2;\n                    var6 = var6;\n                    var3 = temp7 + temp6;\n                \n                    if (var2 >= var4) { goto label_1779; }\n                    else { goto label_1762; }\n                }\n            } else {\n                var8 = 0x1736;\n            \n            label_16AA:\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x41;\n                revert(memory[0x00:0x24]);\n            }\n        } else {\n            var5 = 0x1711;\n            goto label_16AA;\n        }\n    }\n    \n    function func_1785(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x17a3;\n        var var4 = var2;\n        func_15F8(var4);\n        var0 = var2;\n        var2 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var3 = 0x17b3;\n        var4 = var2;\n        func_15F8(var4);\n        arg0 = var2;\n        r0 = var0;\n        return r0, arg0;\n    }\n    \n    function func_17D4(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x01;\n        var var1 = arg1;\n        var var2 = var0;\n    \n        if (arg0 <= var2) {\n        label_180F:\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n        label_17E2:\n            var temp0 = var1;\n        \n            if (temp0 > ~0x00 / temp0) {\n                var var3 = 0x17f5;\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            } else if (!(arg0 & var2)) {\n                arg0 = arg0 >> var2;\n                var temp1 = var1;\n                var1 = temp1 * temp1;\n                var2 = var2;\n            \n            label_17D9:\n            \n                if (arg0 <= var2) { goto label_180F; }\n                else { goto label_17E2; }\n            } else {\n                var temp2 = var1;\n                var0 = temp2 * var0;\n                arg0 = arg0 >> var2;\n                var2 = var2;\n                var1 = temp2 * temp2;\n                goto label_17D9;\n            }\n        }\n    }\n    \n    function func_1817(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg0) {\n            var0 = 0x01;\n            goto label_041C;\n        } else if (arg1) {\n            var var1 = arg1;\n        \n            if (var1 == 0x01) {\n                var0 = 0x01;\n            \n            label_041C:\n                return var0;\n            } else if (var1 != 0x02) {\n                var temp0 = arg0;\n                var temp1 = arg1;\n            \n                if (!(((temp1 < 0x0b) & (temp0 < 0x4e)) | ((temp1 < 0x0133) & (temp0 < 0x20)))) {\n                    var1 = 0x189c;\n                    var2 = arg0;\n                    var var3 = arg1;\n                    var1, var2 = func_17D4(var2, var3);\n                \n                    if (var1 <= ~0x00 / var2) { return var2 * var1; }\n                \n                    var3 = 0x18b0;\n                    goto label_17BE;\n                } else {\n                    var0 = arg1 ** arg0;\n                    goto label_041C;\n                }\n            } else if (arg0 <= 0xff) {\n                var0 = 0x01 << arg0;\n                goto label_041C;\n            } else {\n                var var2 = 0x1864;\n            \n            label_17BE:\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_041C;\n        }\n    }\n    \n    function func_18B8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x12c9;\n        var var2 = arg0 & 0xff;\n        var var3 = arg1;\n        var1 = func_1817(var2, var3);\n    \n    label_12C9:\n        return var1;\n    }\n    \n    function func_18C7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg0;\n        var var0 = temp1 * temp0;\n    \n        if ((temp1 == var0 / temp0) | !temp0) { return var0; }\n    \n        var var1 = 0x041c;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_18DE(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x20;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        return temp0 + 0x60;\n    }\n    \n    function func_1996(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 + 0x01) { return arg0 + 0x01; }\n    \n        var var1 = 0x19a8;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_19AF(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = arg0 + temp0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var var1 = 0x041c;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_19C2(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 - arg0;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var var1 = 0x041c;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_19D5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) { return arg1 / arg0; }\n    \n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x12;\n        revert(memory[0x00:0x24]);\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 26.27244997024536,
	"usage": {
		"completion_tokens": 505,
		"prompt_tokens": 15162,
		"total_tokens": 15667
	}
}