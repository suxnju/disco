{
	"address": "0x087239350b3b9bcdad0e7e318ef9c4eaff5eaed3",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity smart contract that could be a possible representation of the decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    uint256 public storageVariable;\n    address public contractAddress;\n    uint256 private constant MAX_UINT = 2**256 - 1;\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    // Events\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // Constructor\n    constructor() public {\n        storageVariable = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        contractAddress = address(this);\n    }\n\n    // Fallback function\n    function() external payable {\n        revert();\n    }\n\n    // Transfers the balance from the sender's account to another account\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    // Transfers the balance from one account to another account on your behalf\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(_value <= balances[_from]);\n        require(_value <= allowance);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    // Allows another account to transfer a balance from your account\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    // Returns the balance of a specified account\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    // Returns the amount which an account is allowed to withdraw from another account.\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n```\n\nPlease note that the above solidity code is a standard implementation of ERC20 token. The real implementation can differ based on the business logic of the smart contract. The complete implementation of the smart contract can be made after understanding the complete business logic of the contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700475182,
	"id": "chatcmpl-8MvZ065MkQJUkl55KKzaaRpaK2rsN",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (0x00) {\n            memory[0x0160:0x0180] = var-1;\n            memory[0x0140:0x0160] = var-2;\n        \n            if (!address(storage[0x0b]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ storage[0x0b])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01a0:0x01c0] = 0xf1bb1086;\n            memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n            var temp56;\n            temp56, memory[0x0220:0x0240] = address(storage[0x0b]).staticcall.gas(msg.gas)(memory[0x01bc:0x01e0]);\n        \n            if (!temp56) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = memory[0x0220:0x0240];\n        \n            if (memory[0x0180:0x01a0] <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = memory[0x0180:0x01a0];\n            var-2 = memory[0x00:0x20];\n            // Error: Could not resolve jump destination!\n        } else if (0x00) {\n            memory[0x01a0:0x01c0] = var-1;\n            memory[0x0140:0x0160] = var-2;\n            memory[0x0160:0x0180] = var-3;\n            memory[0x0180:0x01a0] = var-4;\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01e0:0x0200] = 0x70a08231;\n            memory[0x0200:0x0220] = address(this);\n            var temp51;\n            temp51, memory[0x0260:0x0280] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x01fc:0x0220]);\n        \n            if (!temp51) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01c0:0x01e0] = memory[0x0260:0x0280];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x02a0:0x02c0] = 0x70a08231;\n            memory[0x02c0:0x02e0] = memory[0x0160:0x0180];\n            var temp52;\n            temp52, memory[0x0320:0x0340] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x02bc:0x02e0]);\n        \n            if (!temp52) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0280:0x02a0] = memory[0x0320:0x0340];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0340:0x0360] = 0xa9059cbb;\n            memory[0x0360:0x0380] = memory[0x0160:0x0180];\n            memory[0x0380:0x03a0] = memory[0x0180:0x01a0];\n            var temp53;\n            temp53, memory[0x03e0:0x0400] = address(memory[0x0140:0x0160]).call.gas(msg.gas)(memory[0x035c:0x03a0]);\n        \n            if (!temp53) { revert(memory[0x00:0x00]); }\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0420:0x0440] = 0x70a08231;\n            memory[0x0440:0x0460] = address(this);\n            var temp54;\n            temp54, memory[0x04a0:0x04c0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x043c:0x0460]);\n        \n            if (!temp54) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0400:0x0420] = memory[0x04a0:0x04c0];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x04e0:0x0500] = 0x70a08231;\n            memory[0x0500:0x0520] = memory[0x0160:0x0180];\n            var temp55;\n            temp55, memory[0x0560:0x0580] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x04fc:0x0520]);\n        \n            if (!temp55) { revert(memory[0x00:0x00]); }\n        \n            memory[0x04c0:0x04e0] = memory[0x0560:0x0580];\n        \n            if (memory[0x0280:0x02a0] + memory[0x0180:0x01a0] < memory[0x0280:0x02a0]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x04c0:0x04e0] != memory[0x0280:0x02a0] + memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x01c0:0x01e0] < memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0400:0x0420] != memory[0x01c0:0x01e0] - memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = 0x01;\n            var-4 = memory[0x00:0x20];\n            // Error: Could not resolve jump destination!\n        } else if (0x00) {\n            // Error: StackRead before write???\n            var var-1;\n            // Error: StackRead before write???\n            var var-5;\n            // Error: StackRead before write???\n            var var-3;\n            // Error: StackRead before write???\n            var var-2;\n            // Error: StackRead before write???\n            var var-4;\n            memory[0x01c0:0x01e0] = var-1;\n            memory[0x0140:0x0160] = var-2;\n            memory[0x0160:0x0180] = var-3;\n            memory[0x0180:0x01a0] = var-4;\n            memory[0x01a0:0x01c0] = var-5;\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0200:0x0220] = 0x70a08231;\n            memory[0x0220:0x0240] = memory[0x0180:0x01a0];\n            var temp46;\n            temp46, memory[0x0280:0x02a0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x021c:0x0240]);\n        \n            if (!temp46) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01e0:0x0200] = memory[0x0280:0x02a0];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x02c0:0x02e0] = 0x70a08231;\n            memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n            var temp47;\n            temp47, memory[0x0340:0x0360] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x02dc:0x0300]);\n        \n            if (!temp47) { revert(memory[0x00:0x00]); }\n        \n            memory[0x02a0:0x02c0] = memory[0x0340:0x0360];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0360:0x0380] = 0x23b872dd;\n            memory[0x0380:0x03a0] = memory[0x0160:0x0180];\n            memory[0x03a0:0x03c0] = memory[0x0180:0x01a0];\n            memory[0x03c0:0x03e0] = memory[0x01a0:0x01c0];\n            var temp48;\n            temp48, memory[0x0420:0x0440] = address(memory[0x0140:0x0160]).call.gas(msg.gas)(memory[0x037c:0x03e0]);\n        \n            if (!temp48) { revert(memory[0x00:0x00]); }\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0460:0x0480] = 0x70a08231;\n            memory[0x0480:0x04a0] = memory[0x0180:0x01a0];\n            var temp49;\n            temp49, memory[0x04e0:0x0500] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x047c:0x04a0]);\n        \n            if (!temp49) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0440:0x0460] = memory[0x04e0:0x0500];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0520:0x0540] = 0x70a08231;\n            memory[0x0540:0x0560] = memory[0x0160:0x0180];\n            var temp50;\n            temp50, memory[0x05a0:0x05c0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x053c:0x0560]);\n        \n            if (!temp50) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0500:0x0520] = memory[0x05a0:0x05c0];\n        \n            if (memory[0x02a0:0x02c0] < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0500:0x0520] != memory[0x02a0:0x02c0] - memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x01e0:0x0200] + memory[0x01a0:0x01c0] < memory[0x01e0:0x0200]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0440:0x0460] != memory[0x01e0:0x0200] + memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = 0x01;\n            var-5 = memory[0x00:0x20];\n            // Error: Could not resolve jump destination!\n        } else if (memory[0x00:0x20] != 0x55776b77) {\n            if (memory[0x00:0x20] != 0x93ca2f8a) {\n                if (memory[0x00:0x20] != 0x91b26ae0) {\n                    if (memory[0x00:0x20] != 0x126603b5) {\n                        if (memory[0x00:0x20] != 0x43d91bf1) {\n                            if (memory[0x00:0x20] != 0x23d7d1a8) {\n                                if (memory[0x00:0x20] != 0x44dbd334) {\n                                    if (memory[0x00:0x20] != 0x903a1001) {\n                                        if (memory[0x00:0x20] != 0x80a0628b) {\n                                            if (memory[0x00:0x20] != 0xf2fde38b) {\n                                                if (memory[0x00:0x20] != 0x993f4a20) {\n                                                    if (memory[0x00:0x20] != 0xe005cbbf) {\n                                                        if (memory[0x00:0x20] != 0x86d1e02b) {\n                                                            if (memory[0x00:0x20] != 0xa9059cbb) {\n                                                                if (memory[0x00:0x20] != 0x23b872dd) {\n                                                                    if (memory[0x00:0x20] != 0x095ea7b3) {\n                                                                        if (memory[0x00:0x20] != 0x06fdde03) {\n                                                                            if (memory[0x00:0x20] != 0x95d89b41) {\n                                                                                if (memory[0x00:0x20] != 0x8da5cb5b) {\n                                                                                    if (memory[0x00:0x20] != 0x313ce567) {\n                                                                                        if (memory[0x00:0x20] != 0x18160ddd) {\n                                                                                            if (memory[0x00:0x20] != 0x70a08231) {\n                                                                                                if (memory[0x00:0x20] != 0xdd62ed3e) {\n                                                                                                    if (memory[0x00:0x20] != 0x4999eb8f) {\n                                                                                                        if (memory[0x00:0x20] != 0x51ecd2fa) {\n                                                                                                            if (memory[0x00:0x20] != 0x752708fb) {\n                                                                                                                if (memory[0x00:0x20] != 0x2bc51c6d) { revert(memory[0x00:0x00]); }\n                                                                                                            \n                                                                                                                if (msg.value) { revert(memory[0x00:0x00]); }\n                                                                                                            \n                                                                                                                memory[0x00:0x20] = storage[0x0b];\n                                                                                                                return memory[0x00:0x20];\n                                                                                                            } else if (!msg.value) {\n                                                                                                                memory[0x0140:0x0180] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n                                                                                                            \n                                                                                                                if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n                                                                                                            \n                                                                                                                memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n                                                                                                                memory[0xc0:0xe0] = 0x09;\n                                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                                return memory[0x00:0x20];\n                                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                                        } else if (!msg.value) {\n                                                                                                            var var0 = msg.data[0x04:0x24];\n                                                                                                        \n                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                        \n                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                            memory[0xc0:0xe0] = 0x08;\n                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                            return memory[0x00:0x20];\n                                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                                    } else if (!msg.value) {\n                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                    \n                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                    \n                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                        memory[0xc0:0xe0] = 0x07;\n                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                        return memory[0x00:0x20];\n                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                } else if (!msg.value) {\n                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                \n                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                \n                                                                                                    var0 = msg.data[0x24:0x44];\n                                                                                                \n                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                \n                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                                                    var temp0 = keccak256(memory[0xc0:0x0100]);\n                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                    memory[0xc0:0xe0] = temp0;\n                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                    return memory[0x00:0x20];\n                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                            } else if (!msg.value) {\n                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                            \n                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                            \n                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                memory[0xc0:0xe0] = 0x05;\n                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                return memory[0x00:0x20];\n                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                        } else if (!msg.value) {\n                                                                                            memory[0x00:0x20] = storage[0x04];\n                                                                                            return memory[0x00:0x20];\n                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                    } else if (!msg.value) {\n                                                                                        memory[0x00:0x20] = storage[0x03];\n                                                                                        return memory[0x00:0x20];\n                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                } else if (!msg.value) {\n                                                                                    memory[0x00:0x20] = storage[0x02];\n                                                                                    return memory[0x00:0x20];\n                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                            } else if (!msg.value) {\n                                                                                var0 = 0x01;\n                                                                                memory[0xc0:0xe0] = var0;\n                                                                                var var1 = keccak256(memory[0xc0:0xe0]);\n                                                                                var var2 = 0x0180;\n                                                                                var temp1 = storage[var1] + 0x20;\n                                                                                var var3 = temp1;\n                                                                                var var4 = 0x0120;\n                                                                                memory[var4:var4 + 0x20] = 0x00;\n                                                                                var var5 = 0x02;\n                                                                            \n                                                                                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_25AD; }\n                                                                            \n                                                                            label_25B1:\n                                                                                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                                var temp2 = var4;\n                                                                                var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                                                                                memory[temp2:temp2 + 0x20] = temp3;\n                                                                            \n                                                                                if (var5 == temp3) { goto label_25D3; }\n                                                                            \n                                                                                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_25B1; }\n                                                                            \n                                                                            label_25AD:\n                                                                            \n                                                                            label_25D3:\n                                                                                var temp4 = memory[0x0180:0x01a0];\n                                                                                var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                                                                                var1 = 0x01e0;\n                                                                                var temp5 = memory[0x0180:0x01a0];\n                                                                                memory[var1:var1 + 0x20] = temp5;\n                                                                                var2 = temp5 + 0x06;\n                                                                            \n                                                                                if (memory[0x01e0:0x0200] > var0) { goto label_2605; }\n                                                                            \n                                                                            label_2609:\n                                                                                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                                                                                var temp6 = var1;\n                                                                                var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                                                                                memory[temp6:temp6 + 0x20] = temp7;\n                                                                            \n                                                                                if (var2 == temp7) { goto label_2625; }\n                                                                            \n                                                                                if (memory[0x01e0:0x0200] <= var0) { goto label_2609; }\n                                                                            \n                                                                            label_2605:\n                                                                            \n                                                                            label_2625:\n                                                                                memory[0x0160:0x0180] = 0x20;\n                                                                                var temp8 = memory[0x0180:0x01a0] + 0x40;\n                                                                                return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                        } else if (!msg.value) {\n                                                                            var0 = 0x00;\n                                                                            memory[0xc0:0xe0] = var0;\n                                                                            var1 = keccak256(memory[0xc0:0xe0]);\n                                                                            var2 = 0x0180;\n                                                                            var temp9 = storage[var1] + 0x20;\n                                                                            var3 = temp9;\n                                                                            var4 = 0x0120;\n                                                                            memory[var4:var4 + 0x20] = 0x00;\n                                                                            var5 = 0x02;\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_24C9; }\n                                                                        \n                                                                        label_24CD:\n                                                                            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                            var temp10 = var4;\n                                                                            var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n                                                                            memory[temp10:temp10 + 0x20] = temp11;\n                                                                        \n                                                                            if (var5 == temp11) { goto label_24EF; }\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_24CD; }\n                                                                        \n                                                                        label_24C9:\n                                                                        \n                                                                        label_24EF:\n                                                                            var temp12 = memory[0x0180:0x01a0];\n                                                                            var0 = (temp12 + 0x1f) - temp12 - 0x01 % 0x20;\n                                                                            var1 = 0x01e0;\n                                                                            var temp13 = memory[0x0180:0x01a0];\n                                                                            memory[var1:var1 + 0x20] = temp13;\n                                                                            var2 = temp13 + 0x20;\n                                                                        \n                                                                            if (memory[0x01e0:0x0200] > var0) { goto label_2521; }\n                                                                        \n                                                                        label_2525:\n                                                                            memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                                                                            var temp14 = var1;\n                                                                            var temp15 = memory[temp14:temp14 + 0x20] + 0x01;\n                                                                            memory[temp14:temp14 + 0x20] = temp15;\n                                                                        \n                                                                            if (var2 == temp15) { goto label_2541; }\n                                                                        \n                                                                            if (memory[0x01e0:0x0200] <= var0) { goto label_2525; }\n                                                                        \n                                                                        label_2521:\n                                                                        \n                                                                        label_2541:\n                                                                            memory[0x0160:0x0180] = 0x20;\n                                                                            var temp16 = memory[0x0180:0x01a0] + 0x40;\n                                                                            return memory[0x0160:0x0160 + (temp16 + 0x1f) - temp16 - 0x01 % 0x20];\n                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                    } else if (!msg.value) {\n                                                                        var0 = msg.data[0x04:0x24];\n                                                                    \n                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0xe0:0x0100] = msg.sender;\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var temp17 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = temp17;\n                                                                        storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                                                        memory[0x0140:0x0160] = msg.data[0x24:0x44];\n                                                                        log(memory[0x0140:0x0160], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, msg.sender]);\n                                                                        memory[0x00:0x20] = 0x01;\n                                                                        return memory[0x00:0x20];\n                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                } else if (!msg.value) {\n                                                                    var0 = msg.data[0x04:0x24];\n                                                                \n                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var0 = msg.data[0x24:0x44];\n                                                                \n                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x05;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                \n                                                                    if (storage[var0] < msg.data[0x44:0x64]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp18 = var0;\n                                                                    storage[temp18] = storage[temp18] - msg.data[0x44:0x64];\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = 0x05;\n                                                                    var temp19 = keccak256(memory[0xc0:0x0100]);\n                                                                    var0 = temp19;\n                                                                \n                                                                    if (storage[var0] + msg.data[0x44:0x64] < storage[var0]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp20 = var0;\n                                                                    storage[temp20] = storage[temp20] + msg.data[0x44:0x64];\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var temp21 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.sender;\n                                                                    memory[0xc0:0xe0] = temp21;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                \n                                                                    if (storage[var0] < msg.data[0x44:0x64]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp22 = var0;\n                                                                    storage[temp22] = storage[temp22] - msg.data[0x44:0x64];\n                                                                    memory[0x0140:0x0160] = msg.data[0x44:0x64];\n                                                                    log(memory[0x0140:0x0160], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x04:0x24], msg.data[0x24:0x44]]);\n                                                                    memory[0x00:0x20] = 0x01;\n                                                                    return memory[0x00:0x20];\n                                                                } else { revert(memory[0x00:0x00]); }\n                                                            } else if (!msg.value) {\n                                                                var0 = msg.data[0x04:0x24];\n                                                            \n                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                memory[0xe0:0x0100] = msg.sender;\n                                                                memory[0xc0:0xe0] = 0x05;\n                                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                            \n                                                                if (storage[var0] < msg.data[0x24:0x44]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var temp23 = var0;\n                                                                storage[temp23] = storage[temp23] - msg.data[0x24:0x44];\n                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                memory[0xc0:0xe0] = 0x05;\n                                                                var temp24 = keccak256(memory[0xc0:0x0100]);\n                                                                var0 = temp24;\n                                                            \n                                                                if (storage[var0] + msg.data[0x24:0x44] < storage[var0]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var temp25 = var0;\n                                                                storage[temp25] = storage[temp25] + msg.data[0x24:0x44];\n                                                                memory[0x0140:0x0160] = msg.data[0x24:0x44];\n                                                                log(memory[0x0140:0x0160], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, msg.data[0x04:0x24]]);\n                                                                memory[0x00:0x20] = 0x01;\n                                                                return memory[0x00:0x20];\n                                                            } else { revert(memory[0x00:0x00]); }\n                                                        } else if (!msg.value) {\n                                                            var0 = msg.data[0x04:0x24];\n                                                        \n                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[0x0b] = msg.data[0x04:0x24];\n                                                            log(memory[0x00:0x00], [0x12ad2958c2383ce31dd51da097e673d81de88c202731500406f3afc70a8cf170, msg.data[0x04:0x24]]);\n                                                            memory[0x00:0x20] = 0x01;\n                                                            return memory[0x00:0x20];\n                                                        } else { revert(memory[0x00:0x00]); }\n                                                    } else if (!msg.value) {\n                                                        memory[0x0140:0x0180] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n                                                    \n                                                        if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        var0 = storage[keccak256(memory[0xc0:0x0100])] * 0x02540be400;\n                                                    \n                                                        if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x01a0:0x01c0] = var0;\n                                                        memory[0x01c0:0x01e0] = 0x038d7ea4c68000;\n                                                        var0 = memory[0xa0:0xc0];\n                                                        var1 = memory[0x01a0:0x01c0];\n                                                        var2 = memory[0x01c0:0x01e0];\n                                                    \n                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp26 = (var1 * 0x02540be400) i/ var2;\n                                                        var1 = temp26;\n                                                    \n                                                        if (var1 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp27 = var0;\n                                                        var0 = var1;\n                                                    \n                                                        if (var0 i< temp27) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x00:0x20] = var0;\n                                                        return memory[0x00:0x20];\n                                                    } else { revert(memory[0x00:0x00]); }\n                                                } else if (!msg.value) {\n                                                    memory[0x0140:0x0180] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n                                                \n                                                    if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n                                                \n                                                    if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var0 = 0x00;\n                                                    memory[0x01a0:0x01c0] = 0x038d7ea4c68000;\n                                                    var1 = memory[0xa0:0xc0];\n                                                    var temp28 = memory[0x01a0:0x01c0];\n                                                    var2 = temp28;\n                                                    var temp29 = msg.data[0x24:0x44];\n                                                    var3 = temp29;\n                                                    var4 = var3 * var2;\n                                                \n                                                    if (!((var4 i/ var3 == var2) | !var3)) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var2 = var4 i/ 0x02540be400;\n                                                \n                                                    if (var2 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp30 = var1;\n                                                    var1 = var2;\n                                                \n                                                    if (var1 i< temp30) { revert(memory[0x00:0x00]); }\n                                                \n                                                    if (var1 i>= var0) {\n                                                        var0 = 0x02540be400;\n                                                        memory[0x01a0:0x01c0] = 0x038d7ea4c68000;\n                                                        var1 = memory[0xa0:0xc0];\n                                                        var temp31 = memory[0x01a0:0x01c0];\n                                                        var2 = temp31;\n                                                        var temp32 = msg.data[0x24:0x44];\n                                                        var3 = temp32;\n                                                        var4 = var3 * var2;\n                                                    \n                                                        if (!((var4 i/ var3 == var2) | !var3)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var2 = var4 i/ 0x02540be400;\n                                                    \n                                                        if (var2 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp33 = var1;\n                                                        var1 = var2;\n                                                    \n                                                        if (var1 i< temp33) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp34 = var1 i/ var0;\n                                                        var0 = temp34;\n                                                    \n                                                        if (var0 i< 0x00) { revert(memory[0x00:0x00]); }\n                                                    \n                                                    label_2078:\n                                                        memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        storage[keccak256(memory[0xc0:0x0100])] = var0;\n                                                        var0 = msg.data[0x24:0x44];\n                                                        var1 = 0x0140;\n                                                        var2 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n                                                        var3 = 0x00;\n                                                        var4 = memory[var1:var1 + 0x20];\n                                                    \n                                                        if (var4 i> 0x20) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp35 = var3;\n                                                        var3 = var4;\n                                                    \n                                                        if (var3 i< temp35) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        log(memory[0x00:0x00], [0xd8dd23b660d1a2cd022ce86c6122d03c591f721b3c2af378ecb404c0b605ddc7, stack[-2] / 0x0100 ** (memory[0x0140:0x0160] - stack[-1]), stack[-4]]);\n                                                        memory[0x00:0x20] = 0x01;\n                                                        return memory[0x00:0x20];\n                                                    } else {\n                                                        var0 = 0x02540be400;\n                                                        var1 = 0x02540be3ff;\n                                                        memory[0x01a0:0x01c0] = 0x038d7ea4c68000;\n                                                        var2 = memory[0xa0:0xc0];\n                                                        var temp36 = memory[0x01a0:0x01c0];\n                                                        var3 = temp36;\n                                                        var temp37 = msg.data[0x24:0x44];\n                                                        var4 = temp37;\n                                                        var5 = var4 * var3;\n                                                    \n                                                        if (!((var5 i/ var4 == var3) | !var4)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var3 = var5 i/ 0x02540be400;\n                                                    \n                                                        if (var3 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp38 = var2;\n                                                        var2 = var3;\n                                                    \n                                                        if (var2 i< temp38) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var0 = var2 - var1 i/ var0;\n                                                    \n                                                        if (var0 i>= 0x00) { goto label_2078; }\n                                                        else { revert(memory[0x00:0x00]); }\n                                                    }\n                                                } else { revert(memory[0x00:0x00]); }\n                                            } else if (!msg.value) {\n                                                var0 = msg.data[0x04:0x24];\n                                            \n                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                            \n                                                if (!(msg.data[0x04:0x24] ~ 0x00)) { revert(memory[0x00:0x00]); }\n                                            \n                                                if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[0x02] = msg.data[0x04:0x24];\n                                                log(memory[0x00:0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x02], msg.data[0x04:0x24]]);\n                                                memory[0x00:0x20] = 0x01;\n                                                return memory[0x00:0x20];\n                                            } else { revert(memory[0x00:0x00]); }\n                                        } else if (!msg.value) {\n                                            var0 = msg.data[0x04:0x24];\n                                        \n                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = 0x05;\n                                            var0 = storage[keccak256(memory[0xc0:0x0100])] * 0x02540be400;\n                                        \n                                            if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x0140:0x0160] = var0;\n                                            var0 = storage[0x04] * 0x02540be400;\n                                        \n                                            if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x0160:0x0180] = var0;\n                                            var0 = memory[0xa0:0xc0];\n                                            var1 = memory[0x0140:0x0160];\n                                            var2 = memory[0x0160:0x0180];\n                                        \n                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            var temp39 = (var1 * 0x02540be400) i/ var2;\n                                            var1 = temp39;\n                                        \n                                            if (var1 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                        \n                                            var temp40 = var0;\n                                            var0 = var1;\n                                        \n                                            if (var0 i< temp40) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x0180:0x01a0] = var0;\n                                            memory[0x00:0x20] = memory[0x0180:0x01a0];\n                                            return memory[0x00:0x20];\n                                        } else { revert(memory[0x00:0x00]); }\n                                    } else if (!msg.value) {\n                                        memory[0x0140:0x0180] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n                                    \n                                        if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n                                    \n                                        var0 = msg.data[0x24:0x44];\n                                    \n                                        if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                                    \n                                        if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n                                        memory[0xc0:0xe0] = 0x09;\n                                        storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                        var0 = msg.data[0x24:0x44];\n                                        var1 = 0x0140;\n                                        var2 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n                                        var3 = 0x00;\n                                        var4 = memory[var1:var1 + 0x20];\n                                    \n                                        if (var4 i> 0x20) { revert(memory[0x00:0x00]); }\n                                    \n                                        var temp41 = var3;\n                                        var3 = var4;\n                                    \n                                        if (var3 i< temp41) { revert(memory[0x00:0x00]); }\n                                    \n                                        log(memory[0x00:0x00], [0x22b59c94b6ec143f205f4ac5d8177280de0eab514e8d857330a1af17343e97bd, stack[-2] / 0x0100 ** (memory[0x0140:0x0160] - stack[-1]), stack[-4]]);\n                                        memory[0x00:0x20] = 0x01;\n                                        return memory[0x00:0x20];\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    var0 = msg.data[0x04:0x24];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = msg.data[0x24:0x44];\n                                \n                                    if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                                \n                                    if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                    memory[0xc0:0xe0] = 0x08;\n                                \n                                    if (storage[keccak256(memory[0xc0:0x0100])] == msg.data[0x24:0x44]) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = 0x02;\n                                \n                                    if (!address(msg.data[0x04:0x24]).code.length) { revert(memory[0x00:0x00]); }\n                                \n                                    if (!(address(this) ~ msg.data[0x04:0x24])) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0x0140:0x0160] = 0x313ce567;\n                                    var temp42;\n                                    temp42, memory[0x01a0:0x01c0] = address(msg.data[0x04:0x24]).staticcall.gas(msg.gas)(memory[0x015c:0x0160]);\n                                \n                                    if (!temp42) { revert(memory[0x00:0x00]); }\n                                \n                                    if (memory[0x01a0:0x01c0] < var0) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                    memory[0xc0:0xe0] = 0x08;\n                                    storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                    memory[0x00:0x20] = 0x01;\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x24:0x44];\n                            \n                                if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                            \n                                if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                memory[0xc0:0xe0] = 0x07;\n                            \n                                if (storage[keccak256(memory[0xc0:0x0100])] == msg.data[0x24:0x44]) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = 0x02;\n                            \n                                if (!address(msg.data[0x04:0x24]).code.length) { revert(memory[0x00:0x00]); }\n                            \n                                if (!(address(this) ~ msg.data[0x04:0x24])) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x0140:0x0160] = 0x313ce567;\n                                var temp43;\n                                temp43, memory[0x01a0:0x01c0] = address(msg.data[0x04:0x24]).staticcall.gas(msg.gas)(memory[0x015c:0x0160]);\n                            \n                                if (!temp43) { revert(memory[0x00:0x00]); }\n                            \n                                if (memory[0x01a0:0x01c0] < var0) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                memory[0xc0:0xe0] = 0x07;\n                                storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                memory[0x00:0x20] = 0x01;\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!storage[0xffffff]) {\n                            storage[0xffffff] = 0x01;\n                        \n                            if (msg.value) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = msg.data[0x04:0x24];\n                        \n                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = msg.data[0x24:0x44];\n                        \n                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                            memory[0xc0:0xe0] = 0x08;\n                            var temp44 = storage[keccak256(memory[0xc0:0x0100])];\n                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                            memory[0xc0:0xe0] = 0x07;\n                        \n                            if (!(storage[keccak256(memory[0xc0:0x0100])] & temp44)) { revert(memory[0x00:0x00]); }\n                        \n                            if (!((msg.data[0x44:0x64] > 0x00) & (msg.data[0x64:0x84] > 0x00))) { revert(memory[0x00:0x00]); }\n                        \n                            if (msg.data[0x84:0xa4] <= block.timestamp) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x0140:0x0160] = 0x0e;\n                            memory[0x0160:0x0180] = 0x74726164696e67416c6c6f776564000000000000000000000000000000000000;\n                            memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n                            memory[0xc0:0xe0] = 0x09;\n                        \n                            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = memory[0x0140:0x0160];\n                            var1 = memory[0x0160:0x0180];\n                            var2 = memory[0x0180:0x01a0];\n                            var3 = memory[0x01a0:0x01c0];\n                            memory[0x01e0:0x0200] = 0x84ba3f69;\n                            memory[0x0200:0x0220] = msg.data[0x04:0x24];\n                            var4 = memory[0x0200:0x0220];\n                            var5 = 0x06;\n                            // Unhandled termination\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        var0 = msg.data[0x24:0x44];\n                    \n                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = msg.data[0x44:0x64];\n                    \n                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                    \n                        if (!0x021e19e0c9bab2400000) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = 0x021e19e0c9bab2400000;\n                        memory[0x0160:0x0180] = 0x91b26ae0;\n                        memory[0x0180:0x01a0] = msg.data[0x24:0x44];\n                        memory[0x01a0:0x01c0] = msg.data[0x44:0x64];\n                        var temp45;\n                        temp45, memory[0x0200:0x0220] = address(address(this)).call.gas(msg.gas)(memory[0x017c:0x01c0]);\n                    \n                        if (!temp45) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x0220:0x0240] = memory[0x0200:0x0220];\n                    \n                        if (!msg.data[0x04:0x24]) {\n                            var1 = 0x00;\n                            memory[0x0140:0x0160] = var1 / var0;\n                            memory[0x00:0x20] = memory[0x0140:0x0160];\n                            return memory[0x00:0x20];\n                        } else if ((msg.data[0x04:0x24] * memory[0x0220:0x0240]) / msg.data[0x04:0x24] == memory[0x0220:0x0240]) {\n                            memory[0x0140:0x0160] = (msg.data[0x04:0x24] * memory[0x0220:0x0240]) / var0;\n                            memory[0x00:0x20] = memory[0x0140:0x0160];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x24:0x44];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[0x0140:0x0160];\n                    memory[0x0180:0x01a0] = 0x84ba3f69;\n                    memory[0x01a0:0x01c0] = msg.data[0x04:0x24];\n                    var1 = memory[0x01a0:0x01c0];\n                    var2 = 0x06;\n                    // Unhandled termination\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!storage[0xffffff]) {\n                storage[0xffffff] = 0x01;\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                memory[0xc0:0xe0] = 0x08;\n            \n                if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n            \n                if (!((msg.data[0x24:0x44] > 0x00) & (msg.data[0x64:0x84] > block.timestamp))) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = msg.sender;\n                memory[0xc0:0xe0] = 0x05;\n            \n                if (storage[keccak256(memory[0xc0:0x0100])] < msg.data[0x24:0x44]) { revert(memory[0x00:0x00]); }\n            \n                if (storage[0x04] <= 0x00) { revert(memory[0x00:0x00]); }\n            \n                var0 = memory[0x0140:0x0160];\n                memory[0x0180:0x01a0] = 0x84ba3f69;\n                memory[0x01a0:0x01c0] = msg.data[0x04:0x24];\n                var1 = memory[0x01a0:0x01c0];\n                var2 = 0x06;\n                // Unhandled termination\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!storage[0xffffff]) {\n            storage[0xffffff] = 0x01;\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            if (!((msg.data[0x44:0x64] > block.timestamp) & (msg.data[0x24:0x44] > 0x00))) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0140:0x0160] = 0x16;\n            memory[0x0160:0x0180] = 0x6c6971756964697479416464696e67416c6c6f77656400000000000000000000;\n            memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n            memory[0xc0:0xe0] = 0x09;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            var3 = memory[0x01a0:0x01c0];\n            memory[0x01e0:0x0200] = 0x84ba3f69;\n            memory[0x0200:0x0220] = msg.data[0x04:0x24];\n            var4 = memory[0x0200:0x0220];\n            var5 = 0x06;\n            // Unhandled termination\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (0x00) {\n            memory[0x0160:0x0180] = var-1;\n            memory[0x0140:0x0160] = var-2;\n        \n            if (!address(storage[0x0b]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ storage[0x0b])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01a0:0x01c0] = 0xf1bb1086;\n            memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n            var temp56;\n            temp56, memory[0x0220:0x0240] = address(storage[0x0b]).staticcall.gas(msg.gas)(memory[0x01bc:0x01e0]);\n        \n            if (!temp56) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = memory[0x0220:0x0240];\n        \n            if (memory[0x0180:0x01a0] <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = memory[0x0180:0x01a0];\n            var-2 = memory[0x00:0x20];\n            // Error: Could not resolve jump destination!\n        } else if (0x00) {\n            memory[0x01a0:0x01c0] = var-1;\n            memory[0x0140:0x0160] = var-2;\n            memory[0x0160:0x0180] = var-3;\n            memory[0x0180:0x01a0] = var-4;\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01e0:0x0200] = 0x70a08231;\n            memory[0x0200:0x0220] = address(this);\n            var temp51;\n            temp51, memory[0x0260:0x0280] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x01fc:0x0220]);\n        \n            if (!temp51) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01c0:0x01e0] = memory[0x0260:0x0280];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x02a0:0x02c0] = 0x70a08231;\n            memory[0x02c0:0x02e0] = memory[0x0160:0x0180];\n            var temp52;\n            temp52, memory[0x0320:0x0340] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x02bc:0x02e0]);\n        \n            if (!temp52) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0280:0x02a0] = memory[0x0320:0x0340];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0340:0x0360] = 0xa9059cbb;\n            memory[0x0360:0x0380] = memory[0x0160:0x0180];\n            memory[0x0380:0x03a0] = memory[0x0180:0x01a0];\n            var temp53;\n            temp53, memory[0x03e0:0x0400] = address(memory[0x0140:0x0160]).call.gas(msg.gas)(memory[0x035c:0x03a0]);\n        \n            if (!temp53) { revert(memory[0x00:0x00]); }\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0420:0x0440] = 0x70a08231;\n            memory[0x0440:0x0460] = address(this);\n            var temp54;\n            temp54, memory[0x04a0:0x04c0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x043c:0x0460]);\n        \n            if (!temp54) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0400:0x0420] = memory[0x04a0:0x04c0];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x04e0:0x0500] = 0x70a08231;\n            memory[0x0500:0x0520] = memory[0x0160:0x0180];\n            var temp55;\n            temp55, memory[0x0560:0x0580] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x04fc:0x0520]);\n        \n            if (!temp55) { revert(memory[0x00:0x00]); }\n        \n            memory[0x04c0:0x04e0] = memory[0x0560:0x0580];\n        \n            if (memory[0x0280:0x02a0] + memory[0x0180:0x01a0] < memory[0x0280:0x02a0]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x04c0:0x04e0] != memory[0x0280:0x02a0] + memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x01c0:0x01e0] < memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0400:0x0420] != memory[0x01c0:0x01e0] - memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = 0x01;\n            var-4 = memory[0x00:0x20];\n            // Error: Could not resolve jump destination!\n        } else if (0x00) {\n            // Error: StackRead before write???\n            var var-1;\n            // Error: StackRead before write???\n            var var-5;\n            // Error: StackRead before write???\n            var var-3;\n            // Error: StackRead before write???\n            var var-2;\n            // Error: StackRead before write???\n            var var-4;\n            memory[0x01c0:0x01e0] = var-1;\n            memory[0x0140:0x0160] = var-2;\n            memory[0x0160:0x0180] = var-3;\n            memory[0x0180:0x01a0] = var-4;\n            memory[0x01a0:0x01c0] = var-5;\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0200:0x0220] = 0x70a08231;\n            memory[0x0220:0x0240] = memory[0x0180:0x01a0];\n            var temp46;\n            temp46, memory[0x0280:0x02a0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x021c:0x0240]);\n        \n            if (!temp46) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01e0:0x0200] = memory[0x0280:0x02a0];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x02c0:0x02e0] = 0x70a08231;\n            memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n            var temp47;\n            temp47, memory[0x0340:0x0360] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x02dc:0x0300]);\n        \n            if (!temp47) { revert(memory[0x00:0x00]); }\n        \n            memory[0x02a0:0x02c0] = memory[0x0340:0x0360];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0360:0x0380] = 0x23b872dd;\n            memory[0x0380:0x03a0] = memory[0x0160:0x0180];\n            memory[0x03a0:0x03c0] = memory[0x0180:0x01a0];\n            memory[0x03c0:0x03e0] = memory[0x01a0:0x01c0];\n            var temp48;\n            temp48, memory[0x0420:0x0440] = address(memory[0x0140:0x0160]).call.gas(msg.gas)(memory[0x037c:0x03e0]);\n        \n            if (!temp48) { revert(memory[0x00:0x00]); }\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0460:0x0480] = 0x70a08231;\n            memory[0x0480:0x04a0] = memory[0x0180:0x01a0];\n            var temp49;\n            temp49, memory[0x04e0:0x0500] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x047c:0x04a0]);\n        \n            if (!temp49) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0440:0x0460] = memory[0x04e0:0x0500];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0520:0x0540] = 0x70a08231;\n            memory[0x0540:0x0560] = memory[0x0160:0x0180];\n            var temp50;\n            temp50, memory[0x05a0:0x05c0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x053c:0x0560]);\n        \n            if (!temp50) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0500:0x0520] = memory[0x05a0:0x05c0];\n        \n            if (memory[0x02a0:0x02c0] < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0500:0x0520] != memory[0x02a0:0x02c0] - memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x01e0:0x0200] + memory[0x01a0:0x01c0] < memory[0x01e0:0x0200]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0440:0x0460] != memory[0x01e0:0x0200] + memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = 0x01;\n            var-5 = memory[0x00:0x20];\n            // Error: Could not resolve jump destination!\n        } else if (memory[0x00:0x20] != 0x55776b77) {\n            if (memory[0x00:0x20] != 0x93ca2f8a) {\n                if (memory[0x00:0x20] != 0x91b26ae0) {\n                    if (memory[0x00:0x20] != 0x126603b5) {\n                        if (memory[0x00:0x20] != 0x43d91bf1) {\n                            if (memory[0x00:0x20] != 0x23d7d1a8) {\n                                if (memory[0x00:0x20] != 0x44dbd334) {\n                                    if (memory[0x00:0x20] != 0x903a1001) {\n                                        if (memory[0x00:0x20] != 0x80a0628b) {\n                                            if (memory[0x00:0x20] != 0xf2fde38b) {\n                                                if (memory[0x00:0x20] != 0x993f4a20) {\n                                                    if (memory[0x00:0x20] != 0xe005cbbf) {\n                                                        if (memory[0x00:0x20] != 0x86d1e02b) {\n                                                            if (memory[0x00:0x20] != 0xa9059cbb) {\n                                                                if (memory[0x00:0x20] != 0x23b872dd) {\n                                                                    if (memory[0x00:0x20] != 0x095ea7b3) {\n                                                                        if (memory[0x00:0x20] != 0x06fdde03) {\n                                                                            if (memory[0x00:0x20] != 0x95d89b41) {\n                                                                                if (memory[0x00:0x20] != 0x8da5cb5b) {\n                                                                                    if (memory[0x00:0x20] != 0x313ce567) {\n                                                                                        if (memory[0x00:0x20] != 0x18160ddd) {\n                                                                                            if (memory[0x00:0x20] != 0x70a08231) {\n                                                                                                if (memory[0x00:0x20] != 0xdd62ed3e) {\n                                                                                                    if (memory[0x00:0x20] != 0x4999eb8f) {\n                                                                                                        if (memory[0x00:0x20] != 0x51ecd2fa) {\n                                                                                                            if (memory[0x00:0x20] != 0x752708fb) {\n                                                                                                                if (memory[0x00:0x20] != 0x2bc51c6d) { revert(memory[0x00:0x00]); }\n                                                                                                            \n                                                                                                                if (msg.value) { revert(memory[0x00:0x00]); }\n                                                                                                            \n                                                                                                                memory[0x00:0x20] = storage[0x0b];\n                                                                                                                return memory[0x00:0x20];\n                                                                                                            } else if (!msg.value) {\n                                                                                                                memory[0x0140:0x0180] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n                                                                                                            \n                                                                                                                if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n                                                                                                            \n                                                                                                                memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n                                                                                                                memory[0xc0:0xe0] = 0x09;\n                                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                                return memory[0x00:0x20];\n                                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                                        } else if (!msg.value) {\n                                                                                                            var var0 = msg.data[0x04:0x24];\n                                                                                                        \n                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                        \n                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                            memory[0xc0:0xe0] = 0x08;\n                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                            return memory[0x00:0x20];\n                                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                                    } else if (!msg.value) {\n                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                    \n                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                    \n                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                        memory[0xc0:0xe0] = 0x07;\n                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                        return memory[0x00:0x20];\n                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                } else if (!msg.value) {\n                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                \n                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                \n                                                                                                    var0 = msg.data[0x24:0x44];\n                                                                                                \n                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                \n                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                                                    var temp0 = keccak256(memory[0xc0:0x0100]);\n                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                    memory[0xc0:0xe0] = temp0;\n                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                    return memory[0x00:0x20];\n                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                            } else if (!msg.value) {\n                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                            \n                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                            \n                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                memory[0xc0:0xe0] = 0x05;\n                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                return memory[0x00:0x20];\n                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                        } else if (!msg.value) {\n                                                                                            memory[0x00:0x20] = storage[0x04];\n                                                                                            return memory[0x00:0x20];\n                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                    } else if (!msg.value) {\n                                                                                        memory[0x00:0x20] = storage[0x03];\n                                                                                        return memory[0x00:0x20];\n                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                } else if (!msg.value) {\n                                                                                    memory[0x00:0x20] = storage[0x02];\n                                                                                    return memory[0x00:0x20];\n                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                            } else if (!msg.value) {\n                                                                                var0 = 0x01;\n                                                                                memory[0xc0:0xe0] = var0;\n                                                                                var var1 = keccak256(memory[0xc0:0xe0]);\n                                                                                var var2 = 0x0180;\n                                                                                var temp1 = storage[var1] + 0x20;\n                                                                                var var3 = temp1;\n                                                                                var var4 = 0x0120;\n                                                                                memory[var4:var4 + 0x20] = 0x00;\n                                                                                var var5 = 0x02;\n                                                                            \n                                                                                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_25AD; }\n                                                                            \n                                                                            label_25B1:\n                                                                                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                                var temp2 = var4;\n                                                                                var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                                                                                memory[temp2:temp2 + 0x20] = temp3;\n                                                                            \n                                                                                if (var5 == temp3) { goto label_25D3; }\n                                                                            \n                                                                                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_25B1; }\n                                                                            \n                                                                            label_25AD:\n                                                                            \n                                                                            label_25D3:\n                                                                                var temp4 = memory[0x0180:0x01a0];\n                                                                                var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                                                                                var1 = 0x01e0;\n                                                                                var temp5 = memory[0x0180:0x01a0];\n                                                                                memory[var1:var1 + 0x20] = temp5;\n                                                                                var2 = temp5 + 0x06;\n                                                                            \n                                                                                if (memory[0x01e0:0x0200] > var0) { goto label_2605; }\n                                                                            \n                                                                            label_2609:\n                                                                                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                                                                                var temp6 = var1;\n                                                                                var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                                                                                memory[temp6:temp6 + 0x20] = temp7;\n                                                                            \n                                                                                if (var2 == temp7) { goto label_2625; }\n                                                                            \n                                                                                if (memory[0x01e0:0x0200] <= var0) { goto label_2609; }\n                                                                            \n                                                                            label_2605:\n                                                                            \n                                                                            label_2625:\n                                                                                memory[0x0160:0x0180] = 0x20;\n                                                                                var temp8 = memory[0x0180:0x01a0] + 0x40;\n                                                                                return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                        } else if (!msg.value) {\n                                                                            var0 = 0x00;\n                                                                            memory[0xc0:0xe0] = var0;\n                                                                            var1 = keccak256(memory[0xc0:0xe0]);\n                                                                            var2 = 0x0180;\n                                                                            var temp9 = storage[var1] + 0x20;\n                                                                            var3 = temp9;\n                                                                            var4 = 0x0120;\n                                                                            memory[var4:var4 + 0x20] = 0x00;\n                                                                            var5 = 0x02;\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_24C9; }\n                                                                        \n                                                                        label_24CD:\n                                                                            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                            var temp10 = var4;\n                                                                            var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n                                                                            memory[temp10:temp10 + 0x20] = temp11;\n                                                                        \n                                                                            if (var5 == temp11) { goto label_24EF; }\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_24CD; }\n                                                                        \n                                                                        label_24C9:\n                                                                        \n                                                                        label_24EF:\n                                                                            var temp12 = memory[0x0180:0x01a0];\n                                                                            var0 = (temp12 + 0x1f) - temp12 - 0x01 % 0x20;\n                                                                            var1 = 0x01e0;\n                                                                            var temp13 = memory[0x0180:0x01a0];\n                                                                            memory[var1:var1 + 0x20] = temp13;\n                                                                            var2 = temp13 + 0x20;\n                                                                        \n                                                                            if (memory[0x01e0:0x0200] > var0) { goto label_2521; }\n                                                                        \n                                                                        label_2525:\n                                                                            memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                                                                            var temp14 = var1;\n                                                                            var temp15 = memory[temp14:temp14 + 0x20] + 0x01;\n                                                                            memory[temp14:temp14 + 0x20] = temp15;\n                                                                        \n                                                                            if (var2 == temp15) { goto label_2541; }\n                                                                        \n                                                                            if (memory[0x01e0:0x0200] <= var0) { goto label_2525; }\n                                                                        \n                                                                        label_2521:\n                                                                        \n                                                                        label_2541:\n                                                                            memory[0x0160:0x0180] = 0x20;\n                                                                            var temp16 = memory[0x0180:0x01a0] + 0x40;\n                                                                            return memory[0x0160:0x0160 + (temp16 + 0x1f) - temp16 - 0x01 % 0x20];\n                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                    } else if (!msg.value) {\n                                                                        var0 = msg.data[0x04:0x24];\n                                                                    \n                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0xe0:0x0100] = msg.sender;\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var temp17 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = temp17;\n                                                                        storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                                                        memory[0x0140:0x0160] = msg.data[0x24:0x44];\n                                                                        log(memory[0x0140:0x0160], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, msg.sender]);\n                                                                        memory[0x00:0x20] = 0x01;\n                                                                        return memory[0x00:0x20];\n                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                } else if (!msg.value) {\n                                                                    var0 = msg.data[0x04:0x24];\n                                                                \n                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var0 = msg.data[0x24:0x44];\n                                                                \n                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x05;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                \n                                                                    if (storage[var0] < msg.data[0x44:0x64]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp18 = var0;\n                                                                    storage[temp18] = storage[temp18] - msg.data[0x44:0x64];\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = 0x05;\n                                                                    var temp19 = keccak256(memory[0xc0:0x0100]);\n                                                                    var0 = temp19;\n                                                                \n                                                                    if (storage[var0] + msg.data[0x44:0x64] < storage[var0]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp20 = var0;\n                                                                    storage[temp20] = storage[temp20] + msg.data[0x44:0x64];\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var temp21 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.sender;\n                                                                    memory[0xc0:0xe0] = temp21;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                \n                                                                    if (storage[var0] < msg.data[0x44:0x64]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp22 = var0;\n                                                                    storage[temp22] = storage[temp22] - msg.data[0x44:0x64];\n                                                                    memory[0x0140:0x0160] = msg.data[0x44:0x64];\n                                                                    log(memory[0x0140:0x0160], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x04:0x24], msg.data[0x24:0x44]]);\n                                                                    memory[0x00:0x20] = 0x01;\n                                                                    return memory[0x00:0x20];\n                                                                } else { revert(memory[0x00:0x00]); }\n                                                            } else if (!msg.value) {\n                                                                var0 = msg.data[0x04:0x24];\n                                                            \n                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                memory[0xe0:0x0100] = msg.sender;\n                                                                memory[0xc0:0xe0] = 0x05;\n                                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                            \n                                                                if (storage[var0] < msg.data[0x24:0x44]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var temp23 = var0;\n                                                                storage[temp23] = storage[temp23] - msg.data[0x24:0x44];\n                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                memory[0xc0:0xe0] = 0x05;\n                                                                var temp24 = keccak256(memory[0xc0:0x0100]);\n                                                                var0 = temp24;\n                                                            \n                                                                if (storage[var0] + msg.data[0x24:0x44] < storage[var0]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var temp25 = var0;\n                                                                storage[temp25] = storage[temp25] + msg.data[0x24:0x44];\n                                                                memory[0x0140:0x0160] = msg.data[0x24:0x44];\n                                                                log(memory[0x0140:0x0160], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, msg.data[0x04:0x24]]);\n                                                                memory[0x00:0x20] = 0x01;\n                                                                return memory[0x00:0x20];\n                                                            } else { revert(memory[0x00:0x00]); }\n                                                        } else if (!msg.value) {\n                                                            var0 = msg.data[0x04:0x24];\n                                                        \n                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[0x0b] = msg.data[0x04:0x24];\n                                                            log(memory[0x00:0x00], [0x12ad2958c2383ce31dd51da097e673d81de88c202731500406f3afc70a8cf170, msg.data[0x04:0x24]]);\n                                                            memory[0x00:0x20] = 0x01;\n                                                            return memory[0x00:0x20];\n                                                        } else { revert(memory[0x00:0x00]); }\n                                                    } else if (!msg.value) {\n                                                        memory[0x0140:0x0180] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n                                                    \n                                                        if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        var0 = storage[keccak256(memory[0xc0:0x0100])] * 0x02540be400;\n                                                    \n                                                        if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x01a0:0x01c0] = var0;\n                                                        memory[0x01c0:0x01e0] = 0x038d7ea4c68000;\n                                                        var0 = memory[0xa0:0xc0];\n                                                        var1 = memory[0x01a0:0x01c0];\n                                                        var2 = memory[0x01c0:0x01e0];\n                                                    \n                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp26 = (var1 * 0x02540be400) i/ var2;\n                                                        var1 = temp26;\n                                                    \n                                                        if (var1 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp27 = var0;\n                                                        var0 = var1;\n                                                    \n                                                        if (var0 i< temp27) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x00:0x20] = var0;\n                                                        return memory[0x00:0x20];\n                                                    } else { revert(memory[0x00:0x00]); }\n                                                } else if (!msg.value) {\n                                                    memory[0x0140:0x0180] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n                                                \n                                                    if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n                                                \n                                                    if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var0 = 0x00;\n                                                    memory[0x01a0:0x01c0] = 0x038d7ea4c68000;\n                                                    var1 = memory[0xa0:0xc0];\n                                                    var temp28 = memory[0x01a0:0x01c0];\n                                                    var2 = temp28;\n                                                    var temp29 = msg.data[0x24:0x44];\n                                                    var3 = temp29;\n                                                    var4 = var3 * var2;\n                                                \n                                                    if (!((var4 i/ var3 == var2) | !var3)) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var2 = var4 i/ 0x02540be400;\n                                                \n                                                    if (var2 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp30 = var1;\n                                                    var1 = var2;\n                                                \n                                                    if (var1 i< temp30) { revert(memory[0x00:0x00]); }\n                                                \n                                                    if (var1 i>= var0) {\n                                                        var0 = 0x02540be400;\n                                                        memory[0x01a0:0x01c0] = 0x038d7ea4c68000;\n                                                        var1 = memory[0xa0:0xc0];\n                                                        var temp31 = memory[0x01a0:0x01c0];\n                                                        var2 = temp31;\n                                                        var temp32 = msg.data[0x24:0x44];\n                                                        var3 = temp32;\n                                                        var4 = var3 * var2;\n                                                    \n                                                        if (!((var4 i/ var3 == var2) | !var3)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var2 = var4 i/ 0x02540be400;\n                                                    \n                                                        if (var2 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp33 = var1;\n                                                        var1 = var2;\n                                                    \n                                                        if (var1 i< temp33) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp34 = var1 i/ var0;\n                                                        var0 = temp34;\n                                                    \n                                                        if (var0 i< 0x00) { revert(memory[0x00:0x00]); }\n                                                    \n                                                    label_2078:\n                                                        memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        storage[keccak256(memory[0xc0:0x0100])] = var0;\n                                                        var0 = msg.data[0x24:0x44];\n                                                        var1 = 0x0140;\n                                                        var2 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n                                                        var3 = 0x00;\n                                                        var4 = memory[var1:var1 + 0x20];\n                                                    \n                                                        if (var4 i> 0x20) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp35 = var3;\n                                                        var3 = var4;\n                                                    \n                                                        if (var3 i< temp35) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        log(memory[0x00:0x00], [0xd8dd23b660d1a2cd022ce86c6122d03c591f721b3c2af378ecb404c0b605ddc7, stack[-2] / 0x0100 ** (memory[0x0140:0x0160] - stack[-1]), stack[-4]]);\n                                                        memory[0x00:0x20] = 0x01;\n                                                        return memory[0x00:0x20];\n                                                    } else {\n                                                        var0 = 0x02540be400;\n                                                        var1 = 0x02540be3ff;\n                                                        memory[0x01a0:0x01c0] = 0x038d7ea4c68000;\n                                                        var2 = memory[0xa0:0xc0];\n                                                        var temp36 = memory[0x01a0:0x01c0];\n                                                        var3 = temp36;\n                                                        var temp37 = msg.data[0x24:0x44];\n                                                        var4 = temp37;\n                                                        var5 = var4 * var3;\n                                                    \n                                                        if (!((var5 i/ var4 == var3) | !var4)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var3 = var5 i/ 0x02540be400;\n                                                    \n                                                        if (var3 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp38 = var2;\n                                                        var2 = var3;\n                                                    \n                                                        if (var2 i< temp38) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var0 = var2 - var1 i/ var0;\n                                                    \n                                                        if (var0 i>= 0x00) { goto label_2078; }\n                                                        else { revert(memory[0x00:0x00]); }\n                                                    }\n                                                } else { revert(memory[0x00:0x00]); }\n                                            } else if (!msg.value) {\n                                                var0 = msg.data[0x04:0x24];\n                                            \n                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                            \n                                                if (!(msg.data[0x04:0x24] ~ 0x00)) { revert(memory[0x00:0x00]); }\n                                            \n                                                if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[0x02] = msg.data[0x04:0x24];\n                                                log(memory[0x00:0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x02], msg.data[0x04:0x24]]);\n                                                memory[0x00:0x20] = 0x01;\n                                                return memory[0x00:0x20];\n                                            } else { revert(memory[0x00:0x00]); }\n                                        } else if (!msg.value) {\n                                            var0 = msg.data[0x04:0x24];\n                                        \n                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = 0x05;\n                                            var0 = storage[keccak256(memory[0xc0:0x0100])] * 0x02540be400;\n                                        \n                                            if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x0140:0x0160] = var0;\n                                            var0 = storage[0x04] * 0x02540be400;\n                                        \n                                            if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x0160:0x0180] = var0;\n                                            var0 = memory[0xa0:0xc0];\n                                            var1 = memory[0x0140:0x0160];\n                                            var2 = memory[0x0160:0x0180];\n                                        \n                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            var temp39 = (var1 * 0x02540be400) i/ var2;\n                                            var1 = temp39;\n                                        \n                                            if (var1 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                        \n                                            var temp40 = var0;\n                                            var0 = var1;\n                                        \n                                            if (var0 i< temp40) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x0180:0x01a0] = var0;\n                                            memory[0x00:0x20] = memory[0x0180:0x01a0];\n                                            return memory[0x00:0x20];\n                                        } else { revert(memory[0x00:0x00]); }\n                                    } else if (!msg.value) {\n                                        memory[0x0140:0x0180] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n                                    \n                                        if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n                                    \n                                        var0 = msg.data[0x24:0x44];\n                                    \n                                        if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                                    \n                                        if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n                                        memory[0xc0:0xe0] = 0x09;\n                                        storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                        var0 = msg.data[0x24:0x44];\n                                        var1 = 0x0140;\n                                        var2 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n                                        var3 = 0x00;\n                                        var4 = memory[var1:var1 + 0x20];\n                                    \n                                        if (var4 i> 0x20) { revert(memory[0x00:0x00]); }\n                                    \n                                        var temp41 = var3;\n                                        var3 = var4;\n                                    \n                                        if (var3 i< temp41) { revert(memory[0x00:0x00]); }\n                                    \n                                        log(memory[0x00:0x00], [0x22b59c94b6ec143f205f4ac5d8177280de0eab514e8d857330a1af17343e97bd, stack[-2] / 0x0100 ** (memory[0x0140:0x0160] - stack[-1]), stack[-4]]);\n                                        memory[0x00:0x20] = 0x01;\n                                        return memory[0x00:0x20];\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    var0 = msg.data[0x04:0x24];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = msg.data[0x24:0x44];\n                                \n                                    if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                                \n                                    if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                    memory[0xc0:0xe0] = 0x08;\n                                \n                                    if (storage[keccak256(memory[0xc0:0x0100])] == msg.data[0x24:0x44]) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = 0x02;\n                                \n                                    if (!address(msg.data[0x04:0x24]).code.length) { revert(memory[0x00:0x00]); }\n                                \n                                    if (!(address(this) ~ msg.data[0x04:0x24])) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0x0140:0x0160] = 0x313ce567;\n                                    var temp42;\n                                    temp42, memory[0x01a0:0x01c0] = address(msg.data[0x04:0x24]).staticcall.gas(msg.gas)(memory[0x015c:0x0160]);\n                                \n                                    if (!temp42) { revert(memory[0x00:0x00]); }\n                                \n                                    if (memory[0x01a0:0x01c0] < var0) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                    memory[0xc0:0xe0] = 0x08;\n                                    storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                    memory[0x00:0x20] = 0x01;\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x24:0x44];\n                            \n                                if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                            \n                                if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                memory[0xc0:0xe0] = 0x07;\n                            \n                                if (storage[keccak256(memory[0xc0:0x0100])] == msg.data[0x24:0x44]) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = 0x02;\n                            \n                                if (!address(msg.data[0x04:0x24]).code.length) { revert(memory[0x00:0x00]); }\n                            \n                                if (!(address(this) ~ msg.data[0x04:0x24])) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x0140:0x0160] = 0x313ce567;\n                                var temp43;\n                                temp43, memory[0x01a0:0x01c0] = address(msg.data[0x04:0x24]).staticcall.gas(msg.gas)(memory[0x015c:0x0160]);\n                            \n                                if (!temp43) { revert(memory[0x00:0x00]); }\n                            \n                                if (memory[0x01a0:0x01c0] < var0) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                memory[0xc0:0xe0] = 0x07;\n                                storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                memory[0x00:0x20] = 0x01;\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!storage[0xffffff]) {\n                            storage[0xffffff] = 0x01;\n                        \n                            if (msg.value) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = msg.data[0x04:0x24];\n                        \n                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = msg.data[0x24:0x44];\n                        \n                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                            memory[0xc0:0xe0] = 0x08;\n                            var temp44 = storage[keccak256(memory[0xc0:0x0100])];\n                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                            memory[0xc0:0xe0] = 0x07;\n                        \n                            if (!(storage[keccak256(memory[0xc0:0x0100])] & temp44)) { revert(memory[0x00:0x00]); }\n                        \n                            if (!((msg.data[0x44:0x64] > 0x00) & (msg.data[0x64:0x84] > 0x00))) { revert(memory[0x00:0x00]); }\n                        \n                            if (msg.data[0x84:0xa4] <= block.timestamp) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x0140:0x0160] = 0x0e;\n                            memory[0x0160:0x0180] = 0x74726164696e67416c6c6f776564000000000000000000000000000000000000;\n                            memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n                            memory[0xc0:0xe0] = 0x09;\n                        \n                            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = memory[0x0140:0x0160];\n                            var1 = memory[0x0160:0x0180];\n                            var2 = memory[0x0180:0x01a0];\n                            var3 = memory[0x01a0:0x01c0];\n                            memory[0x01e0:0x0200] = 0x84ba3f69;\n                            memory[0x0200:0x0220] = msg.data[0x04:0x24];\n                            var4 = memory[0x0200:0x0220];\n                            var5 = 0x06;\n                            // Unhandled termination\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        var0 = msg.data[0x24:0x44];\n                    \n                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = msg.data[0x44:0x64];\n                    \n                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                    \n                        if (!0x021e19e0c9bab2400000) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = 0x021e19e0c9bab2400000;\n                        memory[0x0160:0x0180] = 0x91b26ae0;\n                        memory[0x0180:0x01a0] = msg.data[0x24:0x44];\n                        memory[0x01a0:0x01c0] = msg.data[0x44:0x64];\n                        var temp45;\n                        temp45, memory[0x0200:0x0220] = address(address(this)).call.gas(msg.gas)(memory[0x017c:0x01c0]);\n                    \n                        if (!temp45) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x0220:0x0240] = memory[0x0200:0x0220];\n                    \n                        if (!msg.data[0x04:0x24]) {\n                            var1 = 0x00;\n                            memory[0x0140:0x0160] = var1 / var0;\n                            memory[0x00:0x20] = memory[0x0140:0x0160];\n                            return memory[0x00:0x20];\n                        } else if ((msg.data[0x04:0x24] * memory[0x0220:0x0240]) / msg.data[0x04:0x24] == memory[0x0220:0x0240]) {\n                            memory[0x0140:0x0160] = (msg.data[0x04:0x24] * memory[0x0220:0x0240]) / var0;\n                            memory[0x00:0x20] = memory[0x0140:0x0160];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x24:0x44];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[0x0140:0x0160];\n                    memory[0x0180:0x01a0] = 0x84ba3f69;\n                    memory[0x01a0:0x01c0] = msg.data[0x04:0x24];\n                    var1 = memory[0x01a0:0x01c0];\n                    var2 = 0x06;\n                    // Unhandled termination\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!storage[0xffffff]) {\n                storage[0xffffff] = 0x01;\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                memory[0xc0:0xe0] = 0x08;\n            \n                if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n            \n                if (!((msg.data[0x24:0x44] > 0x00) & (msg.data[0x64:0x84] > block.timestamp))) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = msg.sender;\n                memory[0xc0:0xe0] = 0x05;\n            \n                if (storage[keccak256(memory[0xc0:0x0100])] < msg.data[0x24:0x44]) { revert(memory[0x00:0x00]); }\n            \n                if (storage[0x04] <= 0x00) { revert(memory[0x00:0x00]); }\n            \n                var0 = memory[0x0140:0x0160];\n                memory[0x0180:0x01a0] = 0x84ba3f69;\n                memory[0x01a0:0x01c0] = msg.data[0x04:0x24];\n                var1 = memory[0x01a0:0x01c0];\n                var2 = 0x06;\n                // Unhandled termination\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!storage[0xffffff]) {\n            storage[0xffffff] = 0x01;\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            if (!((msg.data[0x44:0x64] > block.timestamp) & (msg.data[0x24:0x44] > 0x00))) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0140:0x0160] = 0x16;\n            memory[0x0160:0x0180] = 0x6c6971756964697479416464696e67416c6c6f77656400000000000000000000;\n            memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n            memory[0xc0:0xe0] = 0x09;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            var3 = memory[0x01a0:0x01c0];\n            memory[0x01e0:0x0200] = 0x84ba3f69;\n            memory[0x0200:0x0220] = msg.data[0x04:0x24];\n            var4 = memory[0x0200:0x0220];\n            var5 = 0x06;\n            // Unhandled termination\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (0x00) {\n            memory[0x0160:0x0180] = var-1;\n            memory[0x0140:0x0160] = var-2;\n        \n            if (!address(storage[0x0b]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ storage[0x0b])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01a0:0x01c0] = 0xf1bb1086;\n            memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n            var temp56;\n            temp56, memory[0x0220:0x0240] = address(storage[0x0b]).staticcall.gas(msg.gas)(memory[0x01bc:0x01e0]);\n        \n            if (!temp56) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = memory[0x0220:0x0240];\n        \n            if (memory[0x0180:0x01a0] <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = memory[0x0180:0x01a0];\n            var-2 = memory[0x00:0x20];\n            // Error: Could not resolve jump destination!\n        } else if (0x00) {\n            memory[0x01a0:0x01c0] = var-1;\n            memory[0x0140:0x0160] = var-2;\n            memory[0x0160:0x0180] = var-3;\n            memory[0x0180:0x01a0] = var-4;\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01e0:0x0200] = 0x70a08231;\n            memory[0x0200:0x0220] = address(this);\n            var temp51;\n            temp51, memory[0x0260:0x0280] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x01fc:0x0220]);\n        \n            if (!temp51) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01c0:0x01e0] = memory[0x0260:0x0280];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x02a0:0x02c0] = 0x70a08231;\n            memory[0x02c0:0x02e0] = memory[0x0160:0x0180];\n            var temp52;\n            temp52, memory[0x0320:0x0340] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x02bc:0x02e0]);\n        \n            if (!temp52) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0280:0x02a0] = memory[0x0320:0x0340];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0340:0x0360] = 0xa9059cbb;\n            memory[0x0360:0x0380] = memory[0x0160:0x0180];\n            memory[0x0380:0x03a0] = memory[0x0180:0x01a0];\n            var temp53;\n            temp53, memory[0x03e0:0x0400] = address(memory[0x0140:0x0160]).call.gas(msg.gas)(memory[0x035c:0x03a0]);\n        \n            if (!temp53) { revert(memory[0x00:0x00]); }\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0420:0x0440] = 0x70a08231;\n            memory[0x0440:0x0460] = address(this);\n            var temp54;\n            temp54, memory[0x04a0:0x04c0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x043c:0x0460]);\n        \n            if (!temp54) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0400:0x0420] = memory[0x04a0:0x04c0];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x04e0:0x0500] = 0x70a08231;\n            memory[0x0500:0x0520] = memory[0x0160:0x0180];\n            var temp55;\n            temp55, memory[0x0560:0x0580] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x04fc:0x0520]);\n        \n            if (!temp55) { revert(memory[0x00:0x00]); }\n        \n            memory[0x04c0:0x04e0] = memory[0x0560:0x0580];\n        \n            if (memory[0x0280:0x02a0] + memory[0x0180:0x01a0] < memory[0x0280:0x02a0]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x04c0:0x04e0] != memory[0x0280:0x02a0] + memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x01c0:0x01e0] < memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0400:0x0420] != memory[0x01c0:0x01e0] - memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = 0x01;\n            var-4 = memory[0x00:0x20];\n            // Error: Could not resolve jump destination!\n        } else if (0x00) {\n            // Error: StackRead before write???\n            var var-1;\n            // Error: StackRead before write???\n            var var-5;\n            // Error: StackRead before write???\n            var var-3;\n            // Error: StackRead before write???\n            var var-2;\n            // Error: StackRead before write???\n            var var-4;\n            memory[0x01c0:0x01e0] = var-1;\n            memory[0x0140:0x0160] = var-2;\n            memory[0x0160:0x0180] = var-3;\n            memory[0x0180:0x01a0] = var-4;\n            memory[0x01a0:0x01c0] = var-5;\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0200:0x0220] = 0x70a08231;\n            memory[0x0220:0x0240] = memory[0x0180:0x01a0];\n            var temp46;\n            temp46, memory[0x0280:0x02a0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x021c:0x0240]);\n        \n            if (!temp46) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01e0:0x0200] = memory[0x0280:0x02a0];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x02c0:0x02e0] = 0x70a08231;\n            memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n            var temp47;\n            temp47, memory[0x0340:0x0360] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x02dc:0x0300]);\n        \n            if (!temp47) { revert(memory[0x00:0x00]); }\n        \n            memory[0x02a0:0x02c0] = memory[0x0340:0x0360];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0360:0x0380] = 0x23b872dd;\n            memory[0x0380:0x03a0] = memory[0x0160:0x0180];\n            memory[0x03a0:0x03c0] = memory[0x0180:0x01a0];\n            memory[0x03c0:0x03e0] = memory[0x01a0:0x01c0];\n            var temp48;\n            temp48, memory[0x0420:0x0440] = address(memory[0x0140:0x0160]).call.gas(msg.gas)(memory[0x037c:0x03e0]);\n        \n            if (!temp48) { revert(memory[0x00:0x00]); }\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0460:0x0480] = 0x70a08231;\n            memory[0x0480:0x04a0] = memory[0x0180:0x01a0];\n            var temp49;\n            temp49, memory[0x04e0:0x0500] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x047c:0x04a0]);\n        \n            if (!temp49) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0440:0x0460] = memory[0x04e0:0x0500];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0520:0x0540] = 0x70a08231;\n            memory[0x0540:0x0560] = memory[0x0160:0x0180];\n            var temp50;\n            temp50, memory[0x05a0:0x05c0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x053c:0x0560]);\n        \n            if (!temp50) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0500:0x0520] = memory[0x05a0:0x05c0];\n        \n            if (memory[0x02a0:0x02c0] < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0500:0x0520] != memory[0x02a0:0x02c0] - memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x01e0:0x0200] + memory[0x01a0:0x01c0] < memory[0x01e0:0x0200]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0440:0x0460] != memory[0x01e0:0x0200] + memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = 0x01;\n            var-5 = memory[0x00:0x20];\n            // Error: Could not resolve jump destination!\n        } else if (memory[0x00:0x20] != 0x55776b77) {\n            if (memory[0x00:0x20] != 0x93ca2f8a) {\n                if (memory[0x00:0x20] != 0x91b26ae0) {\n                    if (memory[0x00:0x20] != 0x126603b5) {\n                        if (memory[0x00:0x20] != 0x43d91bf1) {\n                            if (memory[0x00:0x20] != 0x23d7d1a8) {\n                                if (memory[0x00:0x20] != 0x44dbd334) {\n                                    if (memory[0x00:0x20] != 0x903a1001) {\n                                        if (memory[0x00:0x20] != 0x80a0628b) {\n                                            if (memory[0x00:0x20] != 0xf2fde38b) {\n                                                if (memory[0x00:0x20] != 0x993f4a20) {\n                                                    if (memory[0x00:0x20] != 0xe005cbbf) {\n                                                        if (memory[0x00:0x20] != 0x86d1e02b) {\n                                                            if (memory[0x00:0x20] != 0xa9059cbb) {\n                                                                if (memory[0x00:0x20] != 0x23b872dd) {\n                                                                    if (memory[0x00:0x20] != 0x095ea7b3) {\n                                                                        if (memory[0x00:0x20] != 0x06fdde03) {\n                                                                            if (memory[0x00:0x20] != 0x95d89b41) {\n                                                                                if (memory[0x00:0x20] != 0x8da5cb5b) {\n                                                                                    if (memory[0x00:0x20] != 0x313ce567) {\n                                                                                        if (memory[0x00:0x20] != 0x18160ddd) {\n                                                                                            if (memory[0x00:0x20] != 0x70a08231) {\n                                                                                                if (memory[0x00:0x20] != 0xdd62ed3e) {\n                                                                                                    if (memory[0x00:0x20] != 0x4999eb8f) {\n                                                                                                        if (memory[0x00:0x20] != 0x51ecd2fa) {\n                                                                                                            if (memory[0x00:0x20] != 0x752708fb) {\n                                                                                                                if (memory[0x00:0x20] != 0x2bc51c6d) { revert(memory[0x00:0x00]); }\n                                                                                                            \n                                                                                                                if (msg.value) { revert(memory[0x00:0x00]); }\n                                                                                                            \n                                                                                                                memory[0x00:0x20] = storage[0x0b];\n                                                                                                                return memory[0x00:0x20];\n                                                                                                            } else if (!msg.value) {\n                                                                                                                memory[0x0140:0x0180] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n                                                                                                            \n                                                                                                                if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n                                                                                                            \n                                                                                                                memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n                                                                                                                memory[0xc0:0xe0] = 0x09;\n                                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                                return memory[0x00:0x20];\n                                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                                        } else if (!msg.value) {\n                                                                                                            var var0 = msg.data[0x04:0x24];\n                                                                                                        \n                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                        \n                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                            memory[0xc0:0xe0] = 0x08;\n                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                            return memory[0x00:0x20];\n                                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                                    } else if (!msg.value) {\n                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                    \n                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                    \n                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                        memory[0xc0:0xe0] = 0x07;\n                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                        return memory[0x00:0x20];\n                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                } else if (!msg.value) {\n                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                \n                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                \n                                                                                                    var0 = msg.data[0x24:0x44];\n                                                                                                \n                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                \n                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                                                    var temp0 = keccak256(memory[0xc0:0x0100]);\n                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                    memory[0xc0:0xe0] = temp0;\n                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                    return memory[0x00:0x20];\n                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                            } else if (!msg.value) {\n                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                            \n                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                            \n                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                memory[0xc0:0xe0] = 0x05;\n                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                return memory[0x00:0x20];\n                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                        } else if (!msg.value) {\n                                                                                            memory[0x00:0x20] = storage[0x04];\n                                                                                            return memory[0x00:0x20];\n                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                    } else if (!msg.value) {\n                                                                                        memory[0x00:0x20] = storage[0x03];\n                                                                                        return memory[0x00:0x20];\n                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                } else if (!msg.value) {\n                                                                                    memory[0x00:0x20] = storage[0x02];\n                                                                                    return memory[0x00:0x20];\n                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                            } else if (!msg.value) {\n                                                                                var0 = 0x01;\n                                                                                memory[0xc0:0xe0] = var0;\n                                                                                var var1 = keccak256(memory[0xc0:0xe0]);\n                                                                                var var2 = 0x0180;\n                                                                                var temp1 = storage[var1] + 0x20;\n                                                                                var var3 = temp1;\n                                                                                var var4 = 0x0120;\n                                                                                memory[var4:var4 + 0x20] = 0x00;\n                                                                                var var5 = 0x02;\n                                                                            \n                                                                                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_25AD; }\n                                                                            \n                                                                            label_25B1:\n                                                                                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                                var temp2 = var4;\n                                                                                var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                                                                                memory[temp2:temp2 + 0x20] = temp3;\n                                                                            \n                                                                                if (var5 == temp3) { goto label_25D3; }\n                                                                            \n                                                                                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_25B1; }\n                                                                            \n                                                                            label_25AD:\n                                                                            \n                                                                            label_25D3:\n                                                                                var temp4 = memory[0x0180:0x01a0];\n                                                                                var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                                                                                var1 = 0x01e0;\n                                                                                var temp5 = memory[0x0180:0x01a0];\n                                                                                memory[var1:var1 + 0x20] = temp5;\n                                                                                var2 = temp5 + 0x06;\n                                                                            \n                                                                                if (memory[0x01e0:0x0200] > var0) { goto label_2605; }\n                                                                            \n                                                                            label_2609:\n                                                                                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                                                                                var temp6 = var1;\n                                                                                var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                                                                                memory[temp6:temp6 + 0x20] = temp7;\n                                                                            \n                                                                                if (var2 == temp7) { goto label_2625; }\n                                                                            \n                                                                                if (memory[0x01e0:0x0200] <= var0) { goto label_2609; }\n                                                                            \n                                                                            label_2605:\n                                                                            \n                                                                            label_2625:\n                                                                                memory[0x0160:0x0180] = 0x20;\n                                                                                var temp8 = memory[0x0180:0x01a0] + 0x40;\n                                                                                return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                        } else if (!msg.value) {\n                                                                            var0 = 0x00;\n                                                                            memory[0xc0:0xe0] = var0;\n                                                                            var1 = keccak256(memory[0xc0:0xe0]);\n                                                                            var2 = 0x0180;\n                                                                            var temp9 = storage[var1] + 0x20;\n                                                                            var3 = temp9;\n                                                                            var4 = 0x0120;\n                                                                            memory[var4:var4 + 0x20] = 0x00;\n                                                                            var5 = 0x02;\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_24C9; }\n                                                                        \n                                                                        label_24CD:\n                                                                            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                            var temp10 = var4;\n                                                                            var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n                                                                            memory[temp10:temp10 + 0x20] = temp11;\n                                                                        \n                                                                            if (var5 == temp11) { goto label_24EF; }\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_24CD; }\n                                                                        \n                                                                        label_24C9:\n                                                                        \n                                                                        label_24EF:\n                                                                            var temp12 = memory[0x0180:0x01a0];\n                                                                            var0 = (temp12 + 0x1f) - temp12 - 0x01 % 0x20;\n                                                                            var1 = 0x01e0;\n                                                                            var temp13 = memory[0x0180:0x01a0];\n                                                                            memory[var1:var1 + 0x20] = temp13;\n                                                                            var2 = temp13 + 0x20;\n                                                                        \n                                                                            if (memory[0x01e0:0x0200] > var0) { goto label_2521; }\n                                                                        \n                                                                        label_2525:\n                                                                            memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                                                                            var temp14 = var1;\n                                                                            var temp15 = memory[temp14:temp14 + 0x20] + 0x01;\n                                                                            memory[temp14:temp14 + 0x20] = temp15;\n                                                                        \n                                                                            if (var2 == temp15) { goto label_2541; }\n                                                                        \n                                                                            if (memory[0x01e0:0x0200] <= var0) { goto label_2525; }\n                                                                        \n                                                                        label_2521:\n                                                                        \n                                                                        label_2541:\n                                                                            memory[0x0160:0x0180] = 0x20;\n                                                                            var temp16 = memory[0x0180:0x01a0] + 0x40;\n                                                                            return memory[0x0160:0x0160 + (temp16 + 0x1f) - temp16 - 0x01 % 0x20];\n                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                    } else if (!msg.value) {\n                                                                        var0 = msg.data[0x04:0x24];\n                                                                    \n                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0xe0:0x0100] = msg.sender;\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var temp17 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = temp17;\n                                                                        storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                                                        memory[0x0140:0x0160] = msg.data[0x24:0x44];\n                                                                        log(memory[0x0140:0x0160], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, msg.sender]);\n                                                                        memory[0x00:0x20] = 0x01;\n                                                                        return memory[0x00:0x20];\n                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                } else if (!msg.value) {\n                                                                    var0 = msg.data[0x04:0x24];\n                                                                \n                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var0 = msg.data[0x24:0x44];\n                                                                \n                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x05;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                \n                                                                    if (storage[var0] < msg.data[0x44:0x64]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp18 = var0;\n                                                                    storage[temp18] = storage[temp18] - msg.data[0x44:0x64];\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = 0x05;\n                                                                    var temp19 = keccak256(memory[0xc0:0x0100]);\n                                                                    var0 = temp19;\n                                                                \n                                                                    if (storage[var0] + msg.data[0x44:0x64] < storage[var0]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp20 = var0;\n                                                                    storage[temp20] = storage[temp20] + msg.data[0x44:0x64];\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var temp21 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.sender;\n                                                                    memory[0xc0:0xe0] = temp21;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                \n                                                                    if (storage[var0] < msg.data[0x44:0x64]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp22 = var0;\n                                                                    storage[temp22] = storage[temp22] - msg.data[0x44:0x64];\n                                                                    memory[0x0140:0x0160] = msg.data[0x44:0x64];\n                                                                    log(memory[0x0140:0x0160], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x04:0x24], msg.data[0x24:0x44]]);\n                                                                    memory[0x00:0x20] = 0x01;\n                                                                    return memory[0x00:0x20];\n                                                                } else { revert(memory[0x00:0x00]); }\n                                                            } else if (!msg.value) {\n                                                                var0 = msg.data[0x04:0x24];\n                                                            \n                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                memory[0xe0:0x0100] = msg.sender;\n                                                                memory[0xc0:0xe0] = 0x05;\n                                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                            \n                                                                if (storage[var0] < msg.data[0x24:0x44]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var temp23 = var0;\n                                                                storage[temp23] = storage[temp23] - msg.data[0x24:0x44];\n                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                memory[0xc0:0xe0] = 0x05;\n                                                                var temp24 = keccak256(memory[0xc0:0x0100]);\n                                                                var0 = temp24;\n                                                            \n                                                                if (storage[var0] + msg.data[0x24:0x44] < storage[var0]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var temp25 = var0;\n                                                                storage[temp25] = storage[temp25] + msg.data[0x24:0x44];\n                                                                memory[0x0140:0x0160] = msg.data[0x24:0x44];\n                                                                log(memory[0x0140:0x0160], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, msg.data[0x04:0x24]]);\n                                                                memory[0x00:0x20] = 0x01;\n                                                                return memory[0x00:0x20];\n                                                            } else { revert(memory[0x00:0x00]); }\n                                                        } else if (!msg.value) {\n                                                            var0 = msg.data[0x04:0x24];\n                                                        \n                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[0x0b] = msg.data[0x04:0x24];\n                                                            log(memory[0x00:0x00], [0x12ad2958c2383ce31dd51da097e673d81de88c202731500406f3afc70a8cf170, msg.data[0x04:0x24]]);\n                                                            memory[0x00:0x20] = 0x01;\n                                                            return memory[0x00:0x20];\n                                                        } else { revert(memory[0x00:0x00]); }\n                                                    } else if (!msg.value) {\n                                                        memory[0x0140:0x0180] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n                                                    \n                                                        if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        var0 = storage[keccak256(memory[0xc0:0x0100])] * 0x02540be400;\n                                                    \n                                                        if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x01a0:0x01c0] = var0;\n                                                        memory[0x01c0:0x01e0] = 0x038d7ea4c68000;\n                                                        var0 = memory[0xa0:0xc0];\n                                                        var1 = memory[0x01a0:0x01c0];\n                                                        var2 = memory[0x01c0:0x01e0];\n                                                    \n                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp26 = (var1 * 0x02540be400) i/ var2;\n                                                        var1 = temp26;\n                                                    \n                                                        if (var1 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp27 = var0;\n                                                        var0 = var1;\n                                                    \n                                                        if (var0 i< temp27) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x00:0x20] = var0;\n                                                        return memory[0x00:0x20];\n                                                    } else { revert(memory[0x00:0x00]); }\n                                                } else if (!msg.value) {\n                                                    memory[0x0140:0x0180] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n                                                \n                                                    if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n                                                \n                                                    if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var0 = 0x00;\n                                                    memory[0x01a0:0x01c0] = 0x038d7ea4c68000;\n                                                    var1 = memory[0xa0:0xc0];\n                                                    var temp28 = memory[0x01a0:0x01c0];\n                                                    var2 = temp28;\n                                                    var temp29 = msg.data[0x24:0x44];\n                                                    var3 = temp29;\n                                                    var4 = var3 * var2;\n                                                \n                                                    if (!((var4 i/ var3 == var2) | !var3)) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var2 = var4 i/ 0x02540be400;\n                                                \n                                                    if (var2 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp30 = var1;\n                                                    var1 = var2;\n                                                \n                                                    if (var1 i< temp30) { revert(memory[0x00:0x00]); }\n                                                \n                                                    if (var1 i>= var0) {\n                                                        var0 = 0x02540be400;\n                                                        memory[0x01a0:0x01c0] = 0x038d7ea4c68000;\n                                                        var1 = memory[0xa0:0xc0];\n                                                        var temp31 = memory[0x01a0:0x01c0];\n                                                        var2 = temp31;\n                                                        var temp32 = msg.data[0x24:0x44];\n                                                        var3 = temp32;\n                                                        var4 = var3 * var2;\n                                                    \n                                                        if (!((var4 i/ var3 == var2) | !var3)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var2 = var4 i/ 0x02540be400;\n                                                    \n                                                        if (var2 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp33 = var1;\n                                                        var1 = var2;\n                                                    \n                                                        if (var1 i< temp33) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp34 = var1 i/ var0;\n                                                        var0 = temp34;\n                                                    \n                                                        if (var0 i< 0x00) { revert(memory[0x00:0x00]); }\n                                                    \n                                                    label_2078:\n                                                        memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        storage[keccak256(memory[0xc0:0x0100])] = var0;\n                                                        var0 = msg.data[0x24:0x44];\n                                                        var1 = 0x0140;\n                                                        var2 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n                                                        var3 = 0x00;\n                                                        var4 = memory[var1:var1 + 0x20];\n                                                    \n                                                        if (var4 i> 0x20) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp35 = var3;\n                                                        var3 = var4;\n                                                    \n                                                        if (var3 i< temp35) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        log(memory[0x00:0x00], [0xd8dd23b660d1a2cd022ce86c6122d03c591f721b3c2af378ecb404c0b605ddc7, stack[-2] / 0x0100 ** (memory[0x0140:0x0160] - stack[-1]), stack[-4]]);\n                                                        memory[0x00:0x20] = 0x01;\n                                                        return memory[0x00:0x20];\n                                                    } else {\n                                                        var0 = 0x02540be400;\n                                                        var1 = 0x02540be3ff;\n                                                        memory[0x01a0:0x01c0] = 0x038d7ea4c68000;\n                                                        var2 = memory[0xa0:0xc0];\n                                                        var temp36 = memory[0x01a0:0x01c0];\n                                                        var3 = temp36;\n                                                        var temp37 = msg.data[0x24:0x44];\n                                                        var4 = temp37;\n                                                        var5 = var4 * var3;\n                                                    \n                                                        if (!((var5 i/ var4 == var3) | !var4)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var3 = var5 i/ 0x02540be400;\n                                                    \n                                                        if (var3 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp38 = var2;\n                                                        var2 = var3;\n                                                    \n                                                        if (var2 i< temp38) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var0 = var2 - var1 i/ var0;\n                                                    \n                                                        if (var0 i>= 0x00) { goto label_2078; }\n                                                        else { revert(memory[0x00:0x00]); }\n                                                    }\n                                                } else { revert(memory[0x00:0x00]); }\n                                            } else if (!msg.value) {\n                                                var0 = msg.data[0x04:0x24];\n                                            \n                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                            \n                                                if (!(msg.data[0x04:0x24] ~ 0x00)) { revert(memory[0x00:0x00]); }\n                                            \n                                                if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[0x02] = msg.data[0x04:0x24];\n                                                log(memory[0x00:0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x02], msg.data[0x04:0x24]]);\n                                                memory[0x00:0x20] = 0x01;\n                                                return memory[0x00:0x20];\n                                            } else { revert(memory[0x00:0x00]); }\n                                        } else if (!msg.value) {\n                                            var0 = msg.data[0x04:0x24];\n                                        \n                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = 0x05;\n                                            var0 = storage[keccak256(memory[0xc0:0x0100])] * 0x02540be400;\n                                        \n                                            if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x0140:0x0160] = var0;\n                                            var0 = storage[0x04] * 0x02540be400;\n                                        \n                                            if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x0160:0x0180] = var0;\n                                            var0 = memory[0xa0:0xc0];\n                                            var1 = memory[0x0140:0x0160];\n                                            var2 = memory[0x0160:0x0180];\n                                        \n                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            var temp39 = (var1 * 0x02540be400) i/ var2;\n                                            var1 = temp39;\n                                        \n                                            if (var1 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n                                        \n                                            var temp40 = var0;\n                                            var0 = var1;\n                                        \n                                            if (var0 i< temp40) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x0180:0x01a0] = var0;\n                                            memory[0x00:0x20] = memory[0x0180:0x01a0];\n                                            return memory[0x00:0x20];\n                                        } else { revert(memory[0x00:0x00]); }\n                                    } else if (!msg.value) {\n                                        memory[0x0140:0x0180] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n                                    \n                                        if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n                                    \n                                        var0 = msg.data[0x24:0x44];\n                                    \n                                        if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                                    \n                                        if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n                                        memory[0xc0:0xe0] = 0x09;\n                                        storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                        var0 = msg.data[0x24:0x44];\n                                        var1 = 0x0140;\n                                        var2 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n                                        var3 = 0x00;\n                                        var4 = memory[var1:var1 + 0x20];\n                                    \n                                        if (var4 i> 0x20) { revert(memory[0x00:0x00]); }\n                                    \n                                        var temp41 = var3;\n                                        var3 = var4;\n                                    \n                                        if (var3 i< temp41) { revert(memory[0x00:0x00]); }\n                                    \n                                        log(memory[0x00:0x00], [0x22b59c94b6ec143f205f4ac5d8177280de0eab514e8d857330a1af17343e97bd, stack[-2] / 0x0100 ** (memory[0x0140:0x0160] - stack[-1]), stack[-4]]);\n                                        memory[0x00:0x20] = 0x01;\n                                        return memory[0x00:0x20];\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    var0 = msg.data[0x04:0x24];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = msg.data[0x24:0x44];\n                                \n                                    if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                                \n                                    if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                    memory[0xc0:0xe0] = 0x08;\n                                \n                                    if (storage[keccak256(memory[0xc0:0x0100])] == msg.data[0x24:0x44]) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = 0x02;\n                                \n                                    if (!address(msg.data[0x04:0x24]).code.length) { revert(memory[0x00:0x00]); }\n                                \n                                    if (!(address(this) ~ msg.data[0x04:0x24])) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0x0140:0x0160] = 0x313ce567;\n                                    var temp42;\n                                    temp42, memory[0x01a0:0x01c0] = address(msg.data[0x04:0x24]).staticcall.gas(msg.gas)(memory[0x015c:0x0160]);\n                                \n                                    if (!temp42) { revert(memory[0x00:0x00]); }\n                                \n                                    if (memory[0x01a0:0x01c0] < var0) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                    memory[0xc0:0xe0] = 0x08;\n                                    storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                    memory[0x00:0x20] = 0x01;\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x24:0x44];\n                            \n                                if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                            \n                                if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                memory[0xc0:0xe0] = 0x07;\n                            \n                                if (storage[keccak256(memory[0xc0:0x0100])] == msg.data[0x24:0x44]) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = 0x02;\n                            \n                                if (!address(msg.data[0x04:0x24]).code.length) { revert(memory[0x00:0x00]); }\n                            \n                                if (!(address(this) ~ msg.data[0x04:0x24])) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x0140:0x0160] = 0x313ce567;\n                                var temp43;\n                                temp43, memory[0x01a0:0x01c0] = address(msg.data[0x04:0x24]).staticcall.gas(msg.gas)(memory[0x015c:0x0160]);\n                            \n                                if (!temp43) { revert(memory[0x00:0x00]); }\n                            \n                                if (memory[0x01a0:0x01c0] < var0) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                memory[0xc0:0xe0] = 0x07;\n                                storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                memory[0x00:0x20] = 0x01;\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!storage[0xffffff]) {\n                            storage[0xffffff] = 0x01;\n                        \n                            if (msg.value) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = msg.data[0x04:0x24];\n                        \n                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = msg.data[0x24:0x44];\n                        \n                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                            memory[0xc0:0xe0] = 0x08;\n                            var temp44 = storage[keccak256(memory[0xc0:0x0100])];\n                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                            memory[0xc0:0xe0] = 0x07;\n                        \n                            if (!(storage[keccak256(memory[0xc0:0x0100])] & temp44)) { revert(memory[0x00:0x00]); }\n                        \n                            if (!((msg.data[0x44:0x64] > 0x00) & (msg.data[0x64:0x84] > 0x00))) { revert(memory[0x00:0x00]); }\n                        \n                            if (msg.data[0x84:0xa4] <= block.timestamp) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x0140:0x0160] = 0x0e;\n                            memory[0x0160:0x0180] = 0x74726164696e67416c6c6f776564000000000000000000000000000000000000;\n                            memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n                            memory[0xc0:0xe0] = 0x09;\n                        \n                            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = memory[0x0140:0x0160];\n                            var1 = memory[0x0160:0x0180];\n                            var2 = memory[0x0180:0x01a0];\n                            var3 = memory[0x01a0:0x01c0];\n                            memory[0x01e0:0x0200] = 0x84ba3f69;\n                            memory[0x0200:0x0220] = msg.data[0x04:0x24];\n                            var4 = memory[0x0200:0x0220];\n                            var5 = 0x06;\n                            // Unhandled termination\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        var0 = msg.data[0x24:0x44];\n                    \n                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = msg.data[0x44:0x64];\n                    \n                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                    \n                        if (!0x021e19e0c9bab2400000) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = 0x021e19e0c9bab2400000;\n                        memory[0x0160:0x0180] = 0x91b26ae0;\n                        memory[0x0180:0x01a0] = msg.data[0x24:0x44];\n                        memory[0x01a0:0x01c0] = msg.data[0x44:0x64];\n                        var temp45;\n                        temp45, memory[0x0200:0x0220] = address(address(this)).call.gas(msg.gas)(memory[0x017c:0x01c0]);\n                    \n                        if (!temp45) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x0220:0x0240] = memory[0x0200:0x0220];\n                    \n                        if (!msg.data[0x04:0x24]) {\n                            var1 = 0x00;\n                            memory[0x0140:0x0160] = var1 / var0;\n                            memory[0x00:0x20] = memory[0x0140:0x0160];\n                            return memory[0x00:0x20];\n                        } else if ((msg.data[0x04:0x24] * memory[0x0220:0x0240]) / msg.data[0x04:0x24] == memory[0x0220:0x0240]) {\n                            memory[0x0140:0x0160] = (msg.data[0x04:0x24] * memory[0x0220:0x0240]) / var0;\n                            memory[0x00:0x20] = memory[0x0140:0x0160];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x24:0x44];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[0x0140:0x0160];\n                    memory[0x0180:0x01a0] = 0x84ba3f69;\n                    memory[0x01a0:0x01c0] = msg.data[0x04:0x24];\n                    var1 = memory[0x01a0:0x01c0];\n                    var2 = 0x06;\n                    // Unhandled termination\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!storage[0xffffff]) {\n                storage[0xffffff] = 0x01;\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                memory[0xc0:0xe0] = 0x08;\n            \n                if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n            \n                if (!((msg.data[0x24:0x44] > 0x00) & (msg.data[0x64:0x84] > block.timestamp))) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = msg.sender;\n                memory[0xc0:0xe0] = 0x05;\n            \n                if (storage[keccak256(memory[0xc0:0x0100])] < msg.data[0x24:0x44]) { revert(memory[0x00:0x00]); }\n            \n                if (storage[0x04] <= 0x00) { revert(memory[0x00:0x00]); }\n            \n                var0 = memory[0x0140:0x0160];\n                memory[0x0180:0x01a0] = 0x84ba3f69;\n                memory[0x01a0:0x01c0] = msg.data[0x04:0x24];\n                var1 = memory[0x01a0:0x01c0];\n                var2 = 0x06;\n                // Unhandled termination\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!storage[0xffffff]) {\n            storage[0xffffff] = 0x01;\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            if (!((msg.data[0x44:0x64] > block.timestamp) & (msg.data[0x24:0x44] > 0x00))) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0140:0x0160] = 0x16;\n            memory[0x0160:0x0180] = 0x6c6971756964697479416464696e67416c6c6f77656400000000000000000000;\n            memory[0xe0:0x0100] = keccak256(memory[0x0160:0x0160 + memory[0x0140:0x0160]]);\n            memory[0xc0:0xe0] = 0x09;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            var3 = memory[0x01a0:0x01c0];\n            memory[0x01e0:0x0200] = 0x84ba3f69;\n            memory[0x0200:0x0220] = msg.data[0x04:0x24];\n            var4 = memory[0x0200:0x0220];\n            var5 = 0x06;\n            // Unhandled termination\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 43.435399293899536,
	"usage": {
		"completion_tokens": 585,
		"prompt_tokens": 15329,
		"total_tokens": 15914
	}
}