{
	"address": "0x94a16fb83a625558709f2609cc4697c8163fe4f9",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The decompiled code seems to be part of a complex contract, possibly a token contract with various functions such as balance check, transfer, approval, etc. However, it contains many errors which make it difficult to understand and convert into Solidity code. \n\nHere's an attempt to reconstruct some of the functions based on the provided EVM bytecode:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Contract {\n    \n    mapping(address => uint256) private balances;\n    mapping(address => mapping(address => uint256)) private allowances;\n    \n    address public owner;\n    address public approvedAddress;\n\n    function balanceOf(address _account) public view returns (uint256) {\n        return balances[_account];\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowances[_owner][_spender];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require(msg.sender == owner, \"Not the correct Address\");\n        allowances[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(balances[msg.sender] >= _value, \"Not enough balance in account\");\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(balances[_from] >= _value, \"Not enough balance in from account\");\n        require(allowances[_from][msg.sender] >= _value, \"Not allowed to transfer this much\");\n        \n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowances[_from][msg.sender] -= _value;\n        \n        return true;\n    }\n}\n```\n\nPlease note that this is a simplified reconstruction and does not include all the logic and checks that the provided EVM bytecode might be implementing. Some parts of the code, like the error handling and specific bitwise operations, are not easy to accurately translate into Solidity without a clearer understanding of their purpose.",
				"role": "assistant"
			}
		}
	],
	"created": 1700475074,
	"id": "chatcmpl-8MvXGoLa8aM08FlWDhno0pcDCsaz2",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] != 0x18160ddd) {\n            if (memory[0x00:0x20] != 0x6a054250) {\n                if (memory[0x00:0x20] != 0x97a2d0eb) {\n                    if (memory[0x00:0x20] != 0x77884378) {\n                        if (0x00) {\n                            memory[0x0160:0x0180] = var-1;\n                            memory[0x0140:0x0160] = var-2;\n                        \n                            if (storage[0x05] != 0x01) {\n                            label_0280:\n                                // Error: Could not resolve jump destination!\n                            } else if (storage[0x0b] ~ 0x00) {\n                                memory[0xe0:0x0100] = storage[0x0b];\n                                memory[0xc0:0xe0] = 0x06;\n                                var-2 = keccak256(memory[0xc0:0x0100]);\n                                var-1 = storage[var-2];\n                                var0 = memory[0x0140:0x0160];\n                            \n                                if (var-1 < var0) { revert(memory[0x00:0x00]); }\n                            \n                                storage[var-2] = var-1 - var0;\n                                memory[0x0180:0x01a0] = memory[0x0140:0x0160];\n                                log(memory[0x0180:0x01a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0b], 0x00]);\n                                goto label_0280;\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (0x00) {\n                            // Error: StackRead before write???\n                            var var-2;\n                            // Error: StackRead before write???\n                            var var-1;\n                            memory[0x0160:0x0180] = var-1;\n                            memory[0x0140:0x0160] = var-2;\n                            var-2 = memory[0x0140:0x0160];\n                            var-1 = memory[0x0160:0x0180];\n                            memory[0x01a0:0x01c0] = 0x9b1f9e74;\n                            memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                            var0 = memory[0x01c0:0x01e0];\n                            var1 = 0x06;\n                            // Unhandled termination\n                        } else if (memory[0x00:0x20] != 0xdd62ed3e) {\n                            if (memory[0x00:0x20] != 0x7b0472f0) {\n                                if (memory[0x00:0x20] != 0x939624ab) {\n                                    if (memory[0x00:0x20] != 0x49c662b8) {\n                                        if (memory[0x00:0x20] != 0xa9059cbb) {\n                                            if (memory[0x00:0x20] != 0x23b872dd) {\n                                                if (memory[0x00:0x20] != 0xa6f12e85) {\n                                                    if (memory[0x00:0x20] != 0x60dded11) {\n                                                        if (memory[0x00:0x20] != 0x095ea7b3) {\n                                                            if (memory[0x00:0x20] != 0x048e45ca) {\n                                                                if (memory[0x00:0x20] != 0xc8c01a55) {\n                                                                    if (memory[0x00:0x20] != 0x06fdde03) {\n                                                                        if (memory[0x00:0x20] != 0x95d89b41) {\n                                                                            if (memory[0x00:0x20] != 0x313ce567) {\n                                                                                if (memory[0x00:0x20] != 0x70a08231) {\n                                                                                    if (memory[0x00:0x20] != 0x9ddd7c21) {\n                                                                                        if (memory[0x00:0x20] != 0x421f8e14) {\n                                                                                            if (memory[0x00:0x20] != 0xe9562a6d) {\n                                                                                                if (memory[0x00:0x20] != 0xf94be3af) {\n                                                                                                    if (memory[0x00:0x20] != 0x8f33367a) {\n                                                                                                        if (memory[0x00:0x20] != 0xb53574ab) {\n                                                                                                            if (memory[0x00:0x20] != 0xa1bb138e) {\n                                                                                                                if (memory[0x00:0x20] != 0x674b392e) {\n                                                                                                                    if (memory[0x00:0x20] != 0x0410bf99) {\n                                                                                                                        if (memory[0x00:0x20] != 0x1952ddbd) {\n                                                                                                                            if (memory[0x00:0x20] != 0xb993ed4b) { revert(memory[0x00:0x00]); }\n                                                                                                                        \n                                                                                                                            if (msg.value) { revert(memory[0x00:0x00]); }\n                                                                                                                        \n                                                                                                                            var var0 = msg.data[0x04:0x24];\n                                                                                                                        \n                                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                        \n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                                                                            var temp0 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                            memory[0xc0:0xe0] = temp0;\n                                                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x06];\n                                                                                                                            return memory[0x00:0x20];\n                                                                                                                        } else if (!msg.value) {\n                                                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                                                        \n                                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                        \n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                                                                            var temp1 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                            memory[0xc0:0xe0] = temp1;\n                                                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x05];\n                                                                                                                            return memory[0x00:0x20];\n                                                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                                                    } else if (!msg.value) {\n                                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                                    \n                                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                    \n                                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                                                                        var temp2 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                        memory[0xc0:0xe0] = temp2;\n                                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x04];\n                                                                                                                        return memory[0x00:0x20];\n                                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                                } else if (!msg.value) {\n                                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                                \n                                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                \n                                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                                                                    var temp3 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                    memory[0xc0:0xe0] = temp3;\n                                                                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                                                                    return memory[0x00:0x20];\n                                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                                            } else if (!msg.value) {\n                                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                                            \n                                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                            \n                                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                memory[0xc0:0xe0] = 0x0a;\n                                                                                                                var temp4 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                memory[0xc0:0xe0] = temp4;\n                                                                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                                                                return memory[0x00:0x20];\n                                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                                        } else if (!msg.value) {\n                                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                                        \n                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                        \n                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                                                            var temp5 = keccak256(memory[0xc0:0x0100]);\n                                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                            memory[0xc0:0xe0] = temp5;\n                                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                                                                                            return memory[0x00:0x20];\n                                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                                    } else if (!msg.value) {\n                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                    \n                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                    \n                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                                                        var temp6 = keccak256(memory[0xc0:0x0100]);\n                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                        memory[0xc0:0xe0] = temp6;\n                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                                                        return memory[0x00:0x20];\n                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                } else if (!msg.value) {\n                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                \n                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                \n                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                    memory[0xc0:0xe0] = 0x09;\n                                                                                                    var temp7 = keccak256(memory[0xc0:0x0100]);\n                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                    memory[0xc0:0xe0] = temp7;\n                                                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                                                    return memory[0x00:0x20];\n                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                            } else if (!msg.value) {\n                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                            \n                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                            \n                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                memory[0xc0:0xe0] = 0x09;\n                                                                                                var temp8 = keccak256(memory[0xc0:0x0100]);\n                                                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                memory[0xc0:0xe0] = temp8;\n                                                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                                                                                return memory[0x00:0x20];\n                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                        } else if (!msg.value) {\n                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                        \n                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                        \n                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                            memory[0xc0:0xe0] = 0x09;\n                                                                                            var temp9 = keccak256(memory[0xc0:0x0100]);\n                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                            memory[0xc0:0xe0] = temp9;\n                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                                            return memory[0x00:0x20];\n                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                    } else if (!msg.value) {\n                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                    \n                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                    \n                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                        memory[0xc0:0xe0] = 0x08;\n                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                        return memory[0x00:0x20];\n                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                } else if (!msg.value) {\n                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                \n                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                \n                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                    return memory[0x00:0x20];\n                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                            } else if (!msg.value) {\n                                                                                memory[0x00:0x20] = storage[0x04];\n                                                                                return memory[0x00:0x20];\n                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                        } else if (!msg.value) {\n                                                                            var0 = 0x01;\n                                                                            memory[0xc0:0xe0] = var0;\n                                                                            var var1 = keccak256(memory[0xc0:0xe0]);\n                                                                            var var2 = 0x0180;\n                                                                            var temp10 = storage[var1] + 0x20;\n                                                                            var var3 = temp10;\n                                                                            var var4 = 0x0120;\n                                                                            memory[var4:var4 + 0x20] = 0x00;\n                                                                            var var5 = 0x02;\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_227E; }\n                                                                        \n                                                                        label_2282:\n                                                                            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                            var temp11 = var4;\n                                                                            var temp12 = memory[temp11:temp11 + 0x20] + 0x01;\n                                                                            memory[temp11:temp11 + 0x20] = temp12;\n                                                                        \n                                                                            if (var5 == temp12) { goto label_22A4; }\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_2282; }\n                                                                        \n                                                                        label_227E:\n                                                                        \n                                                                        label_22A4:\n                                                                            var temp13 = memory[0x0180:0x01a0];\n                                                                            var temp14 = (temp13 + 0x1f) - temp13 - 0x01 % 0x20 - temp13;\n                                                                            memory[temp13 + 0x01a0:temp13 + 0x01a0 + temp14] = msg.data[msg.data.length:msg.data.length + temp14];\n                                                                            memory[0x0160:0x0180] = 0x20;\n                                                                            var temp15 = memory[0x0180:0x01a0] + 0x40;\n                                                                            return memory[0x0160:0x0160 + (temp15 + 0x1f) - temp15 - 0x01 % 0x20];\n                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                    } else if (!msg.value) {\n                                                                        var0 = 0x00;\n                                                                        memory[0xc0:0xe0] = var0;\n                                                                        var1 = keccak256(memory[0xc0:0xe0]);\n                                                                        var2 = 0x0180;\n                                                                        var temp16 = storage[var1] + 0x20;\n                                                                        var3 = temp16;\n                                                                        var4 = 0x0120;\n                                                                        memory[var4:var4 + 0x20] = 0x00;\n                                                                        var5 = 0x03;\n                                                                    \n                                                                        if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_21CA; }\n                                                                    \n                                                                    label_21CE:\n                                                                        memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                        var temp17 = var4;\n                                                                        var temp18 = memory[temp17:temp17 + 0x20] + 0x01;\n                                                                        memory[temp17:temp17 + 0x20] = temp18;\n                                                                    \n                                                                        if (var5 == temp18) { goto label_21F0; }\n                                                                    \n                                                                        if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_21CE; }\n                                                                    \n                                                                    label_21CA:\n                                                                    \n                                                                    label_21F0:\n                                                                        var temp19 = memory[0x0180:0x01a0];\n                                                                        var temp20 = (temp19 + 0x1f) - temp19 - 0x01 % 0x20 - temp19;\n                                                                        memory[temp19 + 0x01a0:temp19 + 0x01a0 + temp20] = msg.data[msg.data.length:msg.data.length + temp20];\n                                                                        memory[0x0160:0x0180] = 0x20;\n                                                                        var temp21 = memory[0x0180:0x01a0] + 0x40;\n                                                                        return memory[0x0160:0x0160 + (temp21 + 0x1f) - temp21 - 0x01 % 0x20];\n                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                } else if (!msg.value) {\n                                                                    var0 = msg.data[0x04:0x24];\n                                                                \n                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var0 = block.timestamp;\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp22 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp22;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    var temp23 = storage[keccak256(memory[0xc0:0xe0]) + 0x05];\n                                                                    var1 = temp23;\n                                                                    var2 = 0x03f480;\n                                                                \n                                                                    if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    if (var1 + var2 > var0) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp24 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp24;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                \n                                                                    if (storage[keccak256(memory[0xc0:0xe0]) + 0x06]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp25 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp25;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                \n                                                                    if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp26 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp26;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp27 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp27;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp28 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp28;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                    memory[0x01a0:0x01c0] = storage[0x03];\n                                                                \n                                                                    if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                                        var0 = memory[0x01a0:0x01c0];\n                                                                        var1 = memory[0x0180:0x01a0];\n                                                                    \n                                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp38 = var0 - var1;\n                                                                        var0 = temp38;\n                                                                        var temp39 = memory[0x0160:0x0180];\n                                                                        var1 = temp39;\n                                                                        var2 = var0 * var1;\n                                                                    \n                                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var0 = var2;\n                                                                        var1 = storage[0x03];\n                                                                        var2 = var1;\n                                                                    \n                                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0240:0x0260] = var0 / var2;\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = storage[0x0c];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0240:0x0260];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        var4 = memory[0x0180:0x01a0];\n                                                                        var5 = var4;\n                                                                    \n                                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp40 = var3 / var5;\n                                                                        var3 = temp40;\n                                                                        var temp41 = var2;\n                                                                        var4 = temp41 * var3;\n                                                                    \n                                                                        if (!((var4 / temp41 == var3) | !temp41)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var2 = var4;\n                                                                        var temp42 = var1;\n                                                                    \n                                                                        if (temp42 + var2 < temp42) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        var0 = memory[0x0160:0x0180];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = var2;\n                                                                    \n                                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp43 = var1 / var3;\n                                                                        var1 = temp43;\n                                                                        var temp44 = var0;\n                                                                        var2 = temp44 * var1;\n                                                                    \n                                                                        if (!((var2 / temp44 == var1) | !temp44)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0260:0x0280] = var2;\n                                                                        log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                        memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                                        log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], memory[0x0140:0x0160]]);\n                                                                        goto label_20DC;\n                                                                    } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var temp29 = storage[var0];\n                                                                        var1 = temp29;\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                    \n                                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        memory[0x01c0:0x01e0] = memory[0x0160:0x0180];\n                                                                        log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                    \n                                                                    label_20DC:\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x0160:0x0180];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                        memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                                        var4 = memory[0x02e0:0x0300];\n                                                                        var5 = 0x06;\n                                                                        // Unhandled termination\n                                                                    } else {\n                                                                        var0 = memory[0x0180:0x01a0];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                    \n                                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp30 = var0 - var1;\n                                                                        var0 = temp30;\n                                                                        var temp31 = memory[0x0160:0x0180];\n                                                                        var1 = temp31;\n                                                                        var2 = var0 * var1;\n                                                                    \n                                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var0 = var2;\n                                                                        var1 = storage[0x03];\n                                                                        var2 = var1;\n                                                                    \n                                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x01e0:0x0200] = var0 / var2;\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = storage[0x0c];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var temp32 = storage[var0];\n                                                                        var1 = temp32;\n                                                                        var2 = memory[0x01e0:0x0200];\n                                                                    \n                                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        var4 = memory[0x0180:0x01a0];\n                                                                        var5 = var4;\n                                                                    \n                                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp33 = var3 / var5;\n                                                                        var3 = temp33;\n                                                                        var temp34 = var2;\n                                                                        var4 = temp34 * var3;\n                                                                    \n                                                                        if (!((var4 / temp34 == var3) | !temp34)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var2 = var4;\n                                                                        var temp35 = var1;\n                                                                    \n                                                                        if (temp35 + var2 < temp35) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        var0 = memory[0x0160:0x0180];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = var2;\n                                                                    \n                                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp36 = var1 / var3;\n                                                                        var1 = temp36;\n                                                                        var temp37 = var0;\n                                                                        var2 = temp37 * var1;\n                                                                    \n                                                                        if (!((var2 / temp37 == var1) | !temp37)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0200:0x0220] = var2;\n                                                                        log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                        memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                                        log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x04:0x24], storage[0x0c]]);\n                                                                        goto label_20DC;\n                                                                    }\n                                                                } else { revert(memory[0x00:0x00]); }\n                                                            } else if (!msg.value) {\n                                                                var0 = msg.data[0x24:0x44];\n                                                            \n                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var0 = msg.data[0x44:0x64];\n                                                            \n                                                                if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                if (msg.sender != storage[0x0d]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                memory[0xc0:0xe0] = 0x0a;\n                                                                var temp45 = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                memory[0xc0:0xe0] = temp45;\n                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                memory[0xc0:0xe0] = 0x0a;\n                                                                var temp46 = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                memory[0xc0:0xe0] = temp46;\n                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                memory[0xc0:0xe0] = 0x0a;\n                                                                var temp47 = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                memory[0xc0:0xe0] = temp47;\n                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                memory[0x01a0:0x01c0] = storage[0x03];\n                                                            \n                                                                if (msg.data[0x44:0x64] != 0x01) {\n                                                                label_1A97:\n                                                                \n                                                                    if (msg.data[0x44:0x64]) {\n                                                                    label_1AFD:\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x0160:0x0180];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                        memory[0x02e0:0x0300] = memory[0x0140:0x0160];\n                                                                        var4 = memory[0x02e0:0x0300];\n                                                                        var5 = 0x06;\n                                                                        // Unhandled termination\n                                                                    } else {\n                                                                        memory[0xe0:0x0100] = storage[0x0c];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var temp48 = storage[var0];\n                                                                        var1 = temp48;\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        goto label_1AFD;\n                                                                    }\n                                                                } else if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                                    var0 = memory[0x01a0:0x01c0];\n                                                                    var1 = memory[0x0180:0x01a0];\n                                                                \n                                                                    if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp57 = var0 - var1;\n                                                                    var0 = temp57;\n                                                                    var temp58 = memory[0x0140:0x0160];\n                                                                    var1 = temp58;\n                                                                    var2 = var0 * var1;\n                                                                \n                                                                    if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var0 = var2;\n                                                                    var1 = storage[0x03];\n                                                                    var2 = var1;\n                                                                \n                                                                    if (!var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0x0240:0x0260] = var0 / var2;\n                                                                    memory[0xe0:0x0100] = storage[0x0c];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0240:0x0260];\n                                                                \n                                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 - var2;\n                                                                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0140:0x0160];\n                                                                    var3 = memory[0x01a0:0x01c0];\n                                                                    var4 = memory[0x0180:0x01a0];\n                                                                    var5 = var4;\n                                                                \n                                                                    if (!var5) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp59 = var3 / var5;\n                                                                    var3 = temp59;\n                                                                    var temp60 = var2;\n                                                                    var4 = temp60 * var3;\n                                                                \n                                                                    if (!((var4 / temp60 == var3) | !temp60)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var2 = var4;\n                                                                    var temp61 = var1;\n                                                                \n                                                                    if (temp61 + var2 < temp61) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 + var2;\n                                                                    var0 = memory[0x0140:0x0160];\n                                                                    var1 = memory[0x01a0:0x01c0];\n                                                                    var2 = memory[0x0180:0x01a0];\n                                                                    var3 = var2;\n                                                                \n                                                                    if (!var3) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp62 = var1 / var3;\n                                                                    var1 = temp62;\n                                                                    var temp63 = var0;\n                                                                    var2 = temp63 * var1;\n                                                                \n                                                                    if (!((var2 / temp63 == var1) | !temp63)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0x0260:0x0280] = var2;\n                                                                    log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x24:0x44], memory[0x0160:0x0180]]);\n                                                                    memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                                    log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], memory[0x0160:0x0180]]);\n                                                                    goto label_1A96;\n                                                                } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                                    memory[0xe0:0x0100] = msg.sender;\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0140:0x0160];\n                                                                \n                                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 - var2;\n                                                                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0140:0x0160];\n                                                                \n                                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 - var2;\n                                                                    memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                                                    log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x24:0x44], memory[0x0160:0x0180]]);\n                                                                    goto label_1A97;\n                                                                } else {\n                                                                    var0 = memory[0x0180:0x01a0];\n                                                                    var1 = memory[0x01a0:0x01c0];\n                                                                \n                                                                    if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp49 = var0 - var1;\n                                                                    var0 = temp49;\n                                                                    var temp50 = memory[0x0140:0x0160];\n                                                                    var1 = temp50;\n                                                                    var2 = var0 * var1;\n                                                                \n                                                                    if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var0 = var2;\n                                                                    var1 = storage[0x03];\n                                                                    var2 = var1;\n                                                                \n                                                                    if (!var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0x01e0:0x0200] = var0 / var2;\n                                                                    memory[0xe0:0x0100] = msg.sender;\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0140:0x0160];\n                                                                \n                                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 - var2;\n                                                                    memory[0xe0:0x0100] = storage[0x0c];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var temp51 = storage[var0];\n                                                                    var1 = temp51;\n                                                                    var2 = memory[0x01e0:0x0200];\n                                                                \n                                                                    if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 + var2;\n                                                                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0140:0x0160];\n                                                                    var3 = memory[0x01a0:0x01c0];\n                                                                    var4 = memory[0x0180:0x01a0];\n                                                                    var5 = var4;\n                                                                \n                                                                    if (!var5) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp52 = var3 / var5;\n                                                                    var3 = temp52;\n                                                                    var temp53 = var2;\n                                                                    var4 = temp53 * var3;\n                                                                \n                                                                    if (!((var4 / temp53 == var3) | !temp53)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var2 = var4;\n                                                                    var temp54 = var1;\n                                                                \n                                                                    if (temp54 + var2 < temp54) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 + var2;\n                                                                    var0 = memory[0x0140:0x0160];\n                                                                    var1 = memory[0x01a0:0x01c0];\n                                                                    var2 = memory[0x0180:0x01a0];\n                                                                    var3 = var2;\n                                                                \n                                                                    if (!var3) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp55 = var1 / var3;\n                                                                    var1 = temp55;\n                                                                    var temp56 = var0;\n                                                                    var2 = temp56 * var1;\n                                                                \n                                                                    if (!((var2 / temp56 == var1) | !temp56)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0x0200:0x0220] = var2;\n                                                                    log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0160:0x0180]]);\n                                                                    memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                                    log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x24:0x44], storage[0x0c]]);\n                                                                \n                                                                label_1A96:\n                                                                    goto label_1A97;\n                                                                }\n                                                            } else { revert(memory[0x00:0x00]); }\n                                                        } else if (!msg.value) {\n                                                            var0 = msg.data[0x04:0x24];\n                                                        \n                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x07;\n                                                            var temp64 = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                            memory[0xc0:0xe0] = temp64;\n                                                            storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                                            memory[0x0140:0x0160] = msg.data[0x24:0x44];\n                                                            log(memory[0x0140:0x0160], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, msg.data[0x04:0x24]]);\n                                                            memory[0x00:0x20] = 0x01;\n                                                            return memory[0x00:0x20];\n                                                        } else { revert(memory[0x00:0x00]); }\n                                                    } else if (!msg.value) {\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        var temp65 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp65;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                    \n                                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x0140:0x0160] = storage[0x0d];\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        var temp66 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp66;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        var temp67 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp67;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0])];\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var temp68 = storage[var0];\n                                                        var1 = temp68;\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 + var2;\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x08;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        var temp69 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp69;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        storage[keccak256(memory[0xc0:0xe0]) + 0x06] = 0x01;\n                                                        memory[0x01a0:0x01c0] = memory[0x0160:0x0180];\n                                                        log(memory[0x01a0:0x01c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, memory[0x0140:0x0160]]);\n                                                        memory[0x00:0x20] = 0x01;\n                                                        return memory[0x00:0x20];\n                                                    } else { revert(memory[0x00:0x00]); }\n                                                } else if (!msg.value) {\n                                                    memory[0xe0:0x0100] = msg.sender;\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var temp70 = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = temp70;\n                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                \n                                                    if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                \n                                                    memory[0xe0:0x0100] = msg.sender;\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var temp71 = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = temp71;\n                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0])];\n                                                    memory[0xe0:0x0100] = msg.sender;\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var temp72 = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = temp72;\n                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                    memory[0xe0:0x0100] = msg.sender;\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var temp73 = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = temp73;\n                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                    memory[0x01a0:0x01c0] = storage[0x03];\n                                                \n                                                    if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                        var0 = memory[0x01a0:0x01c0];\n                                                        var1 = memory[0x0180:0x01a0];\n                                                    \n                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp83 = var0 - var1;\n                                                        var0 = temp83;\n                                                        var temp84 = memory[0x0160:0x0180];\n                                                        var1 = temp84;\n                                                        var2 = var0 * var1;\n                                                    \n                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var0 = var2;\n                                                        var1 = storage[0x03];\n                                                        var2 = var1;\n                                                    \n                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x0240:0x0260] = var0 / var2;\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = storage[0x0c];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0240:0x0260];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                        var3 = memory[0x01a0:0x01c0];\n                                                        var4 = memory[0x0180:0x01a0];\n                                                        var5 = var4;\n                                                    \n                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp85 = var3 / var5;\n                                                        var3 = temp85;\n                                                        var temp86 = var2;\n                                                        var4 = temp86 * var3;\n                                                    \n                                                        if (!((var4 / temp86 == var3) | !temp86)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var2 = var4;\n                                                        var temp87 = var1;\n                                                    \n                                                        if (temp87 + var2 < temp87) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 + var2;\n                                                        var0 = memory[0x0160:0x0180];\n                                                        var1 = memory[0x01a0:0x01c0];\n                                                        var2 = memory[0x0180:0x01a0];\n                                                        var3 = var2;\n                                                    \n                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp88 = var1 / var3;\n                                                        var1 = temp88;\n                                                        var temp89 = var0;\n                                                        var2 = temp89 * var1;\n                                                    \n                                                        if (!((var2 / temp89 == var1) | !temp89)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x0260:0x0280] = var2;\n                                                        log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                        memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                        log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], memory[0x0140:0x0160]]);\n                                                        var0 = memory[0x0140:0x0160];\n                                                        var1 = memory[0x0160:0x0180];\n                                                        var2 = memory[0x0180:0x01a0];\n                                                        var3 = memory[0x01a0:0x01c0];\n                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                        memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                        var4 = memory[0x02e0:0x0300];\n                                                        var5 = 0x06;\n                                                        // Unhandled termination\n                                                    } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var temp74 = storage[var0];\n                                                        var1 = temp74;\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 + var2;\n                                                        memory[0x01c0:0x01e0] = memory[0x0160:0x0180];\n                                                        log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                        var0 = memory[0x0140:0x0160];\n                                                        var1 = memory[0x0160:0x0180];\n                                                        var2 = memory[0x0180:0x01a0];\n                                                        var3 = memory[0x01a0:0x01c0];\n                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                        memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                        var4 = memory[0x02e0:0x0300];\n                                                        var5 = 0x06;\n                                                        // Unhandled termination\n                                                    } else {\n                                                        var0 = memory[0x0180:0x01a0];\n                                                        var1 = memory[0x01a0:0x01c0];\n                                                    \n                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp75 = var0 - var1;\n                                                        var0 = temp75;\n                                                        var temp76 = memory[0x0160:0x0180];\n                                                        var1 = temp76;\n                                                        var2 = var0 * var1;\n                                                    \n                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var0 = var2;\n                                                        var1 = storage[0x03];\n                                                        var2 = var1;\n                                                    \n                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x01e0:0x0200] = var0 / var2;\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = storage[0x0c];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var temp77 = storage[var0];\n                                                        var1 = temp77;\n                                                        var2 = memory[0x01e0:0x0200];\n                                                    \n                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 + var2;\n                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                        var3 = memory[0x01a0:0x01c0];\n                                                        var4 = memory[0x0180:0x01a0];\n                                                        var5 = var4;\n                                                    \n                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp78 = var3 / var5;\n                                                        var3 = temp78;\n                                                        var temp79 = var2;\n                                                        var4 = temp79 * var3;\n                                                    \n                                                        if (!((var4 / temp79 == var3) | !temp79)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var2 = var4;\n                                                        var temp80 = var1;\n                                                    \n                                                        if (temp80 + var2 < temp80) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 + var2;\n                                                        var0 = memory[0x0160:0x0180];\n                                                        var1 = memory[0x01a0:0x01c0];\n                                                        var2 = memory[0x0180:0x01a0];\n                                                        var3 = var2;\n                                                    \n                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp81 = var1 / var3;\n                                                        var1 = temp81;\n                                                        var temp82 = var0;\n                                                        var2 = temp82 * var1;\n                                                    \n                                                        if (!((var2 / temp82 == var1) | !temp82)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x0200:0x0220] = var2;\n                                                        log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                        memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                        log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, storage[0x0c]]);\n                                                        var0 = memory[0x0140:0x0160];\n                                                        var1 = memory[0x0160:0x0180];\n                                                        var2 = memory[0x0180:0x01a0];\n                                                        var3 = memory[0x01a0:0x01c0];\n                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                        memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                        var4 = memory[0x02e0:0x0300];\n                                                        var5 = 0x06;\n                                                        // Unhandled termination\n                                                    }\n                                                } else { revert(memory[0x00:0x00]); }\n                                            } else if (!msg.value) {\n                                                var0 = msg.data[0x04:0x24];\n                                            \n                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                            \n                                                var0 = msg.data[0x24:0x44];\n                                            \n                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = 0x06;\n                                                var0 = storage[keccak256(memory[0xc0:0x0100])];\n                                                var1 = msg.data[0x44:0x64];\n                                            \n                                                if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = 0x08;\n                                            \n                                                if (storage[keccak256(memory[0xc0:0x0100])] > var0 - var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = 0x06;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = msg.data[0x44:0x64];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                memory[0xc0:0xe0] = 0x06;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var temp90 = storage[var0];\n                                                var1 = temp90;\n                                                var2 = msg.data[0x44:0x64];\n                                            \n                                                if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 + var2;\n                                                var0 = msg.data[0x44:0x64];\n                                                var1 = 0x64;\n                                                var2 = var1;\n                                            \n                                                if (!var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0x0140:0x0160] = var0 / var2;\n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = 0x07;\n                                                var temp91 = keccak256(memory[0xc0:0x0100]);\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = temp91;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = msg.data[0x44:0x64];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0x0160:0x0180] = msg.data[0x44:0x64];\n                                                log(memory[0x0160:0x0180], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x04:0x24], msg.data[0x24:0x44]]);\n                                                var0 = memory[0x0140:0x0160];\n                                                var1 = memory[0x0160:0x0180];\n                                                memory[0x01a0:0x01c0] = 0x42966c68;\n                                                memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                                var2 = memory[0x01c0:0x01e0];\n                                                var3 = 0x06;\n                                                // Unhandled termination\n                                            } else { revert(memory[0x00:0x00]); }\n                                        } else if (!msg.value) {\n                                            var0 = msg.data[0x04:0x24];\n                                        \n                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x0140:0x0160] = 0x08c379a0;\n                                            memory[0x0160:0x0180] = 0x20;\n                                            memory[0x0180:0x01a0] = 0x1e;\n                                            memory[0x01a0:0x01c0] = 0x4e6f7420656e6f6f7567682062616c616e636520696e206163636f756e740000;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x06;\n                                            var0 = storage[keccak256(memory[0xc0:0x0100])];\n                                            var1 = msg.data[0x24:0x44];\n                                        \n                                            if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x08;\n                                        \n                                            if (storage[keccak256(memory[0xc0:0x0100])] > var0 - var1) { revert(memory[0x015c:0x01e0]); }\n                                        \n                                            var0 = msg.data[0x24:0x44];\n                                            var1 = 0x64;\n                                            var2 = var1;\n                                        \n                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x01e0:0x0200] = var0 / var2;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x06;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = msg.data[0x24:0x44];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = 0x06;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var temp92 = storage[var0];\n                                            var1 = temp92;\n                                            var2 = msg.data[0x24:0x44];\n                                        \n                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 + var2;\n                                            memory[0x0200:0x0220] = msg.data[0x24:0x44];\n                                            log(memory[0x0200:0x0220], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, msg.data[0x04:0x24]]);\n                                            var0 = memory[0x0140:0x0160];\n                                            var1 = memory[0x0160:0x0180];\n                                            var2 = memory[0x0180:0x01a0];\n                                            var3 = memory[0x01a0:0x01c0];\n                                            var4 = memory[0x01c0:0x01e0];\n                                            var5 = memory[0x01e0:0x0200];\n                                            var var6 = memory[0x0200:0x0220];\n                                            memory[0x0240:0x0260] = 0x42966c68;\n                                            memory[0x0260:0x0280] = memory[0x01e0:0x0200];\n                                            var var7 = memory[0x0260:0x0280];\n                                            var var8 = 0x06;\n                                            // Unhandled termination\n                                        } else { revert(memory[0x00:0x00]); }\n                                    } else if (!msg.value) {\n                                        var0 = msg.data[0x24:0x44];\n                                    \n                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0x0140:0x0160] = 0x08c379a0;\n                                        memory[0x0160:0x0180] = 0x20;\n                                        memory[0x0180:0x01a0] = 0x1d;\n                                        memory[0x01a0:0x01c0] = 0x4e6f7420656e6f7567682062616c616e636520696e206163636f756e74000000;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x06;\n                                    \n                                        if (storage[keccak256(memory[0xc0:0x0100])] < msg.data[0x44:0x64]) { revert(memory[0x015c:0x01e0]); }\n                                    \n                                        memory[0x01e0:0x0200] = 0x08c379a0;\n                                        memory[0x0200:0x0220] = 0x20;\n                                        memory[0x0220:0x0240] = 0x1f;\n                                        memory[0x0240:0x0260] = 0x416c72656164792068617665206461746120696e2074686520776f726b496400;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x0a;\n                                        var temp93 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp93;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    \n                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x02]) { revert(memory[0x01fc:0x0280]); }\n                                    \n                                        var0 = 0x015180;\n                                        var temp94 = msg.data[0x64:0x84];\n                                        var1 = temp94;\n                                        var2 = var0 * var1;\n                                    \n                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                    \n                                        var temp95 = var2;\n                                        var0 = temp95;\n                                        var1 = block.timestamp;\n                                    \n                                        if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0x0280:0x02a0] = var0 + var1;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x0a;\n                                        var temp96 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp96;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                        var temp97 = keccak256(memory[0xc0:0xe0]);\n                                        storage[temp97] = msg.data[0x24:0x44];\n                                        storage[temp97 + 0x01] = msg.sender;\n                                        storage[temp97 + 0x02] = msg.data[0x44:0x64];\n                                        storage[temp97 + 0x03] = storage[0x03];\n                                        storage[temp97 + 0x04] = block.timestamp;\n                                        storage[temp97 + 0x05] = memory[0x0280:0x02a0];\n                                        storage[temp97 + 0x06] = 0x00;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x08;\n                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                        var temp98 = storage[var0];\n                                        var1 = temp98;\n                                        var2 = msg.data[0x44:0x64];\n                                    \n                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                    \n                                        storage[var0] = var1 + var2;\n                                        memory[0x00:0x20] = 0x01;\n                                        return memory[0x00:0x20];\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x09;\n                                    var temp99 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                    memory[0xc0:0xe0] = temp99;\n                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                \n                                    if (storage[keccak256(memory[0xc0:0xe0]) + 0x01] <= 0x00) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x09;\n                                    var temp100 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                    memory[0xc0:0xe0] = temp100;\n                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x09;\n                                    var temp101 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                    memory[0xc0:0xe0] = temp101;\n                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                    var temp102 = memory[0x0160:0x0180];\n                                    var0 = temp102;\n                                    var1 = 0x0708;\n                                \n                                    if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = block.timestamp < var0 + var1;\n                                    var temp103 = memory[0x0160:0x0180];\n                                    var1 = temp103;\n                                    var2 = 0x012c;\n                                \n                                    if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                \n                                    if (!((block.timestamp > var1 + var2) & var0)) {\n                                        var temp104 = memory[0x0160:0x0180];\n                                        var0 = temp104;\n                                        var1 = 0x0e10;\n                                    \n                                        if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                                    \n                                        var0 = block.timestamp < var0 + var1;\n                                        var temp105 = memory[0x0160:0x0180];\n                                        var1 = temp105;\n                                        var2 = 0x0708;\n                                    \n                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                    \n                                        if (!((block.timestamp > var1 + var2) & var0)) {\n                                            var temp106 = memory[0x0160:0x0180];\n                                            var0 = temp106;\n                                            var1 = 0x0e10;\n                                        \n                                            if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                                        \n                                            if (block.timestamp <= var0 + var1) {\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x09;\n                                                var temp107 = keccak256(memory[0xc0:0x0100]);\n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = temp107;\n                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                var temp108 = keccak256(memory[0xc0:0xe0]);\n                                                storage[temp108] = msg.sender;\n                                                storage[temp108 + 0x01] = 0x00;\n                                                storage[temp108 + 0x02] = 0x00;\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x08;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = memory[0x0140:0x0160];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0x00:0x20] = 0x01;\n                                                return memory[0x00:0x20];\n                                            } else {\n                                                var temp109 = memory[0x0140:0x0160];\n                                                var0 = temp109;\n                                                var1 = 0x00;\n                                                var2 = var0 * var1;\n                                            \n                                                if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0x0180:0x01a0] = var2;\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x06;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var temp110 = storage[var0];\n                                                var1 = temp110;\n                                                var2 = memory[0x0180:0x01a0];\n                                            \n                                                if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 + var2;\n                                                memory[0xe0:0x0100] = storage[0x0c];\n                                                memory[0xc0:0xe0] = 0x06;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = memory[0x0180:0x01a0];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0x01a0:0x01c0] = memory[0x0180:0x01a0];\n                                                log(memory[0x01a0:0x01c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], msg.sender]);\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x09;\n                                                var temp111 = keccak256(memory[0xc0:0x0100]);\n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = temp111;\n                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                var temp112 = keccak256(memory[0xc0:0xe0]);\n                                                storage[temp112] = msg.sender;\n                                                storage[temp112 + 0x01] = 0x00;\n                                                storage[temp112 + 0x02] = 0x00;\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x08;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = memory[0x0140:0x0160];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0x00:0x20] = 0x01;\n                                                return memory[0x00:0x20];\n                                            }\n                                        } else {\n                                            var temp113 = memory[0x0140:0x0160];\n                                            var0 = temp113;\n                                            var1 = 0x00;\n                                            var2 = var0 * var1;\n                                        \n                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x01c0:0x01e0] = var2;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x06;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var temp114 = storage[var0];\n                                            var1 = temp114;\n                                            var2 = memory[0x01c0:0x01e0];\n                                        \n                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 + var2;\n                                            memory[0xe0:0x0100] = storage[0x0c];\n                                            memory[0xc0:0xe0] = 0x06;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = memory[0x01c0:0x01e0];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0x01e0:0x0200] = memory[0x01c0:0x01e0];\n                                            log(memory[0x01e0:0x0200], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], msg.sender]);\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x09;\n                                            var temp115 = keccak256(memory[0xc0:0x0100]);\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = temp115;\n                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                            var temp116 = keccak256(memory[0xc0:0xe0]);\n                                            storage[temp116] = msg.sender;\n                                            storage[temp116 + 0x01] = 0x00;\n                                            storage[temp116 + 0x02] = 0x00;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x08;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = memory[0x0140:0x0160];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0x00:0x20] = 0x01;\n                                            return memory[0x00:0x20];\n                                        }\n                                    } else {\n                                        var temp117 = memory[0x0140:0x0160];\n                                        var0 = temp117;\n                                        var1 = 0x00;\n                                        var2 = var0 * var1;\n                                    \n                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0x0200:0x0220] = var2;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x06;\n                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                        var temp118 = storage[var0];\n                                        var1 = temp118;\n                                        var2 = memory[0x0200:0x0220];\n                                    \n                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                    \n                                        storage[var0] = var1 + var2;\n                                        memory[0xe0:0x0100] = storage[0x0c];\n                                        memory[0xc0:0xe0] = 0x06;\n                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                        var1 = storage[var0];\n                                        var2 = memory[0x0200:0x0220];\n                                    \n                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                    \n                                        storage[var0] = var1 - var2;\n                                        memory[0x0220:0x0240] = memory[0x0200:0x0220];\n                                        log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], msg.sender]);\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x09;\n                                        var temp119 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp119;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                        var temp120 = keccak256(memory[0xc0:0xe0]);\n                                        storage[temp120] = msg.sender;\n                                        storage[temp120 + 0x01] = 0x00;\n                                        storage[temp120 + 0x02] = 0x00;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x08;\n                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                        var1 = storage[var0];\n                                        var2 = memory[0x0140:0x0160];\n                                    \n                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                    \n                                        storage[var0] = var1 - var2;\n                                        memory[0x00:0x20] = 0x01;\n                                        return memory[0x00:0x20];\n                                    }\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                memory[0xe0:0x0100] = msg.sender;\n                                memory[0xc0:0xe0] = 0x06;\n                            \n                                if (storage[keccak256(memory[0xc0:0x0100])] < msg.data[0x04:0x24]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = msg.sender;\n                                memory[0xc0:0xe0] = 0x09;\n                                var temp121 = keccak256(memory[0xc0:0x0100]);\n                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                memory[0xc0:0xe0] = temp121;\n                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                var temp122 = keccak256(memory[0xc0:0xe0]);\n                                storage[temp122] = msg.sender;\n                                storage[temp122 + 0x01] = msg.data[0x04:0x24];\n                                storage[temp122 + 0x02] = block.timestamp;\n                                memory[0xe0:0x0100] = msg.sender;\n                                memory[0xc0:0xe0] = 0x08;\n                                var0 = keccak256(memory[0xc0:0x0100]);\n                                var temp123 = storage[var0];\n                                var1 = temp123;\n                                var2 = msg.data[0x04:0x24];\n                            \n                                if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                            \n                                storage[var0] = var1 + var2;\n                                memory[0x00:0x20] = 0x01;\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            var0 = msg.data[0x04:0x24];\n                        \n                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = msg.data[0x24:0x44];\n                        \n                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                            memory[0xc0:0xe0] = 0x07;\n                            var temp124 = keccak256(memory[0xc0:0x0100]);\n                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                            memory[0xc0:0xe0] = temp124;\n                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        memory[0x00:0x20] = storage[0x05];\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0140:0x0160] = 0x08c379a0;\n                    memory[0x0160:0x0180] = 0x20;\n                    memory[0x0180:0x01a0] = 0x17;\n                    memory[0x01a0:0x01c0] = 0x4e6f742074686520636f72726563742041646472657373000000000000000000;\n                \n                    if (msg.sender != storage[0x0e]) { revert(memory[0x015c:0x01e0]); }\n                \n                    storage[0x05] = msg.data[0x04:0x24];\n                    memory[0x00:0x20] = 0x01;\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                memory[0x0140:0x0160] = 0x08c379a0;\n                memory[0x0160:0x0180] = 0x20;\n                memory[0x0180:0x01a0] = 0x17;\n                memory[0x01a0:0x01c0] = 0x4e6f742074686520636f72726563742041646472657373000000000000000000;\n            \n                if (msg.sender != storage[0x0d]) { revert(memory[0x015c:0x01e0]); }\n            \n                storage[0x03] = msg.data[0x04:0x24];\n                memory[0x00:0x20] = 0x01;\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            memory[0x00:0x20] = storage[0x02];\n            return memory[0x00:0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] != 0x18160ddd) {\n            if (memory[0x00:0x20] != 0x6a054250) {\n                if (memory[0x00:0x20] != 0x97a2d0eb) {\n                    if (memory[0x00:0x20] != 0x77884378) {\n                        if (0x00) {\n                            memory[0x0160:0x0180] = var-1;\n                            memory[0x0140:0x0160] = var-2;\n                        \n                            if (storage[0x05] != 0x01) {\n                            label_0280:\n                                // Error: Could not resolve jump destination!\n                            } else if (storage[0x0b] ~ 0x00) {\n                                memory[0xe0:0x0100] = storage[0x0b];\n                                memory[0xc0:0xe0] = 0x06;\n                                var-2 = keccak256(memory[0xc0:0x0100]);\n                                var-1 = storage[var-2];\n                                var0 = memory[0x0140:0x0160];\n                            \n                                if (var-1 < var0) { revert(memory[0x00:0x00]); }\n                            \n                                storage[var-2] = var-1 - var0;\n                                memory[0x0180:0x01a0] = memory[0x0140:0x0160];\n                                log(memory[0x0180:0x01a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0b], 0x00]);\n                                goto label_0280;\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (0x00) {\n                            // Error: StackRead before write???\n                            var var-2;\n                            // Error: StackRead before write???\n                            var var-1;\n                            memory[0x0160:0x0180] = var-1;\n                            memory[0x0140:0x0160] = var-2;\n                            var-2 = memory[0x0140:0x0160];\n                            var-1 = memory[0x0160:0x0180];\n                            memory[0x01a0:0x01c0] = 0x9b1f9e74;\n                            memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                            var0 = memory[0x01c0:0x01e0];\n                            var1 = 0x06;\n                            // Unhandled termination\n                        } else if (memory[0x00:0x20] != 0xdd62ed3e) {\n                            if (memory[0x00:0x20] != 0x7b0472f0) {\n                                if (memory[0x00:0x20] != 0x939624ab) {\n                                    if (memory[0x00:0x20] != 0x49c662b8) {\n                                        if (memory[0x00:0x20] != 0xa9059cbb) {\n                                            if (memory[0x00:0x20] != 0x23b872dd) {\n                                                if (memory[0x00:0x20] != 0xa6f12e85) {\n                                                    if (memory[0x00:0x20] != 0x60dded11) {\n                                                        if (memory[0x00:0x20] != 0x095ea7b3) {\n                                                            if (memory[0x00:0x20] != 0x048e45ca) {\n                                                                if (memory[0x00:0x20] != 0xc8c01a55) {\n                                                                    if (memory[0x00:0x20] != 0x06fdde03) {\n                                                                        if (memory[0x00:0x20] != 0x95d89b41) {\n                                                                            if (memory[0x00:0x20] != 0x313ce567) {\n                                                                                if (memory[0x00:0x20] != 0x70a08231) {\n                                                                                    if (memory[0x00:0x20] != 0x9ddd7c21) {\n                                                                                        if (memory[0x00:0x20] != 0x421f8e14) {\n                                                                                            if (memory[0x00:0x20] != 0xe9562a6d) {\n                                                                                                if (memory[0x00:0x20] != 0xf94be3af) {\n                                                                                                    if (memory[0x00:0x20] != 0x8f33367a) {\n                                                                                                        if (memory[0x00:0x20] != 0xb53574ab) {\n                                                                                                            if (memory[0x00:0x20] != 0xa1bb138e) {\n                                                                                                                if (memory[0x00:0x20] != 0x674b392e) {\n                                                                                                                    if (memory[0x00:0x20] != 0x0410bf99) {\n                                                                                                                        if (memory[0x00:0x20] != 0x1952ddbd) {\n                                                                                                                            if (memory[0x00:0x20] != 0xb993ed4b) { revert(memory[0x00:0x00]); }\n                                                                                                                        \n                                                                                                                            if (msg.value) { revert(memory[0x00:0x00]); }\n                                                                                                                        \n                                                                                                                            var var0 = msg.data[0x04:0x24];\n                                                                                                                        \n                                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                        \n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                                                                            var temp0 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                            memory[0xc0:0xe0] = temp0;\n                                                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x06];\n                                                                                                                            return memory[0x00:0x20];\n                                                                                                                        } else if (!msg.value) {\n                                                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                                                        \n                                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                        \n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                                                                            var temp1 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                            memory[0xc0:0xe0] = temp1;\n                                                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x05];\n                                                                                                                            return memory[0x00:0x20];\n                                                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                                                    } else if (!msg.value) {\n                                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                                    \n                                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                    \n                                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                                                                        var temp2 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                        memory[0xc0:0xe0] = temp2;\n                                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x04];\n                                                                                                                        return memory[0x00:0x20];\n                                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                                } else if (!msg.value) {\n                                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                                \n                                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                \n                                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                                                                    var temp3 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                    memory[0xc0:0xe0] = temp3;\n                                                                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                                                                    return memory[0x00:0x20];\n                                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                                            } else if (!msg.value) {\n                                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                                            \n                                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                            \n                                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                memory[0xc0:0xe0] = 0x0a;\n                                                                                                                var temp4 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                memory[0xc0:0xe0] = temp4;\n                                                                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                                                                return memory[0x00:0x20];\n                                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                                        } else if (!msg.value) {\n                                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                                        \n                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                        \n                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                                                            var temp5 = keccak256(memory[0xc0:0x0100]);\n                                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                            memory[0xc0:0xe0] = temp5;\n                                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                                                                                            return memory[0x00:0x20];\n                                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                                    } else if (!msg.value) {\n                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                    \n                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                    \n                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                                                        var temp6 = keccak256(memory[0xc0:0x0100]);\n                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                        memory[0xc0:0xe0] = temp6;\n                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                                                        return memory[0x00:0x20];\n                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                } else if (!msg.value) {\n                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                \n                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                \n                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                    memory[0xc0:0xe0] = 0x09;\n                                                                                                    var temp7 = keccak256(memory[0xc0:0x0100]);\n                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                    memory[0xc0:0xe0] = temp7;\n                                                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                                                    return memory[0x00:0x20];\n                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                            } else if (!msg.value) {\n                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                            \n                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                            \n                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                memory[0xc0:0xe0] = 0x09;\n                                                                                                var temp8 = keccak256(memory[0xc0:0x0100]);\n                                                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                memory[0xc0:0xe0] = temp8;\n                                                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                                                                                return memory[0x00:0x20];\n                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                        } else if (!msg.value) {\n                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                        \n                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                        \n                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                            memory[0xc0:0xe0] = 0x09;\n                                                                                            var temp9 = keccak256(memory[0xc0:0x0100]);\n                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                            memory[0xc0:0xe0] = temp9;\n                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                                            return memory[0x00:0x20];\n                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                    } else if (!msg.value) {\n                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                    \n                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                    \n                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                        memory[0xc0:0xe0] = 0x08;\n                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                        return memory[0x00:0x20];\n                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                } else if (!msg.value) {\n                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                \n                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                \n                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                    return memory[0x00:0x20];\n                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                            } else if (!msg.value) {\n                                                                                memory[0x00:0x20] = storage[0x04];\n                                                                                return memory[0x00:0x20];\n                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                        } else if (!msg.value) {\n                                                                            var0 = 0x01;\n                                                                            memory[0xc0:0xe0] = var0;\n                                                                            var var1 = keccak256(memory[0xc0:0xe0]);\n                                                                            var var2 = 0x0180;\n                                                                            var temp10 = storage[var1] + 0x20;\n                                                                            var var3 = temp10;\n                                                                            var var4 = 0x0120;\n                                                                            memory[var4:var4 + 0x20] = 0x00;\n                                                                            var var5 = 0x02;\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_227E; }\n                                                                        \n                                                                        label_2282:\n                                                                            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                            var temp11 = var4;\n                                                                            var temp12 = memory[temp11:temp11 + 0x20] + 0x01;\n                                                                            memory[temp11:temp11 + 0x20] = temp12;\n                                                                        \n                                                                            if (var5 == temp12) { goto label_22A4; }\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_2282; }\n                                                                        \n                                                                        label_227E:\n                                                                        \n                                                                        label_22A4:\n                                                                            var temp13 = memory[0x0180:0x01a0];\n                                                                            var temp14 = (temp13 + 0x1f) - temp13 - 0x01 % 0x20 - temp13;\n                                                                            memory[temp13 + 0x01a0:temp13 + 0x01a0 + temp14] = msg.data[msg.data.length:msg.data.length + temp14];\n                                                                            memory[0x0160:0x0180] = 0x20;\n                                                                            var temp15 = memory[0x0180:0x01a0] + 0x40;\n                                                                            return memory[0x0160:0x0160 + (temp15 + 0x1f) - temp15 - 0x01 % 0x20];\n                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                    } else if (!msg.value) {\n                                                                        var0 = 0x00;\n                                                                        memory[0xc0:0xe0] = var0;\n                                                                        var1 = keccak256(memory[0xc0:0xe0]);\n                                                                        var2 = 0x0180;\n                                                                        var temp16 = storage[var1] + 0x20;\n                                                                        var3 = temp16;\n                                                                        var4 = 0x0120;\n                                                                        memory[var4:var4 + 0x20] = 0x00;\n                                                                        var5 = 0x03;\n                                                                    \n                                                                        if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_21CA; }\n                                                                    \n                                                                    label_21CE:\n                                                                        memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                        var temp17 = var4;\n                                                                        var temp18 = memory[temp17:temp17 + 0x20] + 0x01;\n                                                                        memory[temp17:temp17 + 0x20] = temp18;\n                                                                    \n                                                                        if (var5 == temp18) { goto label_21F0; }\n                                                                    \n                                                                        if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_21CE; }\n                                                                    \n                                                                    label_21CA:\n                                                                    \n                                                                    label_21F0:\n                                                                        var temp19 = memory[0x0180:0x01a0];\n                                                                        var temp20 = (temp19 + 0x1f) - temp19 - 0x01 % 0x20 - temp19;\n                                                                        memory[temp19 + 0x01a0:temp19 + 0x01a0 + temp20] = msg.data[msg.data.length:msg.data.length + temp20];\n                                                                        memory[0x0160:0x0180] = 0x20;\n                                                                        var temp21 = memory[0x0180:0x01a0] + 0x40;\n                                                                        return memory[0x0160:0x0160 + (temp21 + 0x1f) - temp21 - 0x01 % 0x20];\n                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                } else if (!msg.value) {\n                                                                    var0 = msg.data[0x04:0x24];\n                                                                \n                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var0 = block.timestamp;\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp22 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp22;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    var temp23 = storage[keccak256(memory[0xc0:0xe0]) + 0x05];\n                                                                    var1 = temp23;\n                                                                    var2 = 0x03f480;\n                                                                \n                                                                    if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    if (var1 + var2 > var0) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp24 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp24;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                \n                                                                    if (storage[keccak256(memory[0xc0:0xe0]) + 0x06]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp25 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp25;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                \n                                                                    if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp26 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp26;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp27 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp27;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp28 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp28;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                    memory[0x01a0:0x01c0] = storage[0x03];\n                                                                \n                                                                    if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                                        var0 = memory[0x01a0:0x01c0];\n                                                                        var1 = memory[0x0180:0x01a0];\n                                                                    \n                                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp38 = var0 - var1;\n                                                                        var0 = temp38;\n                                                                        var temp39 = memory[0x0160:0x0180];\n                                                                        var1 = temp39;\n                                                                        var2 = var0 * var1;\n                                                                    \n                                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var0 = var2;\n                                                                        var1 = storage[0x03];\n                                                                        var2 = var1;\n                                                                    \n                                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0240:0x0260] = var0 / var2;\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = storage[0x0c];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0240:0x0260];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        var4 = memory[0x0180:0x01a0];\n                                                                        var5 = var4;\n                                                                    \n                                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp40 = var3 / var5;\n                                                                        var3 = temp40;\n                                                                        var temp41 = var2;\n                                                                        var4 = temp41 * var3;\n                                                                    \n                                                                        if (!((var4 / temp41 == var3) | !temp41)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var2 = var4;\n                                                                        var temp42 = var1;\n                                                                    \n                                                                        if (temp42 + var2 < temp42) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        var0 = memory[0x0160:0x0180];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = var2;\n                                                                    \n                                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp43 = var1 / var3;\n                                                                        var1 = temp43;\n                                                                        var temp44 = var0;\n                                                                        var2 = temp44 * var1;\n                                                                    \n                                                                        if (!((var2 / temp44 == var1) | !temp44)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0260:0x0280] = var2;\n                                                                        log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                        memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                                        log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], memory[0x0140:0x0160]]);\n                                                                        goto label_20DC;\n                                                                    } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var temp29 = storage[var0];\n                                                                        var1 = temp29;\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                    \n                                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        memory[0x01c0:0x01e0] = memory[0x0160:0x0180];\n                                                                        log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                    \n                                                                    label_20DC:\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x0160:0x0180];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                        memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                                        var4 = memory[0x02e0:0x0300];\n                                                                        var5 = 0x06;\n                                                                        // Unhandled termination\n                                                                    } else {\n                                                                        var0 = memory[0x0180:0x01a0];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                    \n                                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp30 = var0 - var1;\n                                                                        var0 = temp30;\n                                                                        var temp31 = memory[0x0160:0x0180];\n                                                                        var1 = temp31;\n                                                                        var2 = var0 * var1;\n                                                                    \n                                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var0 = var2;\n                                                                        var1 = storage[0x03];\n                                                                        var2 = var1;\n                                                                    \n                                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x01e0:0x0200] = var0 / var2;\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = storage[0x0c];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var temp32 = storage[var0];\n                                                                        var1 = temp32;\n                                                                        var2 = memory[0x01e0:0x0200];\n                                                                    \n                                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        var4 = memory[0x0180:0x01a0];\n                                                                        var5 = var4;\n                                                                    \n                                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp33 = var3 / var5;\n                                                                        var3 = temp33;\n                                                                        var temp34 = var2;\n                                                                        var4 = temp34 * var3;\n                                                                    \n                                                                        if (!((var4 / temp34 == var3) | !temp34)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var2 = var4;\n                                                                        var temp35 = var1;\n                                                                    \n                                                                        if (temp35 + var2 < temp35) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        var0 = memory[0x0160:0x0180];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = var2;\n                                                                    \n                                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp36 = var1 / var3;\n                                                                        var1 = temp36;\n                                                                        var temp37 = var0;\n                                                                        var2 = temp37 * var1;\n                                                                    \n                                                                        if (!((var2 / temp37 == var1) | !temp37)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0200:0x0220] = var2;\n                                                                        log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                        memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                                        log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x04:0x24], storage[0x0c]]);\n                                                                        goto label_20DC;\n                                                                    }\n                                                                } else { revert(memory[0x00:0x00]); }\n                                                            } else if (!msg.value) {\n                                                                var0 = msg.data[0x24:0x44];\n                                                            \n                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var0 = msg.data[0x44:0x64];\n                                                            \n                                                                if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                if (msg.sender != storage[0x0d]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                memory[0xc0:0xe0] = 0x0a;\n                                                                var temp45 = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                memory[0xc0:0xe0] = temp45;\n                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                memory[0xc0:0xe0] = 0x0a;\n                                                                var temp46 = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                memory[0xc0:0xe0] = temp46;\n                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                memory[0xc0:0xe0] = 0x0a;\n                                                                var temp47 = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                memory[0xc0:0xe0] = temp47;\n                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                memory[0x01a0:0x01c0] = storage[0x03];\n                                                            \n                                                                if (msg.data[0x44:0x64] != 0x01) {\n                                                                label_1A97:\n                                                                \n                                                                    if (msg.data[0x44:0x64]) {\n                                                                    label_1AFD:\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x0160:0x0180];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                        memory[0x02e0:0x0300] = memory[0x0140:0x0160];\n                                                                        var4 = memory[0x02e0:0x0300];\n                                                                        var5 = 0x06;\n                                                                        // Unhandled termination\n                                                                    } else {\n                                                                        memory[0xe0:0x0100] = storage[0x0c];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var temp48 = storage[var0];\n                                                                        var1 = temp48;\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        goto label_1AFD;\n                                                                    }\n                                                                } else if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                                    var0 = memory[0x01a0:0x01c0];\n                                                                    var1 = memory[0x0180:0x01a0];\n                                                                \n                                                                    if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp57 = var0 - var1;\n                                                                    var0 = temp57;\n                                                                    var temp58 = memory[0x0140:0x0160];\n                                                                    var1 = temp58;\n                                                                    var2 = var0 * var1;\n                                                                \n                                                                    if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var0 = var2;\n                                                                    var1 = storage[0x03];\n                                                                    var2 = var1;\n                                                                \n                                                                    if (!var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0x0240:0x0260] = var0 / var2;\n                                                                    memory[0xe0:0x0100] = storage[0x0c];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0240:0x0260];\n                                                                \n                                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 - var2;\n                                                                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0140:0x0160];\n                                                                    var3 = memory[0x01a0:0x01c0];\n                                                                    var4 = memory[0x0180:0x01a0];\n                                                                    var5 = var4;\n                                                                \n                                                                    if (!var5) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp59 = var3 / var5;\n                                                                    var3 = temp59;\n                                                                    var temp60 = var2;\n                                                                    var4 = temp60 * var3;\n                                                                \n                                                                    if (!((var4 / temp60 == var3) | !temp60)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var2 = var4;\n                                                                    var temp61 = var1;\n                                                                \n                                                                    if (temp61 + var2 < temp61) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 + var2;\n                                                                    var0 = memory[0x0140:0x0160];\n                                                                    var1 = memory[0x01a0:0x01c0];\n                                                                    var2 = memory[0x0180:0x01a0];\n                                                                    var3 = var2;\n                                                                \n                                                                    if (!var3) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp62 = var1 / var3;\n                                                                    var1 = temp62;\n                                                                    var temp63 = var0;\n                                                                    var2 = temp63 * var1;\n                                                                \n                                                                    if (!((var2 / temp63 == var1) | !temp63)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0x0260:0x0280] = var2;\n                                                                    log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x24:0x44], memory[0x0160:0x0180]]);\n                                                                    memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                                    log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], memory[0x0160:0x0180]]);\n                                                                    goto label_1A96;\n                                                                } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                                    memory[0xe0:0x0100] = msg.sender;\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0140:0x0160];\n                                                                \n                                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 - var2;\n                                                                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0140:0x0160];\n                                                                \n                                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 - var2;\n                                                                    memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                                                    log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x24:0x44], memory[0x0160:0x0180]]);\n                                                                    goto label_1A97;\n                                                                } else {\n                                                                    var0 = memory[0x0180:0x01a0];\n                                                                    var1 = memory[0x01a0:0x01c0];\n                                                                \n                                                                    if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp49 = var0 - var1;\n                                                                    var0 = temp49;\n                                                                    var temp50 = memory[0x0140:0x0160];\n                                                                    var1 = temp50;\n                                                                    var2 = var0 * var1;\n                                                                \n                                                                    if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var0 = var2;\n                                                                    var1 = storage[0x03];\n                                                                    var2 = var1;\n                                                                \n                                                                    if (!var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0x01e0:0x0200] = var0 / var2;\n                                                                    memory[0xe0:0x0100] = msg.sender;\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0140:0x0160];\n                                                                \n                                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 - var2;\n                                                                    memory[0xe0:0x0100] = storage[0x0c];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var temp51 = storage[var0];\n                                                                    var1 = temp51;\n                                                                    var2 = memory[0x01e0:0x0200];\n                                                                \n                                                                    if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 + var2;\n                                                                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0140:0x0160];\n                                                                    var3 = memory[0x01a0:0x01c0];\n                                                                    var4 = memory[0x0180:0x01a0];\n                                                                    var5 = var4;\n                                                                \n                                                                    if (!var5) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp52 = var3 / var5;\n                                                                    var3 = temp52;\n                                                                    var temp53 = var2;\n                                                                    var4 = temp53 * var3;\n                                                                \n                                                                    if (!((var4 / temp53 == var3) | !temp53)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var2 = var4;\n                                                                    var temp54 = var1;\n                                                                \n                                                                    if (temp54 + var2 < temp54) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 + var2;\n                                                                    var0 = memory[0x0140:0x0160];\n                                                                    var1 = memory[0x01a0:0x01c0];\n                                                                    var2 = memory[0x0180:0x01a0];\n                                                                    var3 = var2;\n                                                                \n                                                                    if (!var3) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp55 = var1 / var3;\n                                                                    var1 = temp55;\n                                                                    var temp56 = var0;\n                                                                    var2 = temp56 * var1;\n                                                                \n                                                                    if (!((var2 / temp56 == var1) | !temp56)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0x0200:0x0220] = var2;\n                                                                    log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0160:0x0180]]);\n                                                                    memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                                    log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x24:0x44], storage[0x0c]]);\n                                                                \n                                                                label_1A96:\n                                                                    goto label_1A97;\n                                                                }\n                                                            } else { revert(memory[0x00:0x00]); }\n                                                        } else if (!msg.value) {\n                                                            var0 = msg.data[0x04:0x24];\n                                                        \n                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x07;\n                                                            var temp64 = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                            memory[0xc0:0xe0] = temp64;\n                                                            storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                                            memory[0x0140:0x0160] = msg.data[0x24:0x44];\n                                                            log(memory[0x0140:0x0160], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, msg.data[0x04:0x24]]);\n                                                            memory[0x00:0x20] = 0x01;\n                                                            return memory[0x00:0x20];\n                                                        } else { revert(memory[0x00:0x00]); }\n                                                    } else if (!msg.value) {\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        var temp65 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp65;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                    \n                                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x0140:0x0160] = storage[0x0d];\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        var temp66 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp66;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        var temp67 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp67;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0])];\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var temp68 = storage[var0];\n                                                        var1 = temp68;\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 + var2;\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x08;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        var temp69 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp69;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        storage[keccak256(memory[0xc0:0xe0]) + 0x06] = 0x01;\n                                                        memory[0x01a0:0x01c0] = memory[0x0160:0x0180];\n                                                        log(memory[0x01a0:0x01c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, memory[0x0140:0x0160]]);\n                                                        memory[0x00:0x20] = 0x01;\n                                                        return memory[0x00:0x20];\n                                                    } else { revert(memory[0x00:0x00]); }\n                                                } else if (!msg.value) {\n                                                    memory[0xe0:0x0100] = msg.sender;\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var temp70 = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = temp70;\n                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                \n                                                    if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                \n                                                    memory[0xe0:0x0100] = msg.sender;\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var temp71 = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = temp71;\n                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0])];\n                                                    memory[0xe0:0x0100] = msg.sender;\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var temp72 = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = temp72;\n                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                    memory[0xe0:0x0100] = msg.sender;\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var temp73 = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = temp73;\n                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                    memory[0x01a0:0x01c0] = storage[0x03];\n                                                \n                                                    if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                        var0 = memory[0x01a0:0x01c0];\n                                                        var1 = memory[0x0180:0x01a0];\n                                                    \n                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp83 = var0 - var1;\n                                                        var0 = temp83;\n                                                        var temp84 = memory[0x0160:0x0180];\n                                                        var1 = temp84;\n                                                        var2 = var0 * var1;\n                                                    \n                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var0 = var2;\n                                                        var1 = storage[0x03];\n                                                        var2 = var1;\n                                                    \n                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x0240:0x0260] = var0 / var2;\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = storage[0x0c];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0240:0x0260];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                        var3 = memory[0x01a0:0x01c0];\n                                                        var4 = memory[0x0180:0x01a0];\n                                                        var5 = var4;\n                                                    \n                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp85 = var3 / var5;\n                                                        var3 = temp85;\n                                                        var temp86 = var2;\n                                                        var4 = temp86 * var3;\n                                                    \n                                                        if (!((var4 / temp86 == var3) | !temp86)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var2 = var4;\n                                                        var temp87 = var1;\n                                                    \n                                                        if (temp87 + var2 < temp87) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 + var2;\n                                                        var0 = memory[0x0160:0x0180];\n                                                        var1 = memory[0x01a0:0x01c0];\n                                                        var2 = memory[0x0180:0x01a0];\n                                                        var3 = var2;\n                                                    \n                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp88 = var1 / var3;\n                                                        var1 = temp88;\n                                                        var temp89 = var0;\n                                                        var2 = temp89 * var1;\n                                                    \n                                                        if (!((var2 / temp89 == var1) | !temp89)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x0260:0x0280] = var2;\n                                                        log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                        memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                        log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], memory[0x0140:0x0160]]);\n                                                        var0 = memory[0x0140:0x0160];\n                                                        var1 = memory[0x0160:0x0180];\n                                                        var2 = memory[0x0180:0x01a0];\n                                                        var3 = memory[0x01a0:0x01c0];\n                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                        memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                        var4 = memory[0x02e0:0x0300];\n                                                        var5 = 0x06;\n                                                        // Unhandled termination\n                                                    } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var temp74 = storage[var0];\n                                                        var1 = temp74;\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 + var2;\n                                                        memory[0x01c0:0x01e0] = memory[0x0160:0x0180];\n                                                        log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                        var0 = memory[0x0140:0x0160];\n                                                        var1 = memory[0x0160:0x0180];\n                                                        var2 = memory[0x0180:0x01a0];\n                                                        var3 = memory[0x01a0:0x01c0];\n                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                        memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                        var4 = memory[0x02e0:0x0300];\n                                                        var5 = 0x06;\n                                                        // Unhandled termination\n                                                    } else {\n                                                        var0 = memory[0x0180:0x01a0];\n                                                        var1 = memory[0x01a0:0x01c0];\n                                                    \n                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp75 = var0 - var1;\n                                                        var0 = temp75;\n                                                        var temp76 = memory[0x0160:0x0180];\n                                                        var1 = temp76;\n                                                        var2 = var0 * var1;\n                                                    \n                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var0 = var2;\n                                                        var1 = storage[0x03];\n                                                        var2 = var1;\n                                                    \n                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x01e0:0x0200] = var0 / var2;\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = storage[0x0c];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var temp77 = storage[var0];\n                                                        var1 = temp77;\n                                                        var2 = memory[0x01e0:0x0200];\n                                                    \n                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 + var2;\n                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                        var3 = memory[0x01a0:0x01c0];\n                                                        var4 = memory[0x0180:0x01a0];\n                                                        var5 = var4;\n                                                    \n                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp78 = var3 / var5;\n                                                        var3 = temp78;\n                                                        var temp79 = var2;\n                                                        var4 = temp79 * var3;\n                                                    \n                                                        if (!((var4 / temp79 == var3) | !temp79)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var2 = var4;\n                                                        var temp80 = var1;\n                                                    \n                                                        if (temp80 + var2 < temp80) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 + var2;\n                                                        var0 = memory[0x0160:0x0180];\n                                                        var1 = memory[0x01a0:0x01c0];\n                                                        var2 = memory[0x0180:0x01a0];\n                                                        var3 = var2;\n                                                    \n                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp81 = var1 / var3;\n                                                        var1 = temp81;\n                                                        var temp82 = var0;\n                                                        var2 = temp82 * var1;\n                                                    \n                                                        if (!((var2 / temp82 == var1) | !temp82)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x0200:0x0220] = var2;\n                                                        log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                        memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                        log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, storage[0x0c]]);\n                                                        var0 = memory[0x0140:0x0160];\n                                                        var1 = memory[0x0160:0x0180];\n                                                        var2 = memory[0x0180:0x01a0];\n                                                        var3 = memory[0x01a0:0x01c0];\n                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                        memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                        var4 = memory[0x02e0:0x0300];\n                                                        var5 = 0x06;\n                                                        // Unhandled termination\n                                                    }\n                                                } else { revert(memory[0x00:0x00]); }\n                                            } else if (!msg.value) {\n                                                var0 = msg.data[0x04:0x24];\n                                            \n                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                            \n                                                var0 = msg.data[0x24:0x44];\n                                            \n                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = 0x06;\n                                                var0 = storage[keccak256(memory[0xc0:0x0100])];\n                                                var1 = msg.data[0x44:0x64];\n                                            \n                                                if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = 0x08;\n                                            \n                                                if (storage[keccak256(memory[0xc0:0x0100])] > var0 - var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = 0x06;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = msg.data[0x44:0x64];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                memory[0xc0:0xe0] = 0x06;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var temp90 = storage[var0];\n                                                var1 = temp90;\n                                                var2 = msg.data[0x44:0x64];\n                                            \n                                                if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 + var2;\n                                                var0 = msg.data[0x44:0x64];\n                                                var1 = 0x64;\n                                                var2 = var1;\n                                            \n                                                if (!var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0x0140:0x0160] = var0 / var2;\n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = 0x07;\n                                                var temp91 = keccak256(memory[0xc0:0x0100]);\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = temp91;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = msg.data[0x44:0x64];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0x0160:0x0180] = msg.data[0x44:0x64];\n                                                log(memory[0x0160:0x0180], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x04:0x24], msg.data[0x24:0x44]]);\n                                                var0 = memory[0x0140:0x0160];\n                                                var1 = memory[0x0160:0x0180];\n                                                memory[0x01a0:0x01c0] = 0x42966c68;\n                                                memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                                var2 = memory[0x01c0:0x01e0];\n                                                var3 = 0x06;\n                                                // Unhandled termination\n                                            } else { revert(memory[0x00:0x00]); }\n                                        } else if (!msg.value) {\n                                            var0 = msg.data[0x04:0x24];\n                                        \n                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x0140:0x0160] = 0x08c379a0;\n                                            memory[0x0160:0x0180] = 0x20;\n                                            memory[0x0180:0x01a0] = 0x1e;\n                                            memory[0x01a0:0x01c0] = 0x4e6f7420656e6f6f7567682062616c616e636520696e206163636f756e740000;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x06;\n                                            var0 = storage[keccak256(memory[0xc0:0x0100])];\n                                            var1 = msg.data[0x24:0x44];\n                                        \n                                            if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x08;\n                                        \n                                            if (storage[keccak256(memory[0xc0:0x0100])] > var0 - var1) { revert(memory[0x015c:0x01e0]); }\n                                        \n                                            var0 = msg.data[0x24:0x44];\n                                            var1 = 0x64;\n                                            var2 = var1;\n                                        \n                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x01e0:0x0200] = var0 / var2;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x06;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = msg.data[0x24:0x44];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = 0x06;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var temp92 = storage[var0];\n                                            var1 = temp92;\n                                            var2 = msg.data[0x24:0x44];\n                                        \n                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 + var2;\n                                            memory[0x0200:0x0220] = msg.data[0x24:0x44];\n                                            log(memory[0x0200:0x0220], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, msg.data[0x04:0x24]]);\n                                            var0 = memory[0x0140:0x0160];\n                                            var1 = memory[0x0160:0x0180];\n                                            var2 = memory[0x0180:0x01a0];\n                                            var3 = memory[0x01a0:0x01c0];\n                                            var4 = memory[0x01c0:0x01e0];\n                                            var5 = memory[0x01e0:0x0200];\n                                            var var6 = memory[0x0200:0x0220];\n                                            memory[0x0240:0x0260] = 0x42966c68;\n                                            memory[0x0260:0x0280] = memory[0x01e0:0x0200];\n                                            var var7 = memory[0x0260:0x0280];\n                                            var var8 = 0x06;\n                                            // Unhandled termination\n                                        } else { revert(memory[0x00:0x00]); }\n                                    } else if (!msg.value) {\n                                        var0 = msg.data[0x24:0x44];\n                                    \n                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0x0140:0x0160] = 0x08c379a0;\n                                        memory[0x0160:0x0180] = 0x20;\n                                        memory[0x0180:0x01a0] = 0x1d;\n                                        memory[0x01a0:0x01c0] = 0x4e6f7420656e6f7567682062616c616e636520696e206163636f756e74000000;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x06;\n                                    \n                                        if (storage[keccak256(memory[0xc0:0x0100])] < msg.data[0x44:0x64]) { revert(memory[0x015c:0x01e0]); }\n                                    \n                                        memory[0x01e0:0x0200] = 0x08c379a0;\n                                        memory[0x0200:0x0220] = 0x20;\n                                        memory[0x0220:0x0240] = 0x1f;\n                                        memory[0x0240:0x0260] = 0x416c72656164792068617665206461746120696e2074686520776f726b496400;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x0a;\n                                        var temp93 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp93;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    \n                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x02]) { revert(memory[0x01fc:0x0280]); }\n                                    \n                                        var0 = 0x015180;\n                                        var temp94 = msg.data[0x64:0x84];\n                                        var1 = temp94;\n                                        var2 = var0 * var1;\n                                    \n                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                    \n                                        var temp95 = var2;\n                                        var0 = temp95;\n                                        var1 = block.timestamp;\n                                    \n                                        if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0x0280:0x02a0] = var0 + var1;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x0a;\n                                        var temp96 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp96;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                        var temp97 = keccak256(memory[0xc0:0xe0]);\n                                        storage[temp97] = msg.data[0x24:0x44];\n                                        storage[temp97 + 0x01] = msg.sender;\n                                        storage[temp97 + 0x02] = msg.data[0x44:0x64];\n                                        storage[temp97 + 0x03] = storage[0x03];\n                                        storage[temp97 + 0x04] = block.timestamp;\n                                        storage[temp97 + 0x05] = memory[0x0280:0x02a0];\n                                        storage[temp97 + 0x06] = 0x00;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x08;\n                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                        var temp98 = storage[var0];\n                                        var1 = temp98;\n                                        var2 = msg.data[0x44:0x64];\n                                    \n                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                    \n                                        storage[var0] = var1 + var2;\n                                        memory[0x00:0x20] = 0x01;\n                                        return memory[0x00:0x20];\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x09;\n                                    var temp99 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                    memory[0xc0:0xe0] = temp99;\n                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                \n                                    if (storage[keccak256(memory[0xc0:0xe0]) + 0x01] <= 0x00) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x09;\n                                    var temp100 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                    memory[0xc0:0xe0] = temp100;\n                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x09;\n                                    var temp101 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                    memory[0xc0:0xe0] = temp101;\n                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                    var temp102 = memory[0x0160:0x0180];\n                                    var0 = temp102;\n                                    var1 = 0x0708;\n                                \n                                    if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = block.timestamp < var0 + var1;\n                                    var temp103 = memory[0x0160:0x0180];\n                                    var1 = temp103;\n                                    var2 = 0x012c;\n                                \n                                    if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                \n                                    if (!((block.timestamp > var1 + var2) & var0)) {\n                                        var temp104 = memory[0x0160:0x0180];\n                                        var0 = temp104;\n                                        var1 = 0x0e10;\n                                    \n                                        if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                                    \n                                        var0 = block.timestamp < var0 + var1;\n                                        var temp105 = memory[0x0160:0x0180];\n                                        var1 = temp105;\n                                        var2 = 0x0708;\n                                    \n                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                    \n                                        if (!((block.timestamp > var1 + var2) & var0)) {\n                                            var temp106 = memory[0x0160:0x0180];\n                                            var0 = temp106;\n                                            var1 = 0x0e10;\n                                        \n                                            if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                                        \n                                            if (block.timestamp <= var0 + var1) {\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x09;\n                                                var temp107 = keccak256(memory[0xc0:0x0100]);\n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = temp107;\n                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                var temp108 = keccak256(memory[0xc0:0xe0]);\n                                                storage[temp108] = msg.sender;\n                                                storage[temp108 + 0x01] = 0x00;\n                                                storage[temp108 + 0x02] = 0x00;\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x08;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = memory[0x0140:0x0160];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0x00:0x20] = 0x01;\n                                                return memory[0x00:0x20];\n                                            } else {\n                                                var temp109 = memory[0x0140:0x0160];\n                                                var0 = temp109;\n                                                var1 = 0x00;\n                                                var2 = var0 * var1;\n                                            \n                                                if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0x0180:0x01a0] = var2;\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x06;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var temp110 = storage[var0];\n                                                var1 = temp110;\n                                                var2 = memory[0x0180:0x01a0];\n                                            \n                                                if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 + var2;\n                                                memory[0xe0:0x0100] = storage[0x0c];\n                                                memory[0xc0:0xe0] = 0x06;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = memory[0x0180:0x01a0];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0x01a0:0x01c0] = memory[0x0180:0x01a0];\n                                                log(memory[0x01a0:0x01c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], msg.sender]);\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x09;\n                                                var temp111 = keccak256(memory[0xc0:0x0100]);\n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = temp111;\n                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                var temp112 = keccak256(memory[0xc0:0xe0]);\n                                                storage[temp112] = msg.sender;\n                                                storage[temp112 + 0x01] = 0x00;\n                                                storage[temp112 + 0x02] = 0x00;\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x08;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = memory[0x0140:0x0160];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0x00:0x20] = 0x01;\n                                                return memory[0x00:0x20];\n                                            }\n                                        } else {\n                                            var temp113 = memory[0x0140:0x0160];\n                                            var0 = temp113;\n                                            var1 = 0x00;\n                                            var2 = var0 * var1;\n                                        \n                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x01c0:0x01e0] = var2;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x06;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var temp114 = storage[var0];\n                                            var1 = temp114;\n                                            var2 = memory[0x01c0:0x01e0];\n                                        \n                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 + var2;\n                                            memory[0xe0:0x0100] = storage[0x0c];\n                                            memory[0xc0:0xe0] = 0x06;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = memory[0x01c0:0x01e0];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0x01e0:0x0200] = memory[0x01c0:0x01e0];\n                                            log(memory[0x01e0:0x0200], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], msg.sender]);\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x09;\n                                            var temp115 = keccak256(memory[0xc0:0x0100]);\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = temp115;\n                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                            var temp116 = keccak256(memory[0xc0:0xe0]);\n                                            storage[temp116] = msg.sender;\n                                            storage[temp116 + 0x01] = 0x00;\n                                            storage[temp116 + 0x02] = 0x00;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x08;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = memory[0x0140:0x0160];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0x00:0x20] = 0x01;\n                                            return memory[0x00:0x20];\n                                        }\n                                    } else {\n                                        var temp117 = memory[0x0140:0x0160];\n                                        var0 = temp117;\n                                        var1 = 0x00;\n                                        var2 = var0 * var1;\n                                    \n                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0x0200:0x0220] = var2;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x06;\n                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                        var temp118 = storage[var0];\n                                        var1 = temp118;\n                                        var2 = memory[0x0200:0x0220];\n                                    \n                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                    \n                                        storage[var0] = var1 + var2;\n                                        memory[0xe0:0x0100] = storage[0x0c];\n                                        memory[0xc0:0xe0] = 0x06;\n                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                        var1 = storage[var0];\n                                        var2 = memory[0x0200:0x0220];\n                                    \n                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                    \n                                        storage[var0] = var1 - var2;\n                                        memory[0x0220:0x0240] = memory[0x0200:0x0220];\n                                        log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], msg.sender]);\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x09;\n                                        var temp119 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp119;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                        var temp120 = keccak256(memory[0xc0:0xe0]);\n                                        storage[temp120] = msg.sender;\n                                        storage[temp120 + 0x01] = 0x00;\n                                        storage[temp120 + 0x02] = 0x00;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x08;\n                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                        var1 = storage[var0];\n                                        var2 = memory[0x0140:0x0160];\n                                    \n                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                    \n                                        storage[var0] = var1 - var2;\n                                        memory[0x00:0x20] = 0x01;\n                                        return memory[0x00:0x20];\n                                    }\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                memory[0xe0:0x0100] = msg.sender;\n                                memory[0xc0:0xe0] = 0x06;\n                            \n                                if (storage[keccak256(memory[0xc0:0x0100])] < msg.data[0x04:0x24]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = msg.sender;\n                                memory[0xc0:0xe0] = 0x09;\n                                var temp121 = keccak256(memory[0xc0:0x0100]);\n                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                memory[0xc0:0xe0] = temp121;\n                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                var temp122 = keccak256(memory[0xc0:0xe0]);\n                                storage[temp122] = msg.sender;\n                                storage[temp122 + 0x01] = msg.data[0x04:0x24];\n                                storage[temp122 + 0x02] = block.timestamp;\n                                memory[0xe0:0x0100] = msg.sender;\n                                memory[0xc0:0xe0] = 0x08;\n                                var0 = keccak256(memory[0xc0:0x0100]);\n                                var temp123 = storage[var0];\n                                var1 = temp123;\n                                var2 = msg.data[0x04:0x24];\n                            \n                                if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                            \n                                storage[var0] = var1 + var2;\n                                memory[0x00:0x20] = 0x01;\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            var0 = msg.data[0x04:0x24];\n                        \n                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = msg.data[0x24:0x44];\n                        \n                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                            memory[0xc0:0xe0] = 0x07;\n                            var temp124 = keccak256(memory[0xc0:0x0100]);\n                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                            memory[0xc0:0xe0] = temp124;\n                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        memory[0x00:0x20] = storage[0x05];\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0140:0x0160] = 0x08c379a0;\n                    memory[0x0160:0x0180] = 0x20;\n                    memory[0x0180:0x01a0] = 0x17;\n                    memory[0x01a0:0x01c0] = 0x4e6f742074686520636f72726563742041646472657373000000000000000000;\n                \n                    if (msg.sender != storage[0x0e]) { revert(memory[0x015c:0x01e0]); }\n                \n                    storage[0x05] = msg.data[0x04:0x24];\n                    memory[0x00:0x20] = 0x01;\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                memory[0x0140:0x0160] = 0x08c379a0;\n                memory[0x0160:0x0180] = 0x20;\n                memory[0x0180:0x01a0] = 0x17;\n                memory[0x01a0:0x01c0] = 0x4e6f742074686520636f72726563742041646472657373000000000000000000;\n            \n                if (msg.sender != storage[0x0d]) { revert(memory[0x015c:0x01e0]); }\n            \n                storage[0x03] = msg.data[0x04:0x24];\n                memory[0x00:0x20] = 0x01;\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            memory[0x00:0x20] = storage[0x02];\n            return memory[0x00:0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] != 0x18160ddd) {\n            if (memory[0x00:0x20] != 0x6a054250) {\n                if (memory[0x00:0x20] != 0x97a2d0eb) {\n                    if (memory[0x00:0x20] != 0x77884378) {\n                        if (0x00) {\n                            memory[0x0160:0x0180] = var-1;\n                            memory[0x0140:0x0160] = var-2;\n                        \n                            if (storage[0x05] != 0x01) {\n                            label_0280:\n                                // Error: Could not resolve jump destination!\n                            } else if (storage[0x0b] ~ 0x00) {\n                                memory[0xe0:0x0100] = storage[0x0b];\n                                memory[0xc0:0xe0] = 0x06;\n                                var-2 = keccak256(memory[0xc0:0x0100]);\n                                var-1 = storage[var-2];\n                                var0 = memory[0x0140:0x0160];\n                            \n                                if (var-1 < var0) { revert(memory[0x00:0x00]); }\n                            \n                                storage[var-2] = var-1 - var0;\n                                memory[0x0180:0x01a0] = memory[0x0140:0x0160];\n                                log(memory[0x0180:0x01a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0b], 0x00]);\n                                goto label_0280;\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (0x00) {\n                            // Error: StackRead before write???\n                            var var-2;\n                            // Error: StackRead before write???\n                            var var-1;\n                            memory[0x0160:0x0180] = var-1;\n                            memory[0x0140:0x0160] = var-2;\n                            var-2 = memory[0x0140:0x0160];\n                            var-1 = memory[0x0160:0x0180];\n                            memory[0x01a0:0x01c0] = 0x9b1f9e74;\n                            memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                            var0 = memory[0x01c0:0x01e0];\n                            var1 = 0x06;\n                            // Unhandled termination\n                        } else if (memory[0x00:0x20] != 0xdd62ed3e) {\n                            if (memory[0x00:0x20] != 0x7b0472f0) {\n                                if (memory[0x00:0x20] != 0x939624ab) {\n                                    if (memory[0x00:0x20] != 0x49c662b8) {\n                                        if (memory[0x00:0x20] != 0xa9059cbb) {\n                                            if (memory[0x00:0x20] != 0x23b872dd) {\n                                                if (memory[0x00:0x20] != 0xa6f12e85) {\n                                                    if (memory[0x00:0x20] != 0x60dded11) {\n                                                        if (memory[0x00:0x20] != 0x095ea7b3) {\n                                                            if (memory[0x00:0x20] != 0x048e45ca) {\n                                                                if (memory[0x00:0x20] != 0xc8c01a55) {\n                                                                    if (memory[0x00:0x20] != 0x06fdde03) {\n                                                                        if (memory[0x00:0x20] != 0x95d89b41) {\n                                                                            if (memory[0x00:0x20] != 0x313ce567) {\n                                                                                if (memory[0x00:0x20] != 0x70a08231) {\n                                                                                    if (memory[0x00:0x20] != 0x9ddd7c21) {\n                                                                                        if (memory[0x00:0x20] != 0x421f8e14) {\n                                                                                            if (memory[0x00:0x20] != 0xe9562a6d) {\n                                                                                                if (memory[0x00:0x20] != 0xf94be3af) {\n                                                                                                    if (memory[0x00:0x20] != 0x8f33367a) {\n                                                                                                        if (memory[0x00:0x20] != 0xb53574ab) {\n                                                                                                            if (memory[0x00:0x20] != 0xa1bb138e) {\n                                                                                                                if (memory[0x00:0x20] != 0x674b392e) {\n                                                                                                                    if (memory[0x00:0x20] != 0x0410bf99) {\n                                                                                                                        if (memory[0x00:0x20] != 0x1952ddbd) {\n                                                                                                                            if (memory[0x00:0x20] != 0xb993ed4b) { revert(memory[0x00:0x00]); }\n                                                                                                                        \n                                                                                                                            if (msg.value) { revert(memory[0x00:0x00]); }\n                                                                                                                        \n                                                                                                                            var var0 = msg.data[0x04:0x24];\n                                                                                                                        \n                                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                        \n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                                                                            var temp0 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                            memory[0xc0:0xe0] = temp0;\n                                                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x06];\n                                                                                                                            return memory[0x00:0x20];\n                                                                                                                        } else if (!msg.value) {\n                                                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                                                        \n                                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                        \n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                                                                            var temp1 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                            memory[0xc0:0xe0] = temp1;\n                                                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x05];\n                                                                                                                            return memory[0x00:0x20];\n                                                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                                                    } else if (!msg.value) {\n                                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                                    \n                                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                    \n                                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                                                                        var temp2 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                        memory[0xc0:0xe0] = temp2;\n                                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x04];\n                                                                                                                        return memory[0x00:0x20];\n                                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                                } else if (!msg.value) {\n                                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                                \n                                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                \n                                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                                                                    var temp3 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                    memory[0xc0:0xe0] = temp3;\n                                                                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                                                                    return memory[0x00:0x20];\n                                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                                            } else if (!msg.value) {\n                                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                                            \n                                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                            \n                                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                memory[0xc0:0xe0] = 0x0a;\n                                                                                                                var temp4 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                memory[0xc0:0xe0] = temp4;\n                                                                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                                                                return memory[0x00:0x20];\n                                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                                        } else if (!msg.value) {\n                                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                                        \n                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                        \n                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                                                            var temp5 = keccak256(memory[0xc0:0x0100]);\n                                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                            memory[0xc0:0xe0] = temp5;\n                                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                                                                                            return memory[0x00:0x20];\n                                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                                    } else if (!msg.value) {\n                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                    \n                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                    \n                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                                                        var temp6 = keccak256(memory[0xc0:0x0100]);\n                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                        memory[0xc0:0xe0] = temp6;\n                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                                                        return memory[0x00:0x20];\n                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                } else if (!msg.value) {\n                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                \n                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                \n                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                    memory[0xc0:0xe0] = 0x09;\n                                                                                                    var temp7 = keccak256(memory[0xc0:0x0100]);\n                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                    memory[0xc0:0xe0] = temp7;\n                                                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                                                    return memory[0x00:0x20];\n                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                            } else if (!msg.value) {\n                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                            \n                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                            \n                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                memory[0xc0:0xe0] = 0x09;\n                                                                                                var temp8 = keccak256(memory[0xc0:0x0100]);\n                                                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                memory[0xc0:0xe0] = temp8;\n                                                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                                                                                return memory[0x00:0x20];\n                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                        } else if (!msg.value) {\n                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                        \n                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                        \n                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                            memory[0xc0:0xe0] = 0x09;\n                                                                                            var temp9 = keccak256(memory[0xc0:0x0100]);\n                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                            memory[0xc0:0xe0] = temp9;\n                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                                            return memory[0x00:0x20];\n                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                    } else if (!msg.value) {\n                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                    \n                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                    \n                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                        memory[0xc0:0xe0] = 0x08;\n                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                        return memory[0x00:0x20];\n                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                } else if (!msg.value) {\n                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                \n                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                \n                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                    return memory[0x00:0x20];\n                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                            } else if (!msg.value) {\n                                                                                memory[0x00:0x20] = storage[0x04];\n                                                                                return memory[0x00:0x20];\n                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                        } else if (!msg.value) {\n                                                                            var0 = 0x01;\n                                                                            memory[0xc0:0xe0] = var0;\n                                                                            var var1 = keccak256(memory[0xc0:0xe0]);\n                                                                            var var2 = 0x0180;\n                                                                            var temp10 = storage[var1] + 0x20;\n                                                                            var var3 = temp10;\n                                                                            var var4 = 0x0120;\n                                                                            memory[var4:var4 + 0x20] = 0x00;\n                                                                            var var5 = 0x02;\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_227E; }\n                                                                        \n                                                                        label_2282:\n                                                                            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                            var temp11 = var4;\n                                                                            var temp12 = memory[temp11:temp11 + 0x20] + 0x01;\n                                                                            memory[temp11:temp11 + 0x20] = temp12;\n                                                                        \n                                                                            if (var5 == temp12) { goto label_22A4; }\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_2282; }\n                                                                        \n                                                                        label_227E:\n                                                                        \n                                                                        label_22A4:\n                                                                            var temp13 = memory[0x0180:0x01a0];\n                                                                            var temp14 = (temp13 + 0x1f) - temp13 - 0x01 % 0x20 - temp13;\n                                                                            memory[temp13 + 0x01a0:temp13 + 0x01a0 + temp14] = msg.data[msg.data.length:msg.data.length + temp14];\n                                                                            memory[0x0160:0x0180] = 0x20;\n                                                                            var temp15 = memory[0x0180:0x01a0] + 0x40;\n                                                                            return memory[0x0160:0x0160 + (temp15 + 0x1f) - temp15 - 0x01 % 0x20];\n                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                    } else if (!msg.value) {\n                                                                        var0 = 0x00;\n                                                                        memory[0xc0:0xe0] = var0;\n                                                                        var1 = keccak256(memory[0xc0:0xe0]);\n                                                                        var2 = 0x0180;\n                                                                        var temp16 = storage[var1] + 0x20;\n                                                                        var3 = temp16;\n                                                                        var4 = 0x0120;\n                                                                        memory[var4:var4 + 0x20] = 0x00;\n                                                                        var5 = 0x03;\n                                                                    \n                                                                        if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_21CA; }\n                                                                    \n                                                                    label_21CE:\n                                                                        memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                        var temp17 = var4;\n                                                                        var temp18 = memory[temp17:temp17 + 0x20] + 0x01;\n                                                                        memory[temp17:temp17 + 0x20] = temp18;\n                                                                    \n                                                                        if (var5 == temp18) { goto label_21F0; }\n                                                                    \n                                                                        if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_21CE; }\n                                                                    \n                                                                    label_21CA:\n                                                                    \n                                                                    label_21F0:\n                                                                        var temp19 = memory[0x0180:0x01a0];\n                                                                        var temp20 = (temp19 + 0x1f) - temp19 - 0x01 % 0x20 - temp19;\n                                                                        memory[temp19 + 0x01a0:temp19 + 0x01a0 + temp20] = msg.data[msg.data.length:msg.data.length + temp20];\n                                                                        memory[0x0160:0x0180] = 0x20;\n                                                                        var temp21 = memory[0x0180:0x01a0] + 0x40;\n                                                                        return memory[0x0160:0x0160 + (temp21 + 0x1f) - temp21 - 0x01 % 0x20];\n                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                } else if (!msg.value) {\n                                                                    var0 = msg.data[0x04:0x24];\n                                                                \n                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var0 = block.timestamp;\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp22 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp22;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    var temp23 = storage[keccak256(memory[0xc0:0xe0]) + 0x05];\n                                                                    var1 = temp23;\n                                                                    var2 = 0x03f480;\n                                                                \n                                                                    if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    if (var1 + var2 > var0) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp24 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp24;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                \n                                                                    if (storage[keccak256(memory[0xc0:0xe0]) + 0x06]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp25 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp25;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                \n                                                                    if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp26 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp26;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp27 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp27;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = 0x0a;\n                                                                    var temp28 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = temp28;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                    memory[0x01a0:0x01c0] = storage[0x03];\n                                                                \n                                                                    if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                                        var0 = memory[0x01a0:0x01c0];\n                                                                        var1 = memory[0x0180:0x01a0];\n                                                                    \n                                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp38 = var0 - var1;\n                                                                        var0 = temp38;\n                                                                        var temp39 = memory[0x0160:0x0180];\n                                                                        var1 = temp39;\n                                                                        var2 = var0 * var1;\n                                                                    \n                                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var0 = var2;\n                                                                        var1 = storage[0x03];\n                                                                        var2 = var1;\n                                                                    \n                                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0240:0x0260] = var0 / var2;\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = storage[0x0c];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0240:0x0260];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        var4 = memory[0x0180:0x01a0];\n                                                                        var5 = var4;\n                                                                    \n                                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp40 = var3 / var5;\n                                                                        var3 = temp40;\n                                                                        var temp41 = var2;\n                                                                        var4 = temp41 * var3;\n                                                                    \n                                                                        if (!((var4 / temp41 == var3) | !temp41)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var2 = var4;\n                                                                        var temp42 = var1;\n                                                                    \n                                                                        if (temp42 + var2 < temp42) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        var0 = memory[0x0160:0x0180];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = var2;\n                                                                    \n                                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp43 = var1 / var3;\n                                                                        var1 = temp43;\n                                                                        var temp44 = var0;\n                                                                        var2 = temp44 * var1;\n                                                                    \n                                                                        if (!((var2 / temp44 == var1) | !temp44)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0260:0x0280] = var2;\n                                                                        log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                        memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                                        log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], memory[0x0140:0x0160]]);\n                                                                        goto label_20DC;\n                                                                    } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var temp29 = storage[var0];\n                                                                        var1 = temp29;\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                    \n                                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        memory[0x01c0:0x01e0] = memory[0x0160:0x0180];\n                                                                        log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                    \n                                                                    label_20DC:\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x0160:0x0180];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                        memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                                        var4 = memory[0x02e0:0x0300];\n                                                                        var5 = 0x06;\n                                                                        // Unhandled termination\n                                                                    } else {\n                                                                        var0 = memory[0x0180:0x01a0];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                    \n                                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp30 = var0 - var1;\n                                                                        var0 = temp30;\n                                                                        var temp31 = memory[0x0160:0x0180];\n                                                                        var1 = temp31;\n                                                                        var2 = var0 * var1;\n                                                                    \n                                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var0 = var2;\n                                                                        var1 = storage[0x03];\n                                                                        var2 = var1;\n                                                                    \n                                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x01e0:0x0200] = var0 / var2;\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = storage[0x0c];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var temp32 = storage[var0];\n                                                                        var1 = temp32;\n                                                                        var2 = memory[0x01e0:0x0200];\n                                                                    \n                                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0160:0x0180];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        var4 = memory[0x0180:0x01a0];\n                                                                        var5 = var4;\n                                                                    \n                                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp33 = var3 / var5;\n                                                                        var3 = temp33;\n                                                                        var temp34 = var2;\n                                                                        var4 = temp34 * var3;\n                                                                    \n                                                                        if (!((var4 / temp34 == var3) | !temp34)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var2 = var4;\n                                                                        var temp35 = var1;\n                                                                    \n                                                                        if (temp35 + var2 < temp35) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        var0 = memory[0x0160:0x0180];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = var2;\n                                                                    \n                                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp36 = var1 / var3;\n                                                                        var1 = temp36;\n                                                                        var temp37 = var0;\n                                                                        var2 = temp37 * var1;\n                                                                    \n                                                                        if (!((var2 / temp37 == var1) | !temp37)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0200:0x0220] = var2;\n                                                                        log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                        memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                                        log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x04:0x24], storage[0x0c]]);\n                                                                        goto label_20DC;\n                                                                    }\n                                                                } else { revert(memory[0x00:0x00]); }\n                                                            } else if (!msg.value) {\n                                                                var0 = msg.data[0x24:0x44];\n                                                            \n                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var0 = msg.data[0x44:0x64];\n                                                            \n                                                                if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                if (msg.sender != storage[0x0d]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                memory[0xc0:0xe0] = 0x0a;\n                                                                var temp45 = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                memory[0xc0:0xe0] = temp45;\n                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                memory[0xc0:0xe0] = 0x0a;\n                                                                var temp46 = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                memory[0xc0:0xe0] = temp46;\n                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                memory[0xc0:0xe0] = 0x0a;\n                                                                var temp47 = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                memory[0xc0:0xe0] = temp47;\n                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                memory[0x01a0:0x01c0] = storage[0x03];\n                                                            \n                                                                if (msg.data[0x44:0x64] != 0x01) {\n                                                                label_1A97:\n                                                                \n                                                                    if (msg.data[0x44:0x64]) {\n                                                                    label_1AFD:\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x0160:0x0180];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                        memory[0x02e0:0x0300] = memory[0x0140:0x0160];\n                                                                        var4 = memory[0x02e0:0x0300];\n                                                                        var5 = 0x06;\n                                                                        // Unhandled termination\n                                                                    } else {\n                                                                        memory[0xe0:0x0100] = storage[0x0c];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = 0x06;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var temp48 = storage[var0];\n                                                                        var1 = temp48;\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        goto label_1AFD;\n                                                                    }\n                                                                } else if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                                    var0 = memory[0x01a0:0x01c0];\n                                                                    var1 = memory[0x0180:0x01a0];\n                                                                \n                                                                    if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp57 = var0 - var1;\n                                                                    var0 = temp57;\n                                                                    var temp58 = memory[0x0140:0x0160];\n                                                                    var1 = temp58;\n                                                                    var2 = var0 * var1;\n                                                                \n                                                                    if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var0 = var2;\n                                                                    var1 = storage[0x03];\n                                                                    var2 = var1;\n                                                                \n                                                                    if (!var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0x0240:0x0260] = var0 / var2;\n                                                                    memory[0xe0:0x0100] = storage[0x0c];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0240:0x0260];\n                                                                \n                                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 - var2;\n                                                                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0140:0x0160];\n                                                                    var3 = memory[0x01a0:0x01c0];\n                                                                    var4 = memory[0x0180:0x01a0];\n                                                                    var5 = var4;\n                                                                \n                                                                    if (!var5) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp59 = var3 / var5;\n                                                                    var3 = temp59;\n                                                                    var temp60 = var2;\n                                                                    var4 = temp60 * var3;\n                                                                \n                                                                    if (!((var4 / temp60 == var3) | !temp60)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var2 = var4;\n                                                                    var temp61 = var1;\n                                                                \n                                                                    if (temp61 + var2 < temp61) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 + var2;\n                                                                    var0 = memory[0x0140:0x0160];\n                                                                    var1 = memory[0x01a0:0x01c0];\n                                                                    var2 = memory[0x0180:0x01a0];\n                                                                    var3 = var2;\n                                                                \n                                                                    if (!var3) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp62 = var1 / var3;\n                                                                    var1 = temp62;\n                                                                    var temp63 = var0;\n                                                                    var2 = temp63 * var1;\n                                                                \n                                                                    if (!((var2 / temp63 == var1) | !temp63)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0x0260:0x0280] = var2;\n                                                                    log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x24:0x44], memory[0x0160:0x0180]]);\n                                                                    memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                                    log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], memory[0x0160:0x0180]]);\n                                                                    goto label_1A96;\n                                                                } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                                    memory[0xe0:0x0100] = msg.sender;\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0140:0x0160];\n                                                                \n                                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 - var2;\n                                                                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0140:0x0160];\n                                                                \n                                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 - var2;\n                                                                    memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                                                    log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x24:0x44], memory[0x0160:0x0180]]);\n                                                                    goto label_1A97;\n                                                                } else {\n                                                                    var0 = memory[0x0180:0x01a0];\n                                                                    var1 = memory[0x01a0:0x01c0];\n                                                                \n                                                                    if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp49 = var0 - var1;\n                                                                    var0 = temp49;\n                                                                    var temp50 = memory[0x0140:0x0160];\n                                                                    var1 = temp50;\n                                                                    var2 = var0 * var1;\n                                                                \n                                                                    if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var0 = var2;\n                                                                    var1 = storage[0x03];\n                                                                    var2 = var1;\n                                                                \n                                                                    if (!var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0x01e0:0x0200] = var0 / var2;\n                                                                    memory[0xe0:0x0100] = msg.sender;\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0140:0x0160];\n                                                                \n                                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 - var2;\n                                                                    memory[0xe0:0x0100] = storage[0x0c];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var temp51 = storage[var0];\n                                                                    var1 = temp51;\n                                                                    var2 = memory[0x01e0:0x0200];\n                                                                \n                                                                    if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 + var2;\n                                                                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                    memory[0xc0:0xe0] = 0x06;\n                                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                                    var1 = storage[var0];\n                                                                    var2 = memory[0x0140:0x0160];\n                                                                    var3 = memory[0x01a0:0x01c0];\n                                                                    var4 = memory[0x0180:0x01a0];\n                                                                    var5 = var4;\n                                                                \n                                                                    if (!var5) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp52 = var3 / var5;\n                                                                    var3 = temp52;\n                                                                    var temp53 = var2;\n                                                                    var4 = temp53 * var3;\n                                                                \n                                                                    if (!((var4 / temp53 == var3) | !temp53)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var2 = var4;\n                                                                    var temp54 = var1;\n                                                                \n                                                                    if (temp54 + var2 < temp54) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    storage[var0] = var1 + var2;\n                                                                    var0 = memory[0x0140:0x0160];\n                                                                    var1 = memory[0x01a0:0x01c0];\n                                                                    var2 = memory[0x0180:0x01a0];\n                                                                    var3 = var2;\n                                                                \n                                                                    if (!var3) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp55 = var1 / var3;\n                                                                    var1 = temp55;\n                                                                    var temp56 = var0;\n                                                                    var2 = temp56 * var1;\n                                                                \n                                                                    if (!((var2 / temp56 == var1) | !temp56)) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0x0200:0x0220] = var2;\n                                                                    log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0160:0x0180]]);\n                                                                    memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                                    log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x24:0x44], storage[0x0c]]);\n                                                                \n                                                                label_1A96:\n                                                                    goto label_1A97;\n                                                                }\n                                                            } else { revert(memory[0x00:0x00]); }\n                                                        } else if (!msg.value) {\n                                                            var0 = msg.data[0x04:0x24];\n                                                        \n                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x07;\n                                                            var temp64 = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                            memory[0xc0:0xe0] = temp64;\n                                                            storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                                            memory[0x0140:0x0160] = msg.data[0x24:0x44];\n                                                            log(memory[0x0140:0x0160], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, msg.data[0x04:0x24]]);\n                                                            memory[0x00:0x20] = 0x01;\n                                                            return memory[0x00:0x20];\n                                                        } else { revert(memory[0x00:0x00]); }\n                                                    } else if (!msg.value) {\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        var temp65 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp65;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                    \n                                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x0140:0x0160] = storage[0x0d];\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        var temp66 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp66;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        var temp67 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp67;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0])];\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var temp68 = storage[var0];\n                                                        var1 = temp68;\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 + var2;\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x08;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x0a;\n                                                        var temp69 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp69;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        storage[keccak256(memory[0xc0:0xe0]) + 0x06] = 0x01;\n                                                        memory[0x01a0:0x01c0] = memory[0x0160:0x0180];\n                                                        log(memory[0x01a0:0x01c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, memory[0x0140:0x0160]]);\n                                                        memory[0x00:0x20] = 0x01;\n                                                        return memory[0x00:0x20];\n                                                    } else { revert(memory[0x00:0x00]); }\n                                                } else if (!msg.value) {\n                                                    memory[0xe0:0x0100] = msg.sender;\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var temp70 = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = temp70;\n                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                \n                                                    if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                \n                                                    memory[0xe0:0x0100] = msg.sender;\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var temp71 = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = temp71;\n                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0])];\n                                                    memory[0xe0:0x0100] = msg.sender;\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var temp72 = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = temp72;\n                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                    memory[0xe0:0x0100] = msg.sender;\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var temp73 = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = temp73;\n                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                    memory[0x01a0:0x01c0] = storage[0x03];\n                                                \n                                                    if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                        var0 = memory[0x01a0:0x01c0];\n                                                        var1 = memory[0x0180:0x01a0];\n                                                    \n                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp83 = var0 - var1;\n                                                        var0 = temp83;\n                                                        var temp84 = memory[0x0160:0x0180];\n                                                        var1 = temp84;\n                                                        var2 = var0 * var1;\n                                                    \n                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var0 = var2;\n                                                        var1 = storage[0x03];\n                                                        var2 = var1;\n                                                    \n                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x0240:0x0260] = var0 / var2;\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = storage[0x0c];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0240:0x0260];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                        var3 = memory[0x01a0:0x01c0];\n                                                        var4 = memory[0x0180:0x01a0];\n                                                        var5 = var4;\n                                                    \n                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp85 = var3 / var5;\n                                                        var3 = temp85;\n                                                        var temp86 = var2;\n                                                        var4 = temp86 * var3;\n                                                    \n                                                        if (!((var4 / temp86 == var3) | !temp86)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var2 = var4;\n                                                        var temp87 = var1;\n                                                    \n                                                        if (temp87 + var2 < temp87) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 + var2;\n                                                        var0 = memory[0x0160:0x0180];\n                                                        var1 = memory[0x01a0:0x01c0];\n                                                        var2 = memory[0x0180:0x01a0];\n                                                        var3 = var2;\n                                                    \n                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp88 = var1 / var3;\n                                                        var1 = temp88;\n                                                        var temp89 = var0;\n                                                        var2 = temp89 * var1;\n                                                    \n                                                        if (!((var2 / temp89 == var1) | !temp89)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x0260:0x0280] = var2;\n                                                        log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                        memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                        log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], memory[0x0140:0x0160]]);\n                                                        var0 = memory[0x0140:0x0160];\n                                                        var1 = memory[0x0160:0x0180];\n                                                        var2 = memory[0x0180:0x01a0];\n                                                        var3 = memory[0x01a0:0x01c0];\n                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                        memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                        var4 = memory[0x02e0:0x0300];\n                                                        var5 = 0x06;\n                                                        // Unhandled termination\n                                                    } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var temp74 = storage[var0];\n                                                        var1 = temp74;\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 + var2;\n                                                        memory[0x01c0:0x01e0] = memory[0x0160:0x0180];\n                                                        log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                        var0 = memory[0x0140:0x0160];\n                                                        var1 = memory[0x0160:0x0180];\n                                                        var2 = memory[0x0180:0x01a0];\n                                                        var3 = memory[0x01a0:0x01c0];\n                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                        memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                        var4 = memory[0x02e0:0x0300];\n                                                        var5 = 0x06;\n                                                        // Unhandled termination\n                                                    } else {\n                                                        var0 = memory[0x0180:0x01a0];\n                                                        var1 = memory[0x01a0:0x01c0];\n                                                    \n                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp75 = var0 - var1;\n                                                        var0 = temp75;\n                                                        var temp76 = memory[0x0160:0x0180];\n                                                        var1 = temp76;\n                                                        var2 = var0 * var1;\n                                                    \n                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var0 = var2;\n                                                        var1 = storage[0x03];\n                                                        var2 = var1;\n                                                    \n                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x01e0:0x0200] = var0 / var2;\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                    \n                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 - var2;\n                                                        memory[0xe0:0x0100] = storage[0x0c];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var temp77 = storage[var0];\n                                                        var1 = temp77;\n                                                        var2 = memory[0x01e0:0x0200];\n                                                    \n                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 + var2;\n                                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                        memory[0xc0:0xe0] = 0x06;\n                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                        var1 = storage[var0];\n                                                        var2 = memory[0x0160:0x0180];\n                                                        var3 = memory[0x01a0:0x01c0];\n                                                        var4 = memory[0x0180:0x01a0];\n                                                        var5 = var4;\n                                                    \n                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp78 = var3 / var5;\n                                                        var3 = temp78;\n                                                        var temp79 = var2;\n                                                        var4 = temp79 * var3;\n                                                    \n                                                        if (!((var4 / temp79 == var3) | !temp79)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var2 = var4;\n                                                        var temp80 = var1;\n                                                    \n                                                        if (temp80 + var2 < temp80) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        storage[var0] = var1 + var2;\n                                                        var0 = memory[0x0160:0x0180];\n                                                        var1 = memory[0x01a0:0x01c0];\n                                                        var2 = memory[0x0180:0x01a0];\n                                                        var3 = var2;\n                                                    \n                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp81 = var1 / var3;\n                                                        var1 = temp81;\n                                                        var temp82 = var0;\n                                                        var2 = temp82 * var1;\n                                                    \n                                                        if (!((var2 / temp82 == var1) | !temp82)) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0x0200:0x0220] = var2;\n                                                        log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                        memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                        log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, storage[0x0c]]);\n                                                        var0 = memory[0x0140:0x0160];\n                                                        var1 = memory[0x0160:0x0180];\n                                                        var2 = memory[0x0180:0x01a0];\n                                                        var3 = memory[0x01a0:0x01c0];\n                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                        memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                        var4 = memory[0x02e0:0x0300];\n                                                        var5 = 0x06;\n                                                        // Unhandled termination\n                                                    }\n                                                } else { revert(memory[0x00:0x00]); }\n                                            } else if (!msg.value) {\n                                                var0 = msg.data[0x04:0x24];\n                                            \n                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                            \n                                                var0 = msg.data[0x24:0x44];\n                                            \n                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = 0x06;\n                                                var0 = storage[keccak256(memory[0xc0:0x0100])];\n                                                var1 = msg.data[0x44:0x64];\n                                            \n                                                if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = 0x08;\n                                            \n                                                if (storage[keccak256(memory[0xc0:0x0100])] > var0 - var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = 0x06;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = msg.data[0x44:0x64];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                memory[0xc0:0xe0] = 0x06;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var temp90 = storage[var0];\n                                                var1 = temp90;\n                                                var2 = msg.data[0x44:0x64];\n                                            \n                                                if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 + var2;\n                                                var0 = msg.data[0x44:0x64];\n                                                var1 = 0x64;\n                                                var2 = var1;\n                                            \n                                                if (!var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0x0140:0x0160] = var0 / var2;\n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = 0x07;\n                                                var temp91 = keccak256(memory[0xc0:0x0100]);\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = temp91;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = msg.data[0x44:0x64];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0x0160:0x0180] = msg.data[0x44:0x64];\n                                                log(memory[0x0160:0x0180], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x04:0x24], msg.data[0x24:0x44]]);\n                                                var0 = memory[0x0140:0x0160];\n                                                var1 = memory[0x0160:0x0180];\n                                                memory[0x01a0:0x01c0] = 0x42966c68;\n                                                memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                                var2 = memory[0x01c0:0x01e0];\n                                                var3 = 0x06;\n                                                // Unhandled termination\n                                            } else { revert(memory[0x00:0x00]); }\n                                        } else if (!msg.value) {\n                                            var0 = msg.data[0x04:0x24];\n                                        \n                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x0140:0x0160] = 0x08c379a0;\n                                            memory[0x0160:0x0180] = 0x20;\n                                            memory[0x0180:0x01a0] = 0x1e;\n                                            memory[0x01a0:0x01c0] = 0x4e6f7420656e6f6f7567682062616c616e636520696e206163636f756e740000;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x06;\n                                            var0 = storage[keccak256(memory[0xc0:0x0100])];\n                                            var1 = msg.data[0x24:0x44];\n                                        \n                                            if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x08;\n                                        \n                                            if (storage[keccak256(memory[0xc0:0x0100])] > var0 - var1) { revert(memory[0x015c:0x01e0]); }\n                                        \n                                            var0 = msg.data[0x24:0x44];\n                                            var1 = 0x64;\n                                            var2 = var1;\n                                        \n                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x01e0:0x0200] = var0 / var2;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x06;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = msg.data[0x24:0x44];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = 0x06;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var temp92 = storage[var0];\n                                            var1 = temp92;\n                                            var2 = msg.data[0x24:0x44];\n                                        \n                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 + var2;\n                                            memory[0x0200:0x0220] = msg.data[0x24:0x44];\n                                            log(memory[0x0200:0x0220], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, msg.data[0x04:0x24]]);\n                                            var0 = memory[0x0140:0x0160];\n                                            var1 = memory[0x0160:0x0180];\n                                            var2 = memory[0x0180:0x01a0];\n                                            var3 = memory[0x01a0:0x01c0];\n                                            var4 = memory[0x01c0:0x01e0];\n                                            var5 = memory[0x01e0:0x0200];\n                                            var var6 = memory[0x0200:0x0220];\n                                            memory[0x0240:0x0260] = 0x42966c68;\n                                            memory[0x0260:0x0280] = memory[0x01e0:0x0200];\n                                            var var7 = memory[0x0260:0x0280];\n                                            var var8 = 0x06;\n                                            // Unhandled termination\n                                        } else { revert(memory[0x00:0x00]); }\n                                    } else if (!msg.value) {\n                                        var0 = msg.data[0x24:0x44];\n                                    \n                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0x0140:0x0160] = 0x08c379a0;\n                                        memory[0x0160:0x0180] = 0x20;\n                                        memory[0x0180:0x01a0] = 0x1d;\n                                        memory[0x01a0:0x01c0] = 0x4e6f7420656e6f7567682062616c616e636520696e206163636f756e74000000;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x06;\n                                    \n                                        if (storage[keccak256(memory[0xc0:0x0100])] < msg.data[0x44:0x64]) { revert(memory[0x015c:0x01e0]); }\n                                    \n                                        memory[0x01e0:0x0200] = 0x08c379a0;\n                                        memory[0x0200:0x0220] = 0x20;\n                                        memory[0x0220:0x0240] = 0x1f;\n                                        memory[0x0240:0x0260] = 0x416c72656164792068617665206461746120696e2074686520776f726b496400;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x0a;\n                                        var temp93 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp93;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    \n                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x02]) { revert(memory[0x01fc:0x0280]); }\n                                    \n                                        var0 = 0x015180;\n                                        var temp94 = msg.data[0x64:0x84];\n                                        var1 = temp94;\n                                        var2 = var0 * var1;\n                                    \n                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                    \n                                        var temp95 = var2;\n                                        var0 = temp95;\n                                        var1 = block.timestamp;\n                                    \n                                        if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0x0280:0x02a0] = var0 + var1;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x0a;\n                                        var temp96 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp96;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                        var temp97 = keccak256(memory[0xc0:0xe0]);\n                                        storage[temp97] = msg.data[0x24:0x44];\n                                        storage[temp97 + 0x01] = msg.sender;\n                                        storage[temp97 + 0x02] = msg.data[0x44:0x64];\n                                        storage[temp97 + 0x03] = storage[0x03];\n                                        storage[temp97 + 0x04] = block.timestamp;\n                                        storage[temp97 + 0x05] = memory[0x0280:0x02a0];\n                                        storage[temp97 + 0x06] = 0x00;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x08;\n                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                        var temp98 = storage[var0];\n                                        var1 = temp98;\n                                        var2 = msg.data[0x44:0x64];\n                                    \n                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                    \n                                        storage[var0] = var1 + var2;\n                                        memory[0x00:0x20] = 0x01;\n                                        return memory[0x00:0x20];\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x09;\n                                    var temp99 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                    memory[0xc0:0xe0] = temp99;\n                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                \n                                    if (storage[keccak256(memory[0xc0:0xe0]) + 0x01] <= 0x00) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x09;\n                                    var temp100 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                    memory[0xc0:0xe0] = temp100;\n                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x09;\n                                    var temp101 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                    memory[0xc0:0xe0] = temp101;\n                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                    var temp102 = memory[0x0160:0x0180];\n                                    var0 = temp102;\n                                    var1 = 0x0708;\n                                \n                                    if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = block.timestamp < var0 + var1;\n                                    var temp103 = memory[0x0160:0x0180];\n                                    var1 = temp103;\n                                    var2 = 0x012c;\n                                \n                                    if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                \n                                    if (!((block.timestamp > var1 + var2) & var0)) {\n                                        var temp104 = memory[0x0160:0x0180];\n                                        var0 = temp104;\n                                        var1 = 0x0e10;\n                                    \n                                        if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                                    \n                                        var0 = block.timestamp < var0 + var1;\n                                        var temp105 = memory[0x0160:0x0180];\n                                        var1 = temp105;\n                                        var2 = 0x0708;\n                                    \n                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                    \n                                        if (!((block.timestamp > var1 + var2) & var0)) {\n                                            var temp106 = memory[0x0160:0x0180];\n                                            var0 = temp106;\n                                            var1 = 0x0e10;\n                                        \n                                            if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                                        \n                                            if (block.timestamp <= var0 + var1) {\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x09;\n                                                var temp107 = keccak256(memory[0xc0:0x0100]);\n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = temp107;\n                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                var temp108 = keccak256(memory[0xc0:0xe0]);\n                                                storage[temp108] = msg.sender;\n                                                storage[temp108 + 0x01] = 0x00;\n                                                storage[temp108 + 0x02] = 0x00;\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x08;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = memory[0x0140:0x0160];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0x00:0x20] = 0x01;\n                                                return memory[0x00:0x20];\n                                            } else {\n                                                var temp109 = memory[0x0140:0x0160];\n                                                var0 = temp109;\n                                                var1 = 0x00;\n                                                var2 = var0 * var1;\n                                            \n                                                if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0x0180:0x01a0] = var2;\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x06;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var temp110 = storage[var0];\n                                                var1 = temp110;\n                                                var2 = memory[0x0180:0x01a0];\n                                            \n                                                if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 + var2;\n                                                memory[0xe0:0x0100] = storage[0x0c];\n                                                memory[0xc0:0xe0] = 0x06;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = memory[0x0180:0x01a0];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0x01a0:0x01c0] = memory[0x0180:0x01a0];\n                                                log(memory[0x01a0:0x01c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], msg.sender]);\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x09;\n                                                var temp111 = keccak256(memory[0xc0:0x0100]);\n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = temp111;\n                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                var temp112 = keccak256(memory[0xc0:0xe0]);\n                                                storage[temp112] = msg.sender;\n                                                storage[temp112 + 0x01] = 0x00;\n                                                storage[temp112 + 0x02] = 0x00;\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x08;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = memory[0x0140:0x0160];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0x00:0x20] = 0x01;\n                                                return memory[0x00:0x20];\n                                            }\n                                        } else {\n                                            var temp113 = memory[0x0140:0x0160];\n                                            var0 = temp113;\n                                            var1 = 0x00;\n                                            var2 = var0 * var1;\n                                        \n                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x01c0:0x01e0] = var2;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x06;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var temp114 = storage[var0];\n                                            var1 = temp114;\n                                            var2 = memory[0x01c0:0x01e0];\n                                        \n                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 + var2;\n                                            memory[0xe0:0x0100] = storage[0x0c];\n                                            memory[0xc0:0xe0] = 0x06;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = memory[0x01c0:0x01e0];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0x01e0:0x0200] = memory[0x01c0:0x01e0];\n                                            log(memory[0x01e0:0x0200], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], msg.sender]);\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x09;\n                                            var temp115 = keccak256(memory[0xc0:0x0100]);\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = temp115;\n                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                            var temp116 = keccak256(memory[0xc0:0xe0]);\n                                            storage[temp116] = msg.sender;\n                                            storage[temp116 + 0x01] = 0x00;\n                                            storage[temp116 + 0x02] = 0x00;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x08;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = memory[0x0140:0x0160];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0x00:0x20] = 0x01;\n                                            return memory[0x00:0x20];\n                                        }\n                                    } else {\n                                        var temp117 = memory[0x0140:0x0160];\n                                        var0 = temp117;\n                                        var1 = 0x00;\n                                        var2 = var0 * var1;\n                                    \n                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0x0200:0x0220] = var2;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x06;\n                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                        var temp118 = storage[var0];\n                                        var1 = temp118;\n                                        var2 = memory[0x0200:0x0220];\n                                    \n                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                    \n                                        storage[var0] = var1 + var2;\n                                        memory[0xe0:0x0100] = storage[0x0c];\n                                        memory[0xc0:0xe0] = 0x06;\n                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                        var1 = storage[var0];\n                                        var2 = memory[0x0200:0x0220];\n                                    \n                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                    \n                                        storage[var0] = var1 - var2;\n                                        memory[0x0220:0x0240] = memory[0x0200:0x0220];\n                                        log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x0c], msg.sender]);\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x09;\n                                        var temp119 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp119;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                        var temp120 = keccak256(memory[0xc0:0xe0]);\n                                        storage[temp120] = msg.sender;\n                                        storage[temp120 + 0x01] = 0x00;\n                                        storage[temp120 + 0x02] = 0x00;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x08;\n                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                        var1 = storage[var0];\n                                        var2 = memory[0x0140:0x0160];\n                                    \n                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                    \n                                        storage[var0] = var1 - var2;\n                                        memory[0x00:0x20] = 0x01;\n                                        return memory[0x00:0x20];\n                                    }\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                memory[0xe0:0x0100] = msg.sender;\n                                memory[0xc0:0xe0] = 0x06;\n                            \n                                if (storage[keccak256(memory[0xc0:0x0100])] < msg.data[0x04:0x24]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = msg.sender;\n                                memory[0xc0:0xe0] = 0x09;\n                                var temp121 = keccak256(memory[0xc0:0x0100]);\n                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                memory[0xc0:0xe0] = temp121;\n                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                var temp122 = keccak256(memory[0xc0:0xe0]);\n                                storage[temp122] = msg.sender;\n                                storage[temp122 + 0x01] = msg.data[0x04:0x24];\n                                storage[temp122 + 0x02] = block.timestamp;\n                                memory[0xe0:0x0100] = msg.sender;\n                                memory[0xc0:0xe0] = 0x08;\n                                var0 = keccak256(memory[0xc0:0x0100]);\n                                var temp123 = storage[var0];\n                                var1 = temp123;\n                                var2 = msg.data[0x04:0x24];\n                            \n                                if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                            \n                                storage[var0] = var1 + var2;\n                                memory[0x00:0x20] = 0x01;\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            var0 = msg.data[0x04:0x24];\n                        \n                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = msg.data[0x24:0x44];\n                        \n                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                            memory[0xc0:0xe0] = 0x07;\n                            var temp124 = keccak256(memory[0xc0:0x0100]);\n                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                            memory[0xc0:0xe0] = temp124;\n                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        memory[0x00:0x20] = storage[0x05];\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0140:0x0160] = 0x08c379a0;\n                    memory[0x0160:0x0180] = 0x20;\n                    memory[0x0180:0x01a0] = 0x17;\n                    memory[0x01a0:0x01c0] = 0x4e6f742074686520636f72726563742041646472657373000000000000000000;\n                \n                    if (msg.sender != storage[0x0e]) { revert(memory[0x015c:0x01e0]); }\n                \n                    storage[0x05] = msg.data[0x04:0x24];\n                    memory[0x00:0x20] = 0x01;\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                memory[0x0140:0x0160] = 0x08c379a0;\n                memory[0x0160:0x0180] = 0x20;\n                memory[0x0180:0x01a0] = 0x17;\n                memory[0x01a0:0x01c0] = 0x4e6f742074686520636f72726563742041646472657373000000000000000000;\n            \n                if (msg.sender != storage[0x0d]) { revert(memory[0x015c:0x01e0]); }\n            \n                storage[0x03] = msg.data[0x04:0x24];\n                memory[0x00:0x20] = 0x01;\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            memory[0x00:0x20] = storage[0x02];\n            return memory[0x00:0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 42.89429831504822,
	"usage": {
		"completion_tokens": 449,
		"prompt_tokens": 25850,
		"total_tokens": 26299
	}
}