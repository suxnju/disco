{
	"address": "0xcbe98a2b1f756bebe53d41eb3b94e566a0777ede",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here is a Solidity contract version of the decompiled code:\n\n```solidity\npragma solidity ^0.5.16;\n\ncontract DecompiledContract {\n    mapping (address => uint256) private _deposited;\n    uint256 private _totalDeposited;\n    address private _owner;\n    uint8 private _state;\n    address private _enableRefunds;\n\n    event Withdrawal(address indexed recipient, uint256 amount);\n    event Closed();\n    event RefundsEnabled();\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Refunded(address indexed recipient, uint256 amount);\n\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    function close() public {\n        require(_enableRefunds == msg.sender);\n        require(_state == 0);\n        _state = 2;\n        _totalDeposited = 0;\n        emit Closed();\n        bool success = _enableRefunds.call.value(address(this).balance)(\"\");\n        require(success);\n    }\n\n    function wallet() public pure returns (address) {\n        return 0x26db9ef39bbfe437f5b384c3913e807e5633e7ce;\n    }\n\n    function enableRefunds() public {\n        require(_enableRefunds == msg.sender);\n        require(_state == 0);\n        _state = 1;\n        emit RefundsEnabled();\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function state() public view returns (uint8) {\n        return _state;\n    }\n\n    function deposited(address account) public view returns (uint256) {\n        return _deposited[account];\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(_owner == msg.sender);\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function deposit() public payable {\n        require(_enableRefunds == msg.sender);\n        require(_state == 0);\n        require(msg.value + _deposited[msg.sender] >= _deposited[msg.sender]);\n        _deposited[msg.sender] += msg.value;\n        require(msg.value + _totalDeposited >= _totalDeposited);\n        _totalDeposited += msg.value;\n    }\n\n    function setPreCrowdsaleAddress(address account) public {\n        require(_owner == msg.sender);\n        require(account != address(0));\n        _enableRefunds = account;\n    }\n\n    function refund(address account) public {\n        require(_state == 1);\n        uint256 refundAmount = _deposited[account];\n        _deposited[account] = 0;\n        bool success = account.call.value(refundAmount)(\"\");\n        require(success);\n        emit Refunded(account, refundAmount);\n    }\n\n    function totalDeposited() public view returns (uint256) {\n        return _totalDeposited;\n    }\n\n    function() external payable {\n        revert();\n    }\n\n    function withdraw(uint256 amount) public {\n        require(_enableRefunds == msg.sender);\n        require(_state == 0);\n        require(_totalDeposited >= amount);\n        _totalDeposited -= amount;\n        bool success = _enableRefunds.call.value(amount)(\"\");\n        require(success);\n        emit Withdrawal(_enableRefunds, amount);\n    }\n\n    function kill() public {\n        require(_owner == msg.sender);\n        require(_state == 2);\n        selfdestruct(address(uint160(_owner)));\n    }\n}\n```\nPlease note that while the decompiled code cannot be directly converted to Solidity due to lack of type and variable information, this contract attempts to replicate the functionality. This contract also assumes that the `_state` variable can only have values 0, 1 or 2, and that the `_enableRefunds` address is set through the `setPreCrowdsaleAddress` function.",
				"role": "assistant"
			}
		}
	],
	"created": 1701456638,
	"id": "chatcmpl-8R2swX2M7P2PVU0esdBPChj0CM51T",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.14 00:20 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\nuint256 _totalDeposited; // STORAGE[0x2]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _state; // STORAGE[0x0] bytes 20 to 20\naddress _enableRefunds; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nWithdrawal(address, uint256);\nClosed();\nRefundsEnabled();\nOwnershipTransferred(address, address);\nRefunded(address, uint256);\n\nfunction close() public nonPayable { \n    require(_enableRefunds == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    _totalDeposited = 0;\n    emit Closed();\n    v0 = 0x26db9ef39bbfe437f5b384c3913e807e5633e7ce.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction wallet() public nonPayable { \n    return 0x26db9ef39bbfe437f5b384c3913e807e5633e7ce;\n}\n\nfunction enableRefunds() public nonPayable { \n    require(_enableRefunds == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction deposit(address varg0) public payable { \n    require(_enableRefunds == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    require(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n    require(msg.value + _totalDeposited >= _totalDeposited);\n    _totalDeposited += msg.value;\n}\n\nfunction setPreCrowdsaleAddress(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    _enableRefunds = varg0;\n}\n\nfunction refund(address varg0) public nonPayable { \n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0);\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction totalDeposited() public nonPayable { \n    return _totalDeposited;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_enableRefunds == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    require(_totalDeposited >= varg0);\n    require(varg0 <= _totalDeposited);\n    _totalDeposited = _totalDeposited - varg0;\n    v0 = 0x26db9ef39bbfe437f5b384c3913e807e5633e7ce.call().value(varg0).gas(2300 * !varg0);\n    require(v0);\n    emit Withdrawal(0x26db9ef39bbfe437f5b384c3913e807e5633e7ce, varg0);\n    return 1;\n}\n\nfunction kill() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 2);\n    selfdestruct(_owner);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x2e1a7d4d) {\n            withdraw(uint256);\n        } else if (0x41c0e1b5 == function_selector) {\n            kill();\n        } else if (0x43d726d6 == function_selector) {\n            close();\n        } else if (0x521eb273 == function_selector) {\n            wallet();\n        } else if (0x8c52dc41 == function_selector) {\n            enableRefunds();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xc19d93fb == function_selector) {\n            state();\n        } else if (0xcb13cddb == function_selector) {\n            deposited(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xf912e58c == function_selector) {\n            setPreCrowdsaleAddress(address);\n        } else if (0xfa89401a == function_selector) {\n            refund(address);\n        } else if (0xff50abdc == function_selector) {\n            totalDeposited();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 00:20 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\nuint256 _totalDeposited; // STORAGE[0x2]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _state; // STORAGE[0x0] bytes 20 to 20\naddress _enableRefunds; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nWithdrawal(address, uint256);\nClosed();\nRefundsEnabled();\nOwnershipTransferred(address, address);\nRefunded(address, uint256);\n\nfunction close() public nonPayable { \n    require(_enableRefunds == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    _totalDeposited = 0;\n    emit Closed();\n    v0 = 0x26db9ef39bbfe437f5b384c3913e807e5633e7ce.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction wallet() public nonPayable { \n    return 0x26db9ef39bbfe437f5b384c3913e807e5633e7ce;\n}\n\nfunction enableRefunds() public nonPayable { \n    require(_enableRefunds == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction deposit(address varg0) public payable { \n    require(_enableRefunds == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    require(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n    require(msg.value + _totalDeposited >= _totalDeposited);\n    _totalDeposited += msg.value;\n}\n\nfunction setPreCrowdsaleAddress(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    _enableRefunds = varg0;\n}\n\nfunction refund(address varg0) public nonPayable { \n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0);\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction totalDeposited() public nonPayable { \n    return _totalDeposited;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_enableRefunds == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    require(_totalDeposited >= varg0);\n    require(varg0 <= _totalDeposited);\n    _totalDeposited = _totalDeposited - varg0;\n    v0 = 0x26db9ef39bbfe437f5b384c3913e807e5633e7ce.call().value(varg0).gas(2300 * !varg0);\n    require(v0);\n    emit Withdrawal(0x26db9ef39bbfe437f5b384c3913e807e5633e7ce, varg0);\n    return 1;\n}\n\nfunction kill() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 2);\n    selfdestruct(_owner);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x2e1a7d4d) {\n            withdraw(uint256);\n        } else if (0x41c0e1b5 == function_selector) {\n            kill();\n        } else if (0x43d726d6 == function_selector) {\n            close();\n        } else if (0x521eb273 == function_selector) {\n            wallet();\n        } else if (0x8c52dc41 == function_selector) {\n            enableRefunds();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xc19d93fb == function_selector) {\n            state();\n        } else if (0xcb13cddb == function_selector) {\n            deposited(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xf912e58c == function_selector) {\n            setPreCrowdsaleAddress(address);\n        } else if (0xfa89401a == function_selector) {\n            refund(address);\n        } else if (0xff50abdc == function_selector) {\n            totalDeposited();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 00:20 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\nuint256 _totalDeposited; // STORAGE[0x2]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _state; // STORAGE[0x0] bytes 20 to 20\naddress _enableRefunds; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nWithdrawal(address, uint256);\nClosed();\nRefundsEnabled();\nOwnershipTransferred(address, address);\nRefunded(address, uint256);\n\nfunction close() public nonPayable { \n    require(_enableRefunds == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    _totalDeposited = 0;\n    emit Closed();\n    v0 = 0x26db9ef39bbfe437f5b384c3913e807e5633e7ce.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction wallet() public nonPayable { \n    return 0x26db9ef39bbfe437f5b384c3913e807e5633e7ce;\n}\n\nfunction enableRefunds() public nonPayable { \n    require(_enableRefunds == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction deposit(address varg0) public payable { \n    require(_enableRefunds == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    require(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n    require(msg.value + _totalDeposited >= _totalDeposited);\n    _totalDeposited += msg.value;\n}\n\nfunction setPreCrowdsaleAddress(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    _enableRefunds = varg0;\n}\n\nfunction refund(address varg0) public nonPayable { \n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0);\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction totalDeposited() public nonPayable { \n    return _totalDeposited;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_enableRefunds == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    require(_totalDeposited >= varg0);\n    require(varg0 <= _totalDeposited);\n    _totalDeposited = _totalDeposited - varg0;\n    v0 = 0x26db9ef39bbfe437f5b384c3913e807e5633e7ce.call().value(varg0).gas(2300 * !varg0);\n    require(v0);\n    emit Withdrawal(0x26db9ef39bbfe437f5b384c3913e807e5633e7ce, varg0);\n    return 1;\n}\n\nfunction kill() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 2);\n    selfdestruct(_owner);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x2e1a7d4d) {\n            withdraw(uint256);\n        } else if (0x41c0e1b5 == function_selector) {\n            kill();\n        } else if (0x43d726d6 == function_selector) {\n            close();\n        } else if (0x521eb273 == function_selector) {\n            wallet();\n        } else if (0x8c52dc41 == function_selector) {\n            enableRefunds();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xc19d93fb == function_selector) {\n            state();\n        } else if (0xcb13cddb == function_selector) {\n            deposited(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xf912e58c == function_selector) {\n            setPreCrowdsaleAddress(address);\n        } else if (0xfa89401a == function_selector) {\n            refund(address);\n        } else if (0xff50abdc == function_selector) {\n            totalDeposited();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 29.942396640777588,
	"usage": {
		"completion_tokens": 818,
		"prompt_tokens": 1349,
		"total_tokens": 2167
	}
}