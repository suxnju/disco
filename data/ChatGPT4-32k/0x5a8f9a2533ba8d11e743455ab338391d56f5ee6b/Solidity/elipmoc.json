{
	"address": "0x5a8f9a2533ba8d11e743455ab338391d56f5ee6b",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the decompiled code, the following Solidity contract can be created:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract InvestorContract {\n    mapping (address => uint256) private _investorInfo;\n    mapping (address => uint256) private owner_1;\n    mapping (address => uint256) private owner_2;\n    mapping (address => uint256) private owner_3;\n\n    function investorInfo(address varg0) public view returns (uint256, uint256, uint256, uint256, uint256) {\n        int256 v0;\n        int256 v1;\n        int256 v2;\n        v0 = v1 = 1440 - int256(block.number - (owner_3[varg0] >> 2));\n        if (v1 < 0) {\n            v0 = v2 = 0;\n        }\n        return (_investorInfo[varg0] / 0x3b9aca00, ((_investorInfo[varg0] << 1) - owner_3[varg0]) / 0x3b9aca00, owner_3[varg0] / 0x3b9aca00, uint256(v0), owner_3[varg0] / 0x3b9aca00);\n    }\n\n    function () external payable {\n        if (msg.value < 1000) {\n            bool v0 = owner_3[msg.sender] << 1 > owner_3[msg.sender];\n            if (v0) {\n                v0 = block.number - owner_1[msg.sender] > 5900;\n            }\n            if (v0) {\n                owner_3[msg.sender] += owner_2[msg.sender];\n                owner_3[msg.sender] = block.number;\n                (bool v3,) = msg.sender.call.value(owner_2[msg.sender]).gas(2300 * !owner_2[msg.sender])(\"\");\n                require(v3);\n            }\n        } else {\n            (bool v4,) = address(0x27fe767c1da8a69731c64f15d6ee98ee8af62e72).call.value(msg.value / 10).gas(2300 * !(msg.value / 10))(\"\");\n            require(v4);\n            if (_investorInfo[msg.sender] == 0) {\n                owner_1[msg.sender] = block.number;\n            }\n            _investorInfo[msg.sender] += msg.value;\n            address referrer = address(bytes20(bytes(msg.data)));\n            if (_investorInfo[referrer] != 0 && referrer != msg.sender) {\n                _investorInfo[referrer] += msg.value / 20;\n                owner_2[referrer] += msg.value / 400;\n                owner_2[msg.sender] += msg.value / 20;\n            }\n            owner_3[msg.sender] = ((owner_3[msg.sender] << 1) - owner_3[msg.sender]) / 40;\n        }\n    }\n}\n```\nPlease note that due to the nature of EVM bytecode, and since the original source code is not available, the above Solidity code is a best-guess reconstruction and might not function exactly as the original contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701469743,
	"id": "chatcmpl-8R6IJUOB3GjWdkxEsPperncGGQnrG",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 11:03 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _investorInfo; // STORAGE[0x0]\nmapping (uint256 => [uint256]) owner_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) owner_2; // STORAGE[0x2]\nmapping (uint256 => [uint256]) owner_3; // STORAGE[0x3]\n\n\nfunction investorInfo(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 1440 - (block.number - owner_3[varg0] >> 2);\n    if (v1 < 0) {\n        v0 = v2 = 0;\n    }\n    return _investorInfo[varg0] / 0x3b9aca00, ((_investorInfo[varg0] << 1) - owner_3[varg0]) / 0x3b9aca00, owner_3[varg0] / 0x3b9aca00, v0, owner_3[varg0] / 0x3b9aca00;\n}\n\nfunction fallback() public payable { \n    if (msg.value < 1000) {\n        v0 = v1 = owner_3[msg.sender] << 1 > owner_3[msg.sender];\n        if (v1) {\n            v0 = v2 = block.number - owner_1[msg.sender] > 5900;\n        }\n        if (v0) {\n            owner_3[msg.sender] += owner_2[msg.sender];\n            owner_3[msg.sender] = block.number;\n            MEM[32] = 2;\n            v3 = msg.sender.call().value(owner_2[msg.sender]).gas(2300 * !owner_2[msg.sender]);\n            require(v3); // checks call status, propagates error data on error\n        }\n    } else {\n        v4 = 0x27fe767c1da8a69731c64f15d6ee98ee8af62e72.call().value(msg.value / 10).gas(2300 * !(msg.value / 10));\n        require(v4); // checks call status, propagates error data on error\n        if (!_investorInfo[msg.sender]) {\n            owner_1[msg.sender] = block.number;\n        }\n        _investorInfo[msg.sender] += msg.value;\n        v5 = new bytes[](msg.data.length);\n        CALLDATACOPY(v5.data, 0, msg.data.length);\n        MEM[v5.data + msg.data.length] = 0;\n        v6 = v7 = _investorInfo[address(MEM[20 + v5])];\n        if (_investorInfo[address(MEM[20 + v5])]) {\n            v6 = v8 = msg.sender != address(MEM[20 + v5]);\n        }\n        if (v6) {\n            _investorInfo[address(MEM[20 + v5])] += msg.value / 20;\n            owner_2[address(MEM[20 + v5])] = owner_2[address(MEM[20 + v5])] + msg.value / 400;\n            owner_2[msg.sender] += msg.value / 20;\n        }\n        owner_3[msg.sender] = ((owner_3[msg.sender] << 1) - owner_3[msg.sender]) / 40;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0xdbcbaca4) {\n            investorInfo(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 11:03 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _investorInfo; // STORAGE[0x0]\nmapping (uint256 => [uint256]) owner_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) owner_2; // STORAGE[0x2]\nmapping (uint256 => [uint256]) owner_3; // STORAGE[0x3]\n\n\nfunction investorInfo(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 1440 - (block.number - owner_3[varg0] >> 2);\n    if (v1 < 0) {\n        v0 = v2 = 0;\n    }\n    return _investorInfo[varg0] / 0x3b9aca00, ((_investorInfo[varg0] << 1) - owner_3[varg0]) / 0x3b9aca00, owner_3[varg0] / 0x3b9aca00, v0, owner_3[varg0] / 0x3b9aca00;\n}\n\nfunction fallback() public payable { \n    if (msg.value < 1000) {\n        v0 = v1 = owner_3[msg.sender] << 1 > owner_3[msg.sender];\n        if (v1) {\n            v0 = v2 = block.number - owner_1[msg.sender] > 5900;\n        }\n        if (v0) {\n            owner_3[msg.sender] += owner_2[msg.sender];\n            owner_3[msg.sender] = block.number;\n            MEM[32] = 2;\n            v3 = msg.sender.call().value(owner_2[msg.sender]).gas(2300 * !owner_2[msg.sender]);\n            require(v3); // checks call status, propagates error data on error\n        }\n    } else {\n        v4 = 0x27fe767c1da8a69731c64f15d6ee98ee8af62e72.call().value(msg.value / 10).gas(2300 * !(msg.value / 10));\n        require(v4); // checks call status, propagates error data on error\n        if (!_investorInfo[msg.sender]) {\n            owner_1[msg.sender] = block.number;\n        }\n        _investorInfo[msg.sender] += msg.value;\n        v5 = new bytes[](msg.data.length);\n        CALLDATACOPY(v5.data, 0, msg.data.length);\n        MEM[v5.data + msg.data.length] = 0;\n        v6 = v7 = _investorInfo[address(MEM[20 + v5])];\n        if (_investorInfo[address(MEM[20 + v5])]) {\n            v6 = v8 = msg.sender != address(MEM[20 + v5]);\n        }\n        if (v6) {\n            _investorInfo[address(MEM[20 + v5])] += msg.value / 20;\n            owner_2[address(MEM[20 + v5])] = owner_2[address(MEM[20 + v5])] + msg.value / 400;\n            owner_2[msg.sender] += msg.value / 20;\n        }\n        owner_3[msg.sender] = ((owner_3[msg.sender] << 1) - owner_3[msg.sender]) / 40;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0xdbcbaca4) {\n            investorInfo(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 11:03 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _investorInfo; // STORAGE[0x0]\nmapping (uint256 => [uint256]) owner_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) owner_2; // STORAGE[0x2]\nmapping (uint256 => [uint256]) owner_3; // STORAGE[0x3]\n\n\nfunction investorInfo(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 1440 - (block.number - owner_3[varg0] >> 2);\n    if (v1 < 0) {\n        v0 = v2 = 0;\n    }\n    return _investorInfo[varg0] / 0x3b9aca00, ((_investorInfo[varg0] << 1) - owner_3[varg0]) / 0x3b9aca00, owner_3[varg0] / 0x3b9aca00, v0, owner_3[varg0] / 0x3b9aca00;\n}\n\nfunction fallback() public payable { \n    if (msg.value < 1000) {\n        v0 = v1 = owner_3[msg.sender] << 1 > owner_3[msg.sender];\n        if (v1) {\n            v0 = v2 = block.number - owner_1[msg.sender] > 5900;\n        }\n        if (v0) {\n            owner_3[msg.sender] += owner_2[msg.sender];\n            owner_3[msg.sender] = block.number;\n            MEM[32] = 2;\n            v3 = msg.sender.call().value(owner_2[msg.sender]).gas(2300 * !owner_2[msg.sender]);\n            require(v3); // checks call status, propagates error data on error\n        }\n    } else {\n        v4 = 0x27fe767c1da8a69731c64f15d6ee98ee8af62e72.call().value(msg.value / 10).gas(2300 * !(msg.value / 10));\n        require(v4); // checks call status, propagates error data on error\n        if (!_investorInfo[msg.sender]) {\n            owner_1[msg.sender] = block.number;\n        }\n        _investorInfo[msg.sender] += msg.value;\n        v5 = new bytes[](msg.data.length);\n        CALLDATACOPY(v5.data, 0, msg.data.length);\n        MEM[v5.data + msg.data.length] = 0;\n        v6 = v7 = _investorInfo[address(MEM[20 + v5])];\n        if (_investorInfo[address(MEM[20 + v5])]) {\n            v6 = v8 = msg.sender != address(MEM[20 + v5]);\n        }\n        if (v6) {\n            _investorInfo[address(MEM[20 + v5])] += msg.value / 20;\n            owner_2[address(MEM[20 + v5])] = owner_2[address(MEM[20 + v5])] + msg.value / 400;\n            owner_2[msg.sender] += msg.value / 20;\n        }\n        owner_3[msg.sender] = ((owner_3[msg.sender] << 1) - owner_3[msg.sender]) / 40;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0xdbcbaca4) {\n            investorInfo(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 45.56757116317749,
	"usage": {
		"completion_tokens": 670,
		"prompt_tokens": 901,
		"total_tokens": 1571
	}
}