{
	"address": "0xb24c5478f747864704b958dfdd6b9b10304ce469",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity version of the decompiled contract:\n\n```solidity\npragma solidity ^0.7.3;\n\ncontract Token {\n    mapping (address => uint256) private _balanceOf;\n    uint256 private _totalSupply;\n    uint256 private _mulFactor;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    string private _name;\n    string private _symbol;\n    uint256 private _decimals;\n    uint256 private _iNITIAL_SUPPLY;\n    uint256 private _iNITIAL_mulFactor;\n    address private _owner;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor() {\n        _owner = msg.sender;\n        // Initialize other variables as needed\n    }\n\n    function name() public view returns(string memory) { \n        return _name; \n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) { \n        _allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n\n    function addNewPotatoCoinsForSale(uint256 amount) public { \n        require(msg.sender == _owner);\n        _balanceOf[_owner] -= amount;\n        _balanceOf[address(this)] += amount;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) { \n        require(amount <= _allowance[sender][msg.sender]);\n        _balanceOf[sender] -= amount;\n        _balanceOf[recipient] += amount;\n        _allowance[sender][msg.sender] -= amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function INITIAL_SUPPLY() public view returns (uint256) { \n        return _iNITIAL_SUPPLY;\n    }\n\n    function decimals() public view returns (uint256) { \n        return _decimals;\n    }\n\n    function mulFactor() public view returns (uint256) { \n        return _mulFactor;\n    }\n\n    function INITIAL_mulFactor() public view returns (uint256) { \n        return _iNITIAL_mulFactor;\n    }\n\n    function balanceOf(address account) public view returns (uint256) { \n        return _balanceOf[account];\n    }\n\n    function destroy() public { \n        require(msg.sender == _owner);\n        selfdestruct(payable(_owner));\n    }\n\n    function owner() public view returns (address) { \n        return _owner;\n    }\n\n    function symbol() public view returns (string memory) { \n        return _symbol;\n    }\n\n    function transferFunds(address recipient, uint256 amount) public { \n        require(msg.sender == _owner);\n        require(amount <= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] -= amount;\n        _balanceOf[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n    }\n\n    function buy() public payable { \n        uint256 amount = msg.value * _mulFactor;\n        _allowance[msg.sender][address(this)] = amount;\n        _balanceOf[msg.sender] += amount;\n        emit Transfer(address(this), msg.sender, amount);\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) { \n        require(amount <= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] -= amount;\n        _balanceOf[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function setMulFactor(uint256 factor) public { \n        require(msg.sender == _owner);\n        _mulFactor = factor;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) { \n        return _allowance[owner][spender];\n    }\n\n    function transferOwnership(address newOwner) public { \n        require(msg.sender == _owner);\n        _owner = newOwner;\n    }\n}\n```\nNote: The original decompiled code has some uncommon and confusing parts, such as usage of `0x739`, `0xf5c`, `0x1275` as function names, which are not valid in Solidity. I've assumed these to be pseudonyms for `transferFrom`, `transfer`, and a `require` statement respectively. Also, function `__function_selector__` and the `buy` function logic are not common practice in Solidity and they've been adapted in the Solidity code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701461422,
	"id": "chatcmpl-8R4865brKXPlbMZ7fSDx3x9Bc8Mr5",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 21:40 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\nuint256 _mulFactor; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x4]\nuint256[] _name; // STORAGE[0x5]\nuint256[] _symbol; // STORAGE[0x6]\nuint256 _decimals; // STORAGE[0x7]\nuint256 _iNITIAL_SUPPLY; // STORAGE[0x8]\nuint256 _iNITIAL_mulFactor; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction 0x1275(uint256 varg0) private { \n    require(varg0);\n    return ;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction addNewPotatoCoinsForSale(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _balanceOf[_owner] = _balanceOf[_owner] - varg0;\n    _balanceOf[address(this)] = _balanceOf[address(this)] + varg0;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = 0x739(varg2, varg1, varg0);\n    return v0;\n}\n\nfunction INITIAL_SUPPLY() public nonPayable { \n    return _iNITIAL_SUPPLY;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction mulFactor() public nonPayable { \n    return _mulFactor;\n}\n\nfunction INITIAL_mulFactor() public nonPayable { \n    return _iNITIAL_mulFactor;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction destroy() public nonPayable { \n    require(msg.sender == _owner);\n    selfdestruct(_owner);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transferFunds(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    v0 = 0xf5c(varg1, varg0);\n}\n\nfunction buy() public payable { \n    v0 = _SafeMul(_mulFactor, msg.value);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    _allowance[msg.sender] = v1;\n    v2 = 0x739(v1, msg.sender, this);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0xf5c(varg1, varg0);\n    return v0;\n}\n\nfunction setMulFactor(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _mulFactor = varg0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    require(v1);\n    return v0;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    0x1275(varg0 > 0);\n    assert(varg0);\n    v0 = varg1 / varg0;\n    assert(varg0);\n    require(varg1 == varg0 * v0 + varg1 % varg0);\n    return v0;\n}\n\nfunction 0x739(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    v0 = address(varg2);\n    v1 = address(varg2);\n    0x1275(varg0 <= _allowance[v1]);\n    v2 = address(varg2);\n    _balanceOf[v2] = _allowance[v1] - varg0;\n    v3 = address(varg1);\n    v4 = _balanceOf[v3] + varg0;\n    0x1275(v4 >= _balanceOf[v3]);\n    v5 = address(varg1);\n    _balanceOf[v5] = v4;\n    0x1275(varg0 <= _allowance[msg.sender]);\n    v6 = address(varg2);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg0;\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return 1;\n}\n\nfunction 0xf5c(uint256 varg0, uint256 varg1) private { \n    0x1275(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = address(varg1);\n    v1 = _balanceOf[v0] + varg0;\n    0x1275(v1 >= _balanceOf[v0]);\n    v2 = address(varg1);\n    _balanceOf[v2] = v1;\n    emit Transfer(msg.sender, address(varg1), varg0);\n    return 1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x2269d2ec == function_selector) {\n            addNewPotatoCoinsForSale(uint256);\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2ff2e9dc == function_selector) {\n            INITIAL_SUPPLY();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ff7f21c == function_selector) {\n            mulFactor();\n        } else if (0x6510cc17 == function_selector) {\n            INITIAL_mulFactor();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x83197ef0 == function_selector) {\n            destroy();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x990dc9db == function_selector) {\n            transferFunds(address,uint256);\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xa9572ac7 == function_selector) {\n            setMulFactor(uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    v0 = _SafeMul(_mulFactor, msg.value);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    _allowance[msg.sender] = v1;\n    v2 = 0x739(v1, msg.sender, this);\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 21:40 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\nuint256 _mulFactor; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x4]\nuint256[] _name; // STORAGE[0x5]\nuint256[] _symbol; // STORAGE[0x6]\nuint256 _decimals; // STORAGE[0x7]\nuint256 _iNITIAL_SUPPLY; // STORAGE[0x8]\nuint256 _iNITIAL_mulFactor; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction 0x1275(uint256 varg0) private { \n    require(varg0);\n    return ;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction addNewPotatoCoinsForSale(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _balanceOf[_owner] = _balanceOf[_owner] - varg0;\n    _balanceOf[address(this)] = _balanceOf[address(this)] + varg0;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = 0x739(varg2, varg1, varg0);\n    return v0;\n}\n\nfunction INITIAL_SUPPLY() public nonPayable { \n    return _iNITIAL_SUPPLY;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction mulFactor() public nonPayable { \n    return _mulFactor;\n}\n\nfunction INITIAL_mulFactor() public nonPayable { \n    return _iNITIAL_mulFactor;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction destroy() public nonPayable { \n    require(msg.sender == _owner);\n    selfdestruct(_owner);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transferFunds(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    v0 = 0xf5c(varg1, varg0);\n}\n\nfunction buy() public payable { \n    v0 = _SafeMul(_mulFactor, msg.value);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    _allowance[msg.sender] = v1;\n    v2 = 0x739(v1, msg.sender, this);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0xf5c(varg1, varg0);\n    return v0;\n}\n\nfunction setMulFactor(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _mulFactor = varg0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    require(v1);\n    return v0;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    0x1275(varg0 > 0);\n    assert(varg0);\n    v0 = varg1 / varg0;\n    assert(varg0);\n    require(varg1 == varg0 * v0 + varg1 % varg0);\n    return v0;\n}\n\nfunction 0x739(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    v0 = address(varg2);\n    v1 = address(varg2);\n    0x1275(varg0 <= _allowance[v1]);\n    v2 = address(varg2);\n    _balanceOf[v2] = _allowance[v1] - varg0;\n    v3 = address(varg1);\n    v4 = _balanceOf[v3] + varg0;\n    0x1275(v4 >= _balanceOf[v3]);\n    v5 = address(varg1);\n    _balanceOf[v5] = v4;\n    0x1275(varg0 <= _allowance[msg.sender]);\n    v6 = address(varg2);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg0;\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return 1;\n}\n\nfunction 0xf5c(uint256 varg0, uint256 varg1) private { \n    0x1275(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = address(varg1);\n    v1 = _balanceOf[v0] + varg0;\n    0x1275(v1 >= _balanceOf[v0]);\n    v2 = address(varg1);\n    _balanceOf[v2] = v1;\n    emit Transfer(msg.sender, address(varg1), varg0);\n    return 1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x2269d2ec == function_selector) {\n            addNewPotatoCoinsForSale(uint256);\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2ff2e9dc == function_selector) {\n            INITIAL_SUPPLY();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ff7f21c == function_selector) {\n            mulFactor();\n        } else if (0x6510cc17 == function_selector) {\n            INITIAL_mulFactor();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x83197ef0 == function_selector) {\n            destroy();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x990dc9db == function_selector) {\n            transferFunds(address,uint256);\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xa9572ac7 == function_selector) {\n            setMulFactor(uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    v0 = _SafeMul(_mulFactor, msg.value);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    _allowance[msg.sender] = v1;\n    v2 = 0x739(v1, msg.sender, this);\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 21:40 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\nuint256 _mulFactor; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x4]\nuint256[] _name; // STORAGE[0x5]\nuint256[] _symbol; // STORAGE[0x6]\nuint256 _decimals; // STORAGE[0x7]\nuint256 _iNITIAL_SUPPLY; // STORAGE[0x8]\nuint256 _iNITIAL_mulFactor; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction 0x1275(uint256 varg0) private { \n    require(varg0);\n    return ;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction addNewPotatoCoinsForSale(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _balanceOf[_owner] = _balanceOf[_owner] - varg0;\n    _balanceOf[address(this)] = _balanceOf[address(this)] + varg0;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = 0x739(varg2, varg1, varg0);\n    return v0;\n}\n\nfunction INITIAL_SUPPLY() public nonPayable { \n    return _iNITIAL_SUPPLY;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction mulFactor() public nonPayable { \n    return _mulFactor;\n}\n\nfunction INITIAL_mulFactor() public nonPayable { \n    return _iNITIAL_mulFactor;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction destroy() public nonPayable { \n    require(msg.sender == _owner);\n    selfdestruct(_owner);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transferFunds(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    v0 = 0xf5c(varg1, varg0);\n}\n\nfunction buy() public payable { \n    v0 = _SafeMul(_mulFactor, msg.value);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    _allowance[msg.sender] = v1;\n    v2 = 0x739(v1, msg.sender, this);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0xf5c(varg1, varg0);\n    return v0;\n}\n\nfunction setMulFactor(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _mulFactor = varg0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    require(v1);\n    return v0;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    0x1275(varg0 > 0);\n    assert(varg0);\n    v0 = varg1 / varg0;\n    assert(varg0);\n    require(varg1 == varg0 * v0 + varg1 % varg0);\n    return v0;\n}\n\nfunction 0x739(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    v0 = address(varg2);\n    v1 = address(varg2);\n    0x1275(varg0 <= _allowance[v1]);\n    v2 = address(varg2);\n    _balanceOf[v2] = _allowance[v1] - varg0;\n    v3 = address(varg1);\n    v4 = _balanceOf[v3] + varg0;\n    0x1275(v4 >= _balanceOf[v3]);\n    v5 = address(varg1);\n    _balanceOf[v5] = v4;\n    0x1275(varg0 <= _allowance[msg.sender]);\n    v6 = address(varg2);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg0;\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return 1;\n}\n\nfunction 0xf5c(uint256 varg0, uint256 varg1) private { \n    0x1275(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = address(varg1);\n    v1 = _balanceOf[v0] + varg0;\n    0x1275(v1 >= _balanceOf[v0]);\n    v2 = address(varg1);\n    _balanceOf[v2] = v1;\n    emit Transfer(msg.sender, address(varg1), varg0);\n    return 1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x2269d2ec == function_selector) {\n            addNewPotatoCoinsForSale(uint256);\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2ff2e9dc == function_selector) {\n            INITIAL_SUPPLY();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ff7f21c == function_selector) {\n            mulFactor();\n        } else if (0x6510cc17 == function_selector) {\n            INITIAL_mulFactor();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x83197ef0 == function_selector) {\n            destroy();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x990dc9db == function_selector) {\n            transferFunds(address,uint256);\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xa9572ac7 == function_selector) {\n            setMulFactor(uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    v0 = _SafeMul(_mulFactor, msg.value);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    _allowance[msg.sender] = v1;\n    v2 = 0x739(v1, msg.sender, this);\n}\n.",
	"status": "1",
	"time_cost": 39.02116298675537,
	"usage": {
		"completion_tokens": 955,
		"prompt_tokens": 2455,
		"total_tokens": 3410
	}
}