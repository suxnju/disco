{
	"address": "0x6d903f6003cca6255d85cca4d3b5e5146dc33925",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code for the given decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    address public admin;\n    address public pendingAdmin;\n    uint256 public delay;\n    uint256 public MAXIMUM_DELAY = 0x278d00;\n    uint256 public MINIMUM_DELAY = 0x02a300;\n    uint256 public GRACE_PERIOD = 0x127500;\n    mapping(bytes32 => bool) public queuedTransactions;\n    \n    function executeTransaction(address target, uint256 value, string memory signature, bytes memory data, uint256 eta) public returns (bytes memory) {\n        require(msg.sender == admin, \"Not admin\");\n        require(queuedTransactions[keccak256(abi.encode(target, value, signature, data, eta))], \"Transaction not found\");\n        require(block.timestamp >= eta, \"Too early to execute\");\n        require(block.timestamp <= eta + GRACE_PERIOD, \"Too late to execute\");\n\n        queuedTransactions[keccak256(abi.encode(target, value, signature, data, eta))] = false;\n\n        (bool success, bytes memory returnData) = target.call.value(value)(data);\n        require(success, \"Transaction execution failed\");\n\n        return returnData;\n    }\n\n    function queueTransaction(address target, uint256 value, string memory signature, bytes memory data, uint256 eta) public returns (bytes32) {\n        require(msg.sender == admin, \"Not admin\");\n        require(eta >= add256(block.timestamp, delay), \"Invalid eta\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = true;\n\n        return txHash;\n    }\n\n    function cancelTransaction(address target, uint256 value, string memory signature, bytes memory data, uint256 eta) public {\n        require(msg.sender == admin, \"Not admin\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = false;\n    }\n\n    function setPendingAdmin(address newPendingAdmin) public {\n        require(msg.sender == admin, \"Not admin\");\n\n        pendingAdmin = newPendingAdmin;\n    }\n\n    function acceptAdmin() public {\n        require(msg.sender == pendingAdmin, \"Not pending admin\");\n\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n    }\n\n    function setDelay(uint256 newDelay) public {\n        require(msg.sender == admin, \"Not admin\");\n        require(newDelay >= MINIMUM_DELAY, \"Delay too short\");\n        require(newDelay <= MAXIMUM_DELAY, \"Delay too long\");\n\n        delay = newDelay;\n    }\n\n    function add256(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"Addition overflow\");\n\n        return c;\n    }\n}\n```\n\nPlease note that EVM (Ethereum Virtual Machine) bytecode can be decompiled into EVM assembly code, not directly into Solidity code. The provided code seems to be a mix of EVM assembly and Solidity-like pseudocode, so the reconstruction into Solidity is an approximation. The actual Solidity code may have differences in structure, variable names, etc. The contract above keeps the original functionality.",
				"role": "assistant"
			}
		}
	],
	"created": 1700470747,
	"id": "chatcmpl-8MuPTrTUPDBMiZEEMQY5pbw9zg3Q3",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { stop(); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x6a42b8f8 > var0) {\n            if (var0 == 0x0825f38f) {\n                // Dispatch table entry for executeTransaction(address,uint256,string,bytes,uint256)\n                var var1 = 0x0204;\n                var var2 = 0x04;\n                var var3 = msg.data.length - var2;\n            \n                if (var3 < 0xa0) { revert(memory[0x00:0x00]); }\n            \n                var1 = executeTransaction(var2, var3);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var1;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var2 = temp0;\n                var3 = var2;\n                var var4 = var3 + 0x40;\n                var var6 = memory[temp1:temp1 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var7 = var6;\n                var var8 = var4;\n                var var9 = var5;\n                var var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_023E:\n                    var temp2 = var6;\n                    var4 = temp2 + var4;\n                    var5 = temp2 & 0x1f;\n                \n                    if (!var5) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var4 - temp3];\n                    } else {\n                        var temp4 = var5;\n                        var temp5 = var4 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_022F:\n                    var temp7 = var10;\n                    memory[temp7 + var8:temp7 + var8 + 0x20] = memory[temp7 + var9:temp7 + var9 + 0x20];\n                    var10 = temp7 + 0x20;\n                \n                    if (var10 >= var7) { goto label_023E; }\n                    else { goto label_022F; }\n                }\n            } else if (var0 == 0x0e18b681) {\n                // Dispatch table entry for acceptAdmin()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00c2;\n                acceptAdmin();\n                stop();\n            } else if (var0 == 0x26782247) {\n                // Dispatch table entry for pendingAdmin()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a3;\n                var2 = pendingAdmin();\n            \n            label_02A3:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x3a66f901) {\n                // Dispatch table entry for queueTransaction(address,uint256,string,bytes,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040c;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0xa0) { revert(memory[0x00:0x00]); }\n            \n                var1 = queueTransaction(var2, var3);\n            \n            label_040C:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n            } else if (var0 == 0x4dd18bf5) {\n                // Dispatch table entry for setPendingAdmin(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00c2;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                setPendingAdmin(var2, var3);\n                stop();\n            } else if (var0 == 0x591fcdfe) {\n                // Dispatch table entry for cancelTransaction(address,uint256,string,bytes,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00c2;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0xa0) { revert(memory[0x00:0x00]); }\n            \n                cancelTransaction(var2, var3);\n                stop();\n            } else { stop(); }\n        } else if (0xc1a287e2 > var0) {\n            if (var0 == 0x6a42b8f8) {\n                // Dispatch table entry for delay()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040c;\n                var2 = delay();\n                goto label_040C;\n            } else if (var0 == 0x7d645fab) {\n                // Dispatch table entry for MAXIMUM_DELAY()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040c;\n                var2 = MAXIMUM_DELAY();\n                goto label_040C;\n            } else if (var0 == 0xb1b43ae5) {\n                // Dispatch table entry for MINIMUM_DELAY()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040c;\n                var2 = MINIMUM_DELAY();\n                goto label_040C;\n            } else { stop(); }\n        } else if (var0 == 0xc1a287e2) {\n            // Dispatch table entry for GRACE_PERIOD()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x040c;\n            var2 = GRACE_PERIOD();\n            goto label_040C;\n        } else if (var0 == 0xe177246e) {\n            // Dispatch table entry for setDelay(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00c2;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            setDelay(var2, var3);\n            stop();\n        } else if (var0 == 0xf2b06537) {\n            // Dispatch table entry for queuedTransactions(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0646;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2 = queuedTransactions(var2, var3);\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = !!var2;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0xf851a440) {\n            // Dispatch table entry for admin()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a3;\n            var2 = admin();\n            goto label_02A3;\n        } else { stop(); }\n    }\n    \n    function executeTransaction(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var temp1 = arg1;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = temp0 + temp1;\n        var var1 = temp0;\n        var var2 = var1 + 0x60;\n        var var3 = msg.data[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1 + var3;\n        var3 = temp2;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var3;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var3 = temp4;\n        var temp5 = var2;\n        var2 = temp3 + 0x20;\n        var var4 = temp5;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var4;\n        var temp7 = var3;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var2:var2 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = var0;\n        var0 = temp8;\n        var temp11 = var1;\n        var1 = temp10;\n        var2 = temp11;\n        var3 = temp6 + 0x20;\n        var4 = msg.data[temp6:temp6 + 0x20];\n    \n        if (var4 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var2 + var4;\n        var4 = temp12;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var4;\n        var temp14 = msg.data[temp13:temp13 + 0x20];\n        var4 = temp14;\n        var temp15 = var3;\n        var3 = temp13 + 0x20;\n        var var5 = temp15;\n    \n        if ((var4 > 0x01 << 0x20) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var temp16 = var4;\n        var temp17 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp17:temp17 + 0x20] = temp16;\n        var temp18 = temp17 + 0x20;\n        memory[temp18:temp18 + temp16] = msg.data[var3:var3 + temp16];\n        memory[temp18 + temp16:temp18 + temp16 + 0x20] = 0x00;\n        var1 = temp17;\n        var2 = msg.data[var5:var5 + 0x20];\n        var3 = 0x60;\n    \n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var4 = 0x00;\n            var5 = arg0;\n            var var6 = arg1;\n            var temp19 = var0;\n            var var7 = temp19;\n            var var8 = var1;\n            var var9 = var2;\n            var temp20 = memory[0x40:0x60] + 0x20;\n            var var10 = temp20;\n            memory[var10:var10 + 0x20] = var5 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n            var temp21 = var10 + 0x20;\n            memory[temp21:temp21 + 0x20] = var6;\n            var temp22 = temp21 + 0x20;\n            var var11 = temp22;\n            var var12 = var11 + 0x20;\n            var temp23 = var12 + 0x20;\n            memory[temp23:temp23 + 0x20] = var9;\n            var temp24 = temp23 + 0x20;\n            memory[var11:var11 + 0x20] = temp24 - var10;\n            memory[temp24:temp24 + 0x20] = memory[var7:var7 + 0x20];\n            var var13 = temp24 + 0x20;\n            var var14 = var7 + 0x20;\n            var var15 = memory[var7:var7 + 0x20];\n            var var16 = var15;\n            var var17 = var13;\n            var var18 = var14;\n            var var19 = 0x00;\n        \n            if (var19 >= var16) {\n            label_072D:\n                var temp25 = var15;\n                var13 = temp25 + var13;\n                var14 = temp25 & 0x1f;\n            \n                if (!var14) {\n                    var temp26 = var13;\n                    memory[var12:var12 + 0x20] = temp26 - var10;\n                    var temp27 = var8;\n                    memory[temp26:temp26 + 0x20] = memory[temp27:temp27 + 0x20];\n                    var13 = temp26 + 0x20;\n                    var14 = temp27 + 0x20;\n                    var15 = memory[temp27:temp27 + 0x20];\n                    var16 = var15;\n                    var17 = var13;\n                    var18 = var14;\n                    var19 = 0x00;\n                \n                    if (var19 >= var16) {\n                    label_078D:\n                        var temp28 = var15;\n                        var13 = temp28 + var13;\n                        var14 = temp28 & 0x1f;\n                    \n                        if (!var14) {\n                            var temp29 = memory[0x40:0x60];\n                            var temp30 = var13;\n                            memory[temp29:temp29 + 0x20] = temp30 - temp29 + ~0x1f;\n                            memory[0x40:0x60] = temp30;\n                            var temp31 = keccak256(memory[temp29 + 0x20:temp29 + 0x20 + memory[temp29:temp29 + 0x20]]);\n                            memory[0x00:0x20] = temp31;\n                            memory[0x20:0x40] = 0x03;\n                            var4 = temp31;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] & 0xff) {\n                            label_082E:\n                                var5 = var2;\n                                var6 = 0x0837;\n                                var6 = func_13E3();\n                            \n                                if (var6 >= var5) {\n                                    var5 = 0x088a;\n                                    var6 = var2;\n                                    var7 = 0x127500;\n                                    var5 = func_13E7(var6, var7);\n                                    var6 = 0x0892;\n                                    var6 = func_13E3();\n                                \n                                    if (var6 <= var5) {\n                                        memory[0x00:0x20] = var4;\n                                        memory[0x20:0x40] = 0x03;\n                                        var temp32 = keccak256(memory[0x00:0x40]);\n                                        storage[temp32] = storage[temp32] & ~0xff;\n                                        var5 = 0x60;\n                                    \n                                        if (memory[var0:var0 + 0x20]) {\n                                            var temp33 = var0;\n                                            var6 = keccak256(memory[temp33 + 0x20:temp33 + 0x20 + memory[temp33:temp33 + 0x20]]);\n                                            var temp34 = var1;\n                                            var7 = temp34;\n                                            var temp35 = memory[0x40:0x60] + 0x20;\n                                            var8 = temp35;\n                                            memory[var8:var8 + 0x20] = var6 & ~((0x01 << 0xe0) - 0x01) & ~((0x01 << 0xe0) - 0x01);\n                                            var9 = var8 + 0x04;\n                                            var10 = var7 + 0x20;\n                                            var11 = memory[var7:var7 + 0x20];\n                                            var12 = var11;\n                                            var13 = var9;\n                                            var14 = var10;\n                                        \n                                            if (var12 < 0x20) {\n                                            label_094D:\n                                                var temp36 = 0x0100 ** (0x20 - var12) - 0x01;\n                                                var temp37 = var13;\n                                                memory[temp37:temp37 + 0x20] = (memory[var14:var14 + 0x20] & ~temp36) | (memory[temp37:temp37 + 0x20] & temp36);\n                                                var temp38 = var11 + var9;\n                                                var temp39 = memory[0x40:0x60];\n                                                memory[temp39:temp39 + 0x20] = temp38 - temp39 - 0x20;\n                                                memory[0x40:0x60] = temp38;\n                                                var5 = temp39;\n                                                var6 = 0x00;\n                                                var7 = 0x60;\n                                                var8 = arg0 & (0x01 << 0xa0) - 0x01;\n                                                var9 = arg1;\n                                                var10 = var5;\n                                                var11 = memory[0x40:0x60];\n                                                var12 = var11;\n                                                var14 = memory[var10:var10 + 0x20];\n                                                var13 = var10 + 0x20;\n                                                var15 = var14;\n                                                var16 = var12;\n                                                var17 = var13;\n                                            \n                                                if (var15 < 0x20) {\n                                                label_09C4:\n                                                    var temp40 = 0x0100 ** (0x20 - var15) - 0x01;\n                                                    var temp41 = var16;\n                                                    memory[temp41:temp41 + 0x20] = (memory[var17:var17 + 0x20] & ~temp40) | (memory[temp41:temp41 + 0x20] & temp40);\n                                                    var temp42 = memory[0x40:0x60];\n                                                    var temp43;\n                                                    temp43, memory[temp42:temp42 + 0x00] = address(var8).call.gas(msg.gas).value(var9)(memory[temp42:temp42 + (var14 + var12) - temp42]);\n                                                    var9 = returndata.length;\n                                                    var10 = var9;\n                                                \n                                                    if (var10 == 0x00) {\n                                                        var7 = 0x60;\n                                                        var6 = var8;\n                                                    \n                                                        if (var6) {\n                                                        label_0A6F:\n                                                            var8 = arg0 & (0x01 << 0xa0) - 0x01;\n                                                            var9 = var4;\n                                                            var10 = 0xa560e3198060a2f10670c1ec5b403077ea6ae93ca8de1c32b451dc1a943cd6e7;\n                                                            var11 = arg1;\n                                                            var temp44 = var0;\n                                                            var12 = temp44;\n                                                            var13 = var1;\n                                                            var14 = var2;\n                                                            var temp45 = memory[0x40:0x60];\n                                                            var15 = temp45;\n                                                            memory[var15:var15 + 0x20] = var11;\n                                                            var temp46 = var15 + 0x20;\n                                                            var16 = temp46;\n                                                            var17 = var16 + 0x20;\n                                                            var temp47 = var17 + 0x20;\n                                                            memory[temp47:temp47 + 0x20] = var14;\n                                                            var temp48 = temp47 + 0x20;\n                                                            memory[var16:var16 + 0x20] = temp48 - var15;\n                                                            memory[temp48:temp48 + 0x20] = memory[var12:var12 + 0x20];\n                                                            var18 = temp48 + 0x20;\n                                                            var var20 = memory[var12:var12 + 0x20];\n                                                            var19 = var12 + 0x20;\n                                                            var var21 = var20;\n                                                            var var22 = var18;\n                                                            var var23 = var19;\n                                                            var var24 = 0x00;\n                                                        \n                                                            if (var24 >= var21) {\n                                                            label_0AEC:\n                                                                var temp49 = var20;\n                                                                var18 = temp49 + var18;\n                                                                var19 = temp49 & 0x1f;\n                                                            \n                                                                if (!var19) {\n                                                                    var temp50 = var18;\n                                                                    memory[var17:var17 + 0x20] = temp50 - var15;\n                                                                    var temp51 = var13;\n                                                                    memory[temp50:temp50 + 0x20] = memory[temp51:temp51 + 0x20];\n                                                                    var18 = temp50 + 0x20;\n                                                                    var20 = memory[temp51:temp51 + 0x20];\n                                                                    var19 = temp51 + 0x20;\n                                                                    var21 = var20;\n                                                                    var22 = var18;\n                                                                    var23 = var19;\n                                                                    var24 = 0x00;\n                                                                \n                                                                    if (var24 >= var21) {\n                                                                    label_0B4C:\n                                                                        var temp52 = var20;\n                                                                        var18 = temp52 + var18;\n                                                                        var19 = temp52 & 0x1f;\n                                                                    \n                                                                        if (!var19) {\n                                                                            var temp53 = memory[0x40:0x60];\n                                                                            log(memory[temp53:temp53 + var18 - temp53], [stack[-10], stack[-11], stack[-12]]);\n                                                                            return var7;\n                                                                        } else {\n                                                                            var temp54 = var19;\n                                                                            var temp55 = var18 - temp54;\n                                                                            memory[temp55:temp55 + 0x20] = ~(0x0100 ** (0x20 - temp54) - 0x01) & memory[temp55:temp55 + 0x20];\n                                                                            var temp56 = memory[0x40:0x60];\n                                                                            log(memory[temp56:temp56 + (temp55 + 0x20) - temp56], [stack[-10], stack[-11], stack[-12]]);\n                                                                            return var7;\n                                                                        }\n                                                                    } else {\n                                                                    label_0B3D:\n                                                                        var temp57 = var24;\n                                                                        memory[temp57 + var22:temp57 + var22 + 0x20] = memory[temp57 + var23:temp57 + var23 + 0x20];\n                                                                        var24 = temp57 + 0x20;\n                                                                    \n                                                                        if (var24 >= var21) { goto label_0B4C; }\n                                                                        else { goto label_0B3D; }\n                                                                    }\n                                                                } else {\n                                                                    var temp58 = var19;\n                                                                    var temp59 = var18 - temp58;\n                                                                    memory[temp59:temp59 + 0x20] = ~(0x0100 ** (0x20 - temp58) - 0x01) & memory[temp59:temp59 + 0x20];\n                                                                    var temp60 = temp59 + 0x20;\n                                                                    memory[var17:var17 + 0x20] = temp60 - var15;\n                                                                    var temp61 = var13;\n                                                                    memory[temp60:temp60 + 0x20] = memory[temp61:temp61 + 0x20];\n                                                                    var18 = temp60 + 0x20;\n                                                                    var20 = memory[temp61:temp61 + 0x20];\n                                                                    var19 = temp61 + 0x20;\n                                                                    var21 = var20;\n                                                                    var22 = var18;\n                                                                    var23 = var19;\n                                                                    var24 = 0x00;\n                                                                \n                                                                    if (var24 >= var21) { goto label_0B4C; }\n                                                                    else { goto label_0B3D; }\n                                                                }\n                                                            } else {\n                                                            label_0ADD:\n                                                                var temp62 = var24;\n                                                                memory[temp62 + var22:temp62 + var22 + 0x20] = memory[temp62 + var23:temp62 + var23 + 0x20];\n                                                                var24 = temp62 + 0x20;\n                                                            \n                                                                if (var24 >= var21) { goto label_0AEC; }\n                                                                else { goto label_0ADD; }\n                                                            }\n                                                        } else {\n                                                        label_0A36:\n                                                            var temp63 = memory[0x40:0x60];\n                                                            memory[temp63:temp63 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n                                                            var temp64 = temp63 + 0x04;\n                                                            var temp65 = temp64 + 0x20;\n                                                            memory[temp64:temp64 + 0x20] = temp65 - temp64;\n                                                            memory[temp65:temp65 + 0x20] = 0x3d;\n                                                            var temp66 = temp65 + 0x20;\n                                                            memory[temp66:temp66 + 0x3d] = code[0x1682:0x16bf];\n                                                            var temp67 = memory[0x40:0x60];\n                                                            revert(memory[temp67:temp67 + (temp66 + 0x40) - temp67]);\n                                                        }\n                                                    } else {\n                                                        var temp68 = memory[0x40:0x60];\n                                                        var9 = temp68;\n                                                        memory[0x40:0x60] = var9 + (returndata.length + 0x3f & ~0x1f);\n                                                        memory[var9:var9 + 0x20] = returndata.length;\n                                                        var temp69 = returndata.length;\n                                                        memory[var9 + 0x20:var9 + 0x20 + temp69] = returndata[0x00:0x00 + temp69];\n                                                        var7 = var9;\n                                                        var6 = var8;\n                                                    \n                                                        if (var6) { goto label_0A6F; }\n                                                        else { goto label_0A36; }\n                                                    }\n                                                } else {\n                                                label_09AE:\n                                                    var temp70 = var17;\n                                                    var temp71 = var16;\n                                                    memory[temp71:temp71 + 0x20] = memory[temp70:temp70 + 0x20];\n                                                    var15 = var15 + ~0x1f;\n                                                    var16 = temp71 + 0x20;\n                                                    var17 = temp70 + 0x20;\n                                                \n                                                    if (var15 < 0x20) { goto label_09C4; }\n                                                    else { goto label_09AE; }\n                                                }\n                                            } else {\n                                            label_0937:\n                                                var temp72 = var14;\n                                                var temp73 = var13;\n                                                memory[temp73:temp73 + 0x20] = memory[temp72:temp72 + 0x20];\n                                                var12 = var12 + ~0x1f;\n                                                var13 = temp73 + 0x20;\n                                                var14 = temp72 + 0x20;\n                                            \n                                                if (var12 < 0x20) { goto label_094D; }\n                                                else { goto label_0937; }\n                                            }\n                                        } else {\n                                            var5 = var1;\n                                            var6 = 0x00;\n                                            var7 = 0x60;\n                                            var8 = arg0 & (0x01 << 0xa0) - 0x01;\n                                            var9 = arg1;\n                                            var temp74 = var5;\n                                            var10 = temp74;\n                                            var11 = memory[0x40:0x60];\n                                            var12 = var11;\n                                            var13 = var10 + 0x20;\n                                            var14 = memory[var10:var10 + 0x20];\n                                            var15 = var14;\n                                            var16 = var12;\n                                            var17 = var13;\n                                        \n                                            if (var15 < 0x20) { goto label_09C4; }\n                                            else { goto label_09AE; }\n                                        }\n                                    } else {\n                                        var temp75 = memory[0x40:0x60];\n                                        memory[temp75:temp75 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n                                        var temp76 = temp75 + 0x04;\n                                        var temp77 = temp76 + 0x20;\n                                        memory[temp76:temp76 + 0x20] = temp77 - temp76;\n                                        memory[temp77:temp77 + 0x20] = 0x33;\n                                        var temp78 = temp77 + 0x20;\n                                        memory[temp78:temp78 + 0x33] = code[0x14bb:0x14ee];\n                                        var temp79 = memory[0x40:0x60];\n                                        revert(memory[temp79:temp79 + (temp78 + 0x40) - temp79]);\n                                    }\n                                } else {\n                                    var temp80 = memory[0x40:0x60];\n                                    memory[temp80:temp80 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n                                    var temp81 = temp80 + 0x04;\n                                    var temp82 = temp81 + 0x20;\n                                    memory[temp81:temp81 + 0x20] = temp82 - temp81;\n                                    memory[temp82:temp82 + 0x20] = 0x45;\n                                    var temp83 = temp82 + 0x20;\n                                    memory[temp83:temp83 + 0x45] = code[0x14ee:0x1533];\n                                    var temp84 = memory[0x40:0x60];\n                                    revert(memory[temp84:temp84 + (temp83 + 0x60) - temp84]);\n                                }\n                            } else {\n                            label_07F5:\n                                var temp85 = memory[0x40:0x60];\n                                memory[temp85:temp85 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n                                var temp86 = temp85 + 0x04;\n                                var temp87 = temp86 + 0x20;\n                                memory[temp86:temp86 + 0x20] = temp87 - temp86;\n                                memory[temp87:temp87 + 0x20] = 0x3d;\n                                var temp88 = temp87 + 0x20;\n                                memory[temp88:temp88 + 0x3d] = code[0x159f:0x15dc];\n                                var temp89 = memory[0x40:0x60];\n                                revert(memory[temp89:temp89 + (temp88 + 0x40) - temp89]);\n                            }\n                        } else {\n                            var temp90 = var14;\n                            var temp91 = var13 - temp90;\n                            memory[temp91:temp91 + 0x20] = ~(0x0100 ** (0x20 - temp90) - 0x01) & memory[temp91:temp91 + 0x20];\n                            var temp92 = temp91 + 0x20;\n                            var temp93 = memory[0x40:0x60];\n                            memory[temp93:temp93 + 0x20] = temp92 - temp93 + ~0x1f;\n                            memory[0x40:0x60] = temp92;\n                            var temp94 = keccak256(memory[temp93 + 0x20:temp93 + 0x20 + memory[temp93:temp93 + 0x20]]);\n                            memory[0x00:0x20] = temp94;\n                            memory[0x20:0x40] = 0x03;\n                            var4 = temp94;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_082E; }\n                            else { goto label_07F5; }\n                        }\n                    } else {\n                    label_077E:\n                        var temp95 = var19;\n                        memory[temp95 + var17:temp95 + var17 + 0x20] = memory[temp95 + var18:temp95 + var18 + 0x20];\n                        var19 = temp95 + 0x20;\n                    \n                        if (var19 >= var16) { goto label_078D; }\n                        else { goto label_077E; }\n                    }\n                } else {\n                    var temp96 = var14;\n                    var temp97 = var13 - temp96;\n                    memory[temp97:temp97 + 0x20] = ~(0x0100 ** (0x20 - temp96) - 0x01) & memory[temp97:temp97 + 0x20];\n                    var temp98 = temp97 + 0x20;\n                    memory[var12:var12 + 0x20] = temp98 - var10;\n                    var temp99 = var8;\n                    memory[temp98:temp98 + 0x20] = memory[temp99:temp99 + 0x20];\n                    var13 = temp98 + 0x20;\n                    var14 = temp99 + 0x20;\n                    var15 = memory[temp99:temp99 + 0x20];\n                    var16 = var15;\n                    var17 = var13;\n                    var18 = var14;\n                    var19 = 0x00;\n                \n                    if (var19 >= var16) { goto label_078D; }\n                    else { goto label_077E; }\n                }\n            } else {\n            label_071E:\n                var temp100 = var19;\n                memory[temp100 + var17:temp100 + var17 + 0x20] = memory[temp100 + var18:temp100 + var18 + 0x20];\n                var19 = temp100 + 0x20;\n            \n                if (var19 >= var16) { goto label_072D; }\n                else { goto label_071E; }\n            }\n        } else {\n            var temp101 = memory[0x40:0x60];\n            memory[temp101:temp101 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp102 = temp101 + 0x04;\n            var temp103 = temp102 + 0x20;\n            memory[temp102:temp102 + 0x20] = temp103 - temp102;\n            memory[temp103:temp103 + 0x20] = 0x38;\n            var temp104 = temp103 + 0x20;\n            memory[temp104:temp104 + 0x38] = code[0x144c:0x1484];\n            var temp105 = memory[0x40:0x60];\n            revert(memory[temp105:temp105 + (temp104 + 0x40) - temp105]);\n        }\n    }\n    \n    function queueTransaction(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var temp1 = arg1;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var1 = temp0;\n        var var0 = var1 + temp1;\n        var var2 = var1 + 0x60;\n        var var3 = msg.data[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1 + var3;\n        var3 = temp2;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var3;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var3 = temp4;\n        var var4 = var2;\n        var2 = temp3 + 0x20;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var4;\n        var temp6 = var3;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + temp6] = msg.data[var2:var2 + temp6];\n        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00;\n        var temp9 = var0;\n        var0 = temp7;\n        var temp10 = var1;\n        var1 = temp9;\n        var2 = temp10;\n        var3 = temp5 + 0x20;\n        var4 = msg.data[temp5:temp5 + 0x20];\n    \n        if (var4 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp11 = var2 + var4;\n        var4 = temp11;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var4;\n        var temp13 = msg.data[temp12:temp12 + 0x20];\n        var4 = temp13;\n        var temp14 = var3;\n        var3 = temp12 + 0x20;\n        var var5 = temp14;\n    \n        if ((var4 > 0x01 << 0x20) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var temp15 = var4;\n        var temp16 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp16 + (temp15 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp16:temp16 + 0x20] = temp15;\n        var temp17 = temp16 + 0x20;\n        memory[temp17:temp17 + temp15] = msg.data[var3:var3 + temp15];\n        memory[temp17 + temp15:temp17 + temp15 + 0x20] = 0x00;\n        var1 = temp16;\n        var2 = msg.data[var5:var5 + 0x20];\n        var3 = 0x00;\n    \n        if (msg.sender == storage[var3] & (0x01 << 0xa0) - 0x01) {\n            var4 = 0x0cac;\n            var5 = storage[0x02];\n            var var6 = 0x0ca0;\n            var6 = func_13E3();\n            var4 = func_0CA0(var5, var6);\n        \n            if (var2 >= var4) {\n                var4 = 0x00;\n                var5 = arg0;\n                var6 = arg1;\n                var temp18 = var0;\n                var var7 = temp18;\n                var var8 = var1;\n                var var9 = var2;\n                var temp19 = memory[0x40:0x60] + 0x20;\n                var var10 = temp19;\n                memory[var10:var10 + 0x20] = var5 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                var temp20 = var10 + 0x20;\n                memory[temp20:temp20 + 0x20] = var6;\n                var temp21 = temp20 + 0x20;\n                var var11 = temp21;\n                var var12 = var11 + 0x20;\n                var temp22 = var12 + 0x20;\n                memory[temp22:temp22 + 0x20] = var9;\n                var temp23 = temp22 + 0x20;\n                memory[var11:var11 + 0x20] = temp23 - var10;\n                memory[temp23:temp23 + 0x20] = memory[var7:var7 + 0x20];\n                var var13 = temp23 + 0x20;\n                var var14 = var7 + 0x20;\n                var var15 = memory[var7:var7 + 0x20];\n                var var16 = var15;\n                var var17 = var13;\n                var var18 = var14;\n                var var19 = 0x00;\n            \n                if (var19 >= var16) {\n                label_0D5C:\n                    var temp24 = var15;\n                    var13 = temp24 + var13;\n                    var14 = temp24 & 0x1f;\n                \n                    if (!var14) {\n                        var temp25 = var13;\n                        memory[var12:var12 + 0x20] = temp25 - var10;\n                        var temp26 = var8;\n                        memory[temp25:temp25 + 0x20] = memory[temp26:temp26 + 0x20];\n                        var13 = temp25 + 0x20;\n                        var15 = memory[temp26:temp26 + 0x20];\n                        var14 = temp26 + 0x20;\n                        var16 = var15;\n                        var17 = var13;\n                        var18 = var14;\n                        var19 = 0x00;\n                    \n                        if (var19 >= var16) {\n                        label_0DBC:\n                            var temp27 = var15;\n                            var13 = temp27 + var13;\n                            var14 = temp27 & 0x1f;\n                        \n                            if (!var14) {\n                                var temp28 = var13;\n                                var temp29 = memory[0x40:0x60];\n                                memory[temp29:temp29 + 0x20] = temp28 - temp29 - 0x20;\n                                memory[0x40:0x60] = temp28;\n                                var temp30 = keccak256(memory[temp29 + 0x20:temp29 + 0x20 + memory[temp29:temp29 + 0x20]]);\n                                var4 = temp30;\n                                memory[0x00:0x20] = var4;\n                                memory[0x20:0x40] = 0x03;\n                                var temp31 = keccak256(memory[0x00:0x40]);\n                                storage[temp31] = (storage[temp31] & ~0xff) | 0x01;\n                                var5 = arg0 & (0x01 << 0xa0) - 0x01;\n                                var6 = var4;\n                                var7 = 0x76e2796dc3a81d57b0e8504b647febcbeeb5f4af818e164f11eef8131a6a763f;\n                                var8 = arg1;\n                                var temp32 = var0;\n                                var9 = temp32;\n                                var10 = var1;\n                                var11 = var2;\n                                var temp33 = memory[0x40:0x60];\n                                var12 = temp33;\n                                memory[var12:var12 + 0x20] = var8;\n                                var temp34 = var12 + 0x20;\n                                var13 = temp34;\n                                var14 = var13 + 0x20;\n                                var temp35 = var14 + 0x20;\n                                memory[temp35:temp35 + 0x20] = var11;\n                                var temp36 = temp35 + 0x20;\n                                memory[var13:var13 + 0x20] = temp36 - var12;\n                                memory[temp36:temp36 + 0x20] = memory[var9:var9 + 0x20];\n                                var15 = temp36 + 0x20;\n                                var16 = var9 + 0x20;\n                                var17 = memory[var9:var9 + 0x20];\n                                var18 = var17;\n                                var19 = var15;\n                                var var20 = var16;\n                                var var21 = 0x00;\n                            \n                                if (var21 >= var18) {\n                                label_0EB4:\n                                    var temp37 = var17;\n                                    var15 = temp37 + var15;\n                                    var16 = temp37 & 0x1f;\n                                \n                                    if (!var16) {\n                                        var temp38 = var15;\n                                        memory[var14:var14 + 0x20] = temp38 - var12;\n                                        var temp39 = var10;\n                                        memory[temp38:temp38 + 0x20] = memory[temp39:temp39 + 0x20];\n                                        var15 = temp38 + 0x20;\n                                        var17 = memory[temp39:temp39 + 0x20];\n                                        var16 = temp39 + 0x20;\n                                        var18 = var17;\n                                        var19 = var15;\n                                        var20 = var16;\n                                        var21 = 0x00;\n                                    \n                                        if (var21 >= var18) {\n                                        label_0F14:\n                                            var temp40 = var17;\n                                            var15 = temp40 + var15;\n                                            var16 = temp40 & 0x1f;\n                                        \n                                            if (!var16) {\n                                                var temp41 = memory[0x40:0x60];\n                                                log(memory[temp41:temp41 + var15 - temp41], [stack[-10], stack[-11], stack[-12]]);\n                                                return var4;\n                                            } else {\n                                                var temp42 = var16;\n                                                var temp43 = var15 - temp42;\n                                                memory[temp43:temp43 + 0x20] = ~(0x0100 ** (0x20 - temp42) - 0x01) & memory[temp43:temp43 + 0x20];\n                                                var temp44 = memory[0x40:0x60];\n                                                log(memory[temp44:temp44 + (temp43 + 0x20) - temp44], [stack[-10], stack[-11], stack[-12]]);\n                                                return var4;\n                                            }\n                                        } else {\n                                        label_0F05:\n                                            var temp45 = var21;\n                                            memory[temp45 + var19:temp45 + var19 + 0x20] = memory[temp45 + var20:temp45 + var20 + 0x20];\n                                            var21 = temp45 + 0x20;\n                                        \n                                            if (var21 >= var18) { goto label_0F14; }\n                                            else { goto label_0F05; }\n                                        }\n                                    } else {\n                                        var temp46 = var16;\n                                        var temp47 = var15 - temp46;\n                                        memory[temp47:temp47 + 0x20] = ~(0x0100 ** (0x20 - temp46) - 0x01) & memory[temp47:temp47 + 0x20];\n                                        var temp48 = temp47 + 0x20;\n                                        memory[var14:var14 + 0x20] = temp48 - var12;\n                                        var temp49 = var10;\n                                        memory[temp48:temp48 + 0x20] = memory[temp49:temp49 + 0x20];\n                                        var15 = temp48 + 0x20;\n                                        var16 = temp49 + 0x20;\n                                        var17 = memory[temp49:temp49 + 0x20];\n                                        var18 = var17;\n                                        var19 = var15;\n                                        var20 = var16;\n                                        var21 = 0x00;\n                                    \n                                        if (var21 >= var18) { goto label_0F14; }\n                                        else { goto label_0F05; }\n                                    }\n                                } else {\n                                label_0EA5:\n                                    var temp50 = var21;\n                                    memory[temp50 + var19:temp50 + var19 + 0x20] = memory[temp50 + var20:temp50 + var20 + 0x20];\n                                    var21 = temp50 + 0x20;\n                                \n                                    if (var21 >= var18) { goto label_0EB4; }\n                                    else { goto label_0EA5; }\n                                }\n                            } else {\n                                var temp51 = var14;\n                                var temp52 = var13 - temp51;\n                                memory[temp52:temp52 + 0x20] = ~(0x0100 ** (0x20 - temp51) - 0x01) & memory[temp52:temp52 + 0x20];\n                                var temp53 = temp52 + 0x20;\n                                var temp54 = memory[0x40:0x60];\n                                memory[temp54:temp54 + 0x20] = temp53 - temp54 - 0x20;\n                                memory[0x40:0x60] = temp53;\n                                var temp55 = keccak256(memory[temp54 + 0x20:temp54 + 0x20 + memory[temp54:temp54 + 0x20]]);\n                                var4 = temp55;\n                                memory[0x00:0x20] = var4;\n                                memory[0x20:0x40] = 0x03;\n                                var temp56 = keccak256(memory[0x00:0x40]);\n                                storage[temp56] = (storage[temp56] & ~0xff) | 0x01;\n                                var5 = arg0 & (0x01 << 0xa0) - 0x01;\n                                var6 = var4;\n                                var7 = 0x76e2796dc3a81d57b0e8504b647febcbeeb5f4af818e164f11eef8131a6a763f;\n                                var8 = arg1;\n                                var temp57 = var0;\n                                var9 = temp57;\n                                var10 = var1;\n                                var11 = var2;\n                                var temp58 = memory[0x40:0x60];\n                                var12 = temp58;\n                                memory[var12:var12 + 0x20] = var8;\n                                var temp59 = var12 + 0x20;\n                                var13 = temp59;\n                                var14 = var13 + 0x20;\n                                var temp60 = var14 + 0x20;\n                                memory[temp60:temp60 + 0x20] = var11;\n                                var temp61 = temp60 + 0x20;\n                                memory[var13:var13 + 0x20] = temp61 - var12;\n                                memory[temp61:temp61 + 0x20] = memory[var9:var9 + 0x20];\n                                var15 = temp61 + 0x20;\n                                var16 = var9 + 0x20;\n                                var17 = memory[var9:var9 + 0x20];\n                                var18 = var17;\n                                var19 = var15;\n                                var20 = var16;\n                                var21 = 0x00;\n                            \n                                if (var21 >= var18) { goto label_0EB4; }\n                                else { goto label_0EA5; }\n                            }\n                        } else {\n                        label_0DAD:\n                            var temp62 = var19;\n                            memory[temp62 + var17:temp62 + var17 + 0x20] = memory[temp62 + var18:temp62 + var18 + 0x20];\n                            var19 = temp62 + 0x20;\n                        \n                            if (var19 >= var16) { goto label_0DBC; }\n                            else { goto label_0DAD; }\n                        }\n                    } else {\n                        var temp63 = var14;\n                        var temp64 = var13 - temp63;\n                        memory[temp64:temp64 + 0x20] = ~(0x0100 ** (0x20 - temp63) - 0x01) & memory[temp64:temp64 + 0x20];\n                        var temp65 = temp64 + 0x20;\n                        memory[var12:var12 + 0x20] = temp65 - var10;\n                        var temp66 = var8;\n                        memory[temp65:temp65 + 0x20] = memory[temp66:temp66 + 0x20];\n                        var13 = temp65 + 0x20;\n                        var14 = temp66 + 0x20;\n                        var15 = memory[temp66:temp66 + 0x20];\n                        var16 = var15;\n                        var17 = var13;\n                        var18 = var14;\n                        var19 = 0x00;\n                    \n                        if (var19 >= var16) { goto label_0DBC; }\n                        else { goto label_0DAD; }\n                    }\n                } else {\n                label_0D4D:\n                    var temp67 = var19;\n                    memory[temp67 + var17:temp67 + var17 + 0x20] = memory[temp67 + var18:temp67 + var18 + 0x20];\n                    var19 = temp67 + 0x20;\n                \n                    if (var19 >= var16) { goto label_0D5C; }\n                    else { goto label_0D4D; }\n                }\n            } else {\n                var temp68 = memory[0x40:0x60];\n                memory[temp68:temp68 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n                var temp69 = temp68 + 0x04;\n                var temp70 = temp69 + 0x20;\n                memory[temp69:temp69 + 0x20] = temp70 - temp69;\n                memory[temp70:temp70 + 0x20] = 0x49;\n                var temp71 = temp70 + 0x20;\n                memory[temp71:temp71 + 0x49] = code[0x16bf:0x1708];\n                var temp72 = memory[0x40:0x60];\n                revert(memory[temp72:temp72 + (temp71 + 0x60) - temp72]);\n            }\n        } else {\n            var temp73 = memory[0x40:0x60];\n            memory[temp73:temp73 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp74 = temp73 + 0x04;\n            var temp75 = temp74 + 0x20;\n            memory[temp74:temp74 + 0x20] = temp75 - temp74;\n            memory[temp75:temp75 + 0x20] = 0x36;\n            var temp76 = temp75 + 0x20;\n            memory[temp76:temp76 + 0x36] = code[0x164c:0x1682];\n            var temp77 = memory[0x40:0x60];\n            revert(memory[temp77:temp77 + (temp76 + 0x40) - temp77]);\n        }\n    }\n    \n    function setPendingAdmin(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n    \n        if (address(this) == msg.sender) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = (temp0 & arg0) | (storage[0x01] & ~((0x01 << 0xa0) - 0x01));\n            storage[0x01] = temp1;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x69d78e38a01985fbb1462961809b4b2d65531bc93b2b94037f3334b82ca4a756, ((stack[-1] & (0x01 << 0xa0) - 0x01) | (storage[0x01] & ~((0x01 << 0xa0) - 0x01))) & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp3 = temp2 + 0x04;\n            var temp4 = temp3 + 0x20;\n            memory[temp3:temp3 + 0x20] = temp4 - temp3;\n            memory[temp4:temp4 + 0x20] = 0x38;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x38] = code[0x1614:0x164c];\n            var temp6 = memory[0x40:0x60];\n            revert(memory[temp6:temp6 + (temp5 + 0x40) - temp6]);\n        }\n    }\n    \n    function cancelTransaction(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var temp1 = arg1;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = temp0 + temp1;\n        var var1 = temp0;\n        var var2 = var1 + 0x60;\n        var var3 = msg.data[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1 + var3;\n        var3 = temp2;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var3;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var3 = temp4;\n        var temp5 = var2;\n        var2 = temp3 + 0x20;\n        var var4 = temp5;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var4;\n        var temp7 = var3;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var2:var2 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = var0;\n        var0 = temp8;\n        var temp11 = var1;\n        var1 = temp10;\n        var2 = temp11;\n        var3 = temp6 + 0x20;\n        var4 = msg.data[temp6:temp6 + 0x20];\n    \n        if (var4 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var2 + var4;\n        var4 = temp12;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var4;\n        var temp14 = msg.data[temp13:temp13 + 0x20];\n        var4 = temp14;\n        var temp15 = var3;\n        var3 = temp13 + 0x20;\n        var var5 = temp15;\n    \n        if ((var4 > 0x01 << 0x20) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var temp16 = var4;\n        var temp17 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp17:temp17 + 0x20] = temp16;\n        var temp18 = temp17 + 0x20;\n        memory[temp18:temp18 + temp16] = msg.data[var3:var3 + temp16];\n        memory[temp18 + temp16:temp18 + temp16 + 0x20] = 0x00;\n        var1 = temp17;\n        var2 = msg.data[var5:var5 + 0x20];\n    \n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var3 = 0x00;\n            var4 = arg0;\n            var5 = arg1;\n            var temp19 = var0;\n            var var6 = temp19;\n            var var7 = var1;\n            var var8 = var2;\n            var temp20 = memory[0x40:0x60] + 0x20;\n            var var9 = temp20;\n            memory[var9:var9 + 0x20] = var4 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n            var temp21 = var9 + 0x20;\n            memory[temp21:temp21 + 0x20] = var5;\n            var temp22 = temp21 + 0x20;\n            var var10 = temp22;\n            var var11 = var10 + 0x20;\n            var temp23 = var11 + 0x20;\n            memory[temp23:temp23 + 0x20] = var8;\n            var temp24 = temp23 + 0x20;\n            memory[var10:var10 + 0x20] = temp24 - var9;\n            memory[temp24:temp24 + 0x20] = memory[var6:var6 + 0x20];\n            var var12 = temp24 + 0x20;\n            var var14 = memory[var6:var6 + 0x20];\n            var var13 = var6 + 0x20;\n            var var15 = var14;\n            var var16 = var12;\n            var var17 = var13;\n            var var18 = 0x00;\n        \n            if (var18 >= var15) {\n            label_10A8:\n                var temp25 = var14;\n                var12 = temp25 + var12;\n                var13 = temp25 & 0x1f;\n            \n                if (!var13) {\n                    var temp26 = var12;\n                    memory[var11:var11 + 0x20] = temp26 - var9;\n                    var temp27 = var7;\n                    memory[temp26:temp26 + 0x20] = memory[temp27:temp27 + 0x20];\n                    var12 = temp26 + 0x20;\n                    var14 = memory[temp27:temp27 + 0x20];\n                    var13 = temp27 + 0x20;\n                    var15 = var14;\n                    var16 = var12;\n                    var17 = var13;\n                    var18 = 0x00;\n                \n                    if (var18 >= var15) {\n                    label_1108:\n                        var temp28 = var14;\n                        var12 = temp28 + var12;\n                        var13 = temp28 & 0x1f;\n                    \n                        if (!var13) {\n                            var temp29 = var12;\n                            var temp30 = memory[0x40:0x60];\n                            memory[temp30:temp30 + 0x20] = temp29 - temp30 - 0x20;\n                            memory[0x40:0x60] = temp29;\n                            var temp31 = keccak256(memory[temp30 + 0x20:temp30 + 0x20 + memory[temp30:temp30 + 0x20]]);\n                            var3 = temp31;\n                            memory[0x00:0x20] = var3;\n                            memory[0x20:0x40] = 0x03;\n                            var temp32 = keccak256(memory[0x00:0x40]);\n                            storage[temp32] = (storage[temp32] & ~0xff) | 0x00;\n                            var4 = arg0 & (0x01 << 0xa0) - 0x01;\n                            var5 = var3;\n                            var6 = 0x2fffc091a501fd91bfbff27141450d3acb40fb8e6d8382b243ec7a812a3aaf87;\n                            var7 = arg1;\n                            var temp33 = var0;\n                            var8 = temp33;\n                            var9 = var1;\n                            var10 = var2;\n                            var temp34 = memory[0x40:0x60];\n                            var11 = temp34;\n                            memory[var11:var11 + 0x20] = var7;\n                            var temp35 = var11 + 0x20;\n                            var12 = temp35;\n                            var13 = var12 + 0x20;\n                            var temp36 = var13 + 0x20;\n                            memory[temp36:temp36 + 0x20] = var10;\n                            var temp37 = temp36 + 0x20;\n                            memory[var12:var12 + 0x20] = temp37 - var11;\n                            memory[temp37:temp37 + 0x20] = memory[var8:var8 + 0x20];\n                            var14 = temp37 + 0x20;\n                            var16 = memory[var8:var8 + 0x20];\n                            var15 = var8 + 0x20;\n                            var17 = var16;\n                            var18 = var14;\n                            var var19 = var15;\n                            var var20 = 0x00;\n                        \n                            if (var20 >= var17) {\n                            label_1200:\n                                var temp38 = var16;\n                                var14 = temp38 + var14;\n                                var15 = temp38 & 0x1f;\n                            \n                                if (!var15) {\n                                    var temp39 = var14;\n                                    memory[var13:var13 + 0x20] = temp39 - var11;\n                                    var temp40 = var9;\n                                    memory[temp39:temp39 + 0x20] = memory[temp40:temp40 + 0x20];\n                                    var14 = temp39 + 0x20;\n                                    var16 = memory[temp40:temp40 + 0x20];\n                                    var15 = temp40 + 0x20;\n                                    var17 = var16;\n                                    var18 = var14;\n                                    var19 = var15;\n                                    var20 = 0x00;\n                                \n                                    if (var20 >= var17) {\n                                    label_1260:\n                                        var temp41 = var16;\n                                        var14 = temp41 + var14;\n                                        var15 = temp41 & 0x1f;\n                                    \n                                        if (!var15) {\n                                            var temp42 = memory[0x40:0x60];\n                                            log(memory[temp42:temp42 + var14 - temp42], [stack[-10], stack[-11], stack[-12]]);\n                                            return;\n                                        } else {\n                                            var temp43 = var15;\n                                            var temp44 = var14 - temp43;\n                                            memory[temp44:temp44 + 0x20] = ~(0x0100 ** (0x20 - temp43) - 0x01) & memory[temp44:temp44 + 0x20];\n                                            var temp45 = memory[0x40:0x60];\n                                            log(memory[temp45:temp45 + (temp44 + 0x20) - temp45], [stack[-10], stack[-11], stack[-12]]);\n                                            return;\n                                        }\n                                    } else {\n                                    label_1251:\n                                        var temp46 = var20;\n                                        memory[temp46 + var18:temp46 + var18 + 0x20] = memory[temp46 + var19:temp46 + var19 + 0x20];\n                                        var20 = temp46 + 0x20;\n                                    \n                                        if (var20 >= var17) { goto label_1260; }\n                                        else { goto label_1251; }\n                                    }\n                                } else {\n                                    var temp47 = var15;\n                                    var temp48 = var14 - temp47;\n                                    memory[temp48:temp48 + 0x20] = ~(0x0100 ** (0x20 - temp47) - 0x01) & memory[temp48:temp48 + 0x20];\n                                    var temp49 = temp48 + 0x20;\n                                    memory[var13:var13 + 0x20] = temp49 - var11;\n                                    var temp50 = var9;\n                                    memory[temp49:temp49 + 0x20] = memory[temp50:temp50 + 0x20];\n                                    var14 = temp49 + 0x20;\n                                    var15 = temp50 + 0x20;\n                                    var16 = memory[temp50:temp50 + 0x20];\n                                    var17 = var16;\n                                    var18 = var14;\n                                    var19 = var15;\n                                    var20 = 0x00;\n                                \n                                    if (var20 >= var17) { goto label_1260; }\n                                    else { goto label_1251; }\n                                }\n                            } else {\n                            label_11F1:\n                                var temp51 = var20;\n                                memory[temp51 + var18:temp51 + var18 + 0x20] = memory[temp51 + var19:temp51 + var19 + 0x20];\n                                var20 = temp51 + 0x20;\n                            \n                                if (var20 >= var17) { goto label_1200; }\n                                else { goto label_11F1; }\n                            }\n                        } else {\n                            var temp52 = var13;\n                            var temp53 = var12 - temp52;\n                            memory[temp53:temp53 + 0x20] = ~(0x0100 ** (0x20 - temp52) - 0x01) & memory[temp53:temp53 + 0x20];\n                            var temp54 = temp53 + 0x20;\n                            var temp55 = memory[0x40:0x60];\n                            memory[temp55:temp55 + 0x20] = temp54 - temp55 - 0x20;\n                            memory[0x40:0x60] = temp54;\n                            var temp56 = keccak256(memory[temp55 + 0x20:temp55 + 0x20 + memory[temp55:temp55 + 0x20]]);\n                            var3 = temp56;\n                            memory[0x00:0x20] = var3;\n                            memory[0x20:0x40] = 0x03;\n                            var temp57 = keccak256(memory[0x00:0x40]);\n                            storage[temp57] = (storage[temp57] & ~0xff) | 0x00;\n                            var4 = arg0 & (0x01 << 0xa0) - 0x01;\n                            var5 = var3;\n                            var6 = 0x2fffc091a501fd91bfbff27141450d3acb40fb8e6d8382b243ec7a812a3aaf87;\n                            var7 = arg1;\n                            var temp58 = var0;\n                            var8 = temp58;\n                            var9 = var1;\n                            var10 = var2;\n                            var temp59 = memory[0x40:0x60];\n                            var11 = temp59;\n                            memory[var11:var11 + 0x20] = var7;\n                            var temp60 = var11 + 0x20;\n                            var12 = temp60;\n                            var13 = var12 + 0x20;\n                            var temp61 = var13 + 0x20;\n                            memory[temp61:temp61 + 0x20] = var10;\n                            var temp62 = temp61 + 0x20;\n                            memory[var12:var12 + 0x20] = temp62 - var11;\n                            memory[temp62:temp62 + 0x20] = memory[var8:var8 + 0x20];\n                            var14 = temp62 + 0x20;\n                            var16 = memory[var8:var8 + 0x20];\n                            var15 = var8 + 0x20;\n                            var17 = var16;\n                            var18 = var14;\n                            var19 = var15;\n                            var20 = 0x00;\n                        \n                            if (var20 >= var17) { goto label_1200; }\n                            else { goto label_11F1; }\n                        }\n                    } else {\n                    label_10F9:\n                        var temp63 = var18;\n                        memory[temp63 + var16:temp63 + var16 + 0x20] = memory[temp63 + var17:temp63 + var17 + 0x20];\n                        var18 = temp63 + 0x20;\n                    \n                        if (var18 >= var15) { goto label_1108; }\n                        else { goto label_10F9; }\n                    }\n                } else {\n                    var temp64 = var13;\n                    var temp65 = var12 - temp64;\n                    memory[temp65:temp65 + 0x20] = ~(0x0100 ** (0x20 - temp64) - 0x01) & memory[temp65:temp65 + 0x20];\n                    var temp66 = temp65 + 0x20;\n                    memory[var11:var11 + 0x20] = temp66 - var9;\n                    var temp67 = var7;\n                    memory[temp66:temp66 + 0x20] = memory[temp67:temp67 + 0x20];\n                    var12 = temp66 + 0x20;\n                    var13 = temp67 + 0x20;\n                    var14 = memory[temp67:temp67 + 0x20];\n                    var15 = var14;\n                    var16 = var12;\n                    var17 = var13;\n                    var18 = 0x00;\n                \n                    if (var18 >= var15) { goto label_1108; }\n                    else { goto label_10F9; }\n                }\n            } else {\n            label_1099:\n                var temp68 = var18;\n                memory[temp68 + var16:temp68 + var16 + 0x20] = memory[temp68 + var17:temp68 + var17 + 0x20];\n                var18 = temp68 + 0x20;\n            \n                if (var18 >= var15) { goto label_10A8; }\n                else { goto label_1099; }\n            }\n        } else {\n            var temp69 = memory[0x40:0x60];\n            memory[temp69:temp69 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp70 = temp69 + 0x04;\n            var temp71 = temp70 + 0x20;\n            memory[temp70:temp70 + 0x20] = temp71 - temp70;\n            memory[temp71:temp71 + 0x20] = 0x37;\n            var temp72 = temp71 + 0x20;\n            memory[temp72:temp72 + 0x37] = code[0x1484:0x14bb];\n            var temp73 = memory[0x40:0x60];\n            revert(memory[temp73:temp73 + (temp72 + 0x40) - temp73]);\n        }\n    }\n    \n    function setDelay(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n    \n        if (address(this) != msg.sender) {\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp12 = temp11 + 0x04;\n            var temp13 = temp12 + 0x20;\n            memory[temp12:temp12 + 0x20] = temp13 - temp12;\n            memory[temp13:temp13 + 0x20] = 0x31;\n            var temp14 = temp13 + 0x20;\n            memory[temp14:temp14 + 0x31] = code[0x1708:0x1739];\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + (temp14 + 0x40) - temp15]);\n        } else if (arg0 < 0x02a300) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp7 = temp6 + 0x04;\n            var temp8 = temp7 + 0x20;\n            memory[temp7:temp7 + 0x20] = temp8 - temp7;\n            memory[temp8:temp8 + 0x20] = 0x34;\n            var temp9 = temp8 + 0x20;\n            memory[temp9:temp9 + 0x34] = code[0x1533:0x1567];\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + (temp9 + 0x40) - temp10]);\n        } else if (arg0 <= 0x278d00) {\n            var temp0 = arg0;\n            storage[0x02] = temp0;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x948b1f6a42ee138b7e34058ba85a37f716d55ff25ff05a763f15bed6a04c8d2c, stack[-1]]);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp2 = temp1 + 0x04;\n            var temp3 = temp2 + 0x20;\n            memory[temp2:temp2 + 0x20] = temp3 - temp2;\n            memory[temp3:temp3 + 0x20] = 0x38;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x38] = code[0x1567:0x159f];\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + (temp4 + 0x40) - temp5]);\n        }\n    }\n    \n    function queuedTransactions(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function acceptAdmin() {\n        if (msg.sender == storage[0x01] & (0x01 << 0xa0) - 0x01) {\n            var temp0 = ~((0x01 << 0xa0) - 0x01);\n            var temp1 = (temp0 & storage[0x00]) | msg.sender;\n            storage[0x00] = temp1;\n            storage[0x01] = temp0 & storage[0x01];\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c, ((storage[0x00] & ~((0x01 << 0xa0) - 0x01)) | msg.sender) & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp3 = temp2 + 0x04;\n            var temp4 = temp3 + 0x20;\n            memory[temp3:temp3 + 0x20] = temp4 - temp3;\n            memory[temp4:temp4 + 0x20] = 0x38;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x38] = code[0x15dc:0x1614];\n            var temp6 = memory[0x40:0x60];\n            revert(memory[temp6:temp6 + (temp5 + 0x40) - temp6]);\n        }\n    }\n    \n    function pendingAdmin() returns (var r0) { return storage[0x01] & (0x01 << 0xa0) - 0x01; }\n    \n    function func_0CA0(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_13E7(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function delay() returns (var r0) { return storage[0x02]; }\n    \n    function MAXIMUM_DELAY() returns (var r0) { return 0x278d00; }\n    \n    function MINIMUM_DELAY() returns (var r0) { return 0x02a300; }\n    \n    function GRACE_PERIOD() returns (var r0) { return 0x127500; }\n    \n    function admin() returns (var r0) { return storage[0x00] & (0x01 << 0xa0) - 0x01; }\n    \n    function func_13E3() returns (var r0) { return block.timestamp; }\n    \n    function func_13E7(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1b;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { stop(); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x6a42b8f8 > var0) {\n            if (var0 == 0x0825f38f) {\n                // Dispatch table entry for executeTransaction(address,uint256,string,bytes,uint256)\n                var var1 = 0x0204;\n                var var2 = 0x04;\n                var var3 = msg.data.length - var2;\n            \n                if (var3 < 0xa0) { revert(memory[0x00:0x00]); }\n            \n                var1 = executeTransaction(var2, var3);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var1;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var2 = temp0;\n                var3 = var2;\n                var var4 = var3 + 0x40;\n                var var6 = memory[temp1:temp1 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var7 = var6;\n                var var8 = var4;\n                var var9 = var5;\n                var var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_023E:\n                    var temp2 = var6;\n                    var4 = temp2 + var4;\n                    var5 = temp2 & 0x1f;\n                \n                    if (!var5) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var4 - temp3];\n                    } else {\n                        var temp4 = var5;\n                        var temp5 = var4 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_022F:\n                    var temp7 = var10;\n                    memory[temp7 + var8:temp7 + var8 + 0x20] = memory[temp7 + var9:temp7 + var9 + 0x20];\n                    var10 = temp7 + 0x20;\n                \n                    if (var10 >= var7) { goto label_023E; }\n                    else { goto label_022F; }\n                }\n            } else if (var0 == 0x0e18b681) {\n                // Dispatch table entry for acceptAdmin()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00c2;\n                acceptAdmin();\n                stop();\n            } else if (var0 == 0x26782247) {\n                // Dispatch table entry for pendingAdmin()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a3;\n                var2 = pendingAdmin();\n            \n            label_02A3:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x3a66f901) {\n                // Dispatch table entry for queueTransaction(address,uint256,string,bytes,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040c;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0xa0) { revert(memory[0x00:0x00]); }\n            \n                var1 = queueTransaction(var2, var3);\n            \n            label_040C:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n            } else if (var0 == 0x4dd18bf5) {\n                // Dispatch table entry for setPendingAdmin(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00c2;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                setPendingAdmin(var2, var3);\n                stop();\n            } else if (var0 == 0x591fcdfe) {\n                // Dispatch table entry for cancelTransaction(address,uint256,string,bytes,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00c2;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0xa0) { revert(memory[0x00:0x00]); }\n            \n                cancelTransaction(var2, var3);\n                stop();\n            } else { stop(); }\n        } else if (0xc1a287e2 > var0) {\n            if (var0 == 0x6a42b8f8) {\n                // Dispatch table entry for delay()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040c;\n                var2 = delay();\n                goto label_040C;\n            } else if (var0 == 0x7d645fab) {\n                // Dispatch table entry for MAXIMUM_DELAY()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040c;\n                var2 = MAXIMUM_DELAY();\n                goto label_040C;\n            } else if (var0 == 0xb1b43ae5) {\n                // Dispatch table entry for MINIMUM_DELAY()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040c;\n                var2 = MINIMUM_DELAY();\n                goto label_040C;\n            } else { stop(); }\n        } else if (var0 == 0xc1a287e2) {\n            // Dispatch table entry for GRACE_PERIOD()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x040c;\n            var2 = GRACE_PERIOD();\n            goto label_040C;\n        } else if (var0 == 0xe177246e) {\n            // Dispatch table entry for setDelay(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00c2;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            setDelay(var2, var3);\n            stop();\n        } else if (var0 == 0xf2b06537) {\n            // Dispatch table entry for queuedTransactions(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0646;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2 = queuedTransactions(var2, var3);\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = !!var2;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0xf851a440) {\n            // Dispatch table entry for admin()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a3;\n            var2 = admin();\n            goto label_02A3;\n        } else { stop(); }\n    }\n    \n    function executeTransaction(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var temp1 = arg1;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = temp0 + temp1;\n        var var1 = temp0;\n        var var2 = var1 + 0x60;\n        var var3 = msg.data[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1 + var3;\n        var3 = temp2;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var3;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var3 = temp4;\n        var temp5 = var2;\n        var2 = temp3 + 0x20;\n        var var4 = temp5;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var4;\n        var temp7 = var3;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var2:var2 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = var0;\n        var0 = temp8;\n        var temp11 = var1;\n        var1 = temp10;\n        var2 = temp11;\n        var3 = temp6 + 0x20;\n        var4 = msg.data[temp6:temp6 + 0x20];\n    \n        if (var4 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var2 + var4;\n        var4 = temp12;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var4;\n        var temp14 = msg.data[temp13:temp13 + 0x20];\n        var4 = temp14;\n        var temp15 = var3;\n        var3 = temp13 + 0x20;\n        var var5 = temp15;\n    \n        if ((var4 > 0x01 << 0x20) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var temp16 = var4;\n        var temp17 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp17:temp17 + 0x20] = temp16;\n        var temp18 = temp17 + 0x20;\n        memory[temp18:temp18 + temp16] = msg.data[var3:var3 + temp16];\n        memory[temp18 + temp16:temp18 + temp16 + 0x20] = 0x00;\n        var1 = temp17;\n        var2 = msg.data[var5:var5 + 0x20];\n        var3 = 0x60;\n    \n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var4 = 0x00;\n            var5 = arg0;\n            var var6 = arg1;\n            var temp19 = var0;\n            var var7 = temp19;\n            var var8 = var1;\n            var var9 = var2;\n            var temp20 = memory[0x40:0x60] + 0x20;\n            var var10 = temp20;\n            memory[var10:var10 + 0x20] = var5 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n            var temp21 = var10 + 0x20;\n            memory[temp21:temp21 + 0x20] = var6;\n            var temp22 = temp21 + 0x20;\n            var var11 = temp22;\n            var var12 = var11 + 0x20;\n            var temp23 = var12 + 0x20;\n            memory[temp23:temp23 + 0x20] = var9;\n            var temp24 = temp23 + 0x20;\n            memory[var11:var11 + 0x20] = temp24 - var10;\n            memory[temp24:temp24 + 0x20] = memory[var7:var7 + 0x20];\n            var var13 = temp24 + 0x20;\n            var var14 = var7 + 0x20;\n            var var15 = memory[var7:var7 + 0x20];\n            var var16 = var15;\n            var var17 = var13;\n            var var18 = var14;\n            var var19 = 0x00;\n        \n            if (var19 >= var16) {\n            label_072D:\n                var temp25 = var15;\n                var13 = temp25 + var13;\n                var14 = temp25 & 0x1f;\n            \n                if (!var14) {\n                    var temp26 = var13;\n                    memory[var12:var12 + 0x20] = temp26 - var10;\n                    var temp27 = var8;\n                    memory[temp26:temp26 + 0x20] = memory[temp27:temp27 + 0x20];\n                    var13 = temp26 + 0x20;\n                    var14 = temp27 + 0x20;\n                    var15 = memory[temp27:temp27 + 0x20];\n                    var16 = var15;\n                    var17 = var13;\n                    var18 = var14;\n                    var19 = 0x00;\n                \n                    if (var19 >= var16) {\n                    label_078D:\n                        var temp28 = var15;\n                        var13 = temp28 + var13;\n                        var14 = temp28 & 0x1f;\n                    \n                        if (!var14) {\n                            var temp29 = memory[0x40:0x60];\n                            var temp30 = var13;\n                            memory[temp29:temp29 + 0x20] = temp30 - temp29 + ~0x1f;\n                            memory[0x40:0x60] = temp30;\n                            var temp31 = keccak256(memory[temp29 + 0x20:temp29 + 0x20 + memory[temp29:temp29 + 0x20]]);\n                            memory[0x00:0x20] = temp31;\n                            memory[0x20:0x40] = 0x03;\n                            var4 = temp31;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] & 0xff) {\n                            label_082E:\n                                var5 = var2;\n                                var6 = 0x0837;\n                                var6 = func_13E3();\n                            \n                                if (var6 >= var5) {\n                                    var5 = 0x088a;\n                                    var6 = var2;\n                                    var7 = 0x127500;\n                                    var5 = func_13E7(var6, var7);\n                                    var6 = 0x0892;\n                                    var6 = func_13E3();\n                                \n                                    if (var6 <= var5) {\n                                        memory[0x00:0x20] = var4;\n                                        memory[0x20:0x40] = 0x03;\n                                        var temp32 = keccak256(memory[0x00:0x40]);\n                                        storage[temp32] = storage[temp32] & ~0xff;\n                                        var5 = 0x60;\n                                    \n                                        if (memory[var0:var0 + 0x20]) {\n                                            var temp33 = var0;\n                                            var6 = keccak256(memory[temp33 + 0x20:temp33 + 0x20 + memory[temp33:temp33 + 0x20]]);\n                                            var temp34 = var1;\n                                            var7 = temp34;\n                                            var temp35 = memory[0x40:0x60] + 0x20;\n                                            var8 = temp35;\n                                            memory[var8:var8 + 0x20] = var6 & ~((0x01 << 0xe0) - 0x01) & ~((0x01 << 0xe0) - 0x01);\n                                            var9 = var8 + 0x04;\n                                            var10 = var7 + 0x20;\n                                            var11 = memory[var7:var7 + 0x20];\n                                            var12 = var11;\n                                            var13 = var9;\n                                            var14 = var10;\n                                        \n                                            if (var12 < 0x20) {\n                                            label_094D:\n                                                var temp36 = 0x0100 ** (0x20 - var12) - 0x01;\n                                                var temp37 = var13;\n                                                memory[temp37:temp37 + 0x20] = (memory[var14:var14 + 0x20] & ~temp36) | (memory[temp37:temp37 + 0x20] & temp36);\n                                                var temp38 = var11 + var9;\n                                                var temp39 = memory[0x40:0x60];\n                                                memory[temp39:temp39 + 0x20] = temp38 - temp39 - 0x20;\n                                                memory[0x40:0x60] = temp38;\n                                                var5 = temp39;\n                                                var6 = 0x00;\n                                                var7 = 0x60;\n                                                var8 = arg0 & (0x01 << 0xa0) - 0x01;\n                                                var9 = arg1;\n                                                var10 = var5;\n                                                var11 = memory[0x40:0x60];\n                                                var12 = var11;\n                                                var14 = memory[var10:var10 + 0x20];\n                                                var13 = var10 + 0x20;\n                                                var15 = var14;\n                                                var16 = var12;\n                                                var17 = var13;\n                                            \n                                                if (var15 < 0x20) {\n                                                label_09C4:\n                                                    var temp40 = 0x0100 ** (0x20 - var15) - 0x01;\n                                                    var temp41 = var16;\n                                                    memory[temp41:temp41 + 0x20] = (memory[var17:var17 + 0x20] & ~temp40) | (memory[temp41:temp41 + 0x20] & temp40);\n                                                    var temp42 = memory[0x40:0x60];\n                                                    var temp43;\n                                                    temp43, memory[temp42:temp42 + 0x00] = address(var8).call.gas(msg.gas).value(var9)(memory[temp42:temp42 + (var14 + var12) - temp42]);\n                                                    var9 = returndata.length;\n                                                    var10 = var9;\n                                                \n                                                    if (var10 == 0x00) {\n                                                        var7 = 0x60;\n                                                        var6 = var8;\n                                                    \n                                                        if (var6) {\n                                                        label_0A6F:\n                                                            var8 = arg0 & (0x01 << 0xa0) - 0x01;\n                                                            var9 = var4;\n                                                            var10 = 0xa560e3198060a2f10670c1ec5b403077ea6ae93ca8de1c32b451dc1a943cd6e7;\n                                                            var11 = arg1;\n                                                            var temp44 = var0;\n                                                            var12 = temp44;\n                                                            var13 = var1;\n                                                            var14 = var2;\n                                                            var temp45 = memory[0x40:0x60];\n                                                            var15 = temp45;\n                                                            memory[var15:var15 + 0x20] = var11;\n                                                            var temp46 = var15 + 0x20;\n                                                            var16 = temp46;\n                                                            var17 = var16 + 0x20;\n                                                            var temp47 = var17 + 0x20;\n                                                            memory[temp47:temp47 + 0x20] = var14;\n                                                            var temp48 = temp47 + 0x20;\n                                                            memory[var16:var16 + 0x20] = temp48 - var15;\n                                                            memory[temp48:temp48 + 0x20] = memory[var12:var12 + 0x20];\n                                                            var18 = temp48 + 0x20;\n                                                            var var20 = memory[var12:var12 + 0x20];\n                                                            var19 = var12 + 0x20;\n                                                            var var21 = var20;\n                                                            var var22 = var18;\n                                                            var var23 = var19;\n                                                            var var24 = 0x00;\n                                                        \n                                                            if (var24 >= var21) {\n                                                            label_0AEC:\n                                                                var temp49 = var20;\n                                                                var18 = temp49 + var18;\n                                                                var19 = temp49 & 0x1f;\n                                                            \n                                                                if (!var19) {\n                                                                    var temp50 = var18;\n                                                                    memory[var17:var17 + 0x20] = temp50 - var15;\n                                                                    var temp51 = var13;\n                                                                    memory[temp50:temp50 + 0x20] = memory[temp51:temp51 + 0x20];\n                                                                    var18 = temp50 + 0x20;\n                                                                    var20 = memory[temp51:temp51 + 0x20];\n                                                                    var19 = temp51 + 0x20;\n                                                                    var21 = var20;\n                                                                    var22 = var18;\n                                                                    var23 = var19;\n                                                                    var24 = 0x00;\n                                                                \n                                                                    if (var24 >= var21) {\n                                                                    label_0B4C:\n                                                                        var temp52 = var20;\n                                                                        var18 = temp52 + var18;\n                                                                        var19 = temp52 & 0x1f;\n                                                                    \n                                                                        if (!var19) {\n                                                                            var temp53 = memory[0x40:0x60];\n                                                                            log(memory[temp53:temp53 + var18 - temp53], [stack[-10], stack[-11], stack[-12]]);\n                                                                            return var7;\n                                                                        } else {\n                                                                            var temp54 = var19;\n                                                                            var temp55 = var18 - temp54;\n                                                                            memory[temp55:temp55 + 0x20] = ~(0x0100 ** (0x20 - temp54) - 0x01) & memory[temp55:temp55 + 0x20];\n                                                                            var temp56 = memory[0x40:0x60];\n                                                                            log(memory[temp56:temp56 + (temp55 + 0x20) - temp56], [stack[-10], stack[-11], stack[-12]]);\n                                                                            return var7;\n                                                                        }\n                                                                    } else {\n                                                                    label_0B3D:\n                                                                        var temp57 = var24;\n                                                                        memory[temp57 + var22:temp57 + var22 + 0x20] = memory[temp57 + var23:temp57 + var23 + 0x20];\n                                                                        var24 = temp57 + 0x20;\n                                                                    \n                                                                        if (var24 >= var21) { goto label_0B4C; }\n                                                                        else { goto label_0B3D; }\n                                                                    }\n                                                                } else {\n                                                                    var temp58 = var19;\n                                                                    var temp59 = var18 - temp58;\n                                                                    memory[temp59:temp59 + 0x20] = ~(0x0100 ** (0x20 - temp58) - 0x01) & memory[temp59:temp59 + 0x20];\n                                                                    var temp60 = temp59 + 0x20;\n                                                                    memory[var17:var17 + 0x20] = temp60 - var15;\n                                                                    var temp61 = var13;\n                                                                    memory[temp60:temp60 + 0x20] = memory[temp61:temp61 + 0x20];\n                                                                    var18 = temp60 + 0x20;\n                                                                    var20 = memory[temp61:temp61 + 0x20];\n                                                                    var19 = temp61 + 0x20;\n                                                                    var21 = var20;\n                                                                    var22 = var18;\n                                                                    var23 = var19;\n                                                                    var24 = 0x00;\n                                                                \n                                                                    if (var24 >= var21) { goto label_0B4C; }\n                                                                    else { goto label_0B3D; }\n                                                                }\n                                                            } else {\n                                                            label_0ADD:\n                                                                var temp62 = var24;\n                                                                memory[temp62 + var22:temp62 + var22 + 0x20] = memory[temp62 + var23:temp62 + var23 + 0x20];\n                                                                var24 = temp62 + 0x20;\n                                                            \n                                                                if (var24 >= var21) { goto label_0AEC; }\n                                                                else { goto label_0ADD; }\n                                                            }\n                                                        } else {\n                                                        label_0A36:\n                                                            var temp63 = memory[0x40:0x60];\n                                                            memory[temp63:temp63 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n                                                            var temp64 = temp63 + 0x04;\n                                                            var temp65 = temp64 + 0x20;\n                                                            memory[temp64:temp64 + 0x20] = temp65 - temp64;\n                                                            memory[temp65:temp65 + 0x20] = 0x3d;\n                                                            var temp66 = temp65 + 0x20;\n                                                            memory[temp66:temp66 + 0x3d] = code[0x1682:0x16bf];\n                                                            var temp67 = memory[0x40:0x60];\n                                                            revert(memory[temp67:temp67 + (temp66 + 0x40) - temp67]);\n                                                        }\n                                                    } else {\n                                                        var temp68 = memory[0x40:0x60];\n                                                        var9 = temp68;\n                                                        memory[0x40:0x60] = var9 + (returndata.length + 0x3f & ~0x1f);\n                                                        memory[var9:var9 + 0x20] = returndata.length;\n                                                        var temp69 = returndata.length;\n                                                        memory[var9 + 0x20:var9 + 0x20 + temp69] = returndata[0x00:0x00 + temp69];\n                                                        var7 = var9;\n                                                        var6 = var8;\n                                                    \n                                                        if (var6) { goto label_0A6F; }\n                                                        else { goto label_0A36; }\n                                                    }\n                                                } else {\n                                                label_09AE:\n                                                    var temp70 = var17;\n                                                    var temp71 = var16;\n                                                    memory[temp71:temp71 + 0x20] = memory[temp70:temp70 + 0x20];\n                                                    var15 = var15 + ~0x1f;\n                                                    var16 = temp71 + 0x20;\n                                                    var17 = temp70 + 0x20;\n                                                \n                                                    if (var15 < 0x20) { goto label_09C4; }\n                                                    else { goto label_09AE; }\n                                                }\n                                            } else {\n                                            label_0937:\n                                                var temp72 = var14;\n                                                var temp73 = var13;\n                                                memory[temp73:temp73 + 0x20] = memory[temp72:temp72 + 0x20];\n                                                var12 = var12 + ~0x1f;\n                                                var13 = temp73 + 0x20;\n                                                var14 = temp72 + 0x20;\n                                            \n                                                if (var12 < 0x20) { goto label_094D; }\n                                                else { goto label_0937; }\n                                            }\n                                        } else {\n                                            var5 = var1;\n                                            var6 = 0x00;\n                                            var7 = 0x60;\n                                            var8 = arg0 & (0x01 << 0xa0) - 0x01;\n                                            var9 = arg1;\n                                            var temp74 = var5;\n                                            var10 = temp74;\n                                            var11 = memory[0x40:0x60];\n                                            var12 = var11;\n                                            var13 = var10 + 0x20;\n                                            var14 = memory[var10:var10 + 0x20];\n                                            var15 = var14;\n                                            var16 = var12;\n                                            var17 = var13;\n                                        \n                                            if (var15 < 0x20) { goto label_09C4; }\n                                            else { goto label_09AE; }\n                                        }\n                                    } else {\n                                        var temp75 = memory[0x40:0x60];\n                                        memory[temp75:temp75 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n                                        var temp76 = temp75 + 0x04;\n                                        var temp77 = temp76 + 0x20;\n                                        memory[temp76:temp76 + 0x20] = temp77 - temp76;\n                                        memory[temp77:temp77 + 0x20] = 0x33;\n                                        var temp78 = temp77 + 0x20;\n                                        memory[temp78:temp78 + 0x33] = code[0x14bb:0x14ee];\n                                        var temp79 = memory[0x40:0x60];\n                                        revert(memory[temp79:temp79 + (temp78 + 0x40) - temp79]);\n                                    }\n                                } else {\n                                    var temp80 = memory[0x40:0x60];\n                                    memory[temp80:temp80 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n                                    var temp81 = temp80 + 0x04;\n                                    var temp82 = temp81 + 0x20;\n                                    memory[temp81:temp81 + 0x20] = temp82 - temp81;\n                                    memory[temp82:temp82 + 0x20] = 0x45;\n                                    var temp83 = temp82 + 0x20;\n                                    memory[temp83:temp83 + 0x45] = code[0x14ee:0x1533];\n                                    var temp84 = memory[0x40:0x60];\n                                    revert(memory[temp84:temp84 + (temp83 + 0x60) - temp84]);\n                                }\n                            } else {\n                            label_07F5:\n                                var temp85 = memory[0x40:0x60];\n                                memory[temp85:temp85 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n                                var temp86 = temp85 + 0x04;\n                                var temp87 = temp86 + 0x20;\n                                memory[temp86:temp86 + 0x20] = temp87 - temp86;\n                                memory[temp87:temp87 + 0x20] = 0x3d;\n                                var temp88 = temp87 + 0x20;\n                                memory[temp88:temp88 + 0x3d] = code[0x159f:0x15dc];\n                                var temp89 = memory[0x40:0x60];\n                                revert(memory[temp89:temp89 + (temp88 + 0x40) - temp89]);\n                            }\n                        } else {\n                            var temp90 = var14;\n                            var temp91 = var13 - temp90;\n                            memory[temp91:temp91 + 0x20] = ~(0x0100 ** (0x20 - temp90) - 0x01) & memory[temp91:temp91 + 0x20];\n                            var temp92 = temp91 + 0x20;\n                            var temp93 = memory[0x40:0x60];\n                            memory[temp93:temp93 + 0x20] = temp92 - temp93 + ~0x1f;\n                            memory[0x40:0x60] = temp92;\n                            var temp94 = keccak256(memory[temp93 + 0x20:temp93 + 0x20 + memory[temp93:temp93 + 0x20]]);\n                            memory[0x00:0x20] = temp94;\n                            memory[0x20:0x40] = 0x03;\n                            var4 = temp94;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_082E; }\n                            else { goto label_07F5; }\n                        }\n                    } else {\n                    label_077E:\n                        var temp95 = var19;\n                        memory[temp95 + var17:temp95 + var17 + 0x20] = memory[temp95 + var18:temp95 + var18 + 0x20];\n                        var19 = temp95 + 0x20;\n                    \n                        if (var19 >= var16) { goto label_078D; }\n                        else { goto label_077E; }\n                    }\n                } else {\n                    var temp96 = var14;\n                    var temp97 = var13 - temp96;\n                    memory[temp97:temp97 + 0x20] = ~(0x0100 ** (0x20 - temp96) - 0x01) & memory[temp97:temp97 + 0x20];\n                    var temp98 = temp97 + 0x20;\n                    memory[var12:var12 + 0x20] = temp98 - var10;\n                    var temp99 = var8;\n                    memory[temp98:temp98 + 0x20] = memory[temp99:temp99 + 0x20];\n                    var13 = temp98 + 0x20;\n                    var14 = temp99 + 0x20;\n                    var15 = memory[temp99:temp99 + 0x20];\n                    var16 = var15;\n                    var17 = var13;\n                    var18 = var14;\n                    var19 = 0x00;\n                \n                    if (var19 >= var16) { goto label_078D; }\n                    else { goto label_077E; }\n                }\n            } else {\n            label_071E:\n                var temp100 = var19;\n                memory[temp100 + var17:temp100 + var17 + 0x20] = memory[temp100 + var18:temp100 + var18 + 0x20];\n                var19 = temp100 + 0x20;\n            \n                if (var19 >= var16) { goto label_072D; }\n                else { goto label_071E; }\n            }\n        } else {\n            var temp101 = memory[0x40:0x60];\n            memory[temp101:temp101 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp102 = temp101 + 0x04;\n            var temp103 = temp102 + 0x20;\n            memory[temp102:temp102 + 0x20] = temp103 - temp102;\n            memory[temp103:temp103 + 0x20] = 0x38;\n            var temp104 = temp103 + 0x20;\n            memory[temp104:temp104 + 0x38] = code[0x144c:0x1484];\n            var temp105 = memory[0x40:0x60];\n            revert(memory[temp105:temp105 + (temp104 + 0x40) - temp105]);\n        }\n    }\n    \n    function queueTransaction(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var temp1 = arg1;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var1 = temp0;\n        var var0 = var1 + temp1;\n        var var2 = var1 + 0x60;\n        var var3 = msg.data[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1 + var3;\n        var3 = temp2;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var3;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var3 = temp4;\n        var var4 = var2;\n        var2 = temp3 + 0x20;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var4;\n        var temp6 = var3;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + temp6] = msg.data[var2:var2 + temp6];\n        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00;\n        var temp9 = var0;\n        var0 = temp7;\n        var temp10 = var1;\n        var1 = temp9;\n        var2 = temp10;\n        var3 = temp5 + 0x20;\n        var4 = msg.data[temp5:temp5 + 0x20];\n    \n        if (var4 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp11 = var2 + var4;\n        var4 = temp11;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var4;\n        var temp13 = msg.data[temp12:temp12 + 0x20];\n        var4 = temp13;\n        var temp14 = var3;\n        var3 = temp12 + 0x20;\n        var var5 = temp14;\n    \n        if ((var4 > 0x01 << 0x20) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var temp15 = var4;\n        var temp16 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp16 + (temp15 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp16:temp16 + 0x20] = temp15;\n        var temp17 = temp16 + 0x20;\n        memory[temp17:temp17 + temp15] = msg.data[var3:var3 + temp15];\n        memory[temp17 + temp15:temp17 + temp15 + 0x20] = 0x00;\n        var1 = temp16;\n        var2 = msg.data[var5:var5 + 0x20];\n        var3 = 0x00;\n    \n        if (msg.sender == storage[var3] & (0x01 << 0xa0) - 0x01) {\n            var4 = 0x0cac;\n            var5 = storage[0x02];\n            var var6 = 0x0ca0;\n            var6 = func_13E3();\n            var4 = func_0CA0(var5, var6);\n        \n            if (var2 >= var4) {\n                var4 = 0x00;\n                var5 = arg0;\n                var6 = arg1;\n                var temp18 = var0;\n                var var7 = temp18;\n                var var8 = var1;\n                var var9 = var2;\n                var temp19 = memory[0x40:0x60] + 0x20;\n                var var10 = temp19;\n                memory[var10:var10 + 0x20] = var5 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                var temp20 = var10 + 0x20;\n                memory[temp20:temp20 + 0x20] = var6;\n                var temp21 = temp20 + 0x20;\n                var var11 = temp21;\n                var var12 = var11 + 0x20;\n                var temp22 = var12 + 0x20;\n                memory[temp22:temp22 + 0x20] = var9;\n                var temp23 = temp22 + 0x20;\n                memory[var11:var11 + 0x20] = temp23 - var10;\n                memory[temp23:temp23 + 0x20] = memory[var7:var7 + 0x20];\n                var var13 = temp23 + 0x20;\n                var var14 = var7 + 0x20;\n                var var15 = memory[var7:var7 + 0x20];\n                var var16 = var15;\n                var var17 = var13;\n                var var18 = var14;\n                var var19 = 0x00;\n            \n                if (var19 >= var16) {\n                label_0D5C:\n                    var temp24 = var15;\n                    var13 = temp24 + var13;\n                    var14 = temp24 & 0x1f;\n                \n                    if (!var14) {\n                        var temp25 = var13;\n                        memory[var12:var12 + 0x20] = temp25 - var10;\n                        var temp26 = var8;\n                        memory[temp25:temp25 + 0x20] = memory[temp26:temp26 + 0x20];\n                        var13 = temp25 + 0x20;\n                        var15 = memory[temp26:temp26 + 0x20];\n                        var14 = temp26 + 0x20;\n                        var16 = var15;\n                        var17 = var13;\n                        var18 = var14;\n                        var19 = 0x00;\n                    \n                        if (var19 >= var16) {\n                        label_0DBC:\n                            var temp27 = var15;\n                            var13 = temp27 + var13;\n                            var14 = temp27 & 0x1f;\n                        \n                            if (!var14) {\n                                var temp28 = var13;\n                                var temp29 = memory[0x40:0x60];\n                                memory[temp29:temp29 + 0x20] = temp28 - temp29 - 0x20;\n                                memory[0x40:0x60] = temp28;\n                                var temp30 = keccak256(memory[temp29 + 0x20:temp29 + 0x20 + memory[temp29:temp29 + 0x20]]);\n                                var4 = temp30;\n                                memory[0x00:0x20] = var4;\n                                memory[0x20:0x40] = 0x03;\n                                var temp31 = keccak256(memory[0x00:0x40]);\n                                storage[temp31] = (storage[temp31] & ~0xff) | 0x01;\n                                var5 = arg0 & (0x01 << 0xa0) - 0x01;\n                                var6 = var4;\n                                var7 = 0x76e2796dc3a81d57b0e8504b647febcbeeb5f4af818e164f11eef8131a6a763f;\n                                var8 = arg1;\n                                var temp32 = var0;\n                                var9 = temp32;\n                                var10 = var1;\n                                var11 = var2;\n                                var temp33 = memory[0x40:0x60];\n                                var12 = temp33;\n                                memory[var12:var12 + 0x20] = var8;\n                                var temp34 = var12 + 0x20;\n                                var13 = temp34;\n                                var14 = var13 + 0x20;\n                                var temp35 = var14 + 0x20;\n                                memory[temp35:temp35 + 0x20] = var11;\n                                var temp36 = temp35 + 0x20;\n                                memory[var13:var13 + 0x20] = temp36 - var12;\n                                memory[temp36:temp36 + 0x20] = memory[var9:var9 + 0x20];\n                                var15 = temp36 + 0x20;\n                                var16 = var9 + 0x20;\n                                var17 = memory[var9:var9 + 0x20];\n                                var18 = var17;\n                                var19 = var15;\n                                var var20 = var16;\n                                var var21 = 0x00;\n                            \n                                if (var21 >= var18) {\n                                label_0EB4:\n                                    var temp37 = var17;\n                                    var15 = temp37 + var15;\n                                    var16 = temp37 & 0x1f;\n                                \n                                    if (!var16) {\n                                        var temp38 = var15;\n                                        memory[var14:var14 + 0x20] = temp38 - var12;\n                                        var temp39 = var10;\n                                        memory[temp38:temp38 + 0x20] = memory[temp39:temp39 + 0x20];\n                                        var15 = temp38 + 0x20;\n                                        var17 = memory[temp39:temp39 + 0x20];\n                                        var16 = temp39 + 0x20;\n                                        var18 = var17;\n                                        var19 = var15;\n                                        var20 = var16;\n                                        var21 = 0x00;\n                                    \n                                        if (var21 >= var18) {\n                                        label_0F14:\n                                            var temp40 = var17;\n                                            var15 = temp40 + var15;\n                                            var16 = temp40 & 0x1f;\n                                        \n                                            if (!var16) {\n                                                var temp41 = memory[0x40:0x60];\n                                                log(memory[temp41:temp41 + var15 - temp41], [stack[-10], stack[-11], stack[-12]]);\n                                                return var4;\n                                            } else {\n                                                var temp42 = var16;\n                                                var temp43 = var15 - temp42;\n                                                memory[temp43:temp43 + 0x20] = ~(0x0100 ** (0x20 - temp42) - 0x01) & memory[temp43:temp43 + 0x20];\n                                                var temp44 = memory[0x40:0x60];\n                                                log(memory[temp44:temp44 + (temp43 + 0x20) - temp44], [stack[-10], stack[-11], stack[-12]]);\n                                                return var4;\n                                            }\n                                        } else {\n                                        label_0F05:\n                                            var temp45 = var21;\n                                            memory[temp45 + var19:temp45 + var19 + 0x20] = memory[temp45 + var20:temp45 + var20 + 0x20];\n                                            var21 = temp45 + 0x20;\n                                        \n                                            if (var21 >= var18) { goto label_0F14; }\n                                            else { goto label_0F05; }\n                                        }\n                                    } else {\n                                        var temp46 = var16;\n                                        var temp47 = var15 - temp46;\n                                        memory[temp47:temp47 + 0x20] = ~(0x0100 ** (0x20 - temp46) - 0x01) & memory[temp47:temp47 + 0x20];\n                                        var temp48 = temp47 + 0x20;\n                                        memory[var14:var14 + 0x20] = temp48 - var12;\n                                        var temp49 = var10;\n                                        memory[temp48:temp48 + 0x20] = memory[temp49:temp49 + 0x20];\n                                        var15 = temp48 + 0x20;\n                                        var16 = temp49 + 0x20;\n                                        var17 = memory[temp49:temp49 + 0x20];\n                                        var18 = var17;\n                                        var19 = var15;\n                                        var20 = var16;\n                                        var21 = 0x00;\n                                    \n                                        if (var21 >= var18) { goto label_0F14; }\n                                        else { goto label_0F05; }\n                                    }\n                                } else {\n                                label_0EA5:\n                                    var temp50 = var21;\n                                    memory[temp50 + var19:temp50 + var19 + 0x20] = memory[temp50 + var20:temp50 + var20 + 0x20];\n                                    var21 = temp50 + 0x20;\n                                \n                                    if (var21 >= var18) { goto label_0EB4; }\n                                    else { goto label_0EA5; }\n                                }\n                            } else {\n                                var temp51 = var14;\n                                var temp52 = var13 - temp51;\n                                memory[temp52:temp52 + 0x20] = ~(0x0100 ** (0x20 - temp51) - 0x01) & memory[temp52:temp52 + 0x20];\n                                var temp53 = temp52 + 0x20;\n                                var temp54 = memory[0x40:0x60];\n                                memory[temp54:temp54 + 0x20] = temp53 - temp54 - 0x20;\n                                memory[0x40:0x60] = temp53;\n                                var temp55 = keccak256(memory[temp54 + 0x20:temp54 + 0x20 + memory[temp54:temp54 + 0x20]]);\n                                var4 = temp55;\n                                memory[0x00:0x20] = var4;\n                                memory[0x20:0x40] = 0x03;\n                                var temp56 = keccak256(memory[0x00:0x40]);\n                                storage[temp56] = (storage[temp56] & ~0xff) | 0x01;\n                                var5 = arg0 & (0x01 << 0xa0) - 0x01;\n                                var6 = var4;\n                                var7 = 0x76e2796dc3a81d57b0e8504b647febcbeeb5f4af818e164f11eef8131a6a763f;\n                                var8 = arg1;\n                                var temp57 = var0;\n                                var9 = temp57;\n                                var10 = var1;\n                                var11 = var2;\n                                var temp58 = memory[0x40:0x60];\n                                var12 = temp58;\n                                memory[var12:var12 + 0x20] = var8;\n                                var temp59 = var12 + 0x20;\n                                var13 = temp59;\n                                var14 = var13 + 0x20;\n                                var temp60 = var14 + 0x20;\n                                memory[temp60:temp60 + 0x20] = var11;\n                                var temp61 = temp60 + 0x20;\n                                memory[var13:var13 + 0x20] = temp61 - var12;\n                                memory[temp61:temp61 + 0x20] = memory[var9:var9 + 0x20];\n                                var15 = temp61 + 0x20;\n                                var16 = var9 + 0x20;\n                                var17 = memory[var9:var9 + 0x20];\n                                var18 = var17;\n                                var19 = var15;\n                                var20 = var16;\n                                var21 = 0x00;\n                            \n                                if (var21 >= var18) { goto label_0EB4; }\n                                else { goto label_0EA5; }\n                            }\n                        } else {\n                        label_0DAD:\n                            var temp62 = var19;\n                            memory[temp62 + var17:temp62 + var17 + 0x20] = memory[temp62 + var18:temp62 + var18 + 0x20];\n                            var19 = temp62 + 0x20;\n                        \n                            if (var19 >= var16) { goto label_0DBC; }\n                            else { goto label_0DAD; }\n                        }\n                    } else {\n                        var temp63 = var14;\n                        var temp64 = var13 - temp63;\n                        memory[temp64:temp64 + 0x20] = ~(0x0100 ** (0x20 - temp63) - 0x01) & memory[temp64:temp64 + 0x20];\n                        var temp65 = temp64 + 0x20;\n                        memory[var12:var12 + 0x20] = temp65 - var10;\n                        var temp66 = var8;\n                        memory[temp65:temp65 + 0x20] = memory[temp66:temp66 + 0x20];\n                        var13 = temp65 + 0x20;\n                        var14 = temp66 + 0x20;\n                        var15 = memory[temp66:temp66 + 0x20];\n                        var16 = var15;\n                        var17 = var13;\n                        var18 = var14;\n                        var19 = 0x00;\n                    \n                        if (var19 >= var16) { goto label_0DBC; }\n                        else { goto label_0DAD; }\n                    }\n                } else {\n                label_0D4D:\n                    var temp67 = var19;\n                    memory[temp67 + var17:temp67 + var17 + 0x20] = memory[temp67 + var18:temp67 + var18 + 0x20];\n                    var19 = temp67 + 0x20;\n                \n                    if (var19 >= var16) { goto label_0D5C; }\n                    else { goto label_0D4D; }\n                }\n            } else {\n                var temp68 = memory[0x40:0x60];\n                memory[temp68:temp68 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n                var temp69 = temp68 + 0x04;\n                var temp70 = temp69 + 0x20;\n                memory[temp69:temp69 + 0x20] = temp70 - temp69;\n                memory[temp70:temp70 + 0x20] = 0x49;\n                var temp71 = temp70 + 0x20;\n                memory[temp71:temp71 + 0x49] = code[0x16bf:0x1708];\n                var temp72 = memory[0x40:0x60];\n                revert(memory[temp72:temp72 + (temp71 + 0x60) - temp72]);\n            }\n        } else {\n            var temp73 = memory[0x40:0x60];\n            memory[temp73:temp73 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp74 = temp73 + 0x04;\n            var temp75 = temp74 + 0x20;\n            memory[temp74:temp74 + 0x20] = temp75 - temp74;\n            memory[temp75:temp75 + 0x20] = 0x36;\n            var temp76 = temp75 + 0x20;\n            memory[temp76:temp76 + 0x36] = code[0x164c:0x1682];\n            var temp77 = memory[0x40:0x60];\n            revert(memory[temp77:temp77 + (temp76 + 0x40) - temp77]);\n        }\n    }\n    \n    function setPendingAdmin(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n    \n        if (address(this) == msg.sender) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = (temp0 & arg0) | (storage[0x01] & ~((0x01 << 0xa0) - 0x01));\n            storage[0x01] = temp1;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x69d78e38a01985fbb1462961809b4b2d65531bc93b2b94037f3334b82ca4a756, ((stack[-1] & (0x01 << 0xa0) - 0x01) | (storage[0x01] & ~((0x01 << 0xa0) - 0x01))) & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp3 = temp2 + 0x04;\n            var temp4 = temp3 + 0x20;\n            memory[temp3:temp3 + 0x20] = temp4 - temp3;\n            memory[temp4:temp4 + 0x20] = 0x38;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x38] = code[0x1614:0x164c];\n            var temp6 = memory[0x40:0x60];\n            revert(memory[temp6:temp6 + (temp5 + 0x40) - temp6]);\n        }\n    }\n    \n    function cancelTransaction(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var temp1 = arg1;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = temp0 + temp1;\n        var var1 = temp0;\n        var var2 = var1 + 0x60;\n        var var3 = msg.data[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1 + var3;\n        var3 = temp2;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var3;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var3 = temp4;\n        var temp5 = var2;\n        var2 = temp3 + 0x20;\n        var var4 = temp5;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var4;\n        var temp7 = var3;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var2:var2 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = var0;\n        var0 = temp8;\n        var temp11 = var1;\n        var1 = temp10;\n        var2 = temp11;\n        var3 = temp6 + 0x20;\n        var4 = msg.data[temp6:temp6 + 0x20];\n    \n        if (var4 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var2 + var4;\n        var4 = temp12;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var4;\n        var temp14 = msg.data[temp13:temp13 + 0x20];\n        var4 = temp14;\n        var temp15 = var3;\n        var3 = temp13 + 0x20;\n        var var5 = temp15;\n    \n        if ((var4 > 0x01 << 0x20) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var temp16 = var4;\n        var temp17 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp17:temp17 + 0x20] = temp16;\n        var temp18 = temp17 + 0x20;\n        memory[temp18:temp18 + temp16] = msg.data[var3:var3 + temp16];\n        memory[temp18 + temp16:temp18 + temp16 + 0x20] = 0x00;\n        var1 = temp17;\n        var2 = msg.data[var5:var5 + 0x20];\n    \n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var3 = 0x00;\n            var4 = arg0;\n            var5 = arg1;\n            var temp19 = var0;\n            var var6 = temp19;\n            var var7 = var1;\n            var var8 = var2;\n            var temp20 = memory[0x40:0x60] + 0x20;\n            var var9 = temp20;\n            memory[var9:var9 + 0x20] = var4 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n            var temp21 = var9 + 0x20;\n            memory[temp21:temp21 + 0x20] = var5;\n            var temp22 = temp21 + 0x20;\n            var var10 = temp22;\n            var var11 = var10 + 0x20;\n            var temp23 = var11 + 0x20;\n            memory[temp23:temp23 + 0x20] = var8;\n            var temp24 = temp23 + 0x20;\n            memory[var10:var10 + 0x20] = temp24 - var9;\n            memory[temp24:temp24 + 0x20] = memory[var6:var6 + 0x20];\n            var var12 = temp24 + 0x20;\n            var var14 = memory[var6:var6 + 0x20];\n            var var13 = var6 + 0x20;\n            var var15 = var14;\n            var var16 = var12;\n            var var17 = var13;\n            var var18 = 0x00;\n        \n            if (var18 >= var15) {\n            label_10A8:\n                var temp25 = var14;\n                var12 = temp25 + var12;\n                var13 = temp25 & 0x1f;\n            \n                if (!var13) {\n                    var temp26 = var12;\n                    memory[var11:var11 + 0x20] = temp26 - var9;\n                    var temp27 = var7;\n                    memory[temp26:temp26 + 0x20] = memory[temp27:temp27 + 0x20];\n                    var12 = temp26 + 0x20;\n                    var14 = memory[temp27:temp27 + 0x20];\n                    var13 = temp27 + 0x20;\n                    var15 = var14;\n                    var16 = var12;\n                    var17 = var13;\n                    var18 = 0x00;\n                \n                    if (var18 >= var15) {\n                    label_1108:\n                        var temp28 = var14;\n                        var12 = temp28 + var12;\n                        var13 = temp28 & 0x1f;\n                    \n                        if (!var13) {\n                            var temp29 = var12;\n                            var temp30 = memory[0x40:0x60];\n                            memory[temp30:temp30 + 0x20] = temp29 - temp30 - 0x20;\n                            memory[0x40:0x60] = temp29;\n                            var temp31 = keccak256(memory[temp30 + 0x20:temp30 + 0x20 + memory[temp30:temp30 + 0x20]]);\n                            var3 = temp31;\n                            memory[0x00:0x20] = var3;\n                            memory[0x20:0x40] = 0x03;\n                            var temp32 = keccak256(memory[0x00:0x40]);\n                            storage[temp32] = (storage[temp32] & ~0xff) | 0x00;\n                            var4 = arg0 & (0x01 << 0xa0) - 0x01;\n                            var5 = var3;\n                            var6 = 0x2fffc091a501fd91bfbff27141450d3acb40fb8e6d8382b243ec7a812a3aaf87;\n                            var7 = arg1;\n                            var temp33 = var0;\n                            var8 = temp33;\n                            var9 = var1;\n                            var10 = var2;\n                            var temp34 = memory[0x40:0x60];\n                            var11 = temp34;\n                            memory[var11:var11 + 0x20] = var7;\n                            var temp35 = var11 + 0x20;\n                            var12 = temp35;\n                            var13 = var12 + 0x20;\n                            var temp36 = var13 + 0x20;\n                            memory[temp36:temp36 + 0x20] = var10;\n                            var temp37 = temp36 + 0x20;\n                            memory[var12:var12 + 0x20] = temp37 - var11;\n                            memory[temp37:temp37 + 0x20] = memory[var8:var8 + 0x20];\n                            var14 = temp37 + 0x20;\n                            var16 = memory[var8:var8 + 0x20];\n                            var15 = var8 + 0x20;\n                            var17 = var16;\n                            var18 = var14;\n                            var var19 = var15;\n                            var var20 = 0x00;\n                        \n                            if (var20 >= var17) {\n                            label_1200:\n                                var temp38 = var16;\n                                var14 = temp38 + var14;\n                                var15 = temp38 & 0x1f;\n                            \n                                if (!var15) {\n                                    var temp39 = var14;\n                                    memory[var13:var13 + 0x20] = temp39 - var11;\n                                    var temp40 = var9;\n                                    memory[temp39:temp39 + 0x20] = memory[temp40:temp40 + 0x20];\n                                    var14 = temp39 + 0x20;\n                                    var16 = memory[temp40:temp40 + 0x20];\n                                    var15 = temp40 + 0x20;\n                                    var17 = var16;\n                                    var18 = var14;\n                                    var19 = var15;\n                                    var20 = 0x00;\n                                \n                                    if (var20 >= var17) {\n                                    label_1260:\n                                        var temp41 = var16;\n                                        var14 = temp41 + var14;\n                                        var15 = temp41 & 0x1f;\n                                    \n                                        if (!var15) {\n                                            var temp42 = memory[0x40:0x60];\n                                            log(memory[temp42:temp42 + var14 - temp42], [stack[-10], stack[-11], stack[-12]]);\n                                            return;\n                                        } else {\n                                            var temp43 = var15;\n                                            var temp44 = var14 - temp43;\n                                            memory[temp44:temp44 + 0x20] = ~(0x0100 ** (0x20 - temp43) - 0x01) & memory[temp44:temp44 + 0x20];\n                                            var temp45 = memory[0x40:0x60];\n                                            log(memory[temp45:temp45 + (temp44 + 0x20) - temp45], [stack[-10], stack[-11], stack[-12]]);\n                                            return;\n                                        }\n                                    } else {\n                                    label_1251:\n                                        var temp46 = var20;\n                                        memory[temp46 + var18:temp46 + var18 + 0x20] = memory[temp46 + var19:temp46 + var19 + 0x20];\n                                        var20 = temp46 + 0x20;\n                                    \n                                        if (var20 >= var17) { goto label_1260; }\n                                        else { goto label_1251; }\n                                    }\n                                } else {\n                                    var temp47 = var15;\n                                    var temp48 = var14 - temp47;\n                                    memory[temp48:temp48 + 0x20] = ~(0x0100 ** (0x20 - temp47) - 0x01) & memory[temp48:temp48 + 0x20];\n                                    var temp49 = temp48 + 0x20;\n                                    memory[var13:var13 + 0x20] = temp49 - var11;\n                                    var temp50 = var9;\n                                    memory[temp49:temp49 + 0x20] = memory[temp50:temp50 + 0x20];\n                                    var14 = temp49 + 0x20;\n                                    var15 = temp50 + 0x20;\n                                    var16 = memory[temp50:temp50 + 0x20];\n                                    var17 = var16;\n                                    var18 = var14;\n                                    var19 = var15;\n                                    var20 = 0x00;\n                                \n                                    if (var20 >= var17) { goto label_1260; }\n                                    else { goto label_1251; }\n                                }\n                            } else {\n                            label_11F1:\n                                var temp51 = var20;\n                                memory[temp51 + var18:temp51 + var18 + 0x20] = memory[temp51 + var19:temp51 + var19 + 0x20];\n                                var20 = temp51 + 0x20;\n                            \n                                if (var20 >= var17) { goto label_1200; }\n                                else { goto label_11F1; }\n                            }\n                        } else {\n                            var temp52 = var13;\n                            var temp53 = var12 - temp52;\n                            memory[temp53:temp53 + 0x20] = ~(0x0100 ** (0x20 - temp52) - 0x01) & memory[temp53:temp53 + 0x20];\n                            var temp54 = temp53 + 0x20;\n                            var temp55 = memory[0x40:0x60];\n                            memory[temp55:temp55 + 0x20] = temp54 - temp55 - 0x20;\n                            memory[0x40:0x60] = temp54;\n                            var temp56 = keccak256(memory[temp55 + 0x20:temp55 + 0x20 + memory[temp55:temp55 + 0x20]]);\n                            var3 = temp56;\n                            memory[0x00:0x20] = var3;\n                            memory[0x20:0x40] = 0x03;\n                            var temp57 = keccak256(memory[0x00:0x40]);\n                            storage[temp57] = (storage[temp57] & ~0xff) | 0x00;\n                            var4 = arg0 & (0x01 << 0xa0) - 0x01;\n                            var5 = var3;\n                            var6 = 0x2fffc091a501fd91bfbff27141450d3acb40fb8e6d8382b243ec7a812a3aaf87;\n                            var7 = arg1;\n                            var temp58 = var0;\n                            var8 = temp58;\n                            var9 = var1;\n                            var10 = var2;\n                            var temp59 = memory[0x40:0x60];\n                            var11 = temp59;\n                            memory[var11:var11 + 0x20] = var7;\n                            var temp60 = var11 + 0x20;\n                            var12 = temp60;\n                            var13 = var12 + 0x20;\n                            var temp61 = var13 + 0x20;\n                            memory[temp61:temp61 + 0x20] = var10;\n                            var temp62 = temp61 + 0x20;\n                            memory[var12:var12 + 0x20] = temp62 - var11;\n                            memory[temp62:temp62 + 0x20] = memory[var8:var8 + 0x20];\n                            var14 = temp62 + 0x20;\n                            var16 = memory[var8:var8 + 0x20];\n                            var15 = var8 + 0x20;\n                            var17 = var16;\n                            var18 = var14;\n                            var19 = var15;\n                            var20 = 0x00;\n                        \n                            if (var20 >= var17) { goto label_1200; }\n                            else { goto label_11F1; }\n                        }\n                    } else {\n                    label_10F9:\n                        var temp63 = var18;\n                        memory[temp63 + var16:temp63 + var16 + 0x20] = memory[temp63 + var17:temp63 + var17 + 0x20];\n                        var18 = temp63 + 0x20;\n                    \n                        if (var18 >= var15) { goto label_1108; }\n                        else { goto label_10F9; }\n                    }\n                } else {\n                    var temp64 = var13;\n                    var temp65 = var12 - temp64;\n                    memory[temp65:temp65 + 0x20] = ~(0x0100 ** (0x20 - temp64) - 0x01) & memory[temp65:temp65 + 0x20];\n                    var temp66 = temp65 + 0x20;\n                    memory[var11:var11 + 0x20] = temp66 - var9;\n                    var temp67 = var7;\n                    memory[temp66:temp66 + 0x20] = memory[temp67:temp67 + 0x20];\n                    var12 = temp66 + 0x20;\n                    var13 = temp67 + 0x20;\n                    var14 = memory[temp67:temp67 + 0x20];\n                    var15 = var14;\n                    var16 = var12;\n                    var17 = var13;\n                    var18 = 0x00;\n                \n                    if (var18 >= var15) { goto label_1108; }\n                    else { goto label_10F9; }\n                }\n            } else {\n            label_1099:\n                var temp68 = var18;\n                memory[temp68 + var16:temp68 + var16 + 0x20] = memory[temp68 + var17:temp68 + var17 + 0x20];\n                var18 = temp68 + 0x20;\n            \n                if (var18 >= var15) { goto label_10A8; }\n                else { goto label_1099; }\n            }\n        } else {\n            var temp69 = memory[0x40:0x60];\n            memory[temp69:temp69 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp70 = temp69 + 0x04;\n            var temp71 = temp70 + 0x20;\n            memory[temp70:temp70 + 0x20] = temp71 - temp70;\n            memory[temp71:temp71 + 0x20] = 0x37;\n            var temp72 = temp71 + 0x20;\n            memory[temp72:temp72 + 0x37] = code[0x1484:0x14bb];\n            var temp73 = memory[0x40:0x60];\n            revert(memory[temp73:temp73 + (temp72 + 0x40) - temp73]);\n        }\n    }\n    \n    function setDelay(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n    \n        if (address(this) != msg.sender) {\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp12 = temp11 + 0x04;\n            var temp13 = temp12 + 0x20;\n            memory[temp12:temp12 + 0x20] = temp13 - temp12;\n            memory[temp13:temp13 + 0x20] = 0x31;\n            var temp14 = temp13 + 0x20;\n            memory[temp14:temp14 + 0x31] = code[0x1708:0x1739];\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + (temp14 + 0x40) - temp15]);\n        } else if (arg0 < 0x02a300) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp7 = temp6 + 0x04;\n            var temp8 = temp7 + 0x20;\n            memory[temp7:temp7 + 0x20] = temp8 - temp7;\n            memory[temp8:temp8 + 0x20] = 0x34;\n            var temp9 = temp8 + 0x20;\n            memory[temp9:temp9 + 0x34] = code[0x1533:0x1567];\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + (temp9 + 0x40) - temp10]);\n        } else if (arg0 <= 0x278d00) {\n            var temp0 = arg0;\n            storage[0x02] = temp0;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x948b1f6a42ee138b7e34058ba85a37f716d55ff25ff05a763f15bed6a04c8d2c, stack[-1]]);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp2 = temp1 + 0x04;\n            var temp3 = temp2 + 0x20;\n            memory[temp2:temp2 + 0x20] = temp3 - temp2;\n            memory[temp3:temp3 + 0x20] = 0x38;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x38] = code[0x1567:0x159f];\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + (temp4 + 0x40) - temp5]);\n        }\n    }\n    \n    function queuedTransactions(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function acceptAdmin() {\n        if (msg.sender == storage[0x01] & (0x01 << 0xa0) - 0x01) {\n            var temp0 = ~((0x01 << 0xa0) - 0x01);\n            var temp1 = (temp0 & storage[0x00]) | msg.sender;\n            storage[0x00] = temp1;\n            storage[0x01] = temp0 & storage[0x01];\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c, ((storage[0x00] & ~((0x01 << 0xa0) - 0x01)) | msg.sender) & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp3 = temp2 + 0x04;\n            var temp4 = temp3 + 0x20;\n            memory[temp3:temp3 + 0x20] = temp4 - temp3;\n            memory[temp4:temp4 + 0x20] = 0x38;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x38] = code[0x15dc:0x1614];\n            var temp6 = memory[0x40:0x60];\n            revert(memory[temp6:temp6 + (temp5 + 0x40) - temp6]);\n        }\n    }\n    \n    function pendingAdmin() returns (var r0) { return storage[0x01] & (0x01 << 0xa0) - 0x01; }\n    \n    function func_0CA0(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_13E7(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function delay() returns (var r0) { return storage[0x02]; }\n    \n    function MAXIMUM_DELAY() returns (var r0) { return 0x278d00; }\n    \n    function MINIMUM_DELAY() returns (var r0) { return 0x02a300; }\n    \n    function GRACE_PERIOD() returns (var r0) { return 0x127500; }\n    \n    function admin() returns (var r0) { return storage[0x00] & (0x01 << 0xa0) - 0x01; }\n    \n    function func_13E3() returns (var r0) { return block.timestamp; }\n    \n    function func_13E7(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1b;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { stop(); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x6a42b8f8 > var0) {\n            if (var0 == 0x0825f38f) {\n                // Dispatch table entry for executeTransaction(address,uint256,string,bytes,uint256)\n                var var1 = 0x0204;\n                var var2 = 0x04;\n                var var3 = msg.data.length - var2;\n            \n                if (var3 < 0xa0) { revert(memory[0x00:0x00]); }\n            \n                var1 = executeTransaction(var2, var3);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var1;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var2 = temp0;\n                var3 = var2;\n                var var4 = var3 + 0x40;\n                var var6 = memory[temp1:temp1 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var7 = var6;\n                var var8 = var4;\n                var var9 = var5;\n                var var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_023E:\n                    var temp2 = var6;\n                    var4 = temp2 + var4;\n                    var5 = temp2 & 0x1f;\n                \n                    if (!var5) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var4 - temp3];\n                    } else {\n                        var temp4 = var5;\n                        var temp5 = var4 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_022F:\n                    var temp7 = var10;\n                    memory[temp7 + var8:temp7 + var8 + 0x20] = memory[temp7 + var9:temp7 + var9 + 0x20];\n                    var10 = temp7 + 0x20;\n                \n                    if (var10 >= var7) { goto label_023E; }\n                    else { goto label_022F; }\n                }\n            } else if (var0 == 0x0e18b681) {\n                // Dispatch table entry for acceptAdmin()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00c2;\n                acceptAdmin();\n                stop();\n            } else if (var0 == 0x26782247) {\n                // Dispatch table entry for pendingAdmin()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a3;\n                var2 = pendingAdmin();\n            \n            label_02A3:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x3a66f901) {\n                // Dispatch table entry for queueTransaction(address,uint256,string,bytes,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040c;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0xa0) { revert(memory[0x00:0x00]); }\n            \n                var1 = queueTransaction(var2, var3);\n            \n            label_040C:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n            } else if (var0 == 0x4dd18bf5) {\n                // Dispatch table entry for setPendingAdmin(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00c2;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                setPendingAdmin(var2, var3);\n                stop();\n            } else if (var0 == 0x591fcdfe) {\n                // Dispatch table entry for cancelTransaction(address,uint256,string,bytes,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00c2;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0xa0) { revert(memory[0x00:0x00]); }\n            \n                cancelTransaction(var2, var3);\n                stop();\n            } else { stop(); }\n        } else if (0xc1a287e2 > var0) {\n            if (var0 == 0x6a42b8f8) {\n                // Dispatch table entry for delay()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040c;\n                var2 = delay();\n                goto label_040C;\n            } else if (var0 == 0x7d645fab) {\n                // Dispatch table entry for MAXIMUM_DELAY()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040c;\n                var2 = MAXIMUM_DELAY();\n                goto label_040C;\n            } else if (var0 == 0xb1b43ae5) {\n                // Dispatch table entry for MINIMUM_DELAY()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040c;\n                var2 = MINIMUM_DELAY();\n                goto label_040C;\n            } else { stop(); }\n        } else if (var0 == 0xc1a287e2) {\n            // Dispatch table entry for GRACE_PERIOD()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x040c;\n            var2 = GRACE_PERIOD();\n            goto label_040C;\n        } else if (var0 == 0xe177246e) {\n            // Dispatch table entry for setDelay(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00c2;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            setDelay(var2, var3);\n            stop();\n        } else if (var0 == 0xf2b06537) {\n            // Dispatch table entry for queuedTransactions(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0646;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2 = queuedTransactions(var2, var3);\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = !!var2;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0xf851a440) {\n            // Dispatch table entry for admin()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a3;\n            var2 = admin();\n            goto label_02A3;\n        } else { stop(); }\n    }\n    \n    function executeTransaction(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var temp1 = arg1;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = temp0 + temp1;\n        var var1 = temp0;\n        var var2 = var1 + 0x60;\n        var var3 = msg.data[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1 + var3;\n        var3 = temp2;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var3;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var3 = temp4;\n        var temp5 = var2;\n        var2 = temp3 + 0x20;\n        var var4 = temp5;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var4;\n        var temp7 = var3;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var2:var2 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = var0;\n        var0 = temp8;\n        var temp11 = var1;\n        var1 = temp10;\n        var2 = temp11;\n        var3 = temp6 + 0x20;\n        var4 = msg.data[temp6:temp6 + 0x20];\n    \n        if (var4 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var2 + var4;\n        var4 = temp12;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var4;\n        var temp14 = msg.data[temp13:temp13 + 0x20];\n        var4 = temp14;\n        var temp15 = var3;\n        var3 = temp13 + 0x20;\n        var var5 = temp15;\n    \n        if ((var4 > 0x01 << 0x20) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var temp16 = var4;\n        var temp17 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp17:temp17 + 0x20] = temp16;\n        var temp18 = temp17 + 0x20;\n        memory[temp18:temp18 + temp16] = msg.data[var3:var3 + temp16];\n        memory[temp18 + temp16:temp18 + temp16 + 0x20] = 0x00;\n        var1 = temp17;\n        var2 = msg.data[var5:var5 + 0x20];\n        var3 = 0x60;\n    \n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var4 = 0x00;\n            var5 = arg0;\n            var var6 = arg1;\n            var temp19 = var0;\n            var var7 = temp19;\n            var var8 = var1;\n            var var9 = var2;\n            var temp20 = memory[0x40:0x60] + 0x20;\n            var var10 = temp20;\n            memory[var10:var10 + 0x20] = var5 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n            var temp21 = var10 + 0x20;\n            memory[temp21:temp21 + 0x20] = var6;\n            var temp22 = temp21 + 0x20;\n            var var11 = temp22;\n            var var12 = var11 + 0x20;\n            var temp23 = var12 + 0x20;\n            memory[temp23:temp23 + 0x20] = var9;\n            var temp24 = temp23 + 0x20;\n            memory[var11:var11 + 0x20] = temp24 - var10;\n            memory[temp24:temp24 + 0x20] = memory[var7:var7 + 0x20];\n            var var13 = temp24 + 0x20;\n            var var14 = var7 + 0x20;\n            var var15 = memory[var7:var7 + 0x20];\n            var var16 = var15;\n            var var17 = var13;\n            var var18 = var14;\n            var var19 = 0x00;\n        \n            if (var19 >= var16) {\n            label_072D:\n                var temp25 = var15;\n                var13 = temp25 + var13;\n                var14 = temp25 & 0x1f;\n            \n                if (!var14) {\n                    var temp26 = var13;\n                    memory[var12:var12 + 0x20] = temp26 - var10;\n                    var temp27 = var8;\n                    memory[temp26:temp26 + 0x20] = memory[temp27:temp27 + 0x20];\n                    var13 = temp26 + 0x20;\n                    var14 = temp27 + 0x20;\n                    var15 = memory[temp27:temp27 + 0x20];\n                    var16 = var15;\n                    var17 = var13;\n                    var18 = var14;\n                    var19 = 0x00;\n                \n                    if (var19 >= var16) {\n                    label_078D:\n                        var temp28 = var15;\n                        var13 = temp28 + var13;\n                        var14 = temp28 & 0x1f;\n                    \n                        if (!var14) {\n                            var temp29 = memory[0x40:0x60];\n                            var temp30 = var13;\n                            memory[temp29:temp29 + 0x20] = temp30 - temp29 + ~0x1f;\n                            memory[0x40:0x60] = temp30;\n                            var temp31 = keccak256(memory[temp29 + 0x20:temp29 + 0x20 + memory[temp29:temp29 + 0x20]]);\n                            memory[0x00:0x20] = temp31;\n                            memory[0x20:0x40] = 0x03;\n                            var4 = temp31;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] & 0xff) {\n                            label_082E:\n                                var5 = var2;\n                                var6 = 0x0837;\n                                var6 = func_13E3();\n                            \n                                if (var6 >= var5) {\n                                    var5 = 0x088a;\n                                    var6 = var2;\n                                    var7 = 0x127500;\n                                    var5 = func_13E7(var6, var7);\n                                    var6 = 0x0892;\n                                    var6 = func_13E3();\n                                \n                                    if (var6 <= var5) {\n                                        memory[0x00:0x20] = var4;\n                                        memory[0x20:0x40] = 0x03;\n                                        var temp32 = keccak256(memory[0x00:0x40]);\n                                        storage[temp32] = storage[temp32] & ~0xff;\n                                        var5 = 0x60;\n                                    \n                                        if (memory[var0:var0 + 0x20]) {\n                                            var temp33 = var0;\n                                            var6 = keccak256(memory[temp33 + 0x20:temp33 + 0x20 + memory[temp33:temp33 + 0x20]]);\n                                            var temp34 = var1;\n                                            var7 = temp34;\n                                            var temp35 = memory[0x40:0x60] + 0x20;\n                                            var8 = temp35;\n                                            memory[var8:var8 + 0x20] = var6 & ~((0x01 << 0xe0) - 0x01) & ~((0x01 << 0xe0) - 0x01);\n                                            var9 = var8 + 0x04;\n                                            var10 = var7 + 0x20;\n                                            var11 = memory[var7:var7 + 0x20];\n                                            var12 = var11;\n                                            var13 = var9;\n                                            var14 = var10;\n                                        \n                                            if (var12 < 0x20) {\n                                            label_094D:\n                                                var temp36 = 0x0100 ** (0x20 - var12) - 0x01;\n                                                var temp37 = var13;\n                                                memory[temp37:temp37 + 0x20] = (memory[var14:var14 + 0x20] & ~temp36) | (memory[temp37:temp37 + 0x20] & temp36);\n                                                var temp38 = var11 + var9;\n                                                var temp39 = memory[0x40:0x60];\n                                                memory[temp39:temp39 + 0x20] = temp38 - temp39 - 0x20;\n                                                memory[0x40:0x60] = temp38;\n                                                var5 = temp39;\n                                                var6 = 0x00;\n                                                var7 = 0x60;\n                                                var8 = arg0 & (0x01 << 0xa0) - 0x01;\n                                                var9 = arg1;\n                                                var10 = var5;\n                                                var11 = memory[0x40:0x60];\n                                                var12 = var11;\n                                                var14 = memory[var10:var10 + 0x20];\n                                                var13 = var10 + 0x20;\n                                                var15 = var14;\n                                                var16 = var12;\n                                                var17 = var13;\n                                            \n                                                if (var15 < 0x20) {\n                                                label_09C4:\n                                                    var temp40 = 0x0100 ** (0x20 - var15) - 0x01;\n                                                    var temp41 = var16;\n                                                    memory[temp41:temp41 + 0x20] = (memory[var17:var17 + 0x20] & ~temp40) | (memory[temp41:temp41 + 0x20] & temp40);\n                                                    var temp42 = memory[0x40:0x60];\n                                                    var temp43;\n                                                    temp43, memory[temp42:temp42 + 0x00] = address(var8).call.gas(msg.gas).value(var9)(memory[temp42:temp42 + (var14 + var12) - temp42]);\n                                                    var9 = returndata.length;\n                                                    var10 = var9;\n                                                \n                                                    if (var10 == 0x00) {\n                                                        var7 = 0x60;\n                                                        var6 = var8;\n                                                    \n                                                        if (var6) {\n                                                        label_0A6F:\n                                                            var8 = arg0 & (0x01 << 0xa0) - 0x01;\n                                                            var9 = var4;\n                                                            var10 = 0xa560e3198060a2f10670c1ec5b403077ea6ae93ca8de1c32b451dc1a943cd6e7;\n                                                            var11 = arg1;\n                                                            var temp44 = var0;\n                                                            var12 = temp44;\n                                                            var13 = var1;\n                                                            var14 = var2;\n                                                            var temp45 = memory[0x40:0x60];\n                                                            var15 = temp45;\n                                                            memory[var15:var15 + 0x20] = var11;\n                                                            var temp46 = var15 + 0x20;\n                                                            var16 = temp46;\n                                                            var17 = var16 + 0x20;\n                                                            var temp47 = var17 + 0x20;\n                                                            memory[temp47:temp47 + 0x20] = var14;\n                                                            var temp48 = temp47 + 0x20;\n                                                            memory[var16:var16 + 0x20] = temp48 - var15;\n                                                            memory[temp48:temp48 + 0x20] = memory[var12:var12 + 0x20];\n                                                            var18 = temp48 + 0x20;\n                                                            var var20 = memory[var12:var12 + 0x20];\n                                                            var19 = var12 + 0x20;\n                                                            var var21 = var20;\n                                                            var var22 = var18;\n                                                            var var23 = var19;\n                                                            var var24 = 0x00;\n                                                        \n                                                            if (var24 >= var21) {\n                                                            label_0AEC:\n                                                                var temp49 = var20;\n                                                                var18 = temp49 + var18;\n                                                                var19 = temp49 & 0x1f;\n                                                            \n                                                                if (!var19) {\n                                                                    var temp50 = var18;\n                                                                    memory[var17:var17 + 0x20] = temp50 - var15;\n                                                                    var temp51 = var13;\n                                                                    memory[temp50:temp50 + 0x20] = memory[temp51:temp51 + 0x20];\n                                                                    var18 = temp50 + 0x20;\n                                                                    var20 = memory[temp51:temp51 + 0x20];\n                                                                    var19 = temp51 + 0x20;\n                                                                    var21 = var20;\n                                                                    var22 = var18;\n                                                                    var23 = var19;\n                                                                    var24 = 0x00;\n                                                                \n                                                                    if (var24 >= var21) {\n                                                                    label_0B4C:\n                                                                        var temp52 = var20;\n                                                                        var18 = temp52 + var18;\n                                                                        var19 = temp52 & 0x1f;\n                                                                    \n                                                                        if (!var19) {\n                                                                            var temp53 = memory[0x40:0x60];\n                                                                            log(memory[temp53:temp53 + var18 - temp53], [stack[-10], stack[-11], stack[-12]]);\n                                                                            return var7;\n                                                                        } else {\n                                                                            var temp54 = var19;\n                                                                            var temp55 = var18 - temp54;\n                                                                            memory[temp55:temp55 + 0x20] = ~(0x0100 ** (0x20 - temp54) - 0x01) & memory[temp55:temp55 + 0x20];\n                                                                            var temp56 = memory[0x40:0x60];\n                                                                            log(memory[temp56:temp56 + (temp55 + 0x20) - temp56], [stack[-10], stack[-11], stack[-12]]);\n                                                                            return var7;\n                                                                        }\n                                                                    } else {\n                                                                    label_0B3D:\n                                                                        var temp57 = var24;\n                                                                        memory[temp57 + var22:temp57 + var22 + 0x20] = memory[temp57 + var23:temp57 + var23 + 0x20];\n                                                                        var24 = temp57 + 0x20;\n                                                                    \n                                                                        if (var24 >= var21) { goto label_0B4C; }\n                                                                        else { goto label_0B3D; }\n                                                                    }\n                                                                } else {\n                                                                    var temp58 = var19;\n                                                                    var temp59 = var18 - temp58;\n                                                                    memory[temp59:temp59 + 0x20] = ~(0x0100 ** (0x20 - temp58) - 0x01) & memory[temp59:temp59 + 0x20];\n                                                                    var temp60 = temp59 + 0x20;\n                                                                    memory[var17:var17 + 0x20] = temp60 - var15;\n                                                                    var temp61 = var13;\n                                                                    memory[temp60:temp60 + 0x20] = memory[temp61:temp61 + 0x20];\n                                                                    var18 = temp60 + 0x20;\n                                                                    var20 = memory[temp61:temp61 + 0x20];\n                                                                    var19 = temp61 + 0x20;\n                                                                    var21 = var20;\n                                                                    var22 = var18;\n                                                                    var23 = var19;\n                                                                    var24 = 0x00;\n                                                                \n                                                                    if (var24 >= var21) { goto label_0B4C; }\n                                                                    else { goto label_0B3D; }\n                                                                }\n                                                            } else {\n                                                            label_0ADD:\n                                                                var temp62 = var24;\n                                                                memory[temp62 + var22:temp62 + var22 + 0x20] = memory[temp62 + var23:temp62 + var23 + 0x20];\n                                                                var24 = temp62 + 0x20;\n                                                            \n                                                                if (var24 >= var21) { goto label_0AEC; }\n                                                                else { goto label_0ADD; }\n                                                            }\n                                                        } else {\n                                                        label_0A36:\n                                                            var temp63 = memory[0x40:0x60];\n                                                            memory[temp63:temp63 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n                                                            var temp64 = temp63 + 0x04;\n                                                            var temp65 = temp64 + 0x20;\n                                                            memory[temp64:temp64 + 0x20] = temp65 - temp64;\n                                                            memory[temp65:temp65 + 0x20] = 0x3d;\n                                                            var temp66 = temp65 + 0x20;\n                                                            memory[temp66:temp66 + 0x3d] = code[0x1682:0x16bf];\n                                                            var temp67 = memory[0x40:0x60];\n                                                            revert(memory[temp67:temp67 + (temp66 + 0x40) - temp67]);\n                                                        }\n                                                    } else {\n                                                        var temp68 = memory[0x40:0x60];\n                                                        var9 = temp68;\n                                                        memory[0x40:0x60] = var9 + (returndata.length + 0x3f & ~0x1f);\n                                                        memory[var9:var9 + 0x20] = returndata.length;\n                                                        var temp69 = returndata.length;\n                                                        memory[var9 + 0x20:var9 + 0x20 + temp69] = returndata[0x00:0x00 + temp69];\n                                                        var7 = var9;\n                                                        var6 = var8;\n                                                    \n                                                        if (var6) { goto label_0A6F; }\n                                                        else { goto label_0A36; }\n                                                    }\n                                                } else {\n                                                label_09AE:\n                                                    var temp70 = var17;\n                                                    var temp71 = var16;\n                                                    memory[temp71:temp71 + 0x20] = memory[temp70:temp70 + 0x20];\n                                                    var15 = var15 + ~0x1f;\n                                                    var16 = temp71 + 0x20;\n                                                    var17 = temp70 + 0x20;\n                                                \n                                                    if (var15 < 0x20) { goto label_09C4; }\n                                                    else { goto label_09AE; }\n                                                }\n                                            } else {\n                                            label_0937:\n                                                var temp72 = var14;\n                                                var temp73 = var13;\n                                                memory[temp73:temp73 + 0x20] = memory[temp72:temp72 + 0x20];\n                                                var12 = var12 + ~0x1f;\n                                                var13 = temp73 + 0x20;\n                                                var14 = temp72 + 0x20;\n                                            \n                                                if (var12 < 0x20) { goto label_094D; }\n                                                else { goto label_0937; }\n                                            }\n                                        } else {\n                                            var5 = var1;\n                                            var6 = 0x00;\n                                            var7 = 0x60;\n                                            var8 = arg0 & (0x01 << 0xa0) - 0x01;\n                                            var9 = arg1;\n                                            var temp74 = var5;\n                                            var10 = temp74;\n                                            var11 = memory[0x40:0x60];\n                                            var12 = var11;\n                                            var13 = var10 + 0x20;\n                                            var14 = memory[var10:var10 + 0x20];\n                                            var15 = var14;\n                                            var16 = var12;\n                                            var17 = var13;\n                                        \n                                            if (var15 < 0x20) { goto label_09C4; }\n                                            else { goto label_09AE; }\n                                        }\n                                    } else {\n                                        var temp75 = memory[0x40:0x60];\n                                        memory[temp75:temp75 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n                                        var temp76 = temp75 + 0x04;\n                                        var temp77 = temp76 + 0x20;\n                                        memory[temp76:temp76 + 0x20] = temp77 - temp76;\n                                        memory[temp77:temp77 + 0x20] = 0x33;\n                                        var temp78 = temp77 + 0x20;\n                                        memory[temp78:temp78 + 0x33] = code[0x14bb:0x14ee];\n                                        var temp79 = memory[0x40:0x60];\n                                        revert(memory[temp79:temp79 + (temp78 + 0x40) - temp79]);\n                                    }\n                                } else {\n                                    var temp80 = memory[0x40:0x60];\n                                    memory[temp80:temp80 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n                                    var temp81 = temp80 + 0x04;\n                                    var temp82 = temp81 + 0x20;\n                                    memory[temp81:temp81 + 0x20] = temp82 - temp81;\n                                    memory[temp82:temp82 + 0x20] = 0x45;\n                                    var temp83 = temp82 + 0x20;\n                                    memory[temp83:temp83 + 0x45] = code[0x14ee:0x1533];\n                                    var temp84 = memory[0x40:0x60];\n                                    revert(memory[temp84:temp84 + (temp83 + 0x60) - temp84]);\n                                }\n                            } else {\n                            label_07F5:\n                                var temp85 = memory[0x40:0x60];\n                                memory[temp85:temp85 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n                                var temp86 = temp85 + 0x04;\n                                var temp87 = temp86 + 0x20;\n                                memory[temp86:temp86 + 0x20] = temp87 - temp86;\n                                memory[temp87:temp87 + 0x20] = 0x3d;\n                                var temp88 = temp87 + 0x20;\n                                memory[temp88:temp88 + 0x3d] = code[0x159f:0x15dc];\n                                var temp89 = memory[0x40:0x60];\n                                revert(memory[temp89:temp89 + (temp88 + 0x40) - temp89]);\n                            }\n                        } else {\n                            var temp90 = var14;\n                            var temp91 = var13 - temp90;\n                            memory[temp91:temp91 + 0x20] = ~(0x0100 ** (0x20 - temp90) - 0x01) & memory[temp91:temp91 + 0x20];\n                            var temp92 = temp91 + 0x20;\n                            var temp93 = memory[0x40:0x60];\n                            memory[temp93:temp93 + 0x20] = temp92 - temp93 + ~0x1f;\n                            memory[0x40:0x60] = temp92;\n                            var temp94 = keccak256(memory[temp93 + 0x20:temp93 + 0x20 + memory[temp93:temp93 + 0x20]]);\n                            memory[0x00:0x20] = temp94;\n                            memory[0x20:0x40] = 0x03;\n                            var4 = temp94;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_082E; }\n                            else { goto label_07F5; }\n                        }\n                    } else {\n                    label_077E:\n                        var temp95 = var19;\n                        memory[temp95 + var17:temp95 + var17 + 0x20] = memory[temp95 + var18:temp95 + var18 + 0x20];\n                        var19 = temp95 + 0x20;\n                    \n                        if (var19 >= var16) { goto label_078D; }\n                        else { goto label_077E; }\n                    }\n                } else {\n                    var temp96 = var14;\n                    var temp97 = var13 - temp96;\n                    memory[temp97:temp97 + 0x20] = ~(0x0100 ** (0x20 - temp96) - 0x01) & memory[temp97:temp97 + 0x20];\n                    var temp98 = temp97 + 0x20;\n                    memory[var12:var12 + 0x20] = temp98 - var10;\n                    var temp99 = var8;\n                    memory[temp98:temp98 + 0x20] = memory[temp99:temp99 + 0x20];\n                    var13 = temp98 + 0x20;\n                    var14 = temp99 + 0x20;\n                    var15 = memory[temp99:temp99 + 0x20];\n                    var16 = var15;\n                    var17 = var13;\n                    var18 = var14;\n                    var19 = 0x00;\n                \n                    if (var19 >= var16) { goto label_078D; }\n                    else { goto label_077E; }\n                }\n            } else {\n            label_071E:\n                var temp100 = var19;\n                memory[temp100 + var17:temp100 + var17 + 0x20] = memory[temp100 + var18:temp100 + var18 + 0x20];\n                var19 = temp100 + 0x20;\n            \n                if (var19 >= var16) { goto label_072D; }\n                else { goto label_071E; }\n            }\n        } else {\n            var temp101 = memory[0x40:0x60];\n            memory[temp101:temp101 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp102 = temp101 + 0x04;\n            var temp103 = temp102 + 0x20;\n            memory[temp102:temp102 + 0x20] = temp103 - temp102;\n            memory[temp103:temp103 + 0x20] = 0x38;\n            var temp104 = temp103 + 0x20;\n            memory[temp104:temp104 + 0x38] = code[0x144c:0x1484];\n            var temp105 = memory[0x40:0x60];\n            revert(memory[temp105:temp105 + (temp104 + 0x40) - temp105]);\n        }\n    }\n    \n    function queueTransaction(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var temp1 = arg1;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var1 = temp0;\n        var var0 = var1 + temp1;\n        var var2 = var1 + 0x60;\n        var var3 = msg.data[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1 + var3;\n        var3 = temp2;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var3;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var3 = temp4;\n        var var4 = var2;\n        var2 = temp3 + 0x20;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var4;\n        var temp6 = var3;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + temp6] = msg.data[var2:var2 + temp6];\n        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00;\n        var temp9 = var0;\n        var0 = temp7;\n        var temp10 = var1;\n        var1 = temp9;\n        var2 = temp10;\n        var3 = temp5 + 0x20;\n        var4 = msg.data[temp5:temp5 + 0x20];\n    \n        if (var4 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp11 = var2 + var4;\n        var4 = temp11;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var4;\n        var temp13 = msg.data[temp12:temp12 + 0x20];\n        var4 = temp13;\n        var temp14 = var3;\n        var3 = temp12 + 0x20;\n        var var5 = temp14;\n    \n        if ((var4 > 0x01 << 0x20) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var temp15 = var4;\n        var temp16 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp16 + (temp15 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp16:temp16 + 0x20] = temp15;\n        var temp17 = temp16 + 0x20;\n        memory[temp17:temp17 + temp15] = msg.data[var3:var3 + temp15];\n        memory[temp17 + temp15:temp17 + temp15 + 0x20] = 0x00;\n        var1 = temp16;\n        var2 = msg.data[var5:var5 + 0x20];\n        var3 = 0x00;\n    \n        if (msg.sender == storage[var3] & (0x01 << 0xa0) - 0x01) {\n            var4 = 0x0cac;\n            var5 = storage[0x02];\n            var var6 = 0x0ca0;\n            var6 = func_13E3();\n            var4 = func_0CA0(var5, var6);\n        \n            if (var2 >= var4) {\n                var4 = 0x00;\n                var5 = arg0;\n                var6 = arg1;\n                var temp18 = var0;\n                var var7 = temp18;\n                var var8 = var1;\n                var var9 = var2;\n                var temp19 = memory[0x40:0x60] + 0x20;\n                var var10 = temp19;\n                memory[var10:var10 + 0x20] = var5 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                var temp20 = var10 + 0x20;\n                memory[temp20:temp20 + 0x20] = var6;\n                var temp21 = temp20 + 0x20;\n                var var11 = temp21;\n                var var12 = var11 + 0x20;\n                var temp22 = var12 + 0x20;\n                memory[temp22:temp22 + 0x20] = var9;\n                var temp23 = temp22 + 0x20;\n                memory[var11:var11 + 0x20] = temp23 - var10;\n                memory[temp23:temp23 + 0x20] = memory[var7:var7 + 0x20];\n                var var13 = temp23 + 0x20;\n                var var14 = var7 + 0x20;\n                var var15 = memory[var7:var7 + 0x20];\n                var var16 = var15;\n                var var17 = var13;\n                var var18 = var14;\n                var var19 = 0x00;\n            \n                if (var19 >= var16) {\n                label_0D5C:\n                    var temp24 = var15;\n                    var13 = temp24 + var13;\n                    var14 = temp24 & 0x1f;\n                \n                    if (!var14) {\n                        var temp25 = var13;\n                        memory[var12:var12 + 0x20] = temp25 - var10;\n                        var temp26 = var8;\n                        memory[temp25:temp25 + 0x20] = memory[temp26:temp26 + 0x20];\n                        var13 = temp25 + 0x20;\n                        var15 = memory[temp26:temp26 + 0x20];\n                        var14 = temp26 + 0x20;\n                        var16 = var15;\n                        var17 = var13;\n                        var18 = var14;\n                        var19 = 0x00;\n                    \n                        if (var19 >= var16) {\n                        label_0DBC:\n                            var temp27 = var15;\n                            var13 = temp27 + var13;\n                            var14 = temp27 & 0x1f;\n                        \n                            if (!var14) {\n                                var temp28 = var13;\n                                var temp29 = memory[0x40:0x60];\n                                memory[temp29:temp29 + 0x20] = temp28 - temp29 - 0x20;\n                                memory[0x40:0x60] = temp28;\n                                var temp30 = keccak256(memory[temp29 + 0x20:temp29 + 0x20 + memory[temp29:temp29 + 0x20]]);\n                                var4 = temp30;\n                                memory[0x00:0x20] = var4;\n                                memory[0x20:0x40] = 0x03;\n                                var temp31 = keccak256(memory[0x00:0x40]);\n                                storage[temp31] = (storage[temp31] & ~0xff) | 0x01;\n                                var5 = arg0 & (0x01 << 0xa0) - 0x01;\n                                var6 = var4;\n                                var7 = 0x76e2796dc3a81d57b0e8504b647febcbeeb5f4af818e164f11eef8131a6a763f;\n                                var8 = arg1;\n                                var temp32 = var0;\n                                var9 = temp32;\n                                var10 = var1;\n                                var11 = var2;\n                                var temp33 = memory[0x40:0x60];\n                                var12 = temp33;\n                                memory[var12:var12 + 0x20] = var8;\n                                var temp34 = var12 + 0x20;\n                                var13 = temp34;\n                                var14 = var13 + 0x20;\n                                var temp35 = var14 + 0x20;\n                                memory[temp35:temp35 + 0x20] = var11;\n                                var temp36 = temp35 + 0x20;\n                                memory[var13:var13 + 0x20] = temp36 - var12;\n                                memory[temp36:temp36 + 0x20] = memory[var9:var9 + 0x20];\n                                var15 = temp36 + 0x20;\n                                var16 = var9 + 0x20;\n                                var17 = memory[var9:var9 + 0x20];\n                                var18 = var17;\n                                var19 = var15;\n                                var var20 = var16;\n                                var var21 = 0x00;\n                            \n                                if (var21 >= var18) {\n                                label_0EB4:\n                                    var temp37 = var17;\n                                    var15 = temp37 + var15;\n                                    var16 = temp37 & 0x1f;\n                                \n                                    if (!var16) {\n                                        var temp38 = var15;\n                                        memory[var14:var14 + 0x20] = temp38 - var12;\n                                        var temp39 = var10;\n                                        memory[temp38:temp38 + 0x20] = memory[temp39:temp39 + 0x20];\n                                        var15 = temp38 + 0x20;\n                                        var17 = memory[temp39:temp39 + 0x20];\n                                        var16 = temp39 + 0x20;\n                                        var18 = var17;\n                                        var19 = var15;\n                                        var20 = var16;\n                                        var21 = 0x00;\n                                    \n                                        if (var21 >= var18) {\n                                        label_0F14:\n                                            var temp40 = var17;\n                                            var15 = temp40 + var15;\n                                            var16 = temp40 & 0x1f;\n                                        \n                                            if (!var16) {\n                                                var temp41 = memory[0x40:0x60];\n                                                log(memory[temp41:temp41 + var15 - temp41], [stack[-10], stack[-11], stack[-12]]);\n                                                return var4;\n                                            } else {\n                                                var temp42 = var16;\n                                                var temp43 = var15 - temp42;\n                                                memory[temp43:temp43 + 0x20] = ~(0x0100 ** (0x20 - temp42) - 0x01) & memory[temp43:temp43 + 0x20];\n                                                var temp44 = memory[0x40:0x60];\n                                                log(memory[temp44:temp44 + (temp43 + 0x20) - temp44], [stack[-10], stack[-11], stack[-12]]);\n                                                return var4;\n                                            }\n                                        } else {\n                                        label_0F05:\n                                            var temp45 = var21;\n                                            memory[temp45 + var19:temp45 + var19 + 0x20] = memory[temp45 + var20:temp45 + var20 + 0x20];\n                                            var21 = temp45 + 0x20;\n                                        \n                                            if (var21 >= var18) { goto label_0F14; }\n                                            else { goto label_0F05; }\n                                        }\n                                    } else {\n                                        var temp46 = var16;\n                                        var temp47 = var15 - temp46;\n                                        memory[temp47:temp47 + 0x20] = ~(0x0100 ** (0x20 - temp46) - 0x01) & memory[temp47:temp47 + 0x20];\n                                        var temp48 = temp47 + 0x20;\n                                        memory[var14:var14 + 0x20] = temp48 - var12;\n                                        var temp49 = var10;\n                                        memory[temp48:temp48 + 0x20] = memory[temp49:temp49 + 0x20];\n                                        var15 = temp48 + 0x20;\n                                        var16 = temp49 + 0x20;\n                                        var17 = memory[temp49:temp49 + 0x20];\n                                        var18 = var17;\n                                        var19 = var15;\n                                        var20 = var16;\n                                        var21 = 0x00;\n                                    \n                                        if (var21 >= var18) { goto label_0F14; }\n                                        else { goto label_0F05; }\n                                    }\n                                } else {\n                                label_0EA5:\n                                    var temp50 = var21;\n                                    memory[temp50 + var19:temp50 + var19 + 0x20] = memory[temp50 + var20:temp50 + var20 + 0x20];\n                                    var21 = temp50 + 0x20;\n                                \n                                    if (var21 >= var18) { goto label_0EB4; }\n                                    else { goto label_0EA5; }\n                                }\n                            } else {\n                                var temp51 = var14;\n                                var temp52 = var13 - temp51;\n                                memory[temp52:temp52 + 0x20] = ~(0x0100 ** (0x20 - temp51) - 0x01) & memory[temp52:temp52 + 0x20];\n                                var temp53 = temp52 + 0x20;\n                                var temp54 = memory[0x40:0x60];\n                                memory[temp54:temp54 + 0x20] = temp53 - temp54 - 0x20;\n                                memory[0x40:0x60] = temp53;\n                                var temp55 = keccak256(memory[temp54 + 0x20:temp54 + 0x20 + memory[temp54:temp54 + 0x20]]);\n                                var4 = temp55;\n                                memory[0x00:0x20] = var4;\n                                memory[0x20:0x40] = 0x03;\n                                var temp56 = keccak256(memory[0x00:0x40]);\n                                storage[temp56] = (storage[temp56] & ~0xff) | 0x01;\n                                var5 = arg0 & (0x01 << 0xa0) - 0x01;\n                                var6 = var4;\n                                var7 = 0x76e2796dc3a81d57b0e8504b647febcbeeb5f4af818e164f11eef8131a6a763f;\n                                var8 = arg1;\n                                var temp57 = var0;\n                                var9 = temp57;\n                                var10 = var1;\n                                var11 = var2;\n                                var temp58 = memory[0x40:0x60];\n                                var12 = temp58;\n                                memory[var12:var12 + 0x20] = var8;\n                                var temp59 = var12 + 0x20;\n                                var13 = temp59;\n                                var14 = var13 + 0x20;\n                                var temp60 = var14 + 0x20;\n                                memory[temp60:temp60 + 0x20] = var11;\n                                var temp61 = temp60 + 0x20;\n                                memory[var13:var13 + 0x20] = temp61 - var12;\n                                memory[temp61:temp61 + 0x20] = memory[var9:var9 + 0x20];\n                                var15 = temp61 + 0x20;\n                                var16 = var9 + 0x20;\n                                var17 = memory[var9:var9 + 0x20];\n                                var18 = var17;\n                                var19 = var15;\n                                var20 = var16;\n                                var21 = 0x00;\n                            \n                                if (var21 >= var18) { goto label_0EB4; }\n                                else { goto label_0EA5; }\n                            }\n                        } else {\n                        label_0DAD:\n                            var temp62 = var19;\n                            memory[temp62 + var17:temp62 + var17 + 0x20] = memory[temp62 + var18:temp62 + var18 + 0x20];\n                            var19 = temp62 + 0x20;\n                        \n                            if (var19 >= var16) { goto label_0DBC; }\n                            else { goto label_0DAD; }\n                        }\n                    } else {\n                        var temp63 = var14;\n                        var temp64 = var13 - temp63;\n                        memory[temp64:temp64 + 0x20] = ~(0x0100 ** (0x20 - temp63) - 0x01) & memory[temp64:temp64 + 0x20];\n                        var temp65 = temp64 + 0x20;\n                        memory[var12:var12 + 0x20] = temp65 - var10;\n                        var temp66 = var8;\n                        memory[temp65:temp65 + 0x20] = memory[temp66:temp66 + 0x20];\n                        var13 = temp65 + 0x20;\n                        var14 = temp66 + 0x20;\n                        var15 = memory[temp66:temp66 + 0x20];\n                        var16 = var15;\n                        var17 = var13;\n                        var18 = var14;\n                        var19 = 0x00;\n                    \n                        if (var19 >= var16) { goto label_0DBC; }\n                        else { goto label_0DAD; }\n                    }\n                } else {\n                label_0D4D:\n                    var temp67 = var19;\n                    memory[temp67 + var17:temp67 + var17 + 0x20] = memory[temp67 + var18:temp67 + var18 + 0x20];\n                    var19 = temp67 + 0x20;\n                \n                    if (var19 >= var16) { goto label_0D5C; }\n                    else { goto label_0D4D; }\n                }\n            } else {\n                var temp68 = memory[0x40:0x60];\n                memory[temp68:temp68 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n                var temp69 = temp68 + 0x04;\n                var temp70 = temp69 + 0x20;\n                memory[temp69:temp69 + 0x20] = temp70 - temp69;\n                memory[temp70:temp70 + 0x20] = 0x49;\n                var temp71 = temp70 + 0x20;\n                memory[temp71:temp71 + 0x49] = code[0x16bf:0x1708];\n                var temp72 = memory[0x40:0x60];\n                revert(memory[temp72:temp72 + (temp71 + 0x60) - temp72]);\n            }\n        } else {\n            var temp73 = memory[0x40:0x60];\n            memory[temp73:temp73 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp74 = temp73 + 0x04;\n            var temp75 = temp74 + 0x20;\n            memory[temp74:temp74 + 0x20] = temp75 - temp74;\n            memory[temp75:temp75 + 0x20] = 0x36;\n            var temp76 = temp75 + 0x20;\n            memory[temp76:temp76 + 0x36] = code[0x164c:0x1682];\n            var temp77 = memory[0x40:0x60];\n            revert(memory[temp77:temp77 + (temp76 + 0x40) - temp77]);\n        }\n    }\n    \n    function setPendingAdmin(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n    \n        if (address(this) == msg.sender) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = (temp0 & arg0) | (storage[0x01] & ~((0x01 << 0xa0) - 0x01));\n            storage[0x01] = temp1;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x69d78e38a01985fbb1462961809b4b2d65531bc93b2b94037f3334b82ca4a756, ((stack[-1] & (0x01 << 0xa0) - 0x01) | (storage[0x01] & ~((0x01 << 0xa0) - 0x01))) & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp3 = temp2 + 0x04;\n            var temp4 = temp3 + 0x20;\n            memory[temp3:temp3 + 0x20] = temp4 - temp3;\n            memory[temp4:temp4 + 0x20] = 0x38;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x38] = code[0x1614:0x164c];\n            var temp6 = memory[0x40:0x60];\n            revert(memory[temp6:temp6 + (temp5 + 0x40) - temp6]);\n        }\n    }\n    \n    function cancelTransaction(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var temp1 = arg1;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = temp0 + temp1;\n        var var1 = temp0;\n        var var2 = var1 + 0x60;\n        var var3 = msg.data[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1 + var3;\n        var3 = temp2;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var3;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var3 = temp4;\n        var temp5 = var2;\n        var2 = temp3 + 0x20;\n        var var4 = temp5;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var4;\n        var temp7 = var3;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var2:var2 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = var0;\n        var0 = temp8;\n        var temp11 = var1;\n        var1 = temp10;\n        var2 = temp11;\n        var3 = temp6 + 0x20;\n        var4 = msg.data[temp6:temp6 + 0x20];\n    \n        if (var4 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var2 + var4;\n        var4 = temp12;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var4;\n        var temp14 = msg.data[temp13:temp13 + 0x20];\n        var4 = temp14;\n        var temp15 = var3;\n        var3 = temp13 + 0x20;\n        var var5 = temp15;\n    \n        if ((var4 > 0x01 << 0x20) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var temp16 = var4;\n        var temp17 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp17:temp17 + 0x20] = temp16;\n        var temp18 = temp17 + 0x20;\n        memory[temp18:temp18 + temp16] = msg.data[var3:var3 + temp16];\n        memory[temp18 + temp16:temp18 + temp16 + 0x20] = 0x00;\n        var1 = temp17;\n        var2 = msg.data[var5:var5 + 0x20];\n    \n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var3 = 0x00;\n            var4 = arg0;\n            var5 = arg1;\n            var temp19 = var0;\n            var var6 = temp19;\n            var var7 = var1;\n            var var8 = var2;\n            var temp20 = memory[0x40:0x60] + 0x20;\n            var var9 = temp20;\n            memory[var9:var9 + 0x20] = var4 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n            var temp21 = var9 + 0x20;\n            memory[temp21:temp21 + 0x20] = var5;\n            var temp22 = temp21 + 0x20;\n            var var10 = temp22;\n            var var11 = var10 + 0x20;\n            var temp23 = var11 + 0x20;\n            memory[temp23:temp23 + 0x20] = var8;\n            var temp24 = temp23 + 0x20;\n            memory[var10:var10 + 0x20] = temp24 - var9;\n            memory[temp24:temp24 + 0x20] = memory[var6:var6 + 0x20];\n            var var12 = temp24 + 0x20;\n            var var14 = memory[var6:var6 + 0x20];\n            var var13 = var6 + 0x20;\n            var var15 = var14;\n            var var16 = var12;\n            var var17 = var13;\n            var var18 = 0x00;\n        \n            if (var18 >= var15) {\n            label_10A8:\n                var temp25 = var14;\n                var12 = temp25 + var12;\n                var13 = temp25 & 0x1f;\n            \n                if (!var13) {\n                    var temp26 = var12;\n                    memory[var11:var11 + 0x20] = temp26 - var9;\n                    var temp27 = var7;\n                    memory[temp26:temp26 + 0x20] = memory[temp27:temp27 + 0x20];\n                    var12 = temp26 + 0x20;\n                    var14 = memory[temp27:temp27 + 0x20];\n                    var13 = temp27 + 0x20;\n                    var15 = var14;\n                    var16 = var12;\n                    var17 = var13;\n                    var18 = 0x00;\n                \n                    if (var18 >= var15) {\n                    label_1108:\n                        var temp28 = var14;\n                        var12 = temp28 + var12;\n                        var13 = temp28 & 0x1f;\n                    \n                        if (!var13) {\n                            var temp29 = var12;\n                            var temp30 = memory[0x40:0x60];\n                            memory[temp30:temp30 + 0x20] = temp29 - temp30 - 0x20;\n                            memory[0x40:0x60] = temp29;\n                            var temp31 = keccak256(memory[temp30 + 0x20:temp30 + 0x20 + memory[temp30:temp30 + 0x20]]);\n                            var3 = temp31;\n                            memory[0x00:0x20] = var3;\n                            memory[0x20:0x40] = 0x03;\n                            var temp32 = keccak256(memory[0x00:0x40]);\n                            storage[temp32] = (storage[temp32] & ~0xff) | 0x00;\n                            var4 = arg0 & (0x01 << 0xa0) - 0x01;\n                            var5 = var3;\n                            var6 = 0x2fffc091a501fd91bfbff27141450d3acb40fb8e6d8382b243ec7a812a3aaf87;\n                            var7 = arg1;\n                            var temp33 = var0;\n                            var8 = temp33;\n                            var9 = var1;\n                            var10 = var2;\n                            var temp34 = memory[0x40:0x60];\n                            var11 = temp34;\n                            memory[var11:var11 + 0x20] = var7;\n                            var temp35 = var11 + 0x20;\n                            var12 = temp35;\n                            var13 = var12 + 0x20;\n                            var temp36 = var13 + 0x20;\n                            memory[temp36:temp36 + 0x20] = var10;\n                            var temp37 = temp36 + 0x20;\n                            memory[var12:var12 + 0x20] = temp37 - var11;\n                            memory[temp37:temp37 + 0x20] = memory[var8:var8 + 0x20];\n                            var14 = temp37 + 0x20;\n                            var16 = memory[var8:var8 + 0x20];\n                            var15 = var8 + 0x20;\n                            var17 = var16;\n                            var18 = var14;\n                            var var19 = var15;\n                            var var20 = 0x00;\n                        \n                            if (var20 >= var17) {\n                            label_1200:\n                                var temp38 = var16;\n                                var14 = temp38 + var14;\n                                var15 = temp38 & 0x1f;\n                            \n                                if (!var15) {\n                                    var temp39 = var14;\n                                    memory[var13:var13 + 0x20] = temp39 - var11;\n                                    var temp40 = var9;\n                                    memory[temp39:temp39 + 0x20] = memory[temp40:temp40 + 0x20];\n                                    var14 = temp39 + 0x20;\n                                    var16 = memory[temp40:temp40 + 0x20];\n                                    var15 = temp40 + 0x20;\n                                    var17 = var16;\n                                    var18 = var14;\n                                    var19 = var15;\n                                    var20 = 0x00;\n                                \n                                    if (var20 >= var17) {\n                                    label_1260:\n                                        var temp41 = var16;\n                                        var14 = temp41 + var14;\n                                        var15 = temp41 & 0x1f;\n                                    \n                                        if (!var15) {\n                                            var temp42 = memory[0x40:0x60];\n                                            log(memory[temp42:temp42 + var14 - temp42], [stack[-10], stack[-11], stack[-12]]);\n                                            return;\n                                        } else {\n                                            var temp43 = var15;\n                                            var temp44 = var14 - temp43;\n                                            memory[temp44:temp44 + 0x20] = ~(0x0100 ** (0x20 - temp43) - 0x01) & memory[temp44:temp44 + 0x20];\n                                            var temp45 = memory[0x40:0x60];\n                                            log(memory[temp45:temp45 + (temp44 + 0x20) - temp45], [stack[-10], stack[-11], stack[-12]]);\n                                            return;\n                                        }\n                                    } else {\n                                    label_1251:\n                                        var temp46 = var20;\n                                        memory[temp46 + var18:temp46 + var18 + 0x20] = memory[temp46 + var19:temp46 + var19 + 0x20];\n                                        var20 = temp46 + 0x20;\n                                    \n                                        if (var20 >= var17) { goto label_1260; }\n                                        else { goto label_1251; }\n                                    }\n                                } else {\n                                    var temp47 = var15;\n                                    var temp48 = var14 - temp47;\n                                    memory[temp48:temp48 + 0x20] = ~(0x0100 ** (0x20 - temp47) - 0x01) & memory[temp48:temp48 + 0x20];\n                                    var temp49 = temp48 + 0x20;\n                                    memory[var13:var13 + 0x20] = temp49 - var11;\n                                    var temp50 = var9;\n                                    memory[temp49:temp49 + 0x20] = memory[temp50:temp50 + 0x20];\n                                    var14 = temp49 + 0x20;\n                                    var15 = temp50 + 0x20;\n                                    var16 = memory[temp50:temp50 + 0x20];\n                                    var17 = var16;\n                                    var18 = var14;\n                                    var19 = var15;\n                                    var20 = 0x00;\n                                \n                                    if (var20 >= var17) { goto label_1260; }\n                                    else { goto label_1251; }\n                                }\n                            } else {\n                            label_11F1:\n                                var temp51 = var20;\n                                memory[temp51 + var18:temp51 + var18 + 0x20] = memory[temp51 + var19:temp51 + var19 + 0x20];\n                                var20 = temp51 + 0x20;\n                            \n                                if (var20 >= var17) { goto label_1200; }\n                                else { goto label_11F1; }\n                            }\n                        } else {\n                            var temp52 = var13;\n                            var temp53 = var12 - temp52;\n                            memory[temp53:temp53 + 0x20] = ~(0x0100 ** (0x20 - temp52) - 0x01) & memory[temp53:temp53 + 0x20];\n                            var temp54 = temp53 + 0x20;\n                            var temp55 = memory[0x40:0x60];\n                            memory[temp55:temp55 + 0x20] = temp54 - temp55 - 0x20;\n                            memory[0x40:0x60] = temp54;\n                            var temp56 = keccak256(memory[temp55 + 0x20:temp55 + 0x20 + memory[temp55:temp55 + 0x20]]);\n                            var3 = temp56;\n                            memory[0x00:0x20] = var3;\n                            memory[0x20:0x40] = 0x03;\n                            var temp57 = keccak256(memory[0x00:0x40]);\n                            storage[temp57] = (storage[temp57] & ~0xff) | 0x00;\n                            var4 = arg0 & (0x01 << 0xa0) - 0x01;\n                            var5 = var3;\n                            var6 = 0x2fffc091a501fd91bfbff27141450d3acb40fb8e6d8382b243ec7a812a3aaf87;\n                            var7 = arg1;\n                            var temp58 = var0;\n                            var8 = temp58;\n                            var9 = var1;\n                            var10 = var2;\n                            var temp59 = memory[0x40:0x60];\n                            var11 = temp59;\n                            memory[var11:var11 + 0x20] = var7;\n                            var temp60 = var11 + 0x20;\n                            var12 = temp60;\n                            var13 = var12 + 0x20;\n                            var temp61 = var13 + 0x20;\n                            memory[temp61:temp61 + 0x20] = var10;\n                            var temp62 = temp61 + 0x20;\n                            memory[var12:var12 + 0x20] = temp62 - var11;\n                            memory[temp62:temp62 + 0x20] = memory[var8:var8 + 0x20];\n                            var14 = temp62 + 0x20;\n                            var16 = memory[var8:var8 + 0x20];\n                            var15 = var8 + 0x20;\n                            var17 = var16;\n                            var18 = var14;\n                            var19 = var15;\n                            var20 = 0x00;\n                        \n                            if (var20 >= var17) { goto label_1200; }\n                            else { goto label_11F1; }\n                        }\n                    } else {\n                    label_10F9:\n                        var temp63 = var18;\n                        memory[temp63 + var16:temp63 + var16 + 0x20] = memory[temp63 + var17:temp63 + var17 + 0x20];\n                        var18 = temp63 + 0x20;\n                    \n                        if (var18 >= var15) { goto label_1108; }\n                        else { goto label_10F9; }\n                    }\n                } else {\n                    var temp64 = var13;\n                    var temp65 = var12 - temp64;\n                    memory[temp65:temp65 + 0x20] = ~(0x0100 ** (0x20 - temp64) - 0x01) & memory[temp65:temp65 + 0x20];\n                    var temp66 = temp65 + 0x20;\n                    memory[var11:var11 + 0x20] = temp66 - var9;\n                    var temp67 = var7;\n                    memory[temp66:temp66 + 0x20] = memory[temp67:temp67 + 0x20];\n                    var12 = temp66 + 0x20;\n                    var13 = temp67 + 0x20;\n                    var14 = memory[temp67:temp67 + 0x20];\n                    var15 = var14;\n                    var16 = var12;\n                    var17 = var13;\n                    var18 = 0x00;\n                \n                    if (var18 >= var15) { goto label_1108; }\n                    else { goto label_10F9; }\n                }\n            } else {\n            label_1099:\n                var temp68 = var18;\n                memory[temp68 + var16:temp68 + var16 + 0x20] = memory[temp68 + var17:temp68 + var17 + 0x20];\n                var18 = temp68 + 0x20;\n            \n                if (var18 >= var15) { goto label_10A8; }\n                else { goto label_1099; }\n            }\n        } else {\n            var temp69 = memory[0x40:0x60];\n            memory[temp69:temp69 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp70 = temp69 + 0x04;\n            var temp71 = temp70 + 0x20;\n            memory[temp70:temp70 + 0x20] = temp71 - temp70;\n            memory[temp71:temp71 + 0x20] = 0x37;\n            var temp72 = temp71 + 0x20;\n            memory[temp72:temp72 + 0x37] = code[0x1484:0x14bb];\n            var temp73 = memory[0x40:0x60];\n            revert(memory[temp73:temp73 + (temp72 + 0x40) - temp73]);\n        }\n    }\n    \n    function setDelay(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n    \n        if (address(this) != msg.sender) {\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp12 = temp11 + 0x04;\n            var temp13 = temp12 + 0x20;\n            memory[temp12:temp12 + 0x20] = temp13 - temp12;\n            memory[temp13:temp13 + 0x20] = 0x31;\n            var temp14 = temp13 + 0x20;\n            memory[temp14:temp14 + 0x31] = code[0x1708:0x1739];\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + (temp14 + 0x40) - temp15]);\n        } else if (arg0 < 0x02a300) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp7 = temp6 + 0x04;\n            var temp8 = temp7 + 0x20;\n            memory[temp7:temp7 + 0x20] = temp8 - temp7;\n            memory[temp8:temp8 + 0x20] = 0x34;\n            var temp9 = temp8 + 0x20;\n            memory[temp9:temp9 + 0x34] = code[0x1533:0x1567];\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + (temp9 + 0x40) - temp10]);\n        } else if (arg0 <= 0x278d00) {\n            var temp0 = arg0;\n            storage[0x02] = temp0;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x948b1f6a42ee138b7e34058ba85a37f716d55ff25ff05a763f15bed6a04c8d2c, stack[-1]]);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp2 = temp1 + 0x04;\n            var temp3 = temp2 + 0x20;\n            memory[temp2:temp2 + 0x20] = temp3 - temp2;\n            memory[temp3:temp3 + 0x20] = 0x38;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x38] = code[0x1567:0x159f];\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + (temp4 + 0x40) - temp5]);\n        }\n    }\n    \n    function queuedTransactions(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function acceptAdmin() {\n        if (msg.sender == storage[0x01] & (0x01 << 0xa0) - 0x01) {\n            var temp0 = ~((0x01 << 0xa0) - 0x01);\n            var temp1 = (temp0 & storage[0x00]) | msg.sender;\n            storage[0x00] = temp1;\n            storage[0x01] = temp0 & storage[0x01];\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c, ((storage[0x00] & ~((0x01 << 0xa0) - 0x01)) | msg.sender) & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n            var temp3 = temp2 + 0x04;\n            var temp4 = temp3 + 0x20;\n            memory[temp3:temp3 + 0x20] = temp4 - temp3;\n            memory[temp4:temp4 + 0x20] = 0x38;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x38] = code[0x15dc:0x1614];\n            var temp6 = memory[0x40:0x60];\n            revert(memory[temp6:temp6 + (temp5 + 0x40) - temp6]);\n        }\n    }\n    \n    function pendingAdmin() returns (var r0) { return storage[0x01] & (0x01 << 0xa0) - 0x01; }\n    \n    function func_0CA0(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_13E7(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function delay() returns (var r0) { return storage[0x02]; }\n    \n    function MAXIMUM_DELAY() returns (var r0) { return 0x278d00; }\n    \n    function MINIMUM_DELAY() returns (var r0) { return 0x02a300; }\n    \n    function GRACE_PERIOD() returns (var r0) { return 0x127500; }\n    \n    function admin() returns (var r0) { return storage[0x00] & (0x01 << 0xa0) - 0x01; }\n    \n    function func_13E3() returns (var r0) { return block.timestamp; }\n    \n    function func_13E7(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * (0x01 << 0xe5);\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1b;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 68.64278531074524,
	"usage": {
		"completion_tokens": 708,
		"prompt_tokens": 19145,
		"total_tokens": 19853
	}
}