{
	"address": "0xfe38739c4b70cd6d1d3674e70d17fb1999cb4f9f",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity version of the given decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    uint256 private _fundingStartBlock;\n    uint256 private _fundingEndBlock;\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    uint256 private _maxCap;\n    uint256 private _totalSupply;\n    uint256 private _minCap;\n    uint256 private _ownerTokens;\n    address private _finalize;\n    bool private _isFinalized;\n\n    event MPYCreation(address indexed from, uint256 value);\n    event Approval(address indexed from, address indexed to, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event MPYRefund(address indexed from, uint256 value);\n\n    function name() public pure returns(string memory) {\n        return \"MatchPay Token\";\n    }\n\n    function approve(address _to, uint256 _value) public returns(bool) {\n        _allowance[msg.sender][_to] = _value;\n        emit Approval(msg.sender, _to, _value);\n        return true;\n    }\n\n    function totalSupply() public view returns(uint256) {\n        return _totalSupply;\n    }\n\n    function maxCap() public view returns(uint256) {\n        return _maxCap;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(_balanceOf[_from] >= _value);\n        require(_allowance[msg.sender][_from] >= _value);\n        require(_value > 0);\n        require(_balanceOf[_to] + _value > _balanceOf[_to]);\n        \n        _balanceOf[_from] -= _value;\n        _balanceOf[_to] += _value;\n        _allowance[msg.sender][_from] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function decimals() public pure returns(uint8) {\n        return 18;\n    }\n\n    function minCap() public view returns(uint256) {\n        return _minCap;\n    }\n\n    function tokenExchangeRate() public pure returns(uint256) {\n        return 10;\n    }\n\n    // Assume _finalize is a contract with a payable fallback function\n    function finalize() public {\n        require(msg.sender == _finalize);\n        require(_totalSupply >= _minCap);\n        require(block.number > _fundingEndBlock || _totalSupply >= _maxCap);\n\n        (bool success,) = _finalize.call{value: address(this).balance}(\"\");\n        require(success);\n\n        _balanceOf[_finalize] += _ownerTokens;\n        _totalSupply += _ownerTokens;\n        _isFinalized = true;\n    }\n\n    function refund() public {\n        require(!_isFinalized);\n        require(block.number > _fundingEndBlock);\n        require(_totalSupply < _minCap);\n        require(msg.sender != _finalize);\n        require(_balanceOf[msg.sender] > 0);\n\n        uint256 refundAmount = _balanceOf[msg.sender];\n        _balanceOf[msg.sender] = 0;\n        _totalSupply -= refundAmount;\n\n        emit MPYRefund(msg.sender, refundAmount / 10);\n        (bool success,) = msg.sender.call{value: refundAmount / 10}(\"\");\n        require(success);\n    }\n\n    function getSupply() public view returns(uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _owner) public view returns(uint256) {\n        return _balanceOf[_owner];\n    }\n\n    function isFinalized() public view returns(bool) {\n        return _isFinalized;\n    }\n\n    function fundingEndBlock() public view returns(uint256) {\n        return _fundingEndBlock;\n    }\n\n    function symbol() public pure returns(string memory) {\n        return \"MPY\";\n    }\n\n    receive() external payable {}\n\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        require(_balanceOf[msg.sender] >= _value);\n        require(_value > 0);\n        require(_balanceOf[_to] + _value > _balanceOf[_to]);\n\n        _balanceOf[msg.sender] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function ownerTokens() public view returns(uint256) {\n        return _ownerTokens;\n    }\n\n    function getStats() public view returns(uint256, uint256, uint256, uint256) {\n        return (_minCap, _maxCap, _totalSupply, _fundingEndBlock);\n    }\n\n    function fundingStartBlock() public view returns(uint256) {\n        return _fundingStartBlock;\n    }\n\n    function allowance(address _owner, address _spender) public view returns(uint256) {\n        return _allowance[_owner][_spender];\n    }\n}\n```\n\nPlease note that this is a basic implementation of the given decompiled code. You may want to add some additional checks and validate the inputs to ensure the contract is secure.",
				"role": "assistant"
			}
		}
	],
	"created": 1701456905,
	"id": "chatcmpl-8R2xFM3x7X5kiRNDWhsj3Wtkib5nK",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 21:28 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingStartBlock; // STORAGE[0x1]\nuint256 _fundingEndBlock; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x4]\nuint256 _maxCap; // STORAGE[0x5]\nuint256 _totalSupply; // STORAGE[0x6]\nuint256 _minCap; // STORAGE[0x7]\nuint256 _ownerTokens; // STORAGE[0x8]\naddress _finalize; // STORAGE[0x0] bytes 0 to 19\nuint8 _isFinalized; // STORAGE[0x9] bytes 0 to 0\n\n// Events\nMPYCreation(address, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nMPYRefund(address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (14) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffff & 'MatchPay Token';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction maxCap() public nonPayable { \n    return _maxCap;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _balanceOf[varg0] >= varg2;\n    if (v1) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = v3 = varg2 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg1] + varg2 > _balanceOf[varg1];\n    }\n    if (!v0) {\n        v4 = v5 = 0;\n        goto 0xbe8B0x37e;\n    } else {\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg2;\n        _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v4 = 1;\n    }\n    return v4;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction minCap() public nonPayable { \n    return _minCap;\n}\n\nfunction tokenExchangeRate() public nonPayable { \n    return 10;\n}\n\nfunction finalize() public nonPayable { \n    require(msg.sender == _finalize);\n    require(_totalSupply >= _minCap);\n    v0 = v1 = block.number <= _fundingEndBlock;\n    if (v1) {\n        v0 = _totalSupply < _maxCap;\n    }\n    require(!v0);\n    v2 = _finalize.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v2);\n    _balanceOf[_finalize] = _balanceOf[_finalize] + _ownerTokens;\n    _totalSupply = _totalSupply + _ownerTokens;\n    _isFinalized = 1;\n}\n\nfunction refund() public nonPayable { \n    require(!_isFinalized);\n    require(block.number > _fundingEndBlock);\n    require(_totalSupply < _minCap);\n    require(msg.sender != _finalize);\n    require(_balanceOf[msg.sender] != 0);\n    _balanceOf[msg.sender] = 0;\n    assert(_totalSupply >= _balanceOf[msg.sender]);\n    _totalSupply = _totalSupply - _balanceOf[msg.sender];\n    emit MPYRefund(msg.sender, _balanceOf[msg.sender] / 10);\n    v0 = msg.sender.call().value(_balanceOf[msg.sender] / 10).gas(!(_balanceOf[msg.sender] / 10) * 2300);\n    require(v0);\n}\n\nfunction getSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction isFinalized() public nonPayable { \n    return _isFinalized;\n}\n\nfunction fundingEndBlock() public nonPayable { \n    return _fundingEndBlock;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4d50590000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction emergencyPay() public payable { \n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = v2 = varg1 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n        goto 0x1221B0x601;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v3 = 1;\n    }\n    return v3;\n}\n\nfunction ownerTokens() public nonPayable { \n    return _ownerTokens;\n}\n\nfunction getStats() public nonPayable { \n    return _minCap, _maxCap, _totalSupply, _fundingEndBlock;\n}\n\nfunction fundingStartBlock() public nonPayable { \n    return _fundingStartBlock;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23548b8b == function_selector) {\n            maxCap();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3fa615b0 == function_selector) {\n            minCap();\n        } else if (0x4172d080 == function_selector) {\n            tokenExchangeRate();\n        } else if (0x4bb278f3 == function_selector) {\n            finalize();\n        } else if (0x590e1ae3 == function_selector) {\n            refund();\n        } else if (0x6c9c2faf == function_selector) {\n            getSupply();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8d4e4083 == function_selector) {\n            isFinalized();\n        } else if (0x91b43d13 == function_selector) {\n            fundingEndBlock();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa0dc6b74 == function_selector) {\n            emergencyPay();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xc0aa3b21 == function_selector) {\n            ownerTokens();\n        } else if (0xc59d4847 == function_selector) {\n            getStats();\n        } else if (0xd648a647 == function_selector) {\n            fundingStartBlock();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    v0 = v1 = block.number >= _fundingStartBlock;\n    if (v1) {\n        v0 = v2 = block.number <= _fundingEndBlock;\n    }\n    require(v0);\n    require(msg.value != 0);\n    require(!_isFinalized);\n    v3 = v4 = msg.value == 0;\n    if (msg.value != 0) {\n        assert(msg.value);\n        v3 = msg.value * 10 / msg.value == 10;\n    }\n    assert(v3);\n    v5 = v6 = _totalSupply + msg.value * 10 >= _totalSupply;\n    if (v6) {\n        v5 = _totalSupply + msg.value * 10 >= msg.value * 10;\n    }\n    assert(v5);\n    require(_maxCap >= _totalSupply + msg.value * 10);\n    _totalSupply = _totalSupply + msg.value * 10;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value * 10;\n    emit MPYCreation(msg.sender, msg.value * 10);\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 21:28 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingStartBlock; // STORAGE[0x1]\nuint256 _fundingEndBlock; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x4]\nuint256 _maxCap; // STORAGE[0x5]\nuint256 _totalSupply; // STORAGE[0x6]\nuint256 _minCap; // STORAGE[0x7]\nuint256 _ownerTokens; // STORAGE[0x8]\naddress _finalize; // STORAGE[0x0] bytes 0 to 19\nuint8 _isFinalized; // STORAGE[0x9] bytes 0 to 0\n\n// Events\nMPYCreation(address, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nMPYRefund(address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (14) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffff & 'MatchPay Token';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction maxCap() public nonPayable { \n    return _maxCap;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _balanceOf[varg0] >= varg2;\n    if (v1) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = v3 = varg2 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg1] + varg2 > _balanceOf[varg1];\n    }\n    if (!v0) {\n        v4 = v5 = 0;\n        goto 0xbe8B0x37e;\n    } else {\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg2;\n        _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v4 = 1;\n    }\n    return v4;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction minCap() public nonPayable { \n    return _minCap;\n}\n\nfunction tokenExchangeRate() public nonPayable { \n    return 10;\n}\n\nfunction finalize() public nonPayable { \n    require(msg.sender == _finalize);\n    require(_totalSupply >= _minCap);\n    v0 = v1 = block.number <= _fundingEndBlock;\n    if (v1) {\n        v0 = _totalSupply < _maxCap;\n    }\n    require(!v0);\n    v2 = _finalize.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v2);\n    _balanceOf[_finalize] = _balanceOf[_finalize] + _ownerTokens;\n    _totalSupply = _totalSupply + _ownerTokens;\n    _isFinalized = 1;\n}\n\nfunction refund() public nonPayable { \n    require(!_isFinalized);\n    require(block.number > _fundingEndBlock);\n    require(_totalSupply < _minCap);\n    require(msg.sender != _finalize);\n    require(_balanceOf[msg.sender] != 0);\n    _balanceOf[msg.sender] = 0;\n    assert(_totalSupply >= _balanceOf[msg.sender]);\n    _totalSupply = _totalSupply - _balanceOf[msg.sender];\n    emit MPYRefund(msg.sender, _balanceOf[msg.sender] / 10);\n    v0 = msg.sender.call().value(_balanceOf[msg.sender] / 10).gas(!(_balanceOf[msg.sender] / 10) * 2300);\n    require(v0);\n}\n\nfunction getSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction isFinalized() public nonPayable { \n    return _isFinalized;\n}\n\nfunction fundingEndBlock() public nonPayable { \n    return _fundingEndBlock;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4d50590000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction emergencyPay() public payable { \n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = v2 = varg1 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n        goto 0x1221B0x601;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v3 = 1;\n    }\n    return v3;\n}\n\nfunction ownerTokens() public nonPayable { \n    return _ownerTokens;\n}\n\nfunction getStats() public nonPayable { \n    return _minCap, _maxCap, _totalSupply, _fundingEndBlock;\n}\n\nfunction fundingStartBlock() public nonPayable { \n    return _fundingStartBlock;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23548b8b == function_selector) {\n            maxCap();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3fa615b0 == function_selector) {\n            minCap();\n        } else if (0x4172d080 == function_selector) {\n            tokenExchangeRate();\n        } else if (0x4bb278f3 == function_selector) {\n            finalize();\n        } else if (0x590e1ae3 == function_selector) {\n            refund();\n        } else if (0x6c9c2faf == function_selector) {\n            getSupply();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8d4e4083 == function_selector) {\n            isFinalized();\n        } else if (0x91b43d13 == function_selector) {\n            fundingEndBlock();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa0dc6b74 == function_selector) {\n            emergencyPay();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xc0aa3b21 == function_selector) {\n            ownerTokens();\n        } else if (0xc59d4847 == function_selector) {\n            getStats();\n        } else if (0xd648a647 == function_selector) {\n            fundingStartBlock();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    v0 = v1 = block.number >= _fundingStartBlock;\n    if (v1) {\n        v0 = v2 = block.number <= _fundingEndBlock;\n    }\n    require(v0);\n    require(msg.value != 0);\n    require(!_isFinalized);\n    v3 = v4 = msg.value == 0;\n    if (msg.value != 0) {\n        assert(msg.value);\n        v3 = msg.value * 10 / msg.value == 10;\n    }\n    assert(v3);\n    v5 = v6 = _totalSupply + msg.value * 10 >= _totalSupply;\n    if (v6) {\n        v5 = _totalSupply + msg.value * 10 >= msg.value * 10;\n    }\n    assert(v5);\n    require(_maxCap >= _totalSupply + msg.value * 10);\n    _totalSupply = _totalSupply + msg.value * 10;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value * 10;\n    emit MPYCreation(msg.sender, msg.value * 10);\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 21:28 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingStartBlock; // STORAGE[0x1]\nuint256 _fundingEndBlock; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x4]\nuint256 _maxCap; // STORAGE[0x5]\nuint256 _totalSupply; // STORAGE[0x6]\nuint256 _minCap; // STORAGE[0x7]\nuint256 _ownerTokens; // STORAGE[0x8]\naddress _finalize; // STORAGE[0x0] bytes 0 to 19\nuint8 _isFinalized; // STORAGE[0x9] bytes 0 to 0\n\n// Events\nMPYCreation(address, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nMPYRefund(address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (14) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffff & 'MatchPay Token';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction maxCap() public nonPayable { \n    return _maxCap;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _balanceOf[varg0] >= varg2;\n    if (v1) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = v3 = varg2 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg1] + varg2 > _balanceOf[varg1];\n    }\n    if (!v0) {\n        v4 = v5 = 0;\n        goto 0xbe8B0x37e;\n    } else {\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg2;\n        _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v4 = 1;\n    }\n    return v4;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction minCap() public nonPayable { \n    return _minCap;\n}\n\nfunction tokenExchangeRate() public nonPayable { \n    return 10;\n}\n\nfunction finalize() public nonPayable { \n    require(msg.sender == _finalize);\n    require(_totalSupply >= _minCap);\n    v0 = v1 = block.number <= _fundingEndBlock;\n    if (v1) {\n        v0 = _totalSupply < _maxCap;\n    }\n    require(!v0);\n    v2 = _finalize.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v2);\n    _balanceOf[_finalize] = _balanceOf[_finalize] + _ownerTokens;\n    _totalSupply = _totalSupply + _ownerTokens;\n    _isFinalized = 1;\n}\n\nfunction refund() public nonPayable { \n    require(!_isFinalized);\n    require(block.number > _fundingEndBlock);\n    require(_totalSupply < _minCap);\n    require(msg.sender != _finalize);\n    require(_balanceOf[msg.sender] != 0);\n    _balanceOf[msg.sender] = 0;\n    assert(_totalSupply >= _balanceOf[msg.sender]);\n    _totalSupply = _totalSupply - _balanceOf[msg.sender];\n    emit MPYRefund(msg.sender, _balanceOf[msg.sender] / 10);\n    v0 = msg.sender.call().value(_balanceOf[msg.sender] / 10).gas(!(_balanceOf[msg.sender] / 10) * 2300);\n    require(v0);\n}\n\nfunction getSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction isFinalized() public nonPayable { \n    return _isFinalized;\n}\n\nfunction fundingEndBlock() public nonPayable { \n    return _fundingEndBlock;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4d50590000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction emergencyPay() public payable { \n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = v2 = varg1 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n        goto 0x1221B0x601;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v3 = 1;\n    }\n    return v3;\n}\n\nfunction ownerTokens() public nonPayable { \n    return _ownerTokens;\n}\n\nfunction getStats() public nonPayable { \n    return _minCap, _maxCap, _totalSupply, _fundingEndBlock;\n}\n\nfunction fundingStartBlock() public nonPayable { \n    return _fundingStartBlock;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23548b8b == function_selector) {\n            maxCap();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3fa615b0 == function_selector) {\n            minCap();\n        } else if (0x4172d080 == function_selector) {\n            tokenExchangeRate();\n        } else if (0x4bb278f3 == function_selector) {\n            finalize();\n        } else if (0x590e1ae3 == function_selector) {\n            refund();\n        } else if (0x6c9c2faf == function_selector) {\n            getSupply();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8d4e4083 == function_selector) {\n            isFinalized();\n        } else if (0x91b43d13 == function_selector) {\n            fundingEndBlock();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa0dc6b74 == function_selector) {\n            emergencyPay();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xc0aa3b21 == function_selector) {\n            ownerTokens();\n        } else if (0xc59d4847 == function_selector) {\n            getStats();\n        } else if (0xd648a647 == function_selector) {\n            fundingStartBlock();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    v0 = v1 = block.number >= _fundingStartBlock;\n    if (v1) {\n        v0 = v2 = block.number <= _fundingEndBlock;\n    }\n    require(v0);\n    require(msg.value != 0);\n    require(!_isFinalized);\n    v3 = v4 = msg.value == 0;\n    if (msg.value != 0) {\n        assert(msg.value);\n        v3 = msg.value * 10 / msg.value == 10;\n    }\n    assert(v3);\n    v5 = v6 = _totalSupply + msg.value * 10 >= _totalSupply;\n    if (v6) {\n        v5 = _totalSupply + msg.value * 10 >= msg.value * 10;\n    }\n    assert(v5);\n    require(_maxCap >= _totalSupply + msg.value * 10);\n    _totalSupply = _totalSupply + msg.value * 10;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value * 10;\n    emit MPYCreation(msg.sender, msg.value * 10);\n}\n.",
	"status": "1",
	"time_cost": 82.34260368347168,
	"usage": {
		"completion_tokens": 1074,
		"prompt_tokens": 2306,
		"total_tokens": 3380
	}
}