{
	"address": "0x0a97094c19295e320d5121d72139a150021a2702",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the solidity contract based on the decompiled code you provided. However, it should be noted that the decompiled code provided is not complete and the functions are not well defined. The code also contains several labels, which are not used in solidity and the use of \"goto\" statements that are not supported in solidity.\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n    uint public totalSupply;\n\n    function transfer(address _to, uint _value) public returns (bool success){\n        require(balances[msg.sender] >= _value && _value > 0);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowed[_from][msg.sender] -= _value;\n        return true;\n    }\n\n    function balanceOf(address _address) public view returns (uint balance) {\n        return balances[_address];\n    }\n\n    function approve(address _spender, uint _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n```\nThis is a simple ERC20 token contract that provides basic functionality to transfer tokens, as well as allow tokens to be approved so they can be spent by another on-chain third party.\nPlease replace the placeholders with the correct data types, function names and logic as per your contract's requirement.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472137,
	"id": "chatcmpl-8Multev7mEDFcZH3TlNAvVSI2BJTs",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0110:\n            var var0 = 0x011b;\n            var var1 = msg.value;\n            var var2 = 0x00;\n            var0 = buy(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = dividendsOf(var2);\n            \n            label_013F:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0166;\n                var2 = name();\n            \n            label_0166:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = 0x20;\n                var temp3 = var2;\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n                var var3 = temp2;\n                var var4 = var3;\n                var var5 = var4 + 0x40;\n                var var7 = memory[temp3:temp3 + 0x20];\n                var var6 = temp3 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_01A0:\n                    var temp4 = var7;\n                    var5 = temp4 + var5;\n                    var6 = temp4 & 0x1f;\n                \n                    if (!var6) {\n                        var temp5 = memory[0x40:0x60];\n                        return memory[temp5:temp5 + var5 - temp5];\n                    } else {\n                        var temp6 = var6;\n                        var temp7 = var5 - temp6;\n                        memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                        var temp8 = memory[0x40:0x60];\n                        return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                    }\n                } else {\n                label_0191:\n                    var temp9 = var11;\n                    memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                    var11 = temp9 + 0x20;\n                \n                    if (var11 >= var8) { goto label_01A0; }\n                    else { goto label_0191; }\n                }\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x00;\n                var4 = var3;\n                var5 = var4;\n                var6 = var5;\n                var7 = 0x06e8;\n                var8 = 0x03c1;\n                var9 = var2;\n                var10 = 0x0a;\n                var8 = func_0D97(var9, var10);\n                var7 = func_03C1(var8);\n                var temp10 = var7;\n                var4 = temp10;\n                var7 = 0x06f4;\n                var8 = var2;\n                var9 = var4;\n                var7 = func_0DE4(var8, var9);\n                var temp11 = var7;\n                var5 = temp11;\n                var7 = 0x06ff;\n                var8 = var5;\n                var7 = func_0DF6(var8);\n                var1 = var7;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var1 = totalSupply();\n                goto label_013F;\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                goto label_013F;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0235;\n                var2 = decimals();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var2 & 0xff;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0260;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var1 = sellPrice();\n                goto label_013F;\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = stakingRequirement();\n                goto label_013F;\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                goto label_013F;\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var1 = totalEthereumBalance();\n                goto label_013F;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_013F;\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var1 = buyPrice();\n                goto label_013F;\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var1 = myTokens();\n                goto label_013F;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0166;\n                var2 = symbol();\n                goto label_0166;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = !!var1;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0260;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0260;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x013f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x00;\n                var4 = 0x08bc;\n                var5 = msg.value;\n                var6 = var2;\n                var4 = buy(var5, var6);\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0260;\n                reinvest();\n                stop();\n            } else { goto label_0110; }\n        }\n    }\n    \n    function buy(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = var0;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = var6;\n        var var8 = var7;\n        var var9 = 0x03c8;\n        var var10 = 0x03c1;\n        var var11 = arg0;\n        var var12 = 0x0a;\n        var10 = func_0D97(var11, var12);\n        var9 = func_03C1(var10);\n        var temp0 = var9;\n        var2 = temp0;\n        var9 = 0x03d8;\n        var10 = 0x03c1;\n        var11 = var2;\n        var12 = 0x21;\n        var10 = func_0D97(var11, var12);\n        var9 = func_03C1(var10);\n        var temp1 = var9;\n        var3 = temp1;\n        var9 = 0x03e4;\n        var10 = var2;\n        var11 = var3;\n        var9 = func_0DE4(var10, var11);\n        var4 = var9;\n        var9 = 0x03f0;\n        var10 = arg0;\n        var11 = var2;\n        var9 = func_0DE4(var10, var11);\n        var temp2 = var9;\n        var5 = temp2;\n        var9 = 0x03fb;\n        var10 = var5;\n        var9 = func_0DF6(var10);\n        var6 = var9;\n        var7 = var4 * 0x010000000000000000;\n        var temp3 = var6 > 0x00;\n        var9 = temp3;\n    \n        if (!var9) {\n        label_0425:\n        \n            if (!var9) { revert(memory[0x00:0x00]); }\n        \n            var9 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n        \n            if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                var9 = arg1 & 0x02 ** 0xa0 - 0x01 != var1 & 0x02 ** 0xa0 - 0x01;\n            \n                if (!var9) { goto label_0480; }\n                else { goto label_0461; }\n            } else if (!var9) {\n            label_0480:\n            \n                if (!var9) {\n                label_04C6:\n                    var9 = 0x04d0;\n                    var10 = var4;\n                    var11 = var3;\n                    var9 = func_0E8E(var10, var11);\n                    var4 = var9;\n                    var7 = var4 * 0x010000000000000000;\n                \n                    if (storage[0x06] <= 0x00) {\n                    label_0545:\n                        storage[0x06] = var6;\n                        memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var10 = storage[keccak256(memory[0x00:0x40])];\n                        var9 = 0x056e;\n                        var11 = var6;\n                        var9 = func_0E8E(var10, var11);\n                    \n                    label_056E:\n                        var temp4 = 0x02 ** 0xa0 - 0x01;\n                        memory[0x00:0x20] = var1 & temp4;\n                        memory[0x20:0x40] = 0x03;\n                        storage[keccak256(memory[0x00:0x40])] = var9;\n                        memory[0x20:0x40] = 0x05;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        var temp6 = var6 * storage[0x07] - var7;\n                        storage[temp5] = temp6 + storage[temp5];\n                        var8 = temp6;\n                        var10 = var1 & temp4;\n                        var9 = arg1 & temp4;\n                        var11 = 0x8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab;\n                        var12 = arg0;\n                        var var13 = var6;\n                        var var14 = block.timestamp;\n                        var var15 = 0x05d8;\n                        var15 = buyPrice();\n                        var temp7 = memory[0x40:0x60];\n                        memory[temp7:temp7 + 0x20] = var12;\n                        memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var13;\n                        memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = var14;\n                        memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = var15;\n                        var temp8 = memory[0x40:0x60];\n                        log(memory[temp8:temp8 + temp7 - temp8 + 0x80], [stack[-5], stack[-6], stack[-7]]);\n                        return var6;\n                    } else {\n                    label_04ED:\n                        var9 = 0x04f8;\n                        var10 = storage[0x06];\n                        var11 = var6;\n                        var9 = func_0E8E(var10, var11);\n                        var temp9 = var9;\n                        storage[0x06] = temp9;\n                        var10 = var4 * 0x010000000000000000;\n                    \n                        if (!temp9) { assert(); }\n                    \n                        storage[0x07] = storage[0x07] + var10 / var9;\n                        var9 = storage[0x06];\n                        var10 = var4 * 0x010000000000000000;\n                    \n                        if (!var9) { assert(); }\n                    \n                        var temp10 = var7;\n                        var7 = temp10 - (temp10 - var6 * (var10 / var9));\n                        memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var9 = 0x056e;\n                        var10 = storage[keccak256(memory[0x00:0x40])];\n                        var11 = var6;\n                        var9 = func_0E8E(var10, var11);\n                        goto label_056E;\n                    }\n                } else {\n                label_0486:\n                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                    var10 = storage[keccak256(memory[0x00:0x40])];\n                    var9 = 0x04a8;\n                    var11 = var3;\n                    var9 = func_0E8E(var10, var11);\n                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                    storage[keccak256(memory[0x00:0x40])] = var9;\n                \n                    if (storage[0x06] <= 0x00) { goto label_0545; }\n                    else { goto label_04ED; }\n                }\n            } else {\n            label_0461:\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_04C6; }\n                else { goto label_0486; }\n            }\n        } else {\n            var9 = storage[0x06];\n            var10 = 0x0423;\n            var11 = var6;\n            var12 = var9;\n            var10 = func_0E8E(var11, var12);\n            var9 = var10 > var9;\n            goto label_0425;\n        }\n    }\n    \n    function func_03C1(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x03;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x07] - temp0 / 0x010000000000000000;\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x00;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_06CD:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_06C4; }\n        \n        label_06B0:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_06B0; }\n        \n        label_06C4:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_06CD;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_06CD;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x06]; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 > storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        var var4 = 0x072e;\n        var var5 = arg0;\n        var4 = func_0E9D(var5);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x073e;\n        var5 = 0x03c1;\n        var var6 = var1;\n        var var7 = 0x04;\n        var5 = func_0D97(var6, var7);\n        var4 = func_03C1(var5);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x06ff;\n        var5 = var1;\n        var6 = var2;\n        return func_0DE4(var5, var6);\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x075e;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x0775;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x05;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var2;\n        storage[temp1] = temp2 * 0x010000000000000000 + storage[temp1];\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var temp5 = memory[0x40:0x60];\n        var temp6 = temp2 + temp4;\n        var1 = temp6;\n        var temp7;\n        temp7, memory[temp5:temp5 + 0x00] = address(temp0).call.gas(!var1 * 0x08fc).value(var1)(memory[temp5:temp5 + 0x00]);\n        var2 = !temp7;\n    \n        if (!var2) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = var1;\n            var temp9 = memory[0x40:0x60];\n            log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var temp10 = returndata.length;\n            memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x06] != 0x00) {\n            var var4 = 0x0851;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_0E9D(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x0861;\n            var5 = 0x03c1;\n            var var6 = var1;\n            var var7 = 0x04;\n            var5 = func_0D97(var6, var7);\n            var4 = func_03C1(var5);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x086d;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_0DE4(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0873:\n            return var0;\n        } else {\n            var0 = 0x14f46b0400;\n            goto label_0873;\n        }\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x02]; }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x08b7;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x0890;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x06] != 0x00) {\n            var var4 = 0x0911;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_0E9D(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x0921;\n            var5 = 0x03c1;\n            var var6 = var1;\n            var var7 = 0x0a;\n            var5 = func_0D97(var6, var7);\n            var4 = func_03C1(var5);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x086d;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_0E8E(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0873:\n            return var0;\n        } else {\n            var0 = 0x199c82cc00;\n            goto label_0873;\n        }\n    }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x0939;\n        var var3 = var1;\n        return balanceOf(var3);\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_06CD:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_06C4; }\n        \n        label_06B0:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_06B0; }\n        \n        label_06C4:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_06CD;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_06CD;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x09aa;\n        var6 = myTokens();\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var1 = msg.sender;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var5 = 0x00;\n        var6 = 0x09df;\n        var var7 = 0x01;\n        var6 = myDividends(var7);\n    \n        if (var6 <= var5) {\n        label_09ED:\n            var5 = 0x09fb;\n            var6 = 0x03c1;\n            var7 = arg1;\n            var var8 = 0x01;\n            var6 = func_0D97(var7, var8);\n            var5 = func_03C1(var6);\n            var temp0 = var5;\n            var2 = temp0;\n            var5 = 0x0a07;\n            var6 = arg1;\n            var7 = var2;\n            var5 = func_0DE4(var6, var7);\n            var3 = var5;\n            var5 = 0x0a12;\n            var6 = var2;\n            var5 = func_0E9D(var6);\n            var4 = var5;\n            var5 = 0x0a20;\n            var6 = storage[0x06];\n            var7 = var2;\n            var5 = func_0DE4(var6, var7);\n            storage[0x06] = var5;\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var5 = 0x0a46;\n            var7 = arg1;\n            var5 = func_0DE4(var6, var7);\n            var temp1 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = var1 & temp1;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x00:0x20] = arg0 & temp1;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var5 = 0x0a75;\n            var7 = var3;\n            var5 = func_0E8E(var6, var7);\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            var temp3 = temp2 & arg0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x00:0x20] = var1 & temp2;\n            memory[0x20:0x40] = 0x05;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = storage[temp4] - arg1 * storage[0x07];\n            memory[0x00:0x20] = temp3;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = storage[temp5] + var3 * storage[0x07];\n            var5 = 0x0ae9;\n            var6 = storage[0x07];\n            var7 = storage[0x06];\n            var8 = var4 * 0x010000000000000000;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_0AE3(var6, var7, var8);\n            storage[0x07] = var5;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var3;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var5 = 0x09ed;\n            withdraw();\n            goto label_09ED;\n        }\n    }\n    \n    function func_0AE3(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_0E8E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = 0x0b4f;\n        var7 = myTokens();\n    \n        if (var7 <= var6) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var0 = msg.sender;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var6 = 0x0b84;\n        var7 = var1;\n        var6 = func_0E9D(var7);\n        var temp0 = var6;\n        var2 = temp0;\n        var6 = 0x0b94;\n        var7 = 0x03c1;\n        var var8 = var2;\n        var var9 = 0x04;\n        var7 = func_0D97(var8, var9);\n        var6 = func_03C1(var7);\n        var temp1 = var6;\n        var3 = temp1;\n        var6 = 0x0ba0;\n        var7 = var2;\n        var8 = var3;\n        var6 = func_0DE4(var7, var8);\n        var4 = var6;\n        var6 = 0x0bae;\n        var7 = storage[0x06];\n        var8 = var1;\n        var6 = func_0DE4(var7, var8);\n        storage[0x06] = var6;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x0bd4;\n        var8 = var1;\n        var6 = func_0DE4(var7, var8);\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n        memory[0x20:0x40] = 0x05;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = var4 * 0x010000000000000000 + var1 * storage[0x07];\n        storage[temp2] = storage[temp2] - temp3;\n        var5 = temp3;\n    \n        if (0x00 >= storage[0x06]) {\n        label_0C44:\n            var6 = var0 & 0x02 ** 0xa0 - 0x01;\n            var7 = 0x8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e;\n            var8 = var1;\n            var9 = var4;\n            var var10 = block.timestamp;\n            var var11 = 0x0c7a;\n            var11 = buyPrice();\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var8;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var9;\n            memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = var10;\n            memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = var11;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + temp4 - temp5 + 0x80], [stack[-5], stack[-6]]);\n            return;\n        } else {\n            var6 = 0x0c40;\n            var7 = storage[0x07];\n            var8 = storage[0x06];\n            var9 = var3 * 0x010000000000000000;\n        \n            if (!var8) { assert(); }\n        \n            var6 = func_0AE3(var7, var8, var9);\n            storage[0x07] = var6;\n            goto label_0C44;\n        }\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x03;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_0CC9:\n            var var2 = 0x0cd1;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x0cc9;\n            var var3 = var1;\n            sell(var3);\n            goto label_0CC9;\n        }\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x0cf1;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x0d05;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var3;\n        storage[temp0] = temp1 * 0x010000000000000000 + storage[temp0];\n        memory[0x20:0x40] = 0x04;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = storage[temp2];\n        storage[temp2] = 0x00;\n        var0 = temp1 + temp3;\n        var1 = msg.sender;\n        var3 = 0x0d47;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = buy(var4, var5);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = var3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_0D97(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0) {\n            var temp0 = arg0;\n            var1 = arg1 * temp0;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_0DC6:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0DC6;\n        }\n    }\n    \n    function func_0DE4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0DF6(var arg0) returns (var r0) {\n        var temp0 = storage[0x06];\n        var var0 = 0x00;\n        var var1 = 0x01431e0fae6d7217caa0000000;\n        var var2 = var0;\n        var var3 = temp0;\n        var var4 = 0x02540be400;\n        var var5 = 0x0e7b;\n        var var6 = 0x0e75;\n        var var7 = var3 * 0x05e0a1fd2712875988becaad0000000000 + var3 ** 0x02 * 0x056bc75e2d63100000 + arg0 * 0x0380d4bd8a8678c1bb542c80deb4800000000000 + 0x0197d4df19d605767337e9f14d3eec8920e400000000000000;\n        var6 = func_0F09(var7);\n        var5 = func_0E75(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_0E75(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_0DE4(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0E8E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0E9D(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x06] + 0x0de0b6b3a7640000;\n        var var4 = 0x0de0b6b3a7640000;\n        var var3 = var0;\n        var var5 = 0x0ef6;\n        var var6 = temp0 * (var2 / var4 * 0x02540be400 + 0x14f46b0400);\n        var var7 = 0x02;\n        var var8 = (var1 ** var7 - temp0 + ~0x0de0b6b3a763ffff) / var4 * 0x02540be400;\n    \n        if (!var7) { assert(); }\n    \n        var5 = func_0EF0(var6, var7, var8);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_0EF0(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_0DE4(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0F09(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_08BC:\n            return var0;\n        } else {\n        label_0F1B:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_08BC; }\n            else { goto label_0F1B; }\n        }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0110:\n            var var0 = 0x011b;\n            var var1 = msg.value;\n            var var2 = 0x00;\n            var0 = buy(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = dividendsOf(var2);\n            \n            label_013F:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0166;\n                var2 = name();\n            \n            label_0166:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = 0x20;\n                var temp3 = var2;\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n                var var3 = temp2;\n                var var4 = var3;\n                var var5 = var4 + 0x40;\n                var var7 = memory[temp3:temp3 + 0x20];\n                var var6 = temp3 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_01A0:\n                    var temp4 = var7;\n                    var5 = temp4 + var5;\n                    var6 = temp4 & 0x1f;\n                \n                    if (!var6) {\n                        var temp5 = memory[0x40:0x60];\n                        return memory[temp5:temp5 + var5 - temp5];\n                    } else {\n                        var temp6 = var6;\n                        var temp7 = var5 - temp6;\n                        memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                        var temp8 = memory[0x40:0x60];\n                        return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                    }\n                } else {\n                label_0191:\n                    var temp9 = var11;\n                    memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                    var11 = temp9 + 0x20;\n                \n                    if (var11 >= var8) { goto label_01A0; }\n                    else { goto label_0191; }\n                }\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x00;\n                var4 = var3;\n                var5 = var4;\n                var6 = var5;\n                var7 = 0x06e8;\n                var8 = 0x03c1;\n                var9 = var2;\n                var10 = 0x0a;\n                var8 = func_0D97(var9, var10);\n                var7 = func_03C1(var8);\n                var temp10 = var7;\n                var4 = temp10;\n                var7 = 0x06f4;\n                var8 = var2;\n                var9 = var4;\n                var7 = func_0DE4(var8, var9);\n                var temp11 = var7;\n                var5 = temp11;\n                var7 = 0x06ff;\n                var8 = var5;\n                var7 = func_0DF6(var8);\n                var1 = var7;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var1 = totalSupply();\n                goto label_013F;\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                goto label_013F;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0235;\n                var2 = decimals();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var2 & 0xff;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0260;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var1 = sellPrice();\n                goto label_013F;\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = stakingRequirement();\n                goto label_013F;\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                goto label_013F;\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var1 = totalEthereumBalance();\n                goto label_013F;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_013F;\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var1 = buyPrice();\n                goto label_013F;\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var1 = myTokens();\n                goto label_013F;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0166;\n                var2 = symbol();\n                goto label_0166;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = !!var1;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0260;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0260;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x013f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x00;\n                var4 = 0x08bc;\n                var5 = msg.value;\n                var6 = var2;\n                var4 = buy(var5, var6);\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0260;\n                reinvest();\n                stop();\n            } else { goto label_0110; }\n        }\n    }\n    \n    function buy(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = var0;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = var6;\n        var var8 = var7;\n        var var9 = 0x03c8;\n        var var10 = 0x03c1;\n        var var11 = arg0;\n        var var12 = 0x0a;\n        var10 = func_0D97(var11, var12);\n        var9 = func_03C1(var10);\n        var temp0 = var9;\n        var2 = temp0;\n        var9 = 0x03d8;\n        var10 = 0x03c1;\n        var11 = var2;\n        var12 = 0x21;\n        var10 = func_0D97(var11, var12);\n        var9 = func_03C1(var10);\n        var temp1 = var9;\n        var3 = temp1;\n        var9 = 0x03e4;\n        var10 = var2;\n        var11 = var3;\n        var9 = func_0DE4(var10, var11);\n        var4 = var9;\n        var9 = 0x03f0;\n        var10 = arg0;\n        var11 = var2;\n        var9 = func_0DE4(var10, var11);\n        var temp2 = var9;\n        var5 = temp2;\n        var9 = 0x03fb;\n        var10 = var5;\n        var9 = func_0DF6(var10);\n        var6 = var9;\n        var7 = var4 * 0x010000000000000000;\n        var temp3 = var6 > 0x00;\n        var9 = temp3;\n    \n        if (!var9) {\n        label_0425:\n        \n            if (!var9) { revert(memory[0x00:0x00]); }\n        \n            var9 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n        \n            if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                var9 = arg1 & 0x02 ** 0xa0 - 0x01 != var1 & 0x02 ** 0xa0 - 0x01;\n            \n                if (!var9) { goto label_0480; }\n                else { goto label_0461; }\n            } else if (!var9) {\n            label_0480:\n            \n                if (!var9) {\n                label_04C6:\n                    var9 = 0x04d0;\n                    var10 = var4;\n                    var11 = var3;\n                    var9 = func_0E8E(var10, var11);\n                    var4 = var9;\n                    var7 = var4 * 0x010000000000000000;\n                \n                    if (storage[0x06] <= 0x00) {\n                    label_0545:\n                        storage[0x06] = var6;\n                        memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var10 = storage[keccak256(memory[0x00:0x40])];\n                        var9 = 0x056e;\n                        var11 = var6;\n                        var9 = func_0E8E(var10, var11);\n                    \n                    label_056E:\n                        var temp4 = 0x02 ** 0xa0 - 0x01;\n                        memory[0x00:0x20] = var1 & temp4;\n                        memory[0x20:0x40] = 0x03;\n                        storage[keccak256(memory[0x00:0x40])] = var9;\n                        memory[0x20:0x40] = 0x05;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        var temp6 = var6 * storage[0x07] - var7;\n                        storage[temp5] = temp6 + storage[temp5];\n                        var8 = temp6;\n                        var10 = var1 & temp4;\n                        var9 = arg1 & temp4;\n                        var11 = 0x8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab;\n                        var12 = arg0;\n                        var var13 = var6;\n                        var var14 = block.timestamp;\n                        var var15 = 0x05d8;\n                        var15 = buyPrice();\n                        var temp7 = memory[0x40:0x60];\n                        memory[temp7:temp7 + 0x20] = var12;\n                        memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var13;\n                        memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = var14;\n                        memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = var15;\n                        var temp8 = memory[0x40:0x60];\n                        log(memory[temp8:temp8 + temp7 - temp8 + 0x80], [stack[-5], stack[-6], stack[-7]]);\n                        return var6;\n                    } else {\n                    label_04ED:\n                        var9 = 0x04f8;\n                        var10 = storage[0x06];\n                        var11 = var6;\n                        var9 = func_0E8E(var10, var11);\n                        var temp9 = var9;\n                        storage[0x06] = temp9;\n                        var10 = var4 * 0x010000000000000000;\n                    \n                        if (!temp9) { assert(); }\n                    \n                        storage[0x07] = storage[0x07] + var10 / var9;\n                        var9 = storage[0x06];\n                        var10 = var4 * 0x010000000000000000;\n                    \n                        if (!var9) { assert(); }\n                    \n                        var temp10 = var7;\n                        var7 = temp10 - (temp10 - var6 * (var10 / var9));\n                        memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var9 = 0x056e;\n                        var10 = storage[keccak256(memory[0x00:0x40])];\n                        var11 = var6;\n                        var9 = func_0E8E(var10, var11);\n                        goto label_056E;\n                    }\n                } else {\n                label_0486:\n                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                    var10 = storage[keccak256(memory[0x00:0x40])];\n                    var9 = 0x04a8;\n                    var11 = var3;\n                    var9 = func_0E8E(var10, var11);\n                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                    storage[keccak256(memory[0x00:0x40])] = var9;\n                \n                    if (storage[0x06] <= 0x00) { goto label_0545; }\n                    else { goto label_04ED; }\n                }\n            } else {\n            label_0461:\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_04C6; }\n                else { goto label_0486; }\n            }\n        } else {\n            var9 = storage[0x06];\n            var10 = 0x0423;\n            var11 = var6;\n            var12 = var9;\n            var10 = func_0E8E(var11, var12);\n            var9 = var10 > var9;\n            goto label_0425;\n        }\n    }\n    \n    function func_03C1(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x03;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x07] - temp0 / 0x010000000000000000;\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x00;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_06CD:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_06C4; }\n        \n        label_06B0:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_06B0; }\n        \n        label_06C4:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_06CD;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_06CD;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x06]; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 > storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        var var4 = 0x072e;\n        var var5 = arg0;\n        var4 = func_0E9D(var5);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x073e;\n        var5 = 0x03c1;\n        var var6 = var1;\n        var var7 = 0x04;\n        var5 = func_0D97(var6, var7);\n        var4 = func_03C1(var5);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x06ff;\n        var5 = var1;\n        var6 = var2;\n        return func_0DE4(var5, var6);\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x075e;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x0775;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x05;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var2;\n        storage[temp1] = temp2 * 0x010000000000000000 + storage[temp1];\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var temp5 = memory[0x40:0x60];\n        var temp6 = temp2 + temp4;\n        var1 = temp6;\n        var temp7;\n        temp7, memory[temp5:temp5 + 0x00] = address(temp0).call.gas(!var1 * 0x08fc).value(var1)(memory[temp5:temp5 + 0x00]);\n        var2 = !temp7;\n    \n        if (!var2) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = var1;\n            var temp9 = memory[0x40:0x60];\n            log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var temp10 = returndata.length;\n            memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x06] != 0x00) {\n            var var4 = 0x0851;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_0E9D(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x0861;\n            var5 = 0x03c1;\n            var var6 = var1;\n            var var7 = 0x04;\n            var5 = func_0D97(var6, var7);\n            var4 = func_03C1(var5);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x086d;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_0DE4(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0873:\n            return var0;\n        } else {\n            var0 = 0x14f46b0400;\n            goto label_0873;\n        }\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x02]; }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x08b7;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x0890;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x06] != 0x00) {\n            var var4 = 0x0911;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_0E9D(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x0921;\n            var5 = 0x03c1;\n            var var6 = var1;\n            var var7 = 0x0a;\n            var5 = func_0D97(var6, var7);\n            var4 = func_03C1(var5);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x086d;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_0E8E(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0873:\n            return var0;\n        } else {\n            var0 = 0x199c82cc00;\n            goto label_0873;\n        }\n    }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x0939;\n        var var3 = var1;\n        return balanceOf(var3);\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_06CD:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_06C4; }\n        \n        label_06B0:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_06B0; }\n        \n        label_06C4:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_06CD;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_06CD;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x09aa;\n        var6 = myTokens();\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var1 = msg.sender;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var5 = 0x00;\n        var6 = 0x09df;\n        var var7 = 0x01;\n        var6 = myDividends(var7);\n    \n        if (var6 <= var5) {\n        label_09ED:\n            var5 = 0x09fb;\n            var6 = 0x03c1;\n            var7 = arg1;\n            var var8 = 0x01;\n            var6 = func_0D97(var7, var8);\n            var5 = func_03C1(var6);\n            var temp0 = var5;\n            var2 = temp0;\n            var5 = 0x0a07;\n            var6 = arg1;\n            var7 = var2;\n            var5 = func_0DE4(var6, var7);\n            var3 = var5;\n            var5 = 0x0a12;\n            var6 = var2;\n            var5 = func_0E9D(var6);\n            var4 = var5;\n            var5 = 0x0a20;\n            var6 = storage[0x06];\n            var7 = var2;\n            var5 = func_0DE4(var6, var7);\n            storage[0x06] = var5;\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var5 = 0x0a46;\n            var7 = arg1;\n            var5 = func_0DE4(var6, var7);\n            var temp1 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = var1 & temp1;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x00:0x20] = arg0 & temp1;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var5 = 0x0a75;\n            var7 = var3;\n            var5 = func_0E8E(var6, var7);\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            var temp3 = temp2 & arg0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x00:0x20] = var1 & temp2;\n            memory[0x20:0x40] = 0x05;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = storage[temp4] - arg1 * storage[0x07];\n            memory[0x00:0x20] = temp3;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = storage[temp5] + var3 * storage[0x07];\n            var5 = 0x0ae9;\n            var6 = storage[0x07];\n            var7 = storage[0x06];\n            var8 = var4 * 0x010000000000000000;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_0AE3(var6, var7, var8);\n            storage[0x07] = var5;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var3;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var5 = 0x09ed;\n            withdraw();\n            goto label_09ED;\n        }\n    }\n    \n    function func_0AE3(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_0E8E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = 0x0b4f;\n        var7 = myTokens();\n    \n        if (var7 <= var6) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var0 = msg.sender;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var6 = 0x0b84;\n        var7 = var1;\n        var6 = func_0E9D(var7);\n        var temp0 = var6;\n        var2 = temp0;\n        var6 = 0x0b94;\n        var7 = 0x03c1;\n        var var8 = var2;\n        var var9 = 0x04;\n        var7 = func_0D97(var8, var9);\n        var6 = func_03C1(var7);\n        var temp1 = var6;\n        var3 = temp1;\n        var6 = 0x0ba0;\n        var7 = var2;\n        var8 = var3;\n        var6 = func_0DE4(var7, var8);\n        var4 = var6;\n        var6 = 0x0bae;\n        var7 = storage[0x06];\n        var8 = var1;\n        var6 = func_0DE4(var7, var8);\n        storage[0x06] = var6;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x0bd4;\n        var8 = var1;\n        var6 = func_0DE4(var7, var8);\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n        memory[0x20:0x40] = 0x05;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = var4 * 0x010000000000000000 + var1 * storage[0x07];\n        storage[temp2] = storage[temp2] - temp3;\n        var5 = temp3;\n    \n        if (0x00 >= storage[0x06]) {\n        label_0C44:\n            var6 = var0 & 0x02 ** 0xa0 - 0x01;\n            var7 = 0x8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e;\n            var8 = var1;\n            var9 = var4;\n            var var10 = block.timestamp;\n            var var11 = 0x0c7a;\n            var11 = buyPrice();\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var8;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var9;\n            memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = var10;\n            memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = var11;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + temp4 - temp5 + 0x80], [stack[-5], stack[-6]]);\n            return;\n        } else {\n            var6 = 0x0c40;\n            var7 = storage[0x07];\n            var8 = storage[0x06];\n            var9 = var3 * 0x010000000000000000;\n        \n            if (!var8) { assert(); }\n        \n            var6 = func_0AE3(var7, var8, var9);\n            storage[0x07] = var6;\n            goto label_0C44;\n        }\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x03;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_0CC9:\n            var var2 = 0x0cd1;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x0cc9;\n            var var3 = var1;\n            sell(var3);\n            goto label_0CC9;\n        }\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x0cf1;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x0d05;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var3;\n        storage[temp0] = temp1 * 0x010000000000000000 + storage[temp0];\n        memory[0x20:0x40] = 0x04;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = storage[temp2];\n        storage[temp2] = 0x00;\n        var0 = temp1 + temp3;\n        var1 = msg.sender;\n        var3 = 0x0d47;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = buy(var4, var5);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = var3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_0D97(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0) {\n            var temp0 = arg0;\n            var1 = arg1 * temp0;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_0DC6:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0DC6;\n        }\n    }\n    \n    function func_0DE4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0DF6(var arg0) returns (var r0) {\n        var temp0 = storage[0x06];\n        var var0 = 0x00;\n        var var1 = 0x01431e0fae6d7217caa0000000;\n        var var2 = var0;\n        var var3 = temp0;\n        var var4 = 0x02540be400;\n        var var5 = 0x0e7b;\n        var var6 = 0x0e75;\n        var var7 = var3 * 0x05e0a1fd2712875988becaad0000000000 + var3 ** 0x02 * 0x056bc75e2d63100000 + arg0 * 0x0380d4bd8a8678c1bb542c80deb4800000000000 + 0x0197d4df19d605767337e9f14d3eec8920e400000000000000;\n        var6 = func_0F09(var7);\n        var5 = func_0E75(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_0E75(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_0DE4(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0E8E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0E9D(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x06] + 0x0de0b6b3a7640000;\n        var var4 = 0x0de0b6b3a7640000;\n        var var3 = var0;\n        var var5 = 0x0ef6;\n        var var6 = temp0 * (var2 / var4 * 0x02540be400 + 0x14f46b0400);\n        var var7 = 0x02;\n        var var8 = (var1 ** var7 - temp0 + ~0x0de0b6b3a763ffff) / var4 * 0x02540be400;\n    \n        if (!var7) { assert(); }\n    \n        var5 = func_0EF0(var6, var7, var8);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_0EF0(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_0DE4(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0F09(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_08BC:\n            return var0;\n        } else {\n        label_0F1B:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_08BC; }\n            else { goto label_0F1B; }\n        }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0110:\n            var var0 = 0x011b;\n            var var1 = msg.value;\n            var var2 = 0x00;\n            var0 = buy(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = dividendsOf(var2);\n            \n            label_013F:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0166;\n                var2 = name();\n            \n            label_0166:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = 0x20;\n                var temp3 = var2;\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n                var var3 = temp2;\n                var var4 = var3;\n                var var5 = var4 + 0x40;\n                var var7 = memory[temp3:temp3 + 0x20];\n                var var6 = temp3 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_01A0:\n                    var temp4 = var7;\n                    var5 = temp4 + var5;\n                    var6 = temp4 & 0x1f;\n                \n                    if (!var6) {\n                        var temp5 = memory[0x40:0x60];\n                        return memory[temp5:temp5 + var5 - temp5];\n                    } else {\n                        var temp6 = var6;\n                        var temp7 = var5 - temp6;\n                        memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                        var temp8 = memory[0x40:0x60];\n                        return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                    }\n                } else {\n                label_0191:\n                    var temp9 = var11;\n                    memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                    var11 = temp9 + 0x20;\n                \n                    if (var11 >= var8) { goto label_01A0; }\n                    else { goto label_0191; }\n                }\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x00;\n                var4 = var3;\n                var5 = var4;\n                var6 = var5;\n                var7 = 0x06e8;\n                var8 = 0x03c1;\n                var9 = var2;\n                var10 = 0x0a;\n                var8 = func_0D97(var9, var10);\n                var7 = func_03C1(var8);\n                var temp10 = var7;\n                var4 = temp10;\n                var7 = 0x06f4;\n                var8 = var2;\n                var9 = var4;\n                var7 = func_0DE4(var8, var9);\n                var temp11 = var7;\n                var5 = temp11;\n                var7 = 0x06ff;\n                var8 = var5;\n                var7 = func_0DF6(var8);\n                var1 = var7;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var1 = totalSupply();\n                goto label_013F;\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                goto label_013F;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0235;\n                var2 = decimals();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var2 & 0xff;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0260;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var1 = sellPrice();\n                goto label_013F;\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = stakingRequirement();\n                goto label_013F;\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                goto label_013F;\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var1 = totalEthereumBalance();\n                goto label_013F;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_013F;\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var1 = buyPrice();\n                goto label_013F;\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var1 = myTokens();\n                goto label_013F;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0166;\n                var2 = symbol();\n                goto label_0166;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = !!var1;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0260;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0260;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x013f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x00;\n                var4 = 0x08bc;\n                var5 = msg.value;\n                var6 = var2;\n                var4 = buy(var5, var6);\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0260;\n                reinvest();\n                stop();\n            } else { goto label_0110; }\n        }\n    }\n    \n    function buy(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = var0;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = var6;\n        var var8 = var7;\n        var var9 = 0x03c8;\n        var var10 = 0x03c1;\n        var var11 = arg0;\n        var var12 = 0x0a;\n        var10 = func_0D97(var11, var12);\n        var9 = func_03C1(var10);\n        var temp0 = var9;\n        var2 = temp0;\n        var9 = 0x03d8;\n        var10 = 0x03c1;\n        var11 = var2;\n        var12 = 0x21;\n        var10 = func_0D97(var11, var12);\n        var9 = func_03C1(var10);\n        var temp1 = var9;\n        var3 = temp1;\n        var9 = 0x03e4;\n        var10 = var2;\n        var11 = var3;\n        var9 = func_0DE4(var10, var11);\n        var4 = var9;\n        var9 = 0x03f0;\n        var10 = arg0;\n        var11 = var2;\n        var9 = func_0DE4(var10, var11);\n        var temp2 = var9;\n        var5 = temp2;\n        var9 = 0x03fb;\n        var10 = var5;\n        var9 = func_0DF6(var10);\n        var6 = var9;\n        var7 = var4 * 0x010000000000000000;\n        var temp3 = var6 > 0x00;\n        var9 = temp3;\n    \n        if (!var9) {\n        label_0425:\n        \n            if (!var9) { revert(memory[0x00:0x00]); }\n        \n            var9 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n        \n            if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                var9 = arg1 & 0x02 ** 0xa0 - 0x01 != var1 & 0x02 ** 0xa0 - 0x01;\n            \n                if (!var9) { goto label_0480; }\n                else { goto label_0461; }\n            } else if (!var9) {\n            label_0480:\n            \n                if (!var9) {\n                label_04C6:\n                    var9 = 0x04d0;\n                    var10 = var4;\n                    var11 = var3;\n                    var9 = func_0E8E(var10, var11);\n                    var4 = var9;\n                    var7 = var4 * 0x010000000000000000;\n                \n                    if (storage[0x06] <= 0x00) {\n                    label_0545:\n                        storage[0x06] = var6;\n                        memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var10 = storage[keccak256(memory[0x00:0x40])];\n                        var9 = 0x056e;\n                        var11 = var6;\n                        var9 = func_0E8E(var10, var11);\n                    \n                    label_056E:\n                        var temp4 = 0x02 ** 0xa0 - 0x01;\n                        memory[0x00:0x20] = var1 & temp4;\n                        memory[0x20:0x40] = 0x03;\n                        storage[keccak256(memory[0x00:0x40])] = var9;\n                        memory[0x20:0x40] = 0x05;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        var temp6 = var6 * storage[0x07] - var7;\n                        storage[temp5] = temp6 + storage[temp5];\n                        var8 = temp6;\n                        var10 = var1 & temp4;\n                        var9 = arg1 & temp4;\n                        var11 = 0x8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab;\n                        var12 = arg0;\n                        var var13 = var6;\n                        var var14 = block.timestamp;\n                        var var15 = 0x05d8;\n                        var15 = buyPrice();\n                        var temp7 = memory[0x40:0x60];\n                        memory[temp7:temp7 + 0x20] = var12;\n                        memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var13;\n                        memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = var14;\n                        memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = var15;\n                        var temp8 = memory[0x40:0x60];\n                        log(memory[temp8:temp8 + temp7 - temp8 + 0x80], [stack[-5], stack[-6], stack[-7]]);\n                        return var6;\n                    } else {\n                    label_04ED:\n                        var9 = 0x04f8;\n                        var10 = storage[0x06];\n                        var11 = var6;\n                        var9 = func_0E8E(var10, var11);\n                        var temp9 = var9;\n                        storage[0x06] = temp9;\n                        var10 = var4 * 0x010000000000000000;\n                    \n                        if (!temp9) { assert(); }\n                    \n                        storage[0x07] = storage[0x07] + var10 / var9;\n                        var9 = storage[0x06];\n                        var10 = var4 * 0x010000000000000000;\n                    \n                        if (!var9) { assert(); }\n                    \n                        var temp10 = var7;\n                        var7 = temp10 - (temp10 - var6 * (var10 / var9));\n                        memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var9 = 0x056e;\n                        var10 = storage[keccak256(memory[0x00:0x40])];\n                        var11 = var6;\n                        var9 = func_0E8E(var10, var11);\n                        goto label_056E;\n                    }\n                } else {\n                label_0486:\n                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                    var10 = storage[keccak256(memory[0x00:0x40])];\n                    var9 = 0x04a8;\n                    var11 = var3;\n                    var9 = func_0E8E(var10, var11);\n                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                    storage[keccak256(memory[0x00:0x40])] = var9;\n                \n                    if (storage[0x06] <= 0x00) { goto label_0545; }\n                    else { goto label_04ED; }\n                }\n            } else {\n            label_0461:\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_04C6; }\n                else { goto label_0486; }\n            }\n        } else {\n            var9 = storage[0x06];\n            var10 = 0x0423;\n            var11 = var6;\n            var12 = var9;\n            var10 = func_0E8E(var11, var12);\n            var9 = var10 > var9;\n            goto label_0425;\n        }\n    }\n    \n    function func_03C1(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x03;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x07] - temp0 / 0x010000000000000000;\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x00;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_06CD:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_06C4; }\n        \n        label_06B0:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_06B0; }\n        \n        label_06C4:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_06CD;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_06CD;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x06]; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 > storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        var var4 = 0x072e;\n        var var5 = arg0;\n        var4 = func_0E9D(var5);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x073e;\n        var5 = 0x03c1;\n        var var6 = var1;\n        var var7 = 0x04;\n        var5 = func_0D97(var6, var7);\n        var4 = func_03C1(var5);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x06ff;\n        var5 = var1;\n        var6 = var2;\n        return func_0DE4(var5, var6);\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x075e;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x0775;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x05;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var2;\n        storage[temp1] = temp2 * 0x010000000000000000 + storage[temp1];\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var temp5 = memory[0x40:0x60];\n        var temp6 = temp2 + temp4;\n        var1 = temp6;\n        var temp7;\n        temp7, memory[temp5:temp5 + 0x00] = address(temp0).call.gas(!var1 * 0x08fc).value(var1)(memory[temp5:temp5 + 0x00]);\n        var2 = !temp7;\n    \n        if (!var2) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = var1;\n            var temp9 = memory[0x40:0x60];\n            log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var temp10 = returndata.length;\n            memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x06] != 0x00) {\n            var var4 = 0x0851;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_0E9D(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x0861;\n            var5 = 0x03c1;\n            var var6 = var1;\n            var var7 = 0x04;\n            var5 = func_0D97(var6, var7);\n            var4 = func_03C1(var5);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x086d;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_0DE4(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0873:\n            return var0;\n        } else {\n            var0 = 0x14f46b0400;\n            goto label_0873;\n        }\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x02]; }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x08b7;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x0890;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x06] != 0x00) {\n            var var4 = 0x0911;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_0E9D(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x0921;\n            var5 = 0x03c1;\n            var var6 = var1;\n            var var7 = 0x0a;\n            var5 = func_0D97(var6, var7);\n            var4 = func_03C1(var5);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x086d;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_0E8E(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0873:\n            return var0;\n        } else {\n            var0 = 0x199c82cc00;\n            goto label_0873;\n        }\n    }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x0939;\n        var var3 = var1;\n        return balanceOf(var3);\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_06CD:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_06C4; }\n        \n        label_06B0:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_06B0; }\n        \n        label_06C4:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_06CD;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_06CD;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x09aa;\n        var6 = myTokens();\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var1 = msg.sender;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var5 = 0x00;\n        var6 = 0x09df;\n        var var7 = 0x01;\n        var6 = myDividends(var7);\n    \n        if (var6 <= var5) {\n        label_09ED:\n            var5 = 0x09fb;\n            var6 = 0x03c1;\n            var7 = arg1;\n            var var8 = 0x01;\n            var6 = func_0D97(var7, var8);\n            var5 = func_03C1(var6);\n            var temp0 = var5;\n            var2 = temp0;\n            var5 = 0x0a07;\n            var6 = arg1;\n            var7 = var2;\n            var5 = func_0DE4(var6, var7);\n            var3 = var5;\n            var5 = 0x0a12;\n            var6 = var2;\n            var5 = func_0E9D(var6);\n            var4 = var5;\n            var5 = 0x0a20;\n            var6 = storage[0x06];\n            var7 = var2;\n            var5 = func_0DE4(var6, var7);\n            storage[0x06] = var5;\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var5 = 0x0a46;\n            var7 = arg1;\n            var5 = func_0DE4(var6, var7);\n            var temp1 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = var1 & temp1;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x00:0x20] = arg0 & temp1;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var5 = 0x0a75;\n            var7 = var3;\n            var5 = func_0E8E(var6, var7);\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            var temp3 = temp2 & arg0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x00:0x20] = var1 & temp2;\n            memory[0x20:0x40] = 0x05;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = storage[temp4] - arg1 * storage[0x07];\n            memory[0x00:0x20] = temp3;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = storage[temp5] + var3 * storage[0x07];\n            var5 = 0x0ae9;\n            var6 = storage[0x07];\n            var7 = storage[0x06];\n            var8 = var4 * 0x010000000000000000;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_0AE3(var6, var7, var8);\n            storage[0x07] = var5;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var3;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var5 = 0x09ed;\n            withdraw();\n            goto label_09ED;\n        }\n    }\n    \n    function func_0AE3(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_0E8E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = 0x0b4f;\n        var7 = myTokens();\n    \n        if (var7 <= var6) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var0 = msg.sender;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var6 = 0x0b84;\n        var7 = var1;\n        var6 = func_0E9D(var7);\n        var temp0 = var6;\n        var2 = temp0;\n        var6 = 0x0b94;\n        var7 = 0x03c1;\n        var var8 = var2;\n        var var9 = 0x04;\n        var7 = func_0D97(var8, var9);\n        var6 = func_03C1(var7);\n        var temp1 = var6;\n        var3 = temp1;\n        var6 = 0x0ba0;\n        var7 = var2;\n        var8 = var3;\n        var6 = func_0DE4(var7, var8);\n        var4 = var6;\n        var6 = 0x0bae;\n        var7 = storage[0x06];\n        var8 = var1;\n        var6 = func_0DE4(var7, var8);\n        storage[0x06] = var6;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x0bd4;\n        var8 = var1;\n        var6 = func_0DE4(var7, var8);\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n        memory[0x20:0x40] = 0x05;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = var4 * 0x010000000000000000 + var1 * storage[0x07];\n        storage[temp2] = storage[temp2] - temp3;\n        var5 = temp3;\n    \n        if (0x00 >= storage[0x06]) {\n        label_0C44:\n            var6 = var0 & 0x02 ** 0xa0 - 0x01;\n            var7 = 0x8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e;\n            var8 = var1;\n            var9 = var4;\n            var var10 = block.timestamp;\n            var var11 = 0x0c7a;\n            var11 = buyPrice();\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var8;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var9;\n            memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = var10;\n            memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = var11;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + temp4 - temp5 + 0x80], [stack[-5], stack[-6]]);\n            return;\n        } else {\n            var6 = 0x0c40;\n            var7 = storage[0x07];\n            var8 = storage[0x06];\n            var9 = var3 * 0x010000000000000000;\n        \n            if (!var8) { assert(); }\n        \n            var6 = func_0AE3(var7, var8, var9);\n            storage[0x07] = var6;\n            goto label_0C44;\n        }\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x03;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_0CC9:\n            var var2 = 0x0cd1;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x0cc9;\n            var var3 = var1;\n            sell(var3);\n            goto label_0CC9;\n        }\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x0cf1;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x0d05;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var3;\n        storage[temp0] = temp1 * 0x010000000000000000 + storage[temp0];\n        memory[0x20:0x40] = 0x04;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = storage[temp2];\n        storage[temp2] = 0x00;\n        var0 = temp1 + temp3;\n        var1 = msg.sender;\n        var3 = 0x0d47;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = buy(var4, var5);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = var3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_0D97(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0) {\n            var temp0 = arg0;\n            var1 = arg1 * temp0;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_0DC6:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0DC6;\n        }\n    }\n    \n    function func_0DE4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0DF6(var arg0) returns (var r0) {\n        var temp0 = storage[0x06];\n        var var0 = 0x00;\n        var var1 = 0x01431e0fae6d7217caa0000000;\n        var var2 = var0;\n        var var3 = temp0;\n        var var4 = 0x02540be400;\n        var var5 = 0x0e7b;\n        var var6 = 0x0e75;\n        var var7 = var3 * 0x05e0a1fd2712875988becaad0000000000 + var3 ** 0x02 * 0x056bc75e2d63100000 + arg0 * 0x0380d4bd8a8678c1bb542c80deb4800000000000 + 0x0197d4df19d605767337e9f14d3eec8920e400000000000000;\n        var6 = func_0F09(var7);\n        var5 = func_0E75(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_0E75(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_0DE4(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0E8E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0E9D(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x06] + 0x0de0b6b3a7640000;\n        var var4 = 0x0de0b6b3a7640000;\n        var var3 = var0;\n        var var5 = 0x0ef6;\n        var var6 = temp0 * (var2 / var4 * 0x02540be400 + 0x14f46b0400);\n        var var7 = 0x02;\n        var var8 = (var1 ** var7 - temp0 + ~0x0de0b6b3a763ffff) / var4 * 0x02540be400;\n    \n        if (!var7) { assert(); }\n    \n        var5 = func_0EF0(var6, var7, var8);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_0EF0(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_0DE4(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0F09(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_08BC:\n            return var0;\n        } else {\n        label_0F1B:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_08BC; }\n            else { goto label_0F1B; }\n        }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 36.577210426330566,
	"usage": {
		"completion_tokens": 401,
		"prompt_tokens": 12125,
		"total_tokens": 12526
	}
}