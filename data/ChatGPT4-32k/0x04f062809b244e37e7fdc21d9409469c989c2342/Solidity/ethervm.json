{
	"address": "0x04f062809b244e37e7fdc21d9409469c989c2342",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x33) {\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x019f;\n            var temp0 = msg.data[0x04:0x24];\n            var var2 = temp0 + 0x24;\n            var var3 = msg.data[temp0 + 0x04:temp0 + 0x04 + 0x20];\n            var var4 = 0x00;\n            var var5 = var4;\n            var var6 = 0x00;\n            var var7 = var6;\n            var var8 = 0x00;\n            var var9 = var8;\n            var var10 = 0x00;\n            var var11 = var10;\n            var var12 = 0x00;\n            var var13 = msg.sender == storage[var12] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        \n            if (!var13) {\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x06;\n            \n                if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_0596; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var13) {\n            label_0596:\n                var13 = 0x08;\n                var var14 = 0x00;\n                var var15 = 0x05b6;\n                var var16 = var2;\n                var var17 = var3;\n                var var18 = 0x03;\n            \n                if (var18 >= var17) { assert(); }\n            \n                var15 = func_05AA(var16, var17, var18);\n                var temp1 = var14;\n                memory[temp1:temp1 + 0x20] = var15;\n                memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = var13;\n                var temp2 = storage[keccak256(memory[0x00:0x00 + temp1 + 0x40])] & 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp2;\n                memory[0x20:0x40] = 0x03;\n                var4 = temp2;\n                var13 = storage[keccak256(memory[0x00:0x40])];\n                var14 = 0xe0;\n                var15 = var2;\n                var16 = var3;\n                var17 = 0x03;\n            \n                if (var17 >= var16) { assert(); }\n            \n                if (msg.data[var17 * 0x20 + var15:var17 * 0x20 + var15 + 0x20] / 0x02 ** var14 <= var13) { revert(memory[0x00:0x00]); }\n            \n                var13 = 0x062b;\n                var14 = var2;\n                var15 = var3;\n                var16 = 0x03;\n            \n                if (var16 >= var15) { assert(); }\n            \n                var13, var14, var15 = func_061F(var14, var15, var16);\n                var5 = var13;\n                var6 = var14;\n                var7 = var15;\n                var13 = 0x0683;\n                var temp3 = var3;\n                var temp4 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp4 + temp3 * 0x20 + 0x20;\n                var14 = temp4;\n                memory[var14:var14 + 0x20] = temp3;\n                var temp5 = temp3 * 0x20;\n                memory[var14 + 0x20:var14 + 0x20 + temp5] = msg.data[var2:var2 + temp5];\n                var15 = 0x00;\n                var16 = var2;\n                var17 = temp3;\n                var18 = 0x03;\n            \n                if (var18 >= var17) { assert(); }\n            \n                var13 = func_0675(var5, var6, var14, var15, var16, var17, var18);\n                var temp6 = var13;\n                var8 = temp6;\n                var13 = 0x06d9;\n                var14 = var8;\n                var15 = var4;\n                var16 = 0x06a6;\n                var17 = var2;\n                var18 = var3;\n                var var19 = 0x03;\n            \n                if (var19 >= var18) { assert(); }\n            \n                var16 = func_069A(var17, var18, var19);\n                var17 = var2;\n                var18 = var3;\n                var19 = 0x04;\n            \n                if (var19 >= var18) { assert(); }\n            \n            label_06B3:\n                var17 = msg.data[var19 * 0x20 + var17:var19 * 0x20 + var17 + 0x20];\n                var18 = var2;\n                var19 = var3;\n                var var20 = 0x05;\n            \n                if (var20 >= var19) { assert(); }\n            \n            label_06CA:\n                var18 = msg.data[var20 * 0x20 + var18:var20 * 0x20 + var18 + 0x20];\n                var19 = 0x00;\n                var20 = var15 & 0x02 ** 0xa0 - 0x01;\n                var var21 = 0x01;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n                memory[temp7 + 0x1c:temp7 + 0x1c + 0x20] = var14;\n                var temp8 = memory[0x40:0x60];\n                var temp9 = keccak256(memory[temp8:temp8 + (temp7 + 0x3c) - temp8]);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = 0x00;\n                memory[0x40:0x60] = temp10 + 0x20;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = temp9;\n                memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = var16 & 0xff;\n                memory[temp11 + 0x40:temp11 + 0x40 + 0x20] = var17;\n                memory[temp11 + 0x60:temp11 + 0x60 + 0x20] = var18;\n                var var22 = temp11 + 0x80;\n                var temp12 = memory[0x40:0x60];\n                var temp13;\n                temp13, memory[temp12 - 0x20:temp12 - 0x20 + 0x20] = address(var21).call.gas(msg.gas - 0x646e)(memory[temp12:temp12 + var22 - temp12]);\n            \n                if (!temp13) { revert(memory[0x00:0x00]); }\n            \n                var13 = memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var20;\n                // Error: Could not resolve jump destination!\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xb6) {\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x019f;\n            var temp14 = msg.data[0x04:0x24];\n            var2 = temp14 + 0x24;\n            var3 = msg.data[temp14 + 0x04:temp14 + 0x04 + 0x20];\n            var4 = 0x00;\n            var5 = var4;\n            var6 = 0x00;\n            var7 = var6;\n            var8 = 0x00;\n            var9 = var8;\n            var10 = 0x00;\n            var11 = var10;\n            var12 = 0x00;\n            var13 = msg.sender == storage[var12] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        \n            if (!var13) {\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x06;\n            \n                if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_0A66; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var13) {\n            label_0A66:\n                var13 = var2;\n                var14 = var3;\n                var15 = 0x03;\n            \n                if (var15 >= var14) { assert(); }\n            \n                var temp15 = msg.data[var15 * 0x20 + var13:var15 * 0x20 + var13 + 0x20];\n                memory[0x00:0x20] = temp15 & 0xffffffff;\n                memory[0x20:0x40] = 0x08;\n                var temp16 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp16;\n                memory[0x20:0x40] = 0x03;\n                var4 = temp15;\n                var5 = temp16;\n            \n                if (var4 / 0x02 ** 0xe0 <= storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n            \n                var13 = 0x0ac8;\n                var14 = var4;\n                var13, var14 = func_2CA8(var14);\n                var6 = var13;\n                var7 = var14;\n                var13 = address(this);\n                var14 = var2;\n                var15 = var3;\n                var16 = 0x00;\n            \n                if (var16 >= var15) { assert(); }\n            \n                var14 = msg.data[var16 * 0x20 + var14:var16 * 0x20 + var14 + 0x20];\n                var15 = var2;\n                var16 = var3;\n                var17 = 0x01;\n            \n                if (var17 >= var16) { assert(); }\n            \n                var15 = msg.data[var17 * 0x20 + var15:var17 * 0x20 + var15 + 0x20];\n                var16 = var2;\n                var17 = var3;\n                var18 = 0x02;\n            \n                if (var18 >= var17) { assert(); }\n            \n                var16 = msg.data[var18 * 0x20 + var16:var18 * 0x20 + var16 + 0x20];\n                var17 = var6 & 0x02 ** 0xa0 - 0x01;\n            \n                if (var7) {\n                    var temp17 = var4;\n                    var temp18 = memory[0x40:0x60];\n                    memory[temp18:temp18 + 0x20] = (var13 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                    memory[temp18 + 0x14:temp18 + 0x14 + 0x20] = var14;\n                    memory[temp18 + 0x34:temp18 + 0x34 + 0x20] = var15;\n                    memory[temp18 + 0x54:temp18 + 0x54 + 0x20] = var16;\n                    memory[temp18 + 0x74:temp18 + 0x74 + 0x20] = (temp17 & ~0x0fffffffffffffffffffffffffffffffffffffffff) | 0x02 ** 0xa0 | var17;\n                    var temp19 = memory[0x40:0x60];\n                    var8 = keccak256(memory[temp19:temp19 + (temp18 + 0x94) - temp19]);\n                    var13 = 0x0bc5;\n                    var14 = var8;\n                    var15 = var5;\n                \n                    if (temp17 & 0xf000000000000000000000000000000000000000 == 0x00) {\n                    label_0BB6:\n                        var16 = 0x1b;\n                        var17 = var2;\n                        var18 = var3;\n                        var19 = 0x04;\n                    \n                        if (var19 < var18) { goto label_06B3; }\n                        else { assert(); }\n                    } else {\n                        var13 = func_0BB0(var2, var3, var14, var15);\n                    \n                    label_0BC5:\n                    \n                        if (!var13) { revert(memory[0x00:0x00]); }\n                    \n                        if (var7) {\n                            var13 = var2;\n                            var14 = var3;\n                            var15 = 0x01;\n                        \n                            if (var15 >= var14) { assert(); }\n                        \n                            var temp20 = msg.data[var15 * 0x20 + var13:var15 * 0x20 + var13 + 0x20];\n                            memory[0x00:0x20] = var8;\n                            memory[0x20:0x40] = 0x04;\n                            var9 = temp20;\n                            var13 = 0x0c26;\n                            var14 = var9;\n                            var15 = storage[keccak256(memory[0x00:0x40])];\n                            var13 = func_2A19(var14, var15);\n                        \n                        label_0C26:\n                            var9 = var13;\n                        \n                            if (!var9) { revert(memory[0x00:0x00]); }\n                        \n                            var12 = var12;\n                            var7 = !var7;\n                            var10 = 0x00;\n                            var11 = 0x06;\n                        \n                            if (var11 >= var3) {\n                            label_0E49:\n                                var7 = !var7;\n                                var12 = var12;\n                            \n                                if (var7) {\n                                    var13 = 0x0e78;\n                                    var14 = var9;\n                                    var15 = var2;\n                                    var16 = var3;\n                                    var17 = 0x01;\n                                \n                                    if (var17 >= var16) { assert(); }\n                                \n                                    var13 = func_096C(var14, var15, var16, var17);\n                                \n                                label_0E78:\n                                    memory[0x00:0x20] = var8;\n                                    memory[0x20:0x40] = 0x04;\n                                    var temp21 = var13;\n                                    var9 = temp21;\n                                    var13 = 0x0e9b;\n                                    var14 = var9;\n                                    var15 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = func_2A19(var14, var15);\n                                    var9 = var13;\n                                    var13 = 0x09f4;\n                                    var14 = var2;\n                                    var15 = var3;\n                                    var16 = 0x02;\n                                \n                                    if (var16 >= var15) { assert(); }\n                                \n                                    func_0EAD(var2, var3, var6, var7, var8, var9, var10, var14, var15, var16);\n                                    // Error: Could not resolve jump destination!\n                                } else {\n                                    var13 = 0x0e62;\n                                    var14 = var9;\n                                    var15 = var2;\n                                    var16 = var3;\n                                    var17 = 0x00;\n                                \n                                    if (var17 >= var16) { assert(); }\n                                \n                                    var13 = func_096C(var14, var15, var16, var17);\n                                    goto label_0E78;\n                                }\n                            } else {\n                            label_0C49:\n                                var13 = var9 > 0x00;\n                            \n                                if (!var13) {\n                                label_0C77:\n                                \n                                    if (!var13) { revert(memory[0x00:0x00]); }\n                                \n                                    var13 = var2;\n                                    var14 = var3;\n                                    var15 = var11 + 0x03;\n                                \n                                    if (var15 >= var14) { assert(); }\n                                \n                                    var temp22 = msg.data[var15 * 0x20 + var13:var15 * 0x20 + var13 + 0x20];\n                                    memory[0x00:0x20] = temp22 & 0xffffffff;\n                                    memory[0x20:0x40] = 0x08;\n                                    var temp23 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x00:0x20] = temp23;\n                                    memory[0x20:0x40] = 0x03;\n                                    var4 = temp22;\n                                    var5 = temp23;\n                                \n                                    if (var4 / 0x02 ** 0xe0 <= storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n                                \n                                    var13 = address(this);\n                                    var14 = var2;\n                                    var15 = var3;\n                                    var16 = var11;\n                                \n                                    if (var16 >= var15) { assert(); }\n                                \n                                    var14 = msg.data[var16 * 0x20 + var14:var16 * 0x20 + var14 + 0x20];\n                                    var15 = var2;\n                                    var16 = var3;\n                                    var17 = var11 + 0x01;\n                                \n                                    if (var17 >= var16) { assert(); }\n                                \n                                    var15 = msg.data[var17 * 0x20 + var15:var17 * 0x20 + var15 + 0x20];\n                                    var16 = var2;\n                                    var17 = var3;\n                                    var18 = var11 + 0x02;\n                                \n                                    if (var18 >= var17) { assert(); }\n                                \n                                    var16 = msg.data[var18 * 0x20 + var16:var18 * 0x20 + var16 + 0x20];\n                                    var17 = var6 & 0x02 ** 0xa0 - 0x01;\n                                \n                                    if (var7) {\n                                        var temp24 = var4;\n                                        var temp25 = memory[0x40:0x60];\n                                        memory[temp25:temp25 + 0x20] = (var13 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                                        memory[temp25 + 0x14:temp25 + 0x14 + 0x20] = var14;\n                                        memory[temp25 + 0x34:temp25 + 0x34 + 0x20] = var15;\n                                        memory[temp25 + 0x54:temp25 + 0x54 + 0x20] = var16;\n                                        memory[temp25 + 0x74:temp25 + 0x74 + 0x20] = (temp24 & ~0x0fffffffffffffffffffffffffffffffffffffffff) | 0x02 ** 0xa0 | var17;\n                                        var temp26 = memory[0x40:0x60];\n                                        var12 = keccak256(memory[temp26:temp26 + (temp25 + 0x94) - temp26]);\n                                        var13 = 0x0dda;\n                                        var14 = var12;\n                                        var15 = var5;\n                                    \n                                        if (temp24 & 0xf000000000000000000000000000000000000000 == 0x00) {\n                                        label_0DC9:\n                                            var16 = 0x1b;\n                                            var17 = var2;\n                                            var18 = var3;\n                                            var19 = var11 + 0x04;\n                                        \n                                            if (var19 >= var18) { assert(); }\n                                        \n                                            var17 = msg.data[var19 * 0x20 + var17:var19 * 0x20 + var17 + 0x20];\n                                            var18 = var2;\n                                            var19 = var3;\n                                            var20 = var11 + 0x05;\n                                        \n                                            if (var20 < var19) { goto label_06CA; }\n                                            else { assert(); }\n                                        } else {\n                                            var13 = func_0DC3(var2, var3, var11, var14, var15);\n                                        \n                                        label_0DDA:\n                                        \n                                            if (!var13) { revert(memory[0x00:0x00]); }\n                                        \n                                            var13 = 0x0e38;\n                                            var14 = var2;\n                                            var15 = var3;\n                                            var16 = var11;\n                                        \n                                            if (var16 >= var15) { assert(); }\n                                        \n                                            var13, var14 = func_0DF4(var2, var3, var4, var6, var7, var9, var10, var11, var12, var14, var15, var16);\n                                            var9 = var13;\n                                            var10 = var14;\n                                            var11 = var11 + 0x06;\n                                            var12 = var12;\n                                        \n                                            if (var11 >= var3) { goto label_0E49; }\n                                            else { goto label_0C49; }\n                                        }\n                                    } else {\n                                        var18 = 0x00;\n                                        var temp27 = var4;\n                                        var temp28 = memory[0x40:0x60];\n                                        memory[temp28:temp28 + 0x20] = (var13 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                                        memory[temp28 + 0x14:temp28 + 0x14 + 0x20] = var14;\n                                        memory[temp28 + 0x34:temp28 + 0x34 + 0x20] = var15;\n                                        memory[temp28 + 0x54:temp28 + 0x54 + 0x20] = var16;\n                                        memory[temp28 + 0x74:temp28 + 0x74 + 0x20] = (temp27 & ~0x0fffffffffffffffffffffffffffffffffffffffff) | var18 | var17;\n                                        var temp29 = memory[0x40:0x60];\n                                        var12 = keccak256(memory[temp29:temp29 + (temp28 + 0x94) - temp29]);\n                                        var13 = 0x0dda;\n                                        var14 = var12;\n                                        var15 = var5;\n                                    \n                                        if (temp27 & 0xf000000000000000000000000000000000000000 == 0x00) { goto label_0DC9; }\n                                    \n                                        var13 = func_0DC3(var2, var3, var11, var14, var15);\n                                        goto label_0DDA;\n                                    }\n                                } else {\n                                    var13 = 0x0c62;\n                                    var14 = var2;\n                                    var15 = var3;\n                                    var16 = var11;\n                                \n                                    if (var16 >= var15) { assert(); }\n                                \n                                    var13 = func_0776(var2, var3, var14, var15, var16);\n                                    var14 = 0x0c74;\n                                    var15 = var2;\n                                    var16 = var3;\n                                    var17 = var11 + 0x01;\n                                \n                                    if (var17 >= var16) { assert(); }\n                                \n                                    var14 = func_07B3(var2, var3, var15, var16, var17);\n                                    var13 = var14 <= var13;\n                                    goto label_0C77;\n                                }\n                            }\n                        } else {\n                            var13 = var2;\n                            var14 = var3;\n                            var15 = 0x00;\n                        \n                            if (var15 >= var14) { assert(); }\n                        \n                            var13 = msg.data[var15 * 0x20 + var13:var15 * 0x20 + var13 + 0x20];\n                            memory[0x00:0x20] = var8;\n                            memory[0x20:0x40] = 0x04;\n                            var temp30 = var13;\n                            var9 = temp30;\n                            var13 = 0x0c26;\n                            var15 = storage[keccak256(memory[0x00:0x40])];\n                            var14 = var9;\n                            var13 = func_2A19(var14, var15);\n                            goto label_0C26;\n                        }\n                    }\n                } else {\n                    var18 = 0x00;\n                    var temp31 = var4;\n                    var temp32 = memory[0x40:0x60];\n                    memory[temp32:temp32 + 0x20] = (var13 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                    memory[temp32 + 0x14:temp32 + 0x14 + 0x20] = var14;\n                    memory[temp32 + 0x34:temp32 + 0x34 + 0x20] = var15;\n                    memory[temp32 + 0x54:temp32 + 0x54 + 0x20] = var16;\n                    memory[temp32 + 0x74:temp32 + 0x74 + 0x20] = (temp31 & ~0x0fffffffffffffffffffffffffffffffffffffffff) | var18 | var17;\n                    var temp33 = memory[0x40:0x60];\n                    var8 = keccak256(memory[temp33:temp33 + (temp32 + 0x94) - temp33]);\n                    var13 = 0x0bc5;\n                    var14 = var8;\n                    var15 = var5;\n                \n                    if (temp31 & 0xf000000000000000000000000000000000000000 == 0x00) { goto label_0BB6; }\n                \n                    var13 = func_0BB0(var2, var3, var14, var15);\n                    goto label_0BC5;\n                }\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xc7) {\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x019f;\n            var temp34 = msg.data[0x04:0x24];\n            var2 = temp34 + 0x24;\n            var3 = msg.data[temp34 + 0x04:temp34 + 0x04 + 0x20];\n            func_0ED6(var2, var3);\n            stop();\n        } else if (var0 == 0xaeb3) {\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x019f;\n            var temp35 = msg.data[0x04:0x24];\n            var2 = temp35 + 0x24;\n            var3 = msg.data[temp35 + 0x04:temp35 + 0x04 + 0x20];\n            func_136C(var2, var3);\n            stop();\n        } else if (var0 == 0x02ca5994) {\n            // Dispatch table entry for registerToken(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x019f;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            registerToken(var2, var3);\n            stop();\n        } else if (var0 == 0x07973ccf) {\n            // Dispatch table entry for userCount()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0230;\n            var2 = userCount();\n        \n        label_0230:\n            var temp36 = memory[0x40:0x60];\n            memory[temp36:temp36 + 0x20] = var2;\n            var temp37 = memory[0x40:0x60];\n            return memory[temp37:temp37 + (temp36 + 0x20) - temp37];\n        } else if (var0 == 0x07c4d580) {\n            // Dispatch table entry for transferForAdmin(address,address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x019f;\n            var temp38 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp38 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp38;\n            var4 = msg.data[0x44:0x64];\n            transferForAdmin(var2, var3, var4);\n            stop();\n        } else if (var0 == 0x0f7c9085) {\n            // Dispatch table entry for addToAdmin(address,bool)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x019f;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = !!msg.data[0x24:0x44];\n            addToAdmin(var2, var3);\n            stop();\n        } else if (var0 == 0x135a2474) {\n            // Dispatch table entry for joysoWallet()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a1;\n            var2 = joysoWallet();\n        \n        label_02A1:\n            var temp39 = memory[0x40:0x60];\n            memory[temp39:temp39 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp40 = memory[0x40:0x60];\n            return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n        } else if (var0 == 0x24d7806c) {\n            // Dispatch table entry for isAdmin(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02dc;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = isAdmin(var2);\n        \n        label_02DC:\n            var temp41 = memory[0x40:0x60];\n            memory[temp41:temp41 + 0x20] = !!var2;\n            var temp42 = memory[0x40:0x60];\n            return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n        } else if (var0 == 0x2e04b8e7) {\n            // Dispatch table entry for userNonce(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0230;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = userNonce(var2);\n            goto label_0230;\n        } else if (var0 == 0x338b5dea) {\n            // Dispatch table entry for depositToken(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x019f;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            depositToken(var2, var3);\n            stop();\n        } else if (var0 == 0x3fd8b02f) {\n            // Dispatch table entry for lockPeriod()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0230;\n            var2 = lockPeriod();\n            goto label_0230;\n        } else if (var0 == 0x560ebbd1) {\n            // Dispatch table entry for usedHash(bytes32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02dc;\n            var2 = msg.data[0x04:0x24];\n            var2 = usedHash(var2);\n            goto label_02DC;\n        } else if (var0 == 0x5617a6e8) {\n            // Dispatch table entry for userLock(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0230;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = userLock(var2);\n            goto label_0230;\n        } else if (var0 == 0x69b59e75) {\n            // Dispatch table entry for collectFee(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x019f;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            collectFee(var2);\n            stop();\n        } else if (var0 == 0x774bafdf) {\n            // Dispatch table entry for unlockMe()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x019f;\n            unlockMe();\n            stop();\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a1;\n            var2 = owner();\n            goto label_02A1;\n        } else if (var0 == 0x934e1666) {\n            // Dispatch table entry for 0x934e1666 (unknown)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a1;\n            var2 = msg.data[0x04:0x24];\n            var2 = func_1FEA(var2);\n            goto label_02A1;\n        } else if (var0 == 0x98a36ebf) {\n            // Dispatch table entry for setTradeEventEnabled(bool)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x019f;\n            var2 = !!msg.data[0x04:0x24];\n            setTradeEventEnabled(var2);\n            stop();\n        } else if (var0 == 0x98ea5fca) {\n            // Dispatch table entry for depositEther()\n            var1 = 0x019f;\n            depositEther();\n            stop();\n        } else if (var0 == 0xa64968ac) {\n            // Dispatch table entry for joyToken()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a1;\n            var2 = joyToken();\n            goto label_02A1;\n        } else if (var0 == 0xc25cf1d0) {\n            // Dispatch table entry for changeLockPeriod(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x019f;\n            var2 = msg.data[0x04:0x24];\n            changeLockPeriod(var2);\n            stop();\n        } else if (var0 == 0xc8799b37) {\n            // Dispatch table entry for 0xc8799b37 (unknown)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0230;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = func_2155(var2);\n            goto label_0230;\n        } else if (var0 == 0xd4fac45d) {\n            // Dispatch table entry for getBalance(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0230;\n            var temp43 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp43 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp43;\n            var1 = getBalance(var2, var3);\n            goto label_0230;\n        } else if (var0 == 0xd5893bb2) {\n            // Dispatch table entry for tradeEventEnabled()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02dc;\n            var2 = tradeEventEnabled();\n            goto label_02DC;\n        } else if (var0 == 0xd86bc1b0) {\n            // Dispatch table entry for cancelByAdmin(uint256[])\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x019f;\n            var temp44 = msg.data[0x04:0x24];\n            var2 = temp44 + 0x24;\n            var3 = msg.data[temp44 + 0x04:temp44 + 0x04 + 0x20];\n            cancelByAdmin(var2, var3);\n            stop();\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x019f;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            transferOwnership(var2);\n            stop();\n        } else if (var0 == 0xf3fef3a3) {\n            // Dispatch table entry for withdraw(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x019f;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            withdraw(var2, var3);\n            stop();\n        } else if (var0 == 0xf7213db6) {\n            // Dispatch table entry for orderFills(bytes32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0230;\n            var2 = msg.data[0x04:0x24];\n            var2 = orderFills(var2);\n            goto label_0230;\n        } else if (var0 == 0xf912ed00) {\n            // Dispatch table entry for lockMe()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x019f;\n            lockMe();\n            stop();\n        } else if (var0 == 0xfa769257) {\n            // Dispatch table entry for 0xfa769257 (unknown)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a1;\n            var2 = msg.data[0x04:0x24];\n            var2 = func_2738(var2);\n            goto label_02A1;\n        } else if (var0 == 0xffc69ab1) {\n            // Dispatch table entry for 0xffc69ab1 (unknown)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0230;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = func_2753(var2);\n            goto label_0230;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_05AA(var arg0, var arg1, var arg2) returns (var r0) {\n        arg0 = msg.data[arg2 * 0x20 + arg0:arg2 * 0x20 + arg0 + 0x20];\n        return arg0 & 0xffffffff;\n    }\n    \n    function func_061F(var arg0, var arg1, var arg2) returns (var r0, var arg0, var arg1) {\n        arg0 = msg.data[arg2 * 0x20 + arg0:arg2 * 0x20 + arg0 + 0x20];\n        arg1 = 0x00;\n        arg2 = arg1;\n        var var0 = arg0 & 0x0f0000000000000000000000000000000000000000 == 0x02 ** 0xa0;\n    \n        if (!var0) {\n            var temp0 = arg0;\n            memory[0x00:0x20] = (temp0 & 0xffff000000000000) / 0x01000000000000;\n            memory[0x20:0x40] = 0x07;\n            var temp1 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = (temp0 & 0xffff00000000) / 0x0100000000;\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            arg1 = var0;\n            r0 = temp2 & temp1;\n            arg0 = storage[keccak256(memory[0x00:0x40])] & temp2;\n            return r0, arg0, arg1;\n        } else {\n            var temp3 = arg0;\n            memory[0x00:0x20] = (temp3 & 0xffff00000000) / 0x0100000000;\n            memory[0x20:0x40] = 0x07;\n            var temp4 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = (temp3 & 0xffff000000000000) / 0x01000000000000;\n            var temp5 = 0x02 ** 0xa0 - 0x01;\n            arg1 = temp5 & temp4;\n            arg2 = storage[keccak256(memory[0x00:0x40])] & temp5;\n            var temp6 = arg1;\n            arg1 = var0;\n            r0 = temp6;\n            arg0 = arg2;\n            return r0, arg0, arg1;\n        }\n    }\n    \n    function func_0675(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) returns (var r0) {\n        arg4 = msg.data[arg6 * 0x20 + arg4:arg6 * 0x20 + arg4 + 0x20];\n        arg5 = arg0;\n        arg6 = arg1;\n        var var0 = 0x00;\n        var var1 = address(this);\n        var var2 = arg2;\n        var var3 = arg3;\n    \n        if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n    \n        var2 = memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20];\n        var3 = arg2;\n        var var4 = arg3 + 0x01;\n    \n        if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n    \n        var3 = memory[var4 * 0x20 + var3 + 0x20:var4 * 0x20 + var3 + 0x20 + 0x20];\n        var4 = arg2;\n        var var5 = arg3 + 0x02;\n    \n        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n    \n        var temp0 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n        var temp1 = arg4;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[temp2:temp2 + 0x20] = (temp3 & var1) * 0x01000000000000000000000000;\n        memory[temp2 + 0x14:temp2 + 0x14 + 0x20] = var2;\n        memory[temp2 + 0x34:temp2 + 0x34 + 0x20] = var3;\n        memory[temp2 + 0x54:temp2 + 0x54 + 0x20] = temp0;\n        memory[temp2 + 0x74:temp2 + 0x74 + 0x20] = (arg5 & 0x02 ** 0xa0 - 0x01) | (temp1 & ~(0x02 ** 0xa0 - 0x01));\n        memory[temp2 + 0x94:temp2 + 0x94 + 0x20] = (temp3 & arg6) * 0x01000000000000000000000000;\n        memory[temp2 + 0xa8:temp2 + 0xa8 + 0x20] = (temp1 & 0x0fffffffffffffffffffffff0000000000000000) / 0x010000000000000000;\n        var temp4 = memory[0x40:0x60];\n        return keccak256(memory[temp4:temp4 + (temp2 + 0xc8) - temp4]);\n    }\n    \n    function func_069A(var arg0, var arg1, var arg2) returns (var r0) {\n        arg0 = msg.data[arg2 * 0x20 + arg0:arg2 * 0x20 + arg0 + 0x20];\n        r0 = func_2921(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0776(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        arg2 = msg.data[arg4 * 0x20 + arg2:arg4 * 0x20 + arg2 + 0x20];\n        arg3 = arg0;\n        arg4 = arg1;\n        var var0 = 0x00;\n    \n        if (var0 >= arg4) { assert(); }\n    \n        var temp0 = arg2;\n        arg2 = msg.data[var0 * 0x20 + arg3:var0 * 0x20 + arg3 + 0x20];\n        arg3 = temp0;\n        r0 = func_2A2E(arg2, arg3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_07B3(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        arg2 = msg.data[arg4 * 0x20 + arg2:arg4 * 0x20 + arg2 + 0x20];\n        arg3 = arg0;\n        arg4 = arg1;\n        var var0 = 0x01;\n    \n        if (var0 >= arg4) { assert(); }\n    \n        var temp0 = arg2;\n        arg2 = msg.data[var0 * 0x20 + arg3:var0 * 0x20 + arg3 + 0x20];\n        arg3 = temp0;\n        r0 = func_2A2E(arg2, arg3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_096C(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[arg3 * 0x20 + arg1:arg3 * 0x20 + arg1 + 0x20];\n        arg1 = temp0;\n        r0 = func_2A19(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0BB0(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x1c;\n        var var1 = arg0;\n        var var2 = arg1;\n        var var3 = 0x04;\n    \n        if (var3 >= var2) { assert(); }\n    \n        var1 = msg.data[var3 * 0x20 + var1:var3 * 0x20 + var1 + 0x20];\n        var2 = arg0;\n        var3 = arg1;\n        var var4 = 0x05;\n    \n        if (var4 >= var3) { assert(); }\n    \n        var2 = msg.data[var4 * 0x20 + var2:var4 * 0x20 + var2 + 0x20];\n        var3 = 0x00;\n        var4 = arg3 & 0x02 ** 0xa0 - 0x01;\n        var var5 = 0x01;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n        memory[temp0 + 0x1c:temp0 + 0x1c + 0x20] = arg2;\n        var temp1 = memory[0x40:0x60];\n        var temp2 = keccak256(memory[temp1:temp1 + (temp0 + 0x3c) - temp1]);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = 0x00;\n        memory[0x40:0x60] = temp3 + 0x20;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp2;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var0 & 0xff;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = var1;\n        memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = var2;\n        var var6 = temp4 + 0x80;\n        var temp5 = memory[0x40:0x60];\n        var temp6;\n        temp6, memory[temp5 - 0x20:temp5 - 0x20 + 0x20] = address(var5).call.gas(msg.gas - 0x646e)(memory[temp5:temp5 + var6 - temp5]);\n    \n        if (temp6) { return memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var4; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0DC3(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x1c;\n        var var1 = arg0;\n        var var2 = arg1;\n        var var3 = arg2 + 0x04;\n    \n        if (var3 >= var2) { assert(); }\n    \n        var1 = msg.data[var3 * 0x20 + var1:var3 * 0x20 + var1 + 0x20];\n        var2 = arg0;\n        var3 = arg1;\n        var var4 = arg2 + 0x05;\n    \n        if (var4 >= var3) { assert(); }\n    \n        var2 = msg.data[var4 * 0x20 + var2:var4 * 0x20 + var2 + 0x20];\n        var3 = 0x00;\n        var4 = arg4 & 0x02 ** 0xa0 - 0x01;\n        var var5 = 0x01;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n        memory[temp0 + 0x1c:temp0 + 0x1c + 0x20] = arg3;\n        var temp1 = memory[0x40:0x60];\n        var temp2 = keccak256(memory[temp1:temp1 + (temp0 + 0x3c) - temp1]);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = 0x00;\n        memory[0x40:0x60] = temp3 + 0x20;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp2;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var0 & 0xff;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = var1;\n        memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = var2;\n        var var6 = temp4 + 0x80;\n        var temp5 = memory[0x40:0x60];\n        var temp6;\n        temp6, memory[temp5 - 0x20:temp5 - 0x20 + 0x20] = address(var5).call.gas(msg.gas - 0x646e)(memory[temp5:temp5 + var6 - temp5]);\n    \n        if (temp6) { return memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var4; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0DF4(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9, var arg10, var arg11) returns (var r0, var arg9) {\n        arg9 = msg.data[arg11 * 0x20 + arg9:arg11 * 0x20 + arg9 + 0x20];\n        arg10 = arg0;\n        arg11 = arg1;\n        var var0 = arg7 + 0x01;\n    \n        if (var0 >= arg11) { assert(); }\n    \n        arg10 = msg.data[var0 * 0x20 + arg10:var0 * 0x20 + arg10 + 0x20];\n        arg11 = arg0;\n        var0 = arg1;\n        var var1 = arg7 + 0x02;\n    \n        if (var1 >= var0) { assert(); }\n    \n        arg11 = msg.data[var1 * 0x20 + arg11:var1 * 0x20 + arg11 + 0x20];\n        var0 = arg2;\n        var1 = arg5;\n        var var2 = arg6;\n        var var3 = arg4;\n        var var4 = arg3;\n        var var5 = 0x00;\n        var var6 = arg8;\n        var var7 = 0x00;\n        var var8 = var7;\n        var var9 = 0x00;\n        var var10 = var9;\n        var var11 = 0x00;\n        var var12 = 0x2a7c;\n        var var13 = arg9;\n        var var14 = arg10;\n        var var15 = var1;\n        var var16 = var3;\n        var var17 = var6;\n        var12 = func_2DE0(var13, var14, var15, var16, var17);\n        var temp0 = var12;\n        var9 = temp0;\n        var12 = 0x2a8a;\n        var13 = arg9;\n        var14 = arg10;\n        var15 = var3;\n        var16 = var9;\n        var12 = func_2E3D(var13, var14, var15, var16);\n        var temp1 = var12;\n        var10 = temp1;\n        var12 = 0x2aa5;\n        var13 = arg11;\n        var14 = var0;\n        var15 = var10;\n        var16 = var6;\n        var17 = 0x00;\n        var var18 = !(var5 & 0x02 ** 0xa0 - 0x01);\n        var12 = func_2E89(var13, var14, var15, var16, var17, var18);\n        var temp2 = var12;\n        var11 = temp2;\n        var12 = 0x2ab6;\n        var13 = var0;\n        var14 = var3;\n        var15 = var10;\n        var16 = var9;\n        var17 = var11;\n        var18 = var4;\n        var var19 = var5;\n        func_3003(var13, var14, var15, var16, var17, var18, var19);\n    \n    label_2AB6:\n        memory[0x00:0x20] = var6;\n        memory[0x20:0x40] = 0x04;\n        var13 = storage[keccak256(memory[0x00:0x40])];\n        var12 = 0x2ad5;\n        var14 = var9;\n        var12 = func_2D1A(var13, var14);\n        memory[0x00:0x20] = var6;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = var12;\n        var12 = 0x2af4;\n        var13 = var1;\n        var14 = var9;\n        var12 = func_2A19(var13, var14);\n        var7 = var12;\n        var12 = 0x2b06;\n        var13 = var2;\n        var14 = var10;\n        var12 = func_2D1A(var13, var14);\n        var8 = var12;\n    \n        if (!(storage[0x0f] & 0xff)) {\n            arg9 = var8;\n            r0 = var7;\n            return r0, arg9;\n        } else {\n            memory[0x00:0x20] = var0 & 0xffffffff;\n            memory[0x20:0x40] = 0x08;\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var10;\n            memory[temp3 + 0x40:temp3 + 0x40 + 0x20] = var9;\n            memory[temp3 + 0x60:temp3 + 0x60 + 0x20] = !!var3;\n            memory[temp3 + 0x80:temp3 + 0x80 + 0x20] = var11;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0xa0) - temp4], [0xebc02b9bc38392983309c4cfa8311051a25eec9726da341932daa0de06e1508c]);\n            arg9 = var8;\n            r0 = var7;\n            return r0, arg9;\n        }\n    }\n    \n    function func_0EAD(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) {\n        arg7 = msg.data[arg9 * 0x20 + arg7:arg9 * 0x20 + arg7 + 0x20];\n        arg8 = arg0;\n        arg9 = arg1;\n        var var0 = 0x03;\n    \n        if (var0 >= arg9) { assert(); }\n    \n        arg8 = msg.data[var0 * 0x20 + arg8:var0 * 0x20 + arg8 + 0x20];\n        arg9 = arg5;\n        var0 = arg6;\n        var var1 = arg3;\n        var var2 = arg2;\n        var var3 = 0x00;\n        var var4 = arg4;\n        var var5 = 0x00;\n        var var6 = 0x2bca;\n        var var7 = arg7;\n        var var8 = arg8;\n        var var9 = var0;\n        var var10 = var4;\n        var var11 = 0x01;\n        var var12 = !(var3 & 0x02 ** 0xa0 - 0x01);\n        var6 = func_2E89(var7, var8, var9, var10, var11, var12);\n        var temp0 = var6;\n        var5 = temp0;\n        var6 = 0x2bdb;\n        var7 = arg8;\n        var8 = var1;\n        var9 = var0;\n        var10 = arg9;\n        var11 = var5;\n        var12 = var2;\n        var var13 = var3;\n        func_3003(var7, var8, var9, var10, var11, var12, var13);\n    \n    label_2BDB:\n        memory[0x00:0x20] = var4;\n        memory[0x20:0x40] = 0x04;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x2bfa;\n        var8 = arg9;\n        var6 = func_2D1A(var7, var8);\n        memory[0x00:0x20] = var4;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n    \n        if (!(storage[0x0f] & 0xff)) { return; }\n    \n        memory[0x00:0x20] = arg8 & 0xffffffff;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = var0;\n        memory[temp1 + 0x40:temp1 + 0x40 + 0x20] = arg9;\n        memory[temp1 + 0x60:temp1 + 0x60 + 0x20] = !!var1;\n        memory[temp1 + 0x80:temp1 + 0x80 + 0x20] = var5;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0xa0) - temp2], [0xebc02b9bc38392983309c4cfa8311051a25eec9726da341932daa0de06e1508c]);\n    }\n    \n    function func_0ED6(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = msg.sender == storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n    \n        if (!var8) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_0F39; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var8) {\n        label_0F39:\n            var8 = arg0;\n            var var9 = arg1;\n            var var10 = 0x00;\n        \n            if (var10 >= var9) { assert(); }\n        \n            var0 = msg.data[var10 * 0x20 + var8:var10 * 0x20 + var8 + 0x20];\n            var8 = arg0;\n            var9 = arg1;\n            var10 = 0x01;\n        \n            if (var10 >= var9) { assert(); }\n        \n            var1 = msg.data[var10 * 0x20 + var8:var10 * 0x20 + var8 + 0x20];\n            var8 = arg0;\n            var9 = arg1;\n            var10 = 0x02;\n        \n            if (var10 >= var9) { assert(); }\n        \n            var temp0 = msg.data[var10 * 0x20 + var8:var10 * 0x20 + var8 + 0x20];\n            memory[0x00:0x20] = (temp0 & 0xffff00000000) / 0x0100000000;\n            memory[0x20:0x40] = 0x07;\n            var temp1 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x08;\n            var2 = temp0;\n            var3 = var2 & 0x0f0000000000000000000000000000000000000000;\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            var4 = temp2 & temp1;\n            var5 = storage[keccak256(memory[0x00:0x40])] & temp2;\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = address(this) * 0x01000000000000000000000000;\n            memory[temp3 + 0x14:temp3 + 0x14 + 0x20] = var0;\n            memory[temp3 + 0x34:temp3 + 0x34 + 0x20] = var1;\n            memory[temp3 + 0x54:temp3 + 0x54 + 0x20] = var4 | (var2 & ~(0x02 ** 0xa0 - 0x01));\n            var temp4 = memory[0x40:0x60];\n            var temp5 = keccak256(memory[temp4:temp4 + (temp3 + 0x74) - temp4]);\n            memory[0x00:0x20] = temp5;\n            memory[0x20:0x40] = 0x05;\n            var6 = temp5;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n        \n            var8 = 0x10a0;\n            var9 = var6;\n            var10 = var5;\n        \n            if (!(var2 & 0xf000000000000000000000000000000000000000)) {\n                var8 = func_1079(arg0, arg1, var9, var10);\n            \n                if (!var8) { revert(memory[0x00:0x00]); }\n            \n                var7 = 0x00;\n            \n                if (var3 == 0x02 ** 0xa0) {\n                    var7 = storage[0x0c] & 0x02 ** 0xa0 - 0x01;\n                    goto label_10EC;\n                } else if (var3 != 0x020000000000000000000000000000000000000000) {\n                label_10EC:\n                \n                    if (var7 & 0x02 ** 0xa0 - 0x01 != var4 & 0x02 ** 0xa0 - 0x01) {\n                        var temp6 = 0x02 ** 0xa0 - 0x01;\n                        memory[0x00:0x20] = var4 & temp6;\n                        memory[0x20:0x40] = 0x01;\n                        var temp7 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = var5 & temp6;\n                        memory[0x20:0x40] = temp7;\n                        var8 = 0x11ac;\n                        var9 = storage[keccak256(memory[0x00:0x40])];\n                        var10 = var0;\n                        var8 = func_2A19(var9, var10);\n                        var temp8 = 0x02 ** 0xa0 - 0x01;\n                        memory[0x00:0x20] = var4 & temp8;\n                        memory[0x20:0x40] = 0x01;\n                        var temp9 = keccak256(memory[0x00:0x40]);\n                        var temp10 = temp8 & var5;\n                        memory[0x00:0x20] = temp10;\n                        memory[0x20:0x40] = temp9;\n                        storage[keccak256(memory[0x00:0x40])] = var8;\n                        memory[0x00:0x20] = var7 & temp8;\n                        memory[0x20:0x40] = 0x01;\n                        var temp11 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = temp10;\n                        memory[0x20:0x40] = temp11;\n                        var9 = storage[keccak256(memory[0x00:0x40])];\n                        var8 = 0x11fd;\n                        var10 = var1;\n                        var8 = func_2A19(var9, var10);\n                        var temp12 = 0x02 ** 0xa0 - 0x01;\n                        var temp13 = var7;\n                        memory[0x00:0x20] = temp13 & temp12;\n                        memory[0x20:0x40] = 0x01;\n                        var temp14 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = var5 & temp12;\n                        memory[0x20:0x40] = temp14;\n                        storage[keccak256(memory[0x00:0x40])] = var8;\n                        var temp15 = 0x02 ** 0xa0 - 0x01;\n                        memory[0x00:0x20] = temp13 & temp15;\n                        memory[0x20:0x40] = 0x01;\n                        var temp16 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = temp15 & storage[0x0b];\n                        memory[0x20:0x40] = temp16;\n                        var8 = 0x125d;\n                        var9 = storage[keccak256(memory[0x00:0x40])];\n                        var10 = var1;\n                        var8 = func_2D1A(var9, var10);\n                    \n                    label_125D:\n                        var temp17 = 0x02 ** 0xa0 - 0x01;\n                        memory[0x00:0x20] = var7 & temp17;\n                        memory[0x20:0x40] = 0x01;\n                        var temp18 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = temp17 & storage[0x0b];\n                        memory[0x20:0x40] = temp18;\n                        storage[keccak256(memory[0x00:0x40])] = var8;\n                        memory[0x00:0x20] = var6;\n                        memory[0x20:0x40] = 0x05;\n                        var temp19 = keccak256(memory[0x00:0x40]);\n                        storage[temp19] = (storage[temp19] & ~0xff) | 0x01;\n                    \n                        if (var4 & temp17) {\n                            var8 = var4 & 0x02 ** 0xa0 - 0x01;\n                            var9 = 0xa9059cbb;\n                            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                            var temp20 = memory[0x40:0x60];\n                            memory[temp20:temp20 + 0x20] = (var9 & 0xffffffff) * 0x02 ** 0xe0;\n                            memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                            memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = var0;\n                            var10 = temp20 + 0x44;\n                            var var11 = 0x20;\n                            var var12 = memory[0x40:0x60];\n                            var var13 = var10 - var12;\n                            var var14 = var12;\n                            var var15 = 0x00;\n                            var var16 = var8;\n                        \n                            if (!address(var16).code.length) { revert(memory[0x00:0x00]); }\n                        \n                            var temp21;\n                            temp21, memory[var12:var12 + var11] = address(var16).call.gas(msg.gas - 0x02c6).value(var15)(memory[var14:var14 + var13]);\n                        \n                            if (!temp21) { revert(memory[0x00:0x00]); }\n                        \n                            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n                        \n                        label_1360:\n                            return;\n                        } else {\n                            var temp22 = var0;\n                            var temp23 = memory[0x40:0x60];\n                            var temp24;\n                            temp24, memory[temp23:temp23 + 0x00] = address(var5 & 0x02 ** 0xa0 - 0x01).call.gas(!temp22 * 0x08fc).value(temp22)(memory[temp23:temp23 + memory[0x40:0x60] - temp23]);\n                        \n                            if (temp24) { goto label_1360; }\n                            else { revert(memory[0x00:0x00]); }\n                        }\n                    } else {\n                        var8 = 0x114b;\n                        var9 = 0x1119;\n                        var10 = var0;\n                        var11 = var1;\n                        var9 = func_2D1A(var10, var11);\n                        var8 = func_1119(var4, var5, var9);\n                        var temp25 = 0x02 ** 0xa0 - 0x01;\n                        memory[0x00:0x20] = var4 & temp25;\n                        memory[0x20:0x40] = 0x01;\n                        var temp26 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = var5 & temp25;\n                        memory[0x20:0x40] = temp26;\n                        storage[keccak256(memory[0x00:0x40])] = var8;\n                        var temp27 = 0x02 ** 0xa0 - 0x01;\n                        memory[0x00:0x20] = var7 & temp27;\n                        memory[0x20:0x40] = 0x01;\n                        var temp28 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = temp27 & storage[0x0b];\n                        memory[0x20:0x40] = temp28;\n                        var9 = storage[keccak256(memory[0x00:0x40])];\n                        var8 = 0x125d;\n                        var10 = var1;\n                        var8 = func_2D1A(var9, var10);\n                        goto label_125D;\n                    }\n                } else {\n                    var7 = var4;\n                    goto label_10EC;\n                }\n            } else {\n                var11 = 0x1c;\n                var12 = arg0;\n                var13 = arg1;\n                var14 = 0x03;\n            \n                if (var14 >= var13) { assert(); }\n            \n                var12 = msg.data[var14 * 0x20 + var12:var14 * 0x20 + var12 + 0x20];\n                var13 = arg0;\n                var14 = arg1;\n                var15 = 0x04;\n            \n                if (var15 >= var14) { assert(); }\n            \n                var13 = msg.data[var15 * 0x20 + var13:var15 * 0x20 + var13 + 0x20];\n                var14 = 0x00;\n                var15 = var10 & 0x02 ** 0xa0 - 0x01;\n                var16 = 0x01;\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n                memory[temp29 + 0x1c:temp29 + 0x1c + 0x20] = var9;\n                var temp30 = memory[0x40:0x60];\n                var temp31 = keccak256(memory[temp30:temp30 + (temp29 + 0x3c) - temp30]);\n                var temp32 = memory[0x40:0x60];\n                memory[temp32:temp32 + 0x20] = 0x00;\n                memory[0x40:0x60] = temp32 + 0x20;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = temp31;\n                memory[temp33 + 0x20:temp33 + 0x20 + 0x20] = var11 & 0xff;\n                memory[temp33 + 0x40:temp33 + 0x40 + 0x20] = var12;\n                memory[temp33 + 0x60:temp33 + 0x60 + 0x20] = var13;\n                var var17 = temp33 + 0x80;\n                var temp34 = memory[0x40:0x60];\n                var temp35;\n                temp35, memory[temp34 - 0x20:temp34 - 0x20 + 0x20] = address(var16).call.gas(msg.gas - 0x646e)(memory[temp34:temp34 + var17 - temp34]);\n            \n                if (!temp35) { revert(memory[0x00:0x00]); }\n            \n                var8 = memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var15;\n                // Error: Could not resolve jump destination!\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1079(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x1b;\n        var var1 = arg0;\n        var var2 = arg1;\n        var var3 = 0x03;\n    \n        if (var3 >= var2) { assert(); }\n    \n        var1 = msg.data[var3 * 0x20 + var1:var3 * 0x20 + var1 + 0x20];\n        var2 = arg0;\n        var3 = arg1;\n        var var4 = 0x04;\n    \n        if (var4 >= var3) { assert(); }\n    \n        var2 = msg.data[var4 * 0x20 + var2:var4 * 0x20 + var2 + 0x20];\n        var3 = 0x00;\n        var4 = arg3 & 0x02 ** 0xa0 - 0x01;\n        var var5 = 0x01;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n        memory[temp0 + 0x1c:temp0 + 0x1c + 0x20] = arg2;\n        var temp1 = memory[0x40:0x60];\n        var temp2 = keccak256(memory[temp1:temp1 + (temp0 + 0x3c) - temp1]);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = 0x00;\n        memory[0x40:0x60] = temp3 + 0x20;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp2;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var0 & 0xff;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = var1;\n        memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = var2;\n        var var6 = temp4 + 0x80;\n        var temp5 = memory[0x40:0x60];\n        var temp6;\n        temp6, memory[temp5 - 0x20:temp5 - 0x20 + 0x20] = address(var5).call.gas(msg.gas - 0x646e)(memory[temp5:temp5 + var6 - temp5]);\n    \n        if (temp6) { return memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var4; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1119(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        var temp2 = arg2;\n        arg2 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = temp2;\n        r0 = func_2A19(arg2, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_136C(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = msg.sender == storage[var8] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n    \n        if (!var9) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_13D1; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var9) {\n        label_13D1:\n            var9 = arg0;\n            var var10 = arg1;\n            var var11 = 0x02;\n        \n            if (var11 >= var10) { assert(); }\n        \n            memory[0x00:0x20] = (msg.data[var11 * 0x20 + var9:var11 * 0x20 + var9 + 0x20] & 0xffff00000000) / 0x0100000000;\n            memory[0x20:0x40] = 0x07;\n            var0 = msg.data[var11 * 0x20 + var9:var11 * 0x20 + var9 + 0x20];\n            var1 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var11 = 0x00;\n            var9 = arg0;\n            var10 = arg1;\n        \n            if (var11 >= var10) { assert(); }\n        \n            var2 = msg.data[var11 * 0x20 + var9:var11 * 0x20 + var9 + 0x20];\n            var3 = 0x01;\n        \n            if (var3 >= arg1) {\n            label_09F4:\n                return;\n            } else {\n            label_143D:\n                var9 = arg0;\n                var10 = arg1;\n                var11 = var3;\n            \n                if (var11 >= var10) { assert(); }\n            \n                var4 = msg.data[var11 * 0x20 + var9:var11 * 0x20 + var9 + 0x20];\n                var9 = arg0;\n                var10 = arg1;\n                var11 = var3 + 0x01;\n            \n                if (var11 >= var10) { assert(); }\n            \n                var temp0 = msg.data[var11 * 0x20 + var9:var11 * 0x20 + var9 + 0x20];\n                var0 = temp0;\n                memory[0x00:0x20] = var0 & 0xffffffff;\n                memory[0x20:0x40] = 0x08;\n                var temp1 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                var5 = temp1;\n                var temp2 = memory[0x40:0x60];\n                var temp3 = 0x02 ** 0xa0 - 0x01;\n                memory[temp2:temp2 + 0x20] = (temp3 & address(this)) * 0x01000000000000000000000000;\n                memory[temp2 + 0x14:temp2 + 0x14 + 0x20] = var4;\n                memory[temp2 + 0x34:temp2 + 0x34 + 0x20] = (var0 & ~(0x02 ** 0xa0 - 0x01)) | (var1 & 0x02 ** 0xa0 - 0x01);\n                memory[temp2 + 0x54:temp2 + 0x54 + 0x20] = (temp3 & var2) * 0x01000000000000000000000000;\n                var temp4 = memory[0x40:0x60];\n                var6 = keccak256(memory[temp4:temp4 + (temp2 + 0x68) - temp4]);\n                var9 = 0x154e;\n                var10 = var6;\n                var11 = var5;\n            \n                if (var0 & 0xf000000000000000000000000000000000000000 == 0x00) {\n                    var var12 = 0x1b;\n                    var var13 = arg0;\n                    var var14 = arg1;\n                    var var15 = var3 + 0x02;\n                \n                    if (var15 >= var14) { assert(); }\n                \n                    var13 = msg.data[var15 * 0x20 + var13:var15 * 0x20 + var13 + 0x20];\n                    var14 = arg0;\n                    var15 = arg1;\n                    var var16 = var3 + 0x03;\n                \n                    if (var16 >= var15) { assert(); }\n                \n                    var14 = msg.data[var16 * 0x20 + var14:var16 * 0x20 + var14 + 0x20];\n                    var15 = 0x00;\n                    var16 = var11 & 0x02 ** 0xa0 - 0x01;\n                    var var17 = 0x01;\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n                    memory[temp5 + 0x1c:temp5 + 0x1c + 0x20] = var10;\n                    var temp6 = memory[0x40:0x60];\n                    var temp7 = keccak256(memory[temp6:temp6 + (temp5 + 0x3c) - temp6]);\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = 0x00;\n                    memory[0x40:0x60] = temp8 + 0x20;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = temp7;\n                    memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = var12 & 0xff;\n                    memory[temp9 + 0x40:temp9 + 0x40 + 0x20] = var13;\n                    memory[temp9 + 0x60:temp9 + 0x60 + 0x20] = var14;\n                    var var18 = temp9 + 0x80;\n                    var temp10 = memory[0x40:0x60];\n                    var temp11;\n                    temp11, memory[temp10 - 0x20:temp10 - 0x20 + 0x20] = address(var17).call.gas(msg.gas - 0x646e)(memory[temp10:temp10 + var18 - temp10]);\n                \n                    if (!temp11) { revert(memory[0x00:0x00]); }\n                \n                    var9 = memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var16;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var9 = func_151D(arg0, arg1, var3, var10, var11);\n                \n                    if (!var9) { revert(memory[0x00:0x00]); }\n                \n                    if (var4 <= 0x00) {\n                    label_17A5:\n                        var temp12 = 0x02 ** 0xa0 - 0x01;\n                        var temp13 = temp12 & var1;\n                        memory[0x00:0x20] = temp13;\n                        memory[0x20:0x40] = 0x01;\n                        var temp14 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = var5 & temp12;\n                        memory[0x20:0x40] = temp14;\n                        var temp15 = keccak256(memory[0x00:0x40]);\n                        var8 = storage[temp15];\n                        storage[temp15] = 0x00;\n                    \n                        if (temp13) {\n                            var9 = var1 & 0x02 ** 0xa0 - 0x01;\n                            var10 = 0x095ea7b3;\n                            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                            var temp16 = memory[0x40:0x60];\n                            memory[temp16:temp16 + 0x20] = (var10 & 0xffffffff) * 0x02 ** 0xe0;\n                            memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                            memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = var8;\n                            var11 = temp16 + 0x44;\n                            var12 = 0x20;\n                            var13 = memory[0x40:0x60];\n                            var14 = var11 - var13;\n                            var15 = var13;\n                            var16 = 0x00;\n                            var17 = var9;\n                        \n                            if (!address(var17).code.length) { revert(memory[0x00:0x00]); }\n                        \n                            var temp17;\n                            temp17, memory[var13:var13 + var12] = address(var17).call.gas(msg.gas - 0x02c6).value(var16)(memory[var15:var15 + var14]);\n                        \n                            if (!temp17) { revert(memory[0x00:0x00]); }\n                        \n                            var9 = var2 & 0x02 ** 0xa0 - 0x01;\n                            var10 = 0x3b9ca2d0;\n                            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                            var temp18 = memory[0x40:0x60];\n                            memory[temp18:temp18 + 0x20] = (var10 & 0xffffffff) * 0x02 ** 0xe0;\n                            var temp19 = 0x02 ** 0xa0 - 0x01;\n                            memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = temp19 & var5;\n                            memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = var8;\n                            memory[temp18 + 0x44:temp18 + 0x44 + 0x20] = temp19 & var1;\n                            var11 = temp18 + 0x64;\n                            var12 = 0x20;\n                            var13 = memory[0x40:0x60];\n                            var14 = var11 - var13;\n                            var15 = var13;\n                            var16 = 0x00;\n                            var17 = var9;\n                        \n                            if (!address(var17).code.length) { revert(memory[0x00:0x00]); }\n                        \n                            var temp20;\n                            temp20, memory[var13:var13 + var12] = address(var17).call.gas(msg.gas - 0x02c6).value(var16)(memory[var15:var15 + var14]);\n                        \n                            if (!temp20) { revert(memory[0x00:0x00]); }\n                        \n                            var3 = var3 + 0x04;\n                        \n                        label_1434:\n                        \n                            if (var3 >= arg1) { goto label_09F4; }\n                            else { goto label_143D; }\n                        } else {\n                            var9 = var2 & 0x02 ** 0xa0 - 0x01;\n                            var10 = 0x3b9ca2d0;\n                            var11 = var8;\n                            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                            var temp21 = memory[0x40:0x60];\n                            memory[temp21:temp21 + 0x20] = (var10 & 0xffffffff) * 0x02 ** 0xe0;\n                            var temp22 = 0x02 ** 0xa0 - 0x01;\n                            memory[temp21 + 0x04:temp21 + 0x04 + 0x20] = temp22 & var5;\n                            memory[temp21 + 0x24:temp21 + 0x24 + 0x20] = var11;\n                            memory[temp21 + 0x44:temp21 + 0x44 + 0x20] = temp22 & var1;\n                            var12 = temp21 + 0x64;\n                            var13 = 0x20;\n                            var14 = memory[0x40:0x60];\n                            var15 = var12 - var14;\n                            var16 = var14;\n                            var17 = var11;\n                            var18 = var9;\n                        \n                            if (!address(var18).code.length) { revert(memory[0x00:0x00]); }\n                        \n                            var temp23;\n                            temp23, memory[var14:var14 + var13] = address(var18).call.gas(msg.gas - 0x25ee).value(var17)(memory[var16:var16 + var15]);\n                        \n                            if (!temp23) { revert(memory[0x00:0x00]); }\n                        \n                            var3 = var3 + 0x04;\n                            goto label_1434;\n                        }\n                    } else {\n                        var7 = var0 & 0x0f0000000000000000000000000000000000000000;\n                    \n                        if (var7 == 0x02 ** 0xa0) {\n                            var temp37 = 0x02 ** 0xa0 - 0x01;\n                            memory[0x00:0x20] = temp37 & storage[0x0c];\n                            memory[0x20:0x40] = 0x01;\n                            var temp38 = keccak256(memory[0x00:0x40]);\n                            memory[0x00:0x20] = var5 & temp37;\n                            memory[0x20:0x40] = temp38;\n                            var10 = storage[keccak256(memory[0x00:0x40])];\n                            var9 = 0x15c1;\n                            var11 = var4;\n                            var9 = func_2A19(var10, var11);\n                            var temp39 = 0x02 ** 0xa0 - 0x01;\n                            memory[0x00:0x20] = temp39 & storage[0x0c];\n                            memory[0x20:0x40] = 0x01;\n                            var temp40 = keccak256(memory[0x00:0x40]);\n                            memory[0x00:0x20] = temp39 & var5;\n                            memory[0x20:0x40] = temp40;\n                            storage[keccak256(memory[0x00:0x40])] = var9;\n                            memory[0x00:0x20] = temp39 & storage[0x0c];\n                            memory[0x20:0x40] = 0x01;\n                            var temp41 = keccak256(memory[0x00:0x40]);\n                            memory[0x00:0x20] = temp39 & storage[0x0b];\n                            memory[0x20:0x40] = temp41;\n                            var9 = 0x1616;\n                            var10 = storage[keccak256(memory[0x00:0x40])];\n                            var11 = var4;\n                            var9 = func_2D1A(var10, var11);\n                            var temp42 = 0x02 ** 0xa0 - 0x01;\n                            memory[0x00:0x20] = temp42 & storage[0x0c];\n                            memory[0x20:0x40] = 0x01;\n                            var temp43 = keccak256(memory[0x00:0x40]);\n                            memory[0x00:0x20] = temp42 & storage[0x0b];\n                            memory[0x20:0x40] = temp43;\n                            storage[keccak256(memory[0x00:0x40])] = var9;\n                            goto label_17A5;\n                        } else if (var7 != 0x020000000000000000000000000000000000000000) {\n                            memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                            var temp24 = memory[0x00:0x20];\n                            memory[0x00:0x20] = code[0x3346:0x3366];\n                            var temp25 = memory[0x00:0x20];\n                            memory[0x00:0x20] = temp24;\n                            memory[0x20:0x40] = temp25;\n                            var10 = storage[keccak256(memory[0x00:0x40])];\n                            var9 = 0x173d;\n                            var11 = var4;\n                            var9 = func_2A19(var10, var11);\n                            var temp26 = 0x02 ** 0xa0 - 0x01;\n                            memory[0x00:0x20] = temp26 & var5;\n                            var temp27 = memory[0x00:0x20];\n                            memory[0x00:0x20] = code[0x3346:0x3366];\n                            var temp28 = memory[0x00:0x20];\n                            memory[0x00:0x20] = temp27;\n                            memory[0x20:0x40] = temp28;\n                            storage[keccak256(memory[0x00:0x40])] = var9;\n                            memory[0x00:0x20] = temp26 & storage[0x0b];\n                            var10 = storage[keccak256(memory[0x00:0x40])];\n                            var9 = 0x177c;\n                            var11 = var4;\n                            var9 = func_2D1A(var10, var11);\n                            memory[0x00:0x20] = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n                            var temp29 = memory[0x00:0x20];\n                            memory[0x00:0x20] = code[0x3346:0x3366];\n                            var temp30 = memory[0x00:0x20];\n                            memory[0x00:0x20] = temp29;\n                            memory[0x20:0x40] = temp30;\n                            storage[keccak256(memory[0x00:0x40])] = var9;\n                            goto label_17A5;\n                        } else {\n                            var temp31 = 0x02 ** 0xa0 - 0x01;\n                            memory[0x00:0x20] = var1 & temp31;\n                            memory[0x20:0x40] = 0x01;\n                            var temp32 = keccak256(memory[0x00:0x40]);\n                            memory[0x00:0x20] = var5 & temp31;\n                            memory[0x20:0x40] = temp32;\n                            var10 = storage[keccak256(memory[0x00:0x40])];\n                            var9 = 0x169a;\n                            var11 = var4;\n                            var9 = func_2A19(var10, var11);\n                            var temp33 = 0x02 ** 0xa0 - 0x01;\n                            memory[0x00:0x20] = temp33 & var1;\n                            memory[0x20:0x40] = 0x01;\n                            var temp34 = keccak256(memory[0x00:0x40]);\n                            memory[0x00:0x20] = temp33 & var5;\n                            memory[0x20:0x40] = temp34;\n                            storage[keccak256(memory[0x00:0x40])] = var9;\n                            memory[0x00:0x20] = temp33 & storage[0x0b];\n                            var9 = 0x16d9;\n                            var10 = storage[keccak256(memory[0x00:0x40])];\n                            var11 = var4;\n                            var9 = func_2D1A(var10, var11);\n                            var temp35 = 0x02 ** 0xa0 - 0x01;\n                            memory[0x00:0x20] = var1 & temp35;\n                            memory[0x20:0x40] = 0x01;\n                            var temp36 = keccak256(memory[0x00:0x40]);\n                            memory[0x00:0x20] = temp35 & storage[0x0b];\n                            memory[0x20:0x40] = temp36;\n                            storage[keccak256(memory[0x00:0x40])] = var9;\n                            goto label_17A5;\n                        }\n                    }\n                }\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_151D(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x1c;\n        var var1 = arg0;\n        var var2 = arg1;\n        var var3 = arg2 + 0x02;\n    \n        if (var3 >= var2) { assert(); }\n    \n        var1 = msg.data[var3 * 0x20 + var1:var3 * 0x20 + var1 + 0x20];\n        var2 = arg0;\n        var3 = arg1;\n        var var4 = arg2 + 0x03;\n    \n        if (var4 >= var3) { assert(); }\n    \n        var2 = msg.data[var4 * 0x20 + var2:var4 * 0x20 + var2 + 0x20];\n        var3 = 0x00;\n        var4 = arg4 & 0x02 ** 0xa0 - 0x01;\n        var var5 = 0x01;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n        memory[temp0 + 0x1c:temp0 + 0x1c + 0x20] = arg3;\n        var temp1 = memory[0x40:0x60];\n        var temp2 = keccak256(memory[temp1:temp1 + (temp0 + 0x3c) - temp1]);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = 0x00;\n        memory[0x40:0x60] = temp3 + 0x20;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp2;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var0 & 0xff;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = var1;\n        memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = var2;\n        var var6 = temp4 + 0x80;\n        var temp5 = memory[0x40:0x60];\n        var temp6;\n        temp6, memory[temp5 - 0x20:temp5 - 0x20 + 0x20] = address(var5).call.gas(msg.gas - 0x646e)(memory[temp5:temp5 + var6 - temp5]);\n    \n        if (temp6) { return memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var4; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function registerToken(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var var0 = storage[0x00] & temp0 == temp0 & msg.sender;\n    \n        if (!var0) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_19AB; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var0) {\n        label_19AB:\n        \n            if (arg1 <= 0x01) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0a;\n        \n            if (storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = 0x07;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n        \n            var temp1 = arg1;\n            var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x0a;\n            storage[keccak256(memory[0x00:0x40])] = temp1;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x07;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = temp2 | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n            return;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function userCount() returns (var r0) { return storage[0x0e]; }\n    \n    function transferForAdmin(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var var0 = storage[0x00] & temp0 == temp0 & msg.sender;\n    \n        if (!var0) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_1A80; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var0) {\n        label_1A80:\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0a;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x09;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x1ad1;\n            var var1 = arg1;\n            func_2D2C(var1);\n            var temp1 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp1;\n            memory[0x20:0x40] = 0x01;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp1 & msg.sender;\n            memory[0x20:0x40] = temp2;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var0 = 0x1b08;\n            var var2 = arg2;\n            var0 = func_2A19(var1, var2);\n            var temp3 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp3 & arg0;\n            memory[0x20:0x40] = 0x01;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp3 & msg.sender;\n            memory[0x20:0x40] = temp4;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            memory[0x00:0x20] = arg1 & temp3;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var0 = 0x1b44;\n            var2 = arg2;\n            var0 = func_2D1A(var1, var2);\n            var temp5 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp5 & arg0;\n            memory[0x20:0x40] = 0x01;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp5 & arg1;\n            memory[0x20:0x40] = temp6;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            return;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function addToAdmin(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = !!arg1 | (storage[temp1] & ~0xff);\n    }\n    \n    function joysoWallet() returns (var r0) { return storage[0x0b] & 0x02 ** 0xa0 - 0x01; }\n    \n    function isAdmin(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function userNonce(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function depositToken(var arg0, var arg1) {\n        if (arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x1c2b;\n        var var1 = msg.sender;\n        func_2D2C(var1);\n        var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var1 = 0x23b872dd;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = arg1;\n        var var2 = temp0 + 0x64;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp3;\n        memory[0x20:0x40] = 0x01;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp3 & msg.sender;\n        memory[0x20:0x40] = temp4;\n        var0 = 0x1cf2;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg1;\n        var0 = func_2D1A(var1, var2);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        var temp6 = arg0;\n        memory[0x00:0x20] = temp5 & temp6;\n        memory[0x20:0x40] = 0x01;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        var temp8 = msg.sender;\n        memory[0x00:0x20] = temp8 & temp5;\n        memory[0x20:0x40] = temp7;\n        var temp9 = var0;\n        storage[keccak256(memory[0x00:0x40])] = temp9;\n        var temp10 = memory[0x40:0x60];\n        var temp11 = 0x02 ** 0xa0 - 0x01;\n        memory[temp10:temp10 + 0x20] = temp11 & temp6;\n        memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = temp11 & temp8;\n        memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = arg1;\n        memory[temp10 + 0x60:temp10 + 0x60 + 0x20] = temp9;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp10 + 0x80) - temp12], [0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7]);\n    }\n    \n    function lockPeriod() returns (var r0) { return storage[0x0d]; }\n    \n    function usedHash(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function userLock(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function collectFee(var arg0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp1 & storage[0x0b];\n        memory[0x20:0x40] = temp2;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        var temp4 = arg0 & temp3;\n        memory[0x00:0x20] = temp4;\n        memory[0x20:0x40] = 0x01;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp3 & storage[0x0b];\n        memory[0x20:0x40] = temp5;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n    \n        if (temp4) {\n            var var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var2 = 0xa9059cbb;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = msg.sender;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = var0;\n            var var3 = temp6 + 0x44;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n        \n            if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp7;\n            temp7, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n        \n            if (!temp7) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n        label_1EEA:\n            var temp8 = memory[0x40:0x60];\n            var temp9 = 0x02 ** 0xa0 - 0x01;\n            memory[temp8:temp8 + 0x20] = temp9 & arg0;\n            memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp9 & storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n            memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = var0;\n            memory[temp8 + 0x60:temp8 + 0x60 + 0x20] = 0x00;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + (temp8 + 0x80) - temp10], [0xf341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567]);\n            return;\n        } else {\n            var temp11 = var0;\n            var temp12 = memory[0x40:0x60];\n            var temp13;\n            temp13, memory[temp12:temp12 + 0x00] = address(msg.sender).call.gas(!temp11 * 0x08fc).value(temp11)(memory[temp12:temp12 + memory[0x40:0x60] - temp12]);\n        \n            if (temp13) { goto label_1EEA; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function unlockMe() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n    \n        if (!storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = 0x00;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x40) - temp2], [0x625fed9875dada8643f2418b838ae0bc78d9a148a18eee4ee1979ff0f3f5d427]);\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_1FEA(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function setTradeEventEnabled(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0f] = !!arg0 | (storage[0x0f] & ~0xff);\n    }\n    \n    function depositEther() {\n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x2049;\n        var var1 = msg.sender;\n        func_2D2C(var1);\n        memory[0x00:0x20] = msg.sender;\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x3346:0x3366];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = temp1;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x207f;\n        var var2 = msg.value;\n        var0 = func_2D1A(var1, var2);\n        var temp2 = msg.sender;\n        memory[0x00:0x20] = temp2 & 0x02 ** 0xa0 - 0x01;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x3346:0x3366];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp4;\n        var temp5 = var0;\n        storage[keccak256(memory[0x00:0x40])] = temp5;\n        var temp6 = memory[0x40:0x60];\n        var temp7 = 0x02 ** 0xa0 - 0x01;\n        memory[temp6:temp6 + 0x20] = temp7 & 0x00;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = temp7 & temp2;\n        memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = msg.value;\n        memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = temp5;\n        var temp8 = memory[0x40:0x60];\n        log(memory[temp8:temp8 + (temp6 + 0x80) - temp8], [0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7]);\n    }\n    \n    function joyToken() returns (var r0) { return storage[0x0c] & 0x02 ** 0xa0 - 0x01; }\n    \n    function changeLockPeriod(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0 <= 0x1e;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_214B:\n            storage[0x0d] = arg0 * 0x015180;\n            return;\n        } else if (arg0 >= 0x01) { goto label_214B; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2155(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function getBalance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function tradeEventEnabled() returns (var r0) { return storage[0x0f] & 0xff; }\n    \n    function cancelByAdmin(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var var5 = storage[var4] & temp0 == temp0 & msg.sender;\n    \n        if (!var5) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_21E4; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var5) {\n        label_21E4:\n            var5 = arg0;\n            var var6 = arg1;\n            var var7 = 0x01;\n        \n            if (var7 >= var6) { assert(); }\n        \n            var temp1 = msg.data[var7 * 0x20 + var5:var7 * 0x20 + var5 + 0x20];\n            memory[0x00:0x20] = temp1 & 0xffffffff;\n            memory[0x20:0x40] = 0x08;\n            var temp2 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x03;\n            var0 = temp1;\n            var1 = var0 / 0x02 ** 0xe0;\n            var2 = temp2;\n        \n            if (var1 <= storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n        \n            var5 = arg0;\n            var6 = arg1;\n            var7 = 0x00;\n        \n            if (var7 >= var6) { assert(); }\n        \n            var temp3 = msg.data[var7 * 0x20 + var5:var7 * 0x20 + var5 + 0x20];\n            var3 = temp3;\n            var5 = 0x22cc;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = address(this) * 0x01000000000000000000000000;\n            memory[temp4 + 0x14:temp4 + 0x14 + 0x20] = var3;\n            memory[temp4 + 0x34:temp4 + 0x34 + 0x20] = var0 & ~(0x02 ** 0xa0 - 0x01);\n            var temp5 = memory[0x40:0x60];\n            var6 = keccak256(memory[temp5:temp5 + (temp4 + 0x54) - temp5]);\n            var7 = var2;\n            var var8 = 0x22a8;\n            var var9 = var0;\n            var8 = func_2921(var9);\n            var5 = func_22A8(arg0, arg1, var6, var7, var8);\n        \n            if (!var5) { revert(memory[0x00:0x00]); }\n        \n            var4 = 0x00;\n        \n            if (var0 & 0x0f0000000000000000000000000000000000000000 != 0x02 ** 0xa0) {\n                var temp6 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = var4 & temp6;\n                memory[0x20:0x40] = 0x01;\n                var temp7 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var2 & temp6;\n                memory[0x20:0x40] = temp7;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < var3) { revert(memory[0x00:0x00]); }\n            \n            label_233E:\n                var temp8 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = var4 & temp8;\n                memory[0x20:0x40] = 0x01;\n                var temp9 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var2 & temp8;\n                memory[0x20:0x40] = temp9;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var5 = 0x2374;\n                var7 = var3;\n                var5 = func_2A19(var6, var7);\n                var temp10 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp10 & var4;\n                memory[0x20:0x40] = 0x01;\n                var temp11 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = temp10 & var2;\n                memory[0x20:0x40] = temp11;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                memory[0x00:0x20] = temp10 & storage[0x0b];\n                var5 = 0x23b3;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = var3;\n                var5 = func_2D1A(var6, var7);\n                var temp12 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp12 & var4;\n                memory[0x20:0x40] = 0x01;\n                var temp13 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = temp12 & storage[0x0b];\n                memory[0x20:0x40] = temp13;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                memory[0x00:0x20] = temp12 & var2;\n                memory[0x20:0x40] = 0x03;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                return;\n            } else {\n                var4 = storage[0x0c] & 0x02 ** 0xa0 - 0x01;\n                var temp14 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = var4 & temp14;\n                memory[0x20:0x40] = 0x01;\n                var temp15 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var2 & temp14;\n                memory[0x20:0x40] = temp15;\n            \n                if (storage[keccak256(memory[0x00:0x40])] >= var3) { goto label_233E; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_22A8(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = arg0;\n        var var1 = arg1;\n        var var2 = 0x02;\n    \n        if (var2 >= var1) { assert(); }\n    \n        var0 = msg.data[var2 * 0x20 + var0:var2 * 0x20 + var0 + 0x20];\n        var1 = arg0;\n        var2 = arg1;\n        var var3 = 0x03;\n    \n        if (var3 >= var2) { assert(); }\n    \n        var1 = msg.data[var3 * 0x20 + var1:var3 * 0x20 + var1 + 0x20];\n        var2 = 0x00;\n        var3 = arg3 & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x01;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n        memory[temp0 + 0x1c:temp0 + 0x1c + 0x20] = arg2;\n        var temp1 = memory[0x40:0x60];\n        var temp2 = keccak256(memory[temp1:temp1 + (temp0 + 0x3c) - temp1]);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = 0x00;\n        memory[0x40:0x60] = temp3 + 0x20;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp2;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = arg4 & 0xff;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = var0;\n        memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = var1;\n        var var5 = temp4 + 0x80;\n        var temp5 = memory[0x40:0x60];\n        var temp6;\n        temp6, memory[temp5 - 0x20:temp5 - 0x20 + 0x20] = address(var4).call.gas(msg.gas - 0x646e)(memory[temp5:temp5 + var5 - temp5]);\n    \n        if (temp6) { return memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var3; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + memory[0x40:0x60] - temp3], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0x02 ** 0xa0 - 0x01, stack[-1] & 0x02 ** 0xa0 - 0x01]);\n        storage[0x00] = (temp2 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~(0x02 ** 0xa0 - 0x01));\n    }\n    \n    function withdraw(var arg0, var arg1) {\n        if (arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var var0 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = 0x24b4;\n        var1 = func_2DDC();\n        var temp0 = var1 > var0;\n        var0 = temp0;\n    \n        if (var0) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n        \n            if (storage[keccak256(memory[0x00:0x40])]) { goto label_24E3; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var0) {\n        label_24E3:\n            var temp1 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp1;\n            memory[0x20:0x40] = 0x01;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp1 & msg.sender;\n            memory[0x20:0x40] = temp2;\n            var0 = 0x251a;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = arg1;\n            var0 = func_2A19(var1, var2);\n            var temp3 = 0x02 ** 0xa0 - 0x01;\n            var temp4 = arg0 & temp3;\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = 0x01;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp3 & msg.sender;\n            memory[0x20:0x40] = temp5;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n        \n            if (temp4) {\n                var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n                var1 = 0xa9059cbb;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n                memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = msg.sender;\n                memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = arg1;\n                var2 = temp6 + 0x44;\n                var var3 = 0x20;\n                var var4 = memory[0x40:0x60];\n                var var5 = var2 - var4;\n                var var6 = var4;\n                var var7 = 0x00;\n                var var8 = var0;\n            \n                if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp7;\n                temp7, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n            \n                if (!temp7) { revert(memory[0x00:0x00]); }\n            \n                if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n            \n            label_2606:\n                var temp8 = 0x02 ** 0xa0 - 0x01;\n                var temp9 = arg0;\n                memory[0x00:0x20] = temp9 & temp8;\n                memory[0x20:0x40] = 0x01;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                var temp11 = msg.sender;\n                memory[0x00:0x20] = temp11 & temp8;\n                memory[0x20:0x40] = temp10;\n                var temp12 = storage[keccak256(memory[0x00:0x40])];\n                var temp13 = memory[0x40:0x60];\n                var temp14 = 0x02 ** 0xa0 - 0x01;\n                memory[temp13:temp13 + 0x20] = temp14 & temp9;\n                memory[temp13 + 0x20:temp13 + 0x20 + 0x20] = temp14 & temp11;\n                memory[temp13 + 0x40:temp13 + 0x40 + 0x20] = arg1;\n                memory[temp13 + 0x60:temp13 + 0x60 + 0x20] = temp12;\n                var temp15 = memory[0x40:0x60];\n                log(memory[temp15:temp15 + (temp13 + 0x80) - temp15], [0xf341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567]);\n                return;\n            } else {\n                var temp16 = arg1;\n                var temp17 = memory[0x40:0x60];\n                var temp18;\n                temp18, memory[temp17:temp17 + 0x00] = address(msg.sender).call.gas(!temp16 * 0x08fc).value(temp16)(memory[temp17:temp17 + memory[0x40:0x60] - temp17]);\n            \n                if (temp18) { goto label_2606; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function orderFills(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function lockMe() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n    \n        if (!storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x0d];\n        var var1 = 0x26cf;\n        var1 = func_2DDC();\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = var1 + var0;\n        storage[keccak256(memory[0x00:0x40])] = temp1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = temp1;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x40) - temp3], [0x625fed9875dada8643f2418b838ae0bc78d9a148a18eee4ee1979ff0f3f5d427]);\n    }\n    \n    function func_2738(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function func_2753(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_2921(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(arg0 & 0xf000000000000000000000000000000000000000)) { return 0xff & 0x1b; }\n    \n        var var1 = 0x1c;\n        return var1 & 0xff;\n    }\n    \n    function func_2A19(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2A2E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2CA8(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = (arg0 & 0xffff000000000000) / 0x01000000000000;\n    \n        if (var2) {\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x07;\n            arg0 = var1;\n            r0 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            return r0, arg0;\n        } else {\n            memory[0x00:0x20] = (arg0 & 0xffff00000000) / 0x0100000000;\n            memory[0x20:0x40] = 0x07;\n            var0 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var1 = 0x01;\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0;\n        }\n    }\n    \n    function func_2D1A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2D2C(var arg0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x09;\n    \n        if (storage[keccak256(memory[0x00:0x40])]) { return; }\n    \n        var temp0 = storage[0x0e] + 0x01;\n        storage[0x0e] = temp0;\n        var temp1 = arg0;\n        var temp2 = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x09;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x08;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = temp2 | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = storage[0x0e];\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0xd75b88a9203b17f9356ca063241beac16a25d5a46f485b378c2c229e864bdd4d]);\n    }\n    \n    function func_2DDC() returns (var r0) { return block.timestamp; }\n    \n    function func_2DE0(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg3) {\n            memory[0x00:0x20] = arg4;\n            memory[0x20:0x40] = 0x04;\n            var1 = arg1;\n            var var2 = 0x2e13;\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = var1;\n            var2 = func_2A19(var3, var4);\n        \n        label_2E13:\n            var1 = var2;\n        \n            if (var1 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (var1 >= arg2) { return arg2; }\n            else { return var1; }\n        } else {\n            var2 = arg0;\n            memory[0x00:0x20] = arg4;\n            memory[0x20:0x40] = 0x04;\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x2e13;\n            var3 = var1;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var2 = func_2A19(var3, var4);\n            goto label_2E13;\n        }\n    }\n    \n    function func_2E3D(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg2) {\n            var var1 = arg1;\n            var var2 = 0x2e75;\n            var var3 = arg3;\n            var var4 = arg0;\n            var2 = func_2A2E(var3, var4);\n        \n            if (!var1) { assert(); }\n        \n            var1 = var2 / var1;\n        \n        label_2E80:\n            return var1;\n        } else {\n            var1 = arg0;\n            var2 = 0x2e55;\n            var3 = arg3;\n            var4 = arg1;\n            var2 = func_2A2E(var3, var4);\n        \n            if (!var1) { assert(); }\n        \n            var1 = var2 / var1;\n            goto label_2E80;\n        }\n    }\n    \n    function func_2E89(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg3;\n        memory[0x20:0x40] = 0x04;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (!storage[keccak256(memory[var3:var3 + 0x40])]) {\n            var1 = arg0;\n            var var4 = 0x2710;\n            var var5 = 0x2f40;\n        \n            if (arg4) {\n            label_2EF6:\n                var var7 = (arg1 & 0xffff0000000000000000000000000000000000000000000000000000) / 0x010000000000000000000000000000000000000000000000000000;\n                var var6 = arg2;\n                var5 = func_2A2E(var6, var7);\n                // Error: Could not resolve method call return address!\n            } else {\n                var5 = func_2EBA(arg1, arg2);\n            \n            label_2F40:\n            \n                if (!var4) { assert(); }\n            \n                var2 = var5 / var4;\n            \n                if (arg5) {\n                    var3 = (arg1 & 0xfffffff00000000000000000000000000000000000000000) / 0x100000000000000000000000000000000000000000;\n                \n                    if (!var3) {\n                    label_2FE5:\n                        var4 = 0x2ff5;\n                        var5 = var1;\n                        var6 = var2;\n                        return func_2D1A(var5, var6);\n                    } else {\n                    label_2FB4:\n                    \n                        if (arg5) {\n                            var4 = var3;\n                            var5 = var2 / 0x0186a0;\n                        \n                            if (!var4) { assert(); }\n                        \n                            var2 = var5 / var4;\n                            goto label_2FE5;\n                        } else {\n                            var4 = var3;\n                            var5 = var2 * 0xe8d4a51000;\n                        \n                            if (!var4) { assert(); }\n                        \n                            var4 = var5 / var4;\n                            var2 = var4;\n                            goto label_2FE5;\n                        }\n                    }\n                } else {\n                    var4 = (arg1 & 0x0fffffffffffffffffffffff0000000000000000) / 0x010000000000000000;\n                    var3 = var4;\n                \n                    if (!var3) { goto label_2FE5; }\n                    else { goto label_2FB4; }\n                }\n            }\n        } else {\n            var4 = 0x00;\n            var1 = var4;\n            var4 = 0x2710;\n            var5 = 0x2f40;\n        \n            if (arg4) { goto label_2EF6; }\n        \n            var5 = func_2EBA(arg1, arg2);\n            goto label_2F40;\n        }\n    }\n    \n    function func_2EBA(var arg0, var arg1) returns (var r0) {\n        var var0 = (arg0 & 0xffff000000000000000000000000000000000000000000000000) / 0x01000000000000000000000000000000000000000000000000;\n        var temp0 = var0;\n        var0 = arg1;\n        var var1 = temp0;\n        r0 = func_2A2E(var0, var1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_3003(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x08;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var var2 = 0x00;\n        var var0 = temp0 & storage[keccak256(memory[var2:var2 + 0x40])];\n        var var1 = arg4;\n    \n        if (arg6 & temp0) {\n            var3 = (arg0 & 0x0fffffffffffffffffffffff0000000000000000) / 0x010000000000000000;\n        \n            if (!var3) { goto label_3094; }\n            else { goto label_308E; }\n        } else if (!((arg0 & 0xfffffff00000000000000000000000000000000000000000) / 0x100000000000000000000000000000000000000000)) {\n        label_3094:\n        \n            if (!arg1) {\n            label_315E:\n                var temp1 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg6 & temp1;\n                memory[0x20:0x40] = 0x01;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var0 & temp1;\n                memory[0x20:0x40] = temp2;\n                var var3 = 0x319a;\n                var var4 = var1;\n                var var5 = 0x30d6;\n                var var6 = storage[keccak256(memory[0x00:0x40])];\n                var var7 = arg2;\n                var5 = func_2D1A(var6, var7);\n                var3 = func_30D6(var4, var5);\n                var temp3 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg6 & temp3;\n                memory[0x20:0x40] = 0x01;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                var temp5 = temp3 & var0;\n                memory[0x00:0x20] = temp5;\n                memory[0x20:0x40] = temp4;\n                storage[keccak256(memory[0x00:0x40])] = var3;\n                memory[0x00:0x20] = arg5 & temp3;\n                memory[0x20:0x40] = 0x01;\n                var temp6 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = temp5;\n                memory[0x20:0x40] = temp6;\n                var3 = 0x31eb;\n                var4 = storage[keccak256(memory[0x00:0x40])];\n                var5 = arg3;\n                var3 = func_2A19(var4, var5);\n                var temp7 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg5 & temp7;\n                memory[0x20:0x40] = 0x01;\n                var temp8 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var0 & temp7;\n                memory[0x20:0x40] = temp8;\n                storage[keccak256(memory[0x00:0x40])] = var3;\n            \n                if (!var2) {\n                label_32D7:\n                    var temp9 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = arg6 & temp9;\n                    memory[0x20:0x40] = 0x01;\n                    var temp10 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = temp9 & storage[0x0b];\n                    memory[0x20:0x40] = temp10;\n                    var4 = storage[keccak256(memory[0x00:0x40])];\n                    var3 = 0x3310;\n                    var5 = var1;\n                    var3 = func_2D1A(var4, var5);\n                    var temp11 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = arg6 & temp11;\n                    memory[0x20:0x40] = 0x01;\n                    var temp12 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = temp11 & storage[0x0b];\n                    memory[0x20:0x40] = temp12;\n                    storage[keccak256(memory[0x00:0x40])] = var3;\n                    return;\n                } else {\n                label_3219:\n                    var temp13 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp13 & storage[0x0c];\n                    memory[0x20:0x40] = 0x01;\n                    var temp14 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = var0 & temp13;\n                    memory[0x20:0x40] = temp14;\n                    var3 = 0x3251;\n                    var4 = storage[keccak256(memory[0x00:0x40])];\n                    var5 = var2;\n                    var3 = func_2A19(var4, var5);\n                    var temp15 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp15 & storage[0x0c];\n                    memory[0x20:0x40] = 0x01;\n                    var temp16 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = temp15 & var0;\n                    memory[0x20:0x40] = temp16;\n                    storage[keccak256(memory[0x00:0x40])] = var3;\n                    memory[0x00:0x20] = temp15 & storage[0x0c];\n                    memory[0x20:0x40] = 0x01;\n                    var temp17 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = temp15 & storage[0x0b];\n                    memory[0x20:0x40] = temp17;\n                    var4 = storage[keccak256(memory[0x00:0x40])];\n                    var3 = 0x32a6;\n                    var5 = var2;\n                    var3 = func_2D1A(var4, var5);\n                    var temp18 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp18 & storage[0x0c];\n                    memory[0x20:0x40] = 0x01;\n                    var temp19 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = temp18 & storage[0x0b];\n                    memory[0x20:0x40] = temp19;\n                    storage[keccak256(memory[0x00:0x40])] = var3;\n                    return;\n                }\n            } else {\n            label_309B:\n                var temp20 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg6 & temp20;\n                memory[0x20:0x40] = 0x01;\n                var temp21 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var0 & temp20;\n                memory[0x20:0x40] = temp21;\n                var3 = 0x30e2;\n                var4 = var1;\n                var5 = 0x30d6;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = arg2;\n                var5 = func_2A19(var6, var7);\n                var3 = func_30D6(var4, var5);\n                var temp22 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg6 & temp22;\n                memory[0x20:0x40] = 0x01;\n                var temp23 = keccak256(memory[0x00:0x40]);\n                var temp24 = temp22 & var0;\n                memory[0x00:0x20] = temp24;\n                memory[0x20:0x40] = temp23;\n                storage[keccak256(memory[0x00:0x40])] = var3;\n                memory[0x00:0x20] = arg5 & temp22;\n                memory[0x20:0x40] = 0x01;\n                var temp25 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = temp24;\n                memory[0x20:0x40] = temp25;\n                var3 = 0x3133;\n                var4 = storage[keccak256(memory[0x00:0x40])];\n                var5 = arg3;\n                var3 = func_2D1A(var4, var5);\n                var temp26 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg5 & temp26;\n                memory[0x20:0x40] = 0x01;\n                var temp27 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var0 & temp26;\n                memory[0x20:0x40] = temp27;\n                storage[keccak256(memory[0x00:0x40])] = var3;\n            \n                if (!var2) { goto label_32D7; }\n                else { goto label_3219; }\n            }\n        } else {\n        label_308E:\n            var1 = 0x00;\n            var2 = arg4;\n        \n            if (!arg1) { goto label_315E; }\n            else { goto label_309B; }\n        }\n    }\n    \n    function func_30D6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_2A19(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 41076 tokens. Please reduce the length of the messages."
}