{
	"address": "0x04f062809b244e37e7fdc21d9409469c989c2342",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\ndef storage:\n  owner is address at storage 0\n  balance is mapping of uint256 at storage 1\n  userLock is mapping of uint256 at storage 2\n  userNonce is mapping of struct at storage 3\n  orderFills is mapping of uint256 at storage 4\n  stor5 is mapping of uint8 at storage 5\n  stor6 is mapping of uint8 at storage 6\n  tokenId2 is mapping of address at storage 7\n  userId2 is mapping of address at storage 8\n  user is mapping of uint256 at storage 9\n  token is mapping of uint256 at storage 10\n  joysoWalletAddress is address at storage 11\n  joyTokenAddress is address at storage 12\n  lockPeriod is uint256 at storage 13\n  userCount is uint256 at storage 14\n  tradeEventEnabled is uint8 at storage 15\n\ndef userCount(): # not payable\n  return userCount\n\ndef joysoWallet(): # not payable\n  return joysoWalletAddress\n\ndef isAdmin(address admin): # not payable\n  return bool(stor6[admin])\n\ndef userNonce(address _param1): # not payable\n  return userNonce[_param1].field_0\n\ndef lockPeriod(): # not payable\n  return lockPeriod\n\ndef usedHash(bytes32 _param1): # not payable\n  return bool(stor5[_param1])\n\ndef userLock(address _param1): # not payable\n  return userLock[_param1]\n\ndef owner(): # not payable\n  return owner\n\ndef userId2Address(uint256 _param1): # not payable\n  return userId2[_param1]\n\ndef joyToken(): # not payable\n  return joyTokenAddress\n\ndef tokenAddress2Id(address _param1): # not payable\n  return token[_param1]\n\ndef getBalance(address token, address account): # not payable\n  return balance[address(token)][address(account)]\n\ndef tradeEventEnabled(): # not payable\n  return bool(tradeEventEnabled)\n\ndef orderFills(bytes32 _param1): # not payable\n  return orderFills[_param1]\n\ndef tokenId2Address(uint256 _param1): # not payable\n  return tokenId2[_param1]\n\ndef userAddress2Id(address _param1): # not payable\n  return user[_param1]\n\n#\n#  Regular functions\n#\n\ndef _fallback(?) payable: # default function\n  revert\n\ndef setTradeEventEnabled(bool enabled): # not payable\n  require owner == caller\n  tradeEventEnabled = uint8(enabled)\n\ndef unlockMe(): # not payable\n  require user[caller]\n  userLock[caller] = 0\n  log Lock(\n        address holder=caller,\n        uint256 value=0)\n\ndef changeLockPeriod(uint256 period): # not payable\n  require owner == caller\n  require period <= 30\n  require period >= 1\n  lockPeriod = 24 * 3600 * period\n\ndef addToAdmin(address admin, bool isAdd): # not payable\n  require owner == caller\n  stor6[address(admin)] = uint8(isAdd)\n\ndef lockMe(): # not payable\n  require user[caller]\n  userLock[caller] = block.timestamp + lockPeriod\n  log Lock(\n        address holder=caller,\n        uint256 value=block.timestamp + lockPeriod)\n\ndef transferOwnership(address newOwner): # not payable\n  require owner == caller\n  require newOwner\n  log OwnershipTransferred(\n        address previousOwner=owner,\n        address newOwner=newOwner)\n  owner = newOwner\n\ndef registerToken(address token, uint256 decimals): # not payable\n  if owner != caller:\n      require stor6[caller]\n  require decimals > 1\n  require not token[address(token)]\n  require not tokenId2[decimals]\n  token[address(token)] = decimals\n  tokenId2[decimals] = token\n\ndef depositEther() payable: \n  require call.value > 0\n  if not user[caller]:\n      userCount++\n      user[caller] = userCount + 1\n      userId2[stor14 + 1] = caller\n      log NewUser(\n            address user=caller,\n            uint256 id=userCount)\n  require call.value + balance[0][caller] >= balance[0][caller]\n  balance[0][caller] += call.value\n  log Deposit(\n        address token=0,\n        address user=caller,\n        uint256 amount=call.value,\n        uint256 balance=call.value + balance[0][caller])\n\ndef withdraw(address _token, uint256 _amount): # not payable\n  require _amount > 0\n  require block.timestamp > userLock[caller]\n  require userLock[caller]\n  require _amount <= balance[address(_token)][caller]\n  balance[address(_token)][caller] -= _amount\n  if not _token:\n      call caller with:\n         value _amount wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n  else:\n      require ext_code.size(_token)\n      call _token.transfer(address recipient, uint256 amount) with:\n           gas gas_remaining - 710 wei\n          args caller, _amount\n      require ext_call.success\n      require ext_call.return_data[0]\n  log Withdraw(\n        address token=address(_token),\n        address user=caller,\n        uint256 amount=_amount,\n        uint256 balance=balance[address(_token)][caller])\n\ndef collectFee(address to): # not payable\n  require owner == caller\n  require balance[address(to)][stor11] > 0\n  balance[address(to)][stor11] = 0\n  if not to:\n      call caller with:\n         value balance[address(to)][stor11] wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n  else:\n      require ext_code.size(to)\n      call to.transfer(address recipient, uint256 amount) with:\n           gas gas_remaining - 710 wei\n          args caller, balance[address(to)][stor11]\n      require ext_call.success\n      require ext_call.return_data[0]\n  log Withdraw(\n        address token=address(to),\n        address user=joysoWalletAddress,\n        uint256 amount=balance[address(to)][stor11],\n        uint256 balance=0)\n\ndef depositToken(address token, uint256 amount): # not payable\n  require amount > 0\n  require token[address(token)]\n  if not user[caller]:\n      userCount++\n      user[caller] = userCount + 1\n      userId2[stor14 + 1] = caller\n      log NewUser(\n            address user=caller,\n            uint256 id=userCount)\n  require ext_code.size(token)\n  call token.transferFrom(address sender, address recipient, uint256 amount) with:\n       gas gas_remaining - 710 wei\n      args caller, address(this.address), amount\n  require ext_call.success\n  require ext_call.return_data[0]\n  require amount + balance[address(token)][caller] >= balance[address(token)][caller]\n  balance[address(token)][caller] += amount\n  log Deposit(\n        address token=address(token),\n        address user=caller,\n        uint256 amount=amount,\n        uint256 balance=amount + balance[address(token)][caller])\n\ndef transferForAdmin(address token, address account, uint256 amount): # not payable\n  if owner != caller:\n      require stor6[caller]\n  require token[address(token)]\n  require user[caller]\n  if not user[address(account)]:\n      userCount++\n      user[address(account)] = userCount + 1\n      userId2[stor14 + 1] = account\n      log NewUser(\n            address user=address(account),\n            uint256 id=userCount)\n  require amount <= balance[address(token)][caller]\n  balance[address(token)][caller] -= amount\n  require amount + balance[address(token)][account] >= balance[address(token)][account]\n  balance[address(token)][address(account)] = amount + balance[address(token)][account]\n\ndef cancelByAdmin(uint256[] inputs): # not payable\n  if owner != caller:\n      require stor6[caller]\n  require 1 < inputs.length\n  require Mask(32, 224, cd[(inputs + 68)]) >> 224 > userNonce[stor8[cd[(inputs + 68)] << 224]].field_0\n  require 0 < inputs.length\n  require 2 < inputs.length\n  require 3 < inputs.length\n  if not Mask(4, 156, cd[(inputs + 68)]):\n      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 36)], Mask(96, 160, cd[(inputs + 68)]))), 27, cd[(inputs + 100)], cd[(inputs + 132)]) # precompiled\n  else:\n      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 36)], Mask(96, 160, cd[(inputs + 68)]))), 28, cd[(inputs + 100)], cd[(inputs + 132)]) # precompiled\n  require erecover.result\n  require address(signer) == userId2[cd[(inputs + 68)] << 224]\n  if Mask(4, 160, cd[(inputs + 68)]) != 0x10000000000000000000000000000000000000000:\n      require balance[0][stor8[cd[(inputs + 68)] << 224]] >= cd[(inputs + 36)]\n      require cd[(inputs + 36)] <= balance[0][stor8[cd[(inputs + 68)] << 224]]\n      balance[0][stor8[cd[(inputs + 68)] << 224]] -= cd[(inputs + 36)]\n      require cd[(inputs + 36)] + balance[0][stor11] >= balance[0][stor11]\n      balance[0][stor11] += cd[(inputs + 36)]\n  else:\n      require balance[stor12][stor8[cd[(inputs + 68)] << 224]] >= cd[(inputs + 36)]\n      require cd[(inputs + 36)] <= balance[stor12][stor8[cd[(inputs + 68)] << 224]]\n      balance[stor12][stor8[cd[(inputs + 68)] << 224]] -= cd[(inputs + 36)]\n      require cd[(inputs + 36)] + balance[stor12][stor11] >= balance[stor12][stor11]\n      balance[stor12][stor11] += cd[(inputs + 36)]\n  userNonce[stor8[cd[(inputs + 68)] << 224]].field_0 = Mask(32, 224, cd[(inputs + 68)]) >> 224\n  userNonce[stor8[cd[(inputs + 68)] << 224]].field_32 = 0\n\ndef withdrawByAdmin_Unau(uint256[] inputs): # not payable\n  if owner != caller:\n      require stor6[caller]\n  require 0 < inputs.length\n  require 1 < inputs.length\n  require 2 < inputs.length\n  require not stor5[this.address][cd[(inputs + 36)]][cd[(inputs + 68)]][Mask(96, 160, cd[(inputs + 100)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]]\n  require 3 < inputs.length\n  require 4 < inputs.length\n  if not Mask(4, 156, cd[(inputs + 100)]):\n      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 36)], cd[(inputs + 68)], Mask(96, 160, cd[(inputs + 100)]) >> 160, tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208])), 27, cd[(inputs + 132)], cd[(inputs + 164)]) # precompiled\n  else:\n      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 36)], cd[(inputs + 68)], Mask(96, 160, cd[(inputs + 100)]) >> 160, tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208])), 28, cd[(inputs + 132)], cd[(inputs + 164)]) # precompiled\n  require erecover.result\n  require address(signer) == userId2[cd[(inputs + 100)] << 224]\n  if Mask(4, 160, cd[(inputs + 100)]) == 0x10000000000000000000000000000000000000000:\n      if joyTokenAddress == tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]:\n          require cd[(inputs + 68)] + cd[(inputs + 36)] >= cd[(inputs + 36)]\n          require cd[(inputs + 68)] + cd[(inputs + 36)] <= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]]\n          balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]] - cd[(inputs + 68)] - cd[(inputs + 36)]\n      else:\n          require cd[(inputs + 36)] <= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]]\n          balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]] -= cd[(inputs + 36)]\n          require cd[(inputs + 68)] <= balance[stor12][stor8[cd[(inputs + 100)] << 224]]\n          balance[stor12][stor8[cd[(inputs + 100)] << 224]] -= cd[(inputs + 68)]\n      require cd[(inputs + 68)] + balance[stor12][stor11] >= balance[stor12][stor11]\n      balance[stor12][stor11] += cd[(inputs + 68)]\n  else:\n      if Mask(4, 160, cd[(inputs + 100)]) != 0x20000000000000000000000000000000000000000:\n          if not tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]:\n              require cd[(inputs + 68)] + cd[(inputs + 36)] >= cd[(inputs + 36)]\n              require cd[(inputs + 68)] + cd[(inputs + 36)] <= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]]\n              balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]] - cd[(inputs + 68)] - cd[(inputs + 36)]\n          else:\n              require cd[(inputs + 36)] <= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]]\n              balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]] -= cd[(inputs + 36)]\n              require cd[(inputs + 68)] <= balance[0][stor8[cd[(inputs + 100)] << 224]]\n              balance[0][stor8[cd[(inputs + 100)] << 224]] -= cd[(inputs + 68)]\n          require cd[(inputs + 68)] + balance[0][stor11] >= balance[0][stor11]\n          balance[0][stor11] += cd[(inputs + 68)]\n      else:\n          if tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208] == tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]:\n              require cd[(inputs + 68)] + cd[(inputs + 36)] >= cd[(inputs + 36)]\n              require cd[(inputs + 68)] + cd[(inputs + 36)] <= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]]\n              balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]] - cd[(inputs + 68)] - cd[(inputs + 36)]\n          else:\n              require cd[(inputs + 36)] <= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]]\n              balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]] -= cd[(inputs + 36)]\n              require cd[(inputs + 68)] <= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]]\n              balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[(inputs + 100)] << 224]] -= cd[(inputs + 68)]\n          require cd[(inputs + 68)] + balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor11] >= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor11]\n          balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor11] += cd[(inputs + 68)]\n  stor5[this.address][cd[(inputs + 36)]][cd[(inputs + 68)]][Mask(96, 160, cd[(inputs + 100)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]] = 1\n  if not tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]:\n      call userId2[cd[(inputs + 100)] << 224] with:\n         value cd[(inputs + 36)] wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n  else:\n      require ext_code.size(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208])\n      call tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208].transfer(address recipient, uint256 amount) with:\n           gas gas_remaining - 710 wei\n          args userId2[cd[(inputs + 100)] << 224], cd[(inputs + 36)]\n      require ext_call.success\n      require ext_call.return_data[0]\n\ndef migrateByAdmin_DQV(uint256[] inputs) payable: \n  mem[64] = 96\n  require not call.value\n  if caller == owner:\n      require 2 < inputs.length\n      require 0 < inputs.length\n      s = 0\n      s = 0\n      t = 0\n      t = 0\n      t = 0\n      idx = 1\n      while idx < inputs.length:\n          require idx + 1 < inputs.length\n          mem[0] = uint32(cd[((32 * idx + 1) + inputs + 36)])\n          mem[32] = 8\n          mem[mem[64] + 52] = Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n          mem[mem[64] + 84] = address(cd[(inputs + 36)])\n          require idx + 2 < inputs.length\n          require idx + 3 < inputs.length\n          mem[mem[64]] = '\\x19Ethereum Signed Message:\\n32'\n          mem[mem[64] + 28] = sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)]))\n          if not Mask(4, 156, cd[((32 * idx + 1) + inputs + 36)]):\n              _431 = mem[64]\n              mem[64] = mem[64] + 32\n              mem[_431 + 32] = sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)])))\n              mem[_431 + 128] = cd[((32 * idx + 3) + inputs + 36)]\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)]))), 27, cd[((32 * idx + 2) + inputs + 36)], cd[((32 * idx + 3) + inputs + 36)]) # precompiled\n              mem[_431] = signer\n              require erecover.result\n              require address(signer) == userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n              if cd[((32 * idx) + inputs + 36)] <= 0:\n                  mem[0] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  mem[32] = sha3(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], 1)\n                  balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] = 0\n                  if not tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]:\n                      mem[_431 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                      mem[_431 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      mem[_431 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                      require ext_code.size(address(cd[(inputs + 36)]))\n                      call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                         value balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] wei\n                           gas gas_remaining - 9710 wei\n                          args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  else:\n                      require ext_code.size(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208])\n                      call tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208].approve(address spender, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args address(cd[(inputs + 36)]), balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      require ext_call.success\n                      mem[_431 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                      mem[_431 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      mem[_431 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                      require ext_code.size(address(cd[(inputs + 36)]))\n                      call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                           gas gas_remaining - 710 wei\n                          args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  mem[_431 + 32] = ext_call.return_data[0]\n                  require ext_call.success\n                  s = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  s = s\n                  t = sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)]))\n                  t = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  t = cd[((32 * idx) + inputs + 36)]\n                  idx = idx + 4\n                  continue \n              if Mask(4, 160, cd[((32 * idx + 1) + inputs + 36)]) == 0x10000000000000000000000000000000000000000:\n                  require cd[((32 * idx) + inputs + 36)] <= balance[stor12][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  balance[stor12][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] -= cd[((32 * idx) + inputs + 36)]\n                  require cd[((32 * idx) + inputs + 36)] + balance[stor12][stor11] >= balance[stor12][stor11]\n                  balance[stor12][stor11] += cd[((32 * idx) + inputs + 36)]\n              else:\n                  if Mask(4, 160, cd[((32 * idx + 1) + inputs + 36)]) != 0x20000000000000000000000000000000000000000:\n                      require cd[((32 * idx) + inputs + 36)] <= balance[0][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      balance[0][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] -= cd[((32 * idx) + inputs + 36)]\n                      require cd[((32 * idx) + inputs + 36)] + balance[0][stor11] >= balance[0][stor11]\n                      balance[0][stor11] += cd[((32 * idx) + inputs + 36)]\n                  else:\n                      require cd[((32 * idx) + inputs + 36)] <= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] -= cd[((32 * idx) + inputs + 36)]\n                      require cd[((32 * idx) + inputs + 36)] + balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor11] >= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor11]\n                      balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor11] += cd[((32 * idx) + inputs + 36)]\n              mem[0] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n              mem[32] = sha3(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], 1)\n              balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] = 0\n              if not tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]:\n                  mem[_431 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  mem[_431 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  mem[_431 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  require ext_code.size(address(cd[(inputs + 36)]))\n                  call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                     value balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] wei\n                       gas gas_remaining - 9710 wei\n                      args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n              else:\n                  require ext_code.size(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208])\n                  call tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208].approve(address spender, uint256 amount) with:\n                       gas gas_remaining - 710 wei\n                      args address(cd[(inputs + 36)]), balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  require ext_call.success\n                  mem[_431 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  mem[_431 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  mem[_431 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  require ext_code.size(address(cd[(inputs + 36)]))\n                  call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                       gas gas_remaining - 710 wei\n                      args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n              mem[_431 + 32] = ext_call.return_data[0]\n          else:\n              _438 = mem[64]\n              mem[64] = mem[64] + 32\n              mem[_438 + 32] = sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)])))\n              mem[_438 + 128] = cd[((32 * idx + 3) + inputs + 36)]\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)]))), 28, cd[((32 * idx + 2) + inputs + 36)], cd[((32 * idx + 3) + inputs + 36)]) # precompiled\n              mem[_438] = signer\n              require erecover.result\n              require address(signer) == userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n              if cd[((32 * idx) + inputs + 36)] <= 0:\n                  mem[0] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  mem[32] = sha3(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], 1)\n                  balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] = 0\n                  if not tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]:\n                      mem[_438 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                      mem[_438 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      mem[_438 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                      require ext_code.size(address(cd[(inputs + 36)]))\n                      call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                         value balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] wei\n                           gas gas_remaining - 9710 wei\n                          args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  else:\n                      require ext_code.size(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208])\n                      call tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208].approve(address spender, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args address(cd[(inputs + 36)]), balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      require ext_call.success\n                      mem[_438 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                      mem[_438 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      mem[_438 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                      require ext_code.size(address(cd[(inputs + 36)]))\n                      call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                           gas gas_remaining - 710 wei\n                          args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  mem[_438 + 32] = ext_call.return_data[0]\n                  require ext_call.success\n                  s = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  s = s\n                  t = sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)]))\n                  t = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  t = cd[((32 * idx) + inputs + 36)]\n                  idx = idx + 4\n                  continue \n              if Mask(4, 160, cd[((32 * idx + 1) + inputs + 36)]) == 0x10000000000000000000000000000000000000000:\n                  require cd[((32 * idx) + inputs + 36)] <= balance[stor12][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  balance[stor12][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] -= cd[((32 * idx) + inputs + 36)]\n                  require cd[((32 * idx) + inputs + 36)] + balance[stor12][stor11] >= balance[stor12][stor11]\n                  balance[stor12][stor11] += cd[((32 * idx) + inputs + 36)]\n              else:\n                  if Mask(4, 160, cd[((32 * idx + 1) + inputs + 36)]) != 0x20000000000000000000000000000000000000000:\n                      require cd[((32 * idx) + inputs + 36)] <= balance[0][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      balance[0][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] -= cd[((32 * idx) + inputs + 36)]\n                      require cd[((32 * idx) + inputs + 36)] + balance[0][stor11] >= balance[0][stor11]\n                      balance[0][stor11] += cd[((32 * idx) + inputs + 36)]\n                  else:\n                      require cd[((32 * idx) + inputs + 36)] <= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] -= cd[((32 * idx) + inputs + 36)]\n                      require cd[((32 * idx) + inputs + 36)] + balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor11] >= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor11]\n                      balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor11] += cd[((32 * idx) + inputs + 36)]\n              mem[0] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n              mem[32] = sha3(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], 1)\n              balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] = 0\n              if not tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]:\n                  mem[_438 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  mem[_438 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  mem[_438 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  require ext_code.size(address(cd[(inputs + 36)]))\n                  call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                     value balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] wei\n                       gas gas_remaining - 9710 wei\n                      args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n              else:\n                  require ext_code.size(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208])\n                  call tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208].approve(address spender, uint256 amount) with:\n                       gas gas_remaining - 710 wei\n                      args address(cd[(inputs + 36)]), balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  require ext_call.success\n                  mem[_438 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  mem[_438 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  mem[_438 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  require ext_code.size(address(cd[(inputs + 36)]))\n                  call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                       gas gas_remaining - 710 wei\n                      args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n              mem[_438 + 32] = ext_call.return_data[0]\n          require ext_call.success\n          s = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n          s = Mask(4, 160, cd[((32 * idx + 1) + inputs + 36)])\n          t = sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)]))\n          t = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n          t = cd[((32 * idx) + inputs + 36)]\n          idx = idx + 4\n          continue \n  else:\n      require stor6[caller]\n      require 2 < inputs.length\n      require 0 < inputs.length\n      s = 0\n      s = 0\n      t = 0\n      t = 0\n      t = 0\n      idx = 1\n      while idx < inputs.length:\n          require idx + 1 < inputs.length\n          mem[0] = uint32(cd[((32 * idx + 1) + inputs + 36)])\n          mem[32] = 8\n          mem[mem[64] + 52] = Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n          mem[mem[64] + 84] = address(cd[(inputs + 36)])\n          require idx + 2 < inputs.length\n          require idx + 3 < inputs.length\n          mem[mem[64]] = '\\x19Ethereum Signed Message:\\n32'\n          mem[mem[64] + 28] = sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)]))\n          if not Mask(4, 156, cd[((32 * idx + 1) + inputs + 36)]):\n              _445 = mem[64]\n              mem[64] = mem[64] + 32\n              mem[_445 + 32] = sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)])))\n              mem[_445 + 128] = cd[((32 * idx + 3) + inputs + 36)]\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)]))), 27, cd[((32 * idx + 2) + inputs + 36)], cd[((32 * idx + 3) + inputs + 36)]) # precompiled\n              mem[_445] = signer\n              require erecover.result\n              require address(signer) == userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n              if cd[((32 * idx) + inputs + 36)] <= 0:\n                  mem[0] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  mem[32] = sha3(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], 1)\n                  balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] = 0\n                  if not tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]:\n                      mem[_445 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                      mem[_445 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      mem[_445 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                      require ext_code.size(address(cd[(inputs + 36)]))\n                      call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                         value balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] wei\n                           gas gas_remaining - 9710 wei\n                          args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  else:\n                      require ext_code.size(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208])\n                      call tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208].approve(address spender, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args address(cd[(inputs + 36)]), balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      require ext_call.success\n                      mem[_445 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                      mem[_445 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      mem[_445 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                      require ext_code.size(address(cd[(inputs + 36)]))\n                      call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                           gas gas_remaining - 710 wei\n                          args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  mem[_445 + 32] = ext_call.return_data[0]\n                  require ext_call.success\n                  s = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  s = s\n                  t = sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)]))\n                  t = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  t = cd[((32 * idx) + inputs + 36)]\n                  idx = idx + 4\n                  continue \n              if Mask(4, 160, cd[((32 * idx + 1) + inputs + 36)]) == 0x10000000000000000000000000000000000000000:\n                  require cd[((32 * idx) + inputs + 36)] <= balance[stor12][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  balance[stor12][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] -= cd[((32 * idx) + inputs + 36)]\n                  require cd[((32 * idx) + inputs + 36)] + balance[stor12][stor11] >= balance[stor12][stor11]\n                  balance[stor12][stor11] += cd[((32 * idx) + inputs + 36)]\n              else:\n                  if Mask(4, 160, cd[((32 * idx + 1) + inputs + 36)]) != 0x20000000000000000000000000000000000000000:\n                      require cd[((32 * idx) + inputs + 36)] <= balance[0][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      balance[0][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] -= cd[((32 * idx) + inputs + 36)]\n                      require cd[((32 * idx) + inputs + 36)] + balance[0][stor11] >= balance[0][stor11]\n                      balance[0][stor11] += cd[((32 * idx) + inputs + 36)]\n                  else:\n                      require cd[((32 * idx) + inputs + 36)] <= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] -= cd[((32 * idx) + inputs + 36)]\n                      require cd[((32 * idx) + inputs + 36)] + balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor11] >= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor11]\n                      balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor11] += cd[((32 * idx) + inputs + 36)]\n              mem[0] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n              mem[32] = sha3(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], 1)\n              balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] = 0\n              if not tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]:\n                  mem[_445 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  mem[_445 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  mem[_445 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  require ext_code.size(address(cd[(inputs + 36)]))\n                  call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                     value balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] wei\n                       gas gas_remaining - 9710 wei\n                      args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n              else:\n                  require ext_code.size(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208])\n                  call tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208].approve(address spender, uint256 amount) with:\n                       gas gas_remaining - 710 wei\n                      args address(cd[(inputs + 36)]), balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  require ext_call.success\n                  mem[_445 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  mem[_445 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  mem[_445 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  require ext_code.size(address(cd[(inputs + 36)]))\n                  call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                       gas gas_remaining - 710 wei\n                      args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n              mem[_445 + 32] = ext_call.return_data[0]\n          else:\n              _452 = mem[64]\n              mem[64] = mem[64] + 32\n              mem[_452 + 32] = sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)])))\n              mem[_452 + 128] = cd[((32 * idx + 3) + inputs + 36)]\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)]))), 28, cd[((32 * idx + 2) + inputs + 36)], cd[((32 * idx + 3) + inputs + 36)]) # precompiled\n              mem[_452] = signer\n              require erecover.result\n              require address(signer) == userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n              if cd[((32 * idx) + inputs + 36)] <= 0:\n                  mem[0] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  mem[32] = sha3(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], 1)\n                  balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] = 0\n                  if not tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]:\n                      mem[_452 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                      mem[_452 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      mem[_452 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                      require ext_code.size(address(cd[(inputs + 36)]))\n                      call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                         value balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] wei\n                           gas gas_remaining - 9710 wei\n                          args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  else:\n                      require ext_code.size(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208])\n                      call tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208].approve(address spender, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args address(cd[(inputs + 36)]), balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      require ext_call.success\n                      mem[_452 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                      mem[_452 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      mem[_452 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                      require ext_code.size(address(cd[(inputs + 36)]))\n                      call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                           gas gas_remaining - 710 wei\n                          args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  mem[_452 + 32] = ext_call.return_data[0]\n                  require ext_call.success\n                  s = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  s = s\n                  t = sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)]))\n                  t = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  t = cd[((32 * idx) + inputs + 36)]\n                  idx = idx + 4\n                  continue \n              if Mask(4, 160, cd[((32 * idx + 1) + inputs + 36)]) == 0x10000000000000000000000000000000000000000:\n                  require cd[((32 * idx) + inputs + 36)] <= balance[stor12][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  balance[stor12][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] -= cd[((32 * idx) + inputs + 36)]\n                  require cd[((32 * idx) + inputs + 36)] + balance[stor12][stor11] >= balance[stor12][stor11]\n                  balance[stor12][stor11] += cd[((32 * idx) + inputs + 36)]\n              else:\n                  if Mask(4, 160, cd[((32 * idx + 1) + inputs + 36)]) != 0x20000000000000000000000000000000000000000:\n                      require cd[((32 * idx) + inputs + 36)] <= balance[0][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      balance[0][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] -= cd[((32 * idx) + inputs + 36)]\n                      require cd[((32 * idx) + inputs + 36)] + balance[0][stor11] >= balance[0][stor11]\n                      balance[0][stor11] += cd[((32 * idx) + inputs + 36)]\n                  else:\n                      require cd[((32 * idx) + inputs + 36)] <= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                      balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] -= cd[((32 * idx) + inputs + 36)]\n                      require cd[((32 * idx) + inputs + 36)] + balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor11] >= balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor11]\n                      balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor11] += cd[((32 * idx) + inputs + 36)]\n              mem[0] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n              mem[32] = sha3(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], 1)\n              balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] = 0\n              if not tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]:\n                  mem[_452 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  mem[_452 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  mem[_452 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  require ext_code.size(address(cd[(inputs + 36)]))\n                  call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                     value balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]] wei\n                       gas gas_remaining - 9710 wei\n                      args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n              else:\n                  require ext_code.size(tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208])\n                  call tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208].approve(address spender, uint256 amount) with:\n                       gas gas_remaining - 710 wei\n                      args address(cd[(inputs + 36)]), balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  require ext_call.success\n                  mem[_452 + 36] = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n                  mem[_452 + 68] = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n                  mem[_452 + 100] = tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n                  require ext_code.size(address(cd[(inputs + 36)]))\n                  call address(cd[(inputs + 36)]).migrate(address recipient, uint256 amount, address otherDeposit) with:\n                       gas gas_remaining - 710 wei\n                      args userId2[cd[((32 * idx + 1) + inputs + 36)] << 224], balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]], tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208]\n              mem[_452 + 32] = ext_call.return_data[0]\n          require ext_call.success\n          s = balance[stor7[Mask(16, 32, cd[(inputs + 100)]) << 208]][stor8[cd[((32 * idx + 1) + inputs + 36)] << 224]]\n          s = Mask(4, 160, cd[((32 * idx + 1) + inputs + 36)])\n          t = sha3(this.address, cd[((32 * idx) + inputs + 36)], Mask(96, 160, cd[((32 * idx + 1) + inputs + 36)]) or tokenId2[Mask(16, 32, cd[(inputs + 100)]) << 208], address(cd[(inputs + 36)]))\n          t = userId2[cd[((32 * idx + 1) + inputs + 36)] << 224]\n          t = cd[((32 * idx) + inputs + 36)]\n          idx = idx + 4\n          continue \n\ndef matchTokenOrderByAdmin_k44j(uint256[] inputs): # not payable\n  if caller == owner:\n      require 3 < inputs.length\n      require Mask(32, 224, cd[(inputs + 132)]) >> 224 > userNonce[stor8[cd[(inputs + 132)] << 224]].field_0\n      require 3 < inputs.length\n      mem[128 len 32 * inputs.length] = call.data[inputs + 36 len 32 * inputs.length]\n      require 3 < inputs.length\n      require 0 < inputs.length\n      require 1 < inputs.length\n      require 2 < inputs.length\n      require 3 < inputs.length\n      require 4 < inputs.length\n      require 5 < inputs.length\n      if Mask(4, 160, cd[(inputs + 132)]) != 0x10000000000000000000000000000000000000000:\n          if not Mask(4, 156, cd[(inputs + 132)]):\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, mem[128], mem[160], mem[192], Mask(96, 160, cd[(inputs + 132)]) >> 160, tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192], tokenId2[Mask(16, 32, cd[(inputs + 132)]) >> 32], Mask(92, 64, cd[(inputs + 132)]) >> 64)), 27, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n          else:\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, mem[128], mem[160], mem[192], Mask(96, 160, cd[(inputs + 132)]) >> 160, tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192], tokenId2[Mask(16, 32, cd[(inputs + 132)]) >> 32], Mask(92, 64, cd[(inputs + 132)]) >> 64)), 28, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n          require erecover.result\n          require address(signer) == userId2[cd[(inputs + 132)] << 224]\n          if 0x10000000000000000000000000000000000000000 == Mask(4, 160, cd[(inputs + 132)]):\n              require 1 < inputs.length\n              require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)]\n              require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n              if 6 >= inputs.length:\n                  if 0x10000000000000000000000000000000000000000 == Mask(4, 160, cd[(inputs + 132)]):\n                      require 1 < inputs.length\n                      require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)]\n                      require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                      require 2 < inputs.length\n                      require 3 < inputs.length\n                      if not orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]:\n                          if not tokenId2[Mask(16, 32, cd[(inputs + 132)]) >> 32]:\n                              if not Mask(28, 164, cd[(inputs + 132)]):\n                                  require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(28, 164, cd[(inputs + 132)]) >> 164:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if not Mask(92, 64, cd[(inputs + 132)]):\n                                  require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(92, 64, cd[(inputs + 132)]) >> 64:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if not tokenId2[Mask(16, 32, cd[(inputs + 132)]) >> 32]:\n                              if not Mask(28, 164, cd[(inputs + 132)]):\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(28, 164, cd[(inputs + 132)]) >> 164:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if not Mask(92, 64, cd[(inputs + 132)]):\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(92, 64, cd[(inputs + 132)]) >> 64:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert\n                  require 0 < inputs.length\n                  require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)]\n                  require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)] - cd[(inputs + 68)] + orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                  require 2 < inputs.length\n                  require 3 < inputs.length\n                  if not tokenId2[Mask(16, 32, cd[(inputs + 132)]) >> 32]:\n                      if Mask(28, 164, cd[(inputs + 132)]):\n                  else:\n                      if Mask(92, 64, cd[(inputs + 132)]):\n                  if not orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]:\n                  else:\n              else:\n                  require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if cd[(inputs + 36)]:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                      else:\n                          require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                  else:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if not cd[(inputs + 68)]:\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                      else:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n          else:\n              require 0 < inputs.length\n              require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)]\n              require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n              if 6 >= inputs.length:\n                  if 0x10000000000000000000000000000000000000000 == Mask(4, 160, cd[(inputs + 132)]):\n                      require 1 < inputs.length\n                      require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)]\n                      require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)] - cd[(inputs + 36)] + orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                      require 2 < inputs.length\n                      require 3 < inputs.length\n                      if not orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]:\n                          if not tokenId2[Mask(16, 32, cd[(inputs + 132)]) >> 32]:\n                              if not Mask(28, 164, cd[(inputs + 132)]):\n                                  require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(28, 164, cd[(inputs + 132)]) >> 164:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if not Mask(92, 64, cd[(inputs + 132)]):\n                                  require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(92, 64, cd[(inputs + 132)]) >> 64:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if not tokenId2[Mask(16, 32, cd[(inputs + 132)]) >> 32]:\n                              if not Mask(28, 164, cd[(inputs + 132)]):\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(28, 164, cd[(inputs + 132)]) >> 164:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if not Mask(92, 64, cd[(inputs + 132)]):\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(92, 64, cd[(inputs + 132)]) >> 64:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert\n                  require 0 < inputs.length\n                  require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)]\n                  require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                  require 2 < inputs.length\n                  require 3 < inputs.length\n                  if not tokenId2[Mask(16, 32, cd[(inputs + 132)]) >> 32]:\n                      if Mask(28, 164, cd[(inputs + 132)]):\n                  else:\n                      if Mask(92, 64, cd[(inputs + 132)]):\n                  if not orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]:\n                  else:\n              else:\n                  require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if cd[(inputs + 36)]:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                      else:\n                          require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                  else:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if not cd[(inputs + 68)]:\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                      else:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n      else:\n          if not Mask(4, 156, cd[(inputs + 132)]):\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, mem[128], mem[160], mem[192], Mask(96, 160, cd[(inputs + 132)]) >> 160, tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208], tokenId2[Mask(16, 48, cd[(inputs + 132)]) >> 48], Mask(92, 64, cd[(inputs + 132)]) >> 64)), 27, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n          else:\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, mem[128], mem[160], mem[192], Mask(96, 160, cd[(inputs + 132)]) >> 160, tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208], tokenId2[Mask(16, 48, cd[(inputs + 132)]) >> 48], Mask(92, 64, cd[(inputs + 132)]) >> 64)), 28, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n          require erecover.result\n          require address(signer) == userId2[cd[(inputs + 132)] << 224]\n          if 0x10000000000000000000000000000000000000000 == Mask(4, 160, cd[(inputs + 132)]):\n              require 1 < inputs.length\n              require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)]\n              require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n              if 6 >= inputs.length:\n                  if 0x10000000000000000000000000000000000000000 == Mask(4, 160, cd[(inputs + 132)]):\n                      require 1 < inputs.length\n                      require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)]\n                      require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                      require 2 < inputs.length\n                      require 3 < inputs.length\n                      if not orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]:\n                          if not tokenId2[Mask(16, 48, cd[(inputs + 132)]) >> 48]:\n                              if not Mask(28, 164, cd[(inputs + 132)]):\n                                  require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(28, 164, cd[(inputs + 132)]) >> 164:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if not Mask(92, 64, cd[(inputs + 132)]):\n                                  require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(92, 64, cd[(inputs + 132)]) >> 64:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if not tokenId2[Mask(16, 48, cd[(inputs + 132)]) >> 48]:\n                              if not Mask(28, 164, cd[(inputs + 132)]):\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(28, 164, cd[(inputs + 132)]) >> 164:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if not Mask(92, 64, cd[(inputs + 132)]):\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(92, 64, cd[(inputs + 132)]) >> 64:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert\n                  require 0 < inputs.length\n                  require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)]\n                  require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)] - cd[(inputs + 68)] + orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                  require 2 < inputs.length\n                  require 3 < inputs.length\n                  if not tokenId2[Mask(16, 48, cd[(inputs + 132)]) >> 48]:\n                      if Mask(28, 164, cd[(inputs + 132)]):\n                  else:\n                      if Mask(92, 64, cd[(inputs + 132)]):\n                  if not orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]:\n                  else:\n              else:\n                  require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if cd[(inputs + 36)]:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                      else:\n                          require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                  else:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if not cd[(inputs + 68)]:\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                      else:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n          else:\n              require 0 < inputs.length\n              require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)]\n              require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n              if 6 >= inputs.length:\n                  if 0x10000000000000000000000000000000000000000 == Mask(4, 160, cd[(inputs + 132)]):\n                      require 1 < inputs.length\n                      require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)]\n                      require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)] - cd[(inputs + 36)] + orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                      require 2 < inputs.length\n                      require 3 < inputs.length\n                      if not orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]:\n                          if not tokenId2[Mask(16, 48, cd[(inputs + 132)]) >> 48]:\n                              if not Mask(28, 164, cd[(inputs + 132)]):\n                                  require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(28, 164, cd[(inputs + 132)]) >> 164:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if not Mask(92, 64, cd[(inputs + 132)]):\n                                  require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(92, 64, cd[(inputs + 132)]) >> 64:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if not tokenId2[Mask(16, 48, cd[(inputs + 132)]) >> 48]:\n                              if not Mask(28, 164, cd[(inputs + 132)]):\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(28, 164, cd[(inputs + 132)]) >> 164:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if not Mask(92, 64, cd[(inputs + 132)]):\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if Mask(92, 64, cd[(inputs + 132)]) >> 64:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert\n                  require 0 < inputs.length\n                  require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)]\n                  require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                  require 2 < inputs.length\n                  require 3 < inputs.length\n                  if not tokenId2[Mask(16, 48, cd[(inputs + 132)]) >> 48]:\n                      if Mask(28, 164, cd[(inputs + 132)]):\n                  else:\n                      if Mask(92, 64, cd[(inputs + 132)]):\n                  if not orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]:\n                  else:\n              else:\n                  require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if cd[(inputs + 36)]:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                      else:\n                          require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                  else:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if not cd[(inputs + 68)]:\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                      else:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n  else:\n      require stor6[caller]\n      require 3 < inputs.length\n      require Mask(32, 224, cd[(inputs + 132)]) >> 224 > userNonce[stor8[cd[(inputs + 132)] << 224]].field_0\n      require 3 < inputs.length\n      mem[128 len 32 * inputs.length] = call.data[inputs + 36 len 32 * inputs.length]\n      require 3 < inputs.length\n      require 0 < inputs.length\n      require 1 < inputs.length\n      require 2 < inputs.length\n      require 3 < inputs.length\n      require 4 < inputs.length\n      require 5 < inputs.length\n      if Mask(4, 160, cd[(inputs + 132)]) != 0x10000000000000000000000000000000000000000:\n          if not Mask(4, 156, cd[(inputs + 132)]):\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, mem[128], mem[160], mem[192], Mask(96, 160, cd[(inputs + 132)]) >> 160, tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192], tokenId2[Mask(16, 32, cd[(inputs + 132)]) >> 32], Mask(92, 64, cd[(inputs + 132)]) >> 64)), 27, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n          else:\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, mem[128], mem[160], mem[192], Mask(96, 160, cd[(inputs + 132)]) >> 160, tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192], tokenId2[Mask(16, 32, cd[(inputs + 132)]) >> 32], Mask(92, 64, cd[(inputs + 132)]) >> 64)), 28, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n          require erecover.result\n          require address(signer) == userId2[cd[(inputs + 132)] << 224]\n          if 0x10000000000000000000000000000000000000000 == Mask(4, 160, cd[(inputs + 132)]):\n              require 1 < inputs.length\n              require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)]\n              require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n              if 6 >= inputs.length:\n                  if Mask(4, 160, cd[(inputs + 132)]) != 0x10000000000000000000000000000000000000000:\n                      require 0 < inputs.length\n                      require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)]\n                      require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)] - cd[(inputs + 68)] + orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                      require 2 < inputs.length\n                      require 3 < inputs.length\n                      if not tokenId2[Mask(16, 32, cd[(inputs + 132)]) >> 32]:\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                      else:\n                          if Mask(92, 64, cd[(inputs + 132)]):\n                  else:\n                      require 1 < inputs.length\n                      require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)]\n                      require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                      require 2 < inputs.length\n                      require 3 < inputs.length\n                      if not tokenId2[Mask(16, 32, cd[(inputs + 132)]) >> 32]:\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                      else:\n                          if Mask(92, 64, cd[(inputs + 132)]):\n                      if not orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]:\n                      else:\n              else:\n                  require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if cd[(inputs + 36)]:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                  else:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if not cd[(inputs + 68)]:\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                      require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                  require 9 < inputs.length\n                  require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                  require 9 < inputs.length\n                  require 6 < inputs.length\n          else:\n              require 0 < inputs.length\n              require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)]\n              require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n              if 6 >= inputs.length:\n                  if Mask(4, 160, cd[(inputs + 132)]) != 0x10000000000000000000000000000000000000000:\n                      require 0 < inputs.length\n                      require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)]\n                      require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                      require 2 < inputs.length\n                      require 3 < inputs.length\n                      if not tokenId2[Mask(16, 32, cd[(inputs + 132)]) >> 32]:\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                      else:\n                          if Mask(92, 64, cd[(inputs + 132)]):\n                  else:\n                      require 1 < inputs.length\n                      require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)]\n                      require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)] - cd[(inputs + 36)] + orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                      require 2 < inputs.length\n                      require 3 < inputs.length\n                      if not tokenId2[Mask(16, 32, cd[(inputs + 132)]) >> 32]:\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                      else:\n                          if Mask(92, 64, cd[(inputs + 132)]):\n                      if not orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64]:\n                      else:\n              else:\n                  require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor7[Mask(16, 32, cd[(inputs + 132)]) >> 32]][Mask(92, 64, cd[(inputs + 132)]) >> 64] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if cd[(inputs + 36)]:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                  else:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if not cd[(inputs + 68)]:\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                      require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                  require 9 < inputs.length\n                  require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                  require 9 < inputs.length\n                  require 6 < inputs.length\n      else:\n          if not Mask(4, 156, cd[(inputs + 132)]):\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, mem[128], mem[160], mem[192], Mask(96, 160, cd[(inputs + 132)]) >> 160, tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208], tokenId2[Mask(16, 48, cd[(inputs + 132)]) >> 48], Mask(92, 64, cd[(inputs + 132)]) >> 64)), 27, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n          else:\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, mem[128], mem[160], mem[192], Mask(96, 160, cd[(inputs + 132)]) >> 160, tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208], tokenId2[Mask(16, 48, cd[(inputs + 132)]) >> 48], Mask(92, 64, cd[(inputs + 132)]) >> 64)), 28, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n          require erecover.result\n          require address(signer) == userId2[cd[(inputs + 132)] << 224]\n          if 0x10000000000000000000000000000000000000000 == Mask(4, 160, cd[(inputs + 132)]):\n              require 1 < inputs.length\n              require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)]\n              require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n              if 6 >= inputs.length:\n                  if Mask(4, 160, cd[(inputs + 132)]) != 0x10000000000000000000000000000000000000000:\n                      require 0 < inputs.length\n                      require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)]\n                      require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)] - cd[(inputs + 68)] + orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                      require 2 < inputs.length\n                      require 3 < inputs.length\n                      if not tokenId2[Mask(16, 48, cd[(inputs + 132)]) >> 48]:\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                      else:\n                          if Mask(92, 64, cd[(inputs + 132)]):\n                  else:\n                      require 1 < inputs.length\n                      require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)]\n                      require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                      require 2 < inputs.length\n                      require 3 < inputs.length\n                      if not tokenId2[Mask(16, 48, cd[(inputs + 132)]) >> 48]:\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                      else:\n                          if Mask(92, 64, cd[(inputs + 132)]):\n                      if not orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]:\n                      else:\n              else:\n                  require cd[(inputs + 68)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if cd[(inputs + 36)]:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                  else:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if not cd[(inputs + 68)]:\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                      require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                  require 9 < inputs.length\n                  require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                  require 9 < inputs.length\n                  require 6 < inputs.length\n          else:\n              require 0 < inputs.length\n              require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)]\n              require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n              if 6 >= inputs.length:\n                  if Mask(4, 160, cd[(inputs + 132)]) != 0x10000000000000000000000000000000000000000:\n                      require 0 < inputs.length\n                      require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 36)]\n                      require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                      require 2 < inputs.length\n                      require 3 < inputs.length\n                      if not tokenId2[Mask(16, 48, cd[(inputs + 132)]) >> 48]:\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                      else:\n                          if Mask(92, 64, cd[(inputs + 132)]):\n                  else:\n                      require 1 < inputs.length\n                      require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)]\n                      require orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] <= cd[(inputs + 68)] - cd[(inputs + 36)] + orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]\n                      require 2 < inputs.length\n                      require 3 < inputs.length\n                      if not tokenId2[Mask(16, 48, cd[(inputs + 132)]) >> 48]:\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                      else:\n                          if Mask(92, 64, cd[(inputs + 132)]):\n                      if not orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64]:\n                      else:\n              else:\n                  require cd[(inputs + 36)] - orderFills[this.address][mem[128]][mem[160]][mem[192]][Mask(96, 160, cd[(inputs + 132)]) >> 160][stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor7[Mask(16, 48, cd[(inputs + 132)]) >> 48]][Mask(92, 64, cd[(inputs + 132)]) >> 64] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if cd[(inputs + 36)]:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                  else:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if not cd[(inputs + 68)]:\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 9 < inputs.length\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                      require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                  require 9 < inputs.length\n                  require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                  require 9 < inputs.length\n                  require 6 < inputs.length\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef matchByAdmin_TwH36(uint256[] inputs): # not payable\n  if caller == owner:\n      require 3 < inputs.length\n      require Mask(32, 224, cd[(inputs + 132)]) >> 224 > userNonce[stor8[cd[(inputs + 132)] << 224]].field_0\n      require 0 < inputs.length\n      require 1 < inputs.length\n      require 2 < inputs.length\n      require 4 < inputs.length\n      require 5 < inputs.length\n      if Mask(16, 48, cd[(inputs + 132)]) >> 48:\n          if not Mask(4, 156, cd[(inputs + 132)]):\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(address(this.address), address(cd[(inputs + 36)]), cd[(inputs + 68)], cd[(inputs + 100)], Mask(92, 164, cd[(inputs + 132)]) or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 27, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n              require erecover.result\n              require address(signer) == userId2[cd[(inputs + 132)] << 224]\n              require 0 < inputs.length\n              require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 36)]\n              require cd[(inputs + 36)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]]\n              if 6 >= inputs.length:\n                  require 0 < inputs.length\n                  require cd[(inputs + 36)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 36)]\n                  require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]]\n                  require 2 < inputs.length\n                  require 3 < inputs.length\n                  if orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]]:\n                      if not Mask(28, 164, cd[(inputs + 132)]):\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          require 0 <= balance[stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor8[cd[(inputs + 132)] << 224]]\n                      else:\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164 >= 0\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if not Mask(28, 164, cd[(inputs + 132)]):\n                              require 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          else:\n                  else:\n                      if Mask(28, 164, cd[(inputs + 132)]):\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) + cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if not Mask(28, 164, cd[(inputs + 132)]):\n                              require (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) + cd[(inputs + 100)] <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          else:\n                      else:\n                          require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                              require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          else:\n                              require cd[(inputs + 100)] <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                              balance[0][stor8[cd[(inputs + 132)] << 224]] -= cd[(inputs + 100)]\n                          require 0 <= balance[stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor8[cd[(inputs + 132)] << 224]]\n              else:\n                  require cd[(inputs + 36)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if not cd[(inputs + 36)]:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                  else:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if not cd[(inputs + 68)]:\n                          require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                      else:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                  require 9 < inputs.length\n                  require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                  require 6 < inputs.length\n                  require 7 < inputs.length\n                  require 8 < inputs.length\n                  require 10 < inputs.length\n                  require 11 < inputs.length\n                  if not Mask(4, 156, cd[(inputs + 324)]):\n                      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                  else:\n                      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                  require erecover.result\n                  require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                  require 6 < inputs.length\n                  require 7 < inputs.length\n                  require 8 < inputs.length\n                  require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 260)]\n                  require cd[(inputs + 260)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] > 0\n          else:\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(address(this.address), address(cd[(inputs + 36)]), cd[(inputs + 68)], cd[(inputs + 100)], Mask(92, 164, cd[(inputs + 132)]) or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 28, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n              require erecover.result\n              require address(signer) == userId2[cd[(inputs + 132)] << 224]\n              require 0 < inputs.length\n              require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 36)]\n              require cd[(inputs + 36)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]]\n              if 6 >= inputs.length:\n                  require 0 < inputs.length\n                  require cd[(inputs + 36)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 36)]\n                  require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]]\n                  require 2 < inputs.length\n                  require 3 < inputs.length\n                  if orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]]:\n                      if not Mask(28, 164, cd[(inputs + 132)]):\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if not Mask(28, 164, cd[(inputs + 132)]):\n                              require 0 <= balance[stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor8[cd[(inputs + 132)] << 224]]\n                          else:\n                      else:\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164 >= 0\n                          if not Mask(28, 164, cd[(inputs + 132)]):\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                  else:\n                      if Mask(28, 164, cd[(inputs + 132)]):\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) + cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          if not Mask(28, 164, cd[(inputs + 132)]):\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                      else:\n                          require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                              require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          else:\n                              require cd[(inputs + 100)] <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                              balance[0][stor8[cd[(inputs + 132)] << 224]] -= cd[(inputs + 100)]\n                              require 0 <= balance[stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor8[cd[(inputs + 132)] << 224]]\n              else:\n                  require cd[(inputs + 36)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if not cd[(inputs + 36)]:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                      require 9 < inputs.length\n                      require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                      require 6 < inputs.length\n                      require 7 < inputs.length\n                      require 8 < inputs.length\n                      require 10 < inputs.length\n                      require 11 < inputs.length\n                      if not Mask(4, 156, cd[(inputs + 324)]):\n                          signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                      else:\n                          signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                      require erecover.result\n                      require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                      require 6 < inputs.length\n                      require 7 < inputs.length\n                      require 8 < inputs.length\n                      require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 260)]\n                      require cd[(inputs + 260)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] > 0\n                  else:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if not cd[(inputs + 68)]:\n                          require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require 10 < inputs.length\n                          require 11 < inputs.length\n                          if not Mask(4, 156, cd[(inputs + 324)]):\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          else:\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          require erecover.result\n                          require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 260)]\n                          require cd[(inputs + 260)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] > 0\n                      else:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require 10 < inputs.length\n                          require 11 < inputs.length\n                          if Mask(4, 156, cd[(inputs + 324)]):\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                              require erecover.result\n                              require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                              require 6 < inputs.length\n                              require 7 < inputs.length\n                              require 8 < inputs.length\n                              require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 260)]\n                          else:\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                              require erecover.result\n                              require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                              require 6 < inputs.length\n                              require 7 < inputs.length\n                              require 8 < inputs.length\n                              require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 260)]\n                              require cd[(inputs + 260)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] > 0\n      else:\n          if not Mask(4, 156, cd[(inputs + 132)]):\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(address(this.address), address(cd[(inputs + 36)]), cd[(inputs + 68)], cd[(inputs + 100)], Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 27, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n              require erecover.result\n              require address(signer) == userId2[cd[(inputs + 132)] << 224]\n              require 1 < inputs.length\n              require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 68)]\n              require cd[(inputs + 68)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]]\n              if 6 >= inputs.length:\n                  require 1 < inputs.length\n                  require cd[(inputs + 68)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 68)]\n                  require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]]\n                  require 2 < inputs.length\n                  require 3 < inputs.length\n                  if not orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]]:\n                      if not Mask(28, 164, cd[(inputs + 132)]):\n                          require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                          else:\n                              require cd[(inputs + 100)] <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                              balance[0][stor8[cd[(inputs + 132)] << 224]] -= cd[(inputs + 100)]\n                          require balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]] >= balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]]\n                      else:\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) + cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                          else:\n                              require (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) + cd[(inputs + 100)] <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                              balance[0][stor8[cd[(inputs + 132)] << 224]] = balance[0][stor8[cd[(inputs + 132)] << 224]] - (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) - cd[(inputs + 100)]\n                  else:\n                      if not Mask(28, 164, cd[(inputs + 132)]):\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          require balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]] >= balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]]\n                      else:\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164 >= 0\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                          else:\n                              require 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                              balance[0][stor8[cd[(inputs + 132)] << 224]] -= 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164\n              else:\n                  require cd[(inputs + 68)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if not cd[(inputs + 36)]:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                  else:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if not cd[(inputs + 68)]:\n                          require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                      else:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                  require 9 < inputs.length\n                  require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                  require 6 < inputs.length\n                  require 7 < inputs.length\n                  require 8 < inputs.length\n                  require 10 < inputs.length\n                  require 11 < inputs.length\n                  if not Mask(4, 156, cd[(inputs + 324)]):\n                      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                  else:\n                      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                  require erecover.result\n                  require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                  require 6 < inputs.length\n                  require 7 < inputs.length\n                  require 8 < inputs.length\n                  require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 228)]\n                  require cd[(inputs + 228)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] > 0\n          else:\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(address(this.address), address(cd[(inputs + 36)]), cd[(inputs + 68)], cd[(inputs + 100)], Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 28, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n              require erecover.result\n              require address(signer) == userId2[cd[(inputs + 132)] << 224]\n              require 1 < inputs.length\n              require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 68)]\n              require cd[(inputs + 68)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]]\n              if 6 >= inputs.length:\n                  require 1 < inputs.length\n                  require cd[(inputs + 68)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 68)]\n                  require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]]\n                  require 2 < inputs.length\n                  require 3 < inputs.length\n                  if not orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]]:\n                      if not Mask(28, 164, cd[(inputs + 132)]):\n                          require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                          else:\n                              require cd[(inputs + 100)] <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                              balance[0][stor8[cd[(inputs + 132)] << 224]] -= cd[(inputs + 100)]\n                          require balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]] >= balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]]\n                      else:\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) + cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                          else:\n                              require (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) + cd[(inputs + 100)] <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                              balance[0][stor8[cd[(inputs + 132)] << 224]] = balance[0][stor8[cd[(inputs + 132)] << 224]] - (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) - cd[(inputs + 100)]\n                  else:\n                      if not Mask(28, 164, cd[(inputs + 132)]):\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          require balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]] >= balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]]\n                      else:\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164 >= 0\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                          else:\n                              require 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                              balance[0][stor8[cd[(inputs + 132)] << 224]] -= 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164\n              else:\n                  require cd[(inputs + 68)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if not cd[(inputs + 36)]:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                      require 9 < inputs.length\n                      require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                      require 6 < inputs.length\n                      require 7 < inputs.length\n                      require 8 < inputs.length\n                      require 10 < inputs.length\n                      require 11 < inputs.length\n                      if not Mask(4, 156, cd[(inputs + 324)]):\n                          signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                      else:\n                          signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                      require erecover.result\n                      require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                      require 6 < inputs.length\n                      require 7 < inputs.length\n                      require 8 < inputs.length\n                      require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 228)]\n                      require cd[(inputs + 228)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] > 0\n                  else:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if not cd[(inputs + 68)]:\n                          require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require 10 < inputs.length\n                          require 11 < inputs.length\n                          if not Mask(4, 156, cd[(inputs + 324)]):\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          else:\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          require erecover.result\n                          require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 228)]\n                          require cd[(inputs + 228)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] > 0\n                      else:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require 10 < inputs.length\n                          require 11 < inputs.length\n                          if Mask(4, 156, cd[(inputs + 324)]):\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                              require erecover.result\n                              require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                              require 6 < inputs.length\n                              require 7 < inputs.length\n                              require 8 < inputs.length\n                              require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 228)]\n                          else:\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                              require erecover.result\n                              require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                              require 6 < inputs.length\n                              require 7 < inputs.length\n                              require 8 < inputs.length\n                              require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 228)]\n                              require cd[(inputs + 228)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] > 0\n  else:\n      require stor6[caller]\n      require 3 < inputs.length\n      require Mask(32, 224, cd[(inputs + 132)]) >> 224 > userNonce[stor8[cd[(inputs + 132)] << 224]].field_0\n      require 0 < inputs.length\n      require 1 < inputs.length\n      require 2 < inputs.length\n      require 4 < inputs.length\n      require 5 < inputs.length\n      if Mask(16, 48, cd[(inputs + 132)]) >> 48:\n          if Mask(4, 156, cd[(inputs + 132)]):\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(address(this.address), address(cd[(inputs + 36)]), cd[(inputs + 68)], cd[(inputs + 100)], Mask(92, 164, cd[(inputs + 132)]) or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 28, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n              require erecover.result\n              require address(signer) == userId2[cd[(inputs + 132)] << 224]\n              require 0 < inputs.length\n              require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 36)]\n              require cd[(inputs + 36)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]]\n              if 6 >= inputs.length:\n                  require 0 < inputs.length\n                  require cd[(inputs + 36)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 36)]\n                  require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]]\n                  require 2 < inputs.length\n                  require 3 < inputs.length\n                  if orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]]:\n                      if not Mask(28, 164, cd[(inputs + 132)]):\n                          if not Mask(28, 164, cd[(inputs + 132)]):\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                      else:\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164 >= 0\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                  else:\n                      if Mask(28, 164, cd[(inputs + 132)]):\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) + cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                      else:\n                          require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                              require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          else:\n                              require cd[(inputs + 100)] <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                              balance[0][stor8[cd[(inputs + 132)] << 224]] -= cd[(inputs + 100)]\n              else:\n                  require cd[(inputs + 36)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if cd[(inputs + 36)]:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require 10 < inputs.length\n                          require 11 < inputs.length\n                          if Mask(4, 156, cd[(inputs + 324)]):\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          else:\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          require erecover.result\n                          require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 260)]\n                      else:\n                          require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require 10 < inputs.length\n                          require 11 < inputs.length\n                          if not Mask(4, 156, cd[(inputs + 324)]):\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          else:\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          require erecover.result\n                          require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 260)]\n                          require cd[(inputs + 260)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] > 0\n                  else:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                      require 9 < inputs.length\n                      require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                      require 6 < inputs.length\n                      require 7 < inputs.length\n                      require 8 < inputs.length\n                      require 10 < inputs.length\n                      require 11 < inputs.length\n                      if not Mask(4, 156, cd[(inputs + 324)]):\n                          signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                      else:\n                          signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                      require erecover.result\n                      require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                      require 6 < inputs.length\n                      require 7 < inputs.length\n                      require 8 < inputs.length\n                      require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 260)]\n                      require cd[(inputs + 260)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] > 0\n          else:\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(address(this.address), address(cd[(inputs + 36)]), cd[(inputs + 68)], cd[(inputs + 100)], Mask(92, 164, cd[(inputs + 132)]) or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 27, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n              require erecover.result\n              require address(signer) == userId2[cd[(inputs + 132)] << 224]\n              require 0 < inputs.length\n              require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 36)]\n              require cd[(inputs + 36)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]]\n              if 6 >= inputs.length:\n                  require 0 < inputs.length\n                  require cd[(inputs + 36)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 36)]\n                  require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]]\n                  require 2 < inputs.length\n                  require 3 < inputs.length\n                  if orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]]:\n                      if not Mask(28, 164, cd[(inputs + 132)]):\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if not Mask(28, 164, cd[(inputs + 132)]):\n                              require 0 <= balance[stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor8[cd[(inputs + 132)] << 224]]\n                          else:\n                      else:\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164 >= 0\n                          if not Mask(28, 164, cd[(inputs + 132)]):\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                  else:\n                      if Mask(28, 164, cd[(inputs + 132)]):\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) + cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          if not Mask(28, 164, cd[(inputs + 132)]):\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                      else:\n                          require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          require balance[0][stor8[cd[(inputs + 132)] << 224]] >= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                              require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          else:\n                              require cd[(inputs + 100)] <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                              balance[0][stor8[cd[(inputs + 132)] << 224]] -= cd[(inputs + 100)]\n                              require 0 <= balance[stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]][stor8[cd[(inputs + 132)] << 224]]\n              else:\n                  require cd[(inputs + 36)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if not cd[(inputs + 36)]:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                      require 9 < inputs.length\n                      require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                      require 6 < inputs.length\n                      require 7 < inputs.length\n                      require 8 < inputs.length\n                      require 10 < inputs.length\n                      require 11 < inputs.length\n                      if not Mask(4, 156, cd[(inputs + 324)]):\n                          signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                      else:\n                          signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                      require erecover.result\n                      require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                      require 6 < inputs.length\n                      require 7 < inputs.length\n                      require 8 < inputs.length\n                      require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 260)]\n                      require cd[(inputs + 260)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] > 0\n                  else:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if not cd[(inputs + 68)]:\n                          require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require 10 < inputs.length\n                          require 11 < inputs.length\n                          if not Mask(4, 156, cd[(inputs + 324)]):\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          else:\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          require erecover.result\n                          require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 260)]\n                          require cd[(inputs + 260)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] > 0\n                      else:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require 10 < inputs.length\n                          require 11 < inputs.length\n                          if Mask(4, 156, cd[(inputs + 324)]):\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                              require erecover.result\n                              require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                              require 6 < inputs.length\n                              require 7 < inputs.length\n                              require 8 < inputs.length\n                              require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 260)]\n                          else:\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 48, cd[(inputs + 132)]) << 192])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                              require erecover.result\n                              require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                              require 6 < inputs.length\n                              require 7 < inputs.length\n                              require 8 < inputs.length\n                              require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] <= cd[(inputs + 260)]\n                              require cd[(inputs + 260)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 48, cd[(inputs + 132)]) << 192]] > 0\n      else:\n          if Mask(4, 156, cd[(inputs + 132)]):\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(address(this.address), address(cd[(inputs + 36)]), cd[(inputs + 68)], cd[(inputs + 100)], Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 28, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n              require erecover.result\n              require address(signer) == userId2[cd[(inputs + 132)] << 224]\n              require 1 < inputs.length\n              require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 68)]\n              require cd[(inputs + 68)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]]\n              if 6 >= inputs.length:\n                  require 1 < inputs.length\n                  require cd[(inputs + 68)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 68)]\n                  require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]]\n                  require 2 < inputs.length\n                  require 3 < inputs.length\n                  if orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]]:\n                      if not Mask(28, 164, cd[(inputs + 132)]):\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          require balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]] >= balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]]\n                      else:\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164 >= 0\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                          else:\n                              require 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                  else:\n                      if Mask(28, 164, cd[(inputs + 132)]):\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) + cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                          else:\n                              require (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) + cd[(inputs + 100)] <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                      else:\n                          require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                          else:\n                              require cd[(inputs + 100)] <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                              balance[0][stor8[cd[(inputs + 132)] << 224]] -= cd[(inputs + 100)]\n                          require balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]] >= balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]]\n              else:\n                  require cd[(inputs + 68)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if cd[(inputs + 36)]:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require 10 < inputs.length\n                          require 11 < inputs.length\n                          if Mask(4, 156, cd[(inputs + 324)]):\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          else:\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          require erecover.result\n                          require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 228)]\n                      else:\n                          require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require 10 < inputs.length\n                          require 11 < inputs.length\n                          if not Mask(4, 156, cd[(inputs + 324)]):\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          else:\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          require erecover.result\n                          require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 228)]\n                          require cd[(inputs + 228)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] > 0\n                  else:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                      require 9 < inputs.length\n                      require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                      require 6 < inputs.length\n                      require 7 < inputs.length\n                      require 8 < inputs.length\n                      require 10 < inputs.length\n                      require 11 < inputs.length\n                      if not Mask(4, 156, cd[(inputs + 324)]):\n                          signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                      else:\n                          signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                      require erecover.result\n                      require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                      require 6 < inputs.length\n                      require 7 < inputs.length\n                      require 8 < inputs.length\n                      require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 228)]\n                      require cd[(inputs + 228)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] > 0\n          else:\n              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(address(this.address), address(cd[(inputs + 36)]), cd[(inputs + 68)], cd[(inputs + 100)], Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 27, cd[(inputs + 164)], cd[(inputs + 196)]) # precompiled\n              require erecover.result\n              require address(signer) == userId2[cd[(inputs + 132)] << 224]\n              require 1 < inputs.length\n              require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 68)]\n              require cd[(inputs + 68)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]]\n              if 6 >= inputs.length:\n                  require 1 < inputs.length\n                  require cd[(inputs + 68)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 68)]\n                  require orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]]\n                  require 2 < inputs.length\n                  require 3 < inputs.length\n                  if not orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]]:\n                      if not Mask(28, 164, cd[(inputs + 132)]):\n                          require cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                          else:\n                              require cd[(inputs + 100)] <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                              balance[0][stor8[cd[(inputs + 132)] << 224]] -= cd[(inputs + 100)]\n                          require balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]] >= balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]]\n                      else:\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) + cd[(inputs + 100)] >= cd[(inputs + 100)]\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                          else:\n                              require (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) + cd[(inputs + 100)] <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                              balance[0][stor8[cd[(inputs + 132)] << 224]] = balance[0][stor8[cd[(inputs + 132)] << 224]] - (0 / Mask(28, 164, cd[(inputs + 132)]) >> 164) - cd[(inputs + 100)]\n                  else:\n                      if not Mask(28, 164, cd[(inputs + 132)]):\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          require balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]] >= balance[stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]][stor8[cd[(inputs + 132)] << 224]]\n                      else:\n                          require Mask(28, 164, cd[(inputs + 132)]) >> 164\n                          require 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164 >= 0\n                          require 0 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                          if Mask(28, 164, cd[(inputs + 132)]):\n                          else:\n                              require 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164 <= balance[0][stor8[cd[(inputs + 132)] << 224]]\n                              balance[0][stor8[cd[(inputs + 132)] << 224]] -= 0 / Mask(28, 164, cd[(inputs + 132)]) >> 164\n              else:\n                  require cd[(inputs + 68)] - orderFills[address(this.address)][address(cd[(inputs + 36)])][cd[(inputs + 68)]][cd[(inputs + 100)]][Mask(92, 164, cd[(inputs + 132)]) or 0x10000000000000000000000000000000000000000 or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] > 0\n                  require 6 < inputs.length\n                  require 0 < inputs.length\n                  if not cd[(inputs + 36)]:\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if cd[(inputs + 68)]:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= 0\n                      require 9 < inputs.length\n                      require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                      require 6 < inputs.length\n                      require 7 < inputs.length\n                      require 8 < inputs.length\n                      require 10 < inputs.length\n                      require 11 < inputs.length\n                      if not Mask(4, 156, cd[(inputs + 324)]):\n                          signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                      else:\n                          signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                      require erecover.result\n                      require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                      require 6 < inputs.length\n                      require 7 < inputs.length\n                      require 8 < inputs.length\n                      require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 228)]\n                      require cd[(inputs + 228)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] > 0\n                  else:\n                      require cd[(inputs + 228)] * cd[(inputs + 36)] / cd[(inputs + 36)] == cd[(inputs + 228)]\n                      require 7 < inputs.length\n                      require 1 < inputs.length\n                      if not cd[(inputs + 68)]:\n                          require 0 <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require 10 < inputs.length\n                          require 11 < inputs.length\n                          if not Mask(4, 156, cd[(inputs + 324)]):\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          else:\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                          require erecover.result\n                          require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 228)]\n                          require cd[(inputs + 228)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] > 0\n                      else:\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] / cd[(inputs + 68)] == cd[(inputs + 260)]\n                          require cd[(inputs + 260)] * cd[(inputs + 68)] <= cd[(inputs + 228)] * cd[(inputs + 36)]\n                          require 9 < inputs.length\n                          require Mask(32, 224, cd[(inputs + 324)]) >> 224 > userNonce[stor8[cd[(inputs + 324)] << 224]].field_0\n                          require 6 < inputs.length\n                          require 7 < inputs.length\n                          require 8 < inputs.length\n                          require 10 < inputs.length\n                          require 11 < inputs.length\n                          if Mask(4, 156, cd[(inputs + 324)]):\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 28, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                              require erecover.result\n                              require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                              require 6 < inputs.length\n                              require 7 < inputs.length\n                              require 8 < inputs.length\n                              require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 228)]\n                          else:\n                              signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, cd[(inputs + 228)], cd[(inputs + 260)], cd[(inputs + 292)], Mask(92, 164, cd[(inputs + 324)]) or tokenId2[Mask(16, 32, cd[(inputs + 132)]) << 208])), 27, cd[(inputs + 356)], cd[(inputs + 388)]) # precompiled\n                              require erecover.result\n                              require address(signer) == userId2[cd[(inputs + 324)] << 224]\n                              require 6 < inputs.length\n                              require 7 < inputs.length\n                              require 8 < inputs.length\n                              require orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] <= cd[(inputs + 228)]\n                              require cd[(inputs + 228)] - orderFills[this.address][cd[(inputs + 228)]][cd[(inputs + 260)]][cd[(inputs + 292)]][Mask(92, 164, cd[(inputs + 324)]) or stor7[Mask(16, 32, cd[(inputs + 132)]) << 208]] > 0\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 60839 tokens. Please reduce the length of the messages."
}