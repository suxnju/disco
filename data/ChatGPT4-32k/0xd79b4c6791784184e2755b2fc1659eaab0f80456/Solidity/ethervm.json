{
	"address": "0xd79b4c6791784184e2755b2fc1659eaab0f80456",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the given decompiled EVM Bytecode, a Solidity version of the contract may look like this:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    mapping(address => uint256) public balances;\n    mapping(bytes32 => Data) public dataStore;\n    \n    struct Data {\n        uint256 balance;\n        uint256 data1;\n        uint256 blockNumber;\n        bytes32 data2;\n        uint256 data3;\n    }\n    \n    function serverSeed(address _address, bytes32 _data) public {\n        bytes32 key = keccak256(abi.encodePacked(_address));\n        dataStore[key].data2 = _data;\n    }\n    \n    function roll(uint256 _data1, bytes32 _data2) public payable {\n        require(_data1 >= 1 && _data1 <= 255, \"Data1 out of range\");\n        require(msg.value >= balances[address(0x03)], \"Insufficient value sent\");\n        \n        bytes32 key = keccak256(abi.encodePacked(msg.sender));\n        dataStore[key].balance = msg.value;\n        dataStore[key].data1 = _data1;\n        dataStore[key].blockNumber = block.number;\n        dataStore[key].data2 = _data2;\n        dataStore[key].data3 = 0;\n    }\n    \n    // ... other functions based on the decompiled bytecode\n}\n```\n\nPlease note that this is a simplified version of contract and may not cover all the functionalities of the original contract. This is due to the fact that decompiling EVM bytecode back into Solidity can be a complex task and might not always result in a perfect replication of the original contract. The contract provided above is based on the understanding of the decompiled code provided and an assumption of its purpose.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472077,
	"id": "chatcmpl-8Mukvd5oI25xqhJl83BUioVyI79lh",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) { stop(); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0;\n    \n        if (var0 == 0x021991e7) {\n            // Dispatch table entry for getBetsLocked()\n            var var1 = storage[0x00];\n        \n        label_034B:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x03750d94) {\n            // Dispatch table entry for serverSeed(address,bytes32)\n            var1 = 0x00f0;\n            var var2 = msg.data[0x04:0x24];\n            var var3 = msg.data[0x24:0x44];\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n        \n            if (msg.sender & temp2 == temp2 & storage[0x02]) {\n                func_044C(var2, var3);\n                stop();\n            } else {\n                func_011E(var2, var3);\n                stop();\n            }\n        } else if (var0 == 0x06b5f02d) {\n            // Dispatch table entry for calcWinnings(uint256,uint256)\n            var1 = ((msg.data[0x04:0x24] * 0x63) / 0x64 * 0x0100) / msg.data[0x24:0x44];\n            goto label_034B;\n        } else if (var0 == 0x0d1fce42) {\n            // Dispatch table entry for getBankroll()\n            var1 = 0x034b;\n            var2 = address(this).balance;\n            var1 = getMinimumBet(var2);\n            goto label_034B;\n        } else if (var0 == 0x0e1da6c3) {\n            // Dispatch table entry for claimTimeout()\n            var1 = 0x00f0;\n            var2 = 0x00;\n            var3 = 0x06ed;\n            var3 = canClaimTimeout();\n            func_06ED(var2, var3);\n            stop();\n        } else if (var0 == 0x0f06670a) {\n            // Dispatch table entry for didWin(bytes32)\n            var1 = 0x034b;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            memory[var3:var3 + 0x20] = msg.sender;\n            memory[0x20:0x40] = 0x04;\n            var var4 = keccak256(memory[var3:var3 + 0x40]);\n        \n            if (var3 != storage[var4 + 0x04]) {\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = var2;\n                var temp4 = memory[0x40:0x60];\n            \n                if (keccak256(memory[temp4:temp4 + temp3 - temp4 + 0x20]) != storage[var4 + 0x03]) { goto label_049F; }\n            \n                var temp5 = memory[0x40:0x60];\n                var temp6 = var4;\n                memory[temp5:temp5 + 0x20] = var2;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = storage[temp6 + 0x04];\n                var temp7 = memory[0x40:0x60];\n                var var5 = storage[temp6 + 0x01];\n                var var6 = 0x053d;\n                var var7 = keccak256(memory[temp7:temp7 + temp5 - temp7 + 0x40]);\n                var6 = hashTo256(var7);\n            \n                if (var6 >= var5) {\n                    var3 = 0x00;\n                \n                label_049F:\n                    var1 = var3;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var3 = 0x01;\n                    goto label_049F;\n                }\n            } else {\n                var1 = func_018C(var2, var3, var4);\n                goto label_034B;\n            }\n        } else if (var0 == 0x2d9a37d3) {\n            // Dispatch table entry for getMaxPayout()\n            var1 = 0x034b;\n            var2 = (address(this).balance * 0x05) / 0x64;\n            var1 = getMinimumBet(var2);\n            goto label_034B;\n        } else if (var0 == 0x2e1a7d4d) {\n            // Dispatch table entry for withdraw(uint256)\n            var1 = 0x00f0;\n            var2 = msg.data[0x04:0x24];\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n        \n            if (msg.sender & temp8 == temp8 & storage[0x01]) {\n                func_071A(var2);\n                stop();\n            } else {\n                func_06EA(var2);\n                // Error: Could not resolve method call return address!\n            }\n        } else if (var0 == 0x2fac1d36) {\n            // Dispatch table entry for isReadyFor(address)\n            var1 = 0x034b;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            memory[var3:var3 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n            var4 = keccak256(memory[var3:var3 + 0x40]);\n        \n            if (var3 == storage[var4 + 0x04]) { goto label_049F; }\n        \n            var1 = isReadyFor(var2, var3, var4);\n            goto label_034B;\n        } else if (var0 == 0x46b305d6) {\n            // Dispatch table entry for lockBetsForWithdraw()\n        label_01FE:\n            var1 = 0x00f0;\n            var2 = 0x00;\n            var temp9 = 0x02 ** 0xa0 - 0x01;\n        \n            if (msg.sender & temp9 == temp9 & storage[0x01]) {\n                func_06EA(var2);\n                stop();\n            } else {\n                func_06EA(var2);\n                // Error: Could not resolve method call return address!\n            }\n        } else if (var0 == 0x55b775ea) {\n            // Dispatch table entry for setFeed(address)\n            var1 = 0x00f0;\n            var2 = msg.data[0x04:0x24];\n            var temp10 = 0x02 ** 0xa0 - 0x01;\n        \n            if (msg.sender & temp10 == temp10 & storage[0x01]) {\n                func_06F8(var2);\n                stop();\n            } else {\n                func_0240(var2);\n                stop();\n            }\n        } else if (var0 == 0x839930ba) {\n            // Dispatch table entry for getMinimumBet()\n            var1 = 0x034b;\n            var2 = storage[0x03];\n            var1 = getMinimumBet(var2);\n            goto label_034B;\n        } else if (var0 == 0x8d216186) {\n            // Dispatch table entry for roll(uint256,bytes32)\n            var1 = 0x00f0;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = var2 < 0x01;\n        \n            if (var4) {\n                func_0267(var2, var3, var4);\n                stop();\n            } else {\n                var4 = var2 > 0xff;\n            \n                if (!var4) {\n                    var4 = msg.value < storage[0x03];\n                \n                    if (var4) { goto label_040A; }\n                    else { goto label_0279; }\n                } else if (var4) {\n                label_040A:\n                \n                    if (var4) {\n                        if (!var4) {\n                        label_035D:\n                            var temp11 = memory[0x40:0x60];\n                            memory[0x40:0x60] = temp11 + 0xa0;\n                            var temp12 = msg.value;\n                            memory[temp11:temp11 + 0x20] = temp12;\n                            var temp13 = temp11 + 0x20;\n                            var temp14 = var2;\n                            memory[temp13:temp13 + 0x20] = temp14;\n                            var temp15 = block.number;\n                            var temp16 = temp11 + 0x40;\n                            memory[temp16:temp16 + 0x20] = temp15;\n                            var temp17 = temp11 + 0x60;\n                            memory[temp17:temp17 + 0x20] = var3;\n                            var temp18 = temp11 + 0x80;\n                            memory[temp18:temp18 + 0x20] = 0x00;\n                            var temp19 = msg.sender;\n                            memory[0x00:0x20] = temp19 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x04;\n                            var temp20 = keccak256(memory[0x00:0x40]);\n                            storage[temp20] = memory[temp11:temp11 + 0x20];\n                            storage[temp20 + 0x01] = memory[temp13:temp13 + 0x20];\n                            storage[temp20 + 0x02] = memory[temp16:temp16 + 0x20];\n                            storage[temp20 + 0x03] = memory[temp17:temp17 + 0x20];\n                            storage[temp20 + 0x04] = memory[temp18:temp18 + 0x20];\n                            var temp21 = memory[0x40:0x60];\n                            memory[temp21:temp21 + 0x20] = temp15;\n                            memory[temp21 + 0x20:temp21 + 0x20 + 0x20] = temp12;\n                            memory[temp21 + 0x40:temp21 + 0x40 + 0x20] = temp14;\n                            var temp22 = memory[0x40:0x60];\n                            log(memory[temp22:temp22 + temp21 - temp22 + 0x60], [0x97371a3349bea11f577edf6e64350a3dfb9de665d1154c7e6d08eb0805aa0430, msg.sender]);\n                        \n                        label_0404:\n                            // Error: Could not resolve jump destination!\n                        } else {\n                        label_041D:\n                            var temp23 = memory[0x40:0x60];\n                            memory[temp23:temp23 + 0x00] = address(msg.sender).call.gas(0x00).value(msg.value)(memory[temp23:temp23 + 0x00]);\n                            goto label_0404;\n                        }\n                    } else if (storage[0x00] == 0x00) { goto label_035D; }\n                    else { goto label_041D; }\n                } else {\n                label_0279:\n                    var4 = 0x0442;\n                    var4 = func_0194();\n                    var5 = 0x0408;\n                    var6 = msg.value;\n                    var7 = var2;\n                    var5 = func_012C(var6, var7);\n                    var4 = var5 > var4;\n                    goto label_040A;\n                }\n            }\n        } else if (var0 == 0xa094a031) {\n            // Dispatch table entry for isReady()\n            var1 = 0x034b;\n            var2 = 0x00;\n            var3 = 0x0493;\n            var4 = msg.sender;\n            var3 = func_01D4(var4);\n            var1 = func_0493(var2, var3);\n            goto label_034B;\n        } else if (var0 == 0xa1b9af31) { goto label_01FE; }\n            // Dispatch table entry for unlockBets()\n        else if (var0 == 0xadd4c784) {\n            // Dispatch table entry for getResult(bytes32)\n            var1 = 0x034b;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            memory[var3:var3 + 0x20] = msg.sender;\n            memory[0x20:0x40] = 0x04;\n            var4 = keccak256(memory[var3:var3 + 0x40]);\n        \n            if (var3 != storage[var4 + 0x04]) {\n                var temp24 = memory[0x40:0x60];\n                memory[temp24:temp24 + 0x20] = var2;\n                var temp25 = memory[0x40:0x60];\n            \n                if (keccak256(memory[temp25:temp25 + temp24 - temp25 + 0x20]) != storage[var4 + 0x03]) { goto label_049F; }\n            \n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var2;\n                memory[temp26 + 0x20:temp26 + 0x20 + 0x20] = storage[var4 + 0x04];\n                var temp27 = memory[0x40:0x60];\n                var5 = 0x04eb;\n                var6 = keccak256(memory[temp27:temp27 + temp26 - temp27 + 0x40]);\n                var5 = hashTo256(var6);\n                var3 = var5;\n                goto label_049F;\n            } else {\n                var1 = func_02BB(var2, var3, var4);\n                goto label_034B;\n            }\n        } else if (var0 == 0xbd66528a) {\n            // Dispatch table entry for claim(bytes32)\n            var1 = 0x00f0;\n            var2 = msg.data[0x04:0x24];\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x04;\n            var3 = keccak256(memory[0x00:0x40]);\n        \n            if (storage[var3 + 0x04] != 0x00) {\n                func_0555(var2, var3);\n                stop();\n            } else {\n                func_02EC(var2, var3);\n                stop();\n            }\n        } else if (var0 == 0xc7cf28fe) {\n            // Dispatch table entry for canClaimTimeout()\n            var1 = 0x034b;\n            var1 = canClaimTimeout();\n            goto label_034B;\n        } else if (var0 == 0xcb96012e) {\n            // Dispatch table entry for hashTo256(bytes32)\n            var1 = 0x034b;\n            var2 = msg.data[0x04:0x24];\n            var1 = hashTo256(var2);\n            goto label_034B;\n        } else if (var0 == 0xd8389dc5) {\n            // Dispatch table entry for hash(bytes32)\n            var1 = 0x034b;\n            var2 = msg.data[0x04:0x24];\n            var temp28 = memory[0x40:0x60];\n            memory[temp28:temp28 + 0x20] = var2;\n            var temp29 = memory[0x40:0x60];\n            var3 = keccak256(memory[temp29:temp29 + temp28 - temp29 + 0x20]);\n            var1 = hash(var2, var3);\n            goto label_034B;\n        } else { stop(); }\n    }\n    \n    function getMinimumBet(var arg0) returns (var r0) { return arg0; }\n    \n    function func_011E(var arg0, var arg1) {}\n    \n    function func_012C(var arg0, var arg1) returns (var r0) { return ((arg0 * 0x63) / 0x64 * 0x0100) / arg1; }\n    \n    function func_018C(var arg0, var arg1, var arg2) returns (var r0) { return arg1; }\n    \n    function func_0194() returns (var r0) {\n        var var0 = (address(this).balance * 0x05) / 0x64;\n        r0 = getMinimumBet(var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_01D4(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var var1 = keccak256(memory[var0:var0 + 0x40]);\n    \n        if (var0 != storage[var1 + 0x04]) {\n            r0 = isReadyFor(arg0, var0, var1);\n            // Error: Could not resolve method call return address!\n        } else {\n        label_049F:\n            return var0;\n        }\n    }\n    \n    function func_0240(var arg0) {\n        func_06EA(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0267(var arg0, var arg1, var arg2) {\n        if (!arg2) {\n            arg2 = msg.value < storage[0x03];\n        \n            if (arg2) { goto label_040A; }\n            else { goto label_0279; }\n        } else if (arg2) {\n        label_040A:\n        \n            if (arg2) {\n                if (!arg2) {\n                label_035D:\n                    var temp0 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp0 + 0xa0;\n                    var temp1 = msg.value;\n                    memory[temp0:temp0 + 0x20] = temp1;\n                    var temp2 = temp0 + 0x20;\n                    var temp3 = arg0;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    var temp4 = block.number;\n                    var temp5 = temp0 + 0x40;\n                    memory[temp5:temp5 + 0x20] = temp4;\n                    var temp6 = temp0 + 0x60;\n                    memory[temp6:temp6 + 0x20] = arg1;\n                    var temp7 = temp0 + 0x80;\n                    memory[temp7:temp7 + 0x20] = 0x00;\n                    var temp8 = msg.sender;\n                    memory[0x00:0x20] = temp8;\n                    memory[0x20:0x40] = 0x04;\n                    var temp9 = keccak256(memory[0x00:0x40]);\n                    storage[temp9] = memory[temp0:temp0 + 0x20];\n                    storage[temp9 + 0x01] = memory[temp2:temp2 + 0x20];\n                    storage[temp9 + 0x02] = memory[temp5:temp5 + 0x20];\n                    storage[temp9 + 0x03] = memory[temp6:temp6 + 0x20];\n                    storage[temp9 + 0x04] = memory[temp7:temp7 + 0x20];\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = temp4;\n                    memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = temp1;\n                    memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = temp3;\n                    var temp11 = memory[0x40:0x60];\n                    log(memory[temp11:temp11 + temp10 - temp11 + 0x60], [0x97371a3349bea11f577edf6e64350a3dfb9de665d1154c7e6d08eb0805aa0430, msg.sender]);\n                \n                label_0404:\n                    return;\n                } else {\n                label_041D:\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x00] = address(msg.sender).call.gas(0x00).value(msg.value)(memory[temp12:temp12 + 0x00]);\n                    goto label_0404;\n                }\n            } else if (storage[0x00] == 0x00) { goto label_035D; }\n            else { goto label_041D; }\n        } else {\n        label_0279:\n            arg2 = 0x0442;\n            arg2 = func_0194();\n            var var0 = 0x0408;\n            var var1 = msg.value;\n            var var2 = arg0;\n            var0 = func_012C(var1, var2);\n            arg2 = var0 > arg2;\n            goto label_040A;\n        }\n    }\n    \n    function func_02BB(var arg0, var arg1, var arg2) returns (var r0) { return arg1; }\n    \n    function func_02EC(var arg0, var arg1) {}\n    \n    function canClaimTimeout() returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var var1 = keccak256(memory[var0:var0 + 0x40]);\n    \n        if (var0 != storage[var1 + 0x04]) { goto label_0667; }\n    \n        if (storage[var1] <= 0x00) {\n            var0 = 0x00;\n            goto label_0667;\n        } else if (block.number >= storage[var1 + 0x02] + 0x14) { return 0x01; }\n        else {\n            var0 = 0x00;\n        \n        label_0667:\n            return var0;\n        }\n    }\n    \n    function hashTo256(var arg0) returns (var r0) { return arg0 & 0xff; }\n    \n    function hash(var arg0, var arg1) returns (var r0) { return arg1; }\n    \n    function func_044C(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x04] == 0x00) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40]) + 0x04] = arg1;\n            return;\n        } else {\n            // Error: Could not resolve jump destination!\n        }\n    }\n    \n    function func_0493(var arg0, var arg1) returns (var r0) {\n        arg0 = arg1;\n        r0 = getMinimumBet(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function isReadyFor(var arg0, var arg1, var arg2) returns (var r0) { return 0x01; }\n    \n    function func_0555(var arg0, var arg1) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = arg0;\n        var temp1 = memory[0x40:0x60];\n    \n        if (keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x20]) == storage[arg1 + 0x03]) {\n            var temp2 = memory[0x40:0x60];\n            var temp3 = arg1;\n            memory[temp2:temp2 + 0x20] = arg0;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = storage[temp3 + 0x04];\n            var temp4 = memory[0x40:0x60];\n            var var0 = storage[temp3 + 0x01];\n            var var1 = 0x05a0;\n            var var2 = keccak256(memory[temp4:temp4 + temp2 - temp4 + 0x40]);\n            var1 = hashTo256(var2);\n        \n            if (var1 >= var0) {\n            label_062A:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x04;\n                var temp5 = keccak256(memory[0x00:0x40]);\n                storage[temp5] = 0x00;\n                storage[temp5 + 0x01] = 0x00;\n                storage[temp5 + 0x02] = 0x00;\n                storage[temp5 + 0x03] = 0x00;\n                storage[temp5 + 0x04] = 0x00;\n                return;\n            } else {\n                var temp6 = arg1;\n                var0 = msg.sender;\n                var1 = 0x00;\n                var var4 = storage[temp6];\n                var2 = 0x016345785d8a0000;\n                var var5 = storage[temp6 + 0x01];\n                var var3 = 0x05ce;\n                var3 = func_012C(var4, var5);\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x00] = address(var0).call.gas(var1).value(var3 - var2)(memory[temp7:temp7 + 0x00]);\n                var temp8 = arg1;\n                memory[temp7:temp7 + 0x20] = storage[temp8];\n                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = storage[temp8 + 0x01];\n                var temp9 = memory[0x40:0x60];\n                log(memory[temp9:temp9 + temp7 - temp9 + 0x40], [0xfdc49939175858b2bb557093a7d52fa6b6f3aad917d282d61758fab4805f102a, msg.sender]);\n                goto label_062A;\n            }\n        } else {\n            // Error: Could not resolve jump destination!\n        }\n    }\n    \n    function func_06EA(var arg0) {}\n    \n    function func_06ED(var arg0, var arg1) {\n        if (arg1) {\n            var temp0 = msg.sender;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x04;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = memory[0x40:0x60];\n            arg0 = temp1;\n            memory[temp2:temp2 + 0x00] = address(temp0).call.gas(0x00).value(storage[arg0])(memory[temp2:temp2 + 0x00]);\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x04;\n            storage[arg0] = 0x00;\n            storage[arg0 + 0x01] = 0x00;\n            storage[arg0 + 0x02] = 0x00;\n            storage[arg0 + 0x03] = 0x00;\n            storage[arg0 + 0x04] = 0x00;\n            func_06EA(arg0);\n            // Error: Could not resolve method call return address!\n        } else {\n            func_06EA(arg0);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_06F8(var arg0) {\n        storage[0x02] = arg0 | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_071A(var arg0) {\n        var var0 = storage[0x00] == 0x00;\n    \n        if (var0) {\n            if (!var0) {\n            label_0739:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x00] = address(storage[0x01] & 0x02 ** 0xa0 - 0x01).call.gas(0x00).value(arg0)(memory[temp0:temp0 + 0x00]);\n                return;\n            } else {\n            label_0735:\n                func_06EA(arg0);\n                // Error: Could not resolve method call return address!\n            }\n        } else if (block.number >= storage[0x00] + 0x1680) { goto label_0739; }\n        else { goto label_0735; }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) { stop(); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0;\n    \n        if (var0 == 0x021991e7) {\n            // Dispatch table entry for getBetsLocked()\n            var var1 = storage[0x00];\n        \n        label_034B:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x03750d94) {\n            // Dispatch table entry for serverSeed(address,bytes32)\n            var1 = 0x00f0;\n            var var2 = msg.data[0x04:0x24];\n            var var3 = msg.data[0x24:0x44];\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n        \n            if (msg.sender & temp2 == temp2 & storage[0x02]) {\n                func_044C(var2, var3);\n                stop();\n            } else {\n                func_011E(var2, var3);\n                stop();\n            }\n        } else if (var0 == 0x06b5f02d) {\n            // Dispatch table entry for calcWinnings(uint256,uint256)\n            var1 = ((msg.data[0x04:0x24] * 0x63) / 0x64 * 0x0100) / msg.data[0x24:0x44];\n            goto label_034B;\n        } else if (var0 == 0x0d1fce42) {\n            // Dispatch table entry for getBankroll()\n            var1 = 0x034b;\n            var2 = address(this).balance;\n            var1 = getMinimumBet(var2);\n            goto label_034B;\n        } else if (var0 == 0x0e1da6c3) {\n            // Dispatch table entry for claimTimeout()\n            var1 = 0x00f0;\n            var2 = 0x00;\n            var3 = 0x06ed;\n            var3 = canClaimTimeout();\n            func_06ED(var2, var3);\n            stop();\n        } else if (var0 == 0x0f06670a) {\n            // Dispatch table entry for didWin(bytes32)\n            var1 = 0x034b;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            memory[var3:var3 + 0x20] = msg.sender;\n            memory[0x20:0x40] = 0x04;\n            var var4 = keccak256(memory[var3:var3 + 0x40]);\n        \n            if (var3 != storage[var4 + 0x04]) {\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = var2;\n                var temp4 = memory[0x40:0x60];\n            \n                if (keccak256(memory[temp4:temp4 + temp3 - temp4 + 0x20]) != storage[var4 + 0x03]) { goto label_049F; }\n            \n                var temp5 = memory[0x40:0x60];\n                var temp6 = var4;\n                memory[temp5:temp5 + 0x20] = var2;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = storage[temp6 + 0x04];\n                var temp7 = memory[0x40:0x60];\n                var var5 = storage[temp6 + 0x01];\n                var var6 = 0x053d;\n                var var7 = keccak256(memory[temp7:temp7 + temp5 - temp7 + 0x40]);\n                var6 = hashTo256(var7);\n            \n                if (var6 >= var5) {\n                    var3 = 0x00;\n                \n                label_049F:\n                    var1 = var3;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var3 = 0x01;\n                    goto label_049F;\n                }\n            } else {\n                var1 = func_018C(var2, var3, var4);\n                goto label_034B;\n            }\n        } else if (var0 == 0x2d9a37d3) {\n            // Dispatch table entry for getMaxPayout()\n            var1 = 0x034b;\n            var2 = (address(this).balance * 0x05) / 0x64;\n            var1 = getMinimumBet(var2);\n            goto label_034B;\n        } else if (var0 == 0x2e1a7d4d) {\n            // Dispatch table entry for withdraw(uint256)\n            var1 = 0x00f0;\n            var2 = msg.data[0x04:0x24];\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n        \n            if (msg.sender & temp8 == temp8 & storage[0x01]) {\n                func_071A(var2);\n                stop();\n            } else {\n                func_06EA(var2);\n                // Error: Could not resolve method call return address!\n            }\n        } else if (var0 == 0x2fac1d36) {\n            // Dispatch table entry for isReadyFor(address)\n            var1 = 0x034b;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            memory[var3:var3 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n            var4 = keccak256(memory[var3:var3 + 0x40]);\n        \n            if (var3 == storage[var4 + 0x04]) { goto label_049F; }\n        \n            var1 = isReadyFor(var2, var3, var4);\n            goto label_034B;\n        } else if (var0 == 0x46b305d6) {\n            // Dispatch table entry for lockBetsForWithdraw()\n        label_01FE:\n            var1 = 0x00f0;\n            var2 = 0x00;\n            var temp9 = 0x02 ** 0xa0 - 0x01;\n        \n            if (msg.sender & temp9 == temp9 & storage[0x01]) {\n                func_06EA(var2);\n                stop();\n            } else {\n                func_06EA(var2);\n                // Error: Could not resolve method call return address!\n            }\n        } else if (var0 == 0x55b775ea) {\n            // Dispatch table entry for setFeed(address)\n            var1 = 0x00f0;\n            var2 = msg.data[0x04:0x24];\n            var temp10 = 0x02 ** 0xa0 - 0x01;\n        \n            if (msg.sender & temp10 == temp10 & storage[0x01]) {\n                func_06F8(var2);\n                stop();\n            } else {\n                func_0240(var2);\n                stop();\n            }\n        } else if (var0 == 0x839930ba) {\n            // Dispatch table entry for getMinimumBet()\n            var1 = 0x034b;\n            var2 = storage[0x03];\n            var1 = getMinimumBet(var2);\n            goto label_034B;\n        } else if (var0 == 0x8d216186) {\n            // Dispatch table entry for roll(uint256,bytes32)\n            var1 = 0x00f0;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = var2 < 0x01;\n        \n            if (var4) {\n                func_0267(var2, var3, var4);\n                stop();\n            } else {\n                var4 = var2 > 0xff;\n            \n                if (!var4) {\n                    var4 = msg.value < storage[0x03];\n                \n                    if (var4) { goto label_040A; }\n                    else { goto label_0279; }\n                } else if (var4) {\n                label_040A:\n                \n                    if (var4) {\n                        if (!var4) {\n                        label_035D:\n                            var temp11 = memory[0x40:0x60];\n                            memory[0x40:0x60] = temp11 + 0xa0;\n                            var temp12 = msg.value;\n                            memory[temp11:temp11 + 0x20] = temp12;\n                            var temp13 = temp11 + 0x20;\n                            var temp14 = var2;\n                            memory[temp13:temp13 + 0x20] = temp14;\n                            var temp15 = block.number;\n                            var temp16 = temp11 + 0x40;\n                            memory[temp16:temp16 + 0x20] = temp15;\n                            var temp17 = temp11 + 0x60;\n                            memory[temp17:temp17 + 0x20] = var3;\n                            var temp18 = temp11 + 0x80;\n                            memory[temp18:temp18 + 0x20] = 0x00;\n                            var temp19 = msg.sender;\n                            memory[0x00:0x20] = temp19 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x04;\n                            var temp20 = keccak256(memory[0x00:0x40]);\n                            storage[temp20] = memory[temp11:temp11 + 0x20];\n                            storage[temp20 + 0x01] = memory[temp13:temp13 + 0x20];\n                            storage[temp20 + 0x02] = memory[temp16:temp16 + 0x20];\n                            storage[temp20 + 0x03] = memory[temp17:temp17 + 0x20];\n                            storage[temp20 + 0x04] = memory[temp18:temp18 + 0x20];\n                            var temp21 = memory[0x40:0x60];\n                            memory[temp21:temp21 + 0x20] = temp15;\n                            memory[temp21 + 0x20:temp21 + 0x20 + 0x20] = temp12;\n                            memory[temp21 + 0x40:temp21 + 0x40 + 0x20] = temp14;\n                            var temp22 = memory[0x40:0x60];\n                            log(memory[temp22:temp22 + temp21 - temp22 + 0x60], [0x97371a3349bea11f577edf6e64350a3dfb9de665d1154c7e6d08eb0805aa0430, msg.sender]);\n                        \n                        label_0404:\n                            // Error: Could not resolve jump destination!\n                        } else {\n                        label_041D:\n                            var temp23 = memory[0x40:0x60];\n                            memory[temp23:temp23 + 0x00] = address(msg.sender).call.gas(0x00).value(msg.value)(memory[temp23:temp23 + 0x00]);\n                            goto label_0404;\n                        }\n                    } else if (storage[0x00] == 0x00) { goto label_035D; }\n                    else { goto label_041D; }\n                } else {\n                label_0279:\n                    var4 = 0x0442;\n                    var4 = func_0194();\n                    var5 = 0x0408;\n                    var6 = msg.value;\n                    var7 = var2;\n                    var5 = func_012C(var6, var7);\n                    var4 = var5 > var4;\n                    goto label_040A;\n                }\n            }\n        } else if (var0 == 0xa094a031) {\n            // Dispatch table entry for isReady()\n            var1 = 0x034b;\n            var2 = 0x00;\n            var3 = 0x0493;\n            var4 = msg.sender;\n            var3 = func_01D4(var4);\n            var1 = func_0493(var2, var3);\n            goto label_034B;\n        } else if (var0 == 0xa1b9af31) { goto label_01FE; }\n            // Dispatch table entry for unlockBets()\n        else if (var0 == 0xadd4c784) {\n            // Dispatch table entry for getResult(bytes32)\n            var1 = 0x034b;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            memory[var3:var3 + 0x20] = msg.sender;\n            memory[0x20:0x40] = 0x04;\n            var4 = keccak256(memory[var3:var3 + 0x40]);\n        \n            if (var3 != storage[var4 + 0x04]) {\n                var temp24 = memory[0x40:0x60];\n                memory[temp24:temp24 + 0x20] = var2;\n                var temp25 = memory[0x40:0x60];\n            \n                if (keccak256(memory[temp25:temp25 + temp24 - temp25 + 0x20]) != storage[var4 + 0x03]) { goto label_049F; }\n            \n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var2;\n                memory[temp26 + 0x20:temp26 + 0x20 + 0x20] = storage[var4 + 0x04];\n                var temp27 = memory[0x40:0x60];\n                var5 = 0x04eb;\n                var6 = keccak256(memory[temp27:temp27 + temp26 - temp27 + 0x40]);\n                var5 = hashTo256(var6);\n                var3 = var5;\n                goto label_049F;\n            } else {\n                var1 = func_02BB(var2, var3, var4);\n                goto label_034B;\n            }\n        } else if (var0 == 0xbd66528a) {\n            // Dispatch table entry for claim(bytes32)\n            var1 = 0x00f0;\n            var2 = msg.data[0x04:0x24];\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x04;\n            var3 = keccak256(memory[0x00:0x40]);\n        \n            if (storage[var3 + 0x04] != 0x00) {\n                func_0555(var2, var3);\n                stop();\n            } else {\n                func_02EC(var2, var3);\n                stop();\n            }\n        } else if (var0 == 0xc7cf28fe) {\n            // Dispatch table entry for canClaimTimeout()\n            var1 = 0x034b;\n            var1 = canClaimTimeout();\n            goto label_034B;\n        } else if (var0 == 0xcb96012e) {\n            // Dispatch table entry for hashTo256(bytes32)\n            var1 = 0x034b;\n            var2 = msg.data[0x04:0x24];\n            var1 = hashTo256(var2);\n            goto label_034B;\n        } else if (var0 == 0xd8389dc5) {\n            // Dispatch table entry for hash(bytes32)\n            var1 = 0x034b;\n            var2 = msg.data[0x04:0x24];\n            var temp28 = memory[0x40:0x60];\n            memory[temp28:temp28 + 0x20] = var2;\n            var temp29 = memory[0x40:0x60];\n            var3 = keccak256(memory[temp29:temp29 + temp28 - temp29 + 0x20]);\n            var1 = hash(var2, var3);\n            goto label_034B;\n        } else { stop(); }\n    }\n    \n    function getMinimumBet(var arg0) returns (var r0) { return arg0; }\n    \n    function func_011E(var arg0, var arg1) {}\n    \n    function func_012C(var arg0, var arg1) returns (var r0) { return ((arg0 * 0x63) / 0x64 * 0x0100) / arg1; }\n    \n    function func_018C(var arg0, var arg1, var arg2) returns (var r0) { return arg1; }\n    \n    function func_0194() returns (var r0) {\n        var var0 = (address(this).balance * 0x05) / 0x64;\n        r0 = getMinimumBet(var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_01D4(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var var1 = keccak256(memory[var0:var0 + 0x40]);\n    \n        if (var0 != storage[var1 + 0x04]) {\n            r0 = isReadyFor(arg0, var0, var1);\n            // Error: Could not resolve method call return address!\n        } else {\n        label_049F:\n            return var0;\n        }\n    }\n    \n    function func_0240(var arg0) {\n        func_06EA(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0267(var arg0, var arg1, var arg2) {\n        if (!arg2) {\n            arg2 = msg.value < storage[0x03];\n        \n            if (arg2) { goto label_040A; }\n            else { goto label_0279; }\n        } else if (arg2) {\n        label_040A:\n        \n            if (arg2) {\n                if (!arg2) {\n                label_035D:\n                    var temp0 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp0 + 0xa0;\n                    var temp1 = msg.value;\n                    memory[temp0:temp0 + 0x20] = temp1;\n                    var temp2 = temp0 + 0x20;\n                    var temp3 = arg0;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    var temp4 = block.number;\n                    var temp5 = temp0 + 0x40;\n                    memory[temp5:temp5 + 0x20] = temp4;\n                    var temp6 = temp0 + 0x60;\n                    memory[temp6:temp6 + 0x20] = arg1;\n                    var temp7 = temp0 + 0x80;\n                    memory[temp7:temp7 + 0x20] = 0x00;\n                    var temp8 = msg.sender;\n                    memory[0x00:0x20] = temp8;\n                    memory[0x20:0x40] = 0x04;\n                    var temp9 = keccak256(memory[0x00:0x40]);\n                    storage[temp9] = memory[temp0:temp0 + 0x20];\n                    storage[temp9 + 0x01] = memory[temp2:temp2 + 0x20];\n                    storage[temp9 + 0x02] = memory[temp5:temp5 + 0x20];\n                    storage[temp9 + 0x03] = memory[temp6:temp6 + 0x20];\n                    storage[temp9 + 0x04] = memory[temp7:temp7 + 0x20];\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = temp4;\n                    memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = temp1;\n                    memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = temp3;\n                    var temp11 = memory[0x40:0x60];\n                    log(memory[temp11:temp11 + temp10 - temp11 + 0x60], [0x97371a3349bea11f577edf6e64350a3dfb9de665d1154c7e6d08eb0805aa0430, msg.sender]);\n                \n                label_0404:\n                    return;\n                } else {\n                label_041D:\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x00] = address(msg.sender).call.gas(0x00).value(msg.value)(memory[temp12:temp12 + 0x00]);\n                    goto label_0404;\n                }\n            } else if (storage[0x00] == 0x00) { goto label_035D; }\n            else { goto label_041D; }\n        } else {\n        label_0279:\n            arg2 = 0x0442;\n            arg2 = func_0194();\n            var var0 = 0x0408;\n            var var1 = msg.value;\n            var var2 = arg0;\n            var0 = func_012C(var1, var2);\n            arg2 = var0 > arg2;\n            goto label_040A;\n        }\n    }\n    \n    function func_02BB(var arg0, var arg1, var arg2) returns (var r0) { return arg1; }\n    \n    function func_02EC(var arg0, var arg1) {}\n    \n    function canClaimTimeout() returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var var1 = keccak256(memory[var0:var0 + 0x40]);\n    \n        if (var0 != storage[var1 + 0x04]) { goto label_0667; }\n    \n        if (storage[var1] <= 0x00) {\n            var0 = 0x00;\n            goto label_0667;\n        } else if (block.number >= storage[var1 + 0x02] + 0x14) { return 0x01; }\n        else {\n            var0 = 0x00;\n        \n        label_0667:\n            return var0;\n        }\n    }\n    \n    function hashTo256(var arg0) returns (var r0) { return arg0 & 0xff; }\n    \n    function hash(var arg0, var arg1) returns (var r0) { return arg1; }\n    \n    function func_044C(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x04] == 0x00) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40]) + 0x04] = arg1;\n            return;\n        } else {\n            // Error: Could not resolve jump destination!\n        }\n    }\n    \n    function func_0493(var arg0, var arg1) returns (var r0) {\n        arg0 = arg1;\n        r0 = getMinimumBet(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function isReadyFor(var arg0, var arg1, var arg2) returns (var r0) { return 0x01; }\n    \n    function func_0555(var arg0, var arg1) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = arg0;\n        var temp1 = memory[0x40:0x60];\n    \n        if (keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x20]) == storage[arg1 + 0x03]) {\n            var temp2 = memory[0x40:0x60];\n            var temp3 = arg1;\n            memory[temp2:temp2 + 0x20] = arg0;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = storage[temp3 + 0x04];\n            var temp4 = memory[0x40:0x60];\n            var var0 = storage[temp3 + 0x01];\n            var var1 = 0x05a0;\n            var var2 = keccak256(memory[temp4:temp4 + temp2 - temp4 + 0x40]);\n            var1 = hashTo256(var2);\n        \n            if (var1 >= var0) {\n            label_062A:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x04;\n                var temp5 = keccak256(memory[0x00:0x40]);\n                storage[temp5] = 0x00;\n                storage[temp5 + 0x01] = 0x00;\n                storage[temp5 + 0x02] = 0x00;\n                storage[temp5 + 0x03] = 0x00;\n                storage[temp5 + 0x04] = 0x00;\n                return;\n            } else {\n                var temp6 = arg1;\n                var0 = msg.sender;\n                var1 = 0x00;\n                var var4 = storage[temp6];\n                var2 = 0x016345785d8a0000;\n                var var5 = storage[temp6 + 0x01];\n                var var3 = 0x05ce;\n                var3 = func_012C(var4, var5);\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x00] = address(var0).call.gas(var1).value(var3 - var2)(memory[temp7:temp7 + 0x00]);\n                var temp8 = arg1;\n                memory[temp7:temp7 + 0x20] = storage[temp8];\n                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = storage[temp8 + 0x01];\n                var temp9 = memory[0x40:0x60];\n                log(memory[temp9:temp9 + temp7 - temp9 + 0x40], [0xfdc49939175858b2bb557093a7d52fa6b6f3aad917d282d61758fab4805f102a, msg.sender]);\n                goto label_062A;\n            }\n        } else {\n            // Error: Could not resolve jump destination!\n        }\n    }\n    \n    function func_06EA(var arg0) {}\n    \n    function func_06ED(var arg0, var arg1) {\n        if (arg1) {\n            var temp0 = msg.sender;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x04;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = memory[0x40:0x60];\n            arg0 = temp1;\n            memory[temp2:temp2 + 0x00] = address(temp0).call.gas(0x00).value(storage[arg0])(memory[temp2:temp2 + 0x00]);\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x04;\n            storage[arg0] = 0x00;\n            storage[arg0 + 0x01] = 0x00;\n            storage[arg0 + 0x02] = 0x00;\n            storage[arg0 + 0x03] = 0x00;\n            storage[arg0 + 0x04] = 0x00;\n            func_06EA(arg0);\n            // Error: Could not resolve method call return address!\n        } else {\n            func_06EA(arg0);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_06F8(var arg0) {\n        storage[0x02] = arg0 | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_071A(var arg0) {\n        var var0 = storage[0x00] == 0x00;\n    \n        if (var0) {\n            if (!var0) {\n            label_0739:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x00] = address(storage[0x01] & 0x02 ** 0xa0 - 0x01).call.gas(0x00).value(arg0)(memory[temp0:temp0 + 0x00]);\n                return;\n            } else {\n            label_0735:\n                func_06EA(arg0);\n                // Error: Could not resolve method call return address!\n            }\n        } else if (block.number >= storage[0x00] + 0x1680) { goto label_0739; }\n        else { goto label_0735; }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) { stop(); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0;\n    \n        if (var0 == 0x021991e7) {\n            // Dispatch table entry for getBetsLocked()\n            var var1 = storage[0x00];\n        \n        label_034B:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x03750d94) {\n            // Dispatch table entry for serverSeed(address,bytes32)\n            var1 = 0x00f0;\n            var var2 = msg.data[0x04:0x24];\n            var var3 = msg.data[0x24:0x44];\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n        \n            if (msg.sender & temp2 == temp2 & storage[0x02]) {\n                func_044C(var2, var3);\n                stop();\n            } else {\n                func_011E(var2, var3);\n                stop();\n            }\n        } else if (var0 == 0x06b5f02d) {\n            // Dispatch table entry for calcWinnings(uint256,uint256)\n            var1 = ((msg.data[0x04:0x24] * 0x63) / 0x64 * 0x0100) / msg.data[0x24:0x44];\n            goto label_034B;\n        } else if (var0 == 0x0d1fce42) {\n            // Dispatch table entry for getBankroll()\n            var1 = 0x034b;\n            var2 = address(this).balance;\n            var1 = getMinimumBet(var2);\n            goto label_034B;\n        } else if (var0 == 0x0e1da6c3) {\n            // Dispatch table entry for claimTimeout()\n            var1 = 0x00f0;\n            var2 = 0x00;\n            var3 = 0x06ed;\n            var3 = canClaimTimeout();\n            func_06ED(var2, var3);\n            stop();\n        } else if (var0 == 0x0f06670a) {\n            // Dispatch table entry for didWin(bytes32)\n            var1 = 0x034b;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            memory[var3:var3 + 0x20] = msg.sender;\n            memory[0x20:0x40] = 0x04;\n            var var4 = keccak256(memory[var3:var3 + 0x40]);\n        \n            if (var3 != storage[var4 + 0x04]) {\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = var2;\n                var temp4 = memory[0x40:0x60];\n            \n                if (keccak256(memory[temp4:temp4 + temp3 - temp4 + 0x20]) != storage[var4 + 0x03]) { goto label_049F; }\n            \n                var temp5 = memory[0x40:0x60];\n                var temp6 = var4;\n                memory[temp5:temp5 + 0x20] = var2;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = storage[temp6 + 0x04];\n                var temp7 = memory[0x40:0x60];\n                var var5 = storage[temp6 + 0x01];\n                var var6 = 0x053d;\n                var var7 = keccak256(memory[temp7:temp7 + temp5 - temp7 + 0x40]);\n                var6 = hashTo256(var7);\n            \n                if (var6 >= var5) {\n                    var3 = 0x00;\n                \n                label_049F:\n                    var1 = var3;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var3 = 0x01;\n                    goto label_049F;\n                }\n            } else {\n                var1 = func_018C(var2, var3, var4);\n                goto label_034B;\n            }\n        } else if (var0 == 0x2d9a37d3) {\n            // Dispatch table entry for getMaxPayout()\n            var1 = 0x034b;\n            var2 = (address(this).balance * 0x05) / 0x64;\n            var1 = getMinimumBet(var2);\n            goto label_034B;\n        } else if (var0 == 0x2e1a7d4d) {\n            // Dispatch table entry for withdraw(uint256)\n            var1 = 0x00f0;\n            var2 = msg.data[0x04:0x24];\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n        \n            if (msg.sender & temp8 == temp8 & storage[0x01]) {\n                func_071A(var2);\n                stop();\n            } else {\n                func_06EA(var2);\n                // Error: Could not resolve method call return address!\n            }\n        } else if (var0 == 0x2fac1d36) {\n            // Dispatch table entry for isReadyFor(address)\n            var1 = 0x034b;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            memory[var3:var3 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n            var4 = keccak256(memory[var3:var3 + 0x40]);\n        \n            if (var3 == storage[var4 + 0x04]) { goto label_049F; }\n        \n            var1 = isReadyFor(var2, var3, var4);\n            goto label_034B;\n        } else if (var0 == 0x46b305d6) {\n            // Dispatch table entry for lockBetsForWithdraw()\n        label_01FE:\n            var1 = 0x00f0;\n            var2 = 0x00;\n            var temp9 = 0x02 ** 0xa0 - 0x01;\n        \n            if (msg.sender & temp9 == temp9 & storage[0x01]) {\n                func_06EA(var2);\n                stop();\n            } else {\n                func_06EA(var2);\n                // Error: Could not resolve method call return address!\n            }\n        } else if (var0 == 0x55b775ea) {\n            // Dispatch table entry for setFeed(address)\n            var1 = 0x00f0;\n            var2 = msg.data[0x04:0x24];\n            var temp10 = 0x02 ** 0xa0 - 0x01;\n        \n            if (msg.sender & temp10 == temp10 & storage[0x01]) {\n                func_06F8(var2);\n                stop();\n            } else {\n                func_0240(var2);\n                stop();\n            }\n        } else if (var0 == 0x839930ba) {\n            // Dispatch table entry for getMinimumBet()\n            var1 = 0x034b;\n            var2 = storage[0x03];\n            var1 = getMinimumBet(var2);\n            goto label_034B;\n        } else if (var0 == 0x8d216186) {\n            // Dispatch table entry for roll(uint256,bytes32)\n            var1 = 0x00f0;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = var2 < 0x01;\n        \n            if (var4) {\n                func_0267(var2, var3, var4);\n                stop();\n            } else {\n                var4 = var2 > 0xff;\n            \n                if (!var4) {\n                    var4 = msg.value < storage[0x03];\n                \n                    if (var4) { goto label_040A; }\n                    else { goto label_0279; }\n                } else if (var4) {\n                label_040A:\n                \n                    if (var4) {\n                        if (!var4) {\n                        label_035D:\n                            var temp11 = memory[0x40:0x60];\n                            memory[0x40:0x60] = temp11 + 0xa0;\n                            var temp12 = msg.value;\n                            memory[temp11:temp11 + 0x20] = temp12;\n                            var temp13 = temp11 + 0x20;\n                            var temp14 = var2;\n                            memory[temp13:temp13 + 0x20] = temp14;\n                            var temp15 = block.number;\n                            var temp16 = temp11 + 0x40;\n                            memory[temp16:temp16 + 0x20] = temp15;\n                            var temp17 = temp11 + 0x60;\n                            memory[temp17:temp17 + 0x20] = var3;\n                            var temp18 = temp11 + 0x80;\n                            memory[temp18:temp18 + 0x20] = 0x00;\n                            var temp19 = msg.sender;\n                            memory[0x00:0x20] = temp19 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x04;\n                            var temp20 = keccak256(memory[0x00:0x40]);\n                            storage[temp20] = memory[temp11:temp11 + 0x20];\n                            storage[temp20 + 0x01] = memory[temp13:temp13 + 0x20];\n                            storage[temp20 + 0x02] = memory[temp16:temp16 + 0x20];\n                            storage[temp20 + 0x03] = memory[temp17:temp17 + 0x20];\n                            storage[temp20 + 0x04] = memory[temp18:temp18 + 0x20];\n                            var temp21 = memory[0x40:0x60];\n                            memory[temp21:temp21 + 0x20] = temp15;\n                            memory[temp21 + 0x20:temp21 + 0x20 + 0x20] = temp12;\n                            memory[temp21 + 0x40:temp21 + 0x40 + 0x20] = temp14;\n                            var temp22 = memory[0x40:0x60];\n                            log(memory[temp22:temp22 + temp21 - temp22 + 0x60], [0x97371a3349bea11f577edf6e64350a3dfb9de665d1154c7e6d08eb0805aa0430, msg.sender]);\n                        \n                        label_0404:\n                            // Error: Could not resolve jump destination!\n                        } else {\n                        label_041D:\n                            var temp23 = memory[0x40:0x60];\n                            memory[temp23:temp23 + 0x00] = address(msg.sender).call.gas(0x00).value(msg.value)(memory[temp23:temp23 + 0x00]);\n                            goto label_0404;\n                        }\n                    } else if (storage[0x00] == 0x00) { goto label_035D; }\n                    else { goto label_041D; }\n                } else {\n                label_0279:\n                    var4 = 0x0442;\n                    var4 = func_0194();\n                    var5 = 0x0408;\n                    var6 = msg.value;\n                    var7 = var2;\n                    var5 = func_012C(var6, var7);\n                    var4 = var5 > var4;\n                    goto label_040A;\n                }\n            }\n        } else if (var0 == 0xa094a031) {\n            // Dispatch table entry for isReady()\n            var1 = 0x034b;\n            var2 = 0x00;\n            var3 = 0x0493;\n            var4 = msg.sender;\n            var3 = func_01D4(var4);\n            var1 = func_0493(var2, var3);\n            goto label_034B;\n        } else if (var0 == 0xa1b9af31) { goto label_01FE; }\n            // Dispatch table entry for unlockBets()\n        else if (var0 == 0xadd4c784) {\n            // Dispatch table entry for getResult(bytes32)\n            var1 = 0x034b;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            memory[var3:var3 + 0x20] = msg.sender;\n            memory[0x20:0x40] = 0x04;\n            var4 = keccak256(memory[var3:var3 + 0x40]);\n        \n            if (var3 != storage[var4 + 0x04]) {\n                var temp24 = memory[0x40:0x60];\n                memory[temp24:temp24 + 0x20] = var2;\n                var temp25 = memory[0x40:0x60];\n            \n                if (keccak256(memory[temp25:temp25 + temp24 - temp25 + 0x20]) != storage[var4 + 0x03]) { goto label_049F; }\n            \n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var2;\n                memory[temp26 + 0x20:temp26 + 0x20 + 0x20] = storage[var4 + 0x04];\n                var temp27 = memory[0x40:0x60];\n                var5 = 0x04eb;\n                var6 = keccak256(memory[temp27:temp27 + temp26 - temp27 + 0x40]);\n                var5 = hashTo256(var6);\n                var3 = var5;\n                goto label_049F;\n            } else {\n                var1 = func_02BB(var2, var3, var4);\n                goto label_034B;\n            }\n        } else if (var0 == 0xbd66528a) {\n            // Dispatch table entry for claim(bytes32)\n            var1 = 0x00f0;\n            var2 = msg.data[0x04:0x24];\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x04;\n            var3 = keccak256(memory[0x00:0x40]);\n        \n            if (storage[var3 + 0x04] != 0x00) {\n                func_0555(var2, var3);\n                stop();\n            } else {\n                func_02EC(var2, var3);\n                stop();\n            }\n        } else if (var0 == 0xc7cf28fe) {\n            // Dispatch table entry for canClaimTimeout()\n            var1 = 0x034b;\n            var1 = canClaimTimeout();\n            goto label_034B;\n        } else if (var0 == 0xcb96012e) {\n            // Dispatch table entry for hashTo256(bytes32)\n            var1 = 0x034b;\n            var2 = msg.data[0x04:0x24];\n            var1 = hashTo256(var2);\n            goto label_034B;\n        } else if (var0 == 0xd8389dc5) {\n            // Dispatch table entry for hash(bytes32)\n            var1 = 0x034b;\n            var2 = msg.data[0x04:0x24];\n            var temp28 = memory[0x40:0x60];\n            memory[temp28:temp28 + 0x20] = var2;\n            var temp29 = memory[0x40:0x60];\n            var3 = keccak256(memory[temp29:temp29 + temp28 - temp29 + 0x20]);\n            var1 = hash(var2, var3);\n            goto label_034B;\n        } else { stop(); }\n    }\n    \n    function getMinimumBet(var arg0) returns (var r0) { return arg0; }\n    \n    function func_011E(var arg0, var arg1) {}\n    \n    function func_012C(var arg0, var arg1) returns (var r0) { return ((arg0 * 0x63) / 0x64 * 0x0100) / arg1; }\n    \n    function func_018C(var arg0, var arg1, var arg2) returns (var r0) { return arg1; }\n    \n    function func_0194() returns (var r0) {\n        var var0 = (address(this).balance * 0x05) / 0x64;\n        r0 = getMinimumBet(var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_01D4(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var var1 = keccak256(memory[var0:var0 + 0x40]);\n    \n        if (var0 != storage[var1 + 0x04]) {\n            r0 = isReadyFor(arg0, var0, var1);\n            // Error: Could not resolve method call return address!\n        } else {\n        label_049F:\n            return var0;\n        }\n    }\n    \n    function func_0240(var arg0) {\n        func_06EA(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0267(var arg0, var arg1, var arg2) {\n        if (!arg2) {\n            arg2 = msg.value < storage[0x03];\n        \n            if (arg2) { goto label_040A; }\n            else { goto label_0279; }\n        } else if (arg2) {\n        label_040A:\n        \n            if (arg2) {\n                if (!arg2) {\n                label_035D:\n                    var temp0 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp0 + 0xa0;\n                    var temp1 = msg.value;\n                    memory[temp0:temp0 + 0x20] = temp1;\n                    var temp2 = temp0 + 0x20;\n                    var temp3 = arg0;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    var temp4 = block.number;\n                    var temp5 = temp0 + 0x40;\n                    memory[temp5:temp5 + 0x20] = temp4;\n                    var temp6 = temp0 + 0x60;\n                    memory[temp6:temp6 + 0x20] = arg1;\n                    var temp7 = temp0 + 0x80;\n                    memory[temp7:temp7 + 0x20] = 0x00;\n                    var temp8 = msg.sender;\n                    memory[0x00:0x20] = temp8;\n                    memory[0x20:0x40] = 0x04;\n                    var temp9 = keccak256(memory[0x00:0x40]);\n                    storage[temp9] = memory[temp0:temp0 + 0x20];\n                    storage[temp9 + 0x01] = memory[temp2:temp2 + 0x20];\n                    storage[temp9 + 0x02] = memory[temp5:temp5 + 0x20];\n                    storage[temp9 + 0x03] = memory[temp6:temp6 + 0x20];\n                    storage[temp9 + 0x04] = memory[temp7:temp7 + 0x20];\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = temp4;\n                    memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = temp1;\n                    memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = temp3;\n                    var temp11 = memory[0x40:0x60];\n                    log(memory[temp11:temp11 + temp10 - temp11 + 0x60], [0x97371a3349bea11f577edf6e64350a3dfb9de665d1154c7e6d08eb0805aa0430, msg.sender]);\n                \n                label_0404:\n                    return;\n                } else {\n                label_041D:\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x00] = address(msg.sender).call.gas(0x00).value(msg.value)(memory[temp12:temp12 + 0x00]);\n                    goto label_0404;\n                }\n            } else if (storage[0x00] == 0x00) { goto label_035D; }\n            else { goto label_041D; }\n        } else {\n        label_0279:\n            arg2 = 0x0442;\n            arg2 = func_0194();\n            var var0 = 0x0408;\n            var var1 = msg.value;\n            var var2 = arg0;\n            var0 = func_012C(var1, var2);\n            arg2 = var0 > arg2;\n            goto label_040A;\n        }\n    }\n    \n    function func_02BB(var arg0, var arg1, var arg2) returns (var r0) { return arg1; }\n    \n    function func_02EC(var arg0, var arg1) {}\n    \n    function canClaimTimeout() returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var var1 = keccak256(memory[var0:var0 + 0x40]);\n    \n        if (var0 != storage[var1 + 0x04]) { goto label_0667; }\n    \n        if (storage[var1] <= 0x00) {\n            var0 = 0x00;\n            goto label_0667;\n        } else if (block.number >= storage[var1 + 0x02] + 0x14) { return 0x01; }\n        else {\n            var0 = 0x00;\n        \n        label_0667:\n            return var0;\n        }\n    }\n    \n    function hashTo256(var arg0) returns (var r0) { return arg0 & 0xff; }\n    \n    function hash(var arg0, var arg1) returns (var r0) { return arg1; }\n    \n    function func_044C(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x04] == 0x00) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40]) + 0x04] = arg1;\n            return;\n        } else {\n            // Error: Could not resolve jump destination!\n        }\n    }\n    \n    function func_0493(var arg0, var arg1) returns (var r0) {\n        arg0 = arg1;\n        r0 = getMinimumBet(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function isReadyFor(var arg0, var arg1, var arg2) returns (var r0) { return 0x01; }\n    \n    function func_0555(var arg0, var arg1) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = arg0;\n        var temp1 = memory[0x40:0x60];\n    \n        if (keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x20]) == storage[arg1 + 0x03]) {\n            var temp2 = memory[0x40:0x60];\n            var temp3 = arg1;\n            memory[temp2:temp2 + 0x20] = arg0;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = storage[temp3 + 0x04];\n            var temp4 = memory[0x40:0x60];\n            var var0 = storage[temp3 + 0x01];\n            var var1 = 0x05a0;\n            var var2 = keccak256(memory[temp4:temp4 + temp2 - temp4 + 0x40]);\n            var1 = hashTo256(var2);\n        \n            if (var1 >= var0) {\n            label_062A:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x04;\n                var temp5 = keccak256(memory[0x00:0x40]);\n                storage[temp5] = 0x00;\n                storage[temp5 + 0x01] = 0x00;\n                storage[temp5 + 0x02] = 0x00;\n                storage[temp5 + 0x03] = 0x00;\n                storage[temp5 + 0x04] = 0x00;\n                return;\n            } else {\n                var temp6 = arg1;\n                var0 = msg.sender;\n                var1 = 0x00;\n                var var4 = storage[temp6];\n                var2 = 0x016345785d8a0000;\n                var var5 = storage[temp6 + 0x01];\n                var var3 = 0x05ce;\n                var3 = func_012C(var4, var5);\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x00] = address(var0).call.gas(var1).value(var3 - var2)(memory[temp7:temp7 + 0x00]);\n                var temp8 = arg1;\n                memory[temp7:temp7 + 0x20] = storage[temp8];\n                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = storage[temp8 + 0x01];\n                var temp9 = memory[0x40:0x60];\n                log(memory[temp9:temp9 + temp7 - temp9 + 0x40], [0xfdc49939175858b2bb557093a7d52fa6b6f3aad917d282d61758fab4805f102a, msg.sender]);\n                goto label_062A;\n            }\n        } else {\n            // Error: Could not resolve jump destination!\n        }\n    }\n    \n    function func_06EA(var arg0) {}\n    \n    function func_06ED(var arg0, var arg1) {\n        if (arg1) {\n            var temp0 = msg.sender;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x04;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = memory[0x40:0x60];\n            arg0 = temp1;\n            memory[temp2:temp2 + 0x00] = address(temp0).call.gas(0x00).value(storage[arg0])(memory[temp2:temp2 + 0x00]);\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x04;\n            storage[arg0] = 0x00;\n            storage[arg0 + 0x01] = 0x00;\n            storage[arg0 + 0x02] = 0x00;\n            storage[arg0 + 0x03] = 0x00;\n            storage[arg0 + 0x04] = 0x00;\n            func_06EA(arg0);\n            // Error: Could not resolve method call return address!\n        } else {\n            func_06EA(arg0);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_06F8(var arg0) {\n        storage[0x02] = arg0 | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_071A(var arg0) {\n        var var0 = storage[0x00] == 0x00;\n    \n        if (var0) {\n            if (!var0) {\n            label_0739:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x00] = address(storage[0x01] & 0x02 ** 0xa0 - 0x01).call.gas(0x00).value(arg0)(memory[temp0:temp0 + 0x00]);\n                return;\n            } else {\n            label_0735:\n                func_06EA(arg0);\n                // Error: Could not resolve method call return address!\n            }\n        } else if (block.number >= storage[0x00] + 0x1680) { goto label_0739; }\n        else { goto label_0735; }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 25.07272958755493,
	"usage": {
		"completion_tokens": 374,
		"prompt_tokens": 6750,
		"total_tokens": 7124
	}
}