{
	"address": "0xf0542ed44d268c85875b3b84b0e7ce0773e9aeef",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's the Solidity code corresponding to the decompiled EVM Bytecode:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Contract {\n    mapping(bytes32 => uint256) private storageData;\n    mapping(uint256 => address) private usersById;\n    mapping(uint256 => uint256) private lastUserId;\n    mapping(address => uint256[]) private positionsByAddress;\n    mapping(uint256 => uint256) private binaryUsers;\n    mapping(address => bool) private isUserExists;\n    mapping(uint256 => uint256) private LEVEL_PRICE;\n    mapping(uint256 => uint256) private LEVEL_SLOTS;\n    address private owner;\n    mapping(address => User) private users;\n    mapping(uint256 => uint256) private lastBinaryId;\n    \n    struct User {\n        uint256 id;\n        address referrer;\n        uint256[] levels;\n        mapping(uint256 => bool) activeLevels;\n    }\n\n    function registerUser(address userAddress, address referrer) public {\n        // implement registration logic\n    }\n\n    function func_02F5(uint256 arg0) private view returns (uint256) {\n        return storageData[keccak256(abi.encodePacked(arg0))];\n    }\n    \n    function EXTRA_SLOTS(uint256 arg0) private view returns (uint256) {\n        return storageData[keccak256(abi.encodePacked(arg0))];\n    }\n    \n    function lastUserId() private view returns (uint256) {\n        return lastUserId;\n    }\n    \n    function positionsByAddress(address userAddress, uint256 index) private view returns (uint256) {\n        return positionsByAddress[userAddress][index];\n    }\n    \n    function usersById(uint256 id) public view returns (address) {\n        return usersById[id];\n    }\n    \n    function binaryUsers(uint256 id) private view returns (uint256) {\n        return binaryUsers[id];\n    }\n    \n    function isUserExists(address userAddress) private view returns (bool) {\n        return isUserExists[userAddress];\n    }\n    \n    function LEVEL_PRICE(uint256 level) private view returns (uint256) {\n        return LEVEL_PRICE[level];\n    }\n    \n    function LEVEL_SLOTS(uint256 level) private view returns (uint256) {\n        return LEVEL_SLOTS[level];\n    }\n    \n    function owner() public view returns (address) {\n        return owner;\n    }\n    \n    function users(address userAddress) private view returns (User memory) {\n        return users[userAddress];\n    }\n    \n    function lastBinaryId() private view returns (uint256) {\n        return lastBinaryId;\n    }\n}\n```\n\nPlease note that the place holder `// implement registration logic` is used in the `registerUser` function. The logic for this function is not clear from the decompiled code and should be implemented based on your business rules.\n\nAlso, EVM bytecode doesn't contain any information about visibility of functions or variables, so the visibility (public / private) of functions and variables in the Solidity code is just an assumption.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473146,
	"id": "chatcmpl-8Mv2Ab4BaqW0W32HQ5NbPlHIL8jKh",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x0980e4fc) {\n            // Dispatch table entry for 0x0980e4fc (unknown)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var var2 = msg.data[0x04:0x24];\n            var2 = func_02F5(var2);\n        \n        label_0102:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var2;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x21d18a90) {\n            // Dispatch table entry for EXTRA_SLOTS(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = msg.data[0x04:0x24];\n            var2 = EXTRA_SLOTS(var2);\n            goto label_0102;\n        } else if (var0 == 0x322f62ba) {\n            // Dispatch table entry for reg(address)\n            var1 = 0x0140;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var var3 = 0x0323;\n            var var4 = msg.sender;\n            var var5 = var2;\n            reg(var4, var5);\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x348d4487) {\n            // Dispatch table entry for lastUserId()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = lastUserId();\n            goto label_0102;\n        } else if (var0 == 0x425ab577) {\n            // Dispatch table entry for positionsByAddress(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var2 = positionsByAddress(var2, var3);\n            goto label_0102;\n        } else if (var0 == 0x426b5382) {\n            // Dispatch table entry for usersById(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0193;\n            var2 = msg.data[0x04:0x24];\n            var2 = usersById(var2);\n        \n        label_0193:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n        } else if (var0 == 0x4b841f09) {\n            // Dispatch table entry for 0x4b841f09 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = func_0364();\n            goto label_0102;\n        } else if (var0 == 0x4f6a35c5) {\n            // Dispatch table entry for binaryUsers(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0193;\n            var2 = msg.data[0x04:0x24];\n            var2 = binaryUsers(var2);\n            goto label_0193;\n        } else if (var0 == 0x509222cd) {\n            // Dispatch table entry for isUserExists(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01fd;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = isUserExists(var2);\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = !!var1;\n            var temp5 = memory[0x40:0x60];\n            return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n        } else if (var0 == 0x5902795d) {\n            // Dispatch table entry for 0x5902795d (unknown)\n            var1 = 0x0140;\n            func_03A2();\n            stop();\n        } else if (var0 == 0x79378e30) {\n            // Dispatch table entry for LEVEL_PRICE(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = msg.data[0x04:0x24];\n            var2 = LEVEL_PRICE(var2);\n            goto label_0102;\n        } else if (var0 == 0x8cd582f4) {\n            // Dispatch table entry for LEVEL_SLOTS(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = msg.data[0x04:0x24];\n            var2 = LEVEL_SLOTS(var2);\n            goto label_0102;\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0193;\n            var2 = owner();\n            goto label_0193;\n        } else if (var0 == 0xa87430ba) {\n            // Dispatch table entry for users(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x027f;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var var6;\n            var var7;\n            var var8;\n            var2, var3, var4, var5, var6, var7, var8 = users(var2);\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var2;\n            memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n            memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = var4;\n            memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = var5;\n            memory[temp6 + 0x80:temp6 + 0x80 + 0x20] = var6;\n            memory[temp6 + 0xa0:temp6 + 0xa0 + 0x20] = var7;\n            memory[temp6 + 0xc0:temp6 + 0xc0 + 0x20] = var8;\n            var temp7 = memory[0x40:0x60];\n            return memory[temp7:temp7 + temp6 - temp7 + 0xe0];\n        } else if (var0 == 0xaf716270) {\n            // Dispatch table entry for 0xaf716270 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = func_04E5(var2);\n            goto label_0102;\n        } else if (var0 == 0xf16f0ef0) {\n            // Dispatch table entry for lastBinaryId()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = lastBinaryId();\n            goto label_0102;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_02F5(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function EXTRA_SLOTS(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function lastUserId() returns (var r0) { return storage[0x09]; }\n    \n    function positionsByAddress(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function usersById(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function func_0364() returns (var r0) { return storage[0x0b]; }\n    \n    function binaryUsers(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function isUserExists(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        return !!storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_03A2() {\n        if (msg.value == 0xb1a2bc2ec50000) {\n            var var0 = 0x0409;\n            var var1 = msg.sender;\n            var0 = isUserExists(var1);\n        \n            if (var0) {\n                var0 = 0x0468;\n                var1 = msg.sender;\n                func_0822(var1);\n                return;\n            } else {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x0f;\n                memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x75736572206e6f74206578697374730000000000000000000000000000000000;\n                var temp1 = memory[0x40:0x60];\n                revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x12;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x707572636861736520636f737420302e30350000000000000000000000000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        }\n    }\n    \n    function LEVEL_PRICE(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function LEVEL_SLOTS(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function owner() returns (var r0) { return storage[0x0c] & 0x02 ** 0xa0 - 0x01; }\n    \n    function users(var arg0) returns (var arg0, var r1, var r2, var r3, var r4, var r5, var r6) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        r1 = storage[temp0 + 0x01] & 0x02 ** 0xa0 - 0x01;\n        r2 = storage[temp0 + 0x02];\n        r3 = storage[temp0 + 0x03];\n        r5 = storage[temp0 + 0x05];\n        r4 = storage[temp0 + 0x04];\n        r6 = storage[temp0 + 0x06];\n        return arg0, r1, r2, r3, r4, r5, r6;\n    }\n    \n    function func_04E5(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function lastBinaryId() returns (var r0) { return storage[0x0a]; }\n    \n    function reg(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.value == 0x016345785d8a0000) {\n            var var1 = 0x0567;\n            var var2 = arg0;\n            var1 = isUserExists(var2);\n        \n            if (!var1) {\n                var1 = 0x05c5;\n                var2 = arg1;\n                var1 = isUserExists(var2);\n            \n                if (var1) {\n                    var0 = address(arg0).code.length;\n                \n                    if (!(var0 & 0xffffffff)) {\n                        var temp0 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp0 + 0xe0;\n                        memory[temp0:temp0 + 0x20] = storage[0x09];\n                        var temp1 = temp0 + 0x20;\n                        memory[temp1:temp1 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                        var temp2 = temp1 + 0x20;\n                        memory[temp2:temp2 + 0x20] = 0x00;\n                        var temp3 = temp2 + 0x20;\n                        memory[temp3:temp3 + 0x20] = storage[0x0b];\n                        var temp4 = temp3 + 0x20;\n                        memory[temp4:temp4 + 0x20] = 0x00;\n                        var temp5 = temp4 + 0x20;\n                        memory[temp5:temp5 + 0x20] = 0x00;\n                        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = 0x01;\n                        var temp6 = arg0;\n                        memory[0x00:0x20] = temp6 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var temp7 = keccak256(memory[0x00:0x40]);\n                        storage[temp7] = memory[temp0:temp0 + 0x20];\n                        var temp8 = temp7 + 0x01;\n                        storage[temp8] = (memory[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp8] & ~(0x02 ** 0xa0 - 0x01));\n                        storage[temp7 + 0x02] = memory[temp0 + 0x40:temp0 + 0x40 + 0x20];\n                        storage[temp7 + 0x03] = memory[temp0 + 0x60:temp0 + 0x60 + 0x20];\n                        storage[temp7 + 0x04] = memory[temp0 + 0x80:temp0 + 0x80 + 0x20];\n                        storage[temp7 + 0x05] = memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20];\n                        storage[temp7 + 0x06] = memory[temp0 + 0xc0:temp0 + 0xc0 + 0x20];\n                        memory[0x00:0x20] = storage[0x09];\n                        memory[0x20:0x40] = 0x05;\n                        var temp9 = keccak256(memory[0x00:0x40]);\n                        storage[temp9] = (temp6 & 0x02 ** 0xa0 - 0x01) | (storage[temp9] & ~(0x02 ** 0xa0 - 0x01));\n                        storage[0x09] = storage[0x09] + 0x01;\n                        storage[0x0b] = storage[0x0b] + 0x01;\n                        var1 = 0x07b7;\n                        var2 = arg1;\n                        func_09A2(var2);\n                        var1 = 0x07c0;\n                        var2 = arg0;\n                        func_0822(var2);\n                        var temp10 = 0x02 ** 0xa0 - 0x01;\n                        var temp11 = arg0 & temp10;\n                        memory[0x00:0x20] = temp11;\n                        memory[0x20:0x40] = 0x03;\n                        var temp12 = storage[keccak256(memory[0x00:0x40])];\n                        var temp13 = arg1 & temp10;\n                        memory[0x00:0x20] = temp13;\n                        var temp14 = memory[0x40:0x60];\n                        memory[temp14:temp14 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n                        var temp15 = memory[0x40:0x60];\n                        log(memory[temp15:temp15 + temp14 - temp15 + 0x20], [0x309bb360e8b69c23937ccc5fb01f9aeeead1c95a99604e175113ff82f2b1723a, stack[-3] & 0x02 ** 0xa0 - 0x01, stack[-2] & 0x02 ** 0xa0 - 0x01, storage[keccak256(memory[0x00:0x40])]]);\n                        return;\n                    } else {\n                        var temp16 = memory[0x40:0x60];\n                        memory[temp16:temp16 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = 0x20;\n                        memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x14;\n                        memory[temp16 + 0x44:temp16 + 0x44 + 0x20] = 0x63616e6e6f74206265206120636f6e7472616374000000000000000000000000;\n                        var temp17 = memory[0x40:0x60];\n                        revert(memory[temp17:temp17 + temp16 - temp17 + 0x64]);\n                    }\n                } else {\n                    var temp18 = memory[0x40:0x60];\n                    memory[temp18:temp18 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = 0x20;\n                    memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = 0x13;\n                    memory[temp18 + 0x44:temp18 + 0x44 + 0x20] = 0x7265666572726572206e6f742065786973747300000000000000000000000000;\n                    var temp19 = memory[0x40:0x60];\n                    revert(memory[temp19:temp19 + temp18 - temp19 + 0x64]);\n                }\n            } else {\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = 0x20;\n                memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = 0x0b;\n                memory[temp20 + 0x44:temp20 + 0x44 + 0x20] = 0x7573657220657869737473000000000000000000000000000000000000000000;\n                var temp21 = memory[0x40:0x60];\n                revert(memory[temp21:temp21 + temp20 - temp21 + 0x64]);\n            }\n        } else {\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp22 + 0x04:temp22 + 0x04 + 0x20] = 0x20;\n            memory[temp22 + 0x24:temp22 + 0x24 + 0x20] = 0x15;\n            memory[temp22 + 0x44:temp22 + 0x44 + 0x20] = 0x726567697374726174696f6e20636f737420302e310000000000000000000000;\n            var temp23 = memory[0x40:0x60];\n            revert(memory[temp23:temp23 + temp22 - temp23 + 0x64]);\n        }\n    }\n    \n    function func_0822(var arg0) {\n        var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = storage[temp2];\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = storage[0x0a];\n        storage[temp2] = storage[temp2] + 0x01;\n        memory[0x00:0x20] = storage[0x0a];\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = 0x01;\n        memory[0x00:0x20] = storage[0x0a];\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = temp0 | (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp4 = storage[0x0a];\n        storage[0x0a] = temp4 + 0x01;\n        var var1 = 0x00;\n        var var2 = temp4;\n        var var0 = 0x01;\n        var var3 = var2;\n    \n        if (var1 >= 0x05) {\n        label_0923:\n            var3 = var2;\n        \n            if (var1 >= 0x0a) {\n            label_099B:\n                return;\n            } else {\n            label_0930:\n                var temp5 = var3;\n                var temp6 = var0 * 0x02;\n                var0 = temp6;\n                var1 = var1 + 0x01;\n                var3 = temp5;\n                var var4 = var0 + ~0x00;\n                var var5 = var0;\n                var var6 = var3;\n            \n                if (!var5) { assert(); }\n            \n                if (var6 % var5 != var4) {\n                label_0919:\n                    goto label_099B;\n                } else {\n                    var4 = var0;\n                    var5 = var3;\n                \n                    if (!var4) { assert(); }\n                \n                    var3 = var5 / var4;\n                \n                    if (!var3) { goto label_0919; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x08;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    memory[0x20:0x40] = 0x04;\n                    var4 = 0x0996;\n                    var5 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                    var6 = var1;\n                    func_0AC9(var5, var6);\n                \n                    if (var1 >= 0x0a) { goto label_099B; }\n                    else { goto label_0930; }\n                }\n            }\n        } else {\n        label_08AE:\n            var temp7 = var3;\n            var temp8 = var0 * 0x02;\n            var0 = temp8;\n            var3 = temp7;\n            var1 = var1 + 0x01;\n            var4 = var0 + ~0x00;\n            var5 = var0;\n            var6 = var3;\n        \n            if (!var5) { assert(); }\n        \n            if (var6 % var5 != var4) { goto label_0919; }\n        \n            var4 = var0;\n            var5 = var3;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4;\n        \n            if (!var3) { goto label_0919; }\n        \n            memory[0x00:0x20] = var3;\n            memory[0x20:0x40] = 0x08;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            memory[0x20:0x40] = 0x04;\n            var4 = 0x0914;\n            var5 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var6 = var1;\n            func_0AC9(var5, var6);\n        \n            if (var1 >= 0x05) { goto label_0923; }\n            else { goto label_08AE; }\n        }\n    }\n    \n    function func_09A2(var arg0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = temp0 + 0x05;\n        storage[temp1] = storage[temp1] + 0x01;\n    \n        if (storage[temp0 + 0x02] >= 0x02) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] != 0x02) {\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp2 & arg0;\n                memory[0x20:0x40] = 0x03;\n            \n                if (storage[keccak256(memory[0x00:0x40]) + 0x01] & temp2) {\n                    var temp3 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = arg0 & temp3;\n                    memory[0x20:0x40] = 0x03;\n                    var var0 = 0x0a87;\n                    var var1 = temp3 & storage[keccak256(memory[0x00:0x40]) + 0x01];\n                    func_09A2(var1);\n                \n                label_0A87:\n                    memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                    var temp4 = keccak256(memory[0x00:0x40]);\n                    storage[temp4 + 0x02] = 0x00;\n                    storage[temp4 + 0x03] = storage[0x0b];\n                    var temp5 = temp4 + 0x04;\n                    storage[temp5] = storage[temp5] + 0x01;\n                    storage[0x0b] = storage[0x0b] + 0x01;\n                    return;\n                } else {\n                    var0 = 0x0a5b;\n                    var1 = arg0;\n                    func_0C84(var1);\n                    goto label_0A87;\n                }\n            } else {\n                var0 = 0x09da;\n                var1 = arg0;\n                func_0822(var1);\n            \n            label_09DA:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n                var temp6 = keccak256(memory[0x00:0x40]) + 0x02;\n                storage[temp6] = storage[temp6] + 0x01;\n                return;\n            }\n        } else {\n            var0 = 0x09da;\n            var1 = arg0;\n            func_0C84(var1);\n            goto label_09DA;\n        }\n    }\n    \n    function func_0AC9(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x03;\n        var var1 = 0x00;\n        var temp2 = arg1;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + var1], [0x31af64a57c886d63ef4833d8e75bb8b0844d35462e568f986e055880c0228893, stack[-2] & 0x02 ** 0xa0 - 0x01, storage[keccak256(memory[0x00:0x40])], stack[-1]]);\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x01;\n        var temp3 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x00;\n        var temp4 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        arg1 = temp2 + 0x01;\n        var var0 = temp3 * temp4;\n    \n        if (arg1 <= storage[keccak256(memory[0x00:0x40]) + 0x06]) {\n            var temp5 = arg1;\n            memory[0x00:0x20] = temp5;\n            memory[0x20:0x40] = 0x00;\n            var temp6 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp5 + ~0x00;\n            memory[0x20:0x40] = 0x02;\n            var0 = var0 - temp6 - storage[0x0d] * storage[keccak256(memory[0x00:0x40])];\n        \n            if (temp5 <= 0x02) {\n            label_0C4E:\n                var1 = 0x00;\n                memory[0x00:0x20] = arg1 + ~0x00;\n                memory[0x20:0x40] = 0x02;\n            \n                if (var1 >= storage[keccak256(memory[0x00:0x40])]) {\n                label_0C7E:\n                    return;\n                } else {\n                label_0C6E:\n                    var var2 = 0x0c76;\n                    var var3 = arg0;\n                    func_0822(var3);\n                    var1 = var1 + 0x01;\n                    memory[0x00:0x20] = arg1 + ~0x00;\n                    memory[0x20:0x40] = 0x02;\n                \n                    if (var1 >= storage[keccak256(memory[0x00:0x40])]) { goto label_0C7E; }\n                    else { goto label_0C6E; }\n                }\n            } else {\n            label_0BD4:\n                var temp7 = arg0;\n                var temp8 = temp7 & 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp8;\n                memory[0x20:0x40] = 0x03;\n                var temp9 = var0;\n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x7fa9aafeb8bb803d77de5d84bc2f2edbd842ca91b20cd5020aa21dfe26ab0be9, stack[-4] & 0x02 ** 0xa0 - 0x01, storage[keccak256(memory[0x00:0x40])], stack[-2]]);\n                var temp10 = memory[0x40:0x60];\n                var temp11;\n                temp11, memory[temp10:temp10 + 0x00] = address(temp7 & 0x02 ** 0xa0 - 0x01).call.gas(!temp9 * 0x08fc).value(temp9)(memory[temp10:temp10 + 0x00]);\n                var2 = !temp11;\n            \n                if (!var2) { goto label_0C4E; }\n            \n                var temp12 = returndata.length;\n                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp13 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp13;\n            memory[0x20:0x40] = 0x03;\n            var temp14 = keccak256(memory[0x00:0x40]);\n            var temp15 = temp14 + 0x06;\n            storage[temp15] = storage[temp15] + 0x01;\n            var temp16 = arg1;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xe29dcee3c35f6da23620bdf73886de3685891aa12891fb4e5109f52dde5939ac, stack[-4] & 0x02 ** 0xa0 - 0x01, storage[keccak256(memory[0x00:0x40])], stack[-3]]);\n            memory[0x00:0x20] = temp16;\n            memory[0x20:0x40] = 0x00;\n            var temp17 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp16 + ~0x00;\n            memory[0x20:0x40] = 0x02;\n            var0 = var0 - temp17 - storage[0x0d] * storage[keccak256(memory[0x00:0x40])];\n        \n            if (temp16 <= 0x02) { goto label_0C4E; }\n            else { goto label_0BD4; }\n        }\n    }\n    \n    function func_0C84(var arg0) {\n        var temp0 = arg0;\n        var temp1 = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x03;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x7fa9aafeb8bb803d77de5d84bc2f2edbd842ca91b20cd5020aa21dfe26ab0be9, stack[-1] & 0x02 ** 0xa0 - 0x01, storage[keccak256(memory[0x00:0x40])], storage[0x0d]]);\n        var temp2 = storage[0x0d];\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + 0x00]);\n        var var0 = !temp4;\n    \n        if (!var0) { return; }\n    \n        var temp5 = returndata.length;\n        memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x0980e4fc) {\n            // Dispatch table entry for 0x0980e4fc (unknown)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var var2 = msg.data[0x04:0x24];\n            var2 = func_02F5(var2);\n        \n        label_0102:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var2;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x21d18a90) {\n            // Dispatch table entry for EXTRA_SLOTS(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = msg.data[0x04:0x24];\n            var2 = EXTRA_SLOTS(var2);\n            goto label_0102;\n        } else if (var0 == 0x322f62ba) {\n            // Dispatch table entry for reg(address)\n            var1 = 0x0140;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var var3 = 0x0323;\n            var var4 = msg.sender;\n            var var5 = var2;\n            reg(var4, var5);\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x348d4487) {\n            // Dispatch table entry for lastUserId()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = lastUserId();\n            goto label_0102;\n        } else if (var0 == 0x425ab577) {\n            // Dispatch table entry for positionsByAddress(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var2 = positionsByAddress(var2, var3);\n            goto label_0102;\n        } else if (var0 == 0x426b5382) {\n            // Dispatch table entry for usersById(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0193;\n            var2 = msg.data[0x04:0x24];\n            var2 = usersById(var2);\n        \n        label_0193:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n        } else if (var0 == 0x4b841f09) {\n            // Dispatch table entry for 0x4b841f09 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = func_0364();\n            goto label_0102;\n        } else if (var0 == 0x4f6a35c5) {\n            // Dispatch table entry for binaryUsers(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0193;\n            var2 = msg.data[0x04:0x24];\n            var2 = binaryUsers(var2);\n            goto label_0193;\n        } else if (var0 == 0x509222cd) {\n            // Dispatch table entry for isUserExists(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01fd;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = isUserExists(var2);\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = !!var1;\n            var temp5 = memory[0x40:0x60];\n            return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n        } else if (var0 == 0x5902795d) {\n            // Dispatch table entry for 0x5902795d (unknown)\n            var1 = 0x0140;\n            func_03A2();\n            stop();\n        } else if (var0 == 0x79378e30) {\n            // Dispatch table entry for LEVEL_PRICE(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = msg.data[0x04:0x24];\n            var2 = LEVEL_PRICE(var2);\n            goto label_0102;\n        } else if (var0 == 0x8cd582f4) {\n            // Dispatch table entry for LEVEL_SLOTS(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = msg.data[0x04:0x24];\n            var2 = LEVEL_SLOTS(var2);\n            goto label_0102;\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0193;\n            var2 = owner();\n            goto label_0193;\n        } else if (var0 == 0xa87430ba) {\n            // Dispatch table entry for users(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x027f;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var var6;\n            var var7;\n            var var8;\n            var2, var3, var4, var5, var6, var7, var8 = users(var2);\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var2;\n            memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n            memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = var4;\n            memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = var5;\n            memory[temp6 + 0x80:temp6 + 0x80 + 0x20] = var6;\n            memory[temp6 + 0xa0:temp6 + 0xa0 + 0x20] = var7;\n            memory[temp6 + 0xc0:temp6 + 0xc0 + 0x20] = var8;\n            var temp7 = memory[0x40:0x60];\n            return memory[temp7:temp7 + temp6 - temp7 + 0xe0];\n        } else if (var0 == 0xaf716270) {\n            // Dispatch table entry for 0xaf716270 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = func_04E5(var2);\n            goto label_0102;\n        } else if (var0 == 0xf16f0ef0) {\n            // Dispatch table entry for lastBinaryId()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = lastBinaryId();\n            goto label_0102;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_02F5(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function EXTRA_SLOTS(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function lastUserId() returns (var r0) { return storage[0x09]; }\n    \n    function positionsByAddress(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function usersById(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function func_0364() returns (var r0) { return storage[0x0b]; }\n    \n    function binaryUsers(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function isUserExists(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        return !!storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_03A2() {\n        if (msg.value == 0xb1a2bc2ec50000) {\n            var var0 = 0x0409;\n            var var1 = msg.sender;\n            var0 = isUserExists(var1);\n        \n            if (var0) {\n                var0 = 0x0468;\n                var1 = msg.sender;\n                func_0822(var1);\n                return;\n            } else {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x0f;\n                memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x75736572206e6f74206578697374730000000000000000000000000000000000;\n                var temp1 = memory[0x40:0x60];\n                revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x12;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x707572636861736520636f737420302e30350000000000000000000000000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        }\n    }\n    \n    function LEVEL_PRICE(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function LEVEL_SLOTS(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function owner() returns (var r0) { return storage[0x0c] & 0x02 ** 0xa0 - 0x01; }\n    \n    function users(var arg0) returns (var arg0, var r1, var r2, var r3, var r4, var r5, var r6) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        r1 = storage[temp0 + 0x01] & 0x02 ** 0xa0 - 0x01;\n        r2 = storage[temp0 + 0x02];\n        r3 = storage[temp0 + 0x03];\n        r5 = storage[temp0 + 0x05];\n        r4 = storage[temp0 + 0x04];\n        r6 = storage[temp0 + 0x06];\n        return arg0, r1, r2, r3, r4, r5, r6;\n    }\n    \n    function func_04E5(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function lastBinaryId() returns (var r0) { return storage[0x0a]; }\n    \n    function reg(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.value == 0x016345785d8a0000) {\n            var var1 = 0x0567;\n            var var2 = arg0;\n            var1 = isUserExists(var2);\n        \n            if (!var1) {\n                var1 = 0x05c5;\n                var2 = arg1;\n                var1 = isUserExists(var2);\n            \n                if (var1) {\n                    var0 = address(arg0).code.length;\n                \n                    if (!(var0 & 0xffffffff)) {\n                        var temp0 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp0 + 0xe0;\n                        memory[temp0:temp0 + 0x20] = storage[0x09];\n                        var temp1 = temp0 + 0x20;\n                        memory[temp1:temp1 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                        var temp2 = temp1 + 0x20;\n                        memory[temp2:temp2 + 0x20] = 0x00;\n                        var temp3 = temp2 + 0x20;\n                        memory[temp3:temp3 + 0x20] = storage[0x0b];\n                        var temp4 = temp3 + 0x20;\n                        memory[temp4:temp4 + 0x20] = 0x00;\n                        var temp5 = temp4 + 0x20;\n                        memory[temp5:temp5 + 0x20] = 0x00;\n                        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = 0x01;\n                        var temp6 = arg0;\n                        memory[0x00:0x20] = temp6 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var temp7 = keccak256(memory[0x00:0x40]);\n                        storage[temp7] = memory[temp0:temp0 + 0x20];\n                        var temp8 = temp7 + 0x01;\n                        storage[temp8] = (memory[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp8] & ~(0x02 ** 0xa0 - 0x01));\n                        storage[temp7 + 0x02] = memory[temp0 + 0x40:temp0 + 0x40 + 0x20];\n                        storage[temp7 + 0x03] = memory[temp0 + 0x60:temp0 + 0x60 + 0x20];\n                        storage[temp7 + 0x04] = memory[temp0 + 0x80:temp0 + 0x80 + 0x20];\n                        storage[temp7 + 0x05] = memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20];\n                        storage[temp7 + 0x06] = memory[temp0 + 0xc0:temp0 + 0xc0 + 0x20];\n                        memory[0x00:0x20] = storage[0x09];\n                        memory[0x20:0x40] = 0x05;\n                        var temp9 = keccak256(memory[0x00:0x40]);\n                        storage[temp9] = (temp6 & 0x02 ** 0xa0 - 0x01) | (storage[temp9] & ~(0x02 ** 0xa0 - 0x01));\n                        storage[0x09] = storage[0x09] + 0x01;\n                        storage[0x0b] = storage[0x0b] + 0x01;\n                        var1 = 0x07b7;\n                        var2 = arg1;\n                        func_09A2(var2);\n                        var1 = 0x07c0;\n                        var2 = arg0;\n                        func_0822(var2);\n                        var temp10 = 0x02 ** 0xa0 - 0x01;\n                        var temp11 = arg0 & temp10;\n                        memory[0x00:0x20] = temp11;\n                        memory[0x20:0x40] = 0x03;\n                        var temp12 = storage[keccak256(memory[0x00:0x40])];\n                        var temp13 = arg1 & temp10;\n                        memory[0x00:0x20] = temp13;\n                        var temp14 = memory[0x40:0x60];\n                        memory[temp14:temp14 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n                        var temp15 = memory[0x40:0x60];\n                        log(memory[temp15:temp15 + temp14 - temp15 + 0x20], [0x309bb360e8b69c23937ccc5fb01f9aeeead1c95a99604e175113ff82f2b1723a, stack[-3] & 0x02 ** 0xa0 - 0x01, stack[-2] & 0x02 ** 0xa0 - 0x01, storage[keccak256(memory[0x00:0x40])]]);\n                        return;\n                    } else {\n                        var temp16 = memory[0x40:0x60];\n                        memory[temp16:temp16 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = 0x20;\n                        memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x14;\n                        memory[temp16 + 0x44:temp16 + 0x44 + 0x20] = 0x63616e6e6f74206265206120636f6e7472616374000000000000000000000000;\n                        var temp17 = memory[0x40:0x60];\n                        revert(memory[temp17:temp17 + temp16 - temp17 + 0x64]);\n                    }\n                } else {\n                    var temp18 = memory[0x40:0x60];\n                    memory[temp18:temp18 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = 0x20;\n                    memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = 0x13;\n                    memory[temp18 + 0x44:temp18 + 0x44 + 0x20] = 0x7265666572726572206e6f742065786973747300000000000000000000000000;\n                    var temp19 = memory[0x40:0x60];\n                    revert(memory[temp19:temp19 + temp18 - temp19 + 0x64]);\n                }\n            } else {\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = 0x20;\n                memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = 0x0b;\n                memory[temp20 + 0x44:temp20 + 0x44 + 0x20] = 0x7573657220657869737473000000000000000000000000000000000000000000;\n                var temp21 = memory[0x40:0x60];\n                revert(memory[temp21:temp21 + temp20 - temp21 + 0x64]);\n            }\n        } else {\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp22 + 0x04:temp22 + 0x04 + 0x20] = 0x20;\n            memory[temp22 + 0x24:temp22 + 0x24 + 0x20] = 0x15;\n            memory[temp22 + 0x44:temp22 + 0x44 + 0x20] = 0x726567697374726174696f6e20636f737420302e310000000000000000000000;\n            var temp23 = memory[0x40:0x60];\n            revert(memory[temp23:temp23 + temp22 - temp23 + 0x64]);\n        }\n    }\n    \n    function func_0822(var arg0) {\n        var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = storage[temp2];\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = storage[0x0a];\n        storage[temp2] = storage[temp2] + 0x01;\n        memory[0x00:0x20] = storage[0x0a];\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = 0x01;\n        memory[0x00:0x20] = storage[0x0a];\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = temp0 | (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp4 = storage[0x0a];\n        storage[0x0a] = temp4 + 0x01;\n        var var1 = 0x00;\n        var var2 = temp4;\n        var var0 = 0x01;\n        var var3 = var2;\n    \n        if (var1 >= 0x05) {\n        label_0923:\n            var3 = var2;\n        \n            if (var1 >= 0x0a) {\n            label_099B:\n                return;\n            } else {\n            label_0930:\n                var temp5 = var3;\n                var temp6 = var0 * 0x02;\n                var0 = temp6;\n                var1 = var1 + 0x01;\n                var3 = temp5;\n                var var4 = var0 + ~0x00;\n                var var5 = var0;\n                var var6 = var3;\n            \n                if (!var5) { assert(); }\n            \n                if (var6 % var5 != var4) {\n                label_0919:\n                    goto label_099B;\n                } else {\n                    var4 = var0;\n                    var5 = var3;\n                \n                    if (!var4) { assert(); }\n                \n                    var3 = var5 / var4;\n                \n                    if (!var3) { goto label_0919; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x08;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    memory[0x20:0x40] = 0x04;\n                    var4 = 0x0996;\n                    var5 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                    var6 = var1;\n                    func_0AC9(var5, var6);\n                \n                    if (var1 >= 0x0a) { goto label_099B; }\n                    else { goto label_0930; }\n                }\n            }\n        } else {\n        label_08AE:\n            var temp7 = var3;\n            var temp8 = var0 * 0x02;\n            var0 = temp8;\n            var3 = temp7;\n            var1 = var1 + 0x01;\n            var4 = var0 + ~0x00;\n            var5 = var0;\n            var6 = var3;\n        \n            if (!var5) { assert(); }\n        \n            if (var6 % var5 != var4) { goto label_0919; }\n        \n            var4 = var0;\n            var5 = var3;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4;\n        \n            if (!var3) { goto label_0919; }\n        \n            memory[0x00:0x20] = var3;\n            memory[0x20:0x40] = 0x08;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            memory[0x20:0x40] = 0x04;\n            var4 = 0x0914;\n            var5 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var6 = var1;\n            func_0AC9(var5, var6);\n        \n            if (var1 >= 0x05) { goto label_0923; }\n            else { goto label_08AE; }\n        }\n    }\n    \n    function func_09A2(var arg0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = temp0 + 0x05;\n        storage[temp1] = storage[temp1] + 0x01;\n    \n        if (storage[temp0 + 0x02] >= 0x02) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] != 0x02) {\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp2 & arg0;\n                memory[0x20:0x40] = 0x03;\n            \n                if (storage[keccak256(memory[0x00:0x40]) + 0x01] & temp2) {\n                    var temp3 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = arg0 & temp3;\n                    memory[0x20:0x40] = 0x03;\n                    var var0 = 0x0a87;\n                    var var1 = temp3 & storage[keccak256(memory[0x00:0x40]) + 0x01];\n                    func_09A2(var1);\n                \n                label_0A87:\n                    memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                    var temp4 = keccak256(memory[0x00:0x40]);\n                    storage[temp4 + 0x02] = 0x00;\n                    storage[temp4 + 0x03] = storage[0x0b];\n                    var temp5 = temp4 + 0x04;\n                    storage[temp5] = storage[temp5] + 0x01;\n                    storage[0x0b] = storage[0x0b] + 0x01;\n                    return;\n                } else {\n                    var0 = 0x0a5b;\n                    var1 = arg0;\n                    func_0C84(var1);\n                    goto label_0A87;\n                }\n            } else {\n                var0 = 0x09da;\n                var1 = arg0;\n                func_0822(var1);\n            \n            label_09DA:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n                var temp6 = keccak256(memory[0x00:0x40]) + 0x02;\n                storage[temp6] = storage[temp6] + 0x01;\n                return;\n            }\n        } else {\n            var0 = 0x09da;\n            var1 = arg0;\n            func_0C84(var1);\n            goto label_09DA;\n        }\n    }\n    \n    function func_0AC9(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x03;\n        var var1 = 0x00;\n        var temp2 = arg1;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + var1], [0x31af64a57c886d63ef4833d8e75bb8b0844d35462e568f986e055880c0228893, stack[-2] & 0x02 ** 0xa0 - 0x01, storage[keccak256(memory[0x00:0x40])], stack[-1]]);\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x01;\n        var temp3 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x00;\n        var temp4 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        arg1 = temp2 + 0x01;\n        var var0 = temp3 * temp4;\n    \n        if (arg1 <= storage[keccak256(memory[0x00:0x40]) + 0x06]) {\n            var temp5 = arg1;\n            memory[0x00:0x20] = temp5;\n            memory[0x20:0x40] = 0x00;\n            var temp6 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp5 + ~0x00;\n            memory[0x20:0x40] = 0x02;\n            var0 = var0 - temp6 - storage[0x0d] * storage[keccak256(memory[0x00:0x40])];\n        \n            if (temp5 <= 0x02) {\n            label_0C4E:\n                var1 = 0x00;\n                memory[0x00:0x20] = arg1 + ~0x00;\n                memory[0x20:0x40] = 0x02;\n            \n                if (var1 >= storage[keccak256(memory[0x00:0x40])]) {\n                label_0C7E:\n                    return;\n                } else {\n                label_0C6E:\n                    var var2 = 0x0c76;\n                    var var3 = arg0;\n                    func_0822(var3);\n                    var1 = var1 + 0x01;\n                    memory[0x00:0x20] = arg1 + ~0x00;\n                    memory[0x20:0x40] = 0x02;\n                \n                    if (var1 >= storage[keccak256(memory[0x00:0x40])]) { goto label_0C7E; }\n                    else { goto label_0C6E; }\n                }\n            } else {\n            label_0BD4:\n                var temp7 = arg0;\n                var temp8 = temp7 & 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp8;\n                memory[0x20:0x40] = 0x03;\n                var temp9 = var0;\n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x7fa9aafeb8bb803d77de5d84bc2f2edbd842ca91b20cd5020aa21dfe26ab0be9, stack[-4] & 0x02 ** 0xa0 - 0x01, storage[keccak256(memory[0x00:0x40])], stack[-2]]);\n                var temp10 = memory[0x40:0x60];\n                var temp11;\n                temp11, memory[temp10:temp10 + 0x00] = address(temp7 & 0x02 ** 0xa0 - 0x01).call.gas(!temp9 * 0x08fc).value(temp9)(memory[temp10:temp10 + 0x00]);\n                var2 = !temp11;\n            \n                if (!var2) { goto label_0C4E; }\n            \n                var temp12 = returndata.length;\n                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp13 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp13;\n            memory[0x20:0x40] = 0x03;\n            var temp14 = keccak256(memory[0x00:0x40]);\n            var temp15 = temp14 + 0x06;\n            storage[temp15] = storage[temp15] + 0x01;\n            var temp16 = arg1;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xe29dcee3c35f6da23620bdf73886de3685891aa12891fb4e5109f52dde5939ac, stack[-4] & 0x02 ** 0xa0 - 0x01, storage[keccak256(memory[0x00:0x40])], stack[-3]]);\n            memory[0x00:0x20] = temp16;\n            memory[0x20:0x40] = 0x00;\n            var temp17 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp16 + ~0x00;\n            memory[0x20:0x40] = 0x02;\n            var0 = var0 - temp17 - storage[0x0d] * storage[keccak256(memory[0x00:0x40])];\n        \n            if (temp16 <= 0x02) { goto label_0C4E; }\n            else { goto label_0BD4; }\n        }\n    }\n    \n    function func_0C84(var arg0) {\n        var temp0 = arg0;\n        var temp1 = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x03;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x7fa9aafeb8bb803d77de5d84bc2f2edbd842ca91b20cd5020aa21dfe26ab0be9, stack[-1] & 0x02 ** 0xa0 - 0x01, storage[keccak256(memory[0x00:0x40])], storage[0x0d]]);\n        var temp2 = storage[0x0d];\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + 0x00]);\n        var var0 = !temp4;\n    \n        if (!var0) { return; }\n    \n        var temp5 = returndata.length;\n        memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x0980e4fc) {\n            // Dispatch table entry for 0x0980e4fc (unknown)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var var2 = msg.data[0x04:0x24];\n            var2 = func_02F5(var2);\n        \n        label_0102:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var2;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x21d18a90) {\n            // Dispatch table entry for EXTRA_SLOTS(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = msg.data[0x04:0x24];\n            var2 = EXTRA_SLOTS(var2);\n            goto label_0102;\n        } else if (var0 == 0x322f62ba) {\n            // Dispatch table entry for reg(address)\n            var1 = 0x0140;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var var3 = 0x0323;\n            var var4 = msg.sender;\n            var var5 = var2;\n            reg(var4, var5);\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x348d4487) {\n            // Dispatch table entry for lastUserId()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = lastUserId();\n            goto label_0102;\n        } else if (var0 == 0x425ab577) {\n            // Dispatch table entry for positionsByAddress(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var2 = positionsByAddress(var2, var3);\n            goto label_0102;\n        } else if (var0 == 0x426b5382) {\n            // Dispatch table entry for usersById(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0193;\n            var2 = msg.data[0x04:0x24];\n            var2 = usersById(var2);\n        \n        label_0193:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n        } else if (var0 == 0x4b841f09) {\n            // Dispatch table entry for 0x4b841f09 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = func_0364();\n            goto label_0102;\n        } else if (var0 == 0x4f6a35c5) {\n            // Dispatch table entry for binaryUsers(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0193;\n            var2 = msg.data[0x04:0x24];\n            var2 = binaryUsers(var2);\n            goto label_0193;\n        } else if (var0 == 0x509222cd) {\n            // Dispatch table entry for isUserExists(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01fd;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = isUserExists(var2);\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = !!var1;\n            var temp5 = memory[0x40:0x60];\n            return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n        } else if (var0 == 0x5902795d) {\n            // Dispatch table entry for 0x5902795d (unknown)\n            var1 = 0x0140;\n            func_03A2();\n            stop();\n        } else if (var0 == 0x79378e30) {\n            // Dispatch table entry for LEVEL_PRICE(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = msg.data[0x04:0x24];\n            var2 = LEVEL_PRICE(var2);\n            goto label_0102;\n        } else if (var0 == 0x8cd582f4) {\n            // Dispatch table entry for LEVEL_SLOTS(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = msg.data[0x04:0x24];\n            var2 = LEVEL_SLOTS(var2);\n            goto label_0102;\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0193;\n            var2 = owner();\n            goto label_0193;\n        } else if (var0 == 0xa87430ba) {\n            // Dispatch table entry for users(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x027f;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var var6;\n            var var7;\n            var var8;\n            var2, var3, var4, var5, var6, var7, var8 = users(var2);\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var2;\n            memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n            memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = var4;\n            memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = var5;\n            memory[temp6 + 0x80:temp6 + 0x80 + 0x20] = var6;\n            memory[temp6 + 0xa0:temp6 + 0xa0 + 0x20] = var7;\n            memory[temp6 + 0xc0:temp6 + 0xc0 + 0x20] = var8;\n            var temp7 = memory[0x40:0x60];\n            return memory[temp7:temp7 + temp6 - temp7 + 0xe0];\n        } else if (var0 == 0xaf716270) {\n            // Dispatch table entry for 0xaf716270 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = func_04E5(var2);\n            goto label_0102;\n        } else if (var0 == 0xf16f0ef0) {\n            // Dispatch table entry for lastBinaryId()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0102;\n            var2 = lastBinaryId();\n            goto label_0102;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_02F5(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function EXTRA_SLOTS(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function lastUserId() returns (var r0) { return storage[0x09]; }\n    \n    function positionsByAddress(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function usersById(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function func_0364() returns (var r0) { return storage[0x0b]; }\n    \n    function binaryUsers(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function isUserExists(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        return !!storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_03A2() {\n        if (msg.value == 0xb1a2bc2ec50000) {\n            var var0 = 0x0409;\n            var var1 = msg.sender;\n            var0 = isUserExists(var1);\n        \n            if (var0) {\n                var0 = 0x0468;\n                var1 = msg.sender;\n                func_0822(var1);\n                return;\n            } else {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x0f;\n                memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x75736572206e6f74206578697374730000000000000000000000000000000000;\n                var temp1 = memory[0x40:0x60];\n                revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x12;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x707572636861736520636f737420302e30350000000000000000000000000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        }\n    }\n    \n    function LEVEL_PRICE(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function LEVEL_SLOTS(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function owner() returns (var r0) { return storage[0x0c] & 0x02 ** 0xa0 - 0x01; }\n    \n    function users(var arg0) returns (var arg0, var r1, var r2, var r3, var r4, var r5, var r6) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        r1 = storage[temp0 + 0x01] & 0x02 ** 0xa0 - 0x01;\n        r2 = storage[temp0 + 0x02];\n        r3 = storage[temp0 + 0x03];\n        r5 = storage[temp0 + 0x05];\n        r4 = storage[temp0 + 0x04];\n        r6 = storage[temp0 + 0x06];\n        return arg0, r1, r2, r3, r4, r5, r6;\n    }\n    \n    function func_04E5(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function lastBinaryId() returns (var r0) { return storage[0x0a]; }\n    \n    function reg(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.value == 0x016345785d8a0000) {\n            var var1 = 0x0567;\n            var var2 = arg0;\n            var1 = isUserExists(var2);\n        \n            if (!var1) {\n                var1 = 0x05c5;\n                var2 = arg1;\n                var1 = isUserExists(var2);\n            \n                if (var1) {\n                    var0 = address(arg0).code.length;\n                \n                    if (!(var0 & 0xffffffff)) {\n                        var temp0 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp0 + 0xe0;\n                        memory[temp0:temp0 + 0x20] = storage[0x09];\n                        var temp1 = temp0 + 0x20;\n                        memory[temp1:temp1 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                        var temp2 = temp1 + 0x20;\n                        memory[temp2:temp2 + 0x20] = 0x00;\n                        var temp3 = temp2 + 0x20;\n                        memory[temp3:temp3 + 0x20] = storage[0x0b];\n                        var temp4 = temp3 + 0x20;\n                        memory[temp4:temp4 + 0x20] = 0x00;\n                        var temp5 = temp4 + 0x20;\n                        memory[temp5:temp5 + 0x20] = 0x00;\n                        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = 0x01;\n                        var temp6 = arg0;\n                        memory[0x00:0x20] = temp6 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var temp7 = keccak256(memory[0x00:0x40]);\n                        storage[temp7] = memory[temp0:temp0 + 0x20];\n                        var temp8 = temp7 + 0x01;\n                        storage[temp8] = (memory[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp8] & ~(0x02 ** 0xa0 - 0x01));\n                        storage[temp7 + 0x02] = memory[temp0 + 0x40:temp0 + 0x40 + 0x20];\n                        storage[temp7 + 0x03] = memory[temp0 + 0x60:temp0 + 0x60 + 0x20];\n                        storage[temp7 + 0x04] = memory[temp0 + 0x80:temp0 + 0x80 + 0x20];\n                        storage[temp7 + 0x05] = memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20];\n                        storage[temp7 + 0x06] = memory[temp0 + 0xc0:temp0 + 0xc0 + 0x20];\n                        memory[0x00:0x20] = storage[0x09];\n                        memory[0x20:0x40] = 0x05;\n                        var temp9 = keccak256(memory[0x00:0x40]);\n                        storage[temp9] = (temp6 & 0x02 ** 0xa0 - 0x01) | (storage[temp9] & ~(0x02 ** 0xa0 - 0x01));\n                        storage[0x09] = storage[0x09] + 0x01;\n                        storage[0x0b] = storage[0x0b] + 0x01;\n                        var1 = 0x07b7;\n                        var2 = arg1;\n                        func_09A2(var2);\n                        var1 = 0x07c0;\n                        var2 = arg0;\n                        func_0822(var2);\n                        var temp10 = 0x02 ** 0xa0 - 0x01;\n                        var temp11 = arg0 & temp10;\n                        memory[0x00:0x20] = temp11;\n                        memory[0x20:0x40] = 0x03;\n                        var temp12 = storage[keccak256(memory[0x00:0x40])];\n                        var temp13 = arg1 & temp10;\n                        memory[0x00:0x20] = temp13;\n                        var temp14 = memory[0x40:0x60];\n                        memory[temp14:temp14 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n                        var temp15 = memory[0x40:0x60];\n                        log(memory[temp15:temp15 + temp14 - temp15 + 0x20], [0x309bb360e8b69c23937ccc5fb01f9aeeead1c95a99604e175113ff82f2b1723a, stack[-3] & 0x02 ** 0xa0 - 0x01, stack[-2] & 0x02 ** 0xa0 - 0x01, storage[keccak256(memory[0x00:0x40])]]);\n                        return;\n                    } else {\n                        var temp16 = memory[0x40:0x60];\n                        memory[temp16:temp16 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = 0x20;\n                        memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x14;\n                        memory[temp16 + 0x44:temp16 + 0x44 + 0x20] = 0x63616e6e6f74206265206120636f6e7472616374000000000000000000000000;\n                        var temp17 = memory[0x40:0x60];\n                        revert(memory[temp17:temp17 + temp16 - temp17 + 0x64]);\n                    }\n                } else {\n                    var temp18 = memory[0x40:0x60];\n                    memory[temp18:temp18 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = 0x20;\n                    memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = 0x13;\n                    memory[temp18 + 0x44:temp18 + 0x44 + 0x20] = 0x7265666572726572206e6f742065786973747300000000000000000000000000;\n                    var temp19 = memory[0x40:0x60];\n                    revert(memory[temp19:temp19 + temp18 - temp19 + 0x64]);\n                }\n            } else {\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = 0x20;\n                memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = 0x0b;\n                memory[temp20 + 0x44:temp20 + 0x44 + 0x20] = 0x7573657220657869737473000000000000000000000000000000000000000000;\n                var temp21 = memory[0x40:0x60];\n                revert(memory[temp21:temp21 + temp20 - temp21 + 0x64]);\n            }\n        } else {\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp22 + 0x04:temp22 + 0x04 + 0x20] = 0x20;\n            memory[temp22 + 0x24:temp22 + 0x24 + 0x20] = 0x15;\n            memory[temp22 + 0x44:temp22 + 0x44 + 0x20] = 0x726567697374726174696f6e20636f737420302e310000000000000000000000;\n            var temp23 = memory[0x40:0x60];\n            revert(memory[temp23:temp23 + temp22 - temp23 + 0x64]);\n        }\n    }\n    \n    function func_0822(var arg0) {\n        var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = storage[temp2];\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = storage[0x0a];\n        storage[temp2] = storage[temp2] + 0x01;\n        memory[0x00:0x20] = storage[0x0a];\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = 0x01;\n        memory[0x00:0x20] = storage[0x0a];\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = temp0 | (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp4 = storage[0x0a];\n        storage[0x0a] = temp4 + 0x01;\n        var var1 = 0x00;\n        var var2 = temp4;\n        var var0 = 0x01;\n        var var3 = var2;\n    \n        if (var1 >= 0x05) {\n        label_0923:\n            var3 = var2;\n        \n            if (var1 >= 0x0a) {\n            label_099B:\n                return;\n            } else {\n            label_0930:\n                var temp5 = var3;\n                var temp6 = var0 * 0x02;\n                var0 = temp6;\n                var1 = var1 + 0x01;\n                var3 = temp5;\n                var var4 = var0 + ~0x00;\n                var var5 = var0;\n                var var6 = var3;\n            \n                if (!var5) { assert(); }\n            \n                if (var6 % var5 != var4) {\n                label_0919:\n                    goto label_099B;\n                } else {\n                    var4 = var0;\n                    var5 = var3;\n                \n                    if (!var4) { assert(); }\n                \n                    var3 = var5 / var4;\n                \n                    if (!var3) { goto label_0919; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x08;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    memory[0x20:0x40] = 0x04;\n                    var4 = 0x0996;\n                    var5 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                    var6 = var1;\n                    func_0AC9(var5, var6);\n                \n                    if (var1 >= 0x0a) { goto label_099B; }\n                    else { goto label_0930; }\n                }\n            }\n        } else {\n        label_08AE:\n            var temp7 = var3;\n            var temp8 = var0 * 0x02;\n            var0 = temp8;\n            var3 = temp7;\n            var1 = var1 + 0x01;\n            var4 = var0 + ~0x00;\n            var5 = var0;\n            var6 = var3;\n        \n            if (!var5) { assert(); }\n        \n            if (var6 % var5 != var4) { goto label_0919; }\n        \n            var4 = var0;\n            var5 = var3;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4;\n        \n            if (!var3) { goto label_0919; }\n        \n            memory[0x00:0x20] = var3;\n            memory[0x20:0x40] = 0x08;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            memory[0x20:0x40] = 0x04;\n            var4 = 0x0914;\n            var5 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var6 = var1;\n            func_0AC9(var5, var6);\n        \n            if (var1 >= 0x05) { goto label_0923; }\n            else { goto label_08AE; }\n        }\n    }\n    \n    function func_09A2(var arg0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = temp0 + 0x05;\n        storage[temp1] = storage[temp1] + 0x01;\n    \n        if (storage[temp0 + 0x02] >= 0x02) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] != 0x02) {\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp2 & arg0;\n                memory[0x20:0x40] = 0x03;\n            \n                if (storage[keccak256(memory[0x00:0x40]) + 0x01] & temp2) {\n                    var temp3 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = arg0 & temp3;\n                    memory[0x20:0x40] = 0x03;\n                    var var0 = 0x0a87;\n                    var var1 = temp3 & storage[keccak256(memory[0x00:0x40]) + 0x01];\n                    func_09A2(var1);\n                \n                label_0A87:\n                    memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                    var temp4 = keccak256(memory[0x00:0x40]);\n                    storage[temp4 + 0x02] = 0x00;\n                    storage[temp4 + 0x03] = storage[0x0b];\n                    var temp5 = temp4 + 0x04;\n                    storage[temp5] = storage[temp5] + 0x01;\n                    storage[0x0b] = storage[0x0b] + 0x01;\n                    return;\n                } else {\n                    var0 = 0x0a5b;\n                    var1 = arg0;\n                    func_0C84(var1);\n                    goto label_0A87;\n                }\n            } else {\n                var0 = 0x09da;\n                var1 = arg0;\n                func_0822(var1);\n            \n            label_09DA:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n                var temp6 = keccak256(memory[0x00:0x40]) + 0x02;\n                storage[temp6] = storage[temp6] + 0x01;\n                return;\n            }\n        } else {\n            var0 = 0x09da;\n            var1 = arg0;\n            func_0C84(var1);\n            goto label_09DA;\n        }\n    }\n    \n    function func_0AC9(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x03;\n        var var1 = 0x00;\n        var temp2 = arg1;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + var1], [0x31af64a57c886d63ef4833d8e75bb8b0844d35462e568f986e055880c0228893, stack[-2] & 0x02 ** 0xa0 - 0x01, storage[keccak256(memory[0x00:0x40])], stack[-1]]);\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x01;\n        var temp3 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x00;\n        var temp4 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        arg1 = temp2 + 0x01;\n        var var0 = temp3 * temp4;\n    \n        if (arg1 <= storage[keccak256(memory[0x00:0x40]) + 0x06]) {\n            var temp5 = arg1;\n            memory[0x00:0x20] = temp5;\n            memory[0x20:0x40] = 0x00;\n            var temp6 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp5 + ~0x00;\n            memory[0x20:0x40] = 0x02;\n            var0 = var0 - temp6 - storage[0x0d] * storage[keccak256(memory[0x00:0x40])];\n        \n            if (temp5 <= 0x02) {\n            label_0C4E:\n                var1 = 0x00;\n                memory[0x00:0x20] = arg1 + ~0x00;\n                memory[0x20:0x40] = 0x02;\n            \n                if (var1 >= storage[keccak256(memory[0x00:0x40])]) {\n                label_0C7E:\n                    return;\n                } else {\n                label_0C6E:\n                    var var2 = 0x0c76;\n                    var var3 = arg0;\n                    func_0822(var3);\n                    var1 = var1 + 0x01;\n                    memory[0x00:0x20] = arg1 + ~0x00;\n                    memory[0x20:0x40] = 0x02;\n                \n                    if (var1 >= storage[keccak256(memory[0x00:0x40])]) { goto label_0C7E; }\n                    else { goto label_0C6E; }\n                }\n            } else {\n            label_0BD4:\n                var temp7 = arg0;\n                var temp8 = temp7 & 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp8;\n                memory[0x20:0x40] = 0x03;\n                var temp9 = var0;\n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x7fa9aafeb8bb803d77de5d84bc2f2edbd842ca91b20cd5020aa21dfe26ab0be9, stack[-4] & 0x02 ** 0xa0 - 0x01, storage[keccak256(memory[0x00:0x40])], stack[-2]]);\n                var temp10 = memory[0x40:0x60];\n                var temp11;\n                temp11, memory[temp10:temp10 + 0x00] = address(temp7 & 0x02 ** 0xa0 - 0x01).call.gas(!temp9 * 0x08fc).value(temp9)(memory[temp10:temp10 + 0x00]);\n                var2 = !temp11;\n            \n                if (!var2) { goto label_0C4E; }\n            \n                var temp12 = returndata.length;\n                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp13 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp13;\n            memory[0x20:0x40] = 0x03;\n            var temp14 = keccak256(memory[0x00:0x40]);\n            var temp15 = temp14 + 0x06;\n            storage[temp15] = storage[temp15] + 0x01;\n            var temp16 = arg1;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xe29dcee3c35f6da23620bdf73886de3685891aa12891fb4e5109f52dde5939ac, stack[-4] & 0x02 ** 0xa0 - 0x01, storage[keccak256(memory[0x00:0x40])], stack[-3]]);\n            memory[0x00:0x20] = temp16;\n            memory[0x20:0x40] = 0x00;\n            var temp17 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp16 + ~0x00;\n            memory[0x20:0x40] = 0x02;\n            var0 = var0 - temp17 - storage[0x0d] * storage[keccak256(memory[0x00:0x40])];\n        \n            if (temp16 <= 0x02) { goto label_0C4E; }\n            else { goto label_0BD4; }\n        }\n    }\n    \n    function func_0C84(var arg0) {\n        var temp0 = arg0;\n        var temp1 = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x03;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x7fa9aafeb8bb803d77de5d84bc2f2edbd842ca91b20cd5020aa21dfe26ab0be9, stack[-1] & 0x02 ** 0xa0 - 0x01, storage[keccak256(memory[0x00:0x40])], storage[0x0d]]);\n        var temp2 = storage[0x0d];\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + 0x00]);\n        var var0 = !temp4;\n    \n        if (!var0) { return; }\n    \n        var temp5 = returndata.length;\n        memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 52.50033760070801,
	"usage": {
		"completion_tokens": 619,
		"prompt_tokens": 9527,
		"total_tokens": 10146
	}
}