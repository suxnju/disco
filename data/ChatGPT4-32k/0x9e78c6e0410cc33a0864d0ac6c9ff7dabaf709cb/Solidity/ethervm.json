{
	"address": "0x9e78c6e0410cc33a0864d0ac6c9ff7dabaf709cb",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the given decompiled code, here is the respective Solidity code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Contract {\n    address private owner;\n    uint256 private tokenTotalSupply;\n    uint256 private tokenPrice;\n    mapping(address => uint256) private balances;\n    mapping(address => mapping(address => uint256)) private allowances;\n    mapping(bytes32 => Order) private orders;\n    \n    struct Order {\n        address user;\n        address tokenGet;\n        uint256 amountGet;\n        address tokenGive;\n        uint256 amountGive;\n        uint256 expires;\n        uint256 nonce;\n        bool active;\n    }\n    \n    modifier onlyOwner {\n        require(msg.sender == owner, \"Not contract owner\");\n        _;\n    }\n    \n    constructor() {\n        owner = msg.sender;\n    }\n    \n    function setTotalSupply(uint256 _tokenTotalSupply) public onlyOwner {\n        tokenTotalSupply = _tokenTotalSupply;\n    }\n    \n    function setTokenPrice(uint256 _tokenPrice) public onlyOwner {\n        tokenPrice = _tokenPrice;\n    }\n    \n    function createOrder(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires) public {\n        bytes32 orderId = keccak256(abi.encodePacked(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, msg.sender));\n        Order memory order = Order({\n            user: msg.sender,\n            tokenGet: _tokenGet,\n            amountGet: _amountGet,\n            tokenGive: _tokenGive,\n            amountGive: _amountGive,\n            expires: _expires,\n            nonce: 0,\n            active: true\n        });\n        orders[orderId] = order;\n    }\n    \n    function cancelOrder(bytes32 _orderId) public {\n        require(orders[_orderId].user == msg.sender, \"Not order creator\");\n        orders[_orderId].active = false;\n    }\n    \n    function transfer(address _to, uint256 _value) public {\n        require(balances[msg.sender] >= _value, \"Insufficient balance\");\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n    }\n    \n    function approve(address _spender, uint256 _value) public {\n        allowances[msg.sender][_spender] = _value;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) public {\n        require(balances[_from] >= _value, \"Insufficient balance\");\n        require(allowances[_from][msg.sender] >= _value, \"Insufficient allowance\");\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowances[_from][msg.sender] -= _value;\n    }\n}\n```\n\nPlease note that the given decompiled code is a bit complex with a lot of conditions and calculations. This Solidity code is a simplified version based on the main operations such as total supply setting, token price setting, order creation & cancellation, and token transfers. The actual contract may contain additional logic for handling edge cases and specific business rules.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474634,
	"id": "chatcmpl-8MvQAil8p5wwrLaSL7ju1qlPKb2Gc",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] != 0x18160ddd) {\n            if (memory[0x00:0x20] != 0x6a054250) {\n                if (memory[0x00:0x20] != 0x03714709) {\n                    if (memory[0x00:0x20] == 0x587566ef) {\n                        memory[0x0140:0x0164] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x24];\n                    \n                        if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x04) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x0500:0x0520] = 0x03;\n                        memory[0x0520:0x0540] = 0x6574680000000000000000000000000000000000000000000000000000000000;\n                    \n                        if (keccak256(memory[0x0140 + 0x20:0x0140 + 0x20 + memory[0x0140:0x0160]]) != keccak256(memory[0x0500 + 0x20:0x0500 + 0x20 + memory[0x0500:0x0520]])) {\n                            memory[0x0200:0x0220] = 0x04;\n                            memory[0x0220:0x0240] = 0x7573647400000000000000000000000000000000000000000000000000000000;\n                        \n                            if (memory[0x0160:0x0180] != memory[0x0220:0x0240]) {\n                                memory[0x00:0x20] = 0x00;\n                                return memory[0x00:0x20];\n                            } else {\n                                var temp111 = storage[0x05];\n                                var0 = temp111;\n                                var temp112 = msg.data[0x24:0x44];\n                                var1 = temp112;\n                                var2 = var0 * var1;\n                            \n                                if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = var2;\n                                var1 = storage[0x03];\n                                var2 = var1;\n                            \n                                if (!var2) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x0260:0x0280] = var0 / var2;\n                                memory[0x0280:0x02a0] = storage[0x07];\n                                memory[0x02a0:0x02c0] = 0x08c379a0;\n                                memory[0x02c0:0x02e0] = 0x20;\n                                memory[0x02e0:0x0300] = 0x20;\n                                memory[0x0300:0x0320] = 0x4e6f20656e6f75676820746f6b656e7320696e2074686520636f6e7472616374;\n                                var temp113 = memory[0x0260:0x0280];\n                                memory[0xe0:0x0100] = storage[0x15];\n                                memory[0xc0:0xe0] = 0x0a;\n                            \n                                if (storage[keccak256(memory[0xc0:0x0100])] < temp113) { revert(memory[0x02bc:0x0340]); }\n                            \n                                memory[0x0340:0x0360] = 0x08c379a0;\n                                memory[0x0360:0x0380] = 0x20;\n                                memory[0x0380:0x03a0] = 0x10;\n                                memory[0x03a0:0x03c0] = 0x4e6f205553445420726563656976656400000000000000000000000000000000;\n                                var temp114 = memory[0x0280:0x02a0];\n                                var0 = temp114;\n                                var1 = msg.data[0x24:0x44];\n                            \n                                if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                            \n                                if (storage[0x06] != var0 + var1) { revert(memory[0x035c:0x03e0]); }\n                            \n                                if (!address(storage[0x15]).code.length) { revert(memory[0x00:0x00]); }\n                            \n                                if (!(address(this) ~ storage[0x15])) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x03e0:0x0400] = 0xa9059cbb;\n                                memory[0x0400:0x0420] = msg.sender;\n                                memory[0x0420:0x0440] = memory[0x0260:0x0280];\n                                var temp115;\n                                temp115, memory[0x0480:0x04a0] = address(storage[0x15]).call.gas(msg.gas)(memory[0x03fc:0x0440]);\n                            \n                                if (!temp115) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x00:0x20] = 0x01;\n                                return memory[0x00:0x20];\n                            }\n                        } else {\n                            var temp116 = storage[0x04];\n                            var0 = temp116;\n                            var temp117 = msg.data[0x24:0x44];\n                            var1 = temp117;\n                            var2 = var0 * var1;\n                        \n                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = var2;\n                            var1 = storage[0x03];\n                            var2 = var1;\n                        \n                            if (!var2) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x0560:0x0580] = var0 / var2;\n                            memory[0x0580:0x05a0] = storage[0x06];\n                            memory[0x05a0:0x05c0] = 0x08c379a0;\n                            memory[0x05c0:0x05e0] = 0x20;\n                            memory[0x05e0:0x0600] = 0x20;\n                            memory[0x0600:0x0620] = 0x4e6f20656e6f75676820746f6b656e7320696e2074686520636f6e7472616374;\n                            var temp118 = memory[0x0560:0x0580];\n                            memory[0xe0:0x0100] = storage[0x15];\n                            memory[0xc0:0xe0] = 0x0a;\n                        \n                            if (storage[keccak256(memory[0xc0:0x0100])] < temp118) { revert(memory[0x05bc:0x0640]); }\n                        \n                            memory[0x0640:0x0660] = 0x08c379a0;\n                            memory[0x0660:0x0680] = 0x20;\n                            memory[0x0680:0x06a0] = 0x0f;\n                            memory[0x06a0:0x06c0] = 0x4e6f206574682072656365697665640000000000000000000000000000000000;\n                            var temp119 = memory[0x0580:0x05a0];\n                            var0 = temp119;\n                            var1 = msg.data[0x24:0x44];\n                        \n                            if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                        \n                            if (storage[0x06] != var0 + var1) { revert(memory[0x065c:0x06e0]); }\n                        \n                            if (!address(storage[0x15]).code.length) { revert(memory[0x00:0x00]); }\n                        \n                            if (!(address(this) ~ storage[0x15])) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x06e0:0x0700] = 0xa9059cbb;\n                            memory[0x0700:0x0720] = msg.sender;\n                            memory[0x0720:0x0740] = memory[0x0560:0x0580];\n                            var temp120;\n                            temp120, memory[0x0780:0x07a0] = address(storage[0x15]).call.gas(msg.gas)(memory[0x06fc:0x0740]);\n                        \n                            if (!temp120) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x00:0x20] = 0x01;\n                            return memory[0x00:0x20];\n                        }\n                    } else if (memory[0x00:0x20] != 0x97a2d0eb) {\n                        if (memory[0x00:0x20] != 0x77884378) {\n                            if (0x00) {\n                                memory[0x0160:0x0180] = var-1;\n                                memory[0x0140:0x0160] = var-2;\n                            \n                                if (!storage[0x09]) { revert(memory[0x00:0x00]); }\n                            \n                                if (!(storage[0x11] ~ 0x00)) { revert(memory[0x00:0x00]); }\n                            \n                                var-2 = 0x02;\n                                var-1 = storage[var-2];\n                                var0 = memory[0x0140:0x0160];\n                            \n                                if (var-1 < var0) { revert(memory[0x00:0x00]); }\n                            \n                                storage[var-2] = var-1 - var0;\n                                memory[0xe0:0x0100] = storage[0x11];\n                                memory[0xc0:0xe0] = 0x0a;\n                                var-2 = keccak256(memory[0xc0:0x0100]);\n                                var-1 = storage[var-2];\n                                var0 = memory[0x0140:0x0160];\n                            \n                                if (var-1 < var0) { revert(memory[0x00:0x00]); }\n                            \n                                storage[var-2] = var-1 - var0;\n                                memory[0x0180:0x01a0] = memory[0x0140:0x0160];\n                                log(memory[0x0180:0x01a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x11], 0x00]);\n                                // Error: Could not resolve jump destination!\n                            } else if (0x00) {\n                                // Error: StackRead before write???\n                                var var-2;\n                                // Error: StackRead before write???\n                                var var-1;\n                                memory[0x0160:0x0180] = var-1;\n                                memory[0x0140:0x0160] = var-2;\n                                var-2 = memory[0x0140:0x0160];\n                                var-1 = memory[0x0160:0x0180];\n                                memory[0x01a0:0x01c0] = 0x9b1f9e74;\n                                memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                var0 = memory[0x01c0:0x01e0];\n                                var1 = 0x06;\n                                // Unhandled termination\n                            } else if (memory[0x00:0x20] != 0xdd62ed3e) {\n                                if (memory[0x00:0x20] != 0xa638f2e2) {\n                                    if (memory[0x00:0x20] != 0x939624ab) {\n                                        if (memory[0x00:0x20] != 0x49c662b8) {\n                                            if (memory[0x00:0x20] != 0xa9059cbb) {\n                                                if (memory[0x00:0x20] != 0x23b872dd) {\n                                                    if (memory[0x00:0x20] != 0xa6f12e85) {\n                                                        if (memory[0x00:0x20] != 0x60dded11) {\n                                                            if (memory[0x00:0x20] != 0x095ea7b3) {\n                                                                if (memory[0x00:0x20] != 0x048e45ca) {\n                                                                    if (memory[0x00:0x20] != 0xc8c01a55) {\n                                                                        if (memory[0x00:0x20] != 0x06fdde03) {\n                                                                            if (memory[0x00:0x20] != 0x95d89b41) {\n                                                                                if (memory[0x00:0x20] != 0x313ce567) {\n                                                                                    if (memory[0x00:0x20] != 0x70a08231) {\n                                                                                        if (memory[0x00:0x20] != 0xfe92aff1) {\n                                                                                            if (memory[0x00:0x20] != 0xbe6bf389) {\n                                                                                                if (memory[0x00:0x20] != 0x421f8e14) {\n                                                                                                    if (memory[0x00:0x20] != 0xe9562a6d) {\n                                                                                                        if (memory[0x00:0x20] != 0xf94be3af) {\n                                                                                                            if (memory[0x00:0x20] != 0xbb3cb31b) {\n                                                                                                                if (memory[0x00:0x20] != 0x8f33367a) {\n                                                                                                                    if (memory[0x00:0x20] != 0xb53574ab) {\n                                                                                                                        if (memory[0x00:0x20] != 0xa1bb138e) {\n                                                                                                                            if (memory[0x00:0x20] != 0x674b392e) {\n                                                                                                                                if (memory[0x00:0x20] != 0x0410bf99) {\n                                                                                                                                    if (memory[0x00:0x20] != 0x1952ddbd) {\n                                                                                                                                        if (memory[0x00:0x20] != 0xb993ed4b) { revert(memory[0x00:0x00]); }\n                                                                                                                                    \n                                                                                                                                        if (msg.value) { revert(memory[0x00:0x00]); }\n                                                                                                                                    \n                                                                                                                                        var var0 = msg.data[0x04:0x24];\n                                                                                                                                    \n                                                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                                    \n                                                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                                                                                        var temp0 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                                        memory[0xc0:0xe0] = temp0;\n                                                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x06];\n                                                                                                                                        return memory[0x00:0x20];\n                                                                                                                                    } else if (!msg.value) {\n                                                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                                                    \n                                                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                                    \n                                                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                                                                                        var temp1 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                                        memory[0xc0:0xe0] = temp1;\n                                                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x05];\n                                                                                                                                        return memory[0x00:0x20];\n                                                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                                                } else if (!msg.value) {\n                                                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                                                \n                                                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                                \n                                                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                                    memory[0xc0:0xe0] = 0x10;\n                                                                                                                                    var temp2 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                                    memory[0xc0:0xe0] = temp2;\n                                                                                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x04];\n                                                                                                                                    return memory[0x00:0x20];\n                                                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                                                            } else if (!msg.value) {\n                                                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                                                            \n                                                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                            \n                                                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                                memory[0xc0:0xe0] = 0x10;\n                                                                                                                                var temp3 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                                memory[0xc0:0xe0] = temp3;\n                                                                                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                                                                                return memory[0x00:0x20];\n                                                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                                                        } else if (!msg.value) {\n                                                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                                                        \n                                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                        \n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                            memory[0xc0:0xe0] = 0x10;\n                                                                                                                            var temp4 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                            memory[0xc0:0xe0] = temp4;\n                                                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                                                                            return memory[0x00:0x20];\n                                                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                                                    } else if (!msg.value) {\n                                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                                    \n                                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                    \n                                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                                                                        var temp5 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                        memory[0xc0:0xe0] = temp5;\n                                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                                                                                                        return memory[0x00:0x20];\n                                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                                } else if (!msg.value) {\n                                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                                \n                                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                \n                                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                    memory[0xc0:0xe0] = 0x10;\n                                                                                                                    var temp6 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                    memory[0xc0:0xe0] = temp6;\n                                                                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                                                                    return memory[0x00:0x20];\n                                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                                            } else if (!msg.value) {\n                                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                                            \n                                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                            \n                                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                memory[0xc0:0xe0] = 0x0f;\n                                                                                                                var temp7 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                memory[0xc0:0xe0] = temp7;\n                                                                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                                                                return memory[0x00:0x20];\n                                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                                        } else if (!msg.value) {\n                                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                                        \n                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                        \n                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                            memory[0xc0:0xe0] = 0x0f;\n                                                                                                            var temp8 = keccak256(memory[0xc0:0x0100]);\n                                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                            memory[0xc0:0xe0] = temp8;\n                                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                                                            return memory[0x00:0x20];\n                                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                                    } else if (!msg.value) {\n                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                    \n                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                    \n                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                        memory[0xc0:0xe0] = 0x0f;\n                                                                                                        var temp9 = keccak256(memory[0xc0:0x0100]);\n                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                        memory[0xc0:0xe0] = temp9;\n                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                                                                                        return memory[0x00:0x20];\n                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                } else if (!msg.value) {\n                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                \n                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                \n                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                    memory[0xc0:0xe0] = 0x0f;\n                                                                                                    var temp10 = keccak256(memory[0xc0:0x0100]);\n                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                    memory[0xc0:0xe0] = temp10;\n                                                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                                                    return memory[0x00:0x20];\n                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                            } else if (!msg.value) {\n                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                            \n                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                            \n                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                memory[0xc0:0xe0] = 0x0c;\n                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                return memory[0x00:0x20];\n                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                        } else if (!msg.value) {\n                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                        \n                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                        \n                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                            memory[0xc0:0xe0] = 0x0b;\n                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                            return memory[0x00:0x20];\n                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                    } else if (!msg.value) {\n                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                    \n                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                    \n                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                        return memory[0x00:0x20];\n                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                } else if (!msg.value) {\n                                                                                    memory[0x00:0x20] = storage[0x08];\n                                                                                    return memory[0x00:0x20];\n                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                            } else if (!msg.value) {\n                                                                                var0 = 0x01;\n                                                                                memory[0xc0:0xe0] = var0;\n                                                                                var var1 = keccak256(memory[0xc0:0xe0]);\n                                                                                var var2 = 0x0180;\n                                                                                var temp11 = storage[var1] + 0x20;\n                                                                                var var3 = temp11;\n                                                                                var var4 = 0x0120;\n                                                                                memory[var4:var4 + 0x20] = 0x00;\n                                                                                var var5 = 0x02;\n                                                                            \n                                                                                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_2662; }\n                                                                            \n                                                                            label_2666:\n                                                                                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                                var temp12 = var4;\n                                                                                var temp13 = memory[temp12:temp12 + 0x20] + 0x01;\n                                                                                memory[temp12:temp12 + 0x20] = temp13;\n                                                                            \n                                                                                if (var5 == temp13) { goto label_2688; }\n                                                                            \n                                                                                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_2666; }\n                                                                            \n                                                                            label_2662:\n                                                                            \n                                                                            label_2688:\n                                                                                var temp14 = memory[0x0180:0x01a0];\n                                                                                var temp15 = (temp14 + 0x1f) - temp14 - 0x01 % 0x20 - temp14;\n                                                                                memory[temp14 + 0x01a0:temp14 + 0x01a0 + temp15] = msg.data[msg.data.length:msg.data.length + temp15];\n                                                                                memory[0x0160:0x0180] = 0x20;\n                                                                                var temp16 = memory[0x0180:0x01a0] + 0x40;\n                                                                                return memory[0x0160:0x0160 + (temp16 + 0x1f) - temp16 - 0x01 % 0x20];\n                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                        } else if (!msg.value) {\n                                                                            var0 = 0x00;\n                                                                            memory[0xc0:0xe0] = var0;\n                                                                            var1 = keccak256(memory[0xc0:0xe0]);\n                                                                            var2 = 0x0180;\n                                                                            var temp17 = storage[var1] + 0x20;\n                                                                            var3 = temp17;\n                                                                            var4 = 0x0120;\n                                                                            memory[var4:var4 + 0x20] = 0x00;\n                                                                            var5 = 0x03;\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_25AE; }\n                                                                        \n                                                                        label_25B2:\n                                                                            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                            var temp18 = var4;\n                                                                            var temp19 = memory[temp18:temp18 + 0x20] + 0x01;\n                                                                            memory[temp18:temp18 + 0x20] = temp19;\n                                                                        \n                                                                            if (var5 == temp19) { goto label_25D4; }\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_25B2; }\n                                                                        \n                                                                        label_25AE:\n                                                                        \n                                                                        label_25D4:\n                                                                            var temp20 = memory[0x0180:0x01a0];\n                                                                            var temp21 = (temp20 + 0x1f) - temp20 - 0x01 % 0x20 - temp20;\n                                                                            memory[temp20 + 0x01a0:temp20 + 0x01a0 + temp21] = msg.data[msg.data.length:msg.data.length + temp21];\n                                                                            memory[0x0160:0x0180] = 0x20;\n                                                                            var temp22 = memory[0x0180:0x01a0] + 0x40;\n                                                                            return memory[0x0160:0x0160 + (temp22 + 0x1f) - temp22 - 0x01 % 0x20];\n                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                    } else if (!msg.value) {\n                                                                        var0 = msg.data[0x04:0x24];\n                                                                    \n                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var0 = block.timestamp;\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp23 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp23;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                        var temp24 = storage[keccak256(memory[0xc0:0xe0]) + 0x05];\n                                                                        var1 = temp24;\n                                                                        var2 = 0x03f480;\n                                                                    \n                                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        if (var1 + var2 > var0) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp25 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp25;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    \n                                                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x06]) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp26 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp26;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    \n                                                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp27 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp27;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp28 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp28;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp29 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp29;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                        memory[0x01a0:0x01c0] = storage[0x03];\n                                                                    \n                                                                        if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                                            var0 = memory[0x01a0:0x01c0];\n                                                                            var1 = memory[0x0180:0x01a0];\n                                                                        \n                                                                            if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp39 = var0 - var1;\n                                                                            var0 = temp39;\n                                                                            var temp40 = memory[0x0160:0x0180];\n                                                                            var1 = temp40;\n                                                                            var2 = var0 * var1;\n                                                                        \n                                                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var0 = var2;\n                                                                            var1 = storage[0x03];\n                                                                            var2 = var1;\n                                                                        \n                                                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            memory[0x0240:0x0260] = var0 / var2;\n                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                        \n                                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 - var2;\n                                                                            memory[0xe0:0x0100] = storage[0x12];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0240:0x0260];\n                                                                        \n                                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 - var2;\n                                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                            var3 = memory[0x01a0:0x01c0];\n                                                                            var4 = memory[0x0180:0x01a0];\n                                                                            var5 = var4;\n                                                                        \n                                                                            if (!var5) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp41 = var3 / var5;\n                                                                            var3 = temp41;\n                                                                            var temp42 = var2;\n                                                                            var4 = temp42 * var3;\n                                                                        \n                                                                            if (!((var4 / temp42 == var3) | !temp42)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var2 = var4;\n                                                                            var temp43 = var1;\n                                                                        \n                                                                            if (temp43 + var2 < temp43) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 + var2;\n                                                                            var0 = memory[0x0160:0x0180];\n                                                                            var1 = memory[0x01a0:0x01c0];\n                                                                            var2 = memory[0x0180:0x01a0];\n                                                                            var3 = var2;\n                                                                        \n                                                                            if (!var3) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp44 = var1 / var3;\n                                                                            var1 = temp44;\n                                                                            var temp45 = var0;\n                                                                            var2 = temp45 * var1;\n                                                                        \n                                                                            if (!((var2 / temp45 == var1) | !temp45)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            memory[0x0260:0x0280] = var2;\n                                                                            log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                            memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                                            log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x12], memory[0x0140:0x0160]]);\n                                                                            goto label_24C0;\n                                                                        } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                        \n                                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 - var2;\n                                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var temp30 = storage[var0];\n                                                                            var1 = temp30;\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                        \n                                                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 + var2;\n                                                                            memory[0x01c0:0x01e0] = memory[0x0160:0x0180];\n                                                                            log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                        \n                                                                        label_24BF:\n                                                                        \n                                                                        label_24C0:\n                                                                            var0 = memory[0x0140:0x0160];\n                                                                            var1 = memory[0x0160:0x0180];\n                                                                            var2 = memory[0x0180:0x01a0];\n                                                                            var3 = memory[0x01a0:0x01c0];\n                                                                            memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                            memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                                            var4 = memory[0x02e0:0x0300];\n                                                                            var5 = 0x06;\n                                                                            // Unhandled termination\n                                                                        } else {\n                                                                            var0 = memory[0x0180:0x01a0];\n                                                                            var1 = memory[0x01a0:0x01c0];\n                                                                        \n                                                                            if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp31 = var0 - var1;\n                                                                            var0 = temp31;\n                                                                            var temp32 = memory[0x0160:0x0180];\n                                                                            var1 = temp32;\n                                                                            var2 = var0 * var1;\n                                                                        \n                                                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var0 = var2;\n                                                                            var1 = storage[0x03];\n                                                                            var2 = var1;\n                                                                        \n                                                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            memory[0x01e0:0x0200] = var0 / var2;\n                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                        \n                                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 - var2;\n                                                                            memory[0xe0:0x0100] = storage[0x12];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var temp33 = storage[var0];\n                                                                            var1 = temp33;\n                                                                            var2 = memory[0x01e0:0x0200];\n                                                                        \n                                                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 + var2;\n                                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                            var3 = memory[0x01a0:0x01c0];\n                                                                            var4 = memory[0x0180:0x01a0];\n                                                                            var5 = var4;\n                                                                        \n                                                                            if (!var5) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp34 = var3 / var5;\n                                                                            var3 = temp34;\n                                                                            var temp35 = var2;\n                                                                            var4 = temp35 * var3;\n                                                                        \n                                                                            if (!((var4 / temp35 == var3) | !temp35)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var2 = var4;\n                                                                            var temp36 = var1;\n                                                                        \n                                                                            if (temp36 + var2 < temp36) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 + var2;\n                                                                            var0 = memory[0x0160:0x0180];\n                                                                            var1 = memory[0x01a0:0x01c0];\n                                                                            var2 = memory[0x0180:0x01a0];\n                                                                            var3 = var2;\n                                                                        \n                                                                            if (!var3) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp37 = var1 / var3;\n                                                                            var1 = temp37;\n                                                                            var temp38 = var0;\n                                                                            var2 = temp38 * var1;\n                                                                        \n                                                                            if (!((var2 / temp38 == var1) | !temp38)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            memory[0x0200:0x0220] = var2;\n                                                                            log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                            memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                                            log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x04:0x24], storage[0x12]]);\n                                                                            goto label_24BF;\n                                                                        }\n                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                } else if (!msg.value) {\n                                                                    var0 = msg.data[0x24:0x44];\n                                                                \n                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var0 = msg.data[0x44:0x64];\n                                                                \n                                                                    if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    if (msg.sender != storage[0x13]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = 0x10;\n                                                                    var temp46 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = temp46;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = 0x10;\n                                                                    var temp47 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = temp47;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = 0x10;\n                                                                    var temp48 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = temp48;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                    memory[0x01a0:0x01c0] = storage[0x03];\n                                                                \n                                                                    if (msg.data[0x44:0x64]) {\n                                                                        memory[0xe0:0x0100] = msg.sender;\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0x0340:0x0360] = memory[0x0140:0x0160];\n                                                                        log(memory[0x0340:0x0360], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, msg.data[0x24:0x44]]);\n                                                                        memory[0x00:0x20] = 0x01;\n                                                                        return memory[0x00:0x20];\n                                                                    } else if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                                        var0 = memory[0x01a0:0x01c0];\n                                                                        var1 = memory[0x0180:0x01a0];\n                                                                    \n                                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp57 = var0 - var1;\n                                                                        var0 = temp57;\n                                                                        var temp58 = memory[0x0140:0x0160];\n                                                                        var1 = temp58;\n                                                                        var2 = var0 * var1;\n                                                                    \n                                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var0 = var2;\n                                                                        var1 = storage[0x03];\n                                                                        var2 = var1;\n                                                                    \n                                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0240:0x0260] = var0 / var2;\n                                                                        memory[0xe0:0x0100] = msg.sender;\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = storage[0x12];\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0240:0x0260];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        var4 = memory[0x0180:0x01a0];\n                                                                        var5 = var4;\n                                                                    \n                                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp59 = var3 / var5;\n                                                                        var3 = temp59;\n                                                                        var temp60 = var2;\n                                                                        var4 = temp60 * var3;\n                                                                    \n                                                                        if (!((var4 / temp60 == var3) | !temp60)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var2 = var4;\n                                                                        var temp61 = var1;\n                                                                    \n                                                                        if (temp61 + var2 < temp61) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = var2;\n                                                                    \n                                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp62 = var1 / var3;\n                                                                        var1 = temp62;\n                                                                        var temp63 = var0;\n                                                                        var2 = temp63 * var1;\n                                                                    \n                                                                        if (!((var2 / temp63 == var1) | !temp63)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0260:0x0280] = var2;\n                                                                        log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x24:0x44], memory[0x0160:0x0180]]);\n                                                                        memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                                        log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x12], memory[0x0160:0x0180]]);\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x0160:0x0180];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                        memory[0x02e0:0x0300] = memory[0x0140:0x0160];\n                                                                        var4 = memory[0x02e0:0x0300];\n                                                                        var5 = 0x06;\n                                                                        // Unhandled termination\n                                                                    } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                                        memory[0xe0:0x0100] = msg.sender;\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                                                        log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x24:0x44], memory[0x0160:0x0180]]);\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x0160:0x0180];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                        memory[0x02e0:0x0300] = memory[0x0140:0x0160];\n                                                                        var4 = memory[0x02e0:0x0300];\n                                                                        var5 = 0x06;\n                                                                        // Unhandled termination\n                                                                    } else {\n                                                                        var0 = memory[0x0180:0x01a0];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                    \n                                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp49 = var0 - var1;\n                                                                        var0 = temp49;\n                                                                        var temp50 = memory[0x0140:0x0160];\n                                                                        var1 = temp50;\n                                                                        var2 = var0 * var1;\n                                                                    \n                                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var0 = var2;\n                                                                        var1 = storage[0x03];\n                                                                        var2 = var1;\n                                                                    \n                                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x01e0:0x0200] = var0 / var2;\n                                                                        memory[0xe0:0x0100] = msg.sender;\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = storage[0x12];\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var temp51 = storage[var0];\n                                                                        var1 = temp51;\n                                                                        var2 = memory[0x01e0:0x0200];\n                                                                    \n                                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        var4 = memory[0x0180:0x01a0];\n                                                                        var5 = var4;\n                                                                    \n                                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp52 = var3 / var5;\n                                                                        var3 = temp52;\n                                                                        var temp53 = var2;\n                                                                        var4 = temp53 * var3;\n                                                                    \n                                                                        if (!((var4 / temp53 == var3) | !temp53)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var2 = var4;\n                                                                        var temp54 = var1;\n                                                                    \n                                                                        if (temp54 + var2 < temp54) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = var2;\n                                                                    \n                                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp55 = var1 / var3;\n                                                                        var1 = temp55;\n                                                                        var temp56 = var0;\n                                                                        var2 = temp56 * var1;\n                                                                    \n                                                                        if (!((var2 / temp56 == var1) | !temp56)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0200:0x0220] = var2;\n                                                                        log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0160:0x0180]]);\n                                                                        memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                                        log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x24:0x44], storage[0x12]]);\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x0160:0x0180];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                        memory[0x02e0:0x0300] = memory[0x0140:0x0160];\n                                                                        var4 = memory[0x02e0:0x0300];\n                                                                        var5 = 0x06;\n                                                                        // Unhandled termination\n                                                                    }\n                                                                } else { revert(memory[0x00:0x00]); }\n                                                            } else if (!msg.value) {\n                                                                var0 = msg.data[0x04:0x24];\n                                                            \n                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                memory[0xe0:0x0100] = msg.sender;\n                                                                memory[0xc0:0xe0] = 0x0d;\n                                                                var temp64 = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                memory[0xc0:0xe0] = temp64;\n                                                                storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                                                memory[0x0140:0x0160] = msg.data[0x24:0x44];\n                                                                log(memory[0x0140:0x0160], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, msg.data[0x04:0x24]]);\n                                                                memory[0x00:0x20] = 0x01;\n                                                                return memory[0x00:0x20];\n                                                            } else { revert(memory[0x00:0x00]); }\n                                                        } else if (!msg.value) {\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x10;\n                                                            var temp65 = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                            memory[0xc0:0xe0] = temp65;\n                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        \n                                                            if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0x0140:0x0160] = storage[0x13];\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x10;\n                                                            var temp66 = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                            memory[0xc0:0xe0] = temp66;\n                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x10;\n                                                            var temp67 = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                            memory[0xc0:0xe0] = temp67;\n                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0])];\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var temp68 = storage[var0];\n                                                            var1 = temp68;\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 + var2;\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x0e;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x10;\n                                                            var temp69 = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                            memory[0xc0:0xe0] = temp69;\n                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                            storage[keccak256(memory[0xc0:0xe0]) + 0x06] = 0x01;\n                                                            memory[0x01a0:0x01c0] = memory[0x0160:0x0180];\n                                                            log(memory[0x01a0:0x01c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, memory[0x0140:0x0160]]);\n                                                            memory[0x00:0x20] = 0x01;\n                                                            return memory[0x00:0x20];\n                                                        } else { revert(memory[0x00:0x00]); }\n                                                    } else if (!msg.value) {\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x10;\n                                                        var temp70 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp70;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                    \n                                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x10;\n                                                        var temp71 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp71;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0])];\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x10;\n                                                        var temp72 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp72;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x10;\n                                                        var temp73 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp73;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                        memory[0x01a0:0x01c0] = storage[0x03];\n                                                    \n                                                        if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                            var0 = memory[0x01a0:0x01c0];\n                                                            var1 = memory[0x0180:0x01a0];\n                                                        \n                                                            if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp83 = var0 - var1;\n                                                            var0 = temp83;\n                                                            var temp84 = memory[0x0160:0x0180];\n                                                            var1 = temp84;\n                                                            var2 = var0 * var1;\n                                                        \n                                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var0 = var2;\n                                                            var1 = storage[0x03];\n                                                            var2 = var1;\n                                                        \n                                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0x0240:0x0260] = var0 / var2;\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = storage[0x12];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0240:0x0260];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                            var3 = memory[0x01a0:0x01c0];\n                                                            var4 = memory[0x0180:0x01a0];\n                                                            var5 = var4;\n                                                        \n                                                            if (!var5) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp85 = var3 / var5;\n                                                            var3 = temp85;\n                                                            var temp86 = var2;\n                                                            var4 = temp86 * var3;\n                                                        \n                                                            if (!((var4 / temp86 == var3) | !temp86)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var2 = var4;\n                                                            var temp87 = var1;\n                                                        \n                                                            if (temp87 + var2 < temp87) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 + var2;\n                                                            var0 = memory[0x0160:0x0180];\n                                                            var1 = memory[0x01a0:0x01c0];\n                                                            var2 = memory[0x0180:0x01a0];\n                                                            var3 = var2;\n                                                        \n                                                            if (!var3) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp88 = var1 / var3;\n                                                            var1 = temp88;\n                                                            var temp89 = var0;\n                                                            var2 = temp89 * var1;\n                                                        \n                                                            if (!((var2 / temp89 == var1) | !temp89)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0x0260:0x0280] = var2;\n                                                            log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                            memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                            log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x12], memory[0x0140:0x0160]]);\n                                                            var0 = memory[0x0140:0x0160];\n                                                            var1 = memory[0x0160:0x0180];\n                                                            var2 = memory[0x0180:0x01a0];\n                                                            var3 = memory[0x01a0:0x01c0];\n                                                            memory[0x02c0:0x02e0] = 0x42966c68;\n                                                            memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                            var4 = memory[0x02e0:0x0300];\n                                                            var5 = 0x06;\n                                                            // Unhandled termination\n                                                        } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var temp74 = storage[var0];\n                                                            var1 = temp74;\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 + var2;\n                                                            memory[0x01c0:0x01e0] = memory[0x0160:0x0180];\n                                                            log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                            var0 = memory[0x0140:0x0160];\n                                                            var1 = memory[0x0160:0x0180];\n                                                            var2 = memory[0x0180:0x01a0];\n                                                            var3 = memory[0x01a0:0x01c0];\n                                                            memory[0x02c0:0x02e0] = 0x42966c68;\n                                                            memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                            var4 = memory[0x02e0:0x0300];\n                                                            var5 = 0x06;\n                                                            // Unhandled termination\n                                                        } else {\n                                                            var0 = memory[0x0180:0x01a0];\n                                                            var1 = memory[0x01a0:0x01c0];\n                                                        \n                                                            if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp75 = var0 - var1;\n                                                            var0 = temp75;\n                                                            var temp76 = memory[0x0160:0x0180];\n                                                            var1 = temp76;\n                                                            var2 = var0 * var1;\n                                                        \n                                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var0 = var2;\n                                                            var1 = storage[0x03];\n                                                            var2 = var1;\n                                                        \n                                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0x01e0:0x0200] = var0 / var2;\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = storage[0x12];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var temp77 = storage[var0];\n                                                            var1 = temp77;\n                                                            var2 = memory[0x01e0:0x0200];\n                                                        \n                                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 + var2;\n                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                            var3 = memory[0x01a0:0x01c0];\n                                                            var4 = memory[0x0180:0x01a0];\n                                                            var5 = var4;\n                                                        \n                                                            if (!var5) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp78 = var3 / var5;\n                                                            var3 = temp78;\n                                                            var temp79 = var2;\n                                                            var4 = temp79 * var3;\n                                                        \n                                                            if (!((var4 / temp79 == var3) | !temp79)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var2 = var4;\n                                                            var temp80 = var1;\n                                                        \n                                                            if (temp80 + var2 < temp80) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 + var2;\n                                                            var0 = memory[0x0160:0x0180];\n                                                            var1 = memory[0x01a0:0x01c0];\n                                                            var2 = memory[0x0180:0x01a0];\n                                                            var3 = var2;\n                                                        \n                                                            if (!var3) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp81 = var1 / var3;\n                                                            var1 = temp81;\n                                                            var temp82 = var0;\n                                                            var2 = temp82 * var1;\n                                                        \n                                                            if (!((var2 / temp82 == var1) | !temp82)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0x0200:0x0220] = var2;\n                                                            log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                            memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                            log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, storage[0x12]]);\n                                                            var0 = memory[0x0140:0x0160];\n                                                            var1 = memory[0x0160:0x0180];\n                                                            var2 = memory[0x0180:0x01a0];\n                                                            var3 = memory[0x01a0:0x01c0];\n                                                            memory[0x02c0:0x02e0] = 0x42966c68;\n                                                            memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                            var4 = memory[0x02e0:0x0300];\n                                                            var5 = 0x06;\n                                                            // Unhandled termination\n                                                        }\n                                                    } else { revert(memory[0x00:0x00]); }\n                                                } else if (!msg.value) {\n                                                    var0 = msg.data[0x04:0x24];\n                                                \n                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var0 = msg.data[0x24:0x44];\n                                                \n                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                \n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var0 = storage[keccak256(memory[0xc0:0x0100])];\n                                                    var1 = msg.data[0x44:0x64];\n                                                \n                                                    if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                \n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = 0x0e;\n                                                \n                                                    if (storage[keccak256(memory[0xc0:0x0100])] > var0 - var1) { revert(memory[0x00:0x00]); }\n                                                \n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                    var1 = storage[var0];\n                                                    var2 = msg.data[0x44:0x64];\n                                                \n                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                \n                                                    storage[var0] = var1 - var2;\n                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                    var temp90 = storage[var0];\n                                                    var1 = temp90;\n                                                    var2 = msg.data[0x44:0x64];\n                                                \n                                                    if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                \n                                                    storage[var0] = var1 + var2;\n                                                    var0 = msg.data[0x44:0x64];\n                                                    var1 = 0x64;\n                                                    var2 = var1;\n                                                \n                                                    if (!var2) { revert(memory[0x00:0x00]); }\n                                                \n                                                    memory[0x0140:0x0160] = var0 / var2;\n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = 0x0d;\n                                                    var temp91 = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0xe0:0x0100] = msg.sender;\n                                                    memory[0xc0:0xe0] = temp91;\n                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                    var1 = storage[var0];\n                                                    var2 = msg.data[0x44:0x64];\n                                                \n                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                \n                                                    storage[var0] = var1 - var2;\n                                                    memory[0x0160:0x0180] = msg.data[0x44:0x64];\n                                                    log(memory[0x0160:0x0180], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x04:0x24], msg.data[0x24:0x44]]);\n                                                    var0 = memory[0x0140:0x0160];\n                                                    var1 = memory[0x0160:0x0180];\n                                                    memory[0x01a0:0x01c0] = 0x42966c68;\n                                                    memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                                    var2 = memory[0x01c0:0x01e0];\n                                                    var3 = 0x06;\n                                                    // Unhandled termination\n                                                } else { revert(memory[0x00:0x00]); }\n                                            } else if (!msg.value) {\n                                                var0 = msg.data[0x04:0x24];\n                                            \n                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x0a;\n                                                var0 = storage[keccak256(memory[0xc0:0x0100])];\n                                                var1 = msg.data[0x24:0x44];\n                                            \n                                                if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x0e;\n                                            \n                                                if (storage[keccak256(memory[0xc0:0x0100])] > var0 - var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                var0 = msg.data[0x24:0x44];\n                                                var1 = 0x64;\n                                                var2 = var1;\n                                            \n                                                if (!var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0x0140:0x0160] = var0 / var2;\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x0a;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = msg.data[0x24:0x44];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = 0x0a;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var temp92 = storage[var0];\n                                                var1 = temp92;\n                                                var2 = msg.data[0x24:0x44];\n                                            \n                                                if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 + var2;\n                                                memory[0x0160:0x0180] = msg.data[0x24:0x44];\n                                                log(memory[0x0160:0x0180], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, msg.data[0x04:0x24]]);\n                                                var0 = memory[0x0140:0x0160];\n                                                var1 = memory[0x0160:0x0180];\n                                                memory[0x01a0:0x01c0] = 0x42966c68;\n                                                memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                                var2 = memory[0x01c0:0x01e0];\n                                                var3 = 0x06;\n                                                // Unhandled termination\n                                            } else { revert(memory[0x00:0x00]); }\n                                        } else if (!msg.value) {\n                                            var0 = msg.data[0x24:0x44];\n                                        \n                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0a;\n                                        \n                                            if (storage[keccak256(memory[0xc0:0x0100])] < msg.data[0x44:0x64]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x10;\n                                            var temp93 = keccak256(memory[0xc0:0x0100]);\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = temp93;\n                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                        \n                                            if (storage[keccak256(memory[0xc0:0xe0]) + 0x02]) { revert(memory[0x00:0x00]); }\n                                        \n                                            var0 = 0x015180;\n                                            var temp94 = msg.data[0x64:0x84];\n                                            var1 = temp94;\n                                            var2 = var0 * var1;\n                                        \n                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                        \n                                            var temp95 = var2;\n                                            var0 = temp95;\n                                            var1 = block.timestamp;\n                                        \n                                            if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x0140:0x0160] = var0 + var1;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x10;\n                                            var temp96 = keccak256(memory[0xc0:0x0100]);\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = temp96;\n                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                            var temp97 = keccak256(memory[0xc0:0xe0]);\n                                            storage[temp97] = msg.data[0x24:0x44];\n                                            storage[temp97 + 0x01] = msg.sender;\n                                            storage[temp97 + 0x02] = msg.data[0x44:0x64];\n                                            storage[temp97 + 0x03] = storage[0x03];\n                                            storage[temp97 + 0x04] = block.timestamp;\n                                            storage[temp97 + 0x05] = memory[0x0140:0x0160];\n                                            storage[temp97 + 0x06] = 0x00;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0e;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var temp98 = storage[var0];\n                                            var1 = temp98;\n                                            var2 = msg.data[0x44:0x64];\n                                        \n                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 + var2;\n                                            memory[0x00:0x20] = 0x01;\n                                            return memory[0x00:0x20];\n                                        } else { revert(memory[0x00:0x00]); }\n                                    } else if (!msg.value) {\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x0f;\n                                        var temp99 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp99;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    \n                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x01] <= 0x00) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x0f;\n                                        var temp100 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp100;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                        memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                        var0 = memory[0x0140:0x0160];\n                                        var1 = 0x03e8;\n                                        var2 = var1;\n                                    \n                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0x0160:0x0180] = var0 / var2;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x0f;\n                                        var temp101 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp101;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    \n                                        if (block.timestamp < storage[keccak256(memory[0xc0:0xe0]) + 0x03]) {\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0f;\n                                            var temp102 = keccak256(memory[0xc0:0x0100]);\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = temp102;\n                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                            var temp103 = keccak256(memory[0xc0:0xe0]);\n                                            storage[temp103] = msg.sender;\n                                            storage[temp103 + 0x01] = 0x00;\n                                            storage[temp103 + 0x02] = 0x00;\n                                            storage[temp103 + 0x03] = 0x00;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0e;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = memory[0x0140:0x0160];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0x00:0x20] = 0x01;\n                                            return memory[0x00:0x20];\n                                        } else {\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0a;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var temp104 = storage[var0];\n                                            var1 = temp104;\n                                            var2 = memory[0x0160:0x0180];\n                                        \n                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 + var2;\n                                            memory[0xe0:0x0100] = storage[0x12];\n                                            memory[0xc0:0xe0] = 0x0a;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = memory[0x0160:0x0180];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            var0 = 0x02;\n                                            var1 = storage[var0];\n                                            var2 = memory[0x0160:0x0180];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0x0180:0x01a0] = memory[0x0160:0x0180];\n                                            log(memory[0x0180:0x01a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x12], msg.sender]);\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0f;\n                                            var temp105 = keccak256(memory[0xc0:0x0100]);\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = temp105;\n                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                            var temp106 = keccak256(memory[0xc0:0xe0]);\n                                            storage[temp106] = msg.sender;\n                                            storage[temp106 + 0x01] = 0x00;\n                                            storage[temp106 + 0x02] = 0x00;\n                                            storage[temp106 + 0x03] = 0x00;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0e;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = memory[0x0140:0x0160];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0x00:0x20] = 0x01;\n                                            return memory[0x00:0x20];\n                                        }\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x0a;\n                                \n                                    if (storage[keccak256(memory[0xc0:0x0100])] < msg.data[0x04:0x24]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x0f;\n                                    var temp107 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = msg.data[0x44:0x64];\n                                    memory[0xc0:0xe0] = temp107;\n                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    var temp108 = keccak256(memory[0xc0:0xe0]);\n                                    storage[temp108] = msg.sender;\n                                    storage[temp108 + 0x01] = msg.data[0x04:0x24];\n                                    storage[temp108 + 0x02] = block.timestamp;\n                                    storage[temp108 + 0x03] = msg.data[0x24:0x44];\n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x0e;\n                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                    var temp109 = storage[var0];\n                                    var1 = temp109;\n                                    var2 = msg.data[0x04:0x24];\n                                \n                                    if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                \n                                    storage[var0] = var1 + var2;\n                                    memory[0x00:0x20] = 0x01;\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x24:0x44];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                memory[0xc0:0xe0] = 0x0d;\n                                var temp110 = keccak256(memory[0xc0:0x0100]);\n                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                memory[0xc0:0xe0] = temp110;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            memory[0x00:0x20] = storage[0x09];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        var0 = msg.data[0x04:0x24];\n                    \n                        if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                    \n                        if (msg.sender != storage[0x14]) { revert(memory[0x00:0x00]); }\n                    \n                        storage[0x09] = msg.data[0x04:0x24];\n                        memory[0x00:0x20] = 0x01;\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    memory[0x0140:0x0164] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x24];\n                \n                    if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x04) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x01a0:0x01c0] = 0x08c379a0;\n                    memory[0x01c0:0x01e0] = 0x20;\n                    memory[0x01e0:0x0200] = 0x18;\n                    memory[0x0200:0x0220] = 0x4e6f7420656e6f75676820746f6b656e2062616c616e63650000000000000000;\n                    var0 = msg.data[0x24:0x44];\n                    memory[0xe0:0x0100] = msg.sender;\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp121 = storage[keccak256(memory[0xc0:0x0100])];\n                    var1 = temp121;\n                    memory[0xe0:0x0100] = msg.sender;\n                    memory[0xc0:0xe0] = 0x0e;\n                    var2 = storage[keccak256(memory[0xc0:0x0100])];\n                \n                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                \n                    if (var1 - var2 < var0) { revert(memory[0x01bc:0x0240]); }\n                \n                    memory[0x0500:0x0520] = 0x03;\n                    memory[0x0520:0x0540] = 0x6574680000000000000000000000000000000000000000000000000000000000;\n                \n                    if (keccak256(memory[0x0140 + 0x20:0x0140 + 0x20 + memory[0x0140:0x0160]]) != keccak256(memory[0x0500 + 0x20:0x0500 + 0x20 + memory[0x0500:0x0520]])) {\n                        memory[0x02a0:0x02c0] = 0x04;\n                        memory[0x02c0:0x02e0] = 0x7573647400000000000000000000000000000000000000000000000000000000;\n                    \n                        if (memory[0x0160:0x0180] != memory[0x02c0:0x02e0]) {\n                            memory[0x00:0x20] = 0x00;\n                            return memory[0x00:0x20];\n                        } else {\n                            var temp122 = msg.data[0x24:0x44];\n                            var0 = temp122;\n                            var temp123 = storage[0x03];\n                            var1 = temp123;\n                            var2 = var0 * var1;\n                        \n                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = var2;\n                            var1 = storage[0x05];\n                            var2 = var1;\n                        \n                            if (!var2) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x0300:0x0320] = var0 / var2;\n                            memory[0x0320:0x0340] = 0x08c379a0;\n                            memory[0x0340:0x0360] = 0x20;\n                            memory[0x0360:0x0380] = 0x30;\n                            memory[0x0380:0x03a0] = 0x5468657265206973206e6f7420656e6f756768205553445420696e2074686520;\n                            memory[0x03a0:0x03c0] = 0x636f6e747261637420746f207377617000000000000000000000000000000000;\n                        \n                            if (storage[0x07] < memory[0x0300:0x0320]) { revert(memory[0x033c:0x03e0]); }\n                        \n                            if (!address(storage[0x16]).code.length) { revert(memory[0x00:0x00]); }\n                        \n                            if (!(address(this) ~ storage[0x16])) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x03e0:0x0400] = 0xa9059cbb;\n                            memory[0x0400:0x0420] = msg.sender;\n                            memory[0x0420:0x0440] = memory[0x0300:0x0320];\n                            var temp124;\n                            temp124, memory[0x0480:0x04a0] = address(storage[0x16]).call.gas(msg.gas)(memory[0x03fc:0x0440]);\n                        \n                            if (!temp124) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = 0x07;\n                            var1 = storage[var0];\n                            var2 = memory[0x0300:0x0320];\n                        \n                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                        \n                            storage[var0] = var1 - var2;\n                            memory[0xe0:0x0100] = msg.sender;\n                            memory[0xc0:0xe0] = 0x0a;\n                            var0 = keccak256(memory[0xc0:0x0100]);\n                            var1 = storage[var0];\n                            var2 = msg.data[0x24:0x44];\n                        \n                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                        \n                            storage[var0] = var1 - var2;\n                            memory[0xe0:0x0100] = storage[0x15];\n                            memory[0xc0:0xe0] = 0x0a;\n                            var0 = keccak256(memory[0xc0:0x0100]);\n                            var temp125 = storage[var0];\n                            var1 = temp125;\n                            var2 = msg.data[0x24:0x44];\n                        \n                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                        \n                            storage[var0] = var1 + var2;\n                            memory[0x00:0x20] = 0x01;\n                            return memory[0x00:0x20];\n                        }\n                    } else {\n                        var temp126 = msg.data[0x24:0x44];\n                        var0 = temp126;\n                        var temp127 = storage[0x03];\n                        var1 = temp127;\n                        var2 = var0 * var1;\n                    \n                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = var2;\n                        var1 = storage[0x04];\n                        var2 = var1;\n                    \n                        if (!var2) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x0560:0x0580] = var0 / var2;\n                        memory[0x0580:0x05a0] = 0x08c379a0;\n                        memory[0x05a0:0x05c0] = 0x20;\n                        memory[0x05c0:0x05e0] = 0x2f;\n                        memory[0x05e0:0x0600] = 0x5468657265206973206e6f7420656e6f7567682065746820696e207468652063;\n                        memory[0x0600:0x0620] = 0x6f6e747261637420746f20737761700000000000000000000000000000000000;\n                    \n                        if (storage[0x06] < memory[0x0560:0x0580]) { revert(memory[0x059c:0x0640]); }\n                    \n                        var temp128;\n                        temp128, memory[0x00:0x00] = address(msg.sender).call.gas(0x00).value(memory[0x0560:0x0580])(memory[0x00:0x00]);\n                    \n                        if (!temp128) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = 0x06;\n                        var1 = storage[var0];\n                        var2 = memory[0x0560:0x0580];\n                    \n                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                    \n                        storage[var0] = var1 - var2;\n                        memory[0xe0:0x0100] = msg.sender;\n                        memory[0xc0:0xe0] = 0x0a;\n                        var0 = keccak256(memory[0xc0:0x0100]);\n                        var1 = storage[var0];\n                        var2 = msg.data[0x24:0x44];\n                    \n                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                    \n                        storage[var0] = var1 - var2;\n                        memory[0xe0:0x0100] = storage[0x15];\n                        memory[0xc0:0xe0] = 0x0a;\n                        var0 = keccak256(memory[0xc0:0x0100]);\n                        var temp129 = storage[var0];\n                        var1 = temp129;\n                        var2 = msg.data[0x24:0x44];\n                    \n                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                    \n                        storage[var0] = var1 + var2;\n                        memory[0x00:0x20] = 0x01;\n                        return memory[0x00:0x20];\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                if (msg.sender != storage[0x13]) { revert(memory[0x00:0x00]); }\n            \n                storage[0x03] = msg.data[0x04:0x24];\n                storage[0x04] = msg.data[0x24:0x44];\n                storage[0x05] = msg.data[0x44:0x64];\n                memory[0x00:0x20] = 0x01;\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            memory[0x00:0x20] = storage[0x02];\n            return memory[0x00:0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] != 0x18160ddd) {\n            if (memory[0x00:0x20] != 0x6a054250) {\n                if (memory[0x00:0x20] != 0x03714709) {\n                    if (memory[0x00:0x20] == 0x587566ef) {\n                        memory[0x0140:0x0164] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x24];\n                    \n                        if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x04) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x0500:0x0520] = 0x03;\n                        memory[0x0520:0x0540] = 0x6574680000000000000000000000000000000000000000000000000000000000;\n                    \n                        if (keccak256(memory[0x0140 + 0x20:0x0140 + 0x20 + memory[0x0140:0x0160]]) != keccak256(memory[0x0500 + 0x20:0x0500 + 0x20 + memory[0x0500:0x0520]])) {\n                            memory[0x0200:0x0220] = 0x04;\n                            memory[0x0220:0x0240] = 0x7573647400000000000000000000000000000000000000000000000000000000;\n                        \n                            if (memory[0x0160:0x0180] != memory[0x0220:0x0240]) {\n                                memory[0x00:0x20] = 0x00;\n                                return memory[0x00:0x20];\n                            } else {\n                                var temp111 = storage[0x05];\n                                var0 = temp111;\n                                var temp112 = msg.data[0x24:0x44];\n                                var1 = temp112;\n                                var2 = var0 * var1;\n                            \n                                if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = var2;\n                                var1 = storage[0x03];\n                                var2 = var1;\n                            \n                                if (!var2) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x0260:0x0280] = var0 / var2;\n                                memory[0x0280:0x02a0] = storage[0x07];\n                                memory[0x02a0:0x02c0] = 0x08c379a0;\n                                memory[0x02c0:0x02e0] = 0x20;\n                                memory[0x02e0:0x0300] = 0x20;\n                                memory[0x0300:0x0320] = 0x4e6f20656e6f75676820746f6b656e7320696e2074686520636f6e7472616374;\n                                var temp113 = memory[0x0260:0x0280];\n                                memory[0xe0:0x0100] = storage[0x15];\n                                memory[0xc0:0xe0] = 0x0a;\n                            \n                                if (storage[keccak256(memory[0xc0:0x0100])] < temp113) { revert(memory[0x02bc:0x0340]); }\n                            \n                                memory[0x0340:0x0360] = 0x08c379a0;\n                                memory[0x0360:0x0380] = 0x20;\n                                memory[0x0380:0x03a0] = 0x10;\n                                memory[0x03a0:0x03c0] = 0x4e6f205553445420726563656976656400000000000000000000000000000000;\n                                var temp114 = memory[0x0280:0x02a0];\n                                var0 = temp114;\n                                var1 = msg.data[0x24:0x44];\n                            \n                                if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                            \n                                if (storage[0x06] != var0 + var1) { revert(memory[0x035c:0x03e0]); }\n                            \n                                if (!address(storage[0x15]).code.length) { revert(memory[0x00:0x00]); }\n                            \n                                if (!(address(this) ~ storage[0x15])) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x03e0:0x0400] = 0xa9059cbb;\n                                memory[0x0400:0x0420] = msg.sender;\n                                memory[0x0420:0x0440] = memory[0x0260:0x0280];\n                                var temp115;\n                                temp115, memory[0x0480:0x04a0] = address(storage[0x15]).call.gas(msg.gas)(memory[0x03fc:0x0440]);\n                            \n                                if (!temp115) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x00:0x20] = 0x01;\n                                return memory[0x00:0x20];\n                            }\n                        } else {\n                            var temp116 = storage[0x04];\n                            var0 = temp116;\n                            var temp117 = msg.data[0x24:0x44];\n                            var1 = temp117;\n                            var2 = var0 * var1;\n                        \n                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = var2;\n                            var1 = storage[0x03];\n                            var2 = var1;\n                        \n                            if (!var2) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x0560:0x0580] = var0 / var2;\n                            memory[0x0580:0x05a0] = storage[0x06];\n                            memory[0x05a0:0x05c0] = 0x08c379a0;\n                            memory[0x05c0:0x05e0] = 0x20;\n                            memory[0x05e0:0x0600] = 0x20;\n                            memory[0x0600:0x0620] = 0x4e6f20656e6f75676820746f6b656e7320696e2074686520636f6e7472616374;\n                            var temp118 = memory[0x0560:0x0580];\n                            memory[0xe0:0x0100] = storage[0x15];\n                            memory[0xc0:0xe0] = 0x0a;\n                        \n                            if (storage[keccak256(memory[0xc0:0x0100])] < temp118) { revert(memory[0x05bc:0x0640]); }\n                        \n                            memory[0x0640:0x0660] = 0x08c379a0;\n                            memory[0x0660:0x0680] = 0x20;\n                            memory[0x0680:0x06a0] = 0x0f;\n                            memory[0x06a0:0x06c0] = 0x4e6f206574682072656365697665640000000000000000000000000000000000;\n                            var temp119 = memory[0x0580:0x05a0];\n                            var0 = temp119;\n                            var1 = msg.data[0x24:0x44];\n                        \n                            if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                        \n                            if (storage[0x06] != var0 + var1) { revert(memory[0x065c:0x06e0]); }\n                        \n                            if (!address(storage[0x15]).code.length) { revert(memory[0x00:0x00]); }\n                        \n                            if (!(address(this) ~ storage[0x15])) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x06e0:0x0700] = 0xa9059cbb;\n                            memory[0x0700:0x0720] = msg.sender;\n                            memory[0x0720:0x0740] = memory[0x0560:0x0580];\n                            var temp120;\n                            temp120, memory[0x0780:0x07a0] = address(storage[0x15]).call.gas(msg.gas)(memory[0x06fc:0x0740]);\n                        \n                            if (!temp120) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x00:0x20] = 0x01;\n                            return memory[0x00:0x20];\n                        }\n                    } else if (memory[0x00:0x20] != 0x97a2d0eb) {\n                        if (memory[0x00:0x20] != 0x77884378) {\n                            if (0x00) {\n                                memory[0x0160:0x0180] = var-1;\n                                memory[0x0140:0x0160] = var-2;\n                            \n                                if (!storage[0x09]) { revert(memory[0x00:0x00]); }\n                            \n                                if (!(storage[0x11] ~ 0x00)) { revert(memory[0x00:0x00]); }\n                            \n                                var-2 = 0x02;\n                                var-1 = storage[var-2];\n                                var0 = memory[0x0140:0x0160];\n                            \n                                if (var-1 < var0) { revert(memory[0x00:0x00]); }\n                            \n                                storage[var-2] = var-1 - var0;\n                                memory[0xe0:0x0100] = storage[0x11];\n                                memory[0xc0:0xe0] = 0x0a;\n                                var-2 = keccak256(memory[0xc0:0x0100]);\n                                var-1 = storage[var-2];\n                                var0 = memory[0x0140:0x0160];\n                            \n                                if (var-1 < var0) { revert(memory[0x00:0x00]); }\n                            \n                                storage[var-2] = var-1 - var0;\n                                memory[0x0180:0x01a0] = memory[0x0140:0x0160];\n                                log(memory[0x0180:0x01a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x11], 0x00]);\n                                // Error: Could not resolve jump destination!\n                            } else if (0x00) {\n                                // Error: StackRead before write???\n                                var var-2;\n                                // Error: StackRead before write???\n                                var var-1;\n                                memory[0x0160:0x0180] = var-1;\n                                memory[0x0140:0x0160] = var-2;\n                                var-2 = memory[0x0140:0x0160];\n                                var-1 = memory[0x0160:0x0180];\n                                memory[0x01a0:0x01c0] = 0x9b1f9e74;\n                                memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                var0 = memory[0x01c0:0x01e0];\n                                var1 = 0x06;\n                                // Unhandled termination\n                            } else if (memory[0x00:0x20] != 0xdd62ed3e) {\n                                if (memory[0x00:0x20] != 0xa638f2e2) {\n                                    if (memory[0x00:0x20] != 0x939624ab) {\n                                        if (memory[0x00:0x20] != 0x49c662b8) {\n                                            if (memory[0x00:0x20] != 0xa9059cbb) {\n                                                if (memory[0x00:0x20] != 0x23b872dd) {\n                                                    if (memory[0x00:0x20] != 0xa6f12e85) {\n                                                        if (memory[0x00:0x20] != 0x60dded11) {\n                                                            if (memory[0x00:0x20] != 0x095ea7b3) {\n                                                                if (memory[0x00:0x20] != 0x048e45ca) {\n                                                                    if (memory[0x00:0x20] != 0xc8c01a55) {\n                                                                        if (memory[0x00:0x20] != 0x06fdde03) {\n                                                                            if (memory[0x00:0x20] != 0x95d89b41) {\n                                                                                if (memory[0x00:0x20] != 0x313ce567) {\n                                                                                    if (memory[0x00:0x20] != 0x70a08231) {\n                                                                                        if (memory[0x00:0x20] != 0xfe92aff1) {\n                                                                                            if (memory[0x00:0x20] != 0xbe6bf389) {\n                                                                                                if (memory[0x00:0x20] != 0x421f8e14) {\n                                                                                                    if (memory[0x00:0x20] != 0xe9562a6d) {\n                                                                                                        if (memory[0x00:0x20] != 0xf94be3af) {\n                                                                                                            if (memory[0x00:0x20] != 0xbb3cb31b) {\n                                                                                                                if (memory[0x00:0x20] != 0x8f33367a) {\n                                                                                                                    if (memory[0x00:0x20] != 0xb53574ab) {\n                                                                                                                        if (memory[0x00:0x20] != 0xa1bb138e) {\n                                                                                                                            if (memory[0x00:0x20] != 0x674b392e) {\n                                                                                                                                if (memory[0x00:0x20] != 0x0410bf99) {\n                                                                                                                                    if (memory[0x00:0x20] != 0x1952ddbd) {\n                                                                                                                                        if (memory[0x00:0x20] != 0xb993ed4b) { revert(memory[0x00:0x00]); }\n                                                                                                                                    \n                                                                                                                                        if (msg.value) { revert(memory[0x00:0x00]); }\n                                                                                                                                    \n                                                                                                                                        var var0 = msg.data[0x04:0x24];\n                                                                                                                                    \n                                                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                                    \n                                                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                                                                                        var temp0 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                                        memory[0xc0:0xe0] = temp0;\n                                                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x06];\n                                                                                                                                        return memory[0x00:0x20];\n                                                                                                                                    } else if (!msg.value) {\n                                                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                                                    \n                                                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                                    \n                                                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                                                                                        var temp1 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                                        memory[0xc0:0xe0] = temp1;\n                                                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x05];\n                                                                                                                                        return memory[0x00:0x20];\n                                                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                                                } else if (!msg.value) {\n                                                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                                                \n                                                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                                \n                                                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                                    memory[0xc0:0xe0] = 0x10;\n                                                                                                                                    var temp2 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                                    memory[0xc0:0xe0] = temp2;\n                                                                                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x04];\n                                                                                                                                    return memory[0x00:0x20];\n                                                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                                                            } else if (!msg.value) {\n                                                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                                                            \n                                                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                            \n                                                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                                memory[0xc0:0xe0] = 0x10;\n                                                                                                                                var temp3 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                                memory[0xc0:0xe0] = temp3;\n                                                                                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                                                                                return memory[0x00:0x20];\n                                                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                                                        } else if (!msg.value) {\n                                                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                                                        \n                                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                        \n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                            memory[0xc0:0xe0] = 0x10;\n                                                                                                                            var temp4 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                            memory[0xc0:0xe0] = temp4;\n                                                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                                                                            return memory[0x00:0x20];\n                                                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                                                    } else if (!msg.value) {\n                                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                                    \n                                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                    \n                                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                                                                        var temp5 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                        memory[0xc0:0xe0] = temp5;\n                                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                                                                                                        return memory[0x00:0x20];\n                                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                                } else if (!msg.value) {\n                                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                                \n                                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                \n                                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                    memory[0xc0:0xe0] = 0x10;\n                                                                                                                    var temp6 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                    memory[0xc0:0xe0] = temp6;\n                                                                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                                                                    return memory[0x00:0x20];\n                                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                                            } else if (!msg.value) {\n                                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                                            \n                                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                            \n                                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                memory[0xc0:0xe0] = 0x0f;\n                                                                                                                var temp7 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                memory[0xc0:0xe0] = temp7;\n                                                                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                                                                return memory[0x00:0x20];\n                                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                                        } else if (!msg.value) {\n                                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                                        \n                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                        \n                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                            memory[0xc0:0xe0] = 0x0f;\n                                                                                                            var temp8 = keccak256(memory[0xc0:0x0100]);\n                                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                            memory[0xc0:0xe0] = temp8;\n                                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                                                            return memory[0x00:0x20];\n                                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                                    } else if (!msg.value) {\n                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                    \n                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                    \n                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                        memory[0xc0:0xe0] = 0x0f;\n                                                                                                        var temp9 = keccak256(memory[0xc0:0x0100]);\n                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                        memory[0xc0:0xe0] = temp9;\n                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                                                                                        return memory[0x00:0x20];\n                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                } else if (!msg.value) {\n                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                \n                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                \n                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                    memory[0xc0:0xe0] = 0x0f;\n                                                                                                    var temp10 = keccak256(memory[0xc0:0x0100]);\n                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                    memory[0xc0:0xe0] = temp10;\n                                                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                                                    return memory[0x00:0x20];\n                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                            } else if (!msg.value) {\n                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                            \n                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                            \n                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                memory[0xc0:0xe0] = 0x0c;\n                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                return memory[0x00:0x20];\n                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                        } else if (!msg.value) {\n                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                        \n                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                        \n                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                            memory[0xc0:0xe0] = 0x0b;\n                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                            return memory[0x00:0x20];\n                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                    } else if (!msg.value) {\n                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                    \n                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                    \n                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                        return memory[0x00:0x20];\n                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                } else if (!msg.value) {\n                                                                                    memory[0x00:0x20] = storage[0x08];\n                                                                                    return memory[0x00:0x20];\n                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                            } else if (!msg.value) {\n                                                                                var0 = 0x01;\n                                                                                memory[0xc0:0xe0] = var0;\n                                                                                var var1 = keccak256(memory[0xc0:0xe0]);\n                                                                                var var2 = 0x0180;\n                                                                                var temp11 = storage[var1] + 0x20;\n                                                                                var var3 = temp11;\n                                                                                var var4 = 0x0120;\n                                                                                memory[var4:var4 + 0x20] = 0x00;\n                                                                                var var5 = 0x02;\n                                                                            \n                                                                                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_2662; }\n                                                                            \n                                                                            label_2666:\n                                                                                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                                var temp12 = var4;\n                                                                                var temp13 = memory[temp12:temp12 + 0x20] + 0x01;\n                                                                                memory[temp12:temp12 + 0x20] = temp13;\n                                                                            \n                                                                                if (var5 == temp13) { goto label_2688; }\n                                                                            \n                                                                                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_2666; }\n                                                                            \n                                                                            label_2662:\n                                                                            \n                                                                            label_2688:\n                                                                                var temp14 = memory[0x0180:0x01a0];\n                                                                                var temp15 = (temp14 + 0x1f) - temp14 - 0x01 % 0x20 - temp14;\n                                                                                memory[temp14 + 0x01a0:temp14 + 0x01a0 + temp15] = msg.data[msg.data.length:msg.data.length + temp15];\n                                                                                memory[0x0160:0x0180] = 0x20;\n                                                                                var temp16 = memory[0x0180:0x01a0] + 0x40;\n                                                                                return memory[0x0160:0x0160 + (temp16 + 0x1f) - temp16 - 0x01 % 0x20];\n                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                        } else if (!msg.value) {\n                                                                            var0 = 0x00;\n                                                                            memory[0xc0:0xe0] = var0;\n                                                                            var1 = keccak256(memory[0xc0:0xe0]);\n                                                                            var2 = 0x0180;\n                                                                            var temp17 = storage[var1] + 0x20;\n                                                                            var3 = temp17;\n                                                                            var4 = 0x0120;\n                                                                            memory[var4:var4 + 0x20] = 0x00;\n                                                                            var5 = 0x03;\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_25AE; }\n                                                                        \n                                                                        label_25B2:\n                                                                            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                            var temp18 = var4;\n                                                                            var temp19 = memory[temp18:temp18 + 0x20] + 0x01;\n                                                                            memory[temp18:temp18 + 0x20] = temp19;\n                                                                        \n                                                                            if (var5 == temp19) { goto label_25D4; }\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_25B2; }\n                                                                        \n                                                                        label_25AE:\n                                                                        \n                                                                        label_25D4:\n                                                                            var temp20 = memory[0x0180:0x01a0];\n                                                                            var temp21 = (temp20 + 0x1f) - temp20 - 0x01 % 0x20 - temp20;\n                                                                            memory[temp20 + 0x01a0:temp20 + 0x01a0 + temp21] = msg.data[msg.data.length:msg.data.length + temp21];\n                                                                            memory[0x0160:0x0180] = 0x20;\n                                                                            var temp22 = memory[0x0180:0x01a0] + 0x40;\n                                                                            return memory[0x0160:0x0160 + (temp22 + 0x1f) - temp22 - 0x01 % 0x20];\n                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                    } else if (!msg.value) {\n                                                                        var0 = msg.data[0x04:0x24];\n                                                                    \n                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var0 = block.timestamp;\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp23 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp23;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                        var temp24 = storage[keccak256(memory[0xc0:0xe0]) + 0x05];\n                                                                        var1 = temp24;\n                                                                        var2 = 0x03f480;\n                                                                    \n                                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        if (var1 + var2 > var0) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp25 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp25;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    \n                                                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x06]) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp26 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp26;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    \n                                                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp27 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp27;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp28 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp28;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp29 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp29;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                        memory[0x01a0:0x01c0] = storage[0x03];\n                                                                    \n                                                                        if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                                            var0 = memory[0x01a0:0x01c0];\n                                                                            var1 = memory[0x0180:0x01a0];\n                                                                        \n                                                                            if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp39 = var0 - var1;\n                                                                            var0 = temp39;\n                                                                            var temp40 = memory[0x0160:0x0180];\n                                                                            var1 = temp40;\n                                                                            var2 = var0 * var1;\n                                                                        \n                                                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var0 = var2;\n                                                                            var1 = storage[0x03];\n                                                                            var2 = var1;\n                                                                        \n                                                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            memory[0x0240:0x0260] = var0 / var2;\n                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                        \n                                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 - var2;\n                                                                            memory[0xe0:0x0100] = storage[0x12];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0240:0x0260];\n                                                                        \n                                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 - var2;\n                                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                            var3 = memory[0x01a0:0x01c0];\n                                                                            var4 = memory[0x0180:0x01a0];\n                                                                            var5 = var4;\n                                                                        \n                                                                            if (!var5) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp41 = var3 / var5;\n                                                                            var3 = temp41;\n                                                                            var temp42 = var2;\n                                                                            var4 = temp42 * var3;\n                                                                        \n                                                                            if (!((var4 / temp42 == var3) | !temp42)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var2 = var4;\n                                                                            var temp43 = var1;\n                                                                        \n                                                                            if (temp43 + var2 < temp43) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 + var2;\n                                                                            var0 = memory[0x0160:0x0180];\n                                                                            var1 = memory[0x01a0:0x01c0];\n                                                                            var2 = memory[0x0180:0x01a0];\n                                                                            var3 = var2;\n                                                                        \n                                                                            if (!var3) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp44 = var1 / var3;\n                                                                            var1 = temp44;\n                                                                            var temp45 = var0;\n                                                                            var2 = temp45 * var1;\n                                                                        \n                                                                            if (!((var2 / temp45 == var1) | !temp45)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            memory[0x0260:0x0280] = var2;\n                                                                            log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                            memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                                            log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x12], memory[0x0140:0x0160]]);\n                                                                            goto label_24C0;\n                                                                        } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                        \n                                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 - var2;\n                                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var temp30 = storage[var0];\n                                                                            var1 = temp30;\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                        \n                                                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 + var2;\n                                                                            memory[0x01c0:0x01e0] = memory[0x0160:0x0180];\n                                                                            log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                        \n                                                                        label_24BF:\n                                                                        \n                                                                        label_24C0:\n                                                                            var0 = memory[0x0140:0x0160];\n                                                                            var1 = memory[0x0160:0x0180];\n                                                                            var2 = memory[0x0180:0x01a0];\n                                                                            var3 = memory[0x01a0:0x01c0];\n                                                                            memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                            memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                                            var4 = memory[0x02e0:0x0300];\n                                                                            var5 = 0x06;\n                                                                            // Unhandled termination\n                                                                        } else {\n                                                                            var0 = memory[0x0180:0x01a0];\n                                                                            var1 = memory[0x01a0:0x01c0];\n                                                                        \n                                                                            if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp31 = var0 - var1;\n                                                                            var0 = temp31;\n                                                                            var temp32 = memory[0x0160:0x0180];\n                                                                            var1 = temp32;\n                                                                            var2 = var0 * var1;\n                                                                        \n                                                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var0 = var2;\n                                                                            var1 = storage[0x03];\n                                                                            var2 = var1;\n                                                                        \n                                                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            memory[0x01e0:0x0200] = var0 / var2;\n                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                        \n                                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 - var2;\n                                                                            memory[0xe0:0x0100] = storage[0x12];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var temp33 = storage[var0];\n                                                                            var1 = temp33;\n                                                                            var2 = memory[0x01e0:0x0200];\n                                                                        \n                                                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 + var2;\n                                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                            var3 = memory[0x01a0:0x01c0];\n                                                                            var4 = memory[0x0180:0x01a0];\n                                                                            var5 = var4;\n                                                                        \n                                                                            if (!var5) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp34 = var3 / var5;\n                                                                            var3 = temp34;\n                                                                            var temp35 = var2;\n                                                                            var4 = temp35 * var3;\n                                                                        \n                                                                            if (!((var4 / temp35 == var3) | !temp35)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var2 = var4;\n                                                                            var temp36 = var1;\n                                                                        \n                                                                            if (temp36 + var2 < temp36) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 + var2;\n                                                                            var0 = memory[0x0160:0x0180];\n                                                                            var1 = memory[0x01a0:0x01c0];\n                                                                            var2 = memory[0x0180:0x01a0];\n                                                                            var3 = var2;\n                                                                        \n                                                                            if (!var3) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp37 = var1 / var3;\n                                                                            var1 = temp37;\n                                                                            var temp38 = var0;\n                                                                            var2 = temp38 * var1;\n                                                                        \n                                                                            if (!((var2 / temp38 == var1) | !temp38)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            memory[0x0200:0x0220] = var2;\n                                                                            log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                            memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                                            log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x04:0x24], storage[0x12]]);\n                                                                            goto label_24BF;\n                                                                        }\n                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                } else if (!msg.value) {\n                                                                    var0 = msg.data[0x24:0x44];\n                                                                \n                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var0 = msg.data[0x44:0x64];\n                                                                \n                                                                    if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    if (msg.sender != storage[0x13]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = 0x10;\n                                                                    var temp46 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = temp46;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = 0x10;\n                                                                    var temp47 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = temp47;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = 0x10;\n                                                                    var temp48 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = temp48;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                    memory[0x01a0:0x01c0] = storage[0x03];\n                                                                \n                                                                    if (msg.data[0x44:0x64]) {\n                                                                        memory[0xe0:0x0100] = msg.sender;\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0x0340:0x0360] = memory[0x0140:0x0160];\n                                                                        log(memory[0x0340:0x0360], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, msg.data[0x24:0x44]]);\n                                                                        memory[0x00:0x20] = 0x01;\n                                                                        return memory[0x00:0x20];\n                                                                    } else if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                                        var0 = memory[0x01a0:0x01c0];\n                                                                        var1 = memory[0x0180:0x01a0];\n                                                                    \n                                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp57 = var0 - var1;\n                                                                        var0 = temp57;\n                                                                        var temp58 = memory[0x0140:0x0160];\n                                                                        var1 = temp58;\n                                                                        var2 = var0 * var1;\n                                                                    \n                                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var0 = var2;\n                                                                        var1 = storage[0x03];\n                                                                        var2 = var1;\n                                                                    \n                                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0240:0x0260] = var0 / var2;\n                                                                        memory[0xe0:0x0100] = msg.sender;\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = storage[0x12];\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0240:0x0260];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        var4 = memory[0x0180:0x01a0];\n                                                                        var5 = var4;\n                                                                    \n                                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp59 = var3 / var5;\n                                                                        var3 = temp59;\n                                                                        var temp60 = var2;\n                                                                        var4 = temp60 * var3;\n                                                                    \n                                                                        if (!((var4 / temp60 == var3) | !temp60)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var2 = var4;\n                                                                        var temp61 = var1;\n                                                                    \n                                                                        if (temp61 + var2 < temp61) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = var2;\n                                                                    \n                                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp62 = var1 / var3;\n                                                                        var1 = temp62;\n                                                                        var temp63 = var0;\n                                                                        var2 = temp63 * var1;\n                                                                    \n                                                                        if (!((var2 / temp63 == var1) | !temp63)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0260:0x0280] = var2;\n                                                                        log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x24:0x44], memory[0x0160:0x0180]]);\n                                                                        memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                                        log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x12], memory[0x0160:0x0180]]);\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x0160:0x0180];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                        memory[0x02e0:0x0300] = memory[0x0140:0x0160];\n                                                                        var4 = memory[0x02e0:0x0300];\n                                                                        var5 = 0x06;\n                                                                        // Unhandled termination\n                                                                    } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                                        memory[0xe0:0x0100] = msg.sender;\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                                                        log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x24:0x44], memory[0x0160:0x0180]]);\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x0160:0x0180];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                        memory[0x02e0:0x0300] = memory[0x0140:0x0160];\n                                                                        var4 = memory[0x02e0:0x0300];\n                                                                        var5 = 0x06;\n                                                                        // Unhandled termination\n                                                                    } else {\n                                                                        var0 = memory[0x0180:0x01a0];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                    \n                                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp49 = var0 - var1;\n                                                                        var0 = temp49;\n                                                                        var temp50 = memory[0x0140:0x0160];\n                                                                        var1 = temp50;\n                                                                        var2 = var0 * var1;\n                                                                    \n                                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var0 = var2;\n                                                                        var1 = storage[0x03];\n                                                                        var2 = var1;\n                                                                    \n                                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x01e0:0x0200] = var0 / var2;\n                                                                        memory[0xe0:0x0100] = msg.sender;\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = storage[0x12];\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var temp51 = storage[var0];\n                                                                        var1 = temp51;\n                                                                        var2 = memory[0x01e0:0x0200];\n                                                                    \n                                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        var4 = memory[0x0180:0x01a0];\n                                                                        var5 = var4;\n                                                                    \n                                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp52 = var3 / var5;\n                                                                        var3 = temp52;\n                                                                        var temp53 = var2;\n                                                                        var4 = temp53 * var3;\n                                                                    \n                                                                        if (!((var4 / temp53 == var3) | !temp53)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var2 = var4;\n                                                                        var temp54 = var1;\n                                                                    \n                                                                        if (temp54 + var2 < temp54) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = var2;\n                                                                    \n                                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp55 = var1 / var3;\n                                                                        var1 = temp55;\n                                                                        var temp56 = var0;\n                                                                        var2 = temp56 * var1;\n                                                                    \n                                                                        if (!((var2 / temp56 == var1) | !temp56)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0200:0x0220] = var2;\n                                                                        log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0160:0x0180]]);\n                                                                        memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                                        log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x24:0x44], storage[0x12]]);\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x0160:0x0180];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                        memory[0x02e0:0x0300] = memory[0x0140:0x0160];\n                                                                        var4 = memory[0x02e0:0x0300];\n                                                                        var5 = 0x06;\n                                                                        // Unhandled termination\n                                                                    }\n                                                                } else { revert(memory[0x00:0x00]); }\n                                                            } else if (!msg.value) {\n                                                                var0 = msg.data[0x04:0x24];\n                                                            \n                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                memory[0xe0:0x0100] = msg.sender;\n                                                                memory[0xc0:0xe0] = 0x0d;\n                                                                var temp64 = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                memory[0xc0:0xe0] = temp64;\n                                                                storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                                                memory[0x0140:0x0160] = msg.data[0x24:0x44];\n                                                                log(memory[0x0140:0x0160], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, msg.data[0x04:0x24]]);\n                                                                memory[0x00:0x20] = 0x01;\n                                                                return memory[0x00:0x20];\n                                                            } else { revert(memory[0x00:0x00]); }\n                                                        } else if (!msg.value) {\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x10;\n                                                            var temp65 = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                            memory[0xc0:0xe0] = temp65;\n                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        \n                                                            if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0x0140:0x0160] = storage[0x13];\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x10;\n                                                            var temp66 = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                            memory[0xc0:0xe0] = temp66;\n                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x10;\n                                                            var temp67 = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                            memory[0xc0:0xe0] = temp67;\n                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0])];\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var temp68 = storage[var0];\n                                                            var1 = temp68;\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 + var2;\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x0e;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x10;\n                                                            var temp69 = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                            memory[0xc0:0xe0] = temp69;\n                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                            storage[keccak256(memory[0xc0:0xe0]) + 0x06] = 0x01;\n                                                            memory[0x01a0:0x01c0] = memory[0x0160:0x0180];\n                                                            log(memory[0x01a0:0x01c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, memory[0x0140:0x0160]]);\n                                                            memory[0x00:0x20] = 0x01;\n                                                            return memory[0x00:0x20];\n                                                        } else { revert(memory[0x00:0x00]); }\n                                                    } else if (!msg.value) {\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x10;\n                                                        var temp70 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp70;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                    \n                                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x10;\n                                                        var temp71 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp71;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0])];\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x10;\n                                                        var temp72 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp72;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x10;\n                                                        var temp73 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp73;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                        memory[0x01a0:0x01c0] = storage[0x03];\n                                                    \n                                                        if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                            var0 = memory[0x01a0:0x01c0];\n                                                            var1 = memory[0x0180:0x01a0];\n                                                        \n                                                            if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp83 = var0 - var1;\n                                                            var0 = temp83;\n                                                            var temp84 = memory[0x0160:0x0180];\n                                                            var1 = temp84;\n                                                            var2 = var0 * var1;\n                                                        \n                                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var0 = var2;\n                                                            var1 = storage[0x03];\n                                                            var2 = var1;\n                                                        \n                                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0x0240:0x0260] = var0 / var2;\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = storage[0x12];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0240:0x0260];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                            var3 = memory[0x01a0:0x01c0];\n                                                            var4 = memory[0x0180:0x01a0];\n                                                            var5 = var4;\n                                                        \n                                                            if (!var5) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp85 = var3 / var5;\n                                                            var3 = temp85;\n                                                            var temp86 = var2;\n                                                            var4 = temp86 * var3;\n                                                        \n                                                            if (!((var4 / temp86 == var3) | !temp86)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var2 = var4;\n                                                            var temp87 = var1;\n                                                        \n                                                            if (temp87 + var2 < temp87) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 + var2;\n                                                            var0 = memory[0x0160:0x0180];\n                                                            var1 = memory[0x01a0:0x01c0];\n                                                            var2 = memory[0x0180:0x01a0];\n                                                            var3 = var2;\n                                                        \n                                                            if (!var3) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp88 = var1 / var3;\n                                                            var1 = temp88;\n                                                            var temp89 = var0;\n                                                            var2 = temp89 * var1;\n                                                        \n                                                            if (!((var2 / temp89 == var1) | !temp89)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0x0260:0x0280] = var2;\n                                                            log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                            memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                            log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x12], memory[0x0140:0x0160]]);\n                                                            var0 = memory[0x0140:0x0160];\n                                                            var1 = memory[0x0160:0x0180];\n                                                            var2 = memory[0x0180:0x01a0];\n                                                            var3 = memory[0x01a0:0x01c0];\n                                                            memory[0x02c0:0x02e0] = 0x42966c68;\n                                                            memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                            var4 = memory[0x02e0:0x0300];\n                                                            var5 = 0x06;\n                                                            // Unhandled termination\n                                                        } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var temp74 = storage[var0];\n                                                            var1 = temp74;\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 + var2;\n                                                            memory[0x01c0:0x01e0] = memory[0x0160:0x0180];\n                                                            log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                            var0 = memory[0x0140:0x0160];\n                                                            var1 = memory[0x0160:0x0180];\n                                                            var2 = memory[0x0180:0x01a0];\n                                                            var3 = memory[0x01a0:0x01c0];\n                                                            memory[0x02c0:0x02e0] = 0x42966c68;\n                                                            memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                            var4 = memory[0x02e0:0x0300];\n                                                            var5 = 0x06;\n                                                            // Unhandled termination\n                                                        } else {\n                                                            var0 = memory[0x0180:0x01a0];\n                                                            var1 = memory[0x01a0:0x01c0];\n                                                        \n                                                            if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp75 = var0 - var1;\n                                                            var0 = temp75;\n                                                            var temp76 = memory[0x0160:0x0180];\n                                                            var1 = temp76;\n                                                            var2 = var0 * var1;\n                                                        \n                                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var0 = var2;\n                                                            var1 = storage[0x03];\n                                                            var2 = var1;\n                                                        \n                                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0x01e0:0x0200] = var0 / var2;\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = storage[0x12];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var temp77 = storage[var0];\n                                                            var1 = temp77;\n                                                            var2 = memory[0x01e0:0x0200];\n                                                        \n                                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 + var2;\n                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                            var3 = memory[0x01a0:0x01c0];\n                                                            var4 = memory[0x0180:0x01a0];\n                                                            var5 = var4;\n                                                        \n                                                            if (!var5) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp78 = var3 / var5;\n                                                            var3 = temp78;\n                                                            var temp79 = var2;\n                                                            var4 = temp79 * var3;\n                                                        \n                                                            if (!((var4 / temp79 == var3) | !temp79)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var2 = var4;\n                                                            var temp80 = var1;\n                                                        \n                                                            if (temp80 + var2 < temp80) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 + var2;\n                                                            var0 = memory[0x0160:0x0180];\n                                                            var1 = memory[0x01a0:0x01c0];\n                                                            var2 = memory[0x0180:0x01a0];\n                                                            var3 = var2;\n                                                        \n                                                            if (!var3) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp81 = var1 / var3;\n                                                            var1 = temp81;\n                                                            var temp82 = var0;\n                                                            var2 = temp82 * var1;\n                                                        \n                                                            if (!((var2 / temp82 == var1) | !temp82)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0x0200:0x0220] = var2;\n                                                            log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                            memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                            log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, storage[0x12]]);\n                                                            var0 = memory[0x0140:0x0160];\n                                                            var1 = memory[0x0160:0x0180];\n                                                            var2 = memory[0x0180:0x01a0];\n                                                            var3 = memory[0x01a0:0x01c0];\n                                                            memory[0x02c0:0x02e0] = 0x42966c68;\n                                                            memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                            var4 = memory[0x02e0:0x0300];\n                                                            var5 = 0x06;\n                                                            // Unhandled termination\n                                                        }\n                                                    } else { revert(memory[0x00:0x00]); }\n                                                } else if (!msg.value) {\n                                                    var0 = msg.data[0x04:0x24];\n                                                \n                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var0 = msg.data[0x24:0x44];\n                                                \n                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                \n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var0 = storage[keccak256(memory[0xc0:0x0100])];\n                                                    var1 = msg.data[0x44:0x64];\n                                                \n                                                    if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                \n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = 0x0e;\n                                                \n                                                    if (storage[keccak256(memory[0xc0:0x0100])] > var0 - var1) { revert(memory[0x00:0x00]); }\n                                                \n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                    var1 = storage[var0];\n                                                    var2 = msg.data[0x44:0x64];\n                                                \n                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                \n                                                    storage[var0] = var1 - var2;\n                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                    var temp90 = storage[var0];\n                                                    var1 = temp90;\n                                                    var2 = msg.data[0x44:0x64];\n                                                \n                                                    if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                \n                                                    storage[var0] = var1 + var2;\n                                                    var0 = msg.data[0x44:0x64];\n                                                    var1 = 0x64;\n                                                    var2 = var1;\n                                                \n                                                    if (!var2) { revert(memory[0x00:0x00]); }\n                                                \n                                                    memory[0x0140:0x0160] = var0 / var2;\n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = 0x0d;\n                                                    var temp91 = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0xe0:0x0100] = msg.sender;\n                                                    memory[0xc0:0xe0] = temp91;\n                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                    var1 = storage[var0];\n                                                    var2 = msg.data[0x44:0x64];\n                                                \n                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                \n                                                    storage[var0] = var1 - var2;\n                                                    memory[0x0160:0x0180] = msg.data[0x44:0x64];\n                                                    log(memory[0x0160:0x0180], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x04:0x24], msg.data[0x24:0x44]]);\n                                                    var0 = memory[0x0140:0x0160];\n                                                    var1 = memory[0x0160:0x0180];\n                                                    memory[0x01a0:0x01c0] = 0x42966c68;\n                                                    memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                                    var2 = memory[0x01c0:0x01e0];\n                                                    var3 = 0x06;\n                                                    // Unhandled termination\n                                                } else { revert(memory[0x00:0x00]); }\n                                            } else if (!msg.value) {\n                                                var0 = msg.data[0x04:0x24];\n                                            \n                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x0a;\n                                                var0 = storage[keccak256(memory[0xc0:0x0100])];\n                                                var1 = msg.data[0x24:0x44];\n                                            \n                                                if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x0e;\n                                            \n                                                if (storage[keccak256(memory[0xc0:0x0100])] > var0 - var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                var0 = msg.data[0x24:0x44];\n                                                var1 = 0x64;\n                                                var2 = var1;\n                                            \n                                                if (!var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0x0140:0x0160] = var0 / var2;\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x0a;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = msg.data[0x24:0x44];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = 0x0a;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var temp92 = storage[var0];\n                                                var1 = temp92;\n                                                var2 = msg.data[0x24:0x44];\n                                            \n                                                if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 + var2;\n                                                memory[0x0160:0x0180] = msg.data[0x24:0x44];\n                                                log(memory[0x0160:0x0180], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, msg.data[0x04:0x24]]);\n                                                var0 = memory[0x0140:0x0160];\n                                                var1 = memory[0x0160:0x0180];\n                                                memory[0x01a0:0x01c0] = 0x42966c68;\n                                                memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                                var2 = memory[0x01c0:0x01e0];\n                                                var3 = 0x06;\n                                                // Unhandled termination\n                                            } else { revert(memory[0x00:0x00]); }\n                                        } else if (!msg.value) {\n                                            var0 = msg.data[0x24:0x44];\n                                        \n                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0a;\n                                        \n                                            if (storage[keccak256(memory[0xc0:0x0100])] < msg.data[0x44:0x64]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x10;\n                                            var temp93 = keccak256(memory[0xc0:0x0100]);\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = temp93;\n                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                        \n                                            if (storage[keccak256(memory[0xc0:0xe0]) + 0x02]) { revert(memory[0x00:0x00]); }\n                                        \n                                            var0 = 0x015180;\n                                            var temp94 = msg.data[0x64:0x84];\n                                            var1 = temp94;\n                                            var2 = var0 * var1;\n                                        \n                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                        \n                                            var temp95 = var2;\n                                            var0 = temp95;\n                                            var1 = block.timestamp;\n                                        \n                                            if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x0140:0x0160] = var0 + var1;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x10;\n                                            var temp96 = keccak256(memory[0xc0:0x0100]);\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = temp96;\n                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                            var temp97 = keccak256(memory[0xc0:0xe0]);\n                                            storage[temp97] = msg.data[0x24:0x44];\n                                            storage[temp97 + 0x01] = msg.sender;\n                                            storage[temp97 + 0x02] = msg.data[0x44:0x64];\n                                            storage[temp97 + 0x03] = storage[0x03];\n                                            storage[temp97 + 0x04] = block.timestamp;\n                                            storage[temp97 + 0x05] = memory[0x0140:0x0160];\n                                            storage[temp97 + 0x06] = 0x00;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0e;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var temp98 = storage[var0];\n                                            var1 = temp98;\n                                            var2 = msg.data[0x44:0x64];\n                                        \n                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 + var2;\n                                            memory[0x00:0x20] = 0x01;\n                                            return memory[0x00:0x20];\n                                        } else { revert(memory[0x00:0x00]); }\n                                    } else if (!msg.value) {\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x0f;\n                                        var temp99 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp99;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    \n                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x01] <= 0x00) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x0f;\n                                        var temp100 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp100;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                        memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                        var0 = memory[0x0140:0x0160];\n                                        var1 = 0x03e8;\n                                        var2 = var1;\n                                    \n                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0x0160:0x0180] = var0 / var2;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x0f;\n                                        var temp101 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp101;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    \n                                        if (block.timestamp < storage[keccak256(memory[0xc0:0xe0]) + 0x03]) {\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0f;\n                                            var temp102 = keccak256(memory[0xc0:0x0100]);\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = temp102;\n                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                            var temp103 = keccak256(memory[0xc0:0xe0]);\n                                            storage[temp103] = msg.sender;\n                                            storage[temp103 + 0x01] = 0x00;\n                                            storage[temp103 + 0x02] = 0x00;\n                                            storage[temp103 + 0x03] = 0x00;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0e;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = memory[0x0140:0x0160];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0x00:0x20] = 0x01;\n                                            return memory[0x00:0x20];\n                                        } else {\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0a;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var temp104 = storage[var0];\n                                            var1 = temp104;\n                                            var2 = memory[0x0160:0x0180];\n                                        \n                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 + var2;\n                                            memory[0xe0:0x0100] = storage[0x12];\n                                            memory[0xc0:0xe0] = 0x0a;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = memory[0x0160:0x0180];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            var0 = 0x02;\n                                            var1 = storage[var0];\n                                            var2 = memory[0x0160:0x0180];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0x0180:0x01a0] = memory[0x0160:0x0180];\n                                            log(memory[0x0180:0x01a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x12], msg.sender]);\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0f;\n                                            var temp105 = keccak256(memory[0xc0:0x0100]);\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = temp105;\n                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                            var temp106 = keccak256(memory[0xc0:0xe0]);\n                                            storage[temp106] = msg.sender;\n                                            storage[temp106 + 0x01] = 0x00;\n                                            storage[temp106 + 0x02] = 0x00;\n                                            storage[temp106 + 0x03] = 0x00;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0e;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = memory[0x0140:0x0160];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0x00:0x20] = 0x01;\n                                            return memory[0x00:0x20];\n                                        }\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x0a;\n                                \n                                    if (storage[keccak256(memory[0xc0:0x0100])] < msg.data[0x04:0x24]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x0f;\n                                    var temp107 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = msg.data[0x44:0x64];\n                                    memory[0xc0:0xe0] = temp107;\n                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    var temp108 = keccak256(memory[0xc0:0xe0]);\n                                    storage[temp108] = msg.sender;\n                                    storage[temp108 + 0x01] = msg.data[0x04:0x24];\n                                    storage[temp108 + 0x02] = block.timestamp;\n                                    storage[temp108 + 0x03] = msg.data[0x24:0x44];\n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x0e;\n                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                    var temp109 = storage[var0];\n                                    var1 = temp109;\n                                    var2 = msg.data[0x04:0x24];\n                                \n                                    if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                \n                                    storage[var0] = var1 + var2;\n                                    memory[0x00:0x20] = 0x01;\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x24:0x44];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                memory[0xc0:0xe0] = 0x0d;\n                                var temp110 = keccak256(memory[0xc0:0x0100]);\n                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                memory[0xc0:0xe0] = temp110;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            memory[0x00:0x20] = storage[0x09];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        var0 = msg.data[0x04:0x24];\n                    \n                        if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                    \n                        if (msg.sender != storage[0x14]) { revert(memory[0x00:0x00]); }\n                    \n                        storage[0x09] = msg.data[0x04:0x24];\n                        memory[0x00:0x20] = 0x01;\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    memory[0x0140:0x0164] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x24];\n                \n                    if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x04) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x01a0:0x01c0] = 0x08c379a0;\n                    memory[0x01c0:0x01e0] = 0x20;\n                    memory[0x01e0:0x0200] = 0x18;\n                    memory[0x0200:0x0220] = 0x4e6f7420656e6f75676820746f6b656e2062616c616e63650000000000000000;\n                    var0 = msg.data[0x24:0x44];\n                    memory[0xe0:0x0100] = msg.sender;\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp121 = storage[keccak256(memory[0xc0:0x0100])];\n                    var1 = temp121;\n                    memory[0xe0:0x0100] = msg.sender;\n                    memory[0xc0:0xe0] = 0x0e;\n                    var2 = storage[keccak256(memory[0xc0:0x0100])];\n                \n                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                \n                    if (var1 - var2 < var0) { revert(memory[0x01bc:0x0240]); }\n                \n                    memory[0x0500:0x0520] = 0x03;\n                    memory[0x0520:0x0540] = 0x6574680000000000000000000000000000000000000000000000000000000000;\n                \n                    if (keccak256(memory[0x0140 + 0x20:0x0140 + 0x20 + memory[0x0140:0x0160]]) != keccak256(memory[0x0500 + 0x20:0x0500 + 0x20 + memory[0x0500:0x0520]])) {\n                        memory[0x02a0:0x02c0] = 0x04;\n                        memory[0x02c0:0x02e0] = 0x7573647400000000000000000000000000000000000000000000000000000000;\n                    \n                        if (memory[0x0160:0x0180] != memory[0x02c0:0x02e0]) {\n                            memory[0x00:0x20] = 0x00;\n                            return memory[0x00:0x20];\n                        } else {\n                            var temp122 = msg.data[0x24:0x44];\n                            var0 = temp122;\n                            var temp123 = storage[0x03];\n                            var1 = temp123;\n                            var2 = var0 * var1;\n                        \n                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = var2;\n                            var1 = storage[0x05];\n                            var2 = var1;\n                        \n                            if (!var2) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x0300:0x0320] = var0 / var2;\n                            memory[0x0320:0x0340] = 0x08c379a0;\n                            memory[0x0340:0x0360] = 0x20;\n                            memory[0x0360:0x0380] = 0x30;\n                            memory[0x0380:0x03a0] = 0x5468657265206973206e6f7420656e6f756768205553445420696e2074686520;\n                            memory[0x03a0:0x03c0] = 0x636f6e747261637420746f207377617000000000000000000000000000000000;\n                        \n                            if (storage[0x07] < memory[0x0300:0x0320]) { revert(memory[0x033c:0x03e0]); }\n                        \n                            if (!address(storage[0x16]).code.length) { revert(memory[0x00:0x00]); }\n                        \n                            if (!(address(this) ~ storage[0x16])) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x03e0:0x0400] = 0xa9059cbb;\n                            memory[0x0400:0x0420] = msg.sender;\n                            memory[0x0420:0x0440] = memory[0x0300:0x0320];\n                            var temp124;\n                            temp124, memory[0x0480:0x04a0] = address(storage[0x16]).call.gas(msg.gas)(memory[0x03fc:0x0440]);\n                        \n                            if (!temp124) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = 0x07;\n                            var1 = storage[var0];\n                            var2 = memory[0x0300:0x0320];\n                        \n                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                        \n                            storage[var0] = var1 - var2;\n                            memory[0xe0:0x0100] = msg.sender;\n                            memory[0xc0:0xe0] = 0x0a;\n                            var0 = keccak256(memory[0xc0:0x0100]);\n                            var1 = storage[var0];\n                            var2 = msg.data[0x24:0x44];\n                        \n                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                        \n                            storage[var0] = var1 - var2;\n                            memory[0xe0:0x0100] = storage[0x15];\n                            memory[0xc0:0xe0] = 0x0a;\n                            var0 = keccak256(memory[0xc0:0x0100]);\n                            var temp125 = storage[var0];\n                            var1 = temp125;\n                            var2 = msg.data[0x24:0x44];\n                        \n                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                        \n                            storage[var0] = var1 + var2;\n                            memory[0x00:0x20] = 0x01;\n                            return memory[0x00:0x20];\n                        }\n                    } else {\n                        var temp126 = msg.data[0x24:0x44];\n                        var0 = temp126;\n                        var temp127 = storage[0x03];\n                        var1 = temp127;\n                        var2 = var0 * var1;\n                    \n                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = var2;\n                        var1 = storage[0x04];\n                        var2 = var1;\n                    \n                        if (!var2) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x0560:0x0580] = var0 / var2;\n                        memory[0x0580:0x05a0] = 0x08c379a0;\n                        memory[0x05a0:0x05c0] = 0x20;\n                        memory[0x05c0:0x05e0] = 0x2f;\n                        memory[0x05e0:0x0600] = 0x5468657265206973206e6f7420656e6f7567682065746820696e207468652063;\n                        memory[0x0600:0x0620] = 0x6f6e747261637420746f20737761700000000000000000000000000000000000;\n                    \n                        if (storage[0x06] < memory[0x0560:0x0580]) { revert(memory[0x059c:0x0640]); }\n                    \n                        var temp128;\n                        temp128, memory[0x00:0x00] = address(msg.sender).call.gas(0x00).value(memory[0x0560:0x0580])(memory[0x00:0x00]);\n                    \n                        if (!temp128) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = 0x06;\n                        var1 = storage[var0];\n                        var2 = memory[0x0560:0x0580];\n                    \n                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                    \n                        storage[var0] = var1 - var2;\n                        memory[0xe0:0x0100] = msg.sender;\n                        memory[0xc0:0xe0] = 0x0a;\n                        var0 = keccak256(memory[0xc0:0x0100]);\n                        var1 = storage[var0];\n                        var2 = msg.data[0x24:0x44];\n                    \n                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                    \n                        storage[var0] = var1 - var2;\n                        memory[0xe0:0x0100] = storage[0x15];\n                        memory[0xc0:0xe0] = 0x0a;\n                        var0 = keccak256(memory[0xc0:0x0100]);\n                        var temp129 = storage[var0];\n                        var1 = temp129;\n                        var2 = msg.data[0x24:0x44];\n                    \n                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                    \n                        storage[var0] = var1 + var2;\n                        memory[0x00:0x20] = 0x01;\n                        return memory[0x00:0x20];\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                if (msg.sender != storage[0x13]) { revert(memory[0x00:0x00]); }\n            \n                storage[0x03] = msg.data[0x04:0x24];\n                storage[0x04] = msg.data[0x24:0x44];\n                storage[0x05] = msg.data[0x44:0x64];\n                memory[0x00:0x20] = 0x01;\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            memory[0x00:0x20] = storage[0x02];\n            return memory[0x00:0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] != 0x18160ddd) {\n            if (memory[0x00:0x20] != 0x6a054250) {\n                if (memory[0x00:0x20] != 0x03714709) {\n                    if (memory[0x00:0x20] == 0x587566ef) {\n                        memory[0x0140:0x0164] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x24];\n                    \n                        if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x04) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x0500:0x0520] = 0x03;\n                        memory[0x0520:0x0540] = 0x6574680000000000000000000000000000000000000000000000000000000000;\n                    \n                        if (keccak256(memory[0x0140 + 0x20:0x0140 + 0x20 + memory[0x0140:0x0160]]) != keccak256(memory[0x0500 + 0x20:0x0500 + 0x20 + memory[0x0500:0x0520]])) {\n                            memory[0x0200:0x0220] = 0x04;\n                            memory[0x0220:0x0240] = 0x7573647400000000000000000000000000000000000000000000000000000000;\n                        \n                            if (memory[0x0160:0x0180] != memory[0x0220:0x0240]) {\n                                memory[0x00:0x20] = 0x00;\n                                return memory[0x00:0x20];\n                            } else {\n                                var temp111 = storage[0x05];\n                                var0 = temp111;\n                                var temp112 = msg.data[0x24:0x44];\n                                var1 = temp112;\n                                var2 = var0 * var1;\n                            \n                                if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = var2;\n                                var1 = storage[0x03];\n                                var2 = var1;\n                            \n                                if (!var2) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x0260:0x0280] = var0 / var2;\n                                memory[0x0280:0x02a0] = storage[0x07];\n                                memory[0x02a0:0x02c0] = 0x08c379a0;\n                                memory[0x02c0:0x02e0] = 0x20;\n                                memory[0x02e0:0x0300] = 0x20;\n                                memory[0x0300:0x0320] = 0x4e6f20656e6f75676820746f6b656e7320696e2074686520636f6e7472616374;\n                                var temp113 = memory[0x0260:0x0280];\n                                memory[0xe0:0x0100] = storage[0x15];\n                                memory[0xc0:0xe0] = 0x0a;\n                            \n                                if (storage[keccak256(memory[0xc0:0x0100])] < temp113) { revert(memory[0x02bc:0x0340]); }\n                            \n                                memory[0x0340:0x0360] = 0x08c379a0;\n                                memory[0x0360:0x0380] = 0x20;\n                                memory[0x0380:0x03a0] = 0x10;\n                                memory[0x03a0:0x03c0] = 0x4e6f205553445420726563656976656400000000000000000000000000000000;\n                                var temp114 = memory[0x0280:0x02a0];\n                                var0 = temp114;\n                                var1 = msg.data[0x24:0x44];\n                            \n                                if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                            \n                                if (storage[0x06] != var0 + var1) { revert(memory[0x035c:0x03e0]); }\n                            \n                                if (!address(storage[0x15]).code.length) { revert(memory[0x00:0x00]); }\n                            \n                                if (!(address(this) ~ storage[0x15])) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x03e0:0x0400] = 0xa9059cbb;\n                                memory[0x0400:0x0420] = msg.sender;\n                                memory[0x0420:0x0440] = memory[0x0260:0x0280];\n                                var temp115;\n                                temp115, memory[0x0480:0x04a0] = address(storage[0x15]).call.gas(msg.gas)(memory[0x03fc:0x0440]);\n                            \n                                if (!temp115) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x00:0x20] = 0x01;\n                                return memory[0x00:0x20];\n                            }\n                        } else {\n                            var temp116 = storage[0x04];\n                            var0 = temp116;\n                            var temp117 = msg.data[0x24:0x44];\n                            var1 = temp117;\n                            var2 = var0 * var1;\n                        \n                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = var2;\n                            var1 = storage[0x03];\n                            var2 = var1;\n                        \n                            if (!var2) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x0560:0x0580] = var0 / var2;\n                            memory[0x0580:0x05a0] = storage[0x06];\n                            memory[0x05a0:0x05c0] = 0x08c379a0;\n                            memory[0x05c0:0x05e0] = 0x20;\n                            memory[0x05e0:0x0600] = 0x20;\n                            memory[0x0600:0x0620] = 0x4e6f20656e6f75676820746f6b656e7320696e2074686520636f6e7472616374;\n                            var temp118 = memory[0x0560:0x0580];\n                            memory[0xe0:0x0100] = storage[0x15];\n                            memory[0xc0:0xe0] = 0x0a;\n                        \n                            if (storage[keccak256(memory[0xc0:0x0100])] < temp118) { revert(memory[0x05bc:0x0640]); }\n                        \n                            memory[0x0640:0x0660] = 0x08c379a0;\n                            memory[0x0660:0x0680] = 0x20;\n                            memory[0x0680:0x06a0] = 0x0f;\n                            memory[0x06a0:0x06c0] = 0x4e6f206574682072656365697665640000000000000000000000000000000000;\n                            var temp119 = memory[0x0580:0x05a0];\n                            var0 = temp119;\n                            var1 = msg.data[0x24:0x44];\n                        \n                            if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                        \n                            if (storage[0x06] != var0 + var1) { revert(memory[0x065c:0x06e0]); }\n                        \n                            if (!address(storage[0x15]).code.length) { revert(memory[0x00:0x00]); }\n                        \n                            if (!(address(this) ~ storage[0x15])) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x06e0:0x0700] = 0xa9059cbb;\n                            memory[0x0700:0x0720] = msg.sender;\n                            memory[0x0720:0x0740] = memory[0x0560:0x0580];\n                            var temp120;\n                            temp120, memory[0x0780:0x07a0] = address(storage[0x15]).call.gas(msg.gas)(memory[0x06fc:0x0740]);\n                        \n                            if (!temp120) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x00:0x20] = 0x01;\n                            return memory[0x00:0x20];\n                        }\n                    } else if (memory[0x00:0x20] != 0x97a2d0eb) {\n                        if (memory[0x00:0x20] != 0x77884378) {\n                            if (0x00) {\n                                memory[0x0160:0x0180] = var-1;\n                                memory[0x0140:0x0160] = var-2;\n                            \n                                if (!storage[0x09]) { revert(memory[0x00:0x00]); }\n                            \n                                if (!(storage[0x11] ~ 0x00)) { revert(memory[0x00:0x00]); }\n                            \n                                var-2 = 0x02;\n                                var-1 = storage[var-2];\n                                var0 = memory[0x0140:0x0160];\n                            \n                                if (var-1 < var0) { revert(memory[0x00:0x00]); }\n                            \n                                storage[var-2] = var-1 - var0;\n                                memory[0xe0:0x0100] = storage[0x11];\n                                memory[0xc0:0xe0] = 0x0a;\n                                var-2 = keccak256(memory[0xc0:0x0100]);\n                                var-1 = storage[var-2];\n                                var0 = memory[0x0140:0x0160];\n                            \n                                if (var-1 < var0) { revert(memory[0x00:0x00]); }\n                            \n                                storage[var-2] = var-1 - var0;\n                                memory[0x0180:0x01a0] = memory[0x0140:0x0160];\n                                log(memory[0x0180:0x01a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x11], 0x00]);\n                                // Error: Could not resolve jump destination!\n                            } else if (0x00) {\n                                // Error: StackRead before write???\n                                var var-2;\n                                // Error: StackRead before write???\n                                var var-1;\n                                memory[0x0160:0x0180] = var-1;\n                                memory[0x0140:0x0160] = var-2;\n                                var-2 = memory[0x0140:0x0160];\n                                var-1 = memory[0x0160:0x0180];\n                                memory[0x01a0:0x01c0] = 0x9b1f9e74;\n                                memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                var0 = memory[0x01c0:0x01e0];\n                                var1 = 0x06;\n                                // Unhandled termination\n                            } else if (memory[0x00:0x20] != 0xdd62ed3e) {\n                                if (memory[0x00:0x20] != 0xa638f2e2) {\n                                    if (memory[0x00:0x20] != 0x939624ab) {\n                                        if (memory[0x00:0x20] != 0x49c662b8) {\n                                            if (memory[0x00:0x20] != 0xa9059cbb) {\n                                                if (memory[0x00:0x20] != 0x23b872dd) {\n                                                    if (memory[0x00:0x20] != 0xa6f12e85) {\n                                                        if (memory[0x00:0x20] != 0x60dded11) {\n                                                            if (memory[0x00:0x20] != 0x095ea7b3) {\n                                                                if (memory[0x00:0x20] != 0x048e45ca) {\n                                                                    if (memory[0x00:0x20] != 0xc8c01a55) {\n                                                                        if (memory[0x00:0x20] != 0x06fdde03) {\n                                                                            if (memory[0x00:0x20] != 0x95d89b41) {\n                                                                                if (memory[0x00:0x20] != 0x313ce567) {\n                                                                                    if (memory[0x00:0x20] != 0x70a08231) {\n                                                                                        if (memory[0x00:0x20] != 0xfe92aff1) {\n                                                                                            if (memory[0x00:0x20] != 0xbe6bf389) {\n                                                                                                if (memory[0x00:0x20] != 0x421f8e14) {\n                                                                                                    if (memory[0x00:0x20] != 0xe9562a6d) {\n                                                                                                        if (memory[0x00:0x20] != 0xf94be3af) {\n                                                                                                            if (memory[0x00:0x20] != 0xbb3cb31b) {\n                                                                                                                if (memory[0x00:0x20] != 0x8f33367a) {\n                                                                                                                    if (memory[0x00:0x20] != 0xb53574ab) {\n                                                                                                                        if (memory[0x00:0x20] != 0xa1bb138e) {\n                                                                                                                            if (memory[0x00:0x20] != 0x674b392e) {\n                                                                                                                                if (memory[0x00:0x20] != 0x0410bf99) {\n                                                                                                                                    if (memory[0x00:0x20] != 0x1952ddbd) {\n                                                                                                                                        if (memory[0x00:0x20] != 0xb993ed4b) { revert(memory[0x00:0x00]); }\n                                                                                                                                    \n                                                                                                                                        if (msg.value) { revert(memory[0x00:0x00]); }\n                                                                                                                                    \n                                                                                                                                        var var0 = msg.data[0x04:0x24];\n                                                                                                                                    \n                                                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                                    \n                                                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                                                                                        var temp0 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                                        memory[0xc0:0xe0] = temp0;\n                                                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x06];\n                                                                                                                                        return memory[0x00:0x20];\n                                                                                                                                    } else if (!msg.value) {\n                                                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                                                    \n                                                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                                    \n                                                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                                                                                        var temp1 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                                        memory[0xc0:0xe0] = temp1;\n                                                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x05];\n                                                                                                                                        return memory[0x00:0x20];\n                                                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                                                } else if (!msg.value) {\n                                                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                                                \n                                                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                                \n                                                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                                    memory[0xc0:0xe0] = 0x10;\n                                                                                                                                    var temp2 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                                    memory[0xc0:0xe0] = temp2;\n                                                                                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x04];\n                                                                                                                                    return memory[0x00:0x20];\n                                                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                                                            } else if (!msg.value) {\n                                                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                                                            \n                                                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                            \n                                                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                                memory[0xc0:0xe0] = 0x10;\n                                                                                                                                var temp3 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                                memory[0xc0:0xe0] = temp3;\n                                                                                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                                                                                return memory[0x00:0x20];\n                                                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                                                        } else if (!msg.value) {\n                                                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                                                        \n                                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                        \n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                            memory[0xc0:0xe0] = 0x10;\n                                                                                                                            var temp4 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                            memory[0xc0:0xe0] = temp4;\n                                                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                                                                            return memory[0x00:0x20];\n                                                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                                                    } else if (!msg.value) {\n                                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                                    \n                                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                    \n                                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                                                                        var temp5 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                        memory[0xc0:0xe0] = temp5;\n                                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                                                                                                        return memory[0x00:0x20];\n                                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                                } else if (!msg.value) {\n                                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                                \n                                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                                \n                                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                    memory[0xc0:0xe0] = 0x10;\n                                                                                                                    var temp6 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                    memory[0xc0:0xe0] = temp6;\n                                                                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                                                                    return memory[0x00:0x20];\n                                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                                            } else if (!msg.value) {\n                                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                                            \n                                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                            \n                                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                                memory[0xc0:0xe0] = 0x0f;\n                                                                                                                var temp7 = keccak256(memory[0xc0:0x0100]);\n                                                                                                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                                memory[0xc0:0xe0] = temp7;\n                                                                                                                memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                                                                return memory[0x00:0x20];\n                                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                                        } else if (!msg.value) {\n                                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                                        \n                                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                        \n                                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                            memory[0xc0:0xe0] = 0x0f;\n                                                                                                            var temp8 = keccak256(memory[0xc0:0x0100]);\n                                                                                                            memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                            memory[0xc0:0xe0] = temp8;\n                                                                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                                                            return memory[0x00:0x20];\n                                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                                    } else if (!msg.value) {\n                                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                                    \n                                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                    \n                                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                        memory[0xc0:0xe0] = 0x0f;\n                                                                                                        var temp9 = keccak256(memory[0xc0:0x0100]);\n                                                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                        memory[0xc0:0xe0] = temp9;\n                                                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                                                                                        return memory[0x00:0x20];\n                                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                                } else if (!msg.value) {\n                                                                                                    var0 = msg.data[0x04:0x24];\n                                                                                                \n                                                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                                \n                                                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                    memory[0xc0:0xe0] = 0x0f;\n                                                                                                    var temp10 = keccak256(memory[0xc0:0x0100]);\n                                                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                                                    memory[0xc0:0xe0] = temp10;\n                                                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                                                    return memory[0x00:0x20];\n                                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                                            } else if (!msg.value) {\n                                                                                                var0 = msg.data[0x04:0x24];\n                                                                                            \n                                                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                            \n                                                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                                memory[0xc0:0xe0] = 0x0c;\n                                                                                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                                return memory[0x00:0x20];\n                                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                                        } else if (!msg.value) {\n                                                                                            var0 = msg.data[0x04:0x24];\n                                                                                        \n                                                                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                        \n                                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                            memory[0xc0:0xe0] = 0x0b;\n                                                                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                            return memory[0x00:0x20];\n                                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                                    } else if (!msg.value) {\n                                                                                        var0 = msg.data[0x04:0x24];\n                                                                                    \n                                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                                    \n                                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                                                                        return memory[0x00:0x20];\n                                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                                } else if (!msg.value) {\n                                                                                    memory[0x00:0x20] = storage[0x08];\n                                                                                    return memory[0x00:0x20];\n                                                                                } else { revert(memory[0x00:0x00]); }\n                                                                            } else if (!msg.value) {\n                                                                                var0 = 0x01;\n                                                                                memory[0xc0:0xe0] = var0;\n                                                                                var var1 = keccak256(memory[0xc0:0xe0]);\n                                                                                var var2 = 0x0180;\n                                                                                var temp11 = storage[var1] + 0x20;\n                                                                                var var3 = temp11;\n                                                                                var var4 = 0x0120;\n                                                                                memory[var4:var4 + 0x20] = 0x00;\n                                                                                var var5 = 0x02;\n                                                                            \n                                                                                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_2662; }\n                                                                            \n                                                                            label_2666:\n                                                                                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                                var temp12 = var4;\n                                                                                var temp13 = memory[temp12:temp12 + 0x20] + 0x01;\n                                                                                memory[temp12:temp12 + 0x20] = temp13;\n                                                                            \n                                                                                if (var5 == temp13) { goto label_2688; }\n                                                                            \n                                                                                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_2666; }\n                                                                            \n                                                                            label_2662:\n                                                                            \n                                                                            label_2688:\n                                                                                var temp14 = memory[0x0180:0x01a0];\n                                                                                var temp15 = (temp14 + 0x1f) - temp14 - 0x01 % 0x20 - temp14;\n                                                                                memory[temp14 + 0x01a0:temp14 + 0x01a0 + temp15] = msg.data[msg.data.length:msg.data.length + temp15];\n                                                                                memory[0x0160:0x0180] = 0x20;\n                                                                                var temp16 = memory[0x0180:0x01a0] + 0x40;\n                                                                                return memory[0x0160:0x0160 + (temp16 + 0x1f) - temp16 - 0x01 % 0x20];\n                                                                            } else { revert(memory[0x00:0x00]); }\n                                                                        } else if (!msg.value) {\n                                                                            var0 = 0x00;\n                                                                            memory[0xc0:0xe0] = var0;\n                                                                            var1 = keccak256(memory[0xc0:0xe0]);\n                                                                            var2 = 0x0180;\n                                                                            var temp17 = storage[var1] + 0x20;\n                                                                            var3 = temp17;\n                                                                            var4 = 0x0120;\n                                                                            memory[var4:var4 + 0x20] = 0x00;\n                                                                            var5 = 0x03;\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_25AE; }\n                                                                        \n                                                                        label_25B2:\n                                                                            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                                                            var temp18 = var4;\n                                                                            var temp19 = memory[temp18:temp18 + 0x20] + 0x01;\n                                                                            memory[temp18:temp18 + 0x20] = temp19;\n                                                                        \n                                                                            if (var5 == temp19) { goto label_25D4; }\n                                                                        \n                                                                            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_25B2; }\n                                                                        \n                                                                        label_25AE:\n                                                                        \n                                                                        label_25D4:\n                                                                            var temp20 = memory[0x0180:0x01a0];\n                                                                            var temp21 = (temp20 + 0x1f) - temp20 - 0x01 % 0x20 - temp20;\n                                                                            memory[temp20 + 0x01a0:temp20 + 0x01a0 + temp21] = msg.data[msg.data.length:msg.data.length + temp21];\n                                                                            memory[0x0160:0x0180] = 0x20;\n                                                                            var temp22 = memory[0x0180:0x01a0] + 0x40;\n                                                                            return memory[0x0160:0x0160 + (temp22 + 0x1f) - temp22 - 0x01 % 0x20];\n                                                                        } else { revert(memory[0x00:0x00]); }\n                                                                    } else if (!msg.value) {\n                                                                        var0 = msg.data[0x04:0x24];\n                                                                    \n                                                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var0 = block.timestamp;\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp23 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp23;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                        var temp24 = storage[keccak256(memory[0xc0:0xe0]) + 0x05];\n                                                                        var1 = temp24;\n                                                                        var2 = 0x03f480;\n                                                                    \n                                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        if (var1 + var2 > var0) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp25 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp25;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    \n                                                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x06]) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp26 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp26;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    \n                                                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp27 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp27;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp28 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp28;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                        memory[0xc0:0xe0] = 0x10;\n                                                                        var temp29 = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                        memory[0xc0:0xe0] = temp29;\n                                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                        memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                        memory[0x01a0:0x01c0] = storage[0x03];\n                                                                    \n                                                                        if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                                            var0 = memory[0x01a0:0x01c0];\n                                                                            var1 = memory[0x0180:0x01a0];\n                                                                        \n                                                                            if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp39 = var0 - var1;\n                                                                            var0 = temp39;\n                                                                            var temp40 = memory[0x0160:0x0180];\n                                                                            var1 = temp40;\n                                                                            var2 = var0 * var1;\n                                                                        \n                                                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var0 = var2;\n                                                                            var1 = storage[0x03];\n                                                                            var2 = var1;\n                                                                        \n                                                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            memory[0x0240:0x0260] = var0 / var2;\n                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                        \n                                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 - var2;\n                                                                            memory[0xe0:0x0100] = storage[0x12];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0240:0x0260];\n                                                                        \n                                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 - var2;\n                                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                            var3 = memory[0x01a0:0x01c0];\n                                                                            var4 = memory[0x0180:0x01a0];\n                                                                            var5 = var4;\n                                                                        \n                                                                            if (!var5) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp41 = var3 / var5;\n                                                                            var3 = temp41;\n                                                                            var temp42 = var2;\n                                                                            var4 = temp42 * var3;\n                                                                        \n                                                                            if (!((var4 / temp42 == var3) | !temp42)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var2 = var4;\n                                                                            var temp43 = var1;\n                                                                        \n                                                                            if (temp43 + var2 < temp43) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 + var2;\n                                                                            var0 = memory[0x0160:0x0180];\n                                                                            var1 = memory[0x01a0:0x01c0];\n                                                                            var2 = memory[0x0180:0x01a0];\n                                                                            var3 = var2;\n                                                                        \n                                                                            if (!var3) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp44 = var1 / var3;\n                                                                            var1 = temp44;\n                                                                            var temp45 = var0;\n                                                                            var2 = temp45 * var1;\n                                                                        \n                                                                            if (!((var2 / temp45 == var1) | !temp45)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            memory[0x0260:0x0280] = var2;\n                                                                            log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                            memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                                            log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x12], memory[0x0140:0x0160]]);\n                                                                            goto label_24C0;\n                                                                        } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                        \n                                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 - var2;\n                                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var temp30 = storage[var0];\n                                                                            var1 = temp30;\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                        \n                                                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 + var2;\n                                                                            memory[0x01c0:0x01e0] = memory[0x0160:0x0180];\n                                                                            log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                        \n                                                                        label_24BF:\n                                                                        \n                                                                        label_24C0:\n                                                                            var0 = memory[0x0140:0x0160];\n                                                                            var1 = memory[0x0160:0x0180];\n                                                                            var2 = memory[0x0180:0x01a0];\n                                                                            var3 = memory[0x01a0:0x01c0];\n                                                                            memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                            memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                                            var4 = memory[0x02e0:0x0300];\n                                                                            var5 = 0x06;\n                                                                            // Unhandled termination\n                                                                        } else {\n                                                                            var0 = memory[0x0180:0x01a0];\n                                                                            var1 = memory[0x01a0:0x01c0];\n                                                                        \n                                                                            if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp31 = var0 - var1;\n                                                                            var0 = temp31;\n                                                                            var temp32 = memory[0x0160:0x0180];\n                                                                            var1 = temp32;\n                                                                            var2 = var0 * var1;\n                                                                        \n                                                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var0 = var2;\n                                                                            var1 = storage[0x03];\n                                                                            var2 = var1;\n                                                                        \n                                                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            memory[0x01e0:0x0200] = var0 / var2;\n                                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                        \n                                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 - var2;\n                                                                            memory[0xe0:0x0100] = storage[0x12];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var temp33 = storage[var0];\n                                                                            var1 = temp33;\n                                                                            var2 = memory[0x01e0:0x0200];\n                                                                        \n                                                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 + var2;\n                                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                                            memory[0xc0:0xe0] = 0x0a;\n                                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                                            var1 = storage[var0];\n                                                                            var2 = memory[0x0160:0x0180];\n                                                                            var3 = memory[0x01a0:0x01c0];\n                                                                            var4 = memory[0x0180:0x01a0];\n                                                                            var5 = var4;\n                                                                        \n                                                                            if (!var5) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp34 = var3 / var5;\n                                                                            var3 = temp34;\n                                                                            var temp35 = var2;\n                                                                            var4 = temp35 * var3;\n                                                                        \n                                                                            if (!((var4 / temp35 == var3) | !temp35)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var2 = var4;\n                                                                            var temp36 = var1;\n                                                                        \n                                                                            if (temp36 + var2 < temp36) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            storage[var0] = var1 + var2;\n                                                                            var0 = memory[0x0160:0x0180];\n                                                                            var1 = memory[0x01a0:0x01c0];\n                                                                            var2 = memory[0x0180:0x01a0];\n                                                                            var3 = var2;\n                                                                        \n                                                                            if (!var3) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            var temp37 = var1 / var3;\n                                                                            var1 = temp37;\n                                                                            var temp38 = var0;\n                                                                            var2 = temp38 * var1;\n                                                                        \n                                                                            if (!((var2 / temp38 == var1) | !temp38)) { revert(memory[0x00:0x00]); }\n                                                                        \n                                                                            memory[0x0200:0x0220] = var2;\n                                                                            log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x04:0x24], memory[0x0140:0x0160]]);\n                                                                            memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                                            log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x04:0x24], storage[0x12]]);\n                                                                            goto label_24BF;\n                                                                        }\n                                                                    } else { revert(memory[0x00:0x00]); }\n                                                                } else if (!msg.value) {\n                                                                    var0 = msg.data[0x24:0x44];\n                                                                \n                                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var0 = msg.data[0x44:0x64];\n                                                                \n                                                                    if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    if (msg.sender != storage[0x13]) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = 0x10;\n                                                                    var temp46 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = temp46;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = 0x10;\n                                                                    var temp47 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = temp47;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0])];\n                                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                                    memory[0xc0:0xe0] = 0x10;\n                                                                    var temp48 = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                    memory[0xc0:0xe0] = temp48;\n                                                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                                    memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                                    memory[0x01a0:0x01c0] = storage[0x03];\n                                                                \n                                                                    if (msg.data[0x44:0x64]) {\n                                                                        memory[0xe0:0x0100] = msg.sender;\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0x0340:0x0360] = memory[0x0140:0x0160];\n                                                                        log(memory[0x0340:0x0360], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, msg.data[0x24:0x44]]);\n                                                                        memory[0x00:0x20] = 0x01;\n                                                                        return memory[0x00:0x20];\n                                                                    } else if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                                        var0 = memory[0x01a0:0x01c0];\n                                                                        var1 = memory[0x0180:0x01a0];\n                                                                    \n                                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp57 = var0 - var1;\n                                                                        var0 = temp57;\n                                                                        var temp58 = memory[0x0140:0x0160];\n                                                                        var1 = temp58;\n                                                                        var2 = var0 * var1;\n                                                                    \n                                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var0 = var2;\n                                                                        var1 = storage[0x03];\n                                                                        var2 = var1;\n                                                                    \n                                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0240:0x0260] = var0 / var2;\n                                                                        memory[0xe0:0x0100] = msg.sender;\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = storage[0x12];\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0240:0x0260];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        var4 = memory[0x0180:0x01a0];\n                                                                        var5 = var4;\n                                                                    \n                                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp59 = var3 / var5;\n                                                                        var3 = temp59;\n                                                                        var temp60 = var2;\n                                                                        var4 = temp60 * var3;\n                                                                    \n                                                                        if (!((var4 / temp60 == var3) | !temp60)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var2 = var4;\n                                                                        var temp61 = var1;\n                                                                    \n                                                                        if (temp61 + var2 < temp61) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = var2;\n                                                                    \n                                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp62 = var1 / var3;\n                                                                        var1 = temp62;\n                                                                        var temp63 = var0;\n                                                                        var2 = temp63 * var1;\n                                                                    \n                                                                        if (!((var2 / temp63 == var1) | !temp63)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0260:0x0280] = var2;\n                                                                        log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x24:0x44], memory[0x0160:0x0180]]);\n                                                                        memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                                        log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x12], memory[0x0160:0x0180]]);\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x0160:0x0180];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                        memory[0x02e0:0x0300] = memory[0x0140:0x0160];\n                                                                        var4 = memory[0x02e0:0x0300];\n                                                                        var5 = 0x06;\n                                                                        // Unhandled termination\n                                                                    } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                                        memory[0xe0:0x0100] = msg.sender;\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                                                        log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.data[0x24:0x44], memory[0x0160:0x0180]]);\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x0160:0x0180];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                        memory[0x02e0:0x0300] = memory[0x0140:0x0160];\n                                                                        var4 = memory[0x02e0:0x0300];\n                                                                        var5 = 0x06;\n                                                                        // Unhandled termination\n                                                                    } else {\n                                                                        var0 = memory[0x0180:0x01a0];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                    \n                                                                        if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp49 = var0 - var1;\n                                                                        var0 = temp49;\n                                                                        var temp50 = memory[0x0140:0x0160];\n                                                                        var1 = temp50;\n                                                                        var2 = var0 * var1;\n                                                                    \n                                                                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var0 = var2;\n                                                                        var1 = storage[0x03];\n                                                                        var2 = var1;\n                                                                    \n                                                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x01e0:0x0200] = var0 / var2;\n                                                                        memory[0xe0:0x0100] = msg.sender;\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                    \n                                                                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 - var2;\n                                                                        memory[0xe0:0x0100] = storage[0x12];\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var temp51 = storage[var0];\n                                                                        var1 = temp51;\n                                                                        var2 = memory[0x01e0:0x0200];\n                                                                    \n                                                                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                                                        memory[0xc0:0xe0] = 0x0a;\n                                                                        var0 = keccak256(memory[0xc0:0x0100]);\n                                                                        var1 = storage[var0];\n                                                                        var2 = memory[0x0140:0x0160];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        var4 = memory[0x0180:0x01a0];\n                                                                        var5 = var4;\n                                                                    \n                                                                        if (!var5) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp52 = var3 / var5;\n                                                                        var3 = temp52;\n                                                                        var temp53 = var2;\n                                                                        var4 = temp53 * var3;\n                                                                    \n                                                                        if (!((var4 / temp53 == var3) | !temp53)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var2 = var4;\n                                                                        var temp54 = var1;\n                                                                    \n                                                                        if (temp54 + var2 < temp54) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        storage[var0] = var1 + var2;\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x01a0:0x01c0];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = var2;\n                                                                    \n                                                                        if (!var3) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp55 = var1 / var3;\n                                                                        var1 = temp55;\n                                                                        var temp56 = var0;\n                                                                        var2 = temp56 * var1;\n                                                                    \n                                                                        if (!((var2 / temp56 == var1) | !temp56)) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        memory[0x0200:0x0220] = var2;\n                                                                        log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0160:0x0180]]);\n                                                                        memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                                        log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x24:0x44], storage[0x12]]);\n                                                                        var0 = memory[0x0140:0x0160];\n                                                                        var1 = memory[0x0160:0x0180];\n                                                                        var2 = memory[0x0180:0x01a0];\n                                                                        var3 = memory[0x01a0:0x01c0];\n                                                                        memory[0x02c0:0x02e0] = 0x42966c68;\n                                                                        memory[0x02e0:0x0300] = memory[0x0140:0x0160];\n                                                                        var4 = memory[0x02e0:0x0300];\n                                                                        var5 = 0x06;\n                                                                        // Unhandled termination\n                                                                    }\n                                                                } else { revert(memory[0x00:0x00]); }\n                                                            } else if (!msg.value) {\n                                                                var0 = msg.data[0x04:0x24];\n                                                            \n                                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                memory[0xe0:0x0100] = msg.sender;\n                                                                memory[0xc0:0xe0] = 0x0d;\n                                                                var temp64 = keccak256(memory[0xc0:0x0100]);\n                                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                                memory[0xc0:0xe0] = temp64;\n                                                                storage[keccak256(memory[0xc0:0x0100])] = msg.data[0x24:0x44];\n                                                                memory[0x0140:0x0160] = msg.data[0x24:0x44];\n                                                                log(memory[0x0140:0x0160], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, msg.data[0x04:0x24]]);\n                                                                memory[0x00:0x20] = 0x01;\n                                                                return memory[0x00:0x20];\n                                                            } else { revert(memory[0x00:0x00]); }\n                                                        } else if (!msg.value) {\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x10;\n                                                            var temp65 = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                            memory[0xc0:0xe0] = temp65;\n                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        \n                                                            if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0x0140:0x0160] = storage[0x13];\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x10;\n                                                            var temp66 = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                            memory[0xc0:0xe0] = temp66;\n                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x10;\n                                                            var temp67 = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                            memory[0xc0:0xe0] = temp67;\n                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0])];\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var temp68 = storage[var0];\n                                                            var1 = temp68;\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 + var2;\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x0e;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x10;\n                                                            var temp69 = keccak256(memory[0xc0:0x0100]);\n                                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                            memory[0xc0:0xe0] = temp69;\n                                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                            storage[keccak256(memory[0xc0:0xe0]) + 0x06] = 0x01;\n                                                            memory[0x01a0:0x01c0] = memory[0x0160:0x0180];\n                                                            log(memory[0x01a0:0x01c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, memory[0x0140:0x0160]]);\n                                                            memory[0x00:0x20] = 0x01;\n                                                            return memory[0x00:0x20];\n                                                        } else { revert(memory[0x00:0x00]); }\n                                                    } else if (!msg.value) {\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x10;\n                                                        var temp70 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp70;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                    \n                                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x10;\n                                                        var temp71 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp71;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0])];\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x10;\n                                                        var temp72 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp72;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + 0x02];\n                                                        memory[0xe0:0x0100] = msg.sender;\n                                                        memory[0xc0:0xe0] = 0x10;\n                                                        var temp73 = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                        memory[0xc0:0xe0] = temp73;\n                                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                                        memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0xe0]) + 0x03];\n                                                        memory[0x01a0:0x01c0] = storage[0x03];\n                                                    \n                                                        if (memory[0x01a0:0x01c0] > memory[0x0180:0x01a0]) {\n                                                            var0 = memory[0x01a0:0x01c0];\n                                                            var1 = memory[0x0180:0x01a0];\n                                                        \n                                                            if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp83 = var0 - var1;\n                                                            var0 = temp83;\n                                                            var temp84 = memory[0x0160:0x0180];\n                                                            var1 = temp84;\n                                                            var2 = var0 * var1;\n                                                        \n                                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var0 = var2;\n                                                            var1 = storage[0x03];\n                                                            var2 = var1;\n                                                        \n                                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0x0240:0x0260] = var0 / var2;\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = storage[0x12];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0240:0x0260];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                            var3 = memory[0x01a0:0x01c0];\n                                                            var4 = memory[0x0180:0x01a0];\n                                                            var5 = var4;\n                                                        \n                                                            if (!var5) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp85 = var3 / var5;\n                                                            var3 = temp85;\n                                                            var temp86 = var2;\n                                                            var4 = temp86 * var3;\n                                                        \n                                                            if (!((var4 / temp86 == var3) | !temp86)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var2 = var4;\n                                                            var temp87 = var1;\n                                                        \n                                                            if (temp87 + var2 < temp87) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 + var2;\n                                                            var0 = memory[0x0160:0x0180];\n                                                            var1 = memory[0x01a0:0x01c0];\n                                                            var2 = memory[0x0180:0x01a0];\n                                                            var3 = var2;\n                                                        \n                                                            if (!var3) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp88 = var1 / var3;\n                                                            var1 = temp88;\n                                                            var temp89 = var0;\n                                                            var2 = temp89 * var1;\n                                                        \n                                                            if (!((var2 / temp89 == var1) | !temp89)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0x0260:0x0280] = var2;\n                                                            log(memory[0x0260:0x0280], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                            memory[0x0280:0x02a0] = memory[0x0240:0x0260];\n                                                            log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x12], memory[0x0140:0x0160]]);\n                                                            var0 = memory[0x0140:0x0160];\n                                                            var1 = memory[0x0160:0x0180];\n                                                            var2 = memory[0x0180:0x01a0];\n                                                            var3 = memory[0x01a0:0x01c0];\n                                                            memory[0x02c0:0x02e0] = 0x42966c68;\n                                                            memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                            var4 = memory[0x02e0:0x0300];\n                                                            var5 = 0x06;\n                                                            // Unhandled termination\n                                                        } else if (memory[0x01a0:0x01c0] >= memory[0x0180:0x01a0]) {\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var temp74 = storage[var0];\n                                                            var1 = temp74;\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 + var2;\n                                                            memory[0x01c0:0x01e0] = memory[0x0160:0x0180];\n                                                            log(memory[0x01c0:0x01e0], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                            var0 = memory[0x0140:0x0160];\n                                                            var1 = memory[0x0160:0x0180];\n                                                            var2 = memory[0x0180:0x01a0];\n                                                            var3 = memory[0x01a0:0x01c0];\n                                                            memory[0x02c0:0x02e0] = 0x42966c68;\n                                                            memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                            var4 = memory[0x02e0:0x0300];\n                                                            var5 = 0x06;\n                                                            // Unhandled termination\n                                                        } else {\n                                                            var0 = memory[0x0180:0x01a0];\n                                                            var1 = memory[0x01a0:0x01c0];\n                                                        \n                                                            if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp75 = var0 - var1;\n                                                            var0 = temp75;\n                                                            var temp76 = memory[0x0160:0x0180];\n                                                            var1 = temp76;\n                                                            var2 = var0 * var1;\n                                                        \n                                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var0 = var2;\n                                                            var1 = storage[0x03];\n                                                            var2 = var1;\n                                                        \n                                                            if (!var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0x01e0:0x0200] = var0 / var2;\n                                                            memory[0xe0:0x0100] = msg.sender;\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                        \n                                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 - var2;\n                                                            memory[0xe0:0x0100] = storage[0x12];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var temp77 = storage[var0];\n                                                            var1 = temp77;\n                                                            var2 = memory[0x01e0:0x0200];\n                                                        \n                                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 + var2;\n                                                            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                                            memory[0xc0:0xe0] = 0x0a;\n                                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                                            var1 = storage[var0];\n                                                            var2 = memory[0x0160:0x0180];\n                                                            var3 = memory[0x01a0:0x01c0];\n                                                            var4 = memory[0x0180:0x01a0];\n                                                            var5 = var4;\n                                                        \n                                                            if (!var5) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp78 = var3 / var5;\n                                                            var3 = temp78;\n                                                            var temp79 = var2;\n                                                            var4 = temp79 * var3;\n                                                        \n                                                            if (!((var4 / temp79 == var3) | !temp79)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var2 = var4;\n                                                            var temp80 = var1;\n                                                        \n                                                            if (temp80 + var2 < temp80) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            storage[var0] = var1 + var2;\n                                                            var0 = memory[0x0160:0x0180];\n                                                            var1 = memory[0x01a0:0x01c0];\n                                                            var2 = memory[0x0180:0x01a0];\n                                                            var3 = var2;\n                                                        \n                                                            if (!var3) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp81 = var1 / var3;\n                                                            var1 = temp81;\n                                                            var temp82 = var0;\n                                                            var2 = temp82 * var1;\n                                                        \n                                                            if (!((var2 / temp82 == var1) | !temp82)) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            memory[0x0200:0x0220] = var2;\n                                                            log(memory[0x0200:0x0220], [0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d, msg.sender, memory[0x0140:0x0160]]);\n                                                            memory[0x0220:0x0240] = memory[0x01e0:0x0200];\n                                                            log(memory[0x0220:0x0240], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, storage[0x12]]);\n                                                            var0 = memory[0x0140:0x0160];\n                                                            var1 = memory[0x0160:0x0180];\n                                                            var2 = memory[0x0180:0x01a0];\n                                                            var3 = memory[0x01a0:0x01c0];\n                                                            memory[0x02c0:0x02e0] = 0x42966c68;\n                                                            memory[0x02e0:0x0300] = memory[0x0160:0x0180];\n                                                            var4 = memory[0x02e0:0x0300];\n                                                            var5 = 0x06;\n                                                            // Unhandled termination\n                                                        }\n                                                    } else { revert(memory[0x00:0x00]); }\n                                                } else if (!msg.value) {\n                                                    var0 = msg.data[0x04:0x24];\n                                                \n                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var0 = msg.data[0x24:0x44];\n                                                \n                                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                                \n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var0 = storage[keccak256(memory[0xc0:0x0100])];\n                                                    var1 = msg.data[0x44:0x64];\n                                                \n                                                    if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                                \n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = 0x0e;\n                                                \n                                                    if (storage[keccak256(memory[0xc0:0x0100])] > var0 - var1) { revert(memory[0x00:0x00]); }\n                                                \n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                    var1 = storage[var0];\n                                                    var2 = msg.data[0x44:0x64];\n                                                \n                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                \n                                                    storage[var0] = var1 - var2;\n                                                    memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                                    memory[0xc0:0xe0] = 0x0a;\n                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                    var temp90 = storage[var0];\n                                                    var1 = temp90;\n                                                    var2 = msg.data[0x44:0x64];\n                                                \n                                                    if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                                \n                                                    storage[var0] = var1 + var2;\n                                                    var0 = msg.data[0x44:0x64];\n                                                    var1 = 0x64;\n                                                    var2 = var1;\n                                                \n                                                    if (!var2) { revert(memory[0x00:0x00]); }\n                                                \n                                                    memory[0x0140:0x0160] = var0 / var2;\n                                                    memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                    memory[0xc0:0xe0] = 0x0d;\n                                                    var temp91 = keccak256(memory[0xc0:0x0100]);\n                                                    memory[0xe0:0x0100] = msg.sender;\n                                                    memory[0xc0:0xe0] = temp91;\n                                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                                    var1 = storage[var0];\n                                                    var2 = msg.data[0x44:0x64];\n                                                \n                                                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                                \n                                                    storage[var0] = var1 - var2;\n                                                    memory[0x0160:0x0180] = msg.data[0x44:0x64];\n                                                    log(memory[0x0160:0x0180], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.data[0x04:0x24], msg.data[0x24:0x44]]);\n                                                    var0 = memory[0x0140:0x0160];\n                                                    var1 = memory[0x0160:0x0180];\n                                                    memory[0x01a0:0x01c0] = 0x42966c68;\n                                                    memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                                    var2 = memory[0x01c0:0x01e0];\n                                                    var3 = 0x06;\n                                                    // Unhandled termination\n                                                } else { revert(memory[0x00:0x00]); }\n                                            } else if (!msg.value) {\n                                                var0 = msg.data[0x04:0x24];\n                                            \n                                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x0a;\n                                                var0 = storage[keccak256(memory[0xc0:0x0100])];\n                                                var1 = msg.data[0x24:0x44];\n                                            \n                                                if (var0 < var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x0e;\n                                            \n                                                if (storage[keccak256(memory[0xc0:0x0100])] > var0 - var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                var0 = msg.data[0x24:0x44];\n                                                var1 = 0x64;\n                                                var2 = var1;\n                                            \n                                                if (!var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0x0140:0x0160] = var0 / var2;\n                                                memory[0xe0:0x0100] = msg.sender;\n                                                memory[0xc0:0xe0] = 0x0a;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var1 = storage[var0];\n                                                var2 = msg.data[0x24:0x44];\n                                            \n                                                if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 - var2;\n                                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                                memory[0xc0:0xe0] = 0x0a;\n                                                var0 = keccak256(memory[0xc0:0x0100]);\n                                                var temp92 = storage[var0];\n                                                var1 = temp92;\n                                                var2 = msg.data[0x24:0x44];\n                                            \n                                                if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                            \n                                                storage[var0] = var1 + var2;\n                                                memory[0x0160:0x0180] = msg.data[0x24:0x44];\n                                                log(memory[0x0160:0x0180], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, msg.data[0x04:0x24]]);\n                                                var0 = memory[0x0140:0x0160];\n                                                var1 = memory[0x0160:0x0180];\n                                                memory[0x01a0:0x01c0] = 0x42966c68;\n                                                memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                                                var2 = memory[0x01c0:0x01e0];\n                                                var3 = 0x06;\n                                                // Unhandled termination\n                                            } else { revert(memory[0x00:0x00]); }\n                                        } else if (!msg.value) {\n                                            var0 = msg.data[0x24:0x44];\n                                        \n                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0a;\n                                        \n                                            if (storage[keccak256(memory[0xc0:0x0100])] < msg.data[0x44:0x64]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x10;\n                                            var temp93 = keccak256(memory[0xc0:0x0100]);\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = temp93;\n                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                        \n                                            if (storage[keccak256(memory[0xc0:0xe0]) + 0x02]) { revert(memory[0x00:0x00]); }\n                                        \n                                            var0 = 0x015180;\n                                            var temp94 = msg.data[0x64:0x84];\n                                            var1 = temp94;\n                                            var2 = var0 * var1;\n                                        \n                                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                                        \n                                            var temp95 = var2;\n                                            var0 = temp95;\n                                            var1 = block.timestamp;\n                                        \n                                            if (var0 + var1 < var0) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0x0140:0x0160] = var0 + var1;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x10;\n                                            var temp96 = keccak256(memory[0xc0:0x0100]);\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = temp96;\n                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                            var temp97 = keccak256(memory[0xc0:0xe0]);\n                                            storage[temp97] = msg.data[0x24:0x44];\n                                            storage[temp97 + 0x01] = msg.sender;\n                                            storage[temp97 + 0x02] = msg.data[0x44:0x64];\n                                            storage[temp97 + 0x03] = storage[0x03];\n                                            storage[temp97 + 0x04] = block.timestamp;\n                                            storage[temp97 + 0x05] = memory[0x0140:0x0160];\n                                            storage[temp97 + 0x06] = 0x00;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0e;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var temp98 = storage[var0];\n                                            var1 = temp98;\n                                            var2 = msg.data[0x44:0x64];\n                                        \n                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 + var2;\n                                            memory[0x00:0x20] = 0x01;\n                                            return memory[0x00:0x20];\n                                        } else { revert(memory[0x00:0x00]); }\n                                    } else if (!msg.value) {\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x0f;\n                                        var temp99 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp99;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    \n                                        if (storage[keccak256(memory[0xc0:0xe0]) + 0x01] <= 0x00) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x0f;\n                                        var temp100 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp100;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                        memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + 0x01];\n                                        var0 = memory[0x0140:0x0160];\n                                        var1 = 0x03e8;\n                                        var2 = var1;\n                                    \n                                        if (!var2) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0x0160:0x0180] = var0 / var2;\n                                        memory[0xe0:0x0100] = msg.sender;\n                                        memory[0xc0:0xe0] = 0x0f;\n                                        var temp101 = keccak256(memory[0xc0:0x0100]);\n                                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                        memory[0xc0:0xe0] = temp101;\n                                        memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    \n                                        if (block.timestamp < storage[keccak256(memory[0xc0:0xe0]) + 0x03]) {\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0f;\n                                            var temp102 = keccak256(memory[0xc0:0x0100]);\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = temp102;\n                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                            var temp103 = keccak256(memory[0xc0:0xe0]);\n                                            storage[temp103] = msg.sender;\n                                            storage[temp103 + 0x01] = 0x00;\n                                            storage[temp103 + 0x02] = 0x00;\n                                            storage[temp103 + 0x03] = 0x00;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0e;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = memory[0x0140:0x0160];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0x00:0x20] = 0x01;\n                                            return memory[0x00:0x20];\n                                        } else {\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0a;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var temp104 = storage[var0];\n                                            var1 = temp104;\n                                            var2 = memory[0x0160:0x0180];\n                                        \n                                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 + var2;\n                                            memory[0xe0:0x0100] = storage[0x12];\n                                            memory[0xc0:0xe0] = 0x0a;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = memory[0x0160:0x0180];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            var0 = 0x02;\n                                            var1 = storage[var0];\n                                            var2 = memory[0x0160:0x0180];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0x0180:0x01a0] = memory[0x0160:0x0180];\n                                            log(memory[0x0180:0x01a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x12], msg.sender]);\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0f;\n                                            var temp105 = keccak256(memory[0xc0:0x0100]);\n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = temp105;\n                                            memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                            var temp106 = keccak256(memory[0xc0:0xe0]);\n                                            storage[temp106] = msg.sender;\n                                            storage[temp106 + 0x01] = 0x00;\n                                            storage[temp106 + 0x02] = 0x00;\n                                            storage[temp106 + 0x03] = 0x00;\n                                            memory[0xe0:0x0100] = msg.sender;\n                                            memory[0xc0:0xe0] = 0x0e;\n                                            var0 = keccak256(memory[0xc0:0x0100]);\n                                            var1 = storage[var0];\n                                            var2 = memory[0x0140:0x0160];\n                                        \n                                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                                        \n                                            storage[var0] = var1 - var2;\n                                            memory[0x00:0x20] = 0x01;\n                                            return memory[0x00:0x20];\n                                        }\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x0a;\n                                \n                                    if (storage[keccak256(memory[0xc0:0x0100])] < msg.data[0x04:0x24]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x0f;\n                                    var temp107 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = msg.data[0x44:0x64];\n                                    memory[0xc0:0xe0] = temp107;\n                                    memory[0xc0:0xe0] = keccak256(memory[0xc0:0x0100]);\n                                    var temp108 = keccak256(memory[0xc0:0xe0]);\n                                    storage[temp108] = msg.sender;\n                                    storage[temp108 + 0x01] = msg.data[0x04:0x24];\n                                    storage[temp108 + 0x02] = block.timestamp;\n                                    storage[temp108 + 0x03] = msg.data[0x24:0x44];\n                                    memory[0xe0:0x0100] = msg.sender;\n                                    memory[0xc0:0xe0] = 0x0e;\n                                    var0 = keccak256(memory[0xc0:0x0100]);\n                                    var temp109 = storage[var0];\n                                    var1 = temp109;\n                                    var2 = msg.data[0x04:0x24];\n                                \n                                    if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                                \n                                    storage[var0] = var1 + var2;\n                                    memory[0x00:0x20] = 0x01;\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x24:0x44];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                memory[0xc0:0xe0] = 0x0d;\n                                var temp110 = keccak256(memory[0xc0:0x0100]);\n                                memory[0xe0:0x0100] = msg.data[0x24:0x44];\n                                memory[0xc0:0xe0] = temp110;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            memory[0x00:0x20] = storage[0x09];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        var0 = msg.data[0x04:0x24];\n                    \n                        if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n                    \n                        if (msg.sender != storage[0x14]) { revert(memory[0x00:0x00]); }\n                    \n                        storage[0x09] = msg.data[0x04:0x24];\n                        memory[0x00:0x20] = 0x01;\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    memory[0x0140:0x0164] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x24];\n                \n                    if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x04) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x01a0:0x01c0] = 0x08c379a0;\n                    memory[0x01c0:0x01e0] = 0x20;\n                    memory[0x01e0:0x0200] = 0x18;\n                    memory[0x0200:0x0220] = 0x4e6f7420656e6f75676820746f6b656e2062616c616e63650000000000000000;\n                    var0 = msg.data[0x24:0x44];\n                    memory[0xe0:0x0100] = msg.sender;\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp121 = storage[keccak256(memory[0xc0:0x0100])];\n                    var1 = temp121;\n                    memory[0xe0:0x0100] = msg.sender;\n                    memory[0xc0:0xe0] = 0x0e;\n                    var2 = storage[keccak256(memory[0xc0:0x0100])];\n                \n                    if (var1 < var2) { revert(memory[0x00:0x00]); }\n                \n                    if (var1 - var2 < var0) { revert(memory[0x01bc:0x0240]); }\n                \n                    memory[0x0500:0x0520] = 0x03;\n                    memory[0x0520:0x0540] = 0x6574680000000000000000000000000000000000000000000000000000000000;\n                \n                    if (keccak256(memory[0x0140 + 0x20:0x0140 + 0x20 + memory[0x0140:0x0160]]) != keccak256(memory[0x0500 + 0x20:0x0500 + 0x20 + memory[0x0500:0x0520]])) {\n                        memory[0x02a0:0x02c0] = 0x04;\n                        memory[0x02c0:0x02e0] = 0x7573647400000000000000000000000000000000000000000000000000000000;\n                    \n                        if (memory[0x0160:0x0180] != memory[0x02c0:0x02e0]) {\n                            memory[0x00:0x20] = 0x00;\n                            return memory[0x00:0x20];\n                        } else {\n                            var temp122 = msg.data[0x24:0x44];\n                            var0 = temp122;\n                            var temp123 = storage[0x03];\n                            var1 = temp123;\n                            var2 = var0 * var1;\n                        \n                            if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = var2;\n                            var1 = storage[0x05];\n                            var2 = var1;\n                        \n                            if (!var2) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x0300:0x0320] = var0 / var2;\n                            memory[0x0320:0x0340] = 0x08c379a0;\n                            memory[0x0340:0x0360] = 0x20;\n                            memory[0x0360:0x0380] = 0x30;\n                            memory[0x0380:0x03a0] = 0x5468657265206973206e6f7420656e6f756768205553445420696e2074686520;\n                            memory[0x03a0:0x03c0] = 0x636f6e747261637420746f207377617000000000000000000000000000000000;\n                        \n                            if (storage[0x07] < memory[0x0300:0x0320]) { revert(memory[0x033c:0x03e0]); }\n                        \n                            if (!address(storage[0x16]).code.length) { revert(memory[0x00:0x00]); }\n                        \n                            if (!(address(this) ~ storage[0x16])) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0x03e0:0x0400] = 0xa9059cbb;\n                            memory[0x0400:0x0420] = msg.sender;\n                            memory[0x0420:0x0440] = memory[0x0300:0x0320];\n                            var temp124;\n                            temp124, memory[0x0480:0x04a0] = address(storage[0x16]).call.gas(msg.gas)(memory[0x03fc:0x0440]);\n                        \n                            if (!temp124) { revert(memory[0x00:0x00]); }\n                        \n                            var0 = 0x07;\n                            var1 = storage[var0];\n                            var2 = memory[0x0300:0x0320];\n                        \n                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                        \n                            storage[var0] = var1 - var2;\n                            memory[0xe0:0x0100] = msg.sender;\n                            memory[0xc0:0xe0] = 0x0a;\n                            var0 = keccak256(memory[0xc0:0x0100]);\n                            var1 = storage[var0];\n                            var2 = msg.data[0x24:0x44];\n                        \n                            if (var1 < var2) { revert(memory[0x00:0x00]); }\n                        \n                            storage[var0] = var1 - var2;\n                            memory[0xe0:0x0100] = storage[0x15];\n                            memory[0xc0:0xe0] = 0x0a;\n                            var0 = keccak256(memory[0xc0:0x0100]);\n                            var temp125 = storage[var0];\n                            var1 = temp125;\n                            var2 = msg.data[0x24:0x44];\n                        \n                            if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                        \n                            storage[var0] = var1 + var2;\n                            memory[0x00:0x20] = 0x01;\n                            return memory[0x00:0x20];\n                        }\n                    } else {\n                        var temp126 = msg.data[0x24:0x44];\n                        var0 = temp126;\n                        var temp127 = storage[0x03];\n                        var1 = temp127;\n                        var2 = var0 * var1;\n                    \n                        if (!((var2 / var0 == var1) | !var0)) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = var2;\n                        var1 = storage[0x04];\n                        var2 = var1;\n                    \n                        if (!var2) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x0560:0x0580] = var0 / var2;\n                        memory[0x0580:0x05a0] = 0x08c379a0;\n                        memory[0x05a0:0x05c0] = 0x20;\n                        memory[0x05c0:0x05e0] = 0x2f;\n                        memory[0x05e0:0x0600] = 0x5468657265206973206e6f7420656e6f7567682065746820696e207468652063;\n                        memory[0x0600:0x0620] = 0x6f6e747261637420746f20737761700000000000000000000000000000000000;\n                    \n                        if (storage[0x06] < memory[0x0560:0x0580]) { revert(memory[0x059c:0x0640]); }\n                    \n                        var temp128;\n                        temp128, memory[0x00:0x00] = address(msg.sender).call.gas(0x00).value(memory[0x0560:0x0580])(memory[0x00:0x00]);\n                    \n                        if (!temp128) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = 0x06;\n                        var1 = storage[var0];\n                        var2 = memory[0x0560:0x0580];\n                    \n                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                    \n                        storage[var0] = var1 - var2;\n                        memory[0xe0:0x0100] = msg.sender;\n                        memory[0xc0:0xe0] = 0x0a;\n                        var0 = keccak256(memory[0xc0:0x0100]);\n                        var1 = storage[var0];\n                        var2 = msg.data[0x24:0x44];\n                    \n                        if (var1 < var2) { revert(memory[0x00:0x00]); }\n                    \n                        storage[var0] = var1 - var2;\n                        memory[0xe0:0x0100] = storage[0x15];\n                        memory[0xc0:0xe0] = 0x0a;\n                        var0 = keccak256(memory[0xc0:0x0100]);\n                        var temp129 = storage[var0];\n                        var1 = temp129;\n                        var2 = msg.data[0x24:0x44];\n                    \n                        if (var1 + var2 < var1) { revert(memory[0x00:0x00]); }\n                    \n                        storage[var0] = var1 + var2;\n                        memory[0x00:0x20] = 0x01;\n                        return memory[0x00:0x20];\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                if (msg.sender != storage[0x13]) { revert(memory[0x00:0x00]); }\n            \n                storage[0x03] = msg.data[0x04:0x24];\n                storage[0x04] = msg.data[0x24:0x44];\n                storage[0x05] = msg.data[0x44:0x64];\n                memory[0x00:0x20] = 0x01;\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            memory[0x00:0x20] = storage[0x02];\n            return memory[0x00:0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 61.400036573410034,
	"usage": {
		"completion_tokens": 646,
		"prompt_tokens": 28730,
		"total_tokens": 29376
	}
}