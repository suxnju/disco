{
	"address": "0x37cae345004fac08c225be1a1cb0eed9e8e04405",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the decompiled code, the Solidity version of the contract might look something like this:\n\n```solidity\npragma solidity >=0.4.22 <0.7.0;\n\ncontract MyContract {\n    uint256 private _tokensPerETH;\n    address private _destroy;\n    address private _tokenReward;\n    \n    event FundTransfer(address indexed to, uint256 amount, bool isContribution);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    function withdrawTokens(address to, uint256 amount) public {\n        require(_destroy == msg.sender);\n        require(to.code.length > 0);\n        bool success = to.transfer(amount);\n        require(success);\n    }\n    \n    function withdraw(uint256 amount) public {\n        require(_destroy == msg.sender);\n        (bool success,) = _destroy.call.value(amount * 1 ether)();\n        require(success);\n        emit FundTransfer(_destroy, amount * 1 ether, false);\n    }\n    \n    function tokenReward() public view returns (address) {\n        return _tokenReward;\n    }\n    \n    function destroy() public {\n        require(_destroy == msg.sender);\n        selfdestruct(_destroy);\n    }\n    \n    function owner() public view returns (address) {\n        return _destroy;\n    }\n    \n    function changeEtherPrice(uint256 price) public {\n        require(_destroy == msg.sender);\n        _tokensPerETH = price * 150 / 125;\n    }\n    \n    function TokensPerETH() public view returns (uint256) {\n        return _tokensPerETH;\n    }\n    \n    function transferOwnership(address newOwner) public {\n        require(_destroy == msg.sender);\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_destroy, newOwner);\n        _destroy = newOwner;\n    }\n    \n    function() external payable {\n        require(msg.value > 0);\n        require(_tokenReward.code.length > 0);\n        bool success = _tokenReward.transfer(msg.sender, msg.value * _tokensPerETH);\n        require(success);\n        emit FundTransfer(msg.sender, msg.value, true);\n    }\n}\n```\nThis contract allows an owner to transfer tokens, withdraw Ether, destroy the contract, and transfer ownership of the contract to a new owner. The contract also allows anyone to send Ether to the contract in exchange for tokens, at a rate determined by the owner. Note that the exact functionality may vary depending on the actual implementation of the `transfer` function and the structure of the `_tokenReward` and `_destroy` addresses.",
				"role": "assistant"
			}
		}
	],
	"created": 1701469070,
	"id": "chatcmpl-8R67SRSxSpsi3DnfvGXgW45ECz2Nm",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.26 07:12 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _tokensPerETH; // STORAGE[0x1]\naddress _destroy; // STORAGE[0x0] bytes 0 to 19\naddress _tokenReward; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nOwnershipTransferred(address, address);\n\nfunction withdrawTokens(address varg0, uint256 varg1) public nonPayable { \n    require(_destroy == msg.sender);\n    require(varg0.code.size);\n    v0 = varg0.transfer(_destroy, varg1).gas(msg.gas);\n    require(v0);\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_destroy == msg.sender);\n    v0 = _destroy.call().value(varg0 * 0x2386f26fc10000).gas(2300 * !(varg0 * 0x2386f26fc10000));\n    require(v0);\n    emit FundTransfer(_destroy, varg0 * 0x2386f26fc10000, 0);\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction destroy() public nonPayable { \n    require(_destroy == msg.sender);\n    selfdestruct(_destroy);\n}\n\nfunction owner() public nonPayable { \n    return _destroy;\n}\n\nfunction changeEtherPrice(uint256 varg0) public nonPayable { \n    require(_destroy == msg.sender);\n    _tokensPerETH = varg0 * 150 / 125;\n}\n\nfunction TokensPerETH() public nonPayable { \n    return _tokensPerETH;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_destroy == msg.sender);\n    require(varg0);\n    emit OwnershipTransferred(_destroy, varg0);\n    _destroy = varg0;\n}\n\nfunction fallback() public payable { \n    require(msg.value);\n    require(_tokenReward.code.size);\n    v0 = _tokenReward.transfer(msg.sender, msg.value * _tokensPerETH).gas(msg.gas);\n    require(v0);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x6b091f9) {\n            withdrawTokens(address,uint256);\n        } else if (0x2e1a7d4d == uint32(function_selector >> 224)) {\n            withdraw(uint256);\n        } else if (0x6e66f6e9 == uint32(function_selector >> 224)) {\n            tokenReward();\n        } else if (0x83197ef0 == uint32(function_selector >> 224)) {\n            destroy();\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            owner();\n        } else if (0x94679ce7 == uint32(function_selector >> 224)) {\n            changeEtherPrice(uint256);\n        } else if (0xe4492fcd == uint32(function_selector >> 224)) {\n            TokensPerETH();\n        } else if (0xf2fde38b == uint32(function_selector >> 224)) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 07:12 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _tokensPerETH; // STORAGE[0x1]\naddress _destroy; // STORAGE[0x0] bytes 0 to 19\naddress _tokenReward; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nOwnershipTransferred(address, address);\n\nfunction withdrawTokens(address varg0, uint256 varg1) public nonPayable { \n    require(_destroy == msg.sender);\n    require(varg0.code.size);\n    v0 = varg0.transfer(_destroy, varg1).gas(msg.gas);\n    require(v0);\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_destroy == msg.sender);\n    v0 = _destroy.call().value(varg0 * 0x2386f26fc10000).gas(2300 * !(varg0 * 0x2386f26fc10000));\n    require(v0);\n    emit FundTransfer(_destroy, varg0 * 0x2386f26fc10000, 0);\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction destroy() public nonPayable { \n    require(_destroy == msg.sender);\n    selfdestruct(_destroy);\n}\n\nfunction owner() public nonPayable { \n    return _destroy;\n}\n\nfunction changeEtherPrice(uint256 varg0) public nonPayable { \n    require(_destroy == msg.sender);\n    _tokensPerETH = varg0 * 150 / 125;\n}\n\nfunction TokensPerETH() public nonPayable { \n    return _tokensPerETH;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_destroy == msg.sender);\n    require(varg0);\n    emit OwnershipTransferred(_destroy, varg0);\n    _destroy = varg0;\n}\n\nfunction fallback() public payable { \n    require(msg.value);\n    require(_tokenReward.code.size);\n    v0 = _tokenReward.transfer(msg.sender, msg.value * _tokensPerETH).gas(msg.gas);\n    require(v0);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x6b091f9) {\n            withdrawTokens(address,uint256);\n        } else if (0x2e1a7d4d == uint32(function_selector >> 224)) {\n            withdraw(uint256);\n        } else if (0x6e66f6e9 == uint32(function_selector >> 224)) {\n            tokenReward();\n        } else if (0x83197ef0 == uint32(function_selector >> 224)) {\n            destroy();\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            owner();\n        } else if (0x94679ce7 == uint32(function_selector >> 224)) {\n            changeEtherPrice(uint256);\n        } else if (0xe4492fcd == uint32(function_selector >> 224)) {\n            TokensPerETH();\n        } else if (0xf2fde38b == uint32(function_selector >> 224)) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 07:12 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _tokensPerETH; // STORAGE[0x1]\naddress _destroy; // STORAGE[0x0] bytes 0 to 19\naddress _tokenReward; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nOwnershipTransferred(address, address);\n\nfunction withdrawTokens(address varg0, uint256 varg1) public nonPayable { \n    require(_destroy == msg.sender);\n    require(varg0.code.size);\n    v0 = varg0.transfer(_destroy, varg1).gas(msg.gas);\n    require(v0);\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_destroy == msg.sender);\n    v0 = _destroy.call().value(varg0 * 0x2386f26fc10000).gas(2300 * !(varg0 * 0x2386f26fc10000));\n    require(v0);\n    emit FundTransfer(_destroy, varg0 * 0x2386f26fc10000, 0);\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction destroy() public nonPayable { \n    require(_destroy == msg.sender);\n    selfdestruct(_destroy);\n}\n\nfunction owner() public nonPayable { \n    return _destroy;\n}\n\nfunction changeEtherPrice(uint256 varg0) public nonPayable { \n    require(_destroy == msg.sender);\n    _tokensPerETH = varg0 * 150 / 125;\n}\n\nfunction TokensPerETH() public nonPayable { \n    return _tokensPerETH;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_destroy == msg.sender);\n    require(varg0);\n    emit OwnershipTransferred(_destroy, varg0);\n    _destroy = varg0;\n}\n\nfunction fallback() public payable { \n    require(msg.value);\n    require(_tokenReward.code.size);\n    v0 = _tokenReward.transfer(msg.sender, msg.value * _tokensPerETH).gas(msg.gas);\n    require(v0);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x6b091f9) {\n            withdrawTokens(address,uint256);\n        } else if (0x2e1a7d4d == uint32(function_selector >> 224)) {\n            withdraw(uint256);\n        } else if (0x6e66f6e9 == uint32(function_selector >> 224)) {\n            tokenReward();\n        } else if (0x83197ef0 == uint32(function_selector >> 224)) {\n            destroy();\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            owner();\n        } else if (0x94679ce7 == uint32(function_selector >> 224)) {\n            changeEtherPrice(uint256);\n        } else if (0xe4492fcd == uint32(function_selector >> 224)) {\n            TokensPerETH();\n        } else if (0xf2fde38b == uint32(function_selector >> 224)) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 19.429604530334473,
	"usage": {
		"completion_tokens": 519,
		"prompt_tokens": 834,
		"total_tokens": 1353
	}
}