{
	"address": "0x283af0b28c62c092c9727f1ee09c02ca627eb7f5",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity contract code equivalent to the given decompiled code. Please note that the function 'supportsInterface' is not complete as the decompiled code doesn't provide enough details to recreate it completely in Solidity.\n\n```solidity\npragma solidity >=0.4.0 <0.7.0;\n\ncontract Contract {\n    uint256 constant MIN_REGISTRATION_DURATION = 0x24ea00;\n    address owner;\n    uint256 minCommitmentAge;\n    uint256 maxCommitmentAge;\n\n    function supportsInterface(bytes4 arg0, uint256 arg1) public returns (bool r0) {\n        // code for the function is not provided\n    }\n    function makeCommitmentWithConfig(bytes32 arg0, address arg1, bytes32 arg2, address arg3, address arg4) public returns (uint256 r0) {\n        // code for the function is not provided\n    }\n    function setPriceOracle(address arg0) public {\n        // code for the function is not provided\n    }\n    function setCommitmentAges(uint256 arg0, uint256 arg1) public {\n        // code for the function is not provided\n    }\n    function commitments(bytes32 arg0) public returns (uint256 r0) {\n        // code for the function is not provided\n    }\n    function rentPrice(string memory arg0, uint256 arg1) public returns (uint256 r0) {\n        // code for the function is not provided\n    }\n    function register(string memory arg0, address arg1, uint256 arg2, bytes32 arg3) public {\n        // code for the function is not provided\n    }\n    function minCommitmentAge() public view returns (uint256 r0) {\n        return minCommitmentAge;\n    }\n    function owner() public view returns (address r0) {\n        return owner;\n    }\n    function isOwner() public view returns (bool r0) {\n        return msg.sender == owner;\n    }\n    function valid(string memory arg0) public returns (bool r0) {\n        // code for the function is not provided\n    }\n    function renew(string memory arg0, uint256 arg1) public {\n        // code for the function is not provided\n    }\n    function available(string memory arg0) public returns (bool r0) {\n        // code for the function is not provided\n    }\n    function commit(bytes32 arg0) public {\n        // code for the function is not provided\n    }\n    function transferOwnership(address arg0) public {\n        // code for the function is not provided\n    }\n    function makeCommitment(string memory arg0, address arg1, bytes32 arg2) public returns (bytes32 r0) {\n        // code for the function is not provided\n    }\n    function registerWithConfig(string memory arg0, address arg1, uint256 arg2, bytes32 arg3, address arg4, address arg5) public {\n        // code for the function is not provided\n    }\n    function withdraw() public {\n        // code for the function is not provided\n    }\n}\n```\nThis is a rough approximation of the contract based on the provided decompiled code. The actual implementation of the functions may differ based on the specific business logic required for the contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700470814,
	"id": "chatcmpl-8MuQY6IroTJ0t9NfdOzsO3YZaBm4c",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x8d839ffe > var0) {\n            if (0x7e324479 > var0) {\n                if (var0 == 0x01ffc9a7) {\n                    // Dispatch table entry for supportsInterface(bytes4)\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0187;\n                    var var2 = 0x04;\n                    var var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = supportsInterface(var2, var3);\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = !!var1;\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n                } else if (var0 == 0x3ccfd60b) {\n                    // Dispatch table entry for withdraw()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b6;\n                    withdraw();\n                    stop();\n                } else if (var0 == 0x3d86c52f) {\n                    // Dispatch table entry for makeCommitmentWithConfig(string,address,bytes32,address,address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02e8;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0xa0) { revert(memory[0x00:0x00]); }\n                \n                    var1 = makeCommitmentWithConfig(var2, var3);\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = var1;\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n                } else if (var0 == 0x530e784f) {\n                    // Dispatch table entry for setPriceOracle(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x034d;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    setPriceOracle(var2, var3);\n                    stop();\n                } else if (var0 == 0x715018a6) {\n                    // Dispatch table entry for renounceOwnership()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0364;\n                    renounceOwnership();\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x7e324479) {\n                // Dispatch table entry for setCommitmentAges(uint256,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03a9;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                setCommitmentAges(var2, var3);\n                stop();\n            } else if (var0 == 0x839df945) {\n                // Dispatch table entry for commitments(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = commitments(var2, var3);\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x83e7f6ff) {\n                // Dispatch table entry for rentPrice(string,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ca;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = rentPrice(var2, var3);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x85f6d155) {\n                // Dispatch table entry for register(string,address,uint256,bytes32)\n                var1 = 0x058b;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n            \n                register(var2, var3);\n                stop();\n            } else if (var0 == 0x8a95b09f) {\n                // Dispatch table entry for MIN_REGISTRATION_DURATION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05a2;\n                var2 = MIN_REGISTRATION_DURATION();\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var2;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xaeb8ce9b > var0) {\n            if (var0 == 0x8d839ffe) {\n                // Dispatch table entry for minCommitmentAge()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05cd;\n                var2 = minCommitmentAge();\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05f8;\n                var1 = owner();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0x8f32d59b) {\n                // Dispatch table entry for isOwner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x064f;\n                var1 = isOwner();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = !!var1;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x9791c097) {\n                // Dispatch table entry for valid(string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x072f;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = valid(var2, var3);\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = !!var1;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n            } else if (var0 == 0xacf1a841) {\n                // Dispatch table entry for renew(string,uint256)\n                var1 = 0x07ca;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                renew(var2, var3);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xaeb8ce9b) {\n            // Dispatch table entry for available(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0892;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var1 = available(var2, var3);\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = !!var1;\n            var temp19 = memory[0x40:0x60];\n            return memory[temp19:temp19 + (temp18 + 0x20) - temp19];\n        } else if (var0 == 0xce1e09c0) {\n            // Dispatch table entry for maxCommitmentAge()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x08c1;\n            var2 = maxCommitmentAge();\n            var temp20 = memory[0x40:0x60];\n            memory[temp20:temp20 + 0x20] = var2;\n            var temp21 = memory[0x40:0x60];\n            return memory[temp21:temp21 + (temp20 + 0x20) - temp21];\n        } else if (var0 == 0xf14fcbc8) {\n            // Dispatch table entry for commit(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0910;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            commit(var2, var3);\n            stop();\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0961;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            transferOwnership(var2, var3);\n            stop();\n        } else if (var0 == 0xf49826be) {\n            // Dispatch table entry for makeCommitment(string,address,bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a53;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n        \n            var1 = makeCommitment(var2, var3);\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = var1;\n            var temp23 = memory[0x40:0x60];\n            return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n        } else if (var0 == 0xf7a16963) {\n            // Dispatch table entry for registerWithConfig(string,address,uint256,bytes32,address,address)\n            var1 = 0x0b96;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0xc0) { revert(memory[0x00:0x00]); }\n        \n            registerWithConfig(var2, var3);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function supportsInterface(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x737570706f727473496e74657266616365286279746573342900000000000000;\n        var temp1 = memory[0x40:0x60];\n        var var0 = arg0 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff == keccak256(memory[temp1:temp1 + (temp0 + 0x19) - temp1]) & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var0) {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x72656e657728737472696e672c75696e74323536290000000000000000000000;\n            var temp8 = memory[0x40:0x60];\n            var temp9 = keccak256(memory[temp8:temp8 + (temp7 + 0x15) - temp8]);\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x28] = code[0x23ee:0x2416];\n            var temp11 = memory[0x40:0x60];\n            var temp12 = keccak256(memory[temp11:temp11 + (temp10 + 0x28) - temp11]);\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x636f6d6d69742862797465733332290000000000000000000000000000000000;\n            var temp14 = memory[0x40:0x60];\n            var temp15 = keccak256(memory[temp14:temp14 + (temp13 + 0x0f) - temp14]);\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x26] = code[0x2416:0x243c];\n            var temp17 = memory[0x40:0x60];\n            var temp18 = keccak256(memory[temp17:temp17 + (temp16 + 0x26) - temp17]);\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = 0x617661696c61626c6528737472696e6729000000000000000000000000000000;\n            var temp20 = memory[0x40:0x60];\n            var temp21 = keccak256(memory[temp20:temp20 + (temp19 + 0x11) - temp20]);\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = 0x72656e74507269636528737472696e672c75696e743235362900000000000000;\n            var temp23 = memory[0x40:0x60];\n            var0 = arg0 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff == (keccak256(memory[temp23:temp23 + (temp22 + 0x19) - temp23]) ~ temp21 ~ temp18 ~ temp15 ~ temp12 ~ temp9) & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var0) { goto label_0DE0; }\n            else { goto label_0D6C; }\n        } else if (var0) {\n        label_0DE0:\n            return var0;\n        } else {\n        label_0D6C:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x40] = code[0x23ae:0x23ee];\n            var temp3 = memory[0x40:0x60];\n            var temp4 = keccak256(memory[temp3:temp3 + (temp2 + 0x40) - temp3]);\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x42] = code[0x243c:0x247e];\n            var temp6 = memory[0x40:0x60];\n            return arg0 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff == (keccak256(memory[temp6:temp6 + (temp5 + 0x42) - temp6]) ~ temp4) & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        }\n    }\n    \n    function makeCommitmentWithConfig(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var2;\n        var temp7 = var1;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var0:var0 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        arg0 = temp8;\n        var temp10 = temp6 + 0x20;\n        arg1 = msg.data[temp6:temp6 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp11 = temp10 + 0x20;\n        var0 = msg.data[temp10:temp10 + 0x20];\n        var1 = msg.data[temp11:temp11 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var2 = msg.data[temp11 + 0x20:temp11 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r0 = func_0E41(arg0, arg1, var0, var1, var2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setPriceOracle(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x104c;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0xf261845a790fe29bbd6631e2ca4a5bdc83e6eed7c3271d9590d97287e00e9123, storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function setCommitmentAges(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x11d6;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = arg0;\n        storage[0x04] = arg1;\n    }\n    \n    function commitments(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function rentPrice(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var1;\n        var temp6 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp6 + (temp5 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + temp5] = msg.data[var0:var0 + temp5];\n        memory[temp7 + temp5:temp7 + temp5 + 0x20] = 0x00;\n        arg0 = temp6;\n        arg1 = msg.data[var2:var2 + 0x20];\n        r0 = func_1209(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function register(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var2;\n        arg1 = var1;\n        arg0 = var0;\n        var temp7 = temp6 + 0x20;\n        var0 = msg.data[temp6:temp6 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var1 = msg.data[temp7:temp7 + 0x20];\n        var2 = msg.data[temp7 + 0x20:temp7 + 0x20 + 0x20];\n        var var3 = 0x1445;\n        var temp8 = arg1;\n        var temp9 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp9 + (temp8 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var4 = temp9;\n        memory[var4:var4 + 0x20] = temp8;\n        var temp10 = var4 + 0x20;\n        memory[temp10:temp10 + temp8] = msg.data[arg0:arg0 + temp8];\n        memory[temp10 + temp8:temp10 + temp8 + 0x20] = 0x00;\n        var var5 = var0;\n        var var6 = var1;\n        var var7 = var2;\n        var var8 = 0x00;\n        var var9 = var8;\n        func_184F(var4, var5, var6, var7, var8, var9);\n    }\n    \n    function valid(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = temp0 + arg1;\n        arg1 = temp0;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1 + var1;\n        var1 = temp1;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var1 = temp3;\n        var var2 = var0;\n        var0 = temp2 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = var1;\n        var temp5 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp5 + (temp4 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + temp4] = msg.data[var0:var0 + temp4];\n        memory[temp6 + temp4:temp6 + temp4 + 0x20] = 0x00;\n        arg0 = temp5;\n        r0 = func_14D9(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function renew(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        arg1 = var1;\n        arg0 = var0;\n        var0 = msg.data[var2:var2 + 0x20];\n        var1 = 0x00;\n        var2 = 0x153f;\n        var temp6 = arg1;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var3 = temp7;\n        memory[var3:var3 + 0x20] = temp6;\n        var temp8 = var3 + 0x20;\n        memory[temp8:temp8 + temp6] = msg.data[arg0:arg0 + temp6];\n        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00;\n        var var4 = var0;\n        var2 = func_1209(var3, var4);\n        var1 = var2;\n    \n        if (msg.value < var1) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = arg1;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + temp9] = msg.data[arg0:arg0 + temp9];\n        var temp11 = memory[0x40:0x60];\n        var2 = keccak256(memory[temp11:temp11 + (temp10 + temp9) - temp11]);\n        var3 = 0x00;\n        var4 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var5 = 0xc475abff;\n        var temp12 = var2 >> 0x00;\n        var temp13 = memory[0x40:0x60];\n        memory[temp13:temp13 + 0x20] = (var5 & 0xffffffff) << 0xe0;\n        var temp14 = temp13 + 0x04;\n        memory[temp14:temp14 + 0x20] = temp12;\n        var temp15 = temp14 + 0x20;\n        memory[temp15:temp15 + 0x20] = var0;\n        var var6 = temp15 + 0x20;\n        var var7 = 0x20;\n        var var8 = memory[0x40:0x60];\n        var var9 = var6 - var8;\n        var var10 = var8;\n        var var11 = 0x00;\n        var var12 = var4;\n        var var13 = !address(var12).code.length;\n    \n        if (var13) { revert(memory[0x00:0x00]); }\n    \n        var temp16;\n        temp16, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n        var7 = !temp16;\n    \n        if (!var7) {\n            var4 = memory[0x40:0x60];\n            var5 = returndata.length;\n        \n            if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var3 = memory[var4:var4 + 0x20];\n        \n            if (msg.value <= var1) {\n            label_1682:\n                var temp17 = arg1;\n                var temp18 = memory[0x40:0x60];\n                var temp19 = temp18 + 0x20;\n                memory[temp19:temp19 + 0x20] = var1;\n                var temp20 = temp19 + 0x20;\n                memory[temp20:temp20 + 0x20] = var3;\n                var temp21 = temp20 + 0x20;\n                memory[temp18:temp18 + 0x20] = temp21 - temp18;\n                memory[temp21:temp21 + 0x20] = temp17;\n                var temp22 = temp21 + 0x20;\n                memory[temp22:temp22 + temp17] = msg.data[arg0:arg0 + temp17];\n                memory[temp22 + temp17:temp22 + temp17 + 0x20] = 0x00;\n                var temp23 = memory[0x40:0x60];\n                log(memory[temp23:temp23 + (temp22 + (temp17 + 0x1f & ~0x1f)) - temp23], [0x3da24c024582931cfaf8267d8ed24d13a82a8068d5bd337d30ec45cea4e506ae, stack[-2]]);\n                return;\n            } else {\n                var temp24 = msg.value - var1;\n                var temp25 = memory[0x40:0x60];\n                var temp26;\n                temp26, memory[temp25:temp25 + 0x00] = address(msg.sender).call.gas(!temp24 * 0x08fc).value(temp24)(memory[temp25:temp25 + memory[0x40:0x60] - temp25]);\n                var4 = !temp26;\n            \n                if (!var4) { goto label_1682; }\n            \n                var temp27 = returndata.length;\n                memory[0x00:0x00 + temp27] = returndata[0x00:0x00 + temp27];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp28 = returndata.length;\n            memory[0x00:0x00 + temp28] = returndata[0x00:0x00 + temp28];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function available(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var1;\n        var temp6 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp6 + (temp5 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + temp5] = msg.data[var0:var0 + temp5];\n        memory[temp7 + temp5:temp7 + temp5 + 0x20] = 0x00;\n        arg0 = temp6;\n        r0 = func_16FE(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function commit(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n    \n        if (storage[keccak256(memory[0x00:0x40])] + storage[0x04] >= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = block.timestamp;\n    }\n    \n    function transferOwnership(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x1821;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x1833;\n        var var0 = arg0;\n        func_220D(var0);\n    }\n    \n    function makeCommitment(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = temp0 + arg1;\n        arg1 = temp0;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1 + var1;\n        var1 = temp1;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var1 = temp3;\n        var var2 = var0;\n        var0 = temp2 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = var2;\n        var temp5 = var1;\n        var temp6 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp6 + (temp5 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + temp5] = msg.data[var0:var0 + temp5];\n        memory[temp7 + temp5:temp7 + temp5 + 0x20] = 0x00;\n        arg0 = temp6;\n        arg1 = msg.data[temp4:temp4 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var0 = msg.data[temp4 + 0x20:temp4 + 0x20 + 0x20];\n        var1 = 0x00;\n        var2 = 0x1846;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = var0;\n        var var6 = 0x00;\n        var var7 = var6;\n        return func_0E41(var3, var4, var5, var6, var7);\n    }\n    \n    function registerWithConfig(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = temp0 + arg1;\n        arg1 = temp0;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1 + var1;\n        var1 = temp1;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var1 = temp3;\n        var temp4 = var0;\n        var0 = temp2 + 0x20;\n        var var2 = temp4;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2;\n        var temp6 = var1;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + temp6] = msg.data[var0:var0 + temp6];\n        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00;\n        arg0 = temp7;\n        var temp9 = temp5 + 0x20;\n        arg1 = msg.data[temp5:temp5 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp10 = temp9 + 0x20;\n        var0 = msg.data[temp9:temp9 + 0x20];\n        var temp11 = temp10 + 0x20;\n        var1 = msg.data[temp10:temp10 + 0x20];\n        var2 = msg.data[temp11:temp11 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = msg.data[temp11 + 0x20:temp11 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        func_184F(arg0, arg1, var0, var1, var2, var3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function withdraw() {\n        var var0 = 0x0def;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = address(this).balance;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        var0 = !temp2;\n    \n        if (!var0) { return; }\n    \n        var temp3 = returndata.length;\n        memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function func_0E41(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = keccak256(memory[temp0 + 0x20:temp0 + 0x20 + memory[temp0:temp0 + 0x20]]);\n        var var2 = arg3 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n    \n        if (!var2) {\n            if (!var2) {\n            label_0F29:\n            \n                if (arg3 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n            \n                var temp1 = memory[0x40:0x60] + 0x20;\n                memory[temp1:temp1 + 0x20] = var1;\n                var temp2 = temp1 + 0x20;\n                memory[temp2:temp2 + 0x20] = (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) << 0x60;\n                var temp3 = temp2 + 0x14;\n                memory[temp3:temp3 + 0x20] = (arg3 & 0xffffffffffffffffffffffffffffffffffffffff) << 0x60;\n                var temp4 = temp3 + 0x14;\n                memory[temp4:temp4 + 0x20] = (arg4 & 0xffffffffffffffffffffffffffffffffffffffff) << 0x60;\n                var temp5 = temp4 + 0x14;\n                memory[temp5:temp5 + 0x20] = arg2;\n                var temp6 = temp5 + 0x20;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = temp6 - temp7 - 0x20;\n                memory[0x40:0x60] = temp6;\n                var0 = keccak256(memory[temp7 + 0x20:temp7 + 0x20 + memory[temp7:temp7 + 0x20]]);\n            \n            label_103B:\n                return var0;\n            } else {\n            label_0EBC:\n                var temp8 = memory[0x40:0x60] + 0x20;\n                memory[temp8:temp8 + 0x20] = var1;\n                var temp9 = temp8 + 0x20;\n                memory[temp9:temp9 + 0x20] = (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) << 0x60;\n                var temp10 = temp9 + 0x14;\n                memory[temp10:temp10 + 0x20] = arg2;\n                var temp11 = temp10 + 0x20;\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = temp11 - temp12 - 0x20;\n                memory[0x40:0x60] = temp11;\n                var0 = keccak256(memory[temp12 + 0x20:temp12 + 0x20 + memory[temp12:temp12 + 0x20]]);\n                goto label_103B;\n            }\n        } else if (arg4 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { goto label_0F29; }\n        else { goto label_0EBC; }\n    }\n    \n    function renounceOwnership() {\n        var var0 = 0x1106;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n        storage[0x00] = (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff) | 0x00;\n    }\n    \n    function func_1209(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = keccak256(memory[temp0 + 0x20:temp0 + 0x20 + memory[temp0:temp0 + 0x20]]);\n        var var2 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0x50e9a715;\n        var var4 = temp0;\n        var var5 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var6 = 0xd6e4fa86;\n        var temp1 = var1 >> 0x00;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = (var6 & 0xffffffff) << 0xe0;\n        var temp3 = temp2 + 0x04;\n        memory[temp3:temp3 + 0x20] = temp1;\n        var var7 = temp3 + 0x20;\n        var var8 = 0x20;\n        var var9 = memory[0x40:0x60];\n        var var10 = var7 - var9;\n        var var11 = var9;\n        var var12 = var5;\n        var var13 = !address(var12).code.length;\n    \n        if (var13) { revert(memory[0x00:0x00]); }\n    \n        var temp4;\n        temp4, memory[var9:var9 + var8] = address(var12).staticcall.gas(msg.gas)(memory[var11:var11 + var10]);\n        var8 = !temp4;\n    \n        if (!var8) {\n            var5 = memory[0x40:0x60];\n            var6 = returndata.length;\n        \n            if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp5 = memory[var5:var5 + 0x20];\n            var5 = temp5;\n            var6 = arg1;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n            var temp7 = temp6 + 0x04;\n            var7 = temp7;\n            var8 = var7;\n            var temp8 = var8 + 0x20;\n            memory[temp8:temp8 + 0x20] = var5;\n            var temp9 = temp8 + 0x20;\n            memory[temp9:temp9 + 0x20] = var6;\n            var temp10 = temp9 + 0x20;\n            memory[var8:var8 + 0x20] = temp10 - var8;\n            var temp11 = var4;\n            memory[temp10:temp10 + 0x20] = memory[temp11:temp11 + 0x20];\n            var9 = temp10 + 0x20;\n            var10 = temp11 + 0x20;\n            var11 = memory[temp11:temp11 + 0x20];\n            var12 = var11;\n            var13 = var9;\n            var var14 = var10;\n            var var15 = 0x00;\n        \n            if (var15 >= var12) {\n            label_1362:\n                var temp12 = var11;\n                var9 = temp12 + var9;\n                var10 = temp12 & 0x1f;\n            \n                if (!var10) {\n                    var4 = var9;\n                    var5 = 0x20;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = var2;\n                    var10 = !address(var9).code.length;\n                \n                    if (var10) { revert(memory[0x00:0x00]); }\n                \n                label_13AE:\n                    var temp13;\n                    temp13, memory[var6:var6 + var5] = address(var9).staticcall.gas(msg.gas)(memory[var8:var8 + var7]);\n                    var5 = !temp13;\n                \n                    if (!var5) {\n                        var2 = memory[0x40:0x60];\n                        var3 = returndata.length;\n                    \n                        if (var3 >= 0x20) { return memory[var2:var2 + 0x20]; }\n                        else { revert(memory[0x00:0x00]); }\n                    } else {\n                        var temp14 = returndata.length;\n                        memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp15 = var10;\n                    var temp16 = var9 - temp15;\n                    memory[temp16:temp16 + 0x20] = ~(0x0100 ** (0x20 - temp15) - 0x01) & memory[temp16:temp16 + 0x20];\n                    var4 = temp16 + 0x20;\n                    var5 = 0x20;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = var2;\n                    var10 = !address(var9).code.length;\n                \n                    if (!var10) { goto label_13AE; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_1350:\n                var temp17 = var15;\n                memory[var13 + temp17:var13 + temp17 + 0x20] = memory[var14 + temp17:var14 + temp17 + 0x20];\n                var15 = temp17 + 0x20;\n            \n                if (var15 >= var12) { goto label_1362; }\n                else { goto label_1350; }\n            }\n        } else {\n            var temp18 = returndata.length;\n            memory[0x00:0x00 + temp18] = returndata[0x00:0x00 + temp18];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function MIN_REGISTRATION_DURATION() returns (var r0) { return 0x24ea00; }\n    \n    function minCommitmentAge() returns (var r0) { return storage[0x03]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function isOwner() returns (var r0) { return msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_14D9(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x03;\n        var var2 = 0x14e6;\n        var var3 = arg0;\n        var2 = func_2097(var3);\n        return var2 >= var1;\n    }\n    \n    function func_16FE(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = keccak256(memory[temp0 + 0x20:temp0 + 0x20 + memory[temp0:temp0 + 0x20]]);\n        var var2 = 0x1714;\n        var var3 = temp0;\n        var2 = func_14D9(var3);\n    \n        if (!var2) {\n        label_17CD:\n            return var2;\n        } else {\n            var2 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0x96e494e8;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n            var temp2 = temp1 + 0x04;\n            memory[temp2:temp2 + 0x20] = var1 >> 0x00;\n            var var4 = temp2 + 0x20;\n            var var5 = 0x20;\n            var var6 = memory[0x40:0x60];\n            var var7 = var4 - var6;\n            var var8 = var6;\n            var var9 = var2;\n            var var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp3;\n            temp3, memory[var6:var6 + var5] = address(var9).staticcall.gas(msg.gas)(memory[var8:var8 + var7]);\n            var5 = !temp3;\n        \n            if (!var5) {\n                var2 = memory[0x40:0x60];\n                var3 = returndata.length;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = memory[var2:var2 + 0x20];\n                goto label_17CD;\n            } else {\n                var temp4 = returndata.length;\n                memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        }\n    }\n    \n    function maxCommitmentAge() returns (var r0) { return storage[0x04]; }\n    \n    function func_184F(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = 0x00;\n        var var1 = 0x185e;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg3;\n        var var5 = arg4;\n        var var6 = arg5;\n        var1 = func_0E41(var2, var3, var4, var5, var6);\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x00;\n        var2 = 0x186d;\n        var3 = arg0;\n        var4 = arg2;\n        var5 = var0;\n        var2 = func_2305(var3, var4, var5);\n        var1 = var2;\n        var temp1 = arg0;\n        var2 = keccak256(memory[temp1 + 0x20:temp1 + 0x20 + memory[temp1:temp1 + 0x20]]);\n        var3 = var2 >> 0x00;\n        var4 = 0x00;\n    \n        if (arg4 & 0xffffffffffffffffffffffffffffffffffffffff != var4 & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var5 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = 0xfca247ac;\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = (var6 & 0xffffffff) << 0xe0;\n            var temp24 = temp23 + 0x04;\n            memory[temp24:temp24 + 0x20] = var3;\n            var temp25 = temp24 + 0x20;\n            memory[temp25:temp25 + 0x20] = address(this);\n            var temp26 = temp25 + 0x20;\n            memory[temp26:temp26 + 0x20] = arg2;\n            var7 = temp26 + 0x20;\n            var8 = 0x20;\n            var9 = memory[0x40:0x60];\n            var10 = var7 - var9;\n            var11 = var9;\n            var12 = 0x00;\n            var13 = var5;\n            var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var temp27;\n            temp27, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n            var8 = !temp27;\n        \n            if (!var8) {\n                var5 = memory[0x40:0x60];\n                var6 = returndata.length;\n            \n                if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var4 = memory[var5:var5 + 0x20];\n                var5 = 0x00;\n                var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var7 = 0xddf7fcb0;\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                var8 = temp28 + 0x04;\n                var9 = 0x20;\n                var10 = memory[0x40:0x60];\n                var11 = var8 - var10;\n                var12 = var10;\n                var13 = var6;\n                var14 = !address(var13).code.length;\n            \n                if (var14) { revert(memory[0x00:0x00]); }\n            \n                var temp29;\n                temp29, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);\n                var9 = !temp29;\n            \n                if (!var9) {\n                    var6 = memory[0x40:0x60];\n                    var7 = returndata.length;\n                \n                    if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp30 = memory[0x40:0x60] + 0x20;\n                    memory[temp30:temp30 + 0x20] = memory[var6:var6 + 0x20];\n                    var temp31 = temp30 + 0x20;\n                    memory[temp31:temp31 + 0x20] = var2;\n                    var temp32 = temp31 + 0x20;\n                    var temp33 = memory[0x40:0x60];\n                    memory[temp33:temp33 + 0x20] = temp32 - temp33 - 0x20;\n                    memory[0x40:0x60] = temp32;\n                    var5 = keccak256(memory[temp33 + 0x20:temp33 + 0x20 + memory[temp33:temp33 + 0x20]]);\n                    var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var7 = 0x3f15457f;\n                    var temp34 = memory[0x40:0x60];\n                    memory[temp34:temp34 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                    var8 = temp34 + 0x04;\n                    var9 = 0x20;\n                    var10 = memory[0x40:0x60];\n                    var11 = var8 - var10;\n                    var12 = var10;\n                    var13 = var6;\n                    var14 = !address(var13).code.length;\n                \n                    if (var14) { revert(memory[0x00:0x00]); }\n                \n                    var temp35;\n                    temp35, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);\n                    var9 = !temp35;\n                \n                    if (!var9) {\n                        var6 = memory[0x40:0x60];\n                        var7 = returndata.length;\n                    \n                        if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var temp36 = memory[var6:var6 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var6 = temp36;\n                        var7 = 0x1896f70a;\n                        var temp37 = memory[0x40:0x60];\n                        memory[temp37:temp37 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                        var temp38 = temp37 + 0x04;\n                        memory[temp38:temp38 + 0x20] = var5;\n                        var temp39 = temp38 + 0x20;\n                        memory[temp39:temp39 + 0x20] = arg4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var8 = temp39 + 0x20;\n                        var9 = 0x00;\n                        var10 = memory[0x40:0x60];\n                        var11 = var8 - var10;\n                        var12 = var10;\n                        var13 = 0x00;\n                        var14 = var6;\n                        var15 = !address(var14).code.length;\n                    \n                        if (var15) { revert(memory[0x00:0x00]); }\n                    \n                        var temp40;\n                        temp40, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                        var9 = !temp40;\n                    \n                        if (var9) {\n                            var temp57 = returndata.length;\n                            memory[0x00:0x00 + temp57] = returndata[0x00:0x00 + temp57];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        } else if (arg5 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n                        label_1C90:\n                            var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var7 = 0x28ed4f6c;\n                            var temp41 = memory[0x40:0x60];\n                            memory[temp41:temp41 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                            var temp42 = temp41 + 0x04;\n                            memory[temp42:temp42 + 0x20] = var3;\n                            var temp43 = temp42 + 0x20;\n                            memory[temp43:temp43 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var8 = temp43 + 0x20;\n                            var9 = 0x00;\n                            var10 = memory[0x40:0x60];\n                            var11 = var8 - var10;\n                            var12 = var10;\n                            var13 = 0x00;\n                            var14 = var6;\n                            var15 = !address(var14).code.length;\n                        \n                            if (var15) { revert(memory[0x00:0x00]); }\n                        \n                            var temp44;\n                            temp44, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                            var9 = !temp44;\n                        \n                            if (!var9) {\n                                var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                                var7 = 0x23b872dd;\n                                var temp45 = memory[0x40:0x60];\n                                memory[temp45:temp45 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                                var temp46 = temp45 + 0x04;\n                                memory[temp46:temp46 + 0x20] = address(this);\n                                var temp47 = temp46 + 0x20;\n                                memory[temp47:temp47 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                var temp48 = temp47 + 0x20;\n                                memory[temp48:temp48 + 0x20] = var3;\n                                var8 = temp48 + 0x20;\n                                var9 = 0x00;\n                                var10 = memory[0x40:0x60];\n                                var11 = var8 - var10;\n                                var12 = var10;\n                                var13 = 0x00;\n                                var14 = var6;\n                                var15 = !address(var14).code.length;\n                            \n                                if (var15) { revert(memory[0x00:0x00]); }\n                            \n                                var temp49;\n                                temp49, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                                var9 = !temp49;\n                            \n                                if (!var9) { goto label_1F74; }\n                            \n                                var temp50 = returndata.length;\n                                memory[0x00:0x00 + temp50] = returndata[0x00:0x00 + temp50];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            } else {\n                                var temp51 = returndata.length;\n                                memory[0x00:0x00 + temp51] = returndata[0x00:0x00 + temp51];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                            var6 = arg4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var7 = 0xd5fa2b00;\n                            var temp52 = memory[0x40:0x60];\n                            memory[temp52:temp52 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                            var temp53 = temp52 + 0x04;\n                            memory[temp53:temp53 + 0x20] = var5;\n                            var temp54 = temp53 + 0x20;\n                            memory[temp54:temp54 + 0x20] = arg5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var8 = temp54 + 0x20;\n                            var9 = 0x00;\n                            var10 = memory[0x40:0x60];\n                            var11 = var8 - var10;\n                            var12 = var10;\n                            var13 = 0x00;\n                            var14 = var6;\n                            var15 = !address(var14).code.length;\n                        \n                            if (var15) { revert(memory[0x00:0x00]); }\n                        \n                            var temp55;\n                            temp55, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                            var9 = !temp55;\n                        \n                            if (!var9) { goto label_1C90; }\n                        \n                            var temp56 = returndata.length;\n                            memory[0x00:0x00 + temp56] = returndata[0x00:0x00 + temp56];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var temp58 = returndata.length;\n                        memory[0x00:0x00 + temp58] = returndata[0x00:0x00 + temp58];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp59 = returndata.length;\n                    memory[0x00:0x00 + temp59] = returndata[0x00:0x00 + temp59];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp60 = returndata.length;\n                memory[0x00:0x00 + temp60] = returndata[0x00:0x00 + temp60];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else if (arg5 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n            var5 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = 0xfca247ac;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = (var6 & 0xffffffff) << 0xe0;\n            var temp3 = temp2 + 0x04;\n            memory[temp3:temp3 + 0x20] = var3;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = arg2;\n            var var7 = temp5 + 0x20;\n            var var8 = 0x20;\n            var var9 = memory[0x40:0x60];\n            var var10 = var7 - var9;\n            var var11 = var9;\n            var var12 = 0x00;\n            var var13 = var5;\n            var var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var temp6;\n            temp6, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n            var8 = !temp6;\n        \n            if (!var8) {\n                var5 = memory[0x40:0x60];\n                var6 = returndata.length;\n            \n                if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var4 = memory[var5:var5 + 0x20];\n            \n            label_1F74:\n                var5 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var6 = var2;\n                var7 = 0xca6abbe9d7f11422cb6ca7629fbf6fe9efb1c621f71ce8f02b9f2a230097404f;\n                var temp7 = arg0;\n                var8 = temp7;\n                var9 = var1;\n                var10 = var4;\n                var temp8 = memory[0x40:0x60];\n                var11 = temp8;\n                var12 = var11;\n                var temp9 = var12 + 0x20;\n                memory[temp9:temp9 + 0x20] = var9;\n                var temp10 = temp9 + 0x20;\n                memory[temp10:temp10 + 0x20] = var10;\n                var temp11 = temp10 + 0x20;\n                memory[var12:var12 + 0x20] = temp11 - var12;\n                memory[temp11:temp11 + 0x20] = memory[var8:var8 + 0x20];\n                var13 = temp11 + 0x20;\n                var14 = var8 + 0x20;\n                var var15 = memory[var8:var8 + 0x20];\n                var var16 = var15;\n                var var17 = var13;\n                var var18 = var14;\n                var var19 = 0x00;\n            \n                if (var19 >= var16) {\n                label_1FFC:\n                    var temp12 = var15;\n                    var13 = temp12 + var13;\n                    var14 = temp12 & 0x1f;\n                \n                    if (!var14) {\n                        var temp13 = memory[0x40:0x60];\n                        log(memory[temp13:temp13 + var13 - temp13], [stack[-8], stack[-9], stack[-10]]);\n                    \n                        if (msg.value <= var1) {\n                        label_208A:\n                            return;\n                        } else {\n                        label_2041:\n                            var temp14 = msg.value - var1;\n                            var temp15 = memory[0x40:0x60];\n                            var temp16;\n                            temp16, memory[temp15:temp15 + 0x00] = address(msg.sender).call.gas(!temp14 * 0x08fc).value(temp14)(memory[temp15:temp15 + memory[0x40:0x60] - temp15]);\n                            var5 = !temp16;\n                        \n                            if (!var5) { goto label_208A; }\n                        \n                            var temp17 = returndata.length;\n                            memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var temp18 = var14;\n                        var temp19 = var13 - temp18;\n                        memory[temp19:temp19 + 0x20] = ~(0x0100 ** (0x20 - temp18) - 0x01) & memory[temp19:temp19 + 0x20];\n                        var temp20 = memory[0x40:0x60];\n                        log(memory[temp20:temp20 + (temp19 + 0x20) - temp20], [stack[-8], stack[-9], stack[-10]]);\n                    \n                        if (msg.value <= var1) { goto label_208A; }\n                        else { goto label_2041; }\n                    }\n                } else {\n                label_1FEA:\n                    var temp21 = var19;\n                    memory[var17 + temp21:var17 + temp21 + 0x20] = memory[var18 + temp21:var18 + temp21 + 0x20];\n                    var19 = temp21 + 0x20;\n                \n                    if (var19 >= var16) { goto label_1FFC; }\n                    else { goto label_1FEA; }\n                }\n            } else {\n                var temp22 = returndata.length;\n                memory[0x00:0x00 + temp22] = returndata[0x00:0x00 + temp22];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2097(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = memory[arg0:arg0 + 0x20];\n        var var1 = 0x00;\n    \n        if (var2 >= var3) {\n        label_2202:\n            return var1;\n        } else {\n        label_20B3:\n            var var4 = 0x00;\n            var var5 = arg0;\n            var var6 = var2;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var4 = (memory[var6 + 0x20 + var5:var6 + 0x20 + var5 + 0x20] >> 0xf8) << 0xf8;\n        \n            if (var4 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff < 0x80 << 0xf8) {\n                var2 = var2 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_20AA;\n            } else if (var4 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff < 0xe0 << 0xf8) {\n                var2 = var2 + 0x02;\n                goto label_21F3;\n            } else if (var4 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff < 0xf0 << 0xf8) {\n                var2 = var2 + 0x03;\n                goto label_21F3;\n            } else if (var4 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff < 0xf8 << 0xf8) {\n                var2 = var2 + 0x04;\n                goto label_21F3;\n            } else if (var4 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff >= 0xfc << 0xf8) {\n                var2 = var2 + 0x06;\n            \n            label_21F3:\n                var1 = var1 + 0x01;\n            \n            label_20AA:\n            \n                if (var2 >= var3) { goto label_2202; }\n                else { goto label_20B3; }\n            } else {\n                var2 = var2 + 0x05;\n                goto label_21F3;\n            }\n        }\n    }\n    \n    function func_220D(var arg0) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x00] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_2305(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg2;\n        memory[0x20:0x40] = 0x05;\n    \n        if (storage[keccak256(memory[0x00:0x40])] + storage[0x03] > block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg2;\n        memory[0x20:0x40] = 0x05;\n    \n        if (storage[keccak256(memory[0x00:0x40])] + storage[0x04] <= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x2357;\n        var var2 = arg0;\n        var1 = func_16FE(var2);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg2;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var1 = 0x00;\n        var2 = 0x2383;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_1209(var3, var4);\n        var1 = var2;\n    \n        if (arg1 < 0x24ea00) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value >= var1) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x8d839ffe > var0) {\n            if (0x7e324479 > var0) {\n                if (var0 == 0x01ffc9a7) {\n                    // Dispatch table entry for supportsInterface(bytes4)\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0187;\n                    var var2 = 0x04;\n                    var var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = supportsInterface(var2, var3);\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = !!var1;\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n                } else if (var0 == 0x3ccfd60b) {\n                    // Dispatch table entry for withdraw()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b6;\n                    withdraw();\n                    stop();\n                } else if (var0 == 0x3d86c52f) {\n                    // Dispatch table entry for makeCommitmentWithConfig(string,address,bytes32,address,address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02e8;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0xa0) { revert(memory[0x00:0x00]); }\n                \n                    var1 = makeCommitmentWithConfig(var2, var3);\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = var1;\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n                } else if (var0 == 0x530e784f) {\n                    // Dispatch table entry for setPriceOracle(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x034d;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    setPriceOracle(var2, var3);\n                    stop();\n                } else if (var0 == 0x715018a6) {\n                    // Dispatch table entry for renounceOwnership()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0364;\n                    renounceOwnership();\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x7e324479) {\n                // Dispatch table entry for setCommitmentAges(uint256,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03a9;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                setCommitmentAges(var2, var3);\n                stop();\n            } else if (var0 == 0x839df945) {\n                // Dispatch table entry for commitments(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = commitments(var2, var3);\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x83e7f6ff) {\n                // Dispatch table entry for rentPrice(string,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ca;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = rentPrice(var2, var3);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x85f6d155) {\n                // Dispatch table entry for register(string,address,uint256,bytes32)\n                var1 = 0x058b;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n            \n                register(var2, var3);\n                stop();\n            } else if (var0 == 0x8a95b09f) {\n                // Dispatch table entry for MIN_REGISTRATION_DURATION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05a2;\n                var2 = MIN_REGISTRATION_DURATION();\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var2;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xaeb8ce9b > var0) {\n            if (var0 == 0x8d839ffe) {\n                // Dispatch table entry for minCommitmentAge()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05cd;\n                var2 = minCommitmentAge();\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05f8;\n                var1 = owner();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0x8f32d59b) {\n                // Dispatch table entry for isOwner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x064f;\n                var1 = isOwner();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = !!var1;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x9791c097) {\n                // Dispatch table entry for valid(string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x072f;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = valid(var2, var3);\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = !!var1;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n            } else if (var0 == 0xacf1a841) {\n                // Dispatch table entry for renew(string,uint256)\n                var1 = 0x07ca;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                renew(var2, var3);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xaeb8ce9b) {\n            // Dispatch table entry for available(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0892;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var1 = available(var2, var3);\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = !!var1;\n            var temp19 = memory[0x40:0x60];\n            return memory[temp19:temp19 + (temp18 + 0x20) - temp19];\n        } else if (var0 == 0xce1e09c0) {\n            // Dispatch table entry for maxCommitmentAge()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x08c1;\n            var2 = maxCommitmentAge();\n            var temp20 = memory[0x40:0x60];\n            memory[temp20:temp20 + 0x20] = var2;\n            var temp21 = memory[0x40:0x60];\n            return memory[temp21:temp21 + (temp20 + 0x20) - temp21];\n        } else if (var0 == 0xf14fcbc8) {\n            // Dispatch table entry for commit(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0910;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            commit(var2, var3);\n            stop();\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0961;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            transferOwnership(var2, var3);\n            stop();\n        } else if (var0 == 0xf49826be) {\n            // Dispatch table entry for makeCommitment(string,address,bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a53;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n        \n            var1 = makeCommitment(var2, var3);\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = var1;\n            var temp23 = memory[0x40:0x60];\n            return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n        } else if (var0 == 0xf7a16963) {\n            // Dispatch table entry for registerWithConfig(string,address,uint256,bytes32,address,address)\n            var1 = 0x0b96;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0xc0) { revert(memory[0x00:0x00]); }\n        \n            registerWithConfig(var2, var3);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function supportsInterface(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x737570706f727473496e74657266616365286279746573342900000000000000;\n        var temp1 = memory[0x40:0x60];\n        var var0 = arg0 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff == keccak256(memory[temp1:temp1 + (temp0 + 0x19) - temp1]) & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var0) {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x72656e657728737472696e672c75696e74323536290000000000000000000000;\n            var temp8 = memory[0x40:0x60];\n            var temp9 = keccak256(memory[temp8:temp8 + (temp7 + 0x15) - temp8]);\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x28] = code[0x23ee:0x2416];\n            var temp11 = memory[0x40:0x60];\n            var temp12 = keccak256(memory[temp11:temp11 + (temp10 + 0x28) - temp11]);\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x636f6d6d69742862797465733332290000000000000000000000000000000000;\n            var temp14 = memory[0x40:0x60];\n            var temp15 = keccak256(memory[temp14:temp14 + (temp13 + 0x0f) - temp14]);\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x26] = code[0x2416:0x243c];\n            var temp17 = memory[0x40:0x60];\n            var temp18 = keccak256(memory[temp17:temp17 + (temp16 + 0x26) - temp17]);\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = 0x617661696c61626c6528737472696e6729000000000000000000000000000000;\n            var temp20 = memory[0x40:0x60];\n            var temp21 = keccak256(memory[temp20:temp20 + (temp19 + 0x11) - temp20]);\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = 0x72656e74507269636528737472696e672c75696e743235362900000000000000;\n            var temp23 = memory[0x40:0x60];\n            var0 = arg0 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff == (keccak256(memory[temp23:temp23 + (temp22 + 0x19) - temp23]) ~ temp21 ~ temp18 ~ temp15 ~ temp12 ~ temp9) & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var0) { goto label_0DE0; }\n            else { goto label_0D6C; }\n        } else if (var0) {\n        label_0DE0:\n            return var0;\n        } else {\n        label_0D6C:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x40] = code[0x23ae:0x23ee];\n            var temp3 = memory[0x40:0x60];\n            var temp4 = keccak256(memory[temp3:temp3 + (temp2 + 0x40) - temp3]);\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x42] = code[0x243c:0x247e];\n            var temp6 = memory[0x40:0x60];\n            return arg0 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff == (keccak256(memory[temp6:temp6 + (temp5 + 0x42) - temp6]) ~ temp4) & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        }\n    }\n    \n    function makeCommitmentWithConfig(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var2;\n        var temp7 = var1;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var0:var0 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        arg0 = temp8;\n        var temp10 = temp6 + 0x20;\n        arg1 = msg.data[temp6:temp6 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp11 = temp10 + 0x20;\n        var0 = msg.data[temp10:temp10 + 0x20];\n        var1 = msg.data[temp11:temp11 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var2 = msg.data[temp11 + 0x20:temp11 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r0 = func_0E41(arg0, arg1, var0, var1, var2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setPriceOracle(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x104c;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0xf261845a790fe29bbd6631e2ca4a5bdc83e6eed7c3271d9590d97287e00e9123, storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function setCommitmentAges(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x11d6;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = arg0;\n        storage[0x04] = arg1;\n    }\n    \n    function commitments(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function rentPrice(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var1;\n        var temp6 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp6 + (temp5 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + temp5] = msg.data[var0:var0 + temp5];\n        memory[temp7 + temp5:temp7 + temp5 + 0x20] = 0x00;\n        arg0 = temp6;\n        arg1 = msg.data[var2:var2 + 0x20];\n        r0 = func_1209(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function register(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var2;\n        arg1 = var1;\n        arg0 = var0;\n        var temp7 = temp6 + 0x20;\n        var0 = msg.data[temp6:temp6 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var1 = msg.data[temp7:temp7 + 0x20];\n        var2 = msg.data[temp7 + 0x20:temp7 + 0x20 + 0x20];\n        var var3 = 0x1445;\n        var temp8 = arg1;\n        var temp9 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp9 + (temp8 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var4 = temp9;\n        memory[var4:var4 + 0x20] = temp8;\n        var temp10 = var4 + 0x20;\n        memory[temp10:temp10 + temp8] = msg.data[arg0:arg0 + temp8];\n        memory[temp10 + temp8:temp10 + temp8 + 0x20] = 0x00;\n        var var5 = var0;\n        var var6 = var1;\n        var var7 = var2;\n        var var8 = 0x00;\n        var var9 = var8;\n        func_184F(var4, var5, var6, var7, var8, var9);\n    }\n    \n    function valid(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = temp0 + arg1;\n        arg1 = temp0;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1 + var1;\n        var1 = temp1;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var1 = temp3;\n        var var2 = var0;\n        var0 = temp2 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = var1;\n        var temp5 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp5 + (temp4 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + temp4] = msg.data[var0:var0 + temp4];\n        memory[temp6 + temp4:temp6 + temp4 + 0x20] = 0x00;\n        arg0 = temp5;\n        r0 = func_14D9(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function renew(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        arg1 = var1;\n        arg0 = var0;\n        var0 = msg.data[var2:var2 + 0x20];\n        var1 = 0x00;\n        var2 = 0x153f;\n        var temp6 = arg1;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var3 = temp7;\n        memory[var3:var3 + 0x20] = temp6;\n        var temp8 = var3 + 0x20;\n        memory[temp8:temp8 + temp6] = msg.data[arg0:arg0 + temp6];\n        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00;\n        var var4 = var0;\n        var2 = func_1209(var3, var4);\n        var1 = var2;\n    \n        if (msg.value < var1) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = arg1;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + temp9] = msg.data[arg0:arg0 + temp9];\n        var temp11 = memory[0x40:0x60];\n        var2 = keccak256(memory[temp11:temp11 + (temp10 + temp9) - temp11]);\n        var3 = 0x00;\n        var4 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var5 = 0xc475abff;\n        var temp12 = var2 >> 0x00;\n        var temp13 = memory[0x40:0x60];\n        memory[temp13:temp13 + 0x20] = (var5 & 0xffffffff) << 0xe0;\n        var temp14 = temp13 + 0x04;\n        memory[temp14:temp14 + 0x20] = temp12;\n        var temp15 = temp14 + 0x20;\n        memory[temp15:temp15 + 0x20] = var0;\n        var var6 = temp15 + 0x20;\n        var var7 = 0x20;\n        var var8 = memory[0x40:0x60];\n        var var9 = var6 - var8;\n        var var10 = var8;\n        var var11 = 0x00;\n        var var12 = var4;\n        var var13 = !address(var12).code.length;\n    \n        if (var13) { revert(memory[0x00:0x00]); }\n    \n        var temp16;\n        temp16, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n        var7 = !temp16;\n    \n        if (!var7) {\n            var4 = memory[0x40:0x60];\n            var5 = returndata.length;\n        \n            if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var3 = memory[var4:var4 + 0x20];\n        \n            if (msg.value <= var1) {\n            label_1682:\n                var temp17 = arg1;\n                var temp18 = memory[0x40:0x60];\n                var temp19 = temp18 + 0x20;\n                memory[temp19:temp19 + 0x20] = var1;\n                var temp20 = temp19 + 0x20;\n                memory[temp20:temp20 + 0x20] = var3;\n                var temp21 = temp20 + 0x20;\n                memory[temp18:temp18 + 0x20] = temp21 - temp18;\n                memory[temp21:temp21 + 0x20] = temp17;\n                var temp22 = temp21 + 0x20;\n                memory[temp22:temp22 + temp17] = msg.data[arg0:arg0 + temp17];\n                memory[temp22 + temp17:temp22 + temp17 + 0x20] = 0x00;\n                var temp23 = memory[0x40:0x60];\n                log(memory[temp23:temp23 + (temp22 + (temp17 + 0x1f & ~0x1f)) - temp23], [0x3da24c024582931cfaf8267d8ed24d13a82a8068d5bd337d30ec45cea4e506ae, stack[-2]]);\n                return;\n            } else {\n                var temp24 = msg.value - var1;\n                var temp25 = memory[0x40:0x60];\n                var temp26;\n                temp26, memory[temp25:temp25 + 0x00] = address(msg.sender).call.gas(!temp24 * 0x08fc).value(temp24)(memory[temp25:temp25 + memory[0x40:0x60] - temp25]);\n                var4 = !temp26;\n            \n                if (!var4) { goto label_1682; }\n            \n                var temp27 = returndata.length;\n                memory[0x00:0x00 + temp27] = returndata[0x00:0x00 + temp27];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp28 = returndata.length;\n            memory[0x00:0x00 + temp28] = returndata[0x00:0x00 + temp28];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function available(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var1;\n        var temp6 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp6 + (temp5 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + temp5] = msg.data[var0:var0 + temp5];\n        memory[temp7 + temp5:temp7 + temp5 + 0x20] = 0x00;\n        arg0 = temp6;\n        r0 = func_16FE(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function commit(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n    \n        if (storage[keccak256(memory[0x00:0x40])] + storage[0x04] >= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = block.timestamp;\n    }\n    \n    function transferOwnership(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x1821;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x1833;\n        var var0 = arg0;\n        func_220D(var0);\n    }\n    \n    function makeCommitment(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = temp0 + arg1;\n        arg1 = temp0;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1 + var1;\n        var1 = temp1;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var1 = temp3;\n        var var2 = var0;\n        var0 = temp2 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = var2;\n        var temp5 = var1;\n        var temp6 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp6 + (temp5 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + temp5] = msg.data[var0:var0 + temp5];\n        memory[temp7 + temp5:temp7 + temp5 + 0x20] = 0x00;\n        arg0 = temp6;\n        arg1 = msg.data[temp4:temp4 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var0 = msg.data[temp4 + 0x20:temp4 + 0x20 + 0x20];\n        var1 = 0x00;\n        var2 = 0x1846;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = var0;\n        var var6 = 0x00;\n        var var7 = var6;\n        return func_0E41(var3, var4, var5, var6, var7);\n    }\n    \n    function registerWithConfig(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = temp0 + arg1;\n        arg1 = temp0;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1 + var1;\n        var1 = temp1;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var1 = temp3;\n        var temp4 = var0;\n        var0 = temp2 + 0x20;\n        var var2 = temp4;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2;\n        var temp6 = var1;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + temp6] = msg.data[var0:var0 + temp6];\n        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00;\n        arg0 = temp7;\n        var temp9 = temp5 + 0x20;\n        arg1 = msg.data[temp5:temp5 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp10 = temp9 + 0x20;\n        var0 = msg.data[temp9:temp9 + 0x20];\n        var temp11 = temp10 + 0x20;\n        var1 = msg.data[temp10:temp10 + 0x20];\n        var2 = msg.data[temp11:temp11 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = msg.data[temp11 + 0x20:temp11 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        func_184F(arg0, arg1, var0, var1, var2, var3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function withdraw() {\n        var var0 = 0x0def;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = address(this).balance;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        var0 = !temp2;\n    \n        if (!var0) { return; }\n    \n        var temp3 = returndata.length;\n        memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function func_0E41(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = keccak256(memory[temp0 + 0x20:temp0 + 0x20 + memory[temp0:temp0 + 0x20]]);\n        var var2 = arg3 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n    \n        if (!var2) {\n            if (!var2) {\n            label_0F29:\n            \n                if (arg3 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n            \n                var temp1 = memory[0x40:0x60] + 0x20;\n                memory[temp1:temp1 + 0x20] = var1;\n                var temp2 = temp1 + 0x20;\n                memory[temp2:temp2 + 0x20] = (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) << 0x60;\n                var temp3 = temp2 + 0x14;\n                memory[temp3:temp3 + 0x20] = (arg3 & 0xffffffffffffffffffffffffffffffffffffffff) << 0x60;\n                var temp4 = temp3 + 0x14;\n                memory[temp4:temp4 + 0x20] = (arg4 & 0xffffffffffffffffffffffffffffffffffffffff) << 0x60;\n                var temp5 = temp4 + 0x14;\n                memory[temp5:temp5 + 0x20] = arg2;\n                var temp6 = temp5 + 0x20;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = temp6 - temp7 - 0x20;\n                memory[0x40:0x60] = temp6;\n                var0 = keccak256(memory[temp7 + 0x20:temp7 + 0x20 + memory[temp7:temp7 + 0x20]]);\n            \n            label_103B:\n                return var0;\n            } else {\n            label_0EBC:\n                var temp8 = memory[0x40:0x60] + 0x20;\n                memory[temp8:temp8 + 0x20] = var1;\n                var temp9 = temp8 + 0x20;\n                memory[temp9:temp9 + 0x20] = (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) << 0x60;\n                var temp10 = temp9 + 0x14;\n                memory[temp10:temp10 + 0x20] = arg2;\n                var temp11 = temp10 + 0x20;\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = temp11 - temp12 - 0x20;\n                memory[0x40:0x60] = temp11;\n                var0 = keccak256(memory[temp12 + 0x20:temp12 + 0x20 + memory[temp12:temp12 + 0x20]]);\n                goto label_103B;\n            }\n        } else if (arg4 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { goto label_0F29; }\n        else { goto label_0EBC; }\n    }\n    \n    function renounceOwnership() {\n        var var0 = 0x1106;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n        storage[0x00] = (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff) | 0x00;\n    }\n    \n    function func_1209(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = keccak256(memory[temp0 + 0x20:temp0 + 0x20 + memory[temp0:temp0 + 0x20]]);\n        var var2 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0x50e9a715;\n        var var4 = temp0;\n        var var5 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var6 = 0xd6e4fa86;\n        var temp1 = var1 >> 0x00;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = (var6 & 0xffffffff) << 0xe0;\n        var temp3 = temp2 + 0x04;\n        memory[temp3:temp3 + 0x20] = temp1;\n        var var7 = temp3 + 0x20;\n        var var8 = 0x20;\n        var var9 = memory[0x40:0x60];\n        var var10 = var7 - var9;\n        var var11 = var9;\n        var var12 = var5;\n        var var13 = !address(var12).code.length;\n    \n        if (var13) { revert(memory[0x00:0x00]); }\n    \n        var temp4;\n        temp4, memory[var9:var9 + var8] = address(var12).staticcall.gas(msg.gas)(memory[var11:var11 + var10]);\n        var8 = !temp4;\n    \n        if (!var8) {\n            var5 = memory[0x40:0x60];\n            var6 = returndata.length;\n        \n            if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp5 = memory[var5:var5 + 0x20];\n            var5 = temp5;\n            var6 = arg1;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n            var temp7 = temp6 + 0x04;\n            var7 = temp7;\n            var8 = var7;\n            var temp8 = var8 + 0x20;\n            memory[temp8:temp8 + 0x20] = var5;\n            var temp9 = temp8 + 0x20;\n            memory[temp9:temp9 + 0x20] = var6;\n            var temp10 = temp9 + 0x20;\n            memory[var8:var8 + 0x20] = temp10 - var8;\n            var temp11 = var4;\n            memory[temp10:temp10 + 0x20] = memory[temp11:temp11 + 0x20];\n            var9 = temp10 + 0x20;\n            var10 = temp11 + 0x20;\n            var11 = memory[temp11:temp11 + 0x20];\n            var12 = var11;\n            var13 = var9;\n            var var14 = var10;\n            var var15 = 0x00;\n        \n            if (var15 >= var12) {\n            label_1362:\n                var temp12 = var11;\n                var9 = temp12 + var9;\n                var10 = temp12 & 0x1f;\n            \n                if (!var10) {\n                    var4 = var9;\n                    var5 = 0x20;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = var2;\n                    var10 = !address(var9).code.length;\n                \n                    if (var10) { revert(memory[0x00:0x00]); }\n                \n                label_13AE:\n                    var temp13;\n                    temp13, memory[var6:var6 + var5] = address(var9).staticcall.gas(msg.gas)(memory[var8:var8 + var7]);\n                    var5 = !temp13;\n                \n                    if (!var5) {\n                        var2 = memory[0x40:0x60];\n                        var3 = returndata.length;\n                    \n                        if (var3 >= 0x20) { return memory[var2:var2 + 0x20]; }\n                        else { revert(memory[0x00:0x00]); }\n                    } else {\n                        var temp14 = returndata.length;\n                        memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp15 = var10;\n                    var temp16 = var9 - temp15;\n                    memory[temp16:temp16 + 0x20] = ~(0x0100 ** (0x20 - temp15) - 0x01) & memory[temp16:temp16 + 0x20];\n                    var4 = temp16 + 0x20;\n                    var5 = 0x20;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = var2;\n                    var10 = !address(var9).code.length;\n                \n                    if (!var10) { goto label_13AE; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_1350:\n                var temp17 = var15;\n                memory[var13 + temp17:var13 + temp17 + 0x20] = memory[var14 + temp17:var14 + temp17 + 0x20];\n                var15 = temp17 + 0x20;\n            \n                if (var15 >= var12) { goto label_1362; }\n                else { goto label_1350; }\n            }\n        } else {\n            var temp18 = returndata.length;\n            memory[0x00:0x00 + temp18] = returndata[0x00:0x00 + temp18];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function MIN_REGISTRATION_DURATION() returns (var r0) { return 0x24ea00; }\n    \n    function minCommitmentAge() returns (var r0) { return storage[0x03]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function isOwner() returns (var r0) { return msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_14D9(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x03;\n        var var2 = 0x14e6;\n        var var3 = arg0;\n        var2 = func_2097(var3);\n        return var2 >= var1;\n    }\n    \n    function func_16FE(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = keccak256(memory[temp0 + 0x20:temp0 + 0x20 + memory[temp0:temp0 + 0x20]]);\n        var var2 = 0x1714;\n        var var3 = temp0;\n        var2 = func_14D9(var3);\n    \n        if (!var2) {\n        label_17CD:\n            return var2;\n        } else {\n            var2 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0x96e494e8;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n            var temp2 = temp1 + 0x04;\n            memory[temp2:temp2 + 0x20] = var1 >> 0x00;\n            var var4 = temp2 + 0x20;\n            var var5 = 0x20;\n            var var6 = memory[0x40:0x60];\n            var var7 = var4 - var6;\n            var var8 = var6;\n            var var9 = var2;\n            var var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp3;\n            temp3, memory[var6:var6 + var5] = address(var9).staticcall.gas(msg.gas)(memory[var8:var8 + var7]);\n            var5 = !temp3;\n        \n            if (!var5) {\n                var2 = memory[0x40:0x60];\n                var3 = returndata.length;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = memory[var2:var2 + 0x20];\n                goto label_17CD;\n            } else {\n                var temp4 = returndata.length;\n                memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        }\n    }\n    \n    function maxCommitmentAge() returns (var r0) { return storage[0x04]; }\n    \n    function func_184F(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = 0x00;\n        var var1 = 0x185e;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg3;\n        var var5 = arg4;\n        var var6 = arg5;\n        var1 = func_0E41(var2, var3, var4, var5, var6);\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x00;\n        var2 = 0x186d;\n        var3 = arg0;\n        var4 = arg2;\n        var5 = var0;\n        var2 = func_2305(var3, var4, var5);\n        var1 = var2;\n        var temp1 = arg0;\n        var2 = keccak256(memory[temp1 + 0x20:temp1 + 0x20 + memory[temp1:temp1 + 0x20]]);\n        var3 = var2 >> 0x00;\n        var4 = 0x00;\n    \n        if (arg4 & 0xffffffffffffffffffffffffffffffffffffffff != var4 & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var5 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = 0xfca247ac;\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = (var6 & 0xffffffff) << 0xe0;\n            var temp24 = temp23 + 0x04;\n            memory[temp24:temp24 + 0x20] = var3;\n            var temp25 = temp24 + 0x20;\n            memory[temp25:temp25 + 0x20] = address(this);\n            var temp26 = temp25 + 0x20;\n            memory[temp26:temp26 + 0x20] = arg2;\n            var7 = temp26 + 0x20;\n            var8 = 0x20;\n            var9 = memory[0x40:0x60];\n            var10 = var7 - var9;\n            var11 = var9;\n            var12 = 0x00;\n            var13 = var5;\n            var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var temp27;\n            temp27, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n            var8 = !temp27;\n        \n            if (!var8) {\n                var5 = memory[0x40:0x60];\n                var6 = returndata.length;\n            \n                if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var4 = memory[var5:var5 + 0x20];\n                var5 = 0x00;\n                var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var7 = 0xddf7fcb0;\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                var8 = temp28 + 0x04;\n                var9 = 0x20;\n                var10 = memory[0x40:0x60];\n                var11 = var8 - var10;\n                var12 = var10;\n                var13 = var6;\n                var14 = !address(var13).code.length;\n            \n                if (var14) { revert(memory[0x00:0x00]); }\n            \n                var temp29;\n                temp29, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);\n                var9 = !temp29;\n            \n                if (!var9) {\n                    var6 = memory[0x40:0x60];\n                    var7 = returndata.length;\n                \n                    if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp30 = memory[0x40:0x60] + 0x20;\n                    memory[temp30:temp30 + 0x20] = memory[var6:var6 + 0x20];\n                    var temp31 = temp30 + 0x20;\n                    memory[temp31:temp31 + 0x20] = var2;\n                    var temp32 = temp31 + 0x20;\n                    var temp33 = memory[0x40:0x60];\n                    memory[temp33:temp33 + 0x20] = temp32 - temp33 - 0x20;\n                    memory[0x40:0x60] = temp32;\n                    var5 = keccak256(memory[temp33 + 0x20:temp33 + 0x20 + memory[temp33:temp33 + 0x20]]);\n                    var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var7 = 0x3f15457f;\n                    var temp34 = memory[0x40:0x60];\n                    memory[temp34:temp34 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                    var8 = temp34 + 0x04;\n                    var9 = 0x20;\n                    var10 = memory[0x40:0x60];\n                    var11 = var8 - var10;\n                    var12 = var10;\n                    var13 = var6;\n                    var14 = !address(var13).code.length;\n                \n                    if (var14) { revert(memory[0x00:0x00]); }\n                \n                    var temp35;\n                    temp35, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);\n                    var9 = !temp35;\n                \n                    if (!var9) {\n                        var6 = memory[0x40:0x60];\n                        var7 = returndata.length;\n                    \n                        if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var temp36 = memory[var6:var6 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var6 = temp36;\n                        var7 = 0x1896f70a;\n                        var temp37 = memory[0x40:0x60];\n                        memory[temp37:temp37 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                        var temp38 = temp37 + 0x04;\n                        memory[temp38:temp38 + 0x20] = var5;\n                        var temp39 = temp38 + 0x20;\n                        memory[temp39:temp39 + 0x20] = arg4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var8 = temp39 + 0x20;\n                        var9 = 0x00;\n                        var10 = memory[0x40:0x60];\n                        var11 = var8 - var10;\n                        var12 = var10;\n                        var13 = 0x00;\n                        var14 = var6;\n                        var15 = !address(var14).code.length;\n                    \n                        if (var15) { revert(memory[0x00:0x00]); }\n                    \n                        var temp40;\n                        temp40, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                        var9 = !temp40;\n                    \n                        if (var9) {\n                            var temp57 = returndata.length;\n                            memory[0x00:0x00 + temp57] = returndata[0x00:0x00 + temp57];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        } else if (arg5 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n                        label_1C90:\n                            var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var7 = 0x28ed4f6c;\n                            var temp41 = memory[0x40:0x60];\n                            memory[temp41:temp41 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                            var temp42 = temp41 + 0x04;\n                            memory[temp42:temp42 + 0x20] = var3;\n                            var temp43 = temp42 + 0x20;\n                            memory[temp43:temp43 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var8 = temp43 + 0x20;\n                            var9 = 0x00;\n                            var10 = memory[0x40:0x60];\n                            var11 = var8 - var10;\n                            var12 = var10;\n                            var13 = 0x00;\n                            var14 = var6;\n                            var15 = !address(var14).code.length;\n                        \n                            if (var15) { revert(memory[0x00:0x00]); }\n                        \n                            var temp44;\n                            temp44, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                            var9 = !temp44;\n                        \n                            if (!var9) {\n                                var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                                var7 = 0x23b872dd;\n                                var temp45 = memory[0x40:0x60];\n                                memory[temp45:temp45 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                                var temp46 = temp45 + 0x04;\n                                memory[temp46:temp46 + 0x20] = address(this);\n                                var temp47 = temp46 + 0x20;\n                                memory[temp47:temp47 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                var temp48 = temp47 + 0x20;\n                                memory[temp48:temp48 + 0x20] = var3;\n                                var8 = temp48 + 0x20;\n                                var9 = 0x00;\n                                var10 = memory[0x40:0x60];\n                                var11 = var8 - var10;\n                                var12 = var10;\n                                var13 = 0x00;\n                                var14 = var6;\n                                var15 = !address(var14).code.length;\n                            \n                                if (var15) { revert(memory[0x00:0x00]); }\n                            \n                                var temp49;\n                                temp49, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                                var9 = !temp49;\n                            \n                                if (!var9) { goto label_1F74; }\n                            \n                                var temp50 = returndata.length;\n                                memory[0x00:0x00 + temp50] = returndata[0x00:0x00 + temp50];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            } else {\n                                var temp51 = returndata.length;\n                                memory[0x00:0x00 + temp51] = returndata[0x00:0x00 + temp51];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                            var6 = arg4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var7 = 0xd5fa2b00;\n                            var temp52 = memory[0x40:0x60];\n                            memory[temp52:temp52 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                            var temp53 = temp52 + 0x04;\n                            memory[temp53:temp53 + 0x20] = var5;\n                            var temp54 = temp53 + 0x20;\n                            memory[temp54:temp54 + 0x20] = arg5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var8 = temp54 + 0x20;\n                            var9 = 0x00;\n                            var10 = memory[0x40:0x60];\n                            var11 = var8 - var10;\n                            var12 = var10;\n                            var13 = 0x00;\n                            var14 = var6;\n                            var15 = !address(var14).code.length;\n                        \n                            if (var15) { revert(memory[0x00:0x00]); }\n                        \n                            var temp55;\n                            temp55, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                            var9 = !temp55;\n                        \n                            if (!var9) { goto label_1C90; }\n                        \n                            var temp56 = returndata.length;\n                            memory[0x00:0x00 + temp56] = returndata[0x00:0x00 + temp56];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var temp58 = returndata.length;\n                        memory[0x00:0x00 + temp58] = returndata[0x00:0x00 + temp58];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp59 = returndata.length;\n                    memory[0x00:0x00 + temp59] = returndata[0x00:0x00 + temp59];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp60 = returndata.length;\n                memory[0x00:0x00 + temp60] = returndata[0x00:0x00 + temp60];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else if (arg5 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n            var5 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = 0xfca247ac;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = (var6 & 0xffffffff) << 0xe0;\n            var temp3 = temp2 + 0x04;\n            memory[temp3:temp3 + 0x20] = var3;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = arg2;\n            var var7 = temp5 + 0x20;\n            var var8 = 0x20;\n            var var9 = memory[0x40:0x60];\n            var var10 = var7 - var9;\n            var var11 = var9;\n            var var12 = 0x00;\n            var var13 = var5;\n            var var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var temp6;\n            temp6, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n            var8 = !temp6;\n        \n            if (!var8) {\n                var5 = memory[0x40:0x60];\n                var6 = returndata.length;\n            \n                if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var4 = memory[var5:var5 + 0x20];\n            \n            label_1F74:\n                var5 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var6 = var2;\n                var7 = 0xca6abbe9d7f11422cb6ca7629fbf6fe9efb1c621f71ce8f02b9f2a230097404f;\n                var temp7 = arg0;\n                var8 = temp7;\n                var9 = var1;\n                var10 = var4;\n                var temp8 = memory[0x40:0x60];\n                var11 = temp8;\n                var12 = var11;\n                var temp9 = var12 + 0x20;\n                memory[temp9:temp9 + 0x20] = var9;\n                var temp10 = temp9 + 0x20;\n                memory[temp10:temp10 + 0x20] = var10;\n                var temp11 = temp10 + 0x20;\n                memory[var12:var12 + 0x20] = temp11 - var12;\n                memory[temp11:temp11 + 0x20] = memory[var8:var8 + 0x20];\n                var13 = temp11 + 0x20;\n                var14 = var8 + 0x20;\n                var var15 = memory[var8:var8 + 0x20];\n                var var16 = var15;\n                var var17 = var13;\n                var var18 = var14;\n                var var19 = 0x00;\n            \n                if (var19 >= var16) {\n                label_1FFC:\n                    var temp12 = var15;\n                    var13 = temp12 + var13;\n                    var14 = temp12 & 0x1f;\n                \n                    if (!var14) {\n                        var temp13 = memory[0x40:0x60];\n                        log(memory[temp13:temp13 + var13 - temp13], [stack[-8], stack[-9], stack[-10]]);\n                    \n                        if (msg.value <= var1) {\n                        label_208A:\n                            return;\n                        } else {\n                        label_2041:\n                            var temp14 = msg.value - var1;\n                            var temp15 = memory[0x40:0x60];\n                            var temp16;\n                            temp16, memory[temp15:temp15 + 0x00] = address(msg.sender).call.gas(!temp14 * 0x08fc).value(temp14)(memory[temp15:temp15 + memory[0x40:0x60] - temp15]);\n                            var5 = !temp16;\n                        \n                            if (!var5) { goto label_208A; }\n                        \n                            var temp17 = returndata.length;\n                            memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var temp18 = var14;\n                        var temp19 = var13 - temp18;\n                        memory[temp19:temp19 + 0x20] = ~(0x0100 ** (0x20 - temp18) - 0x01) & memory[temp19:temp19 + 0x20];\n                        var temp20 = memory[0x40:0x60];\n                        log(memory[temp20:temp20 + (temp19 + 0x20) - temp20], [stack[-8], stack[-9], stack[-10]]);\n                    \n                        if (msg.value <= var1) { goto label_208A; }\n                        else { goto label_2041; }\n                    }\n                } else {\n                label_1FEA:\n                    var temp21 = var19;\n                    memory[var17 + temp21:var17 + temp21 + 0x20] = memory[var18 + temp21:var18 + temp21 + 0x20];\n                    var19 = temp21 + 0x20;\n                \n                    if (var19 >= var16) { goto label_1FFC; }\n                    else { goto label_1FEA; }\n                }\n            } else {\n                var temp22 = returndata.length;\n                memory[0x00:0x00 + temp22] = returndata[0x00:0x00 + temp22];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2097(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = memory[arg0:arg0 + 0x20];\n        var var1 = 0x00;\n    \n        if (var2 >= var3) {\n        label_2202:\n            return var1;\n        } else {\n        label_20B3:\n            var var4 = 0x00;\n            var var5 = arg0;\n            var var6 = var2;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var4 = (memory[var6 + 0x20 + var5:var6 + 0x20 + var5 + 0x20] >> 0xf8) << 0xf8;\n        \n            if (var4 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff < 0x80 << 0xf8) {\n                var2 = var2 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_20AA;\n            } else if (var4 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff < 0xe0 << 0xf8) {\n                var2 = var2 + 0x02;\n                goto label_21F3;\n            } else if (var4 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff < 0xf0 << 0xf8) {\n                var2 = var2 + 0x03;\n                goto label_21F3;\n            } else if (var4 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff < 0xf8 << 0xf8) {\n                var2 = var2 + 0x04;\n                goto label_21F3;\n            } else if (var4 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff >= 0xfc << 0xf8) {\n                var2 = var2 + 0x06;\n            \n            label_21F3:\n                var1 = var1 + 0x01;\n            \n            label_20AA:\n            \n                if (var2 >= var3) { goto label_2202; }\n                else { goto label_20B3; }\n            } else {\n                var2 = var2 + 0x05;\n                goto label_21F3;\n            }\n        }\n    }\n    \n    function func_220D(var arg0) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x00] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_2305(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg2;\n        memory[0x20:0x40] = 0x05;\n    \n        if (storage[keccak256(memory[0x00:0x40])] + storage[0x03] > block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg2;\n        memory[0x20:0x40] = 0x05;\n    \n        if (storage[keccak256(memory[0x00:0x40])] + storage[0x04] <= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x2357;\n        var var2 = arg0;\n        var1 = func_16FE(var2);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg2;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var1 = 0x00;\n        var2 = 0x2383;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_1209(var3, var4);\n        var1 = var2;\n    \n        if (arg1 < 0x24ea00) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value >= var1) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x8d839ffe > var0) {\n            if (0x7e324479 > var0) {\n                if (var0 == 0x01ffc9a7) {\n                    // Dispatch table entry for supportsInterface(bytes4)\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0187;\n                    var var2 = 0x04;\n                    var var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = supportsInterface(var2, var3);\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = !!var1;\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n                } else if (var0 == 0x3ccfd60b) {\n                    // Dispatch table entry for withdraw()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b6;\n                    withdraw();\n                    stop();\n                } else if (var0 == 0x3d86c52f) {\n                    // Dispatch table entry for makeCommitmentWithConfig(string,address,bytes32,address,address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02e8;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0xa0) { revert(memory[0x00:0x00]); }\n                \n                    var1 = makeCommitmentWithConfig(var2, var3);\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = var1;\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n                } else if (var0 == 0x530e784f) {\n                    // Dispatch table entry for setPriceOracle(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x034d;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    setPriceOracle(var2, var3);\n                    stop();\n                } else if (var0 == 0x715018a6) {\n                    // Dispatch table entry for renounceOwnership()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0364;\n                    renounceOwnership();\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x7e324479) {\n                // Dispatch table entry for setCommitmentAges(uint256,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03a9;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                setCommitmentAges(var2, var3);\n                stop();\n            } else if (var0 == 0x839df945) {\n                // Dispatch table entry for commitments(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = commitments(var2, var3);\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x83e7f6ff) {\n                // Dispatch table entry for rentPrice(string,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ca;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = rentPrice(var2, var3);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x85f6d155) {\n                // Dispatch table entry for register(string,address,uint256,bytes32)\n                var1 = 0x058b;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n            \n                register(var2, var3);\n                stop();\n            } else if (var0 == 0x8a95b09f) {\n                // Dispatch table entry for MIN_REGISTRATION_DURATION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05a2;\n                var2 = MIN_REGISTRATION_DURATION();\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var2;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xaeb8ce9b > var0) {\n            if (var0 == 0x8d839ffe) {\n                // Dispatch table entry for minCommitmentAge()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05cd;\n                var2 = minCommitmentAge();\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05f8;\n                var1 = owner();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0x8f32d59b) {\n                // Dispatch table entry for isOwner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x064f;\n                var1 = isOwner();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = !!var1;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x9791c097) {\n                // Dispatch table entry for valid(string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x072f;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = valid(var2, var3);\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = !!var1;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n            } else if (var0 == 0xacf1a841) {\n                // Dispatch table entry for renew(string,uint256)\n                var1 = 0x07ca;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                renew(var2, var3);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xaeb8ce9b) {\n            // Dispatch table entry for available(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0892;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var1 = available(var2, var3);\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = !!var1;\n            var temp19 = memory[0x40:0x60];\n            return memory[temp19:temp19 + (temp18 + 0x20) - temp19];\n        } else if (var0 == 0xce1e09c0) {\n            // Dispatch table entry for maxCommitmentAge()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x08c1;\n            var2 = maxCommitmentAge();\n            var temp20 = memory[0x40:0x60];\n            memory[temp20:temp20 + 0x20] = var2;\n            var temp21 = memory[0x40:0x60];\n            return memory[temp21:temp21 + (temp20 + 0x20) - temp21];\n        } else if (var0 == 0xf14fcbc8) {\n            // Dispatch table entry for commit(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0910;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            commit(var2, var3);\n            stop();\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0961;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            transferOwnership(var2, var3);\n            stop();\n        } else if (var0 == 0xf49826be) {\n            // Dispatch table entry for makeCommitment(string,address,bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a53;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n        \n            var1 = makeCommitment(var2, var3);\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = var1;\n            var temp23 = memory[0x40:0x60];\n            return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n        } else if (var0 == 0xf7a16963) {\n            // Dispatch table entry for registerWithConfig(string,address,uint256,bytes32,address,address)\n            var1 = 0x0b96;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0xc0) { revert(memory[0x00:0x00]); }\n        \n            registerWithConfig(var2, var3);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function supportsInterface(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x737570706f727473496e74657266616365286279746573342900000000000000;\n        var temp1 = memory[0x40:0x60];\n        var var0 = arg0 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff == keccak256(memory[temp1:temp1 + (temp0 + 0x19) - temp1]) & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var0) {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x72656e657728737472696e672c75696e74323536290000000000000000000000;\n            var temp8 = memory[0x40:0x60];\n            var temp9 = keccak256(memory[temp8:temp8 + (temp7 + 0x15) - temp8]);\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x28] = code[0x23ee:0x2416];\n            var temp11 = memory[0x40:0x60];\n            var temp12 = keccak256(memory[temp11:temp11 + (temp10 + 0x28) - temp11]);\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x636f6d6d69742862797465733332290000000000000000000000000000000000;\n            var temp14 = memory[0x40:0x60];\n            var temp15 = keccak256(memory[temp14:temp14 + (temp13 + 0x0f) - temp14]);\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x26] = code[0x2416:0x243c];\n            var temp17 = memory[0x40:0x60];\n            var temp18 = keccak256(memory[temp17:temp17 + (temp16 + 0x26) - temp17]);\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = 0x617661696c61626c6528737472696e6729000000000000000000000000000000;\n            var temp20 = memory[0x40:0x60];\n            var temp21 = keccak256(memory[temp20:temp20 + (temp19 + 0x11) - temp20]);\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = 0x72656e74507269636528737472696e672c75696e743235362900000000000000;\n            var temp23 = memory[0x40:0x60];\n            var0 = arg0 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff == (keccak256(memory[temp23:temp23 + (temp22 + 0x19) - temp23]) ~ temp21 ~ temp18 ~ temp15 ~ temp12 ~ temp9) & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var0) { goto label_0DE0; }\n            else { goto label_0D6C; }\n        } else if (var0) {\n        label_0DE0:\n            return var0;\n        } else {\n        label_0D6C:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x40] = code[0x23ae:0x23ee];\n            var temp3 = memory[0x40:0x60];\n            var temp4 = keccak256(memory[temp3:temp3 + (temp2 + 0x40) - temp3]);\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x42] = code[0x243c:0x247e];\n            var temp6 = memory[0x40:0x60];\n            return arg0 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff == (keccak256(memory[temp6:temp6 + (temp5 + 0x42) - temp6]) ~ temp4) & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        }\n    }\n    \n    function makeCommitmentWithConfig(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var2;\n        var temp7 = var1;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var0:var0 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        arg0 = temp8;\n        var temp10 = temp6 + 0x20;\n        arg1 = msg.data[temp6:temp6 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp11 = temp10 + 0x20;\n        var0 = msg.data[temp10:temp10 + 0x20];\n        var1 = msg.data[temp11:temp11 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var2 = msg.data[temp11 + 0x20:temp11 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r0 = func_0E41(arg0, arg1, var0, var1, var2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setPriceOracle(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x104c;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0xf261845a790fe29bbd6631e2ca4a5bdc83e6eed7c3271d9590d97287e00e9123, storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function setCommitmentAges(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x11d6;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = arg0;\n        storage[0x04] = arg1;\n    }\n    \n    function commitments(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function rentPrice(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var1;\n        var temp6 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp6 + (temp5 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + temp5] = msg.data[var0:var0 + temp5];\n        memory[temp7 + temp5:temp7 + temp5 + 0x20] = 0x00;\n        arg0 = temp6;\n        arg1 = msg.data[var2:var2 + 0x20];\n        r0 = func_1209(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function register(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var2;\n        arg1 = var1;\n        arg0 = var0;\n        var temp7 = temp6 + 0x20;\n        var0 = msg.data[temp6:temp6 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var1 = msg.data[temp7:temp7 + 0x20];\n        var2 = msg.data[temp7 + 0x20:temp7 + 0x20 + 0x20];\n        var var3 = 0x1445;\n        var temp8 = arg1;\n        var temp9 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp9 + (temp8 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var4 = temp9;\n        memory[var4:var4 + 0x20] = temp8;\n        var temp10 = var4 + 0x20;\n        memory[temp10:temp10 + temp8] = msg.data[arg0:arg0 + temp8];\n        memory[temp10 + temp8:temp10 + temp8 + 0x20] = 0x00;\n        var var5 = var0;\n        var var6 = var1;\n        var var7 = var2;\n        var var8 = 0x00;\n        var var9 = var8;\n        func_184F(var4, var5, var6, var7, var8, var9);\n    }\n    \n    function valid(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = temp0 + arg1;\n        arg1 = temp0;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1 + var1;\n        var1 = temp1;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var1 = temp3;\n        var var2 = var0;\n        var0 = temp2 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = var1;\n        var temp5 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp5 + (temp4 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + temp4] = msg.data[var0:var0 + temp4];\n        memory[temp6 + temp4:temp6 + temp4 + 0x20] = 0x00;\n        arg0 = temp5;\n        r0 = func_14D9(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function renew(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        arg1 = var1;\n        arg0 = var0;\n        var0 = msg.data[var2:var2 + 0x20];\n        var1 = 0x00;\n        var2 = 0x153f;\n        var temp6 = arg1;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var3 = temp7;\n        memory[var3:var3 + 0x20] = temp6;\n        var temp8 = var3 + 0x20;\n        memory[temp8:temp8 + temp6] = msg.data[arg0:arg0 + temp6];\n        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00;\n        var var4 = var0;\n        var2 = func_1209(var3, var4);\n        var1 = var2;\n    \n        if (msg.value < var1) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = arg1;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + temp9] = msg.data[arg0:arg0 + temp9];\n        var temp11 = memory[0x40:0x60];\n        var2 = keccak256(memory[temp11:temp11 + (temp10 + temp9) - temp11]);\n        var3 = 0x00;\n        var4 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var5 = 0xc475abff;\n        var temp12 = var2 >> 0x00;\n        var temp13 = memory[0x40:0x60];\n        memory[temp13:temp13 + 0x20] = (var5 & 0xffffffff) << 0xe0;\n        var temp14 = temp13 + 0x04;\n        memory[temp14:temp14 + 0x20] = temp12;\n        var temp15 = temp14 + 0x20;\n        memory[temp15:temp15 + 0x20] = var0;\n        var var6 = temp15 + 0x20;\n        var var7 = 0x20;\n        var var8 = memory[0x40:0x60];\n        var var9 = var6 - var8;\n        var var10 = var8;\n        var var11 = 0x00;\n        var var12 = var4;\n        var var13 = !address(var12).code.length;\n    \n        if (var13) { revert(memory[0x00:0x00]); }\n    \n        var temp16;\n        temp16, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n        var7 = !temp16;\n    \n        if (!var7) {\n            var4 = memory[0x40:0x60];\n            var5 = returndata.length;\n        \n            if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var3 = memory[var4:var4 + 0x20];\n        \n            if (msg.value <= var1) {\n            label_1682:\n                var temp17 = arg1;\n                var temp18 = memory[0x40:0x60];\n                var temp19 = temp18 + 0x20;\n                memory[temp19:temp19 + 0x20] = var1;\n                var temp20 = temp19 + 0x20;\n                memory[temp20:temp20 + 0x20] = var3;\n                var temp21 = temp20 + 0x20;\n                memory[temp18:temp18 + 0x20] = temp21 - temp18;\n                memory[temp21:temp21 + 0x20] = temp17;\n                var temp22 = temp21 + 0x20;\n                memory[temp22:temp22 + temp17] = msg.data[arg0:arg0 + temp17];\n                memory[temp22 + temp17:temp22 + temp17 + 0x20] = 0x00;\n                var temp23 = memory[0x40:0x60];\n                log(memory[temp23:temp23 + (temp22 + (temp17 + 0x1f & ~0x1f)) - temp23], [0x3da24c024582931cfaf8267d8ed24d13a82a8068d5bd337d30ec45cea4e506ae, stack[-2]]);\n                return;\n            } else {\n                var temp24 = msg.value - var1;\n                var temp25 = memory[0x40:0x60];\n                var temp26;\n                temp26, memory[temp25:temp25 + 0x00] = address(msg.sender).call.gas(!temp24 * 0x08fc).value(temp24)(memory[temp25:temp25 + memory[0x40:0x60] - temp25]);\n                var4 = !temp26;\n            \n                if (!var4) { goto label_1682; }\n            \n                var temp27 = returndata.length;\n                memory[0x00:0x00 + temp27] = returndata[0x00:0x00 + temp27];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp28 = returndata.length;\n            memory[0x00:0x00 + temp28] = returndata[0x00:0x00 + temp28];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function available(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var1;\n        var temp6 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp6 + (temp5 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + temp5] = msg.data[var0:var0 + temp5];\n        memory[temp7 + temp5:temp7 + temp5 + 0x20] = 0x00;\n        arg0 = temp6;\n        r0 = func_16FE(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function commit(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n    \n        if (storage[keccak256(memory[0x00:0x40])] + storage[0x04] >= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = block.timestamp;\n    }\n    \n    function transferOwnership(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x1821;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x1833;\n        var var0 = arg0;\n        func_220D(var0);\n    }\n    \n    function makeCommitment(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = temp0 + arg1;\n        arg1 = temp0;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1 + var1;\n        var1 = temp1;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var1 = temp3;\n        var var2 = var0;\n        var0 = temp2 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = var2;\n        var temp5 = var1;\n        var temp6 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp6 + (temp5 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + temp5] = msg.data[var0:var0 + temp5];\n        memory[temp7 + temp5:temp7 + temp5 + 0x20] = 0x00;\n        arg0 = temp6;\n        arg1 = msg.data[temp4:temp4 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var0 = msg.data[temp4 + 0x20:temp4 + 0x20 + 0x20];\n        var1 = 0x00;\n        var2 = 0x1846;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = var0;\n        var var6 = 0x00;\n        var var7 = var6;\n        return func_0E41(var3, var4, var5, var6, var7);\n    }\n    \n    function registerWithConfig(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = temp0 + arg1;\n        arg1 = temp0;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1 + var1;\n        var1 = temp1;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var1 = temp3;\n        var temp4 = var0;\n        var0 = temp2 + 0x20;\n        var var2 = temp4;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2;\n        var temp6 = var1;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + temp6] = msg.data[var0:var0 + temp6];\n        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00;\n        arg0 = temp7;\n        var temp9 = temp5 + 0x20;\n        arg1 = msg.data[temp5:temp5 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp10 = temp9 + 0x20;\n        var0 = msg.data[temp9:temp9 + 0x20];\n        var temp11 = temp10 + 0x20;\n        var1 = msg.data[temp10:temp10 + 0x20];\n        var2 = msg.data[temp11:temp11 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = msg.data[temp11 + 0x20:temp11 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        func_184F(arg0, arg1, var0, var1, var2, var3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function withdraw() {\n        var var0 = 0x0def;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = address(this).balance;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        var0 = !temp2;\n    \n        if (!var0) { return; }\n    \n        var temp3 = returndata.length;\n        memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function func_0E41(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = keccak256(memory[temp0 + 0x20:temp0 + 0x20 + memory[temp0:temp0 + 0x20]]);\n        var var2 = arg3 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n    \n        if (!var2) {\n            if (!var2) {\n            label_0F29:\n            \n                if (arg3 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n            \n                var temp1 = memory[0x40:0x60] + 0x20;\n                memory[temp1:temp1 + 0x20] = var1;\n                var temp2 = temp1 + 0x20;\n                memory[temp2:temp2 + 0x20] = (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) << 0x60;\n                var temp3 = temp2 + 0x14;\n                memory[temp3:temp3 + 0x20] = (arg3 & 0xffffffffffffffffffffffffffffffffffffffff) << 0x60;\n                var temp4 = temp3 + 0x14;\n                memory[temp4:temp4 + 0x20] = (arg4 & 0xffffffffffffffffffffffffffffffffffffffff) << 0x60;\n                var temp5 = temp4 + 0x14;\n                memory[temp5:temp5 + 0x20] = arg2;\n                var temp6 = temp5 + 0x20;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = temp6 - temp7 - 0x20;\n                memory[0x40:0x60] = temp6;\n                var0 = keccak256(memory[temp7 + 0x20:temp7 + 0x20 + memory[temp7:temp7 + 0x20]]);\n            \n            label_103B:\n                return var0;\n            } else {\n            label_0EBC:\n                var temp8 = memory[0x40:0x60] + 0x20;\n                memory[temp8:temp8 + 0x20] = var1;\n                var temp9 = temp8 + 0x20;\n                memory[temp9:temp9 + 0x20] = (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) << 0x60;\n                var temp10 = temp9 + 0x14;\n                memory[temp10:temp10 + 0x20] = arg2;\n                var temp11 = temp10 + 0x20;\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = temp11 - temp12 - 0x20;\n                memory[0x40:0x60] = temp11;\n                var0 = keccak256(memory[temp12 + 0x20:temp12 + 0x20 + memory[temp12:temp12 + 0x20]]);\n                goto label_103B;\n            }\n        } else if (arg4 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { goto label_0F29; }\n        else { goto label_0EBC; }\n    }\n    \n    function renounceOwnership() {\n        var var0 = 0x1106;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n        storage[0x00] = (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff) | 0x00;\n    }\n    \n    function func_1209(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = keccak256(memory[temp0 + 0x20:temp0 + 0x20 + memory[temp0:temp0 + 0x20]]);\n        var var2 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0x50e9a715;\n        var var4 = temp0;\n        var var5 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var6 = 0xd6e4fa86;\n        var temp1 = var1 >> 0x00;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = (var6 & 0xffffffff) << 0xe0;\n        var temp3 = temp2 + 0x04;\n        memory[temp3:temp3 + 0x20] = temp1;\n        var var7 = temp3 + 0x20;\n        var var8 = 0x20;\n        var var9 = memory[0x40:0x60];\n        var var10 = var7 - var9;\n        var var11 = var9;\n        var var12 = var5;\n        var var13 = !address(var12).code.length;\n    \n        if (var13) { revert(memory[0x00:0x00]); }\n    \n        var temp4;\n        temp4, memory[var9:var9 + var8] = address(var12).staticcall.gas(msg.gas)(memory[var11:var11 + var10]);\n        var8 = !temp4;\n    \n        if (!var8) {\n            var5 = memory[0x40:0x60];\n            var6 = returndata.length;\n        \n            if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp5 = memory[var5:var5 + 0x20];\n            var5 = temp5;\n            var6 = arg1;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n            var temp7 = temp6 + 0x04;\n            var7 = temp7;\n            var8 = var7;\n            var temp8 = var8 + 0x20;\n            memory[temp8:temp8 + 0x20] = var5;\n            var temp9 = temp8 + 0x20;\n            memory[temp9:temp9 + 0x20] = var6;\n            var temp10 = temp9 + 0x20;\n            memory[var8:var8 + 0x20] = temp10 - var8;\n            var temp11 = var4;\n            memory[temp10:temp10 + 0x20] = memory[temp11:temp11 + 0x20];\n            var9 = temp10 + 0x20;\n            var10 = temp11 + 0x20;\n            var11 = memory[temp11:temp11 + 0x20];\n            var12 = var11;\n            var13 = var9;\n            var var14 = var10;\n            var var15 = 0x00;\n        \n            if (var15 >= var12) {\n            label_1362:\n                var temp12 = var11;\n                var9 = temp12 + var9;\n                var10 = temp12 & 0x1f;\n            \n                if (!var10) {\n                    var4 = var9;\n                    var5 = 0x20;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = var2;\n                    var10 = !address(var9).code.length;\n                \n                    if (var10) { revert(memory[0x00:0x00]); }\n                \n                label_13AE:\n                    var temp13;\n                    temp13, memory[var6:var6 + var5] = address(var9).staticcall.gas(msg.gas)(memory[var8:var8 + var7]);\n                    var5 = !temp13;\n                \n                    if (!var5) {\n                        var2 = memory[0x40:0x60];\n                        var3 = returndata.length;\n                    \n                        if (var3 >= 0x20) { return memory[var2:var2 + 0x20]; }\n                        else { revert(memory[0x00:0x00]); }\n                    } else {\n                        var temp14 = returndata.length;\n                        memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp15 = var10;\n                    var temp16 = var9 - temp15;\n                    memory[temp16:temp16 + 0x20] = ~(0x0100 ** (0x20 - temp15) - 0x01) & memory[temp16:temp16 + 0x20];\n                    var4 = temp16 + 0x20;\n                    var5 = 0x20;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = var2;\n                    var10 = !address(var9).code.length;\n                \n                    if (!var10) { goto label_13AE; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_1350:\n                var temp17 = var15;\n                memory[var13 + temp17:var13 + temp17 + 0x20] = memory[var14 + temp17:var14 + temp17 + 0x20];\n                var15 = temp17 + 0x20;\n            \n                if (var15 >= var12) { goto label_1362; }\n                else { goto label_1350; }\n            }\n        } else {\n            var temp18 = returndata.length;\n            memory[0x00:0x00 + temp18] = returndata[0x00:0x00 + temp18];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function MIN_REGISTRATION_DURATION() returns (var r0) { return 0x24ea00; }\n    \n    function minCommitmentAge() returns (var r0) { return storage[0x03]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function isOwner() returns (var r0) { return msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_14D9(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x03;\n        var var2 = 0x14e6;\n        var var3 = arg0;\n        var2 = func_2097(var3);\n        return var2 >= var1;\n    }\n    \n    function func_16FE(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = keccak256(memory[temp0 + 0x20:temp0 + 0x20 + memory[temp0:temp0 + 0x20]]);\n        var var2 = 0x1714;\n        var var3 = temp0;\n        var2 = func_14D9(var3);\n    \n        if (!var2) {\n        label_17CD:\n            return var2;\n        } else {\n            var2 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0x96e494e8;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n            var temp2 = temp1 + 0x04;\n            memory[temp2:temp2 + 0x20] = var1 >> 0x00;\n            var var4 = temp2 + 0x20;\n            var var5 = 0x20;\n            var var6 = memory[0x40:0x60];\n            var var7 = var4 - var6;\n            var var8 = var6;\n            var var9 = var2;\n            var var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp3;\n            temp3, memory[var6:var6 + var5] = address(var9).staticcall.gas(msg.gas)(memory[var8:var8 + var7]);\n            var5 = !temp3;\n        \n            if (!var5) {\n                var2 = memory[0x40:0x60];\n                var3 = returndata.length;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = memory[var2:var2 + 0x20];\n                goto label_17CD;\n            } else {\n                var temp4 = returndata.length;\n                memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        }\n    }\n    \n    function maxCommitmentAge() returns (var r0) { return storage[0x04]; }\n    \n    function func_184F(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = 0x00;\n        var var1 = 0x185e;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg3;\n        var var5 = arg4;\n        var var6 = arg5;\n        var1 = func_0E41(var2, var3, var4, var5, var6);\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x00;\n        var2 = 0x186d;\n        var3 = arg0;\n        var4 = arg2;\n        var5 = var0;\n        var2 = func_2305(var3, var4, var5);\n        var1 = var2;\n        var temp1 = arg0;\n        var2 = keccak256(memory[temp1 + 0x20:temp1 + 0x20 + memory[temp1:temp1 + 0x20]]);\n        var3 = var2 >> 0x00;\n        var4 = 0x00;\n    \n        if (arg4 & 0xffffffffffffffffffffffffffffffffffffffff != var4 & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var5 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = 0xfca247ac;\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = (var6 & 0xffffffff) << 0xe0;\n            var temp24 = temp23 + 0x04;\n            memory[temp24:temp24 + 0x20] = var3;\n            var temp25 = temp24 + 0x20;\n            memory[temp25:temp25 + 0x20] = address(this);\n            var temp26 = temp25 + 0x20;\n            memory[temp26:temp26 + 0x20] = arg2;\n            var7 = temp26 + 0x20;\n            var8 = 0x20;\n            var9 = memory[0x40:0x60];\n            var10 = var7 - var9;\n            var11 = var9;\n            var12 = 0x00;\n            var13 = var5;\n            var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var temp27;\n            temp27, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n            var8 = !temp27;\n        \n            if (!var8) {\n                var5 = memory[0x40:0x60];\n                var6 = returndata.length;\n            \n                if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var4 = memory[var5:var5 + 0x20];\n                var5 = 0x00;\n                var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var7 = 0xddf7fcb0;\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                var8 = temp28 + 0x04;\n                var9 = 0x20;\n                var10 = memory[0x40:0x60];\n                var11 = var8 - var10;\n                var12 = var10;\n                var13 = var6;\n                var14 = !address(var13).code.length;\n            \n                if (var14) { revert(memory[0x00:0x00]); }\n            \n                var temp29;\n                temp29, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);\n                var9 = !temp29;\n            \n                if (!var9) {\n                    var6 = memory[0x40:0x60];\n                    var7 = returndata.length;\n                \n                    if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp30 = memory[0x40:0x60] + 0x20;\n                    memory[temp30:temp30 + 0x20] = memory[var6:var6 + 0x20];\n                    var temp31 = temp30 + 0x20;\n                    memory[temp31:temp31 + 0x20] = var2;\n                    var temp32 = temp31 + 0x20;\n                    var temp33 = memory[0x40:0x60];\n                    memory[temp33:temp33 + 0x20] = temp32 - temp33 - 0x20;\n                    memory[0x40:0x60] = temp32;\n                    var5 = keccak256(memory[temp33 + 0x20:temp33 + 0x20 + memory[temp33:temp33 + 0x20]]);\n                    var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var7 = 0x3f15457f;\n                    var temp34 = memory[0x40:0x60];\n                    memory[temp34:temp34 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                    var8 = temp34 + 0x04;\n                    var9 = 0x20;\n                    var10 = memory[0x40:0x60];\n                    var11 = var8 - var10;\n                    var12 = var10;\n                    var13 = var6;\n                    var14 = !address(var13).code.length;\n                \n                    if (var14) { revert(memory[0x00:0x00]); }\n                \n                    var temp35;\n                    temp35, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);\n                    var9 = !temp35;\n                \n                    if (!var9) {\n                        var6 = memory[0x40:0x60];\n                        var7 = returndata.length;\n                    \n                        if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var temp36 = memory[var6:var6 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var6 = temp36;\n                        var7 = 0x1896f70a;\n                        var temp37 = memory[0x40:0x60];\n                        memory[temp37:temp37 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                        var temp38 = temp37 + 0x04;\n                        memory[temp38:temp38 + 0x20] = var5;\n                        var temp39 = temp38 + 0x20;\n                        memory[temp39:temp39 + 0x20] = arg4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var8 = temp39 + 0x20;\n                        var9 = 0x00;\n                        var10 = memory[0x40:0x60];\n                        var11 = var8 - var10;\n                        var12 = var10;\n                        var13 = 0x00;\n                        var14 = var6;\n                        var15 = !address(var14).code.length;\n                    \n                        if (var15) { revert(memory[0x00:0x00]); }\n                    \n                        var temp40;\n                        temp40, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                        var9 = !temp40;\n                    \n                        if (var9) {\n                            var temp57 = returndata.length;\n                            memory[0x00:0x00 + temp57] = returndata[0x00:0x00 + temp57];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        } else if (arg5 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n                        label_1C90:\n                            var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var7 = 0x28ed4f6c;\n                            var temp41 = memory[0x40:0x60];\n                            memory[temp41:temp41 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                            var temp42 = temp41 + 0x04;\n                            memory[temp42:temp42 + 0x20] = var3;\n                            var temp43 = temp42 + 0x20;\n                            memory[temp43:temp43 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var8 = temp43 + 0x20;\n                            var9 = 0x00;\n                            var10 = memory[0x40:0x60];\n                            var11 = var8 - var10;\n                            var12 = var10;\n                            var13 = 0x00;\n                            var14 = var6;\n                            var15 = !address(var14).code.length;\n                        \n                            if (var15) { revert(memory[0x00:0x00]); }\n                        \n                            var temp44;\n                            temp44, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                            var9 = !temp44;\n                        \n                            if (!var9) {\n                                var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                                var7 = 0x23b872dd;\n                                var temp45 = memory[0x40:0x60];\n                                memory[temp45:temp45 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                                var temp46 = temp45 + 0x04;\n                                memory[temp46:temp46 + 0x20] = address(this);\n                                var temp47 = temp46 + 0x20;\n                                memory[temp47:temp47 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                var temp48 = temp47 + 0x20;\n                                memory[temp48:temp48 + 0x20] = var3;\n                                var8 = temp48 + 0x20;\n                                var9 = 0x00;\n                                var10 = memory[0x40:0x60];\n                                var11 = var8 - var10;\n                                var12 = var10;\n                                var13 = 0x00;\n                                var14 = var6;\n                                var15 = !address(var14).code.length;\n                            \n                                if (var15) { revert(memory[0x00:0x00]); }\n                            \n                                var temp49;\n                                temp49, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                                var9 = !temp49;\n                            \n                                if (!var9) { goto label_1F74; }\n                            \n                                var temp50 = returndata.length;\n                                memory[0x00:0x00 + temp50] = returndata[0x00:0x00 + temp50];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            } else {\n                                var temp51 = returndata.length;\n                                memory[0x00:0x00 + temp51] = returndata[0x00:0x00 + temp51];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                            var6 = arg4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var7 = 0xd5fa2b00;\n                            var temp52 = memory[0x40:0x60];\n                            memory[temp52:temp52 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                            var temp53 = temp52 + 0x04;\n                            memory[temp53:temp53 + 0x20] = var5;\n                            var temp54 = temp53 + 0x20;\n                            memory[temp54:temp54 + 0x20] = arg5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var8 = temp54 + 0x20;\n                            var9 = 0x00;\n                            var10 = memory[0x40:0x60];\n                            var11 = var8 - var10;\n                            var12 = var10;\n                            var13 = 0x00;\n                            var14 = var6;\n                            var15 = !address(var14).code.length;\n                        \n                            if (var15) { revert(memory[0x00:0x00]); }\n                        \n                            var temp55;\n                            temp55, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                            var9 = !temp55;\n                        \n                            if (!var9) { goto label_1C90; }\n                        \n                            var temp56 = returndata.length;\n                            memory[0x00:0x00 + temp56] = returndata[0x00:0x00 + temp56];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var temp58 = returndata.length;\n                        memory[0x00:0x00 + temp58] = returndata[0x00:0x00 + temp58];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp59 = returndata.length;\n                    memory[0x00:0x00 + temp59] = returndata[0x00:0x00 + temp59];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp60 = returndata.length;\n                memory[0x00:0x00 + temp60] = returndata[0x00:0x00 + temp60];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else if (arg5 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n            var5 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = 0xfca247ac;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = (var6 & 0xffffffff) << 0xe0;\n            var temp3 = temp2 + 0x04;\n            memory[temp3:temp3 + 0x20] = var3;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = arg2;\n            var var7 = temp5 + 0x20;\n            var var8 = 0x20;\n            var var9 = memory[0x40:0x60];\n            var var10 = var7 - var9;\n            var var11 = var9;\n            var var12 = 0x00;\n            var var13 = var5;\n            var var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var temp6;\n            temp6, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n            var8 = !temp6;\n        \n            if (!var8) {\n                var5 = memory[0x40:0x60];\n                var6 = returndata.length;\n            \n                if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var4 = memory[var5:var5 + 0x20];\n            \n            label_1F74:\n                var5 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var6 = var2;\n                var7 = 0xca6abbe9d7f11422cb6ca7629fbf6fe9efb1c621f71ce8f02b9f2a230097404f;\n                var temp7 = arg0;\n                var8 = temp7;\n                var9 = var1;\n                var10 = var4;\n                var temp8 = memory[0x40:0x60];\n                var11 = temp8;\n                var12 = var11;\n                var temp9 = var12 + 0x20;\n                memory[temp9:temp9 + 0x20] = var9;\n                var temp10 = temp9 + 0x20;\n                memory[temp10:temp10 + 0x20] = var10;\n                var temp11 = temp10 + 0x20;\n                memory[var12:var12 + 0x20] = temp11 - var12;\n                memory[temp11:temp11 + 0x20] = memory[var8:var8 + 0x20];\n                var13 = temp11 + 0x20;\n                var14 = var8 + 0x20;\n                var var15 = memory[var8:var8 + 0x20];\n                var var16 = var15;\n                var var17 = var13;\n                var var18 = var14;\n                var var19 = 0x00;\n            \n                if (var19 >= var16) {\n                label_1FFC:\n                    var temp12 = var15;\n                    var13 = temp12 + var13;\n                    var14 = temp12 & 0x1f;\n                \n                    if (!var14) {\n                        var temp13 = memory[0x40:0x60];\n                        log(memory[temp13:temp13 + var13 - temp13], [stack[-8], stack[-9], stack[-10]]);\n                    \n                        if (msg.value <= var1) {\n                        label_208A:\n                            return;\n                        } else {\n                        label_2041:\n                            var temp14 = msg.value - var1;\n                            var temp15 = memory[0x40:0x60];\n                            var temp16;\n                            temp16, memory[temp15:temp15 + 0x00] = address(msg.sender).call.gas(!temp14 * 0x08fc).value(temp14)(memory[temp15:temp15 + memory[0x40:0x60] - temp15]);\n                            var5 = !temp16;\n                        \n                            if (!var5) { goto label_208A; }\n                        \n                            var temp17 = returndata.length;\n                            memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var temp18 = var14;\n                        var temp19 = var13 - temp18;\n                        memory[temp19:temp19 + 0x20] = ~(0x0100 ** (0x20 - temp18) - 0x01) & memory[temp19:temp19 + 0x20];\n                        var temp20 = memory[0x40:0x60];\n                        log(memory[temp20:temp20 + (temp19 + 0x20) - temp20], [stack[-8], stack[-9], stack[-10]]);\n                    \n                        if (msg.value <= var1) { goto label_208A; }\n                        else { goto label_2041; }\n                    }\n                } else {\n                label_1FEA:\n                    var temp21 = var19;\n                    memory[var17 + temp21:var17 + temp21 + 0x20] = memory[var18 + temp21:var18 + temp21 + 0x20];\n                    var19 = temp21 + 0x20;\n                \n                    if (var19 >= var16) { goto label_1FFC; }\n                    else { goto label_1FEA; }\n                }\n            } else {\n                var temp22 = returndata.length;\n                memory[0x00:0x00 + temp22] = returndata[0x00:0x00 + temp22];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2097(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = memory[arg0:arg0 + 0x20];\n        var var1 = 0x00;\n    \n        if (var2 >= var3) {\n        label_2202:\n            return var1;\n        } else {\n        label_20B3:\n            var var4 = 0x00;\n            var var5 = arg0;\n            var var6 = var2;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var4 = (memory[var6 + 0x20 + var5:var6 + 0x20 + var5 + 0x20] >> 0xf8) << 0xf8;\n        \n            if (var4 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff < 0x80 << 0xf8) {\n                var2 = var2 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_20AA;\n            } else if (var4 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff < 0xe0 << 0xf8) {\n                var2 = var2 + 0x02;\n                goto label_21F3;\n            } else if (var4 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff < 0xf0 << 0xf8) {\n                var2 = var2 + 0x03;\n                goto label_21F3;\n            } else if (var4 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff < 0xf8 << 0xf8) {\n                var2 = var2 + 0x04;\n                goto label_21F3;\n            } else if (var4 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff >= 0xfc << 0xf8) {\n                var2 = var2 + 0x06;\n            \n            label_21F3:\n                var1 = var1 + 0x01;\n            \n            label_20AA:\n            \n                if (var2 >= var3) { goto label_2202; }\n                else { goto label_20B3; }\n            } else {\n                var2 = var2 + 0x05;\n                goto label_21F3;\n            }\n        }\n    }\n    \n    function func_220D(var arg0) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x00] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_2305(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg2;\n        memory[0x20:0x40] = 0x05;\n    \n        if (storage[keccak256(memory[0x00:0x40])] + storage[0x03] > block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg2;\n        memory[0x20:0x40] = 0x05;\n    \n        if (storage[keccak256(memory[0x00:0x40])] + storage[0x04] <= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x2357;\n        var var2 = arg0;\n        var1 = func_16FE(var2);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg2;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var1 = 0x00;\n        var2 = 0x2383;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_1209(var3, var4);\n        var1 = var2;\n    \n        if (arg1 < 0x24ea00) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value >= var1) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 46.4297137260437,
	"usage": {
		"completion_tokens": 678,
		"prompt_tokens": 19248,
		"total_tokens": 19926
	}
}