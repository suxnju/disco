{
	"address": "0x9462eeb9124c99731cc7617348b3937a8f00b11f",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    uint256 public latestOrderId;\n    uint256 public feeMultiplier;\n    uint256 public fund;\n    address public register;\n    \n    mapping(address => mapping(address => uint256)) public balances;\n    mapping(address => mapping(address => uint256)) public commitments;\n    mapping(address => mapping(address => uint256)) public commitmentsOf;\n    mapping(address => mapping(uint256 => Order)) public orders;\n    \n    struct Order {\n        address maker;\n        address fromToken;\n        address toToken;\n        uint256 amount;\n        uint256 price;\n        uint256 fee;\n    }\n\n    modifier onlyMaker(uint256 id) {\n        require(msg.sender == orders[msg.sender][id].maker);\n        _;\n    }\n\n    function redeem(address _to, uint256 _value) public {\n        require(balances[msg.sender][_to] >= _value);\n        balances[msg.sender][_to] -= _value;\n        balances[_to][msg.sender] += _value;\n    }\n\n    function cancelOrder(uint256 id) public onlyMaker(id) {\n        delete orders[msg.sender][id];\n    }\n\n    function createOrder(address _fromToken, address _toToken, uint256 _amount, uint256 _price, uint256 _fee) public returns (uint256 id) {\n        require(balances[msg.sender][_fromToken] >= _amount);\n        balances[msg.sender][_fromToken] -= _amount;\n        latestOrderId += 1;\n        orders[msg.sender][latestOrderId] = Order(msg.sender, _fromToken, _toToken, _amount, _price, _fee);\n        return latestOrderId;\n    }\n\n    function executeOrder(uint256 id, uint256 _value) public {\n        Order storage order = orders[order.maker][id];\n        require(order.amount >= _value);\n        order.amount -= _value;\n        balances[order.maker][order.toToken] += _value;\n    }\n}\n```\n\nPlease note that the original decompiled code is hard to read and may contain inaccuracies or mistakes, so this Solidity code is just a best-effort interpretation and may not fully reflect the logic of the original contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474228,
	"id": "chatcmpl-8MvJc8O7B67Y5EIaf4jbaP7yziOex",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x1e9a6950) {\n            // Dispatch table entry for redeem(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x00d2;\n            var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var var3 = msg.data[0x24:0x44];\n            redeem(var2, var3);\n            stop();\n        } else if (var0 == 0x514fcac7) {\n            // Dispatch table entry for cancelOrder(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00d2;\n            var2 = msg.data[0x04:0x24];\n            cancelOrder(var2);\n            stop();\n        } else if (var0 == 0x518e62db) {\n            // Dispatch table entry for createOrder(address,address,uint256,uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp0 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp0;\n            var var4 = msg.data[0x44:0x64];\n            var var5 = msg.data[0x64:0x84];\n            var var6 = msg.data[0x84:0xa4];\n            var1 = createOrder(var2, var3, var4, var5, var6);\n        \n        label_0118:\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = var1;\n            var temp2 = memory[0x40:0x60];\n            return memory[temp2:temp2 + (temp1 + 0x20) - temp2];\n        } else if (var0 == 0x6f3b60d6) {\n            // Dispatch table entry for latestOrderId()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var2 = latestOrderId();\n            goto label_0118;\n        } else if (var0 == 0xaa677354) {\n            // Dispatch table entry for register(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00d2;\n            var temp3 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp3 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp3;\n            register(var2, var3);\n            stop();\n        } else if (var0 == 0xadb6f63f) {\n            // Dispatch table entry for commitments(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp4 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp4;\n            var2 = commitments(var2, var3);\n            goto label_0118;\n        } else if (var0 == 0xb60d4288) {\n            // Dispatch table entry for fund()\n            var1 = 0x00d2;\n            fund();\n            stop();\n        } else if (var0 == 0xc0ee0b8a) {\n            // Dispatch table entry for tokenFallback(address,uint256,bytes)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00d2;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var temp5 = msg.data[0x44:0x64];\n            var temp6 = msg.data[temp5 + 0x04:temp5 + 0x04 + 0x20];\n            var temp7 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp7:temp7 + 0x20] = temp6;\n            memory[temp7 + 0x20:temp7 + 0x20 + temp6] = msg.data[temp5 + 0x24:temp5 + 0x24 + temp6];\n            var4 = temp7;\n            tokenFallback(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xc23f001f) {\n            // Dispatch table entry for balances(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp8 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp8;\n            var2 = balances(var2, var3);\n            goto label_0118;\n        } else if (var0 == 0xcc7e930c) {\n            // Dispatch table entry for commitmentsOf(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var temp9 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp9 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp9;\n            var1 = commitmentsOf(var2, var3);\n            goto label_0118;\n        } else if (var0 == 0xe5a70ef7) {\n            // Dispatch table entry for feeMultiplier()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var2 = feeMultiplier();\n            goto label_0118;\n        } else if (var0 == 0xef46e0ca) {\n            // Dispatch table entry for executeOrder(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00d2;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            executeOrder(var2, var3);\n            stop();\n        } else if (var0 == 0xf7888aec) {\n            // Dispatch table entry for balanceOf(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var temp10 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp10 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp10;\n            var1 = balanceOf(var2, var3);\n            goto label_0118;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function redeem(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & var0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = var0 & temp2;\n        memory[0x20:0x40] = 0x03;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp2;\n        memory[0x20:0x40] = temp3;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = 0x0307;\n        var var3 = arg1;\n        var1 = func_0EEC(var2, var3);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = var0 & temp4;\n        memory[0x20:0x40] = 0x03;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        var temp6 = temp4 & arg0;\n        memory[0x00:0x20] = temp6;\n        memory[0x20:0x40] = temp5;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n    \n        if (storage[0x02] & temp4 != temp6) {\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0xa9059cbb;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = arg1;\n            var3 = temp7 + 0x44;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n        \n            if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp8;\n            temp8, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n        \n            if (!temp8) { revert(memory[0x00:0x00]); }\n        \n        label_03EB:\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = arg1;\n            memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = block.timestamp;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + (temp9 + 0x40) - temp10], [0xc2b4a290c20fb28939d29f102514fbffd2b73c059ffba8b78250c94161d5fcc6, stack[-3] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n            return;\n        } else {\n            var temp11 = arg1;\n            var temp12 = memory[0x40:0x60];\n            var temp13;\n            temp13, memory[temp12:temp12 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp11 * 0x08fc).value(temp11)(memory[temp12:temp12 + memory[0x40:0x60] - temp12]);\n        \n            if (temp13) { goto label_03EB; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function cancelOrder(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        var var0 = keccak256(memory[0x00:0x40]);\n    \n        if (!storage[var0 + 0x03]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = var0;\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & storage[temp1 + 0x01];\n        memory[0x20:0x40] = temp3;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = storage[temp1 + 0x03];\n        var var1 = 0x04b5;\n        var1 = func_0EEC(var2, var3);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp4 & msg.sender;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = 0x04;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        var temp7 = var0;\n        var temp8 = temp7 + 0x01;\n        memory[0x00:0x20] = temp4 & storage[temp8];\n        memory[0x20:0x40] = temp6;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = 0x03;\n        var temp9 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp4 & storage[temp8];\n        memory[0x20:0x40] = temp9;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = storage[temp7 + 0x03];\n        var1 = 0x0510;\n        var1 = func_0EFE(var2, var3);\n        var temp10 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp10 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp11 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp10 & storage[var0 + 0x01];\n        memory[0x20:0x40] = temp11;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp12 = memory[0x40:0x60];\n        memory[temp12:temp12 + 0x20] = block.timestamp;\n        var temp13 = memory[0x40:0x60];\n        log(memory[temp13:temp13 + (temp12 + 0x20) - temp13], [0xaa2a006d186dc89a3d6851834c85d16226329ac40bcad6531a5756a38ed1c90f, stack[-3]]);\n    }\n    \n    function createOrder(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg2) { revert(memory[0x00:0x00]); }\n    \n        if (!arg3) { revert(memory[0x00:0x00]); }\n    \n        if (!arg4) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01 == arg1 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0611;\n        var var2 = arg4;\n        var var3 = 0x0605;\n        var var4 = arg2;\n        var var5 = arg3;\n        var3 = func_0F14(var4, var5);\n        var1 = func_0605(var2, var3);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = storage[0x06];\n        var0 = temp2;\n        storage[0x06] = var0 + 0x01;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + 0xc0;\n        memory[temp3:temp3 + 0x20] = msg.sender;\n        var temp4 = temp3 + 0x20;\n        var temp5 = arg0;\n        memory[temp4:temp4 + 0x20] = temp5 & 0x02 ** 0xa0 - 0x01;\n        var temp6 = temp4 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = arg2;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + 0x20] = arg3;\n        memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = arg4;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x05;\n        var temp9 = keccak256(memory[0x00:0x40]);\n        storage[temp9] = (memory[temp3:temp3 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp9] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp10 = temp9 + 0x01;\n        storage[temp10] = (memory[temp3 + 0x20:temp3 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp10] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp11 = temp9 + 0x02;\n        storage[temp11] = (memory[temp3 + 0x40:temp3 + 0x40 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp11] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp9 + 0x03] = memory[temp3 + 0x60:temp3 + 0x60 + 0x20];\n        storage[temp9 + 0x04] = memory[temp3 + 0x80:temp3 + 0x80 + 0x20];\n        storage[temp9 + 0x05] = memory[temp3 + 0xa0:temp3 + 0xa0 + 0x20];\n        var temp12 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp12 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp13 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp5 & temp12;\n        memory[0x20:0x40] = temp13;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var1 = 0x076f;\n        var3 = arg2;\n        var1 = func_0EEC(var2, var3);\n        var temp14 = 0x02 ** 0xa0 - 0x01;\n        var temp15 = temp14 & msg.sender;\n        memory[0x00:0x20] = temp15;\n        memory[0x20:0x40] = 0x03;\n        var temp16 = keccak256(memory[0x00:0x40]);\n        var temp17 = arg0 & temp14;\n        memory[0x00:0x20] = temp17;\n        memory[0x20:0x40] = temp16;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = temp15;\n        memory[0x20:0x40] = 0x04;\n        var temp18 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp17;\n        memory[0x20:0x40] = temp18;\n        var1 = 0x07bd;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_0EFE(var2, var3);\n        var temp19 = 0x02 ** 0xa0 - 0x01;\n        var temp20 = temp19 & msg.sender;\n        memory[0x00:0x20] = temp20;\n        memory[0x20:0x40] = 0x04;\n        var temp21 = keccak256(memory[0x00:0x40]);\n        var temp22 = temp19 & arg0;\n        memory[0x00:0x20] = temp22;\n        memory[0x20:0x40] = temp21;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp23 = memory[0x40:0x60];\n        memory[temp23:temp23 + 0x20] = var0;\n        var temp24 = temp23 + 0x20;\n        memory[temp24:temp24 + 0x20] = arg2;\n        var temp25 = temp24 + 0x20;\n        memory[temp25:temp25 + 0x20] = arg3;\n        var temp26 = temp25 + 0x20;\n        memory[temp26:temp26 + 0x20] = arg4;\n        var temp27 = temp26 + 0x20;\n        memory[temp27:temp27 + 0x20] = block.timestamp;\n        var temp28 = memory[0x40:0x60];\n        log(memory[temp28:temp28 + (temp27 + 0x20) - temp28], [0x506cb18801692179462f2b7b4b6f10bea763984f94a1f1f3cd858e3a645b2329, msg.sender, stack[-7] & 0x02 ** 0xa0 - 0x01, stack[-6] & 0x02 ** 0xa0 - 0x01]);\n        return var0;\n    }\n    \n    function func_0605(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0F38(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function latestOrderId() returns (var r0) { return storage[0x06]; }\n    \n    function register(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var0 = arg0;\n        var var2 = var0 & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0x18160ddd;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        var var4 = temp1 + 0x04;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        var1 = temp3;\n        var2 = var0 & 0x02 ** 0xa0 - 0x01;\n        var3 = 0x095ea7b3;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = var1;\n        var4 = temp4 + 0x44;\n        var5 = 0x20;\n        var6 = memory[0x40:0x60];\n        var7 = var4 - var6;\n        var8 = var6;\n        var9 = 0x00;\n        var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp5;\n        temp5, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (temp5) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function commitments(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function fund() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & storage[0x02];\n        memory[0x20:0x40] = temp1;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x09b1;\n        var var2 = msg.value;\n        var0 = func_0EFE(var1, var2);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 & msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x03;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & storage[0x02];\n        memory[0x20:0x40] = temp4;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = msg.value;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = block.timestamp;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x40) - temp6], [0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7, storage[0x02] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n    }\n    \n    function tokenFallback(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x0a5a;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg1;\n        var0 = func_0EFE(var1, var2);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = arg0 & temp2;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x03;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = temp2 & msg.sender;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = temp4;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = arg1;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = block.timestamp;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x40) - temp7], [0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7, msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function balances(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function commitmentsOf(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function feeMultiplier() returns (var r0) { return storage[0x00]; }\n    \n    function executeOrder(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 > storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var0 = temp0;\n        var var3 = 0x0b61;\n        var var4 = storage[var0 + 0x05];\n        var var5 = 0x0605;\n        var var6 = arg1;\n        var var7 = storage[var0 + 0x04];\n        var5 = func_0F14(var6, var7);\n        var3 = func_0605(var4, var5);\n        var1 = var3;\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (storage[var0 + 0x03] < arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp1 == temp1 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & storage[var0 + 0x02];\n        memory[0x20:0x40] = temp3;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < var1) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x0be7;\n        var5 = storage[0x00];\n        var4 = arg1;\n        var3 = func_0F38(var4, var5);\n        var temp4 = var0;\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp5 & storage[temp4];\n        memory[0x20:0x40] = 0x03;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp5 & storage[temp4 + 0x02];\n        memory[0x20:0x40] = temp6;\n        var2 = var3;\n        var3 = 0x0c27;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var5 = var1;\n        var3 = func_0EFE(var4, var5);\n        var temp7 = var0;\n        var temp8 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp8 & storage[temp7];\n        memory[0x20:0x40] = 0x03;\n        var temp9 = keccak256(memory[0x00:0x40]);\n        var temp10 = temp7 + 0x02;\n        memory[0x00:0x20] = temp8 & storage[temp10];\n        memory[0x20:0x40] = temp9;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp8 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp11 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp8 & storage[temp10];\n        memory[0x20:0x40] = temp11;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x0c81;\n        var5 = var1;\n        var3 = func_0EEC(var4, var5);\n        var temp12 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp12 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp13 = keccak256(memory[0x00:0x40]);\n        var temp14 = var0;\n        memory[0x00:0x20] = temp12 & storage[temp14 + 0x02];\n        memory[0x20:0x40] = temp13;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp12 & storage[temp14 + 0x01];\n        var3 = 0x0cd8;\n        var4 = var2;\n        var6 = storage[keccak256(memory[0x00:0x40])];\n        var5 = 0x0ccc;\n        var7 = arg1;\n        var5 = func_0EFE(var6, var7);\n        var3 = func_0CCC(var4, var5);\n        var temp15 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp15 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp16 = keccak256(memory[0x00:0x40]);\n        var temp17 = var0;\n        var temp18 = temp17 + 0x01;\n        memory[0x00:0x20] = temp15 & storage[temp18];\n        memory[0x20:0x40] = temp16;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp15 & storage[temp17];\n        memory[0x20:0x40] = 0x03;\n        var temp19 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp15 & storage[temp18];\n        memory[0x20:0x40] = temp19;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x0d31;\n        var5 = var2;\n        var3 = func_0EFE(var4, var5);\n        var temp20 = var0;\n        var temp21 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp21 & storage[temp20];\n        memory[0x20:0x40] = 0x03;\n        var temp22 = keccak256(memory[0x00:0x40]);\n        var temp23 = temp20 + 0x01;\n        memory[0x00:0x20] = temp21 & storage[temp23];\n        memory[0x20:0x40] = temp22;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp21 & storage[temp20];\n        memory[0x20:0x40] = 0x04;\n        var temp24 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp21 & storage[temp23];\n        memory[0x20:0x40] = temp24;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x0d8e;\n        var5 = arg1;\n        var3 = func_0EEC(var4, var5);\n        var temp25 = var0;\n        var temp26 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp26 & storage[temp25];\n        memory[0x20:0x40] = 0x04;\n        var temp27 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp26 & storage[temp25 + 0x01];\n        memory[0x20:0x40] = temp27;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var4 = storage[temp25 + 0x03];\n        var3 = 0x0dd0;\n        var5 = arg1;\n        var3 = func_0EEC(var4, var5);\n        var temp28 = var3;\n        storage[var0 + 0x03] = temp28;\n    \n        if (temp28) {\n            var temp29 = var0;\n            var temp30 = 0x02 ** 0xa0 - 0x01;\n            var temp31 = memory[0x40:0x60];\n            memory[temp31:temp31 + 0x20] = arg1;\n            var temp32 = temp31 + 0x20;\n            memory[temp32:temp32 + 0x20] = var1;\n            var temp33 = temp32 + 0x20;\n            memory[temp33:temp33 + 0x20] = block.timestamp;\n            var temp34 = memory[0x40:0x60];\n            log(memory[temp34:temp34 + (temp33 + 0x20) - temp34], [0xe6f814da7244d1ae6c61b54b5684858ba39cad7b9a91884be10060664987d754, msg.sender, storage[stack[-3]] & 0x02 ** 0xa0 - 0x01, stack[-5]]);\n            var temp35 = 0x02 ** 0xa0 - 0x01;\n            var temp36 = memory[0x40:0x60];\n            memory[temp36:temp36 + 0x20] = var2;\n            memory[temp36 + 0x20:temp36 + 0x20 + 0x20] = block.timestamp;\n            var temp37 = memory[0x40:0x60];\n            log(memory[temp37:temp37 + (temp36 + 0x40) - temp37], [0xac476a0560d6039841f7de6a83293b862be45e3182ab744e10e048952fe7e4e3, storage[stack[-3]] & 0x02 ** 0xa0 - 0x01, storage[stack[-3] + 0x01] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var temp38 = arg0;\n            var temp39 = memory[0x40:0x60];\n            memory[temp39:temp39 + 0x20] = block.timestamp;\n            var temp40 = memory[0x40:0x60];\n            log(memory[temp40:temp40 + (temp39 + 0x20) - temp40], [0xeb3b41be12efa25c0c65725eeff2e2ad0250e2e5de2aa939e18f36aa656e9880, stack[-5]]);\n            var temp41 = var0;\n            var temp42 = 0x02 ** 0xa0 - 0x01;\n            var temp43 = memory[0x40:0x60];\n            memory[temp43:temp43 + 0x20] = arg1;\n            var temp44 = temp43 + 0x20;\n            memory[temp44:temp44 + 0x20] = var1;\n            var temp45 = temp44 + 0x20;\n            memory[temp45:temp45 + 0x20] = block.timestamp;\n            var temp46 = memory[0x40:0x60];\n            log(memory[temp46:temp46 + (temp45 + 0x20) - temp46], [0xe6f814da7244d1ae6c61b54b5684858ba39cad7b9a91884be10060664987d754, msg.sender, storage[stack[-3]] & 0x02 ** 0xa0 - 0x01, stack[-5]]);\n            var temp47 = 0x02 ** 0xa0 - 0x01;\n            var temp48 = memory[0x40:0x60];\n            memory[temp48:temp48 + 0x20] = var2;\n            memory[temp48 + 0x20:temp48 + 0x20 + 0x20] = block.timestamp;\n            var temp49 = memory[0x40:0x60];\n            log(memory[temp49:temp49 + (temp48 + 0x40) - temp49], [0xac476a0560d6039841f7de6a83293b862be45e3182ab744e10e048952fe7e4e3, storage[stack[-3]] & 0x02 ** 0xa0 - 0x01, storage[stack[-3] + 0x01] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        }\n    }\n    \n    function func_0CCC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0EEC(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0EEC(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0EFE(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0F14(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = !temp0;\n    \n        if (var2) {\n        label_0F30:\n        \n            if (var2) { return var1; }\n            else { assert(); }\n        } else {\n            var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var2 = var4 / var3 == var2;\n            goto label_0F30;\n        }\n    }\n    \n    function func_0F38(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x1e9a6950) {\n            // Dispatch table entry for redeem(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x00d2;\n            var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var var3 = msg.data[0x24:0x44];\n            redeem(var2, var3);\n            stop();\n        } else if (var0 == 0x514fcac7) {\n            // Dispatch table entry for cancelOrder(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00d2;\n            var2 = msg.data[0x04:0x24];\n            cancelOrder(var2);\n            stop();\n        } else if (var0 == 0x518e62db) {\n            // Dispatch table entry for createOrder(address,address,uint256,uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp0 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp0;\n            var var4 = msg.data[0x44:0x64];\n            var var5 = msg.data[0x64:0x84];\n            var var6 = msg.data[0x84:0xa4];\n            var1 = createOrder(var2, var3, var4, var5, var6);\n        \n        label_0118:\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = var1;\n            var temp2 = memory[0x40:0x60];\n            return memory[temp2:temp2 + (temp1 + 0x20) - temp2];\n        } else if (var0 == 0x6f3b60d6) {\n            // Dispatch table entry for latestOrderId()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var2 = latestOrderId();\n            goto label_0118;\n        } else if (var0 == 0xaa677354) {\n            // Dispatch table entry for register(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00d2;\n            var temp3 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp3 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp3;\n            register(var2, var3);\n            stop();\n        } else if (var0 == 0xadb6f63f) {\n            // Dispatch table entry for commitments(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp4 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp4;\n            var2 = commitments(var2, var3);\n            goto label_0118;\n        } else if (var0 == 0xb60d4288) {\n            // Dispatch table entry for fund()\n            var1 = 0x00d2;\n            fund();\n            stop();\n        } else if (var0 == 0xc0ee0b8a) {\n            // Dispatch table entry for tokenFallback(address,uint256,bytes)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00d2;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var temp5 = msg.data[0x44:0x64];\n            var temp6 = msg.data[temp5 + 0x04:temp5 + 0x04 + 0x20];\n            var temp7 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp7:temp7 + 0x20] = temp6;\n            memory[temp7 + 0x20:temp7 + 0x20 + temp6] = msg.data[temp5 + 0x24:temp5 + 0x24 + temp6];\n            var4 = temp7;\n            tokenFallback(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xc23f001f) {\n            // Dispatch table entry for balances(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp8 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp8;\n            var2 = balances(var2, var3);\n            goto label_0118;\n        } else if (var0 == 0xcc7e930c) {\n            // Dispatch table entry for commitmentsOf(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var temp9 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp9 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp9;\n            var1 = commitmentsOf(var2, var3);\n            goto label_0118;\n        } else if (var0 == 0xe5a70ef7) {\n            // Dispatch table entry for feeMultiplier()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var2 = feeMultiplier();\n            goto label_0118;\n        } else if (var0 == 0xef46e0ca) {\n            // Dispatch table entry for executeOrder(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00d2;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            executeOrder(var2, var3);\n            stop();\n        } else if (var0 == 0xf7888aec) {\n            // Dispatch table entry for balanceOf(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var temp10 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp10 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp10;\n            var1 = balanceOf(var2, var3);\n            goto label_0118;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function redeem(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & var0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = var0 & temp2;\n        memory[0x20:0x40] = 0x03;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp2;\n        memory[0x20:0x40] = temp3;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = 0x0307;\n        var var3 = arg1;\n        var1 = func_0EEC(var2, var3);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = var0 & temp4;\n        memory[0x20:0x40] = 0x03;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        var temp6 = temp4 & arg0;\n        memory[0x00:0x20] = temp6;\n        memory[0x20:0x40] = temp5;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n    \n        if (storage[0x02] & temp4 != temp6) {\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0xa9059cbb;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = arg1;\n            var3 = temp7 + 0x44;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n        \n            if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp8;\n            temp8, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n        \n            if (!temp8) { revert(memory[0x00:0x00]); }\n        \n        label_03EB:\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = arg1;\n            memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = block.timestamp;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + (temp9 + 0x40) - temp10], [0xc2b4a290c20fb28939d29f102514fbffd2b73c059ffba8b78250c94161d5fcc6, stack[-3] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n            return;\n        } else {\n            var temp11 = arg1;\n            var temp12 = memory[0x40:0x60];\n            var temp13;\n            temp13, memory[temp12:temp12 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp11 * 0x08fc).value(temp11)(memory[temp12:temp12 + memory[0x40:0x60] - temp12]);\n        \n            if (temp13) { goto label_03EB; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function cancelOrder(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        var var0 = keccak256(memory[0x00:0x40]);\n    \n        if (!storage[var0 + 0x03]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = var0;\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & storage[temp1 + 0x01];\n        memory[0x20:0x40] = temp3;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = storage[temp1 + 0x03];\n        var var1 = 0x04b5;\n        var1 = func_0EEC(var2, var3);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp4 & msg.sender;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = 0x04;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        var temp7 = var0;\n        var temp8 = temp7 + 0x01;\n        memory[0x00:0x20] = temp4 & storage[temp8];\n        memory[0x20:0x40] = temp6;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = 0x03;\n        var temp9 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp4 & storage[temp8];\n        memory[0x20:0x40] = temp9;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = storage[temp7 + 0x03];\n        var1 = 0x0510;\n        var1 = func_0EFE(var2, var3);\n        var temp10 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp10 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp11 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp10 & storage[var0 + 0x01];\n        memory[0x20:0x40] = temp11;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp12 = memory[0x40:0x60];\n        memory[temp12:temp12 + 0x20] = block.timestamp;\n        var temp13 = memory[0x40:0x60];\n        log(memory[temp13:temp13 + (temp12 + 0x20) - temp13], [0xaa2a006d186dc89a3d6851834c85d16226329ac40bcad6531a5756a38ed1c90f, stack[-3]]);\n    }\n    \n    function createOrder(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg2) { revert(memory[0x00:0x00]); }\n    \n        if (!arg3) { revert(memory[0x00:0x00]); }\n    \n        if (!arg4) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01 == arg1 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0611;\n        var var2 = arg4;\n        var var3 = 0x0605;\n        var var4 = arg2;\n        var var5 = arg3;\n        var3 = func_0F14(var4, var5);\n        var1 = func_0605(var2, var3);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = storage[0x06];\n        var0 = temp2;\n        storage[0x06] = var0 + 0x01;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + 0xc0;\n        memory[temp3:temp3 + 0x20] = msg.sender;\n        var temp4 = temp3 + 0x20;\n        var temp5 = arg0;\n        memory[temp4:temp4 + 0x20] = temp5 & 0x02 ** 0xa0 - 0x01;\n        var temp6 = temp4 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = arg2;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + 0x20] = arg3;\n        memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = arg4;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x05;\n        var temp9 = keccak256(memory[0x00:0x40]);\n        storage[temp9] = (memory[temp3:temp3 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp9] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp10 = temp9 + 0x01;\n        storage[temp10] = (memory[temp3 + 0x20:temp3 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp10] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp11 = temp9 + 0x02;\n        storage[temp11] = (memory[temp3 + 0x40:temp3 + 0x40 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp11] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp9 + 0x03] = memory[temp3 + 0x60:temp3 + 0x60 + 0x20];\n        storage[temp9 + 0x04] = memory[temp3 + 0x80:temp3 + 0x80 + 0x20];\n        storage[temp9 + 0x05] = memory[temp3 + 0xa0:temp3 + 0xa0 + 0x20];\n        var temp12 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp12 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp13 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp5 & temp12;\n        memory[0x20:0x40] = temp13;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var1 = 0x076f;\n        var3 = arg2;\n        var1 = func_0EEC(var2, var3);\n        var temp14 = 0x02 ** 0xa0 - 0x01;\n        var temp15 = temp14 & msg.sender;\n        memory[0x00:0x20] = temp15;\n        memory[0x20:0x40] = 0x03;\n        var temp16 = keccak256(memory[0x00:0x40]);\n        var temp17 = arg0 & temp14;\n        memory[0x00:0x20] = temp17;\n        memory[0x20:0x40] = temp16;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = temp15;\n        memory[0x20:0x40] = 0x04;\n        var temp18 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp17;\n        memory[0x20:0x40] = temp18;\n        var1 = 0x07bd;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_0EFE(var2, var3);\n        var temp19 = 0x02 ** 0xa0 - 0x01;\n        var temp20 = temp19 & msg.sender;\n        memory[0x00:0x20] = temp20;\n        memory[0x20:0x40] = 0x04;\n        var temp21 = keccak256(memory[0x00:0x40]);\n        var temp22 = temp19 & arg0;\n        memory[0x00:0x20] = temp22;\n        memory[0x20:0x40] = temp21;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp23 = memory[0x40:0x60];\n        memory[temp23:temp23 + 0x20] = var0;\n        var temp24 = temp23 + 0x20;\n        memory[temp24:temp24 + 0x20] = arg2;\n        var temp25 = temp24 + 0x20;\n        memory[temp25:temp25 + 0x20] = arg3;\n        var temp26 = temp25 + 0x20;\n        memory[temp26:temp26 + 0x20] = arg4;\n        var temp27 = temp26 + 0x20;\n        memory[temp27:temp27 + 0x20] = block.timestamp;\n        var temp28 = memory[0x40:0x60];\n        log(memory[temp28:temp28 + (temp27 + 0x20) - temp28], [0x506cb18801692179462f2b7b4b6f10bea763984f94a1f1f3cd858e3a645b2329, msg.sender, stack[-7] & 0x02 ** 0xa0 - 0x01, stack[-6] & 0x02 ** 0xa0 - 0x01]);\n        return var0;\n    }\n    \n    function func_0605(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0F38(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function latestOrderId() returns (var r0) { return storage[0x06]; }\n    \n    function register(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var0 = arg0;\n        var var2 = var0 & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0x18160ddd;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        var var4 = temp1 + 0x04;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        var1 = temp3;\n        var2 = var0 & 0x02 ** 0xa0 - 0x01;\n        var3 = 0x095ea7b3;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = var1;\n        var4 = temp4 + 0x44;\n        var5 = 0x20;\n        var6 = memory[0x40:0x60];\n        var7 = var4 - var6;\n        var8 = var6;\n        var9 = 0x00;\n        var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp5;\n        temp5, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (temp5) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function commitments(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function fund() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & storage[0x02];\n        memory[0x20:0x40] = temp1;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x09b1;\n        var var2 = msg.value;\n        var0 = func_0EFE(var1, var2);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 & msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x03;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & storage[0x02];\n        memory[0x20:0x40] = temp4;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = msg.value;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = block.timestamp;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x40) - temp6], [0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7, storage[0x02] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n    }\n    \n    function tokenFallback(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x0a5a;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg1;\n        var0 = func_0EFE(var1, var2);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = arg0 & temp2;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x03;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = temp2 & msg.sender;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = temp4;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = arg1;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = block.timestamp;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x40) - temp7], [0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7, msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function balances(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function commitmentsOf(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function feeMultiplier() returns (var r0) { return storage[0x00]; }\n    \n    function executeOrder(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 > storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var0 = temp0;\n        var var3 = 0x0b61;\n        var var4 = storage[var0 + 0x05];\n        var var5 = 0x0605;\n        var var6 = arg1;\n        var var7 = storage[var0 + 0x04];\n        var5 = func_0F14(var6, var7);\n        var3 = func_0605(var4, var5);\n        var1 = var3;\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (storage[var0 + 0x03] < arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp1 == temp1 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & storage[var0 + 0x02];\n        memory[0x20:0x40] = temp3;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < var1) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x0be7;\n        var5 = storage[0x00];\n        var4 = arg1;\n        var3 = func_0F38(var4, var5);\n        var temp4 = var0;\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp5 & storage[temp4];\n        memory[0x20:0x40] = 0x03;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp5 & storage[temp4 + 0x02];\n        memory[0x20:0x40] = temp6;\n        var2 = var3;\n        var3 = 0x0c27;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var5 = var1;\n        var3 = func_0EFE(var4, var5);\n        var temp7 = var0;\n        var temp8 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp8 & storage[temp7];\n        memory[0x20:0x40] = 0x03;\n        var temp9 = keccak256(memory[0x00:0x40]);\n        var temp10 = temp7 + 0x02;\n        memory[0x00:0x20] = temp8 & storage[temp10];\n        memory[0x20:0x40] = temp9;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp8 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp11 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp8 & storage[temp10];\n        memory[0x20:0x40] = temp11;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x0c81;\n        var5 = var1;\n        var3 = func_0EEC(var4, var5);\n        var temp12 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp12 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp13 = keccak256(memory[0x00:0x40]);\n        var temp14 = var0;\n        memory[0x00:0x20] = temp12 & storage[temp14 + 0x02];\n        memory[0x20:0x40] = temp13;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp12 & storage[temp14 + 0x01];\n        var3 = 0x0cd8;\n        var4 = var2;\n        var6 = storage[keccak256(memory[0x00:0x40])];\n        var5 = 0x0ccc;\n        var7 = arg1;\n        var5 = func_0EFE(var6, var7);\n        var3 = func_0CCC(var4, var5);\n        var temp15 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp15 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp16 = keccak256(memory[0x00:0x40]);\n        var temp17 = var0;\n        var temp18 = temp17 + 0x01;\n        memory[0x00:0x20] = temp15 & storage[temp18];\n        memory[0x20:0x40] = temp16;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp15 & storage[temp17];\n        memory[0x20:0x40] = 0x03;\n        var temp19 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp15 & storage[temp18];\n        memory[0x20:0x40] = temp19;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x0d31;\n        var5 = var2;\n        var3 = func_0EFE(var4, var5);\n        var temp20 = var0;\n        var temp21 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp21 & storage[temp20];\n        memory[0x20:0x40] = 0x03;\n        var temp22 = keccak256(memory[0x00:0x40]);\n        var temp23 = temp20 + 0x01;\n        memory[0x00:0x20] = temp21 & storage[temp23];\n        memory[0x20:0x40] = temp22;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp21 & storage[temp20];\n        memory[0x20:0x40] = 0x04;\n        var temp24 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp21 & storage[temp23];\n        memory[0x20:0x40] = temp24;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x0d8e;\n        var5 = arg1;\n        var3 = func_0EEC(var4, var5);\n        var temp25 = var0;\n        var temp26 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp26 & storage[temp25];\n        memory[0x20:0x40] = 0x04;\n        var temp27 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp26 & storage[temp25 + 0x01];\n        memory[0x20:0x40] = temp27;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var4 = storage[temp25 + 0x03];\n        var3 = 0x0dd0;\n        var5 = arg1;\n        var3 = func_0EEC(var4, var5);\n        var temp28 = var3;\n        storage[var0 + 0x03] = temp28;\n    \n        if (temp28) {\n            var temp29 = var0;\n            var temp30 = 0x02 ** 0xa0 - 0x01;\n            var temp31 = memory[0x40:0x60];\n            memory[temp31:temp31 + 0x20] = arg1;\n            var temp32 = temp31 + 0x20;\n            memory[temp32:temp32 + 0x20] = var1;\n            var temp33 = temp32 + 0x20;\n            memory[temp33:temp33 + 0x20] = block.timestamp;\n            var temp34 = memory[0x40:0x60];\n            log(memory[temp34:temp34 + (temp33 + 0x20) - temp34], [0xe6f814da7244d1ae6c61b54b5684858ba39cad7b9a91884be10060664987d754, msg.sender, storage[stack[-3]] & 0x02 ** 0xa0 - 0x01, stack[-5]]);\n            var temp35 = 0x02 ** 0xa0 - 0x01;\n            var temp36 = memory[0x40:0x60];\n            memory[temp36:temp36 + 0x20] = var2;\n            memory[temp36 + 0x20:temp36 + 0x20 + 0x20] = block.timestamp;\n            var temp37 = memory[0x40:0x60];\n            log(memory[temp37:temp37 + (temp36 + 0x40) - temp37], [0xac476a0560d6039841f7de6a83293b862be45e3182ab744e10e048952fe7e4e3, storage[stack[-3]] & 0x02 ** 0xa0 - 0x01, storage[stack[-3] + 0x01] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var temp38 = arg0;\n            var temp39 = memory[0x40:0x60];\n            memory[temp39:temp39 + 0x20] = block.timestamp;\n            var temp40 = memory[0x40:0x60];\n            log(memory[temp40:temp40 + (temp39 + 0x20) - temp40], [0xeb3b41be12efa25c0c65725eeff2e2ad0250e2e5de2aa939e18f36aa656e9880, stack[-5]]);\n            var temp41 = var0;\n            var temp42 = 0x02 ** 0xa0 - 0x01;\n            var temp43 = memory[0x40:0x60];\n            memory[temp43:temp43 + 0x20] = arg1;\n            var temp44 = temp43 + 0x20;\n            memory[temp44:temp44 + 0x20] = var1;\n            var temp45 = temp44 + 0x20;\n            memory[temp45:temp45 + 0x20] = block.timestamp;\n            var temp46 = memory[0x40:0x60];\n            log(memory[temp46:temp46 + (temp45 + 0x20) - temp46], [0xe6f814da7244d1ae6c61b54b5684858ba39cad7b9a91884be10060664987d754, msg.sender, storage[stack[-3]] & 0x02 ** 0xa0 - 0x01, stack[-5]]);\n            var temp47 = 0x02 ** 0xa0 - 0x01;\n            var temp48 = memory[0x40:0x60];\n            memory[temp48:temp48 + 0x20] = var2;\n            memory[temp48 + 0x20:temp48 + 0x20 + 0x20] = block.timestamp;\n            var temp49 = memory[0x40:0x60];\n            log(memory[temp49:temp49 + (temp48 + 0x40) - temp49], [0xac476a0560d6039841f7de6a83293b862be45e3182ab744e10e048952fe7e4e3, storage[stack[-3]] & 0x02 ** 0xa0 - 0x01, storage[stack[-3] + 0x01] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        }\n    }\n    \n    function func_0CCC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0EEC(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0EEC(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0EFE(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0F14(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = !temp0;\n    \n        if (var2) {\n        label_0F30:\n        \n            if (var2) { return var1; }\n            else { assert(); }\n        } else {\n            var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var2 = var4 / var3 == var2;\n            goto label_0F30;\n        }\n    }\n    \n    function func_0F38(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x1e9a6950) {\n            // Dispatch table entry for redeem(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x00d2;\n            var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var var3 = msg.data[0x24:0x44];\n            redeem(var2, var3);\n            stop();\n        } else if (var0 == 0x514fcac7) {\n            // Dispatch table entry for cancelOrder(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00d2;\n            var2 = msg.data[0x04:0x24];\n            cancelOrder(var2);\n            stop();\n        } else if (var0 == 0x518e62db) {\n            // Dispatch table entry for createOrder(address,address,uint256,uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp0 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp0;\n            var var4 = msg.data[0x44:0x64];\n            var var5 = msg.data[0x64:0x84];\n            var var6 = msg.data[0x84:0xa4];\n            var1 = createOrder(var2, var3, var4, var5, var6);\n        \n        label_0118:\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = var1;\n            var temp2 = memory[0x40:0x60];\n            return memory[temp2:temp2 + (temp1 + 0x20) - temp2];\n        } else if (var0 == 0x6f3b60d6) {\n            // Dispatch table entry for latestOrderId()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var2 = latestOrderId();\n            goto label_0118;\n        } else if (var0 == 0xaa677354) {\n            // Dispatch table entry for register(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00d2;\n            var temp3 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp3 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp3;\n            register(var2, var3);\n            stop();\n        } else if (var0 == 0xadb6f63f) {\n            // Dispatch table entry for commitments(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp4 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp4;\n            var2 = commitments(var2, var3);\n            goto label_0118;\n        } else if (var0 == 0xb60d4288) {\n            // Dispatch table entry for fund()\n            var1 = 0x00d2;\n            fund();\n            stop();\n        } else if (var0 == 0xc0ee0b8a) {\n            // Dispatch table entry for tokenFallback(address,uint256,bytes)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00d2;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var temp5 = msg.data[0x44:0x64];\n            var temp6 = msg.data[temp5 + 0x04:temp5 + 0x04 + 0x20];\n            var temp7 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp7:temp7 + 0x20] = temp6;\n            memory[temp7 + 0x20:temp7 + 0x20 + temp6] = msg.data[temp5 + 0x24:temp5 + 0x24 + temp6];\n            var4 = temp7;\n            tokenFallback(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xc23f001f) {\n            // Dispatch table entry for balances(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp8 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp8;\n            var2 = balances(var2, var3);\n            goto label_0118;\n        } else if (var0 == 0xcc7e930c) {\n            // Dispatch table entry for commitmentsOf(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var temp9 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp9 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp9;\n            var1 = commitmentsOf(var2, var3);\n            goto label_0118;\n        } else if (var0 == 0xe5a70ef7) {\n            // Dispatch table entry for feeMultiplier()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var2 = feeMultiplier();\n            goto label_0118;\n        } else if (var0 == 0xef46e0ca) {\n            // Dispatch table entry for executeOrder(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00d2;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            executeOrder(var2, var3);\n            stop();\n        } else if (var0 == 0xf7888aec) {\n            // Dispatch table entry for balanceOf(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0118;\n            var temp10 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp10 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp10;\n            var1 = balanceOf(var2, var3);\n            goto label_0118;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function redeem(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & var0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = var0 & temp2;\n        memory[0x20:0x40] = 0x03;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp2;\n        memory[0x20:0x40] = temp3;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = 0x0307;\n        var var3 = arg1;\n        var1 = func_0EEC(var2, var3);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = var0 & temp4;\n        memory[0x20:0x40] = 0x03;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        var temp6 = temp4 & arg0;\n        memory[0x00:0x20] = temp6;\n        memory[0x20:0x40] = temp5;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n    \n        if (storage[0x02] & temp4 != temp6) {\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0xa9059cbb;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = arg1;\n            var3 = temp7 + 0x44;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n        \n            if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp8;\n            temp8, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n        \n            if (!temp8) { revert(memory[0x00:0x00]); }\n        \n        label_03EB:\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = arg1;\n            memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = block.timestamp;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + (temp9 + 0x40) - temp10], [0xc2b4a290c20fb28939d29f102514fbffd2b73c059ffba8b78250c94161d5fcc6, stack[-3] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n            return;\n        } else {\n            var temp11 = arg1;\n            var temp12 = memory[0x40:0x60];\n            var temp13;\n            temp13, memory[temp12:temp12 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp11 * 0x08fc).value(temp11)(memory[temp12:temp12 + memory[0x40:0x60] - temp12]);\n        \n            if (temp13) { goto label_03EB; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function cancelOrder(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        var var0 = keccak256(memory[0x00:0x40]);\n    \n        if (!storage[var0 + 0x03]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = var0;\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & storage[temp1 + 0x01];\n        memory[0x20:0x40] = temp3;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = storage[temp1 + 0x03];\n        var var1 = 0x04b5;\n        var1 = func_0EEC(var2, var3);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp4 & msg.sender;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = 0x04;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        var temp7 = var0;\n        var temp8 = temp7 + 0x01;\n        memory[0x00:0x20] = temp4 & storage[temp8];\n        memory[0x20:0x40] = temp6;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = 0x03;\n        var temp9 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp4 & storage[temp8];\n        memory[0x20:0x40] = temp9;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = storage[temp7 + 0x03];\n        var1 = 0x0510;\n        var1 = func_0EFE(var2, var3);\n        var temp10 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp10 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp11 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp10 & storage[var0 + 0x01];\n        memory[0x20:0x40] = temp11;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp12 = memory[0x40:0x60];\n        memory[temp12:temp12 + 0x20] = block.timestamp;\n        var temp13 = memory[0x40:0x60];\n        log(memory[temp13:temp13 + (temp12 + 0x20) - temp13], [0xaa2a006d186dc89a3d6851834c85d16226329ac40bcad6531a5756a38ed1c90f, stack[-3]]);\n    }\n    \n    function createOrder(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg2) { revert(memory[0x00:0x00]); }\n    \n        if (!arg3) { revert(memory[0x00:0x00]); }\n    \n        if (!arg4) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01 == arg1 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0611;\n        var var2 = arg4;\n        var var3 = 0x0605;\n        var var4 = arg2;\n        var var5 = arg3;\n        var3 = func_0F14(var4, var5);\n        var1 = func_0605(var2, var3);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = storage[0x06];\n        var0 = temp2;\n        storage[0x06] = var0 + 0x01;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + 0xc0;\n        memory[temp3:temp3 + 0x20] = msg.sender;\n        var temp4 = temp3 + 0x20;\n        var temp5 = arg0;\n        memory[temp4:temp4 + 0x20] = temp5 & 0x02 ** 0xa0 - 0x01;\n        var temp6 = temp4 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = arg2;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + 0x20] = arg3;\n        memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = arg4;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x05;\n        var temp9 = keccak256(memory[0x00:0x40]);\n        storage[temp9] = (memory[temp3:temp3 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp9] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp10 = temp9 + 0x01;\n        storage[temp10] = (memory[temp3 + 0x20:temp3 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp10] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp11 = temp9 + 0x02;\n        storage[temp11] = (memory[temp3 + 0x40:temp3 + 0x40 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp11] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp9 + 0x03] = memory[temp3 + 0x60:temp3 + 0x60 + 0x20];\n        storage[temp9 + 0x04] = memory[temp3 + 0x80:temp3 + 0x80 + 0x20];\n        storage[temp9 + 0x05] = memory[temp3 + 0xa0:temp3 + 0xa0 + 0x20];\n        var temp12 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp12 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp13 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp5 & temp12;\n        memory[0x20:0x40] = temp13;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var1 = 0x076f;\n        var3 = arg2;\n        var1 = func_0EEC(var2, var3);\n        var temp14 = 0x02 ** 0xa0 - 0x01;\n        var temp15 = temp14 & msg.sender;\n        memory[0x00:0x20] = temp15;\n        memory[0x20:0x40] = 0x03;\n        var temp16 = keccak256(memory[0x00:0x40]);\n        var temp17 = arg0 & temp14;\n        memory[0x00:0x20] = temp17;\n        memory[0x20:0x40] = temp16;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = temp15;\n        memory[0x20:0x40] = 0x04;\n        var temp18 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp17;\n        memory[0x20:0x40] = temp18;\n        var1 = 0x07bd;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_0EFE(var2, var3);\n        var temp19 = 0x02 ** 0xa0 - 0x01;\n        var temp20 = temp19 & msg.sender;\n        memory[0x00:0x20] = temp20;\n        memory[0x20:0x40] = 0x04;\n        var temp21 = keccak256(memory[0x00:0x40]);\n        var temp22 = temp19 & arg0;\n        memory[0x00:0x20] = temp22;\n        memory[0x20:0x40] = temp21;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp23 = memory[0x40:0x60];\n        memory[temp23:temp23 + 0x20] = var0;\n        var temp24 = temp23 + 0x20;\n        memory[temp24:temp24 + 0x20] = arg2;\n        var temp25 = temp24 + 0x20;\n        memory[temp25:temp25 + 0x20] = arg3;\n        var temp26 = temp25 + 0x20;\n        memory[temp26:temp26 + 0x20] = arg4;\n        var temp27 = temp26 + 0x20;\n        memory[temp27:temp27 + 0x20] = block.timestamp;\n        var temp28 = memory[0x40:0x60];\n        log(memory[temp28:temp28 + (temp27 + 0x20) - temp28], [0x506cb18801692179462f2b7b4b6f10bea763984f94a1f1f3cd858e3a645b2329, msg.sender, stack[-7] & 0x02 ** 0xa0 - 0x01, stack[-6] & 0x02 ** 0xa0 - 0x01]);\n        return var0;\n    }\n    \n    function func_0605(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0F38(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function latestOrderId() returns (var r0) { return storage[0x06]; }\n    \n    function register(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var0 = arg0;\n        var var2 = var0 & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0x18160ddd;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        var var4 = temp1 + 0x04;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        var1 = temp3;\n        var2 = var0 & 0x02 ** 0xa0 - 0x01;\n        var3 = 0x095ea7b3;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = var1;\n        var4 = temp4 + 0x44;\n        var5 = 0x20;\n        var6 = memory[0x40:0x60];\n        var7 = var4 - var6;\n        var8 = var6;\n        var9 = 0x00;\n        var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp5;\n        temp5, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (temp5) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function commitments(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function fund() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & storage[0x02];\n        memory[0x20:0x40] = temp1;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x09b1;\n        var var2 = msg.value;\n        var0 = func_0EFE(var1, var2);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 & msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x03;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & storage[0x02];\n        memory[0x20:0x40] = temp4;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = msg.value;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = block.timestamp;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x40) - temp6], [0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7, storage[0x02] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n    }\n    \n    function tokenFallback(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x0a5a;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg1;\n        var0 = func_0EFE(var1, var2);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = arg0 & temp2;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x03;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = temp2 & msg.sender;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = temp4;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = arg1;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = block.timestamp;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x40) - temp7], [0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7, msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function balances(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function commitmentsOf(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function feeMultiplier() returns (var r0) { return storage[0x00]; }\n    \n    function executeOrder(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 > storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var0 = temp0;\n        var var3 = 0x0b61;\n        var var4 = storage[var0 + 0x05];\n        var var5 = 0x0605;\n        var var6 = arg1;\n        var var7 = storage[var0 + 0x04];\n        var5 = func_0F14(var6, var7);\n        var3 = func_0605(var4, var5);\n        var1 = var3;\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (storage[var0 + 0x03] < arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp1 == temp1 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & storage[var0 + 0x02];\n        memory[0x20:0x40] = temp3;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < var1) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x0be7;\n        var5 = storage[0x00];\n        var4 = arg1;\n        var3 = func_0F38(var4, var5);\n        var temp4 = var0;\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp5 & storage[temp4];\n        memory[0x20:0x40] = 0x03;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp5 & storage[temp4 + 0x02];\n        memory[0x20:0x40] = temp6;\n        var2 = var3;\n        var3 = 0x0c27;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var5 = var1;\n        var3 = func_0EFE(var4, var5);\n        var temp7 = var0;\n        var temp8 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp8 & storage[temp7];\n        memory[0x20:0x40] = 0x03;\n        var temp9 = keccak256(memory[0x00:0x40]);\n        var temp10 = temp7 + 0x02;\n        memory[0x00:0x20] = temp8 & storage[temp10];\n        memory[0x20:0x40] = temp9;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp8 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp11 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp8 & storage[temp10];\n        memory[0x20:0x40] = temp11;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x0c81;\n        var5 = var1;\n        var3 = func_0EEC(var4, var5);\n        var temp12 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp12 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp13 = keccak256(memory[0x00:0x40]);\n        var temp14 = var0;\n        memory[0x00:0x20] = temp12 & storage[temp14 + 0x02];\n        memory[0x20:0x40] = temp13;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp12 & storage[temp14 + 0x01];\n        var3 = 0x0cd8;\n        var4 = var2;\n        var6 = storage[keccak256(memory[0x00:0x40])];\n        var5 = 0x0ccc;\n        var7 = arg1;\n        var5 = func_0EFE(var6, var7);\n        var3 = func_0CCC(var4, var5);\n        var temp15 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp15 & msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp16 = keccak256(memory[0x00:0x40]);\n        var temp17 = var0;\n        var temp18 = temp17 + 0x01;\n        memory[0x00:0x20] = temp15 & storage[temp18];\n        memory[0x20:0x40] = temp16;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp15 & storage[temp17];\n        memory[0x20:0x40] = 0x03;\n        var temp19 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp15 & storage[temp18];\n        memory[0x20:0x40] = temp19;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x0d31;\n        var5 = var2;\n        var3 = func_0EFE(var4, var5);\n        var temp20 = var0;\n        var temp21 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp21 & storage[temp20];\n        memory[0x20:0x40] = 0x03;\n        var temp22 = keccak256(memory[0x00:0x40]);\n        var temp23 = temp20 + 0x01;\n        memory[0x00:0x20] = temp21 & storage[temp23];\n        memory[0x20:0x40] = temp22;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp21 & storage[temp20];\n        memory[0x20:0x40] = 0x04;\n        var temp24 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp21 & storage[temp23];\n        memory[0x20:0x40] = temp24;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x0d8e;\n        var5 = arg1;\n        var3 = func_0EEC(var4, var5);\n        var temp25 = var0;\n        var temp26 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp26 & storage[temp25];\n        memory[0x20:0x40] = 0x04;\n        var temp27 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp26 & storage[temp25 + 0x01];\n        memory[0x20:0x40] = temp27;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var4 = storage[temp25 + 0x03];\n        var3 = 0x0dd0;\n        var5 = arg1;\n        var3 = func_0EEC(var4, var5);\n        var temp28 = var3;\n        storage[var0 + 0x03] = temp28;\n    \n        if (temp28) {\n            var temp29 = var0;\n            var temp30 = 0x02 ** 0xa0 - 0x01;\n            var temp31 = memory[0x40:0x60];\n            memory[temp31:temp31 + 0x20] = arg1;\n            var temp32 = temp31 + 0x20;\n            memory[temp32:temp32 + 0x20] = var1;\n            var temp33 = temp32 + 0x20;\n            memory[temp33:temp33 + 0x20] = block.timestamp;\n            var temp34 = memory[0x40:0x60];\n            log(memory[temp34:temp34 + (temp33 + 0x20) - temp34], [0xe6f814da7244d1ae6c61b54b5684858ba39cad7b9a91884be10060664987d754, msg.sender, storage[stack[-3]] & 0x02 ** 0xa0 - 0x01, stack[-5]]);\n            var temp35 = 0x02 ** 0xa0 - 0x01;\n            var temp36 = memory[0x40:0x60];\n            memory[temp36:temp36 + 0x20] = var2;\n            memory[temp36 + 0x20:temp36 + 0x20 + 0x20] = block.timestamp;\n            var temp37 = memory[0x40:0x60];\n            log(memory[temp37:temp37 + (temp36 + 0x40) - temp37], [0xac476a0560d6039841f7de6a83293b862be45e3182ab744e10e048952fe7e4e3, storage[stack[-3]] & 0x02 ** 0xa0 - 0x01, storage[stack[-3] + 0x01] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var temp38 = arg0;\n            var temp39 = memory[0x40:0x60];\n            memory[temp39:temp39 + 0x20] = block.timestamp;\n            var temp40 = memory[0x40:0x60];\n            log(memory[temp40:temp40 + (temp39 + 0x20) - temp40], [0xeb3b41be12efa25c0c65725eeff2e2ad0250e2e5de2aa939e18f36aa656e9880, stack[-5]]);\n            var temp41 = var0;\n            var temp42 = 0x02 ** 0xa0 - 0x01;\n            var temp43 = memory[0x40:0x60];\n            memory[temp43:temp43 + 0x20] = arg1;\n            var temp44 = temp43 + 0x20;\n            memory[temp44:temp44 + 0x20] = var1;\n            var temp45 = temp44 + 0x20;\n            memory[temp45:temp45 + 0x20] = block.timestamp;\n            var temp46 = memory[0x40:0x60];\n            log(memory[temp46:temp46 + (temp45 + 0x20) - temp46], [0xe6f814da7244d1ae6c61b54b5684858ba39cad7b9a91884be10060664987d754, msg.sender, storage[stack[-3]] & 0x02 ** 0xa0 - 0x01, stack[-5]]);\n            var temp47 = 0x02 ** 0xa0 - 0x01;\n            var temp48 = memory[0x40:0x60];\n            memory[temp48:temp48 + 0x20] = var2;\n            memory[temp48 + 0x20:temp48 + 0x20 + 0x20] = block.timestamp;\n            var temp49 = memory[0x40:0x60];\n            log(memory[temp49:temp49 + (temp48 + 0x40) - temp49], [0xac476a0560d6039841f7de6a83293b862be45e3182ab744e10e048952fe7e4e3, storage[stack[-3]] & 0x02 ** 0xa0 - 0x01, storage[stack[-3] + 0x01] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        }\n    }\n    \n    function func_0CCC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0EEC(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0EEC(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0EFE(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0F14(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = !temp0;\n    \n        if (var2) {\n        label_0F30:\n        \n            if (var2) { return var1; }\n            else { assert(); }\n        } else {\n            var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var2 = var4 / var3 == var2;\n            goto label_0F30;\n        }\n    }\n    \n    function func_0F38(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 39.46922826766968,
	"usage": {
		"completion_tokens": 458,
		"prompt_tokens": 11633,
		"total_tokens": 12091
	}
}