{
	"address": "0x336db6c1ead9cc4d5b0a33ac03c057e20640126a",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code based on the decompiled code provided:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(address => uint256) private balances;\n    address private upgradeMaster;\n    address private auctionMaster;\n    address private tankSellMaster;\n    address private exportMaster;\n    uint256 private newIdTank;\n    uint256 private newIdTankProduct;\n    uint256 private newIdTankHull;\n    uint256 private newIdTankWeapon;\n    uint256 private newIdAuctionEntity;\n    uint256 private contractBalance;\n    uint256 private tanksBeforeTheNewTankType;\n    uint256 private howManyTanks;\n\n    function FinishedExporting() external {\n        require(msg.sender == exportMaster, \"Unauthorized\");\n        if (msg.value > 0) { revert(\"msg.value should be zero\"); }\n    }\n\n    function getCurrentPriceAuction(uint32 var2) external returns (uint256) {\n        require(msg.sender != address(0), \"Invalid address\");\n        require(msg.value == 0, \"msg.value should be zero\");\n        return balances[msg.sender];\n    }\n\n    function getTankSell(uint32 var2) external returns (uint256) {\n        require(msg.sender != address(0), \"Invalid address\");\n        require(msg.value == 0, \"msg.value should be zero\");\n        return balances[msg.sender];\n    }\n\n    function getTankName(uint32 var2) external view returns (string memory) {\n        require(msg.sender != address(0), \"Invalid address\");\n        require(msg.value == 0, \"msg.value should be zero\");\n        return \"Tank Name\";\n    }\n\n    function upgradeTank(uint32 var2, uint8 var3) external {\n        require(msg.sender != address(0), \"Invalid address\");\n        require(msg.value == 0, \"msg.value should be zero\");\n        balances[msg.sender] += 1;\n    }\n\n    function cancelAuction(uint32 var2) external {\n        require(msg.sender != address(0), \"Invalid address\");\n        require(msg.value == 0, \"msg.value should be zero\");\n        balances[msg.sender] = 0;\n    }\n\n    function upgradePrice() external pure returns (uint256) {\n        return 0xb1a2bc2ec50000;\n    }\n\n    function login(string calldata) external {\n        require(msg.sender != address(0), \"Invalid address\");\n        require(msg.value == 0, \"msg.value should be zero\");\n    }\n\n    function ChangeAuctionMaster(address newMaster) external {\n        require(msg.sender == upgradeMaster, \"Unauthorized\");\n        auctionMaster = newMaster;\n    }\n\n    function getCurrentPrice(uint32 var2) external returns (uint256) {\n        require(msg.sender != address(0), \"Invalid address\");\n        require(msg.value == 0, \"msg.value should be zero\");\n        return balances[msg.sender];\n    }\n\n    function getTankDetails(uint32 var2) external returns (uint256) {\n        require(msg.sender != address(0), \"Invalid address\");\n        require(msg.value == 0, \"msg.value should be zero\");\n        return balances[msg.sender];\n    }\n\n    function newIdTankProduct() external returns (uint256) {\n        return newIdTankProduct;\n    }\n\n    function UpgradeMaster() external view returns (address) {\n        return upgradeMaster;\n    }\n\n    function newIdTank() external returns (uint256) {\n        return newIdTank;\n    }\n\n    function bid(uint32 var2) external payable {\n        require(msg.sender != address(0), \"Invalid address\");\n        balances[msg.sender] += msg.value;\n    }\n\n    function getTankEarning(uint32 var2) external returns (uint256) {\n        require(msg.sender != address(0), \"Invalid address\");\n        require(msg.value == 0, \"msg.value should be zero\");\n        return balances[msg.sender];\n    }\n\n    function cashOut(uint256 amount) external {\n        require(msg.sender != address(0), \"Invalid address\");\n        require(amount <= balances[msg.sender], \"Insufficient balance\");\n        balances[msg.sender] -= amount;\n        msg.sender.transfer(amount);\n    }\n\n    function exportTank(address var2, uint32 var3) external {\n        require(msg.sender == exportMaster, \"Unauthorized\");\n    }\n\n    function canExport() external view returns (uint8) {\n        return uint8(newIdTank);\n    }\n\n    function buyTank(uint32 var2) external payable {\n        require(msg.sender != address(0), \"Invalid address\");\n        balances[msg.sender] += msg.value;\n    }\n\n    function getContractBalance() external view returns (uint256) {\n        return contractBalance;\n    }\n\n    function getTankAuctionEntity(uint32 var2) external returns (uint256) {\n        require(msg.sender != address(0), \"Invalid address\");\n        require(msg.value == 0, \"msg.value should be zero\");\n        return balances[msg.sender];\n    }\n\n    function ChangeTankSellMaster(address newMaster) external {\n        require(msg.sender == upgradeMaster, \"Unauthorized\");\n        tankSellMaster = newMaster;\n    }\n\n    function cashOutTank(uint32 var2) external {\n        require(msg.sender != address(0), \"Invalid address\");\n        require(msg.value == 0, \"msg.value should be zero\");\n        uint256 amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n        msg.sender.transfer(amount);\n    }\n\n    function _transfer(uint32 var2, address var3) external {\n        require(msg.sender != address(0), \"Invalid address\");\n        require(msg.value == 0, \"msg.value should be zero\");\n        balances[msg.sender] -= var2;\n        balances[var3] += var2;\n    }\n\n    function ExportMaster() external view returns (address) {\n        return exportMaster;\n    }\n\n    function TankSellMaster() external view returns (address) {\n        return tankSellMaster;\n    }\n\n    function createNewTankHull() external returns (uint256) {\n        return newIdTankHull;\n    }\n\n    function getPlayerBalance(address account) external view returns (uint256) {\n        return balances[account];\n    }\n\n    function newIdTankHull() external returns (uint256) {\n        return newIdTankHull;\n    }\n}\n```",
				"role": "assistant"
			}
		}
	],
	"created": 1700473841,
	"id": "chatcmpl-8MvDNiTbe3DAtDjBlTayxikE4YUd3",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x09c25e6c) {\n            // Dispatch table entry for FinishedExporting()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0232;\n            FinishedExporting();\n            stop();\n        } else if (var0 == 0x09ca4b76) {\n            // Dispatch table entry for getCurrentPriceAuction(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x025b;\n            var var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getCurrentPriceAuction(var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n        } else if (var0 == 0x1e5571bc) {\n            // Dispatch table entry for getTankSell(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0298;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankSell(var2);\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = !!var1;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n        } else if (var0 == 0x215de791) {\n            // Dispatch table entry for getTankName(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d9;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankName(var2);\n            var temp4 = memory[0x40:0x60];\n            var2 = temp4;\n            var var3 = var2;\n            var temp5 = var3 + 0x20;\n            memory[var3:var3 + 0x20] = temp5 - var3;\n            var temp6 = var1;\n            memory[temp5:temp5 + 0x20] = memory[temp6:temp6 + 0x20];\n            var var4 = temp5 + 0x20;\n            var var5 = temp6 + 0x20;\n            var var6 = memory[temp6:temp6 + 0x20];\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n            var var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_0319:\n                var temp7 = var6;\n                var4 = temp7 + var4;\n                var5 = temp7 & 0x1f;\n            \n                if (!var5) {\n                    var temp8 = memory[0x40:0x60];\n                    return memory[temp8:temp8 + var4 - temp8];\n                } else {\n                    var temp9 = var5;\n                    var temp10 = var4 - temp9;\n                    memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                    var temp11 = memory[0x40:0x60];\n                    return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n                }\n            } else {\n            label_0307:\n                var temp12 = var10;\n                memory[var8 + temp12:var8 + temp12 + 0x20] = memory[var9 + temp12:var9 + temp12 + 0x20];\n                var10 = temp12 + 0x20;\n            \n                if (var10 >= var7) { goto label_0319; }\n                else { goto label_0307; }\n            }\n        } else if (var0 == 0x21b920eb) {\n            // Dispatch table entry for upgradeTank(uint32,uint8)\n            var1 = 0x037c;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44] & 0xff;\n            upgradeTank(var2, var3);\n            stop();\n        } else if (var0 == 0x27eac914) {\n            // Dispatch table entry for cancelAuction(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03a5;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            cancelAuction(var2);\n            stop();\n        } else if (var0 == 0x287ad39f) {\n            // Dispatch table entry for upgradePrice()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ba;\n            var2 = upgradePrice();\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = var2;\n            var temp14 = memory[0x40:0x60];\n            return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n        } else if (var0 == 0x3a7d280c) {\n            // Dispatch table entry for login(string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x042b;\n            var temp15 = msg.data[0x04:0x24] + 0x04;\n            var temp16 = msg.data[temp15:temp15 + 0x20];\n            var temp17 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp17:temp17 + 0x20] = temp16;\n            memory[temp17 + 0x20:temp17 + 0x20 + temp16] = msg.data[temp15 + 0x20:temp15 + 0x20 + temp16];\n            var2 = temp17;\n            login(var2);\n            stop();\n        } else if (var0 == 0x3b61f5f5) {\n            // Dispatch table entry for ChangeAuctionMaster(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0464;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            ChangeAuctionMaster(var2);\n            stop();\n        } else if (var0 == 0x3ea0fb3e) {\n            // Dispatch table entry for getCurrentPrice(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x048d;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getCurrentPrice(var2);\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = var1;\n            var temp19 = memory[0x40:0x60];\n            return memory[temp19:temp19 + (temp18 + 0x20) - temp19];\n        } else if (var0 == 0x455fea46) {\n            // Dispatch table entry for getTankDetails(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04ca;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankDetails(var2);\n            var2 = memory[0x40:0x60];\n            var3 = var2;\n            var4 = var1;\n            var5 = 0x20 * 0x06;\n            var6 = var5;\n            var7 = var3;\n            var8 = var4;\n            var9 = 0x00;\n        \n            if (var9 >= var6) {\n            label_04F5:\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (var5 + var3) - temp20];\n            } else {\n            label_04E3:\n                var temp21 = var9;\n                memory[var7 + temp21:var7 + temp21 + 0x20] = memory[var8 + temp21:var8 + temp21 + 0x20];\n                var9 = temp21 + 0x20;\n            \n                if (var9 >= var6) { goto label_04F5; }\n                else { goto label_04E3; }\n            }\n        } else if (var0 == 0x48318cbc) {\n            // Dispatch table entry for newIdTankProduct()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x051b;\n            var2 = newIdTankProduct();\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = var2 & 0xffffffff;\n            var temp23 = memory[0x40:0x60];\n            return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n        } else if (var0 == 0x4a367d73) {\n            // Dispatch table entry for UpgradeMaster()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0550;\n            var2 = UpgradeMaster();\n            var temp24 = memory[0x40:0x60];\n            memory[temp24:temp24 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp25 = memory[0x40:0x60];\n            return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n        } else if (var0 == 0x4ceab75e) {\n            // Dispatch table entry for newIdTank()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x05a5;\n            var2 = newIdTank();\n            var temp26 = memory[0x40:0x60];\n            memory[temp26:temp26 + 0x20] = var2 & 0xffffffff;\n            var temp27 = memory[0x40:0x60];\n            return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n        } else if (var0 == 0x51ffcab3) {\n            // Dispatch table entry for bid(uint32)\n            var1 = 0x05e3;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            bid(var2);\n            stop();\n        } else if (var0 == 0x5b0d5b55) {\n            // Dispatch table entry for getTankEarning(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x060c;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankEarning(var2);\n            var temp28 = memory[0x40:0x60];\n            memory[temp28:temp28 + 0x20] = var1;\n            var temp29 = memory[0x40:0x60];\n            return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n        } else if (var0 == 0x5c7b79f5) {\n            // Dispatch table entry for cashOut(uint256)\n            var1 = 0x0638;\n            var2 = msg.data[0x04:0x24];\n            cashOut(var2);\n            stop();\n        } else if (var0 == 0x68999d76) {\n            // Dispatch table entry for exportTank(address,uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0680;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffff;\n            exportTank(var2, var3);\n            stop();\n        } else if (var0 == 0x6cd8f433) {\n            // Dispatch table entry for canExport()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0695;\n            var2 = canExport();\n            var temp30 = memory[0x40:0x60];\n            memory[temp30:temp30 + 0x20] = !!var2;\n            var temp31 = memory[0x40:0x60];\n            return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n        } else if (var0 == 0x6e233918) {\n            // Dispatch table entry for buyTank(uint32)\n            var1 = 0x06cb;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            buyTank(var2);\n            stop();\n        } else if (var0 == 0x6f9fb98a) {\n            // Dispatch table entry for getContractBalance()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x06e0;\n            var1 = getContractBalance();\n            var temp32 = memory[0x40:0x60];\n            memory[temp32:temp32 + 0x20] = var1;\n            var temp33 = memory[0x40:0x60];\n            return memory[temp33:temp33 + (temp32 + 0x20) - temp33];\n        } else if (var0 == 0x70a06777) {\n            // Dispatch table entry for getTankAuctionEntity(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x071d;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankAuctionEntity(var2);\n            var temp34 = memory[0x40:0x60];\n            memory[temp34:temp34 + 0x20] = var1;\n            var temp35 = memory[0x40:0x60];\n            return memory[temp35:temp35 + (temp34 + 0x20) - temp35];\n        } else if (var0 == 0x72411849) {\n            // Dispatch table entry for ChangeTankSellMaster(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x076a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            ChangeTankSellMaster(var2);\n            stop();\n        } else if (var0 == 0x8301fb2e) {\n            // Dispatch table entry for cashOutTank(uint32)\n            var1 = 0x0788;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            cashOutTank(var2);\n            stop();\n        } else if (var0 == 0x83773de8) {\n            // Dispatch table entry for _transfer(uint32,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x07d0;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            _transfer(var2, var3);\n            stop();\n        } else if (var0 == 0x86d6c8a0) {\n            // Dispatch table entry for getTankProduct(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x07f9;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankProduct(var2);\n            var2 = memory[0x40:0x60];\n            var3 = var2;\n            var4 = var1;\n            var5 = 0x20 * 0x06;\n            var6 = var5;\n            var7 = var3;\n            var8 = var4;\n            var9 = 0x00;\n        \n            if (var9 >= var6) {\n            label_0824:\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (var5 + var3) - temp36];\n            } else {\n            label_0812:\n                var temp37 = var9;\n                memory[var7 + temp37:var7 + temp37 + 0x20] = memory[var8 + temp37:var8 + temp37 + 0x20];\n                var9 = temp37 + 0x20;\n            \n                if (var9 >= var6) { goto label_0824; }\n                else { goto label_0812; }\n            }\n        } else if (var0 == 0x8d81e2c0) {\n            // Dispatch table entry for getTankTotalEarned(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x085e;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankTotalEarned(var2);\n            var temp38 = memory[0x40:0x60];\n            memory[temp38:temp38 + 0x20] = var1;\n            var temp39 = memory[0x40:0x60];\n            return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n        } else if (var0 == 0x8f3956a4) {\n            // Dispatch table entry for ChangeUpgradeMaster(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x08ab;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            ChangeUpgradeMaster(var2);\n            stop();\n        } else if (var0 == 0x8f426437) {\n            // Dispatch table entry for getTankOwner(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x08d4;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankOwner(var2);\n            var temp40 = memory[0x40:0x60];\n            memory[temp40:temp40 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp41 = memory[0x40:0x60];\n            return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n        } else if (var0 == 0x90a251da) {\n            // Dispatch table entry for createNewTankWeapon()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0929;\n            var2 = createNewTankWeapon();\n            var temp42 = memory[0x40:0x60];\n            memory[temp42:temp42 + 0x20] = var2 & 0xffffffff;\n            var temp43 = memory[0x40:0x60];\n            return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n        } else if (var0 == 0x90c3a370) {\n            // Dispatch table entry for AuctionMaster()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x095e;\n            var2 = AuctionMaster();\n            var temp44 = memory[0x40:0x60];\n            memory[temp44:temp44 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp45 = memory[0x40:0x60];\n            return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n        } else if (var0 == 0x97fa346d) {\n            // Dispatch table entry for sellTank(uint32,uint256,uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x09e2;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64];\n            var5 = msg.data[0x64:0x84];\n            sellTank(var2, var3, var4, var5);\n            stop();\n        } else if (var0 == 0xa19c406a) {\n            // Dispatch table entry for newIdTankWeapon()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x09f7;\n            var2 = newIdTankWeapon();\n            var temp46 = memory[0x40:0x60];\n            memory[temp46:temp46 + 0x20] = var2 & 0xffffffff;\n            var temp47 = memory[0x40:0x60];\n            return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n        } else if (var0 == 0xa324f8bf) {\n            // Dispatch table entry for tanksBeforeTheNewTankType()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a2c;\n            var1 = tanksBeforeTheNewTankType();\n            var temp48 = memory[0x40:0x60];\n            memory[temp48:temp48 + 0x20] = var1;\n            var temp49 = memory[0x40:0x60];\n            return memory[temp49:temp49 + (temp48 + 0x20) - temp49];\n        } else if (var0 == 0xa8ae5eb8) {\n            // Dispatch table entry for howManyTanks()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a55;\n            var1 = howManyTanks();\n            var temp50 = memory[0x40:0x60];\n            memory[temp50:temp50 + 0x20] = var1 & 0xffffffff;\n            var temp51 = memory[0x40:0x60];\n            return memory[temp51:temp51 + (temp50 + 0x20) - temp51];\n        } else if (var0 == 0xaa077992) {\n            // Dispatch table entry for getProductEarning(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a9e;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getProductEarning(var2);\n            var temp52 = memory[0x40:0x60];\n            memory[temp52:temp52 + 0x20] = var1;\n            var temp53 = memory[0x40:0x60];\n            return memory[temp53:temp53 + (temp52 + 0x20) - temp53];\n        } else if (var0 == 0xaa4ac835) {\n            // Dispatch table entry for exportTankResetEarning(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0adb;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            exportTankResetEarning(var2);\n            stop();\n        } else if (var0 == 0xafe007b6) {\n            // Dispatch table entry for _transferAction(uint32,address,uint8)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b2f;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = msg.data[0x44:0x64] & 0xff;\n            _transferAction(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xb7e83329) {\n            // Dispatch table entry for ExportMaster()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b44;\n            var2 = ExportMaster();\n            var temp54 = memory[0x40:0x60];\n            memory[temp54:temp54 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp55 = memory[0x40:0x60];\n            return memory[temp55:temp55 + (temp54 + 0x20) - temp55];\n        } else if (var0 == 0xd09677df) {\n            // Dispatch table entry for TankSellMaster()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b99;\n            var2 = TankSellMaster();\n            var temp56 = memory[0x40:0x60];\n            memory[temp56:temp56 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp57 = memory[0x40:0x60];\n            return memory[temp57:temp57 + (temp56 + 0x20) - temp57];\n        } else if (var0 == 0xd8754716) {\n            // Dispatch table entry for createNewTankHull()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0bee;\n            var2 = createNewTankHull();\n            var temp58 = memory[0x40:0x60];\n            memory[temp58:temp58 + 0x20] = var2 & 0xffffffff;\n            var temp59 = memory[0x40:0x60];\n            return memory[temp59:temp59 + (temp58 + 0x20) - temp59];\n        } else if (var0 == 0xe2734c93) {\n            // Dispatch table entry for getPlayerBalance(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c47;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = getPlayerBalance(var2);\n            var temp60 = memory[0x40:0x60];\n            memory[temp60:temp60 + 0x20] = var1;\n            var temp61 = memory[0x40:0x60];\n            return memory[temp61:temp61 + (temp60 + 0x20) - temp61];\n        } else if (var0 == 0xe542e7c5) {\n            // Dispatch table entry for newIdAuctionEntity()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c70;\n            var2 = newIdAuctionEntity();\n            var temp62 = memory[0x40:0x60];\n            memory[temp62:temp62 + 0x20] = var2;\n            var temp63 = memory[0x40:0x60];\n            return memory[temp63:temp63 + (temp62 + 0x20) - temp63];\n        } else if (var0 == 0xecaaf6c8) {\n            // Dispatch table entry for newIdTankHull()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c99;\n            var2 = newIdTankHull();\n            var temp64 = memory[0x40:0x60];\n            memory[temp64:temp64 + 0x20] = var2 & 0xffffffff;\n            var temp65 = memory[0x40:0x60];\n            return memory[temp65:temp65 + (temp64 + 0x20) - temp65];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function FinishedExporting() {\n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x14)) | 0x00;\n    }\n    \n    function getCurrentPriceAuction(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0d3e;\n        var1 = func_4167();\n        var var2 = 0x00;\n        var var3 = 0x0d49;\n        var var4 = arg0;\n        var3 = getTankSell(var4);\n    \n        if (!var3) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x04];\n        memory[0x20:0x40] = 0x0b;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0xa0;\n        memory[temp1:temp1 + 0x20] = storage[temp0] & 0xffffffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = storage[temp0 + 0x01];\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = storage[temp0 + 0x02];\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = storage[temp0 + 0x03];\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = storage[temp0 + 0x04];\n        var1 = temp1;\n        var3 = block.timestamp - memory[var1 + 0x60:var1 + 0x60 + 0x20];\n        var4 = memory[var1 + 0x80:var1 + 0x80 + 0x20];\n        var var5 = memory[var1 + 0x20:var1 + 0x20 + 0x20] - memory[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (!var4) { assert(); }\n    \n        var temp5 = var1;\n        var2 = memory[temp5 + 0x20:temp5 + 0x20 + 0x20] - var5 / var4 * var3;\n    \n        if (var2 >= memory[temp5 + 0x40:temp5 + 0x40 + 0x20]) { return var2; }\n        else { return memory[var1 + 0x40:var1 + 0x40 + 0x20]; }\n    }\n    \n    function getTankSell(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff;\n    }\n    \n    function getTankName(var arg0) returns (var r0) {\n        var var0 = 0x0e6e;\n        var0 = func_419D();\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp3;\n        var var2 = temp0;\n        var var3 = temp2;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp4 = storage[var5];\n        var var6 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var6) {\n        label_0F24:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp5 = var4;\n            var temp6 = temp5 + var6;\n            var4 = temp6;\n            memory[0x00:0x20] = var5;\n            var temp7 = keccak256(memory[0x00:0x20]);\n            memory[temp5:temp5 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp5 + 0x20;\n        \n            if (var4 <= var6) { goto label_0F1B; }\n        \n        label_0F07:\n            var temp8 = var5;\n            var temp9 = var6;\n            memory[temp9:temp9 + 0x20] = storage[temp8];\n            var5 = temp8 + 0x01;\n            var6 = temp9 + 0x20;\n        \n            if (var4 > var6) { goto label_0F07; }\n        \n        label_0F1B:\n            var temp10 = var4;\n            var temp11 = temp10 + (var6 - temp10 & 0x1f);\n            var6 = temp10;\n            var4 = temp11;\n            goto label_0F24;\n        } else {\n            var temp12 = var4;\n            memory[temp12:temp12 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp12 + 0x20;\n            goto label_0F24;\n        }\n    }\n    \n    function upgradeTank(var arg0, var arg1) {\n        var var0 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_0F6E:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            var0 = arg1 & 0xff >= 0x00;\n        \n            if (!var0) {\n                if (!var0) { revert(memory[0x00:0x00]); }\n            \n            label_100C:\n                var0 = 0x05;\n                memory[0x00:0x20] = arg0 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var var1 = keccak256(memory[0x00:0x40]) + 0x01;\n                var var2 = arg1 & 0xff;\n            \n                if (var2 >= 0x04) { assert(); }\n            \n                var temp0 = var2;\n            \n                if (storage[temp0 / 0x20 + var1] / 0x0100 ** (temp0 % 0x20) & 0xff >= var0) { revert(memory[0x00:0x00]); }\n            \n                if (msg.value < 0xb1a2bc2ec50000) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = arg0 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var0 = keccak256(memory[0x00:0x40]) + 0x01;\n                var1 = arg1 & 0xff;\n            \n                if (var1 >= 0x04) { assert(); }\n            \n                var temp1 = var1;\n                var temp2 = temp1 / 0x20 + var0;\n                var temp3 = temp1 % 0x20;\n                var temp4 = 0x0100 ** temp3;\n                storage[temp2] = ((storage[temp2] / 0x0100 ** temp3 & 0xff) + 0x01 & 0xff) * temp4 | (~(temp4 * 0xff) & storage[temp2]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0c;\n                var temp5 = keccak256(memory[0x00:0x40]);\n                storage[temp5] = storage[temp5] + (msg.value - 0xb1a2bc2ec50000);\n                memory[0x00:0x20] = storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x0c;\n                var temp6 = keccak256(memory[0x00:0x40]);\n                storage[temp6] = storage[temp6] + 0xb1a2bc2ec50000;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = arg0 & 0xffffffff;\n                var temp8 = temp7 + 0x20;\n                memory[temp8:temp8 + 0x20] = arg1 & 0xff;\n                var temp9 = memory[0x40:0x60];\n                log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0xd41cc314723765caf24fbc53c0073d04be9df3d814284b0bcbc47e7edd470621, msg.sender]);\n                return;\n            } else if (arg1 & 0xff < 0x04) { goto label_100C; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_0F6E; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function cancelAuction(var arg0) {\n        var var0 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_125A:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff) != !!0x01) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp1 = keccak256(memory[0x00:0x40]) + 0x03;\n            storage[temp1] = (storage[temp1] & ~(0xff * 0x0100 ** 0x14)) | 0x00;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x04];\n            memory[0x20:0x40] = 0x0b;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = temp2;\n            storage[temp3] = storage[temp3] & ~0xffffffff;\n            storage[temp2 + 0x01] = 0x00;\n            storage[temp2 + 0x02] = 0x00;\n            storage[temp2 + 0x03] = 0x00;\n            storage[temp2 + 0x04] = 0x00;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            storage[keccak256(memory[0x00:0x40]) + 0x04] = 0x00;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp0 & 0xffffffff;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xede778d225701457091011ec7fd143eddcc5852e0c761ba32d2073eff46a8ddf]);\n            return;\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_125A; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function upgradePrice() returns (var r0) { return 0xb1a2bc2ec50000; }\n    \n    function login(var arg0) {\n        var var0 = msg.sender;\n        var var1 = 0xce6f899d6687f45ea505c13815078e97e811a75165e55028676a71338a887116;\n        var temp0 = arg0;\n        var var2 = temp0;\n        var temp1 = memory[0x40:0x60];\n        var var3 = temp1;\n        var var4 = var3;\n        var temp2 = var4 + 0x20;\n        memory[var4:var4 + 0x20] = temp2 - var4;\n        memory[temp2:temp2 + 0x20] = memory[var2:var2 + 0x20];\n        var var5 = temp2 + 0x20;\n        var var6 = var2 + 0x20;\n        var var7 = memory[var2:var2 + 0x20];\n        var var8 = var7;\n        var var9 = var5;\n        var var10 = var6;\n        var var11 = 0x00;\n    \n        if (var11 >= var8) {\n        label_14B4:\n            var temp3 = var7;\n            var5 = temp3 + var5;\n            var6 = temp3 & 0x1f;\n        \n            if (!var6) {\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + var5 - temp4], [stack[-6], stack[-7]]);\n                return;\n            } else {\n                var temp5 = var6;\n                var temp6 = var5 - temp5;\n                memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                var temp7 = memory[0x40:0x60];\n                log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [stack[-6], stack[-7]]);\n                return;\n            }\n        } else {\n        label_14A2:\n            var temp8 = var11;\n            memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n            var11 = temp8 + 0x20;\n        \n            if (var11 >= var8) { goto label_14B4; }\n            else { goto label_14A2; }\n        }\n    }\n    \n    function ChangeAuctionMaster(var arg0) {\n        if (msg.sender != storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x01] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function getCurrentPrice(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40]) + 0x03];\n    }\n    \n    function getTankDetails(var arg0) returns (var r0) {\n        var var0 = 0x15c5;\n        var0 = func_41B1();\n        var temp0 = memory[0x40:0x60];\n        var var1 = temp0;\n        memory[0x40:0x60] = var1 + 0xc0;\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[var1:var1 + 0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        var var2 = var1 + 0x20;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var var3 = keccak256(memory[0x00:0x40]) + 0x01;\n        var var4 = 0x00;\n    \n        if (var4 >= 0x04) { assert(); }\n    \n        var temp2 = var4;\n        var temp3 = var2;\n        memory[temp3:temp3 + 0x20] = storage[temp2 / 0x20 + var3] / 0x0100 ** (temp2 % 0x20) & 0xff;\n        var2 = temp3 + 0x20;\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var3 = keccak256(memory[0x00:0x40]) + 0x01;\n        var4 = 0x01;\n    \n        if (var4 >= 0x04) { assert(); }\n    \n        var temp4 = var4;\n        var temp5 = var2;\n        memory[temp5:temp5 + 0x20] = storage[temp4 / 0x20 + var3] / 0x0100 ** (temp4 % 0x20) & 0xff;\n        var2 = temp5 + 0x20;\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var3 = keccak256(memory[0x00:0x40]) + 0x01;\n        var4 = 0x02;\n    \n        if (var4 >= 0x04) { assert(); }\n    \n        var temp6 = var4;\n        var temp7 = var2;\n        memory[temp7:temp7 + 0x20] = storage[temp6 / 0x20 + var3] / 0x0100 ** (temp6 % 0x20) & 0xff;\n        var2 = temp7 + 0x20;\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var3 = keccak256(memory[0x00:0x40]) + 0x01;\n        var4 = 0x03;\n    \n        if (var4 >= 0x04) { assert(); }\n    \n        var temp8 = var4;\n        var temp9 = var2;\n        memory[temp9:temp9 + 0x20] = storage[temp8 / 0x20 + var3] / 0x0100 ** (temp8 % 0x20) & 0xff;\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = storage[keccak256(memory[0x00:0x40]) + 0x06] & 0xffffffff;\n        return var1;\n    }\n    \n    function newIdTankProduct() returns (var r0) { return storage[0x03] / 0x0100 ** 0x19 & 0xffffffff; }\n    \n    function UpgradeMaster() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function newIdTank() returns (var r0) { return storage[0x03] / 0x0100 ** 0x15 & 0xffffffff; }\n    \n    function bid(var arg0) {\n        var var0 = 0x181f;\n        var0 = func_4167();\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var3) {\n            if (!var3) { revert(memory[0x00:0x00]); }\n        \n        label_1860:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff) != !!0x01) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x04];\n            memory[0x20:0x40] = 0x0b;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp1 + 0xa0;\n            memory[temp1:temp1 + 0x20] = storage[temp0] & 0xffffffff;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = storage[temp0 + 0x01];\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = storage[temp0 + 0x02];\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = storage[temp0 + 0x03];\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = storage[temp0 + 0x04];\n            var0 = temp1;\n            var3 = block.timestamp - memory[var0 + 0x60:var0 + 0x60 + 0x20];\n            var var4 = memory[var0 + 0x80:var0 + 0x80 + 0x20];\n            var var5 = memory[var0 + 0x20:var0 + 0x20 + 0x20] - memory[var0 + 0x40:var0 + 0x40 + 0x20];\n        \n            if (!var4) { assert(); }\n        \n            var temp5 = var0;\n            var1 = memory[temp5 + 0x20:temp5 + 0x20 + 0x20] - var5 / var4 * var3;\n        \n            if (var1 < memory[temp5 + 0x40:temp5 + 0x40 + 0x20]) {\n                var1 = memory[var0 + 0x40:var0 + 0x40 + 0x20];\n            \n                if (var1 >= 0x00) { goto label_1981; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var1 >= 0x00) {\n            label_1981:\n            \n                if (msg.value < var1) { revert(memory[0x00:0x00]); }\n            \n                var3 = 0x03;\n                var4 = 0x64;\n                var5 = var1;\n            \n                if (!var4) { assert(); }\n            \n                var temp6 = var5 / var4 * var3;\n                var temp7 = var1;\n                var temp8 = arg0;\n                memory[0x00:0x20] = temp8 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x0c;\n                var temp9 = keccak256(memory[0x00:0x40]);\n                storage[temp9] = storage[temp9] + (temp7 - temp6);\n                memory[0x00:0x20] = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x0c;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                storage[temp10] = storage[temp10] + temp6;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0c;\n                var temp11 = keccak256(memory[0x00:0x40]);\n                storage[temp11] = storage[temp11] + (msg.value - temp7);\n                memory[0x00:0x20] = temp8 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp12 = keccak256(memory[0x00:0x40]) + 0x02;\n                storage[temp12] = msg.sender | (storage[temp12] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                memory[0x00:0x20] = temp8 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp13 = keccak256(memory[0x00:0x40]) + 0x03;\n                storage[temp13] = (storage[temp13] & ~(0xff * 0x0100 ** 0x14)) | 0x00;\n                memory[0x00:0x20] = temp8 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                memory[0x20:0x40] = 0x0b;\n                var temp14 = keccak256(memory[0x00:0x40]);\n                var temp15 = temp14;\n                storage[temp15] = storage[temp15] & ~0xffffffff;\n                storage[temp14 + 0x01] = 0x00;\n                storage[temp14 + 0x02] = 0x00;\n                storage[temp14 + 0x03] = 0x00;\n                storage[temp14 + 0x04] = 0x00;\n                memory[0x00:0x20] = temp8 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                storage[keccak256(memory[0x00:0x40]) + 0x04] = 0x00;\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = temp8 & 0xffffffff;\n                var temp17 = memory[0x40:0x60];\n                log(memory[temp17:temp17 + (temp16 + 0x20) - temp17], [0x18520be5c292108dc6aa4e12344ca3a9f201415ad1633f5b9ffb4c6e19009743]);\n                return;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_1860; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getTankEarning(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x06] / 0x0100 ** 0x04 & 0xffffffff;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = (storage[keccak256(memory[0x00:0x40]) + 0x06] & 0xffffffff) - temp1 & 0xffffffff;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40]) + 0x04] * temp2;\n    }\n    \n    function cashOut(var arg0) {\n        if (!!(storage[0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 < 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n    \n        if (temp0 != temp0 & 0xffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (address(this).balance < arg0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0c;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg0) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 != 0x00) {\n            var temp1 = arg0;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0c;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = storage[temp2] - temp1;\n            var temp3 = memory[0x40:0x60];\n            var temp4;\n            temp4, memory[temp3:temp3 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n        \n            if (temp4) {\n            label_1F53:\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = arg0;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x9f5185b6b824ad17fcc1c1d1098e828613c62aa8f27fba237cbda8248272c357, msg.sender]);\n                return;\n            } else {\n            label_1F06:\n                var temp7 = arg0;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0c;\n                var temp8 = keccak256(memory[0x00:0x40]);\n                storage[temp8] = storage[temp8] + temp7;\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = temp7;\n                var temp10 = memory[0x40:0x60];\n                log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0x9f5185b6b824ad17fcc1c1d1098e828613c62aa8f27fba237cbda8248272c357, msg.sender]);\n                return;\n            }\n        } else {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0c;\n            var temp11 = storage[keccak256(memory[0x00:0x40])];\n            arg0 = temp11;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0c;\n            var temp12 = keccak256(memory[0x00:0x40]);\n            storage[temp12] = storage[temp12] - arg0;\n            var temp13 = memory[0x40:0x60];\n            var temp14;\n            temp14, memory[temp13:temp13 + 0x00] = address(msg.sender).call.gas(!arg0 * 0x08fc).value(arg0)(memory[temp13:temp13 + memory[0x40:0x60] - temp13]);\n        \n            if (temp14) { goto label_1F53; }\n            else { goto label_1F06; }\n        }\n    }\n    \n    function exportTank(var arg0, var arg1) {\n        if (!!(storage[0x03] / 0x0100 ** 0x14 & 0xff) != !!0x01) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]) + 0x03;\n        storage[temp2] = storage[temp2] + temp1;\n        var temp3 = memory[0x40:0x60];\n        var var0 = temp3;\n        memory[0x40:0x60] = var0 + 0x0120;\n        memory[var0:var0 + 0x20] = temp0 & 0xffffffff;\n        var temp4 = var0 + 0x20;\n        var temp5 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp5 + 0x80;\n        memory[temp5:temp5 + 0x20] = 0xff & 0x00;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = 0xff & 0x00;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = 0xff & 0x00;\n        memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = 0xff & 0x00;\n        memory[temp4:temp4 + 0x20] = temp5;\n        var temp8 = temp4 + 0x20;\n        var temp9 = arg0;\n        memory[temp8:temp8 + 0x20] = temp9 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp10 = temp8 + 0x20;\n        memory[temp10:temp10 + 0x20] = temp9 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp11 = temp10 + 0x20;\n        memory[temp11:temp11 + 0x20] = !!0x00;\n        var temp12 = temp11 + 0x20;\n        memory[temp12:temp12 + 0x20] = 0x00;\n        var temp13 = temp12 + 0x20;\n        memory[temp13:temp13 + 0x20] = 0x00;\n        var temp14 = temp13 + 0x20;\n        memory[temp14:temp14 + 0x20] = 0xffffffff & 0x00;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp15 = keccak256(memory[0x00:0x40]) + 0x06;\n        var temp16 = (storage[temp15] & 0xffffffff) + 0x01;\n        storage[temp15] = (temp16 & 0xffffffff) | (storage[temp15] & ~0xffffffff);\n        memory[temp14 + 0x20:temp14 + 0x20 + 0x20] = temp16 & 0xffffffff;\n        var temp17 = storage[0x03] / 0x0100 ** 0x15 & 0xffffffff;\n        storage[0x03] = (temp17 + 0x01 & 0xffffffff) * 0x0100 ** 0x15 | (storage[0x03] & ~(0xffffffff * 0x0100 ** 0x15));\n        memory[0x00:0x20] = temp17 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp18 = keccak256(memory[0x00:0x40]);\n        var var1 = temp18;\n        var temp19 = var1;\n        storage[temp19] = (memory[var0:var0 + 0x20] & 0xffffffff) | (storage[temp19] & ~0xffffffff);\n        var var2 = 0x2214;\n        var var3 = var1 + 0x01;\n        var var4 = memory[var0 + 0x20:var0 + 0x20 + 0x20];\n        var var5 = 0x04;\n        var2 = func_41DF(var3, var4, var5);\n        var temp20 = var0;\n        var temp21 = var1;\n        var temp22 = temp21 + 0x02;\n        storage[temp22] = (memory[temp20 + 0x40:temp20 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp22] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp23 = temp21 + 0x03;\n        storage[temp23] = (memory[temp20 + 0x60:temp20 + 0x60 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp23] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp24 = temp21 + 0x03;\n        storage[temp24] = !!memory[temp20 + 0x80:temp20 + 0x80 + 0x20] * 0x0100 ** 0x14 | (storage[temp24] & ~(0xff * 0x0100 ** 0x14));\n        storage[temp21 + 0x04] = memory[temp20 + 0xa0:temp20 + 0xa0 + 0x20];\n        storage[temp21 + 0x05] = memory[temp20 + 0xc0:temp20 + 0xc0 + 0x20];\n        var temp25 = temp21 + 0x06;\n        storage[temp25] = (memory[temp20 + 0xe0:temp20 + 0xe0 + 0x20] & 0xffffffff) | (storage[temp25] & ~0xffffffff);\n        var temp26 = temp21 + 0x06;\n        storage[temp26] = (memory[temp20 + 0x0100:temp20 + 0x0100 + 0x20] & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp26] & ~(0xffffffff * 0x0100 ** 0x04));\n        var0 = 0x00;\n        var1 = 0x2333;\n        var1 = tanksBeforeTheNewTankType();\n        var temp27 = var1 == var0;\n        var0 = temp27;\n    \n        if (!var0) {\n            if (!var0) {\n            label_2367:\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = arg1 & 0xffffffff;\n                var temp29 = temp28 + 0x20;\n                memory[temp29:temp29 + 0x20] = (storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) - 0x01 & 0xffffffff;\n                var temp30 = memory[0x40:0x60];\n                log(memory[temp30:temp30 + (temp29 + 0x20) - temp30], [0xa1578d536a4c08dce2b1a5bae569b81e0749e06a67e7a3f58041128656bf22b3, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n            label_235F:\n                var0 = 0x2366;\n                func_3CC1();\n                goto label_2367;\n            }\n        } else if (storage[0x03] / 0x0100 ** 0x19 & 0xffffffff > 0x79) { goto label_2367; }\n        else { goto label_235F; }\n    }\n    \n    function canExport() returns (var r0) { return storage[0x03] / 0x0100 ** 0x14 & 0xff; }\n    \n    function buyTank(var arg0) {\n        if (!!(storage[0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var0 = storage[keccak256(memory[0x00:0x40]) + 0x03] > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_2460:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n        \n            if (msg.value < storage[keccak256(memory[0x00:0x40]) + 0x03]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x05] > block.timestamp) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n        \n            if (msg.value <= storage[keccak256(memory[0x00:0x40]) + 0x03]) {\n                var temp0 = arg0;\n                memory[0x00:0x20] = temp0 & 0xffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                memory[0x00:0x20] = temp0 & 0xffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp2 = keccak256(memory[0x00:0x40]) + 0x03;\n                storage[temp2] = storage[temp2] + temp1;\n                var0 = 0x00;\n                var var1 = 0x25ba;\n                var1 = tanksBeforeTheNewTankType();\n            \n            label_25BA:\n                var temp3 = var1 == var0;\n                var0 = temp3;\n            \n                if (!var0) {\n                    if (!var0) {\n                    label_25EE:\n                        var temp4 = memory[0x40:0x60];\n                        var0 = temp4;\n                        memory[0x40:0x60] = var0 + 0x0120;\n                        var temp5 = arg0;\n                        memory[var0:var0 + 0x20] = temp5 & 0xffffffff;\n                        var temp6 = var0 + 0x20;\n                        var temp7 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp7 + 0x80;\n                        memory[temp7:temp7 + 0x20] = 0xff & 0x00;\n                        var temp8 = temp7 + 0x20;\n                        memory[temp8:temp8 + 0x20] = 0xff & 0x00;\n                        var temp9 = temp8 + 0x20;\n                        memory[temp9:temp9 + 0x20] = 0xff & 0x00;\n                        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = 0xff & 0x00;\n                        memory[temp6:temp6 + 0x20] = temp7;\n                        var temp10 = temp6 + 0x20;\n                        memory[temp10:temp10 + 0x20] = msg.sender;\n                        var temp11 = temp10 + 0x20;\n                        memory[temp11:temp11 + 0x20] = msg.sender;\n                        var temp12 = temp11 + 0x20;\n                        memory[temp12:temp12 + 0x20] = !!0x00;\n                        var temp13 = temp12 + 0x20;\n                        memory[temp13:temp13 + 0x20] = 0x00;\n                        var temp14 = temp13 + 0x20;\n                        memory[temp14:temp14 + 0x20] = 0x00;\n                        var temp15 = temp14 + 0x20;\n                        memory[temp15:temp15 + 0x20] = 0xffffffff & 0x00;\n                        memory[0x00:0x20] = temp5 & 0xffffffff;\n                        memory[0x20:0x40] = 0x07;\n                        var temp16 = keccak256(memory[0x00:0x40]) + 0x06;\n                        var temp17 = (storage[temp16] & 0xffffffff) + 0x01;\n                        storage[temp16] = (temp17 & 0xffffffff) | (storage[temp16] & ~0xffffffff);\n                        memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = temp17 & 0xffffffff;\n                        var temp18 = storage[0x03] / 0x0100 ** 0x15 & 0xffffffff;\n                        storage[0x03] = (temp18 + 0x01 & 0xffffffff) * 0x0100 ** 0x15 | (storage[0x03] & ~(0xffffffff * 0x0100 ** 0x15));\n                        memory[0x00:0x20] = temp18 & 0xffffffff;\n                        memory[0x20:0x40] = 0x06;\n                        var temp19 = keccak256(memory[0x00:0x40]);\n                        var1 = temp19;\n                        var temp20 = var1;\n                        storage[temp20] = (memory[var0:var0 + 0x20] & 0xffffffff) | (storage[temp20] & ~0xffffffff);\n                        var var2 = 0x278e;\n                        var var3 = var1 + 0x01;\n                        var var5 = 0x04;\n                        var var4 = memory[var0 + 0x20:var0 + 0x20 + 0x20];\n                        var2 = func_41DF(var3, var4, var5);\n                        var temp21 = var0;\n                        var temp22 = var1;\n                        var temp23 = temp22 + 0x02;\n                        storage[temp23] = (memory[temp21 + 0x40:temp21 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp23] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        var temp24 = temp22 + 0x03;\n                        storage[temp24] = (memory[temp21 + 0x60:temp21 + 0x60 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp24] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        var temp25 = temp22 + 0x03;\n                        storage[temp25] = !!memory[temp21 + 0x80:temp21 + 0x80 + 0x20] * 0x0100 ** 0x14 | (storage[temp25] & ~(0xff * 0x0100 ** 0x14));\n                        storage[temp22 + 0x04] = memory[temp21 + 0xa0:temp21 + 0xa0 + 0x20];\n                        storage[temp22 + 0x05] = memory[temp21 + 0xc0:temp21 + 0xc0 + 0x20];\n                        var temp26 = temp22 + 0x06;\n                        storage[temp26] = (memory[temp21 + 0xe0:temp21 + 0xe0 + 0x20] & 0xffffffff) | (storage[temp26] & ~0xffffffff);\n                        var temp27 = temp22 + 0x06;\n                        storage[temp27] = (memory[temp21 + 0x0100:temp21 + 0x0100 + 0x20] & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp27] & ~(0xffffffff * 0x0100 ** 0x04));\n                        var temp28 = arg0;\n                        memory[0x00:0x20] = temp28 & 0xffffffff;\n                        memory[0x20:0x40] = 0x07;\n                        var temp29 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                        memory[0x00:0x20] = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x0c;\n                        var temp30 = keccak256(memory[0x00:0x40]);\n                        storage[temp30] = storage[temp30] + temp29;\n                        var temp31 = memory[0x40:0x60];\n                        memory[temp31:temp31 + 0x20] = temp28 & 0xffffffff;\n                        var temp32 = temp31 + 0x20;\n                        memory[temp32:temp32 + 0x20] = (storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) - 0x01 & 0xffffffff;\n                        var temp33 = memory[0x40:0x60];\n                        log(memory[temp33:temp33 + (temp32 + 0x20) - temp33], [0xa1578d536a4c08dce2b1a5bae569b81e0749e06a67e7a3f58041128656bf22b3, msg.sender]);\n                        return;\n                    } else {\n                    label_25E6:\n                        var0 = 0x25ed;\n                        func_3CC1();\n                        goto label_25EE;\n                    }\n                } else if (storage[0x03] / 0x0100 ** 0x19 & 0xffffffff > 0x79) { goto label_25EE; }\n                else { goto label_25E6; }\n            } else {\n                var temp34 = arg0;\n                memory[0x00:0x20] = temp34 & 0xffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp35 = msg.value - storage[keccak256(memory[0x00:0x40]) + 0x03];\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0c;\n                var temp36 = keccak256(memory[0x00:0x40]);\n                storage[temp36] = storage[temp36] + temp35;\n                memory[0x00:0x20] = temp34 & 0xffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp37 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                memory[0x00:0x20] = temp34 & 0xffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp38 = keccak256(memory[0x00:0x40]) + 0x03;\n                storage[temp38] = storage[temp38] + temp37;\n                var0 = 0x00;\n                var1 = 0x25ba;\n                var1 = tanksBeforeTheNewTankType();\n                goto label_25BA;\n            }\n        } else if (msg.value > 0x00) { goto label_2460; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getContractBalance() returns (var r0) { return address(this).balance; }\n    \n    function getTankAuctionEntity(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40]) + 0x04];\n    }\n    \n    function ChangeTankSellMaster(var arg0) {\n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function cashOutTank(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!!(storage[0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_2B08:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x06] / 0x0100 ** 0x04 & 0xffffffff;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n            var temp2 = (storage[keccak256(memory[0x00:0x40]) + 0x06] & 0xffffffff) - temp1 & 0xffffffff;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n            var0 = storage[keccak256(memory[0x00:0x40]) + 0x04] * temp2;\n        \n            if (address(this).balance < var0) { revert(memory[0x00:0x00]); }\n        \n            if (var0 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var temp3 = arg0;\n            memory[0x00:0x20] = temp3 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var1 = storage[keccak256(memory[0x00:0x40]) + 0x06] / 0x0100 ** 0x04 & 0xffffffff;\n            memory[0x00:0x20] = temp3 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n            var temp4 = storage[keccak256(memory[0x00:0x40]) + 0x06] & 0xffffffff;\n            memory[0x00:0x20] = temp3 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp5 = keccak256(memory[0x00:0x40]) + 0x06;\n            storage[temp5] = (temp4 & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp5] & ~(0xffffffff * 0x0100 ** 0x04));\n            memory[0x00:0x20] = temp3 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp6 = var0;\n            var temp7 = memory[0x40:0x60];\n            var temp8;\n            temp8, memory[temp7:temp7 + 0x00] = address(storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp7:temp7 + memory[0x40:0x60] - temp7]);\n        \n            if (temp8) {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var0;\n                var temp10 = memory[0x40:0x60];\n                log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0x9f5185b6b824ad17fcc1c1d1098e828613c62aa8f27fba237cbda8248272c357, msg.sender]);\n                return;\n            } else {\n                memory[0x00:0x20] = arg0 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp11 = keccak256(memory[0x00:0x40]) + 0x06;\n                storage[temp11] = (var1 & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp11] & ~(0xffffffff * 0x0100 ** 0x04));\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var0;\n                var temp13 = memory[0x40:0x60];\n                log(memory[temp13:temp13 + (temp12 + 0x20) - temp13], [0x9f5185b6b824ad17fcc1c1d1098e828613c62aa8f27fba237cbda8248272c357, msg.sender]);\n                return;\n            }\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_2B08; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function _transfer(var arg0, var arg1) {\n        var var0 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_2EDA:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender == arg1 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg1;\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp2 = keccak256(memory[0x00:0x40]) + 0x02;\n            storage[temp2] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = temp1 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp3 = keccak256(memory[0x00:0x40]) + 0x03;\n            storage[temp3] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp1 & 0xffffffff;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x113bb8db9c3f402e36400928c81a0e95afa1d1cb577216ecf25bfd7c8b4641f7, msg.sender, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_2EDA; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getTankProduct(var arg0) returns (var r0) {\n        var var0 = 0x3112;\n        var0 = func_41B1();\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xc0;\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffff;\n        memory[0x20:0x40] = 0x08;\n        memory[temp0:temp0 + 0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        var temp2 = temp0 + 0x20;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffff;\n        memory[0x20:0x40] = 0x08;\n        memory[temp2:temp2 + 0x20] = storage[keccak256(memory[0x00:0x40])] / 0x0100 ** 0x04 & 0xffffffff;\n        var temp3 = temp2 + 0x20;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] / 0x0100 ** 0x04 & 0xffffffff;\n        memory[0x20:0x40] = 0x0a;\n        memory[temp3:temp3 + 0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        var temp4 = temp3 + 0x20;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] / 0x0100 ** 0x04 & 0xffffffff;\n        memory[0x20:0x40] = 0x0a;\n        memory[temp4:temp4 + 0x20] = storage[keccak256(memory[0x00:0x40])] / 0x0100 ** 0x04 & 0xffffffff;\n        var temp5 = temp4 + 0x20;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] / 0x0100 ** 0x04 & 0xffffffff;\n        memory[0x20:0x40] = 0x0a;\n        memory[temp5:temp5 + 0x20] = storage[keccak256(memory[0x00:0x40])] / 0x0100 ** 0x08 & 0xffffffff;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = storage[keccak256(memory[0x00:0x40]) + 0x05] & 0xffffffff;\n        return temp0;\n    }\n    \n    function getTankTotalEarned(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40]) + 0x05];\n    }\n    \n    function ChangeUpgradeMaster(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function getTankOwner(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function createNewTankWeapon() returns (var r0) { return storage[0x04] / 0x0100 ** 0x0c & 0xffffffff; }\n    \n    function AuctionMaster() returns (var r0) { return storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function sellTank(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_3535:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n        \n            if (arg1 < arg2) { revert(memory[0x00:0x00]); }\n        \n            var0 = arg1 > 0x00;\n        \n            if (!var0) {\n                if (!var0) { revert(memory[0x00:0x00]); }\n            \n            label_361E:\n            \n                if (arg3 <= 0x00) { revert(memory[0x00:0x00]); }\n            \n                var temp0 = arg1;\n            \n                if (temp0 != temp0 & 0xffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n            \n                var temp1 = arg2;\n            \n                if (temp1 != temp1 & 0xffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n            \n                var temp2 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp2 + 0xa0;\n                var temp3 = arg0;\n                memory[temp2:temp2 + 0x20] = temp3 & 0xffffffff;\n                var temp4 = temp2 + 0x20;\n                var temp5 = arg1;\n                memory[temp4:temp4 + 0x20] = temp5;\n                var temp6 = temp4 + 0x20;\n                var temp7 = arg2;\n                memory[temp6:temp6 + 0x20] = temp7;\n                var temp8 = temp6 + 0x20;\n                memory[temp8:temp8 + 0x20] = block.timestamp;\n                var temp9 = arg3;\n                memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp9;\n                memory[0x00:0x20] = storage[0x05];\n                memory[0x20:0x40] = 0x0b;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                var temp11 = temp10;\n                storage[temp11] = (memory[temp2:temp2 + 0x20] & 0xffffffff) | (storage[temp11] & ~0xffffffff);\n                storage[temp10 + 0x01] = memory[temp2 + 0x20:temp2 + 0x20 + 0x20];\n                storage[temp10 + 0x02] = memory[temp2 + 0x40:temp2 + 0x40 + 0x20];\n                storage[temp10 + 0x03] = memory[temp2 + 0x60:temp2 + 0x60 + 0x20];\n                storage[temp10 + 0x04] = memory[temp2 + 0x80:temp2 + 0x80 + 0x20];\n                memory[0x00:0x20] = temp3 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp12 = keccak256(memory[0x00:0x40]) + 0x03;\n                storage[temp12] = (storage[temp12] & ~(0xff * 0x0100 ** 0x14)) | 0x0100 ** 0x14;\n                var temp13 = storage[0x05];\n                storage[0x05] = temp13 + 0x01;\n                memory[0x00:0x20] = temp3 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                storage[keccak256(memory[0x00:0x40]) + 0x04] = temp13;\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = temp3 & 0xffffffff;\n                var temp15 = temp14 + 0x20;\n                memory[temp15:temp15 + 0x20] = temp5;\n                var temp16 = temp15 + 0x20;\n                memory[temp16:temp16 + 0x20] = temp7;\n                var temp17 = temp16 + 0x20;\n                memory[temp17:temp17 + 0x20] = temp9;\n                var temp18 = temp17 + 0x20;\n                memory[temp18:temp18 + 0x20] = block.timestamp;\n                var temp19 = memory[0x40:0x60];\n                log(memory[temp19:temp19 + (temp18 + 0x20) - temp19], [0xf6b924f817282ac2c02fb828bdc9a6c812e6c87369d31c4b7dbd286ea158ffe2, msg.sender]);\n                return;\n            } else if (arg2 >= 0x00) { goto label_361E; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_3535; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function newIdTankWeapon() returns (var r0) { return storage[0x04] / 0x0100 ** 0x04 & 0xffffffff; }\n    \n    function tanksBeforeTheNewTankType() returns (var r0) { return (((storage[0x03] / 0x0100 ** 0x19 & 0xffffffff) + 0x0a) * ((storage[0x03] / 0x0100 ** 0x19 & 0xffffffff) + 0x0a) * ((storage[0x03] / 0x0100 ** 0x19 & 0xffffffff) - 0x0b) + 0x03e8) - (storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) & 0xffffffff; }\n    \n    function howManyTanks() returns (var r0) { return storage[0x03] / 0x0100 ** 0x19 & 0xffffffff; }\n    \n    function getProductEarning(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40]) + 0x04];\n    }\n    \n    function exportTankResetEarning(var arg0) {\n        if (!!(storage[0x03] / 0x0100 ** 0x14 & 0xff) != !!0x01) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x06] & 0xffffffff;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]) + 0x06;\n        storage[temp2] = (temp1 & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp2] & ~(0xffffffff * 0x0100 ** 0x04));\n    }\n    \n    function _transferAction(var arg0, var arg1, var arg2) {\n        var var0 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_3A1C:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender == arg1 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg1;\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp2 = keccak256(memory[0x00:0x40]) + 0x02;\n            storage[temp2] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = temp1 & 0xffffffff;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = arg2 & 0xff;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xf77685804f81b41b8882a2b139a0e44bcabacefd99f6702aff10c4d0fa64c15a, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_3A1C; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function ExportMaster() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function TankSellMaster() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function createNewTankHull() returns (var r0) { return storage[0x04] / 0x0100 ** 0x08 & 0xffffffff; }\n    \n    function getPlayerBalance(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function newIdAuctionEntity() returns (var r0) { return storage[0x05]; }\n    \n    function newIdTankHull() returns (var r0) { return storage[0x04] & 0xffffffff; }\n    \n    function func_3CC1() {\n        if (storage[0x03] / 0x0100 ** 0x19 & 0xffffffff > 0x79) { goto label_3EED; }\n    \n        var var0 = storage[0x04] / 0x0100 ** 0x08 & 0xffffffff < (storage[0x04] & 0xffffffff) - 0x01 & 0xffffffff;\n    \n        if (!var0) {\n            if (!var0) {\n            label_3DC2:\n                storage[0x04] = ((storage[0x04] / 0x0100 ** 0x0c & 0xffffffff) + 0x01 & 0xffffffff) * 0x0100 ** 0x0c | (storage[0x04] & ~(0xffffffff * 0x0100 ** 0x0c));\n            \n                if (storage[0x04] / 0x0100 ** 0x08 & 0xffffffff != storage[0x04] / 0x0100 ** 0x0c & 0xffffffff) {\n                label_3E72:\n                    var0 = 0x3eec;\n                    var temp0 = memory[0x40:0x60];\n                    var var1 = temp0;\n                    memory[0x40:0x60] = var1 + 0x40;\n                    memory[var1:var1 + 0x20] = 0x04;\n                    memory[var1 + 0x20:var1 + 0x20 + 0x20] = 0x54616e6b00000000000000000000000000000000000000000000000000000000;\n                    var var2 = storage[0x04] / 0x0100 ** 0x08 & 0xffffffff;\n                    var var3 = storage[0x04] / 0x0100 ** 0x0c & 0xffffffff;\n                    var var4 = 0x02c68af0bb140000;\n                    var var5 = 0x0aa87bee538000;\n                    var var6 = block.timestamp + 0x0e10;\n                    func_3EEF(var1, var2, var3, var4, var5, var6);\n                \n                label_3EED:\n                    return;\n                } else {\n                    storage[0x04] = ((storage[0x04] / 0x0100 ** 0x0c & 0xffffffff) + 0x01 & 0xffffffff) * 0x0100 ** 0x0c | (storage[0x04] & ~(0xffffffff * 0x0100 ** 0x0c));\n                    goto label_3E72;\n                }\n            } else {\n            label_3D61:\n                storage[0x04] = (storage[0x04] & ~(0xffffffff * 0x0100 ** 0x0c)) | 0x0100 ** 0x0c;\n                storage[0x04] = ((storage[0x04] / 0x0100 ** 0x08 & 0xffffffff) + 0x01 & 0xffffffff) * 0x0100 ** 0x08 | (storage[0x04] & ~(0xffffffff * 0x0100 ** 0x08));\n                goto label_3E72;\n            }\n        } else if (storage[0x04] / 0x0100 ** 0x0c & 0xffffffff < (storage[0x04] / 0x0100 ** 0x04 & 0xffffffff) - 0x01 & 0xffffffff) { goto label_3DC2; }\n        else { goto label_3D61; }\n    }\n    \n    function func_3EEF(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var temp0 = memory[0x40:0x60];\n        var var0 = temp0;\n        memory[0x40:0x60] = var0 + 0x0100;\n        memory[var0:var0 + 0x20] = arg0;\n        var temp1 = var0 + 0x20;\n        memory[temp1:temp1 + 0x20] = arg1 & 0xffffffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg2 & 0xffffffff;\n        var temp3 = temp2 + 0x20;\n        var temp4 = arg3;\n        memory[temp3:temp3 + 0x20] = temp4;\n        var temp5 = temp3 + 0x20;\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg4;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = arg5;\n        memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = 0xffffffff & 0x00;\n        var temp8 = storage[0x03] / 0x0100 ** 0x19 & 0xffffffff;\n        storage[0x03] = (temp8 + 0x01 & 0xffffffff) * 0x0100 ** 0x19 | (storage[0x03] & ~(0xffffffff * 0x0100 ** 0x19));\n        memory[0x00:0x20] = temp8 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var1 = keccak256(memory[0x00:0x40]);\n        var temp9 = memory[var0:var0 + 0x20];\n        var var2 = 0x3fb1;\n        var var3 = var1;\n        var var4 = temp9 + 0x20;\n        var var5 = memory[temp9:temp9 + 0x20];\n        var2 = func_4279(var3, var4, var5);\n        var temp10 = var0;\n        var temp11 = var1;\n        var temp12 = temp11 + 0x01;\n        storage[temp12] = (memory[temp10 + 0x20:temp10 + 0x20 + 0x20] & 0xffffffff) | (storage[temp12] & ~0xffffffff);\n        var temp13 = temp11 + 0x01;\n        storage[temp13] = (memory[temp10 + 0x40:temp10 + 0x40 + 0x20] & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp13] & ~(0xffffffff * 0x0100 ** 0x04));\n        storage[temp11 + 0x02] = memory[temp10 + 0x60:temp10 + 0x60 + 0x20];\n        storage[temp11 + 0x03] = memory[temp10 + 0x80:temp10 + 0x80 + 0x20];\n        storage[temp11 + 0x04] = memory[temp10 + 0xa0:temp10 + 0xa0 + 0x20];\n        storage[temp11 + 0x05] = memory[temp10 + 0xc0:temp10 + 0xc0 + 0x20];\n        var temp14 = temp11 + 0x06;\n        storage[temp14] = (memory[temp10 + 0xe0:temp10 + 0xe0 + 0x20] & 0xffffffff) | (storage[temp14] & ~0xffffffff);\n        var0 = 0x54675320a731020d705bcc2541a314d97fb5e538182801e632f28fed6649baa7;\n        var1 = (storage[0x03] / 0x0100 ** 0x19 & 0xffffffff) - 0x01;\n        var temp15 = arg0;\n        var2 = temp15;\n        var3 = arg1;\n        var4 = arg2;\n        var5 = arg3;\n        var var6 = arg4;\n        var var7 = arg5;\n        var var8 = block.timestamp;\n        var temp16 = memory[0x40:0x60];\n        var var9 = temp16;\n        memory[var9:var9 + 0x20] = var1 & 0xffffffff;\n        var temp17 = var9 + 0x20;\n        var var10 = temp17;\n        var temp18 = var10 + 0x20;\n        memory[temp18:temp18 + 0x20] = var3 & 0xffffffff;\n        var temp19 = temp18 + 0x20;\n        memory[temp19:temp19 + 0x20] = var4 & 0xffffffff;\n        var temp20 = temp19 + 0x20;\n        memory[temp20:temp20 + 0x20] = var5;\n        var temp21 = temp20 + 0x20;\n        memory[temp21:temp21 + 0x20] = var6;\n        var temp22 = temp21 + 0x20;\n        memory[temp22:temp22 + 0x20] = var7;\n        var temp23 = temp22 + 0x20;\n        memory[temp23:temp23 + 0x20] = var8;\n        var temp24 = temp23 + 0x20;\n        memory[var10:var10 + 0x20] = temp24 - var9;\n        memory[temp24:temp24 + 0x20] = memory[var2:var2 + 0x20];\n        var var11 = temp24 + 0x20;\n        var var13 = memory[var2:var2 + 0x20];\n        var var12 = var2 + 0x20;\n        var var14 = var13;\n        var var15 = var11;\n        var var16 = var12;\n        var var17 = 0x00;\n    \n        if (var17 >= var14) {\n        label_411E:\n            var temp25 = var13;\n            var11 = temp25 + var11;\n            var12 = temp25 & 0x1f;\n        \n            if (!var12) {\n                var temp26 = memory[0x40:0x60];\n                log(memory[temp26:temp26 + var11 - temp26], [stack[-13]]);\n                return;\n            } else {\n                var temp27 = var12;\n                var temp28 = var11 - temp27;\n                memory[temp28:temp28 + 0x20] = ~(0x0100 ** (0x20 - temp27) - 0x01) & memory[temp28:temp28 + 0x20];\n                var temp29 = memory[0x40:0x60];\n                log(memory[temp29:temp29 + (temp28 + 0x20) - temp29], [stack[-13]]);\n                return;\n            }\n        } else {\n        label_410C:\n            var temp30 = var17;\n            memory[var15 + temp30:var15 + temp30 + 0x20] = memory[var16 + temp30:var16 + temp30 + 0x20];\n            var17 = temp30 + 0x20;\n        \n            if (var17 >= var14) { goto label_411E; }\n            else { goto label_410C; }\n        }\n    }\n    \n    function func_4167() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = 0xffffffff & 0x00;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x00;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = 0x00;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = 0x00;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_419D() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_41B1() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        var var0 = temp0;\n        memory[0x40:0x60] = var0 + 0xc0;\n        memory[var0:var0 + 0x20] = 0xffffffff & 0x00;\n        var var2 = var0 + 0x20;\n        var var1 = 0x06 - 0x01;\n    \n        if (!var1) { goto label_41DA; }\n    \n    label_41C1:\n        var temp1 = var2;\n        memory[temp1:temp1 + 0x20] = 0xffffffff & 0x00;\n        var2 = temp1 + 0x20;\n        var1 = var1 - 0x01;\n    \n        if (var1) { goto label_41C1; }\n    \n    label_41DA:\n        return var0;\n    }\n    \n    function func_41DF(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = arg0;\n        var var1 = arg1;\n        arg1 = var0 + (0x1f + 0x04) / 0x20;\n    \n        if (!arg2) {\n        label_4268:\n            var temp0 = arg1;\n            arg1 = 0x4275;\n            var0 = var0;\n            arg2 = temp0;\n            arg1 = func_42F9(arg2, var0);\n            return arg0;\n        } else {\n            var temp1 = arg2;\n            var temp2 = var1;\n            arg2 = temp2;\n            var1 = arg2 + temp1 * 0x20;\n            var var2 = 0x00;\n        \n            if (var1 <= arg2) {\n            label_4239:\n            \n                if (!var2) { goto label_4268; }\n            \n                var temp3 = var0;\n                var temp4 = var2;\n                storage[temp3] = ~(0x0100 ** temp4 * 0xff) & storage[temp3];\n                var temp5 = temp4 + 0x01;\n                var temp6 = temp5 / 0x20;\n                var0 = temp6 + temp3;\n                var2 = 0x01 - temp6 * temp5;\n                goto label_4239;\n            } else {\n            label_4204:\n                var temp7 = arg2;\n                var temp8 = var0;\n                var temp9 = var2;\n                var temp10 = 0x0100 ** temp9;\n                storage[temp8] = (memory[temp7:temp7 + 0x20] & 0xff) * temp10 | (~(temp10 * 0xff) & storage[temp8]);\n                arg2 = temp7 + 0x20;\n                var temp11 = temp9 + 0x01;\n                var temp12 = temp11 / 0x20;\n                var0 = temp12 + temp8;\n                var2 = 0x01 - temp12 * temp11;\n            \n                if (var1 <= arg2) { goto label_4239; }\n                else { goto label_4204; }\n            }\n        }\n    }\n    \n    function func_4279(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_42E8:\n                var temp4 = arg1;\n                arg1 = 0x42f5;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_4329(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = var1;\n                var temp6 = arg2;\n                arg2 = temp5;\n                var1 = arg2 + temp6;\n            \n                if (var1 <= arg2) {\n                label_42E7:\n                    goto label_42E8;\n                } else {\n                label_42D5:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var0 = temp8 + 0x01;\n                    var1 = var1;\n                \n                    if (var1 <= arg2) { goto label_42E7; }\n                    else { goto label_42D5; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_42E8;\n        }\n    }\n    \n    function func_42F9(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x4326;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_4322(arg1, var0); }\n    \n    label_4308:\n        var temp2 = var0;\n        storage[temp2] = storage[temp2] & ~0xff;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_4308; }\n    \n        arg0 = func_4322(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_4322(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_4329(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x434b;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_4347(arg1, var0); }\n    \n    label_4338:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_4338; }\n    \n        arg0 = func_4347(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_4347(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x09c25e6c) {\n            // Dispatch table entry for FinishedExporting()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0232;\n            FinishedExporting();\n            stop();\n        } else if (var0 == 0x09ca4b76) {\n            // Dispatch table entry for getCurrentPriceAuction(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x025b;\n            var var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getCurrentPriceAuction(var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n        } else if (var0 == 0x1e5571bc) {\n            // Dispatch table entry for getTankSell(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0298;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankSell(var2);\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = !!var1;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n        } else if (var0 == 0x215de791) {\n            // Dispatch table entry for getTankName(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d9;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankName(var2);\n            var temp4 = memory[0x40:0x60];\n            var2 = temp4;\n            var var3 = var2;\n            var temp5 = var3 + 0x20;\n            memory[var3:var3 + 0x20] = temp5 - var3;\n            var temp6 = var1;\n            memory[temp5:temp5 + 0x20] = memory[temp6:temp6 + 0x20];\n            var var4 = temp5 + 0x20;\n            var var5 = temp6 + 0x20;\n            var var6 = memory[temp6:temp6 + 0x20];\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n            var var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_0319:\n                var temp7 = var6;\n                var4 = temp7 + var4;\n                var5 = temp7 & 0x1f;\n            \n                if (!var5) {\n                    var temp8 = memory[0x40:0x60];\n                    return memory[temp8:temp8 + var4 - temp8];\n                } else {\n                    var temp9 = var5;\n                    var temp10 = var4 - temp9;\n                    memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                    var temp11 = memory[0x40:0x60];\n                    return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n                }\n            } else {\n            label_0307:\n                var temp12 = var10;\n                memory[var8 + temp12:var8 + temp12 + 0x20] = memory[var9 + temp12:var9 + temp12 + 0x20];\n                var10 = temp12 + 0x20;\n            \n                if (var10 >= var7) { goto label_0319; }\n                else { goto label_0307; }\n            }\n        } else if (var0 == 0x21b920eb) {\n            // Dispatch table entry for upgradeTank(uint32,uint8)\n            var1 = 0x037c;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44] & 0xff;\n            upgradeTank(var2, var3);\n            stop();\n        } else if (var0 == 0x27eac914) {\n            // Dispatch table entry for cancelAuction(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03a5;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            cancelAuction(var2);\n            stop();\n        } else if (var0 == 0x287ad39f) {\n            // Dispatch table entry for upgradePrice()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ba;\n            var2 = upgradePrice();\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = var2;\n            var temp14 = memory[0x40:0x60];\n            return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n        } else if (var0 == 0x3a7d280c) {\n            // Dispatch table entry for login(string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x042b;\n            var temp15 = msg.data[0x04:0x24] + 0x04;\n            var temp16 = msg.data[temp15:temp15 + 0x20];\n            var temp17 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp17:temp17 + 0x20] = temp16;\n            memory[temp17 + 0x20:temp17 + 0x20 + temp16] = msg.data[temp15 + 0x20:temp15 + 0x20 + temp16];\n            var2 = temp17;\n            login(var2);\n            stop();\n        } else if (var0 == 0x3b61f5f5) {\n            // Dispatch table entry for ChangeAuctionMaster(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0464;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            ChangeAuctionMaster(var2);\n            stop();\n        } else if (var0 == 0x3ea0fb3e) {\n            // Dispatch table entry for getCurrentPrice(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x048d;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getCurrentPrice(var2);\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = var1;\n            var temp19 = memory[0x40:0x60];\n            return memory[temp19:temp19 + (temp18 + 0x20) - temp19];\n        } else if (var0 == 0x455fea46) {\n            // Dispatch table entry for getTankDetails(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04ca;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankDetails(var2);\n            var2 = memory[0x40:0x60];\n            var3 = var2;\n            var4 = var1;\n            var5 = 0x20 * 0x06;\n            var6 = var5;\n            var7 = var3;\n            var8 = var4;\n            var9 = 0x00;\n        \n            if (var9 >= var6) {\n            label_04F5:\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (var5 + var3) - temp20];\n            } else {\n            label_04E3:\n                var temp21 = var9;\n                memory[var7 + temp21:var7 + temp21 + 0x20] = memory[var8 + temp21:var8 + temp21 + 0x20];\n                var9 = temp21 + 0x20;\n            \n                if (var9 >= var6) { goto label_04F5; }\n                else { goto label_04E3; }\n            }\n        } else if (var0 == 0x48318cbc) {\n            // Dispatch table entry for newIdTankProduct()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x051b;\n            var2 = newIdTankProduct();\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = var2 & 0xffffffff;\n            var temp23 = memory[0x40:0x60];\n            return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n        } else if (var0 == 0x4a367d73) {\n            // Dispatch table entry for UpgradeMaster()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0550;\n            var2 = UpgradeMaster();\n            var temp24 = memory[0x40:0x60];\n            memory[temp24:temp24 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp25 = memory[0x40:0x60];\n            return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n        } else if (var0 == 0x4ceab75e) {\n            // Dispatch table entry for newIdTank()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x05a5;\n            var2 = newIdTank();\n            var temp26 = memory[0x40:0x60];\n            memory[temp26:temp26 + 0x20] = var2 & 0xffffffff;\n            var temp27 = memory[0x40:0x60];\n            return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n        } else if (var0 == 0x51ffcab3) {\n            // Dispatch table entry for bid(uint32)\n            var1 = 0x05e3;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            bid(var2);\n            stop();\n        } else if (var0 == 0x5b0d5b55) {\n            // Dispatch table entry for getTankEarning(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x060c;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankEarning(var2);\n            var temp28 = memory[0x40:0x60];\n            memory[temp28:temp28 + 0x20] = var1;\n            var temp29 = memory[0x40:0x60];\n            return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n        } else if (var0 == 0x5c7b79f5) {\n            // Dispatch table entry for cashOut(uint256)\n            var1 = 0x0638;\n            var2 = msg.data[0x04:0x24];\n            cashOut(var2);\n            stop();\n        } else if (var0 == 0x68999d76) {\n            // Dispatch table entry for exportTank(address,uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0680;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffff;\n            exportTank(var2, var3);\n            stop();\n        } else if (var0 == 0x6cd8f433) {\n            // Dispatch table entry for canExport()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0695;\n            var2 = canExport();\n            var temp30 = memory[0x40:0x60];\n            memory[temp30:temp30 + 0x20] = !!var2;\n            var temp31 = memory[0x40:0x60];\n            return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n        } else if (var0 == 0x6e233918) {\n            // Dispatch table entry for buyTank(uint32)\n            var1 = 0x06cb;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            buyTank(var2);\n            stop();\n        } else if (var0 == 0x6f9fb98a) {\n            // Dispatch table entry for getContractBalance()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x06e0;\n            var1 = getContractBalance();\n            var temp32 = memory[0x40:0x60];\n            memory[temp32:temp32 + 0x20] = var1;\n            var temp33 = memory[0x40:0x60];\n            return memory[temp33:temp33 + (temp32 + 0x20) - temp33];\n        } else if (var0 == 0x70a06777) {\n            // Dispatch table entry for getTankAuctionEntity(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x071d;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankAuctionEntity(var2);\n            var temp34 = memory[0x40:0x60];\n            memory[temp34:temp34 + 0x20] = var1;\n            var temp35 = memory[0x40:0x60];\n            return memory[temp35:temp35 + (temp34 + 0x20) - temp35];\n        } else if (var0 == 0x72411849) {\n            // Dispatch table entry for ChangeTankSellMaster(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x076a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            ChangeTankSellMaster(var2);\n            stop();\n        } else if (var0 == 0x8301fb2e) {\n            // Dispatch table entry for cashOutTank(uint32)\n            var1 = 0x0788;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            cashOutTank(var2);\n            stop();\n        } else if (var0 == 0x83773de8) {\n            // Dispatch table entry for _transfer(uint32,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x07d0;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            _transfer(var2, var3);\n            stop();\n        } else if (var0 == 0x86d6c8a0) {\n            // Dispatch table entry for getTankProduct(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x07f9;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankProduct(var2);\n            var2 = memory[0x40:0x60];\n            var3 = var2;\n            var4 = var1;\n            var5 = 0x20 * 0x06;\n            var6 = var5;\n            var7 = var3;\n            var8 = var4;\n            var9 = 0x00;\n        \n            if (var9 >= var6) {\n            label_0824:\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (var5 + var3) - temp36];\n            } else {\n            label_0812:\n                var temp37 = var9;\n                memory[var7 + temp37:var7 + temp37 + 0x20] = memory[var8 + temp37:var8 + temp37 + 0x20];\n                var9 = temp37 + 0x20;\n            \n                if (var9 >= var6) { goto label_0824; }\n                else { goto label_0812; }\n            }\n        } else if (var0 == 0x8d81e2c0) {\n            // Dispatch table entry for getTankTotalEarned(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x085e;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankTotalEarned(var2);\n            var temp38 = memory[0x40:0x60];\n            memory[temp38:temp38 + 0x20] = var1;\n            var temp39 = memory[0x40:0x60];\n            return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n        } else if (var0 == 0x8f3956a4) {\n            // Dispatch table entry for ChangeUpgradeMaster(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x08ab;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            ChangeUpgradeMaster(var2);\n            stop();\n        } else if (var0 == 0x8f426437) {\n            // Dispatch table entry for getTankOwner(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x08d4;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankOwner(var2);\n            var temp40 = memory[0x40:0x60];\n            memory[temp40:temp40 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp41 = memory[0x40:0x60];\n            return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n        } else if (var0 == 0x90a251da) {\n            // Dispatch table entry for createNewTankWeapon()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0929;\n            var2 = createNewTankWeapon();\n            var temp42 = memory[0x40:0x60];\n            memory[temp42:temp42 + 0x20] = var2 & 0xffffffff;\n            var temp43 = memory[0x40:0x60];\n            return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n        } else if (var0 == 0x90c3a370) {\n            // Dispatch table entry for AuctionMaster()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x095e;\n            var2 = AuctionMaster();\n            var temp44 = memory[0x40:0x60];\n            memory[temp44:temp44 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp45 = memory[0x40:0x60];\n            return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n        } else if (var0 == 0x97fa346d) {\n            // Dispatch table entry for sellTank(uint32,uint256,uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x09e2;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64];\n            var5 = msg.data[0x64:0x84];\n            sellTank(var2, var3, var4, var5);\n            stop();\n        } else if (var0 == 0xa19c406a) {\n            // Dispatch table entry for newIdTankWeapon()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x09f7;\n            var2 = newIdTankWeapon();\n            var temp46 = memory[0x40:0x60];\n            memory[temp46:temp46 + 0x20] = var2 & 0xffffffff;\n            var temp47 = memory[0x40:0x60];\n            return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n        } else if (var0 == 0xa324f8bf) {\n            // Dispatch table entry for tanksBeforeTheNewTankType()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a2c;\n            var1 = tanksBeforeTheNewTankType();\n            var temp48 = memory[0x40:0x60];\n            memory[temp48:temp48 + 0x20] = var1;\n            var temp49 = memory[0x40:0x60];\n            return memory[temp49:temp49 + (temp48 + 0x20) - temp49];\n        } else if (var0 == 0xa8ae5eb8) {\n            // Dispatch table entry for howManyTanks()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a55;\n            var1 = howManyTanks();\n            var temp50 = memory[0x40:0x60];\n            memory[temp50:temp50 + 0x20] = var1 & 0xffffffff;\n            var temp51 = memory[0x40:0x60];\n            return memory[temp51:temp51 + (temp50 + 0x20) - temp51];\n        } else if (var0 == 0xaa077992) {\n            // Dispatch table entry for getProductEarning(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a9e;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getProductEarning(var2);\n            var temp52 = memory[0x40:0x60];\n            memory[temp52:temp52 + 0x20] = var1;\n            var temp53 = memory[0x40:0x60];\n            return memory[temp53:temp53 + (temp52 + 0x20) - temp53];\n        } else if (var0 == 0xaa4ac835) {\n            // Dispatch table entry for exportTankResetEarning(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0adb;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            exportTankResetEarning(var2);\n            stop();\n        } else if (var0 == 0xafe007b6) {\n            // Dispatch table entry for _transferAction(uint32,address,uint8)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b2f;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = msg.data[0x44:0x64] & 0xff;\n            _transferAction(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xb7e83329) {\n            // Dispatch table entry for ExportMaster()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b44;\n            var2 = ExportMaster();\n            var temp54 = memory[0x40:0x60];\n            memory[temp54:temp54 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp55 = memory[0x40:0x60];\n            return memory[temp55:temp55 + (temp54 + 0x20) - temp55];\n        } else if (var0 == 0xd09677df) {\n            // Dispatch table entry for TankSellMaster()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b99;\n            var2 = TankSellMaster();\n            var temp56 = memory[0x40:0x60];\n            memory[temp56:temp56 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp57 = memory[0x40:0x60];\n            return memory[temp57:temp57 + (temp56 + 0x20) - temp57];\n        } else if (var0 == 0xd8754716) {\n            // Dispatch table entry for createNewTankHull()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0bee;\n            var2 = createNewTankHull();\n            var temp58 = memory[0x40:0x60];\n            memory[temp58:temp58 + 0x20] = var2 & 0xffffffff;\n            var temp59 = memory[0x40:0x60];\n            return memory[temp59:temp59 + (temp58 + 0x20) - temp59];\n        } else if (var0 == 0xe2734c93) {\n            // Dispatch table entry for getPlayerBalance(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c47;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = getPlayerBalance(var2);\n            var temp60 = memory[0x40:0x60];\n            memory[temp60:temp60 + 0x20] = var1;\n            var temp61 = memory[0x40:0x60];\n            return memory[temp61:temp61 + (temp60 + 0x20) - temp61];\n        } else if (var0 == 0xe542e7c5) {\n            // Dispatch table entry for newIdAuctionEntity()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c70;\n            var2 = newIdAuctionEntity();\n            var temp62 = memory[0x40:0x60];\n            memory[temp62:temp62 + 0x20] = var2;\n            var temp63 = memory[0x40:0x60];\n            return memory[temp63:temp63 + (temp62 + 0x20) - temp63];\n        } else if (var0 == 0xecaaf6c8) {\n            // Dispatch table entry for newIdTankHull()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c99;\n            var2 = newIdTankHull();\n            var temp64 = memory[0x40:0x60];\n            memory[temp64:temp64 + 0x20] = var2 & 0xffffffff;\n            var temp65 = memory[0x40:0x60];\n            return memory[temp65:temp65 + (temp64 + 0x20) - temp65];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function FinishedExporting() {\n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x14)) | 0x00;\n    }\n    \n    function getCurrentPriceAuction(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0d3e;\n        var1 = func_4167();\n        var var2 = 0x00;\n        var var3 = 0x0d49;\n        var var4 = arg0;\n        var3 = getTankSell(var4);\n    \n        if (!var3) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x04];\n        memory[0x20:0x40] = 0x0b;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0xa0;\n        memory[temp1:temp1 + 0x20] = storage[temp0] & 0xffffffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = storage[temp0 + 0x01];\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = storage[temp0 + 0x02];\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = storage[temp0 + 0x03];\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = storage[temp0 + 0x04];\n        var1 = temp1;\n        var3 = block.timestamp - memory[var1 + 0x60:var1 + 0x60 + 0x20];\n        var4 = memory[var1 + 0x80:var1 + 0x80 + 0x20];\n        var var5 = memory[var1 + 0x20:var1 + 0x20 + 0x20] - memory[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (!var4) { assert(); }\n    \n        var temp5 = var1;\n        var2 = memory[temp5 + 0x20:temp5 + 0x20 + 0x20] - var5 / var4 * var3;\n    \n        if (var2 >= memory[temp5 + 0x40:temp5 + 0x40 + 0x20]) { return var2; }\n        else { return memory[var1 + 0x40:var1 + 0x40 + 0x20]; }\n    }\n    \n    function getTankSell(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff;\n    }\n    \n    function getTankName(var arg0) returns (var r0) {\n        var var0 = 0x0e6e;\n        var0 = func_419D();\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp3;\n        var var2 = temp0;\n        var var3 = temp2;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp4 = storage[var5];\n        var var6 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var6) {\n        label_0F24:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp5 = var4;\n            var temp6 = temp5 + var6;\n            var4 = temp6;\n            memory[0x00:0x20] = var5;\n            var temp7 = keccak256(memory[0x00:0x20]);\n            memory[temp5:temp5 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp5 + 0x20;\n        \n            if (var4 <= var6) { goto label_0F1B; }\n        \n        label_0F07:\n            var temp8 = var5;\n            var temp9 = var6;\n            memory[temp9:temp9 + 0x20] = storage[temp8];\n            var5 = temp8 + 0x01;\n            var6 = temp9 + 0x20;\n        \n            if (var4 > var6) { goto label_0F07; }\n        \n        label_0F1B:\n            var temp10 = var4;\n            var temp11 = temp10 + (var6 - temp10 & 0x1f);\n            var6 = temp10;\n            var4 = temp11;\n            goto label_0F24;\n        } else {\n            var temp12 = var4;\n            memory[temp12:temp12 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp12 + 0x20;\n            goto label_0F24;\n        }\n    }\n    \n    function upgradeTank(var arg0, var arg1) {\n        var var0 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_0F6E:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            var0 = arg1 & 0xff >= 0x00;\n        \n            if (!var0) {\n                if (!var0) { revert(memory[0x00:0x00]); }\n            \n            label_100C:\n                var0 = 0x05;\n                memory[0x00:0x20] = arg0 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var var1 = keccak256(memory[0x00:0x40]) + 0x01;\n                var var2 = arg1 & 0xff;\n            \n                if (var2 >= 0x04) { assert(); }\n            \n                var temp0 = var2;\n            \n                if (storage[temp0 / 0x20 + var1] / 0x0100 ** (temp0 % 0x20) & 0xff >= var0) { revert(memory[0x00:0x00]); }\n            \n                if (msg.value < 0xb1a2bc2ec50000) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = arg0 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var0 = keccak256(memory[0x00:0x40]) + 0x01;\n                var1 = arg1 & 0xff;\n            \n                if (var1 >= 0x04) { assert(); }\n            \n                var temp1 = var1;\n                var temp2 = temp1 / 0x20 + var0;\n                var temp3 = temp1 % 0x20;\n                var temp4 = 0x0100 ** temp3;\n                storage[temp2] = ((storage[temp2] / 0x0100 ** temp3 & 0xff) + 0x01 & 0xff) * temp4 | (~(temp4 * 0xff) & storage[temp2]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0c;\n                var temp5 = keccak256(memory[0x00:0x40]);\n                storage[temp5] = storage[temp5] + (msg.value - 0xb1a2bc2ec50000);\n                memory[0x00:0x20] = storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x0c;\n                var temp6 = keccak256(memory[0x00:0x40]);\n                storage[temp6] = storage[temp6] + 0xb1a2bc2ec50000;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = arg0 & 0xffffffff;\n                var temp8 = temp7 + 0x20;\n                memory[temp8:temp8 + 0x20] = arg1 & 0xff;\n                var temp9 = memory[0x40:0x60];\n                log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0xd41cc314723765caf24fbc53c0073d04be9df3d814284b0bcbc47e7edd470621, msg.sender]);\n                return;\n            } else if (arg1 & 0xff < 0x04) { goto label_100C; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_0F6E; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function cancelAuction(var arg0) {\n        var var0 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_125A:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff) != !!0x01) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp1 = keccak256(memory[0x00:0x40]) + 0x03;\n            storage[temp1] = (storage[temp1] & ~(0xff * 0x0100 ** 0x14)) | 0x00;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x04];\n            memory[0x20:0x40] = 0x0b;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = temp2;\n            storage[temp3] = storage[temp3] & ~0xffffffff;\n            storage[temp2 + 0x01] = 0x00;\n            storage[temp2 + 0x02] = 0x00;\n            storage[temp2 + 0x03] = 0x00;\n            storage[temp2 + 0x04] = 0x00;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            storage[keccak256(memory[0x00:0x40]) + 0x04] = 0x00;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp0 & 0xffffffff;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xede778d225701457091011ec7fd143eddcc5852e0c761ba32d2073eff46a8ddf]);\n            return;\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_125A; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function upgradePrice() returns (var r0) { return 0xb1a2bc2ec50000; }\n    \n    function login(var arg0) {\n        var var0 = msg.sender;\n        var var1 = 0xce6f899d6687f45ea505c13815078e97e811a75165e55028676a71338a887116;\n        var temp0 = arg0;\n        var var2 = temp0;\n        var temp1 = memory[0x40:0x60];\n        var var3 = temp1;\n        var var4 = var3;\n        var temp2 = var4 + 0x20;\n        memory[var4:var4 + 0x20] = temp2 - var4;\n        memory[temp2:temp2 + 0x20] = memory[var2:var2 + 0x20];\n        var var5 = temp2 + 0x20;\n        var var6 = var2 + 0x20;\n        var var7 = memory[var2:var2 + 0x20];\n        var var8 = var7;\n        var var9 = var5;\n        var var10 = var6;\n        var var11 = 0x00;\n    \n        if (var11 >= var8) {\n        label_14B4:\n            var temp3 = var7;\n            var5 = temp3 + var5;\n            var6 = temp3 & 0x1f;\n        \n            if (!var6) {\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + var5 - temp4], [stack[-6], stack[-7]]);\n                return;\n            } else {\n                var temp5 = var6;\n                var temp6 = var5 - temp5;\n                memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                var temp7 = memory[0x40:0x60];\n                log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [stack[-6], stack[-7]]);\n                return;\n            }\n        } else {\n        label_14A2:\n            var temp8 = var11;\n            memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n            var11 = temp8 + 0x20;\n        \n            if (var11 >= var8) { goto label_14B4; }\n            else { goto label_14A2; }\n        }\n    }\n    \n    function ChangeAuctionMaster(var arg0) {\n        if (msg.sender != storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x01] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function getCurrentPrice(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40]) + 0x03];\n    }\n    \n    function getTankDetails(var arg0) returns (var r0) {\n        var var0 = 0x15c5;\n        var0 = func_41B1();\n        var temp0 = memory[0x40:0x60];\n        var var1 = temp0;\n        memory[0x40:0x60] = var1 + 0xc0;\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[var1:var1 + 0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        var var2 = var1 + 0x20;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var var3 = keccak256(memory[0x00:0x40]) + 0x01;\n        var var4 = 0x00;\n    \n        if (var4 >= 0x04) { assert(); }\n    \n        var temp2 = var4;\n        var temp3 = var2;\n        memory[temp3:temp3 + 0x20] = storage[temp2 / 0x20 + var3] / 0x0100 ** (temp2 % 0x20) & 0xff;\n        var2 = temp3 + 0x20;\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var3 = keccak256(memory[0x00:0x40]) + 0x01;\n        var4 = 0x01;\n    \n        if (var4 >= 0x04) { assert(); }\n    \n        var temp4 = var4;\n        var temp5 = var2;\n        memory[temp5:temp5 + 0x20] = storage[temp4 / 0x20 + var3] / 0x0100 ** (temp4 % 0x20) & 0xff;\n        var2 = temp5 + 0x20;\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var3 = keccak256(memory[0x00:0x40]) + 0x01;\n        var4 = 0x02;\n    \n        if (var4 >= 0x04) { assert(); }\n    \n        var temp6 = var4;\n        var temp7 = var2;\n        memory[temp7:temp7 + 0x20] = storage[temp6 / 0x20 + var3] / 0x0100 ** (temp6 % 0x20) & 0xff;\n        var2 = temp7 + 0x20;\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var3 = keccak256(memory[0x00:0x40]) + 0x01;\n        var4 = 0x03;\n    \n        if (var4 >= 0x04) { assert(); }\n    \n        var temp8 = var4;\n        var temp9 = var2;\n        memory[temp9:temp9 + 0x20] = storage[temp8 / 0x20 + var3] / 0x0100 ** (temp8 % 0x20) & 0xff;\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = storage[keccak256(memory[0x00:0x40]) + 0x06] & 0xffffffff;\n        return var1;\n    }\n    \n    function newIdTankProduct() returns (var r0) { return storage[0x03] / 0x0100 ** 0x19 & 0xffffffff; }\n    \n    function UpgradeMaster() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function newIdTank() returns (var r0) { return storage[0x03] / 0x0100 ** 0x15 & 0xffffffff; }\n    \n    function bid(var arg0) {\n        var var0 = 0x181f;\n        var0 = func_4167();\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var3) {\n            if (!var3) { revert(memory[0x00:0x00]); }\n        \n        label_1860:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff) != !!0x01) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x04];\n            memory[0x20:0x40] = 0x0b;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp1 + 0xa0;\n            memory[temp1:temp1 + 0x20] = storage[temp0] & 0xffffffff;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = storage[temp0 + 0x01];\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = storage[temp0 + 0x02];\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = storage[temp0 + 0x03];\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = storage[temp0 + 0x04];\n            var0 = temp1;\n            var3 = block.timestamp - memory[var0 + 0x60:var0 + 0x60 + 0x20];\n            var var4 = memory[var0 + 0x80:var0 + 0x80 + 0x20];\n            var var5 = memory[var0 + 0x20:var0 + 0x20 + 0x20] - memory[var0 + 0x40:var0 + 0x40 + 0x20];\n        \n            if (!var4) { assert(); }\n        \n            var temp5 = var0;\n            var1 = memory[temp5 + 0x20:temp5 + 0x20 + 0x20] - var5 / var4 * var3;\n        \n            if (var1 < memory[temp5 + 0x40:temp5 + 0x40 + 0x20]) {\n                var1 = memory[var0 + 0x40:var0 + 0x40 + 0x20];\n            \n                if (var1 >= 0x00) { goto label_1981; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var1 >= 0x00) {\n            label_1981:\n            \n                if (msg.value < var1) { revert(memory[0x00:0x00]); }\n            \n                var3 = 0x03;\n                var4 = 0x64;\n                var5 = var1;\n            \n                if (!var4) { assert(); }\n            \n                var temp6 = var5 / var4 * var3;\n                var temp7 = var1;\n                var temp8 = arg0;\n                memory[0x00:0x20] = temp8 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x0c;\n                var temp9 = keccak256(memory[0x00:0x40]);\n                storage[temp9] = storage[temp9] + (temp7 - temp6);\n                memory[0x00:0x20] = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x0c;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                storage[temp10] = storage[temp10] + temp6;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0c;\n                var temp11 = keccak256(memory[0x00:0x40]);\n                storage[temp11] = storage[temp11] + (msg.value - temp7);\n                memory[0x00:0x20] = temp8 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp12 = keccak256(memory[0x00:0x40]) + 0x02;\n                storage[temp12] = msg.sender | (storage[temp12] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                memory[0x00:0x20] = temp8 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp13 = keccak256(memory[0x00:0x40]) + 0x03;\n                storage[temp13] = (storage[temp13] & ~(0xff * 0x0100 ** 0x14)) | 0x00;\n                memory[0x00:0x20] = temp8 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                memory[0x20:0x40] = 0x0b;\n                var temp14 = keccak256(memory[0x00:0x40]);\n                var temp15 = temp14;\n                storage[temp15] = storage[temp15] & ~0xffffffff;\n                storage[temp14 + 0x01] = 0x00;\n                storage[temp14 + 0x02] = 0x00;\n                storage[temp14 + 0x03] = 0x00;\n                storage[temp14 + 0x04] = 0x00;\n                memory[0x00:0x20] = temp8 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                storage[keccak256(memory[0x00:0x40]) + 0x04] = 0x00;\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = temp8 & 0xffffffff;\n                var temp17 = memory[0x40:0x60];\n                log(memory[temp17:temp17 + (temp16 + 0x20) - temp17], [0x18520be5c292108dc6aa4e12344ca3a9f201415ad1633f5b9ffb4c6e19009743]);\n                return;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_1860; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getTankEarning(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x06] / 0x0100 ** 0x04 & 0xffffffff;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = (storage[keccak256(memory[0x00:0x40]) + 0x06] & 0xffffffff) - temp1 & 0xffffffff;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40]) + 0x04] * temp2;\n    }\n    \n    function cashOut(var arg0) {\n        if (!!(storage[0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 < 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n    \n        if (temp0 != temp0 & 0xffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (address(this).balance < arg0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0c;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg0) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 != 0x00) {\n            var temp1 = arg0;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0c;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = storage[temp2] - temp1;\n            var temp3 = memory[0x40:0x60];\n            var temp4;\n            temp4, memory[temp3:temp3 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n        \n            if (temp4) {\n            label_1F53:\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = arg0;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x9f5185b6b824ad17fcc1c1d1098e828613c62aa8f27fba237cbda8248272c357, msg.sender]);\n                return;\n            } else {\n            label_1F06:\n                var temp7 = arg0;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0c;\n                var temp8 = keccak256(memory[0x00:0x40]);\n                storage[temp8] = storage[temp8] + temp7;\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = temp7;\n                var temp10 = memory[0x40:0x60];\n                log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0x9f5185b6b824ad17fcc1c1d1098e828613c62aa8f27fba237cbda8248272c357, msg.sender]);\n                return;\n            }\n        } else {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0c;\n            var temp11 = storage[keccak256(memory[0x00:0x40])];\n            arg0 = temp11;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0c;\n            var temp12 = keccak256(memory[0x00:0x40]);\n            storage[temp12] = storage[temp12] - arg0;\n            var temp13 = memory[0x40:0x60];\n            var temp14;\n            temp14, memory[temp13:temp13 + 0x00] = address(msg.sender).call.gas(!arg0 * 0x08fc).value(arg0)(memory[temp13:temp13 + memory[0x40:0x60] - temp13]);\n        \n            if (temp14) { goto label_1F53; }\n            else { goto label_1F06; }\n        }\n    }\n    \n    function exportTank(var arg0, var arg1) {\n        if (!!(storage[0x03] / 0x0100 ** 0x14 & 0xff) != !!0x01) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]) + 0x03;\n        storage[temp2] = storage[temp2] + temp1;\n        var temp3 = memory[0x40:0x60];\n        var var0 = temp3;\n        memory[0x40:0x60] = var0 + 0x0120;\n        memory[var0:var0 + 0x20] = temp0 & 0xffffffff;\n        var temp4 = var0 + 0x20;\n        var temp5 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp5 + 0x80;\n        memory[temp5:temp5 + 0x20] = 0xff & 0x00;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = 0xff & 0x00;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = 0xff & 0x00;\n        memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = 0xff & 0x00;\n        memory[temp4:temp4 + 0x20] = temp5;\n        var temp8 = temp4 + 0x20;\n        var temp9 = arg0;\n        memory[temp8:temp8 + 0x20] = temp9 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp10 = temp8 + 0x20;\n        memory[temp10:temp10 + 0x20] = temp9 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp11 = temp10 + 0x20;\n        memory[temp11:temp11 + 0x20] = !!0x00;\n        var temp12 = temp11 + 0x20;\n        memory[temp12:temp12 + 0x20] = 0x00;\n        var temp13 = temp12 + 0x20;\n        memory[temp13:temp13 + 0x20] = 0x00;\n        var temp14 = temp13 + 0x20;\n        memory[temp14:temp14 + 0x20] = 0xffffffff & 0x00;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp15 = keccak256(memory[0x00:0x40]) + 0x06;\n        var temp16 = (storage[temp15] & 0xffffffff) + 0x01;\n        storage[temp15] = (temp16 & 0xffffffff) | (storage[temp15] & ~0xffffffff);\n        memory[temp14 + 0x20:temp14 + 0x20 + 0x20] = temp16 & 0xffffffff;\n        var temp17 = storage[0x03] / 0x0100 ** 0x15 & 0xffffffff;\n        storage[0x03] = (temp17 + 0x01 & 0xffffffff) * 0x0100 ** 0x15 | (storage[0x03] & ~(0xffffffff * 0x0100 ** 0x15));\n        memory[0x00:0x20] = temp17 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp18 = keccak256(memory[0x00:0x40]);\n        var var1 = temp18;\n        var temp19 = var1;\n        storage[temp19] = (memory[var0:var0 + 0x20] & 0xffffffff) | (storage[temp19] & ~0xffffffff);\n        var var2 = 0x2214;\n        var var3 = var1 + 0x01;\n        var var4 = memory[var0 + 0x20:var0 + 0x20 + 0x20];\n        var var5 = 0x04;\n        var2 = func_41DF(var3, var4, var5);\n        var temp20 = var0;\n        var temp21 = var1;\n        var temp22 = temp21 + 0x02;\n        storage[temp22] = (memory[temp20 + 0x40:temp20 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp22] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp23 = temp21 + 0x03;\n        storage[temp23] = (memory[temp20 + 0x60:temp20 + 0x60 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp23] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp24 = temp21 + 0x03;\n        storage[temp24] = !!memory[temp20 + 0x80:temp20 + 0x80 + 0x20] * 0x0100 ** 0x14 | (storage[temp24] & ~(0xff * 0x0100 ** 0x14));\n        storage[temp21 + 0x04] = memory[temp20 + 0xa0:temp20 + 0xa0 + 0x20];\n        storage[temp21 + 0x05] = memory[temp20 + 0xc0:temp20 + 0xc0 + 0x20];\n        var temp25 = temp21 + 0x06;\n        storage[temp25] = (memory[temp20 + 0xe0:temp20 + 0xe0 + 0x20] & 0xffffffff) | (storage[temp25] & ~0xffffffff);\n        var temp26 = temp21 + 0x06;\n        storage[temp26] = (memory[temp20 + 0x0100:temp20 + 0x0100 + 0x20] & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp26] & ~(0xffffffff * 0x0100 ** 0x04));\n        var0 = 0x00;\n        var1 = 0x2333;\n        var1 = tanksBeforeTheNewTankType();\n        var temp27 = var1 == var0;\n        var0 = temp27;\n    \n        if (!var0) {\n            if (!var0) {\n            label_2367:\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = arg1 & 0xffffffff;\n                var temp29 = temp28 + 0x20;\n                memory[temp29:temp29 + 0x20] = (storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) - 0x01 & 0xffffffff;\n                var temp30 = memory[0x40:0x60];\n                log(memory[temp30:temp30 + (temp29 + 0x20) - temp30], [0xa1578d536a4c08dce2b1a5bae569b81e0749e06a67e7a3f58041128656bf22b3, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n            label_235F:\n                var0 = 0x2366;\n                func_3CC1();\n                goto label_2367;\n            }\n        } else if (storage[0x03] / 0x0100 ** 0x19 & 0xffffffff > 0x79) { goto label_2367; }\n        else { goto label_235F; }\n    }\n    \n    function canExport() returns (var r0) { return storage[0x03] / 0x0100 ** 0x14 & 0xff; }\n    \n    function buyTank(var arg0) {\n        if (!!(storage[0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var0 = storage[keccak256(memory[0x00:0x40]) + 0x03] > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_2460:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n        \n            if (msg.value < storage[keccak256(memory[0x00:0x40]) + 0x03]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x05] > block.timestamp) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n        \n            if (msg.value <= storage[keccak256(memory[0x00:0x40]) + 0x03]) {\n                var temp0 = arg0;\n                memory[0x00:0x20] = temp0 & 0xffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                memory[0x00:0x20] = temp0 & 0xffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp2 = keccak256(memory[0x00:0x40]) + 0x03;\n                storage[temp2] = storage[temp2] + temp1;\n                var0 = 0x00;\n                var var1 = 0x25ba;\n                var1 = tanksBeforeTheNewTankType();\n            \n            label_25BA:\n                var temp3 = var1 == var0;\n                var0 = temp3;\n            \n                if (!var0) {\n                    if (!var0) {\n                    label_25EE:\n                        var temp4 = memory[0x40:0x60];\n                        var0 = temp4;\n                        memory[0x40:0x60] = var0 + 0x0120;\n                        var temp5 = arg0;\n                        memory[var0:var0 + 0x20] = temp5 & 0xffffffff;\n                        var temp6 = var0 + 0x20;\n                        var temp7 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp7 + 0x80;\n                        memory[temp7:temp7 + 0x20] = 0xff & 0x00;\n                        var temp8 = temp7 + 0x20;\n                        memory[temp8:temp8 + 0x20] = 0xff & 0x00;\n                        var temp9 = temp8 + 0x20;\n                        memory[temp9:temp9 + 0x20] = 0xff & 0x00;\n                        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = 0xff & 0x00;\n                        memory[temp6:temp6 + 0x20] = temp7;\n                        var temp10 = temp6 + 0x20;\n                        memory[temp10:temp10 + 0x20] = msg.sender;\n                        var temp11 = temp10 + 0x20;\n                        memory[temp11:temp11 + 0x20] = msg.sender;\n                        var temp12 = temp11 + 0x20;\n                        memory[temp12:temp12 + 0x20] = !!0x00;\n                        var temp13 = temp12 + 0x20;\n                        memory[temp13:temp13 + 0x20] = 0x00;\n                        var temp14 = temp13 + 0x20;\n                        memory[temp14:temp14 + 0x20] = 0x00;\n                        var temp15 = temp14 + 0x20;\n                        memory[temp15:temp15 + 0x20] = 0xffffffff & 0x00;\n                        memory[0x00:0x20] = temp5 & 0xffffffff;\n                        memory[0x20:0x40] = 0x07;\n                        var temp16 = keccak256(memory[0x00:0x40]) + 0x06;\n                        var temp17 = (storage[temp16] & 0xffffffff) + 0x01;\n                        storage[temp16] = (temp17 & 0xffffffff) | (storage[temp16] & ~0xffffffff);\n                        memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = temp17 & 0xffffffff;\n                        var temp18 = storage[0x03] / 0x0100 ** 0x15 & 0xffffffff;\n                        storage[0x03] = (temp18 + 0x01 & 0xffffffff) * 0x0100 ** 0x15 | (storage[0x03] & ~(0xffffffff * 0x0100 ** 0x15));\n                        memory[0x00:0x20] = temp18 & 0xffffffff;\n                        memory[0x20:0x40] = 0x06;\n                        var temp19 = keccak256(memory[0x00:0x40]);\n                        var1 = temp19;\n                        var temp20 = var1;\n                        storage[temp20] = (memory[var0:var0 + 0x20] & 0xffffffff) | (storage[temp20] & ~0xffffffff);\n                        var var2 = 0x278e;\n                        var var3 = var1 + 0x01;\n                        var var5 = 0x04;\n                        var var4 = memory[var0 + 0x20:var0 + 0x20 + 0x20];\n                        var2 = func_41DF(var3, var4, var5);\n                        var temp21 = var0;\n                        var temp22 = var1;\n                        var temp23 = temp22 + 0x02;\n                        storage[temp23] = (memory[temp21 + 0x40:temp21 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp23] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        var temp24 = temp22 + 0x03;\n                        storage[temp24] = (memory[temp21 + 0x60:temp21 + 0x60 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp24] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        var temp25 = temp22 + 0x03;\n                        storage[temp25] = !!memory[temp21 + 0x80:temp21 + 0x80 + 0x20] * 0x0100 ** 0x14 | (storage[temp25] & ~(0xff * 0x0100 ** 0x14));\n                        storage[temp22 + 0x04] = memory[temp21 + 0xa0:temp21 + 0xa0 + 0x20];\n                        storage[temp22 + 0x05] = memory[temp21 + 0xc0:temp21 + 0xc0 + 0x20];\n                        var temp26 = temp22 + 0x06;\n                        storage[temp26] = (memory[temp21 + 0xe0:temp21 + 0xe0 + 0x20] & 0xffffffff) | (storage[temp26] & ~0xffffffff);\n                        var temp27 = temp22 + 0x06;\n                        storage[temp27] = (memory[temp21 + 0x0100:temp21 + 0x0100 + 0x20] & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp27] & ~(0xffffffff * 0x0100 ** 0x04));\n                        var temp28 = arg0;\n                        memory[0x00:0x20] = temp28 & 0xffffffff;\n                        memory[0x20:0x40] = 0x07;\n                        var temp29 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                        memory[0x00:0x20] = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x0c;\n                        var temp30 = keccak256(memory[0x00:0x40]);\n                        storage[temp30] = storage[temp30] + temp29;\n                        var temp31 = memory[0x40:0x60];\n                        memory[temp31:temp31 + 0x20] = temp28 & 0xffffffff;\n                        var temp32 = temp31 + 0x20;\n                        memory[temp32:temp32 + 0x20] = (storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) - 0x01 & 0xffffffff;\n                        var temp33 = memory[0x40:0x60];\n                        log(memory[temp33:temp33 + (temp32 + 0x20) - temp33], [0xa1578d536a4c08dce2b1a5bae569b81e0749e06a67e7a3f58041128656bf22b3, msg.sender]);\n                        return;\n                    } else {\n                    label_25E6:\n                        var0 = 0x25ed;\n                        func_3CC1();\n                        goto label_25EE;\n                    }\n                } else if (storage[0x03] / 0x0100 ** 0x19 & 0xffffffff > 0x79) { goto label_25EE; }\n                else { goto label_25E6; }\n            } else {\n                var temp34 = arg0;\n                memory[0x00:0x20] = temp34 & 0xffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp35 = msg.value - storage[keccak256(memory[0x00:0x40]) + 0x03];\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0c;\n                var temp36 = keccak256(memory[0x00:0x40]);\n                storage[temp36] = storage[temp36] + temp35;\n                memory[0x00:0x20] = temp34 & 0xffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp37 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                memory[0x00:0x20] = temp34 & 0xffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp38 = keccak256(memory[0x00:0x40]) + 0x03;\n                storage[temp38] = storage[temp38] + temp37;\n                var0 = 0x00;\n                var1 = 0x25ba;\n                var1 = tanksBeforeTheNewTankType();\n                goto label_25BA;\n            }\n        } else if (msg.value > 0x00) { goto label_2460; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getContractBalance() returns (var r0) { return address(this).balance; }\n    \n    function getTankAuctionEntity(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40]) + 0x04];\n    }\n    \n    function ChangeTankSellMaster(var arg0) {\n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function cashOutTank(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!!(storage[0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_2B08:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x06] / 0x0100 ** 0x04 & 0xffffffff;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n            var temp2 = (storage[keccak256(memory[0x00:0x40]) + 0x06] & 0xffffffff) - temp1 & 0xffffffff;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n            var0 = storage[keccak256(memory[0x00:0x40]) + 0x04] * temp2;\n        \n            if (address(this).balance < var0) { revert(memory[0x00:0x00]); }\n        \n            if (var0 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var temp3 = arg0;\n            memory[0x00:0x20] = temp3 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var1 = storage[keccak256(memory[0x00:0x40]) + 0x06] / 0x0100 ** 0x04 & 0xffffffff;\n            memory[0x00:0x20] = temp3 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n            var temp4 = storage[keccak256(memory[0x00:0x40]) + 0x06] & 0xffffffff;\n            memory[0x00:0x20] = temp3 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp5 = keccak256(memory[0x00:0x40]) + 0x06;\n            storage[temp5] = (temp4 & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp5] & ~(0xffffffff * 0x0100 ** 0x04));\n            memory[0x00:0x20] = temp3 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp6 = var0;\n            var temp7 = memory[0x40:0x60];\n            var temp8;\n            temp8, memory[temp7:temp7 + 0x00] = address(storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp7:temp7 + memory[0x40:0x60] - temp7]);\n        \n            if (temp8) {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var0;\n                var temp10 = memory[0x40:0x60];\n                log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0x9f5185b6b824ad17fcc1c1d1098e828613c62aa8f27fba237cbda8248272c357, msg.sender]);\n                return;\n            } else {\n                memory[0x00:0x20] = arg0 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp11 = keccak256(memory[0x00:0x40]) + 0x06;\n                storage[temp11] = (var1 & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp11] & ~(0xffffffff * 0x0100 ** 0x04));\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var0;\n                var temp13 = memory[0x40:0x60];\n                log(memory[temp13:temp13 + (temp12 + 0x20) - temp13], [0x9f5185b6b824ad17fcc1c1d1098e828613c62aa8f27fba237cbda8248272c357, msg.sender]);\n                return;\n            }\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_2B08; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function _transfer(var arg0, var arg1) {\n        var var0 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_2EDA:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender == arg1 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg1;\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp2 = keccak256(memory[0x00:0x40]) + 0x02;\n            storage[temp2] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = temp1 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp3 = keccak256(memory[0x00:0x40]) + 0x03;\n            storage[temp3] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp1 & 0xffffffff;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x113bb8db9c3f402e36400928c81a0e95afa1d1cb577216ecf25bfd7c8b4641f7, msg.sender, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_2EDA; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getTankProduct(var arg0) returns (var r0) {\n        var var0 = 0x3112;\n        var0 = func_41B1();\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xc0;\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffff;\n        memory[0x20:0x40] = 0x08;\n        memory[temp0:temp0 + 0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        var temp2 = temp0 + 0x20;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffff;\n        memory[0x20:0x40] = 0x08;\n        memory[temp2:temp2 + 0x20] = storage[keccak256(memory[0x00:0x40])] / 0x0100 ** 0x04 & 0xffffffff;\n        var temp3 = temp2 + 0x20;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] / 0x0100 ** 0x04 & 0xffffffff;\n        memory[0x20:0x40] = 0x0a;\n        memory[temp3:temp3 + 0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        var temp4 = temp3 + 0x20;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] / 0x0100 ** 0x04 & 0xffffffff;\n        memory[0x20:0x40] = 0x0a;\n        memory[temp4:temp4 + 0x20] = storage[keccak256(memory[0x00:0x40])] / 0x0100 ** 0x04 & 0xffffffff;\n        var temp5 = temp4 + 0x20;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] / 0x0100 ** 0x04 & 0xffffffff;\n        memory[0x20:0x40] = 0x0a;\n        memory[temp5:temp5 + 0x20] = storage[keccak256(memory[0x00:0x40])] / 0x0100 ** 0x08 & 0xffffffff;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = storage[keccak256(memory[0x00:0x40]) + 0x05] & 0xffffffff;\n        return temp0;\n    }\n    \n    function getTankTotalEarned(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40]) + 0x05];\n    }\n    \n    function ChangeUpgradeMaster(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function getTankOwner(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function createNewTankWeapon() returns (var r0) { return storage[0x04] / 0x0100 ** 0x0c & 0xffffffff; }\n    \n    function AuctionMaster() returns (var r0) { return storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function sellTank(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_3535:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n        \n            if (arg1 < arg2) { revert(memory[0x00:0x00]); }\n        \n            var0 = arg1 > 0x00;\n        \n            if (!var0) {\n                if (!var0) { revert(memory[0x00:0x00]); }\n            \n            label_361E:\n            \n                if (arg3 <= 0x00) { revert(memory[0x00:0x00]); }\n            \n                var temp0 = arg1;\n            \n                if (temp0 != temp0 & 0xffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n            \n                var temp1 = arg2;\n            \n                if (temp1 != temp1 & 0xffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n            \n                var temp2 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp2 + 0xa0;\n                var temp3 = arg0;\n                memory[temp2:temp2 + 0x20] = temp3 & 0xffffffff;\n                var temp4 = temp2 + 0x20;\n                var temp5 = arg1;\n                memory[temp4:temp4 + 0x20] = temp5;\n                var temp6 = temp4 + 0x20;\n                var temp7 = arg2;\n                memory[temp6:temp6 + 0x20] = temp7;\n                var temp8 = temp6 + 0x20;\n                memory[temp8:temp8 + 0x20] = block.timestamp;\n                var temp9 = arg3;\n                memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp9;\n                memory[0x00:0x20] = storage[0x05];\n                memory[0x20:0x40] = 0x0b;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                var temp11 = temp10;\n                storage[temp11] = (memory[temp2:temp2 + 0x20] & 0xffffffff) | (storage[temp11] & ~0xffffffff);\n                storage[temp10 + 0x01] = memory[temp2 + 0x20:temp2 + 0x20 + 0x20];\n                storage[temp10 + 0x02] = memory[temp2 + 0x40:temp2 + 0x40 + 0x20];\n                storage[temp10 + 0x03] = memory[temp2 + 0x60:temp2 + 0x60 + 0x20];\n                storage[temp10 + 0x04] = memory[temp2 + 0x80:temp2 + 0x80 + 0x20];\n                memory[0x00:0x20] = temp3 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp12 = keccak256(memory[0x00:0x40]) + 0x03;\n                storage[temp12] = (storage[temp12] & ~(0xff * 0x0100 ** 0x14)) | 0x0100 ** 0x14;\n                var temp13 = storage[0x05];\n                storage[0x05] = temp13 + 0x01;\n                memory[0x00:0x20] = temp3 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                storage[keccak256(memory[0x00:0x40]) + 0x04] = temp13;\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = temp3 & 0xffffffff;\n                var temp15 = temp14 + 0x20;\n                memory[temp15:temp15 + 0x20] = temp5;\n                var temp16 = temp15 + 0x20;\n                memory[temp16:temp16 + 0x20] = temp7;\n                var temp17 = temp16 + 0x20;\n                memory[temp17:temp17 + 0x20] = temp9;\n                var temp18 = temp17 + 0x20;\n                memory[temp18:temp18 + 0x20] = block.timestamp;\n                var temp19 = memory[0x40:0x60];\n                log(memory[temp19:temp19 + (temp18 + 0x20) - temp19], [0xf6b924f817282ac2c02fb828bdc9a6c812e6c87369d31c4b7dbd286ea158ffe2, msg.sender]);\n                return;\n            } else if (arg2 >= 0x00) { goto label_361E; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_3535; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function newIdTankWeapon() returns (var r0) { return storage[0x04] / 0x0100 ** 0x04 & 0xffffffff; }\n    \n    function tanksBeforeTheNewTankType() returns (var r0) { return (((storage[0x03] / 0x0100 ** 0x19 & 0xffffffff) + 0x0a) * ((storage[0x03] / 0x0100 ** 0x19 & 0xffffffff) + 0x0a) * ((storage[0x03] / 0x0100 ** 0x19 & 0xffffffff) - 0x0b) + 0x03e8) - (storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) & 0xffffffff; }\n    \n    function howManyTanks() returns (var r0) { return storage[0x03] / 0x0100 ** 0x19 & 0xffffffff; }\n    \n    function getProductEarning(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40]) + 0x04];\n    }\n    \n    function exportTankResetEarning(var arg0) {\n        if (!!(storage[0x03] / 0x0100 ** 0x14 & 0xff) != !!0x01) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x06] & 0xffffffff;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]) + 0x06;\n        storage[temp2] = (temp1 & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp2] & ~(0xffffffff * 0x0100 ** 0x04));\n    }\n    \n    function _transferAction(var arg0, var arg1, var arg2) {\n        var var0 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_3A1C:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender == arg1 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg1;\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp2 = keccak256(memory[0x00:0x40]) + 0x02;\n            storage[temp2] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = temp1 & 0xffffffff;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = arg2 & 0xff;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xf77685804f81b41b8882a2b139a0e44bcabacefd99f6702aff10c4d0fa64c15a, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_3A1C; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function ExportMaster() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function TankSellMaster() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function createNewTankHull() returns (var r0) { return storage[0x04] / 0x0100 ** 0x08 & 0xffffffff; }\n    \n    function getPlayerBalance(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function newIdAuctionEntity() returns (var r0) { return storage[0x05]; }\n    \n    function newIdTankHull() returns (var r0) { return storage[0x04] & 0xffffffff; }\n    \n    function func_3CC1() {\n        if (storage[0x03] / 0x0100 ** 0x19 & 0xffffffff > 0x79) { goto label_3EED; }\n    \n        var var0 = storage[0x04] / 0x0100 ** 0x08 & 0xffffffff < (storage[0x04] & 0xffffffff) - 0x01 & 0xffffffff;\n    \n        if (!var0) {\n            if (!var0) {\n            label_3DC2:\n                storage[0x04] = ((storage[0x04] / 0x0100 ** 0x0c & 0xffffffff) + 0x01 & 0xffffffff) * 0x0100 ** 0x0c | (storage[0x04] & ~(0xffffffff * 0x0100 ** 0x0c));\n            \n                if (storage[0x04] / 0x0100 ** 0x08 & 0xffffffff != storage[0x04] / 0x0100 ** 0x0c & 0xffffffff) {\n                label_3E72:\n                    var0 = 0x3eec;\n                    var temp0 = memory[0x40:0x60];\n                    var var1 = temp0;\n                    memory[0x40:0x60] = var1 + 0x40;\n                    memory[var1:var1 + 0x20] = 0x04;\n                    memory[var1 + 0x20:var1 + 0x20 + 0x20] = 0x54616e6b00000000000000000000000000000000000000000000000000000000;\n                    var var2 = storage[0x04] / 0x0100 ** 0x08 & 0xffffffff;\n                    var var3 = storage[0x04] / 0x0100 ** 0x0c & 0xffffffff;\n                    var var4 = 0x02c68af0bb140000;\n                    var var5 = 0x0aa87bee538000;\n                    var var6 = block.timestamp + 0x0e10;\n                    func_3EEF(var1, var2, var3, var4, var5, var6);\n                \n                label_3EED:\n                    return;\n                } else {\n                    storage[0x04] = ((storage[0x04] / 0x0100 ** 0x0c & 0xffffffff) + 0x01 & 0xffffffff) * 0x0100 ** 0x0c | (storage[0x04] & ~(0xffffffff * 0x0100 ** 0x0c));\n                    goto label_3E72;\n                }\n            } else {\n            label_3D61:\n                storage[0x04] = (storage[0x04] & ~(0xffffffff * 0x0100 ** 0x0c)) | 0x0100 ** 0x0c;\n                storage[0x04] = ((storage[0x04] / 0x0100 ** 0x08 & 0xffffffff) + 0x01 & 0xffffffff) * 0x0100 ** 0x08 | (storage[0x04] & ~(0xffffffff * 0x0100 ** 0x08));\n                goto label_3E72;\n            }\n        } else if (storage[0x04] / 0x0100 ** 0x0c & 0xffffffff < (storage[0x04] / 0x0100 ** 0x04 & 0xffffffff) - 0x01 & 0xffffffff) { goto label_3DC2; }\n        else { goto label_3D61; }\n    }\n    \n    function func_3EEF(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var temp0 = memory[0x40:0x60];\n        var var0 = temp0;\n        memory[0x40:0x60] = var0 + 0x0100;\n        memory[var0:var0 + 0x20] = arg0;\n        var temp1 = var0 + 0x20;\n        memory[temp1:temp1 + 0x20] = arg1 & 0xffffffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg2 & 0xffffffff;\n        var temp3 = temp2 + 0x20;\n        var temp4 = arg3;\n        memory[temp3:temp3 + 0x20] = temp4;\n        var temp5 = temp3 + 0x20;\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg4;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = arg5;\n        memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = 0xffffffff & 0x00;\n        var temp8 = storage[0x03] / 0x0100 ** 0x19 & 0xffffffff;\n        storage[0x03] = (temp8 + 0x01 & 0xffffffff) * 0x0100 ** 0x19 | (storage[0x03] & ~(0xffffffff * 0x0100 ** 0x19));\n        memory[0x00:0x20] = temp8 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var1 = keccak256(memory[0x00:0x40]);\n        var temp9 = memory[var0:var0 + 0x20];\n        var var2 = 0x3fb1;\n        var var3 = var1;\n        var var4 = temp9 + 0x20;\n        var var5 = memory[temp9:temp9 + 0x20];\n        var2 = func_4279(var3, var4, var5);\n        var temp10 = var0;\n        var temp11 = var1;\n        var temp12 = temp11 + 0x01;\n        storage[temp12] = (memory[temp10 + 0x20:temp10 + 0x20 + 0x20] & 0xffffffff) | (storage[temp12] & ~0xffffffff);\n        var temp13 = temp11 + 0x01;\n        storage[temp13] = (memory[temp10 + 0x40:temp10 + 0x40 + 0x20] & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp13] & ~(0xffffffff * 0x0100 ** 0x04));\n        storage[temp11 + 0x02] = memory[temp10 + 0x60:temp10 + 0x60 + 0x20];\n        storage[temp11 + 0x03] = memory[temp10 + 0x80:temp10 + 0x80 + 0x20];\n        storage[temp11 + 0x04] = memory[temp10 + 0xa0:temp10 + 0xa0 + 0x20];\n        storage[temp11 + 0x05] = memory[temp10 + 0xc0:temp10 + 0xc0 + 0x20];\n        var temp14 = temp11 + 0x06;\n        storage[temp14] = (memory[temp10 + 0xe0:temp10 + 0xe0 + 0x20] & 0xffffffff) | (storage[temp14] & ~0xffffffff);\n        var0 = 0x54675320a731020d705bcc2541a314d97fb5e538182801e632f28fed6649baa7;\n        var1 = (storage[0x03] / 0x0100 ** 0x19 & 0xffffffff) - 0x01;\n        var temp15 = arg0;\n        var2 = temp15;\n        var3 = arg1;\n        var4 = arg2;\n        var5 = arg3;\n        var var6 = arg4;\n        var var7 = arg5;\n        var var8 = block.timestamp;\n        var temp16 = memory[0x40:0x60];\n        var var9 = temp16;\n        memory[var9:var9 + 0x20] = var1 & 0xffffffff;\n        var temp17 = var9 + 0x20;\n        var var10 = temp17;\n        var temp18 = var10 + 0x20;\n        memory[temp18:temp18 + 0x20] = var3 & 0xffffffff;\n        var temp19 = temp18 + 0x20;\n        memory[temp19:temp19 + 0x20] = var4 & 0xffffffff;\n        var temp20 = temp19 + 0x20;\n        memory[temp20:temp20 + 0x20] = var5;\n        var temp21 = temp20 + 0x20;\n        memory[temp21:temp21 + 0x20] = var6;\n        var temp22 = temp21 + 0x20;\n        memory[temp22:temp22 + 0x20] = var7;\n        var temp23 = temp22 + 0x20;\n        memory[temp23:temp23 + 0x20] = var8;\n        var temp24 = temp23 + 0x20;\n        memory[var10:var10 + 0x20] = temp24 - var9;\n        memory[temp24:temp24 + 0x20] = memory[var2:var2 + 0x20];\n        var var11 = temp24 + 0x20;\n        var var13 = memory[var2:var2 + 0x20];\n        var var12 = var2 + 0x20;\n        var var14 = var13;\n        var var15 = var11;\n        var var16 = var12;\n        var var17 = 0x00;\n    \n        if (var17 >= var14) {\n        label_411E:\n            var temp25 = var13;\n            var11 = temp25 + var11;\n            var12 = temp25 & 0x1f;\n        \n            if (!var12) {\n                var temp26 = memory[0x40:0x60];\n                log(memory[temp26:temp26 + var11 - temp26], [stack[-13]]);\n                return;\n            } else {\n                var temp27 = var12;\n                var temp28 = var11 - temp27;\n                memory[temp28:temp28 + 0x20] = ~(0x0100 ** (0x20 - temp27) - 0x01) & memory[temp28:temp28 + 0x20];\n                var temp29 = memory[0x40:0x60];\n                log(memory[temp29:temp29 + (temp28 + 0x20) - temp29], [stack[-13]]);\n                return;\n            }\n        } else {\n        label_410C:\n            var temp30 = var17;\n            memory[var15 + temp30:var15 + temp30 + 0x20] = memory[var16 + temp30:var16 + temp30 + 0x20];\n            var17 = temp30 + 0x20;\n        \n            if (var17 >= var14) { goto label_411E; }\n            else { goto label_410C; }\n        }\n    }\n    \n    function func_4167() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = 0xffffffff & 0x00;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x00;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = 0x00;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = 0x00;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_419D() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_41B1() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        var var0 = temp0;\n        memory[0x40:0x60] = var0 + 0xc0;\n        memory[var0:var0 + 0x20] = 0xffffffff & 0x00;\n        var var2 = var0 + 0x20;\n        var var1 = 0x06 - 0x01;\n    \n        if (!var1) { goto label_41DA; }\n    \n    label_41C1:\n        var temp1 = var2;\n        memory[temp1:temp1 + 0x20] = 0xffffffff & 0x00;\n        var2 = temp1 + 0x20;\n        var1 = var1 - 0x01;\n    \n        if (var1) { goto label_41C1; }\n    \n    label_41DA:\n        return var0;\n    }\n    \n    function func_41DF(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = arg0;\n        var var1 = arg1;\n        arg1 = var0 + (0x1f + 0x04) / 0x20;\n    \n        if (!arg2) {\n        label_4268:\n            var temp0 = arg1;\n            arg1 = 0x4275;\n            var0 = var0;\n            arg2 = temp0;\n            arg1 = func_42F9(arg2, var0);\n            return arg0;\n        } else {\n            var temp1 = arg2;\n            var temp2 = var1;\n            arg2 = temp2;\n            var1 = arg2 + temp1 * 0x20;\n            var var2 = 0x00;\n        \n            if (var1 <= arg2) {\n            label_4239:\n            \n                if (!var2) { goto label_4268; }\n            \n                var temp3 = var0;\n                var temp4 = var2;\n                storage[temp3] = ~(0x0100 ** temp4 * 0xff) & storage[temp3];\n                var temp5 = temp4 + 0x01;\n                var temp6 = temp5 / 0x20;\n                var0 = temp6 + temp3;\n                var2 = 0x01 - temp6 * temp5;\n                goto label_4239;\n            } else {\n            label_4204:\n                var temp7 = arg2;\n                var temp8 = var0;\n                var temp9 = var2;\n                var temp10 = 0x0100 ** temp9;\n                storage[temp8] = (memory[temp7:temp7 + 0x20] & 0xff) * temp10 | (~(temp10 * 0xff) & storage[temp8]);\n                arg2 = temp7 + 0x20;\n                var temp11 = temp9 + 0x01;\n                var temp12 = temp11 / 0x20;\n                var0 = temp12 + temp8;\n                var2 = 0x01 - temp12 * temp11;\n            \n                if (var1 <= arg2) { goto label_4239; }\n                else { goto label_4204; }\n            }\n        }\n    }\n    \n    function func_4279(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_42E8:\n                var temp4 = arg1;\n                arg1 = 0x42f5;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_4329(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = var1;\n                var temp6 = arg2;\n                arg2 = temp5;\n                var1 = arg2 + temp6;\n            \n                if (var1 <= arg2) {\n                label_42E7:\n                    goto label_42E8;\n                } else {\n                label_42D5:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var0 = temp8 + 0x01;\n                    var1 = var1;\n                \n                    if (var1 <= arg2) { goto label_42E7; }\n                    else { goto label_42D5; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_42E8;\n        }\n    }\n    \n    function func_42F9(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x4326;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_4322(arg1, var0); }\n    \n    label_4308:\n        var temp2 = var0;\n        storage[temp2] = storage[temp2] & ~0xff;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_4308; }\n    \n        arg0 = func_4322(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_4322(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_4329(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x434b;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_4347(arg1, var0); }\n    \n    label_4338:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_4338; }\n    \n        arg0 = func_4347(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_4347(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x09c25e6c) {\n            // Dispatch table entry for FinishedExporting()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0232;\n            FinishedExporting();\n            stop();\n        } else if (var0 == 0x09ca4b76) {\n            // Dispatch table entry for getCurrentPriceAuction(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x025b;\n            var var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getCurrentPriceAuction(var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n        } else if (var0 == 0x1e5571bc) {\n            // Dispatch table entry for getTankSell(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0298;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankSell(var2);\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = !!var1;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n        } else if (var0 == 0x215de791) {\n            // Dispatch table entry for getTankName(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d9;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankName(var2);\n            var temp4 = memory[0x40:0x60];\n            var2 = temp4;\n            var var3 = var2;\n            var temp5 = var3 + 0x20;\n            memory[var3:var3 + 0x20] = temp5 - var3;\n            var temp6 = var1;\n            memory[temp5:temp5 + 0x20] = memory[temp6:temp6 + 0x20];\n            var var4 = temp5 + 0x20;\n            var var5 = temp6 + 0x20;\n            var var6 = memory[temp6:temp6 + 0x20];\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n            var var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_0319:\n                var temp7 = var6;\n                var4 = temp7 + var4;\n                var5 = temp7 & 0x1f;\n            \n                if (!var5) {\n                    var temp8 = memory[0x40:0x60];\n                    return memory[temp8:temp8 + var4 - temp8];\n                } else {\n                    var temp9 = var5;\n                    var temp10 = var4 - temp9;\n                    memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                    var temp11 = memory[0x40:0x60];\n                    return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n                }\n            } else {\n            label_0307:\n                var temp12 = var10;\n                memory[var8 + temp12:var8 + temp12 + 0x20] = memory[var9 + temp12:var9 + temp12 + 0x20];\n                var10 = temp12 + 0x20;\n            \n                if (var10 >= var7) { goto label_0319; }\n                else { goto label_0307; }\n            }\n        } else if (var0 == 0x21b920eb) {\n            // Dispatch table entry for upgradeTank(uint32,uint8)\n            var1 = 0x037c;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44] & 0xff;\n            upgradeTank(var2, var3);\n            stop();\n        } else if (var0 == 0x27eac914) {\n            // Dispatch table entry for cancelAuction(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03a5;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            cancelAuction(var2);\n            stop();\n        } else if (var0 == 0x287ad39f) {\n            // Dispatch table entry for upgradePrice()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ba;\n            var2 = upgradePrice();\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = var2;\n            var temp14 = memory[0x40:0x60];\n            return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n        } else if (var0 == 0x3a7d280c) {\n            // Dispatch table entry for login(string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x042b;\n            var temp15 = msg.data[0x04:0x24] + 0x04;\n            var temp16 = msg.data[temp15:temp15 + 0x20];\n            var temp17 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp17:temp17 + 0x20] = temp16;\n            memory[temp17 + 0x20:temp17 + 0x20 + temp16] = msg.data[temp15 + 0x20:temp15 + 0x20 + temp16];\n            var2 = temp17;\n            login(var2);\n            stop();\n        } else if (var0 == 0x3b61f5f5) {\n            // Dispatch table entry for ChangeAuctionMaster(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0464;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            ChangeAuctionMaster(var2);\n            stop();\n        } else if (var0 == 0x3ea0fb3e) {\n            // Dispatch table entry for getCurrentPrice(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x048d;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getCurrentPrice(var2);\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = var1;\n            var temp19 = memory[0x40:0x60];\n            return memory[temp19:temp19 + (temp18 + 0x20) - temp19];\n        } else if (var0 == 0x455fea46) {\n            // Dispatch table entry for getTankDetails(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04ca;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankDetails(var2);\n            var2 = memory[0x40:0x60];\n            var3 = var2;\n            var4 = var1;\n            var5 = 0x20 * 0x06;\n            var6 = var5;\n            var7 = var3;\n            var8 = var4;\n            var9 = 0x00;\n        \n            if (var9 >= var6) {\n            label_04F5:\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (var5 + var3) - temp20];\n            } else {\n            label_04E3:\n                var temp21 = var9;\n                memory[var7 + temp21:var7 + temp21 + 0x20] = memory[var8 + temp21:var8 + temp21 + 0x20];\n                var9 = temp21 + 0x20;\n            \n                if (var9 >= var6) { goto label_04F5; }\n                else { goto label_04E3; }\n            }\n        } else if (var0 == 0x48318cbc) {\n            // Dispatch table entry for newIdTankProduct()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x051b;\n            var2 = newIdTankProduct();\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = var2 & 0xffffffff;\n            var temp23 = memory[0x40:0x60];\n            return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n        } else if (var0 == 0x4a367d73) {\n            // Dispatch table entry for UpgradeMaster()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0550;\n            var2 = UpgradeMaster();\n            var temp24 = memory[0x40:0x60];\n            memory[temp24:temp24 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp25 = memory[0x40:0x60];\n            return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n        } else if (var0 == 0x4ceab75e) {\n            // Dispatch table entry for newIdTank()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x05a5;\n            var2 = newIdTank();\n            var temp26 = memory[0x40:0x60];\n            memory[temp26:temp26 + 0x20] = var2 & 0xffffffff;\n            var temp27 = memory[0x40:0x60];\n            return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n        } else if (var0 == 0x51ffcab3) {\n            // Dispatch table entry for bid(uint32)\n            var1 = 0x05e3;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            bid(var2);\n            stop();\n        } else if (var0 == 0x5b0d5b55) {\n            // Dispatch table entry for getTankEarning(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x060c;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankEarning(var2);\n            var temp28 = memory[0x40:0x60];\n            memory[temp28:temp28 + 0x20] = var1;\n            var temp29 = memory[0x40:0x60];\n            return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n        } else if (var0 == 0x5c7b79f5) {\n            // Dispatch table entry for cashOut(uint256)\n            var1 = 0x0638;\n            var2 = msg.data[0x04:0x24];\n            cashOut(var2);\n            stop();\n        } else if (var0 == 0x68999d76) {\n            // Dispatch table entry for exportTank(address,uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0680;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffff;\n            exportTank(var2, var3);\n            stop();\n        } else if (var0 == 0x6cd8f433) {\n            // Dispatch table entry for canExport()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0695;\n            var2 = canExport();\n            var temp30 = memory[0x40:0x60];\n            memory[temp30:temp30 + 0x20] = !!var2;\n            var temp31 = memory[0x40:0x60];\n            return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n        } else if (var0 == 0x6e233918) {\n            // Dispatch table entry for buyTank(uint32)\n            var1 = 0x06cb;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            buyTank(var2);\n            stop();\n        } else if (var0 == 0x6f9fb98a) {\n            // Dispatch table entry for getContractBalance()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x06e0;\n            var1 = getContractBalance();\n            var temp32 = memory[0x40:0x60];\n            memory[temp32:temp32 + 0x20] = var1;\n            var temp33 = memory[0x40:0x60];\n            return memory[temp33:temp33 + (temp32 + 0x20) - temp33];\n        } else if (var0 == 0x70a06777) {\n            // Dispatch table entry for getTankAuctionEntity(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x071d;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankAuctionEntity(var2);\n            var temp34 = memory[0x40:0x60];\n            memory[temp34:temp34 + 0x20] = var1;\n            var temp35 = memory[0x40:0x60];\n            return memory[temp35:temp35 + (temp34 + 0x20) - temp35];\n        } else if (var0 == 0x72411849) {\n            // Dispatch table entry for ChangeTankSellMaster(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x076a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            ChangeTankSellMaster(var2);\n            stop();\n        } else if (var0 == 0x8301fb2e) {\n            // Dispatch table entry for cashOutTank(uint32)\n            var1 = 0x0788;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            cashOutTank(var2);\n            stop();\n        } else if (var0 == 0x83773de8) {\n            // Dispatch table entry for _transfer(uint32,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x07d0;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            _transfer(var2, var3);\n            stop();\n        } else if (var0 == 0x86d6c8a0) {\n            // Dispatch table entry for getTankProduct(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x07f9;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankProduct(var2);\n            var2 = memory[0x40:0x60];\n            var3 = var2;\n            var4 = var1;\n            var5 = 0x20 * 0x06;\n            var6 = var5;\n            var7 = var3;\n            var8 = var4;\n            var9 = 0x00;\n        \n            if (var9 >= var6) {\n            label_0824:\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (var5 + var3) - temp36];\n            } else {\n            label_0812:\n                var temp37 = var9;\n                memory[var7 + temp37:var7 + temp37 + 0x20] = memory[var8 + temp37:var8 + temp37 + 0x20];\n                var9 = temp37 + 0x20;\n            \n                if (var9 >= var6) { goto label_0824; }\n                else { goto label_0812; }\n            }\n        } else if (var0 == 0x8d81e2c0) {\n            // Dispatch table entry for getTankTotalEarned(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x085e;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankTotalEarned(var2);\n            var temp38 = memory[0x40:0x60];\n            memory[temp38:temp38 + 0x20] = var1;\n            var temp39 = memory[0x40:0x60];\n            return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n        } else if (var0 == 0x8f3956a4) {\n            // Dispatch table entry for ChangeUpgradeMaster(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x08ab;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            ChangeUpgradeMaster(var2);\n            stop();\n        } else if (var0 == 0x8f426437) {\n            // Dispatch table entry for getTankOwner(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x08d4;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getTankOwner(var2);\n            var temp40 = memory[0x40:0x60];\n            memory[temp40:temp40 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp41 = memory[0x40:0x60];\n            return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n        } else if (var0 == 0x90a251da) {\n            // Dispatch table entry for createNewTankWeapon()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0929;\n            var2 = createNewTankWeapon();\n            var temp42 = memory[0x40:0x60];\n            memory[temp42:temp42 + 0x20] = var2 & 0xffffffff;\n            var temp43 = memory[0x40:0x60];\n            return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n        } else if (var0 == 0x90c3a370) {\n            // Dispatch table entry for AuctionMaster()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x095e;\n            var2 = AuctionMaster();\n            var temp44 = memory[0x40:0x60];\n            memory[temp44:temp44 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp45 = memory[0x40:0x60];\n            return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n        } else if (var0 == 0x97fa346d) {\n            // Dispatch table entry for sellTank(uint32,uint256,uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x09e2;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64];\n            var5 = msg.data[0x64:0x84];\n            sellTank(var2, var3, var4, var5);\n            stop();\n        } else if (var0 == 0xa19c406a) {\n            // Dispatch table entry for newIdTankWeapon()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x09f7;\n            var2 = newIdTankWeapon();\n            var temp46 = memory[0x40:0x60];\n            memory[temp46:temp46 + 0x20] = var2 & 0xffffffff;\n            var temp47 = memory[0x40:0x60];\n            return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n        } else if (var0 == 0xa324f8bf) {\n            // Dispatch table entry for tanksBeforeTheNewTankType()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a2c;\n            var1 = tanksBeforeTheNewTankType();\n            var temp48 = memory[0x40:0x60];\n            memory[temp48:temp48 + 0x20] = var1;\n            var temp49 = memory[0x40:0x60];\n            return memory[temp49:temp49 + (temp48 + 0x20) - temp49];\n        } else if (var0 == 0xa8ae5eb8) {\n            // Dispatch table entry for howManyTanks()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a55;\n            var1 = howManyTanks();\n            var temp50 = memory[0x40:0x60];\n            memory[temp50:temp50 + 0x20] = var1 & 0xffffffff;\n            var temp51 = memory[0x40:0x60];\n            return memory[temp51:temp51 + (temp50 + 0x20) - temp51];\n        } else if (var0 == 0xaa077992) {\n            // Dispatch table entry for getProductEarning(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a9e;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var1 = getProductEarning(var2);\n            var temp52 = memory[0x40:0x60];\n            memory[temp52:temp52 + 0x20] = var1;\n            var temp53 = memory[0x40:0x60];\n            return memory[temp53:temp53 + (temp52 + 0x20) - temp53];\n        } else if (var0 == 0xaa4ac835) {\n            // Dispatch table entry for exportTankResetEarning(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0adb;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            exportTankResetEarning(var2);\n            stop();\n        } else if (var0 == 0xafe007b6) {\n            // Dispatch table entry for _transferAction(uint32,address,uint8)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b2f;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = msg.data[0x44:0x64] & 0xff;\n            _transferAction(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xb7e83329) {\n            // Dispatch table entry for ExportMaster()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b44;\n            var2 = ExportMaster();\n            var temp54 = memory[0x40:0x60];\n            memory[temp54:temp54 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp55 = memory[0x40:0x60];\n            return memory[temp55:temp55 + (temp54 + 0x20) - temp55];\n        } else if (var0 == 0xd09677df) {\n            // Dispatch table entry for TankSellMaster()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b99;\n            var2 = TankSellMaster();\n            var temp56 = memory[0x40:0x60];\n            memory[temp56:temp56 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp57 = memory[0x40:0x60];\n            return memory[temp57:temp57 + (temp56 + 0x20) - temp57];\n        } else if (var0 == 0xd8754716) {\n            // Dispatch table entry for createNewTankHull()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0bee;\n            var2 = createNewTankHull();\n            var temp58 = memory[0x40:0x60];\n            memory[temp58:temp58 + 0x20] = var2 & 0xffffffff;\n            var temp59 = memory[0x40:0x60];\n            return memory[temp59:temp59 + (temp58 + 0x20) - temp59];\n        } else if (var0 == 0xe2734c93) {\n            // Dispatch table entry for getPlayerBalance(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c47;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = getPlayerBalance(var2);\n            var temp60 = memory[0x40:0x60];\n            memory[temp60:temp60 + 0x20] = var1;\n            var temp61 = memory[0x40:0x60];\n            return memory[temp61:temp61 + (temp60 + 0x20) - temp61];\n        } else if (var0 == 0xe542e7c5) {\n            // Dispatch table entry for newIdAuctionEntity()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c70;\n            var2 = newIdAuctionEntity();\n            var temp62 = memory[0x40:0x60];\n            memory[temp62:temp62 + 0x20] = var2;\n            var temp63 = memory[0x40:0x60];\n            return memory[temp63:temp63 + (temp62 + 0x20) - temp63];\n        } else if (var0 == 0xecaaf6c8) {\n            // Dispatch table entry for newIdTankHull()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c99;\n            var2 = newIdTankHull();\n            var temp64 = memory[0x40:0x60];\n            memory[temp64:temp64 + 0x20] = var2 & 0xffffffff;\n            var temp65 = memory[0x40:0x60];\n            return memory[temp65:temp65 + (temp64 + 0x20) - temp65];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function FinishedExporting() {\n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x14)) | 0x00;\n    }\n    \n    function getCurrentPriceAuction(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0d3e;\n        var1 = func_4167();\n        var var2 = 0x00;\n        var var3 = 0x0d49;\n        var var4 = arg0;\n        var3 = getTankSell(var4);\n    \n        if (!var3) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x04];\n        memory[0x20:0x40] = 0x0b;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0xa0;\n        memory[temp1:temp1 + 0x20] = storage[temp0] & 0xffffffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = storage[temp0 + 0x01];\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = storage[temp0 + 0x02];\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = storage[temp0 + 0x03];\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = storage[temp0 + 0x04];\n        var1 = temp1;\n        var3 = block.timestamp - memory[var1 + 0x60:var1 + 0x60 + 0x20];\n        var4 = memory[var1 + 0x80:var1 + 0x80 + 0x20];\n        var var5 = memory[var1 + 0x20:var1 + 0x20 + 0x20] - memory[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (!var4) { assert(); }\n    \n        var temp5 = var1;\n        var2 = memory[temp5 + 0x20:temp5 + 0x20 + 0x20] - var5 / var4 * var3;\n    \n        if (var2 >= memory[temp5 + 0x40:temp5 + 0x40 + 0x20]) { return var2; }\n        else { return memory[var1 + 0x40:var1 + 0x40 + 0x20]; }\n    }\n    \n    function getTankSell(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff;\n    }\n    \n    function getTankName(var arg0) returns (var r0) {\n        var var0 = 0x0e6e;\n        var0 = func_419D();\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp3;\n        var var2 = temp0;\n        var var3 = temp2;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp4 = storage[var5];\n        var var6 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var6) {\n        label_0F24:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp5 = var4;\n            var temp6 = temp5 + var6;\n            var4 = temp6;\n            memory[0x00:0x20] = var5;\n            var temp7 = keccak256(memory[0x00:0x20]);\n            memory[temp5:temp5 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp5 + 0x20;\n        \n            if (var4 <= var6) { goto label_0F1B; }\n        \n        label_0F07:\n            var temp8 = var5;\n            var temp9 = var6;\n            memory[temp9:temp9 + 0x20] = storage[temp8];\n            var5 = temp8 + 0x01;\n            var6 = temp9 + 0x20;\n        \n            if (var4 > var6) { goto label_0F07; }\n        \n        label_0F1B:\n            var temp10 = var4;\n            var temp11 = temp10 + (var6 - temp10 & 0x1f);\n            var6 = temp10;\n            var4 = temp11;\n            goto label_0F24;\n        } else {\n            var temp12 = var4;\n            memory[temp12:temp12 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp12 + 0x20;\n            goto label_0F24;\n        }\n    }\n    \n    function upgradeTank(var arg0, var arg1) {\n        var var0 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_0F6E:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            var0 = arg1 & 0xff >= 0x00;\n        \n            if (!var0) {\n                if (!var0) { revert(memory[0x00:0x00]); }\n            \n            label_100C:\n                var0 = 0x05;\n                memory[0x00:0x20] = arg0 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var var1 = keccak256(memory[0x00:0x40]) + 0x01;\n                var var2 = arg1 & 0xff;\n            \n                if (var2 >= 0x04) { assert(); }\n            \n                var temp0 = var2;\n            \n                if (storage[temp0 / 0x20 + var1] / 0x0100 ** (temp0 % 0x20) & 0xff >= var0) { revert(memory[0x00:0x00]); }\n            \n                if (msg.value < 0xb1a2bc2ec50000) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = arg0 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var0 = keccak256(memory[0x00:0x40]) + 0x01;\n                var1 = arg1 & 0xff;\n            \n                if (var1 >= 0x04) { assert(); }\n            \n                var temp1 = var1;\n                var temp2 = temp1 / 0x20 + var0;\n                var temp3 = temp1 % 0x20;\n                var temp4 = 0x0100 ** temp3;\n                storage[temp2] = ((storage[temp2] / 0x0100 ** temp3 & 0xff) + 0x01 & 0xff) * temp4 | (~(temp4 * 0xff) & storage[temp2]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0c;\n                var temp5 = keccak256(memory[0x00:0x40]);\n                storage[temp5] = storage[temp5] + (msg.value - 0xb1a2bc2ec50000);\n                memory[0x00:0x20] = storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x0c;\n                var temp6 = keccak256(memory[0x00:0x40]);\n                storage[temp6] = storage[temp6] + 0xb1a2bc2ec50000;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = arg0 & 0xffffffff;\n                var temp8 = temp7 + 0x20;\n                memory[temp8:temp8 + 0x20] = arg1 & 0xff;\n                var temp9 = memory[0x40:0x60];\n                log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0xd41cc314723765caf24fbc53c0073d04be9df3d814284b0bcbc47e7edd470621, msg.sender]);\n                return;\n            } else if (arg1 & 0xff < 0x04) { goto label_100C; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_0F6E; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function cancelAuction(var arg0) {\n        var var0 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_125A:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff) != !!0x01) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp1 = keccak256(memory[0x00:0x40]) + 0x03;\n            storage[temp1] = (storage[temp1] & ~(0xff * 0x0100 ** 0x14)) | 0x00;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x04];\n            memory[0x20:0x40] = 0x0b;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = temp2;\n            storage[temp3] = storage[temp3] & ~0xffffffff;\n            storage[temp2 + 0x01] = 0x00;\n            storage[temp2 + 0x02] = 0x00;\n            storage[temp2 + 0x03] = 0x00;\n            storage[temp2 + 0x04] = 0x00;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            storage[keccak256(memory[0x00:0x40]) + 0x04] = 0x00;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp0 & 0xffffffff;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xede778d225701457091011ec7fd143eddcc5852e0c761ba32d2073eff46a8ddf]);\n            return;\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_125A; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function upgradePrice() returns (var r0) { return 0xb1a2bc2ec50000; }\n    \n    function login(var arg0) {\n        var var0 = msg.sender;\n        var var1 = 0xce6f899d6687f45ea505c13815078e97e811a75165e55028676a71338a887116;\n        var temp0 = arg0;\n        var var2 = temp0;\n        var temp1 = memory[0x40:0x60];\n        var var3 = temp1;\n        var var4 = var3;\n        var temp2 = var4 + 0x20;\n        memory[var4:var4 + 0x20] = temp2 - var4;\n        memory[temp2:temp2 + 0x20] = memory[var2:var2 + 0x20];\n        var var5 = temp2 + 0x20;\n        var var6 = var2 + 0x20;\n        var var7 = memory[var2:var2 + 0x20];\n        var var8 = var7;\n        var var9 = var5;\n        var var10 = var6;\n        var var11 = 0x00;\n    \n        if (var11 >= var8) {\n        label_14B4:\n            var temp3 = var7;\n            var5 = temp3 + var5;\n            var6 = temp3 & 0x1f;\n        \n            if (!var6) {\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + var5 - temp4], [stack[-6], stack[-7]]);\n                return;\n            } else {\n                var temp5 = var6;\n                var temp6 = var5 - temp5;\n                memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                var temp7 = memory[0x40:0x60];\n                log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [stack[-6], stack[-7]]);\n                return;\n            }\n        } else {\n        label_14A2:\n            var temp8 = var11;\n            memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n            var11 = temp8 + 0x20;\n        \n            if (var11 >= var8) { goto label_14B4; }\n            else { goto label_14A2; }\n        }\n    }\n    \n    function ChangeAuctionMaster(var arg0) {\n        if (msg.sender != storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x01] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function getCurrentPrice(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40]) + 0x03];\n    }\n    \n    function getTankDetails(var arg0) returns (var r0) {\n        var var0 = 0x15c5;\n        var0 = func_41B1();\n        var temp0 = memory[0x40:0x60];\n        var var1 = temp0;\n        memory[0x40:0x60] = var1 + 0xc0;\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[var1:var1 + 0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        var var2 = var1 + 0x20;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var var3 = keccak256(memory[0x00:0x40]) + 0x01;\n        var var4 = 0x00;\n    \n        if (var4 >= 0x04) { assert(); }\n    \n        var temp2 = var4;\n        var temp3 = var2;\n        memory[temp3:temp3 + 0x20] = storage[temp2 / 0x20 + var3] / 0x0100 ** (temp2 % 0x20) & 0xff;\n        var2 = temp3 + 0x20;\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var3 = keccak256(memory[0x00:0x40]) + 0x01;\n        var4 = 0x01;\n    \n        if (var4 >= 0x04) { assert(); }\n    \n        var temp4 = var4;\n        var temp5 = var2;\n        memory[temp5:temp5 + 0x20] = storage[temp4 / 0x20 + var3] / 0x0100 ** (temp4 % 0x20) & 0xff;\n        var2 = temp5 + 0x20;\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var3 = keccak256(memory[0x00:0x40]) + 0x01;\n        var4 = 0x02;\n    \n        if (var4 >= 0x04) { assert(); }\n    \n        var temp6 = var4;\n        var temp7 = var2;\n        memory[temp7:temp7 + 0x20] = storage[temp6 / 0x20 + var3] / 0x0100 ** (temp6 % 0x20) & 0xff;\n        var2 = temp7 + 0x20;\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var3 = keccak256(memory[0x00:0x40]) + 0x01;\n        var4 = 0x03;\n    \n        if (var4 >= 0x04) { assert(); }\n    \n        var temp8 = var4;\n        var temp9 = var2;\n        memory[temp9:temp9 + 0x20] = storage[temp8 / 0x20 + var3] / 0x0100 ** (temp8 % 0x20) & 0xff;\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = storage[keccak256(memory[0x00:0x40]) + 0x06] & 0xffffffff;\n        return var1;\n    }\n    \n    function newIdTankProduct() returns (var r0) { return storage[0x03] / 0x0100 ** 0x19 & 0xffffffff; }\n    \n    function UpgradeMaster() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function newIdTank() returns (var r0) { return storage[0x03] / 0x0100 ** 0x15 & 0xffffffff; }\n    \n    function bid(var arg0) {\n        var var0 = 0x181f;\n        var0 = func_4167();\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var3) {\n            if (!var3) { revert(memory[0x00:0x00]); }\n        \n        label_1860:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff) != !!0x01) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x04];\n            memory[0x20:0x40] = 0x0b;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp1 + 0xa0;\n            memory[temp1:temp1 + 0x20] = storage[temp0] & 0xffffffff;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = storage[temp0 + 0x01];\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = storage[temp0 + 0x02];\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = storage[temp0 + 0x03];\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = storage[temp0 + 0x04];\n            var0 = temp1;\n            var3 = block.timestamp - memory[var0 + 0x60:var0 + 0x60 + 0x20];\n            var var4 = memory[var0 + 0x80:var0 + 0x80 + 0x20];\n            var var5 = memory[var0 + 0x20:var0 + 0x20 + 0x20] - memory[var0 + 0x40:var0 + 0x40 + 0x20];\n        \n            if (!var4) { assert(); }\n        \n            var temp5 = var0;\n            var1 = memory[temp5 + 0x20:temp5 + 0x20 + 0x20] - var5 / var4 * var3;\n        \n            if (var1 < memory[temp5 + 0x40:temp5 + 0x40 + 0x20]) {\n                var1 = memory[var0 + 0x40:var0 + 0x40 + 0x20];\n            \n                if (var1 >= 0x00) { goto label_1981; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var1 >= 0x00) {\n            label_1981:\n            \n                if (msg.value < var1) { revert(memory[0x00:0x00]); }\n            \n                var3 = 0x03;\n                var4 = 0x64;\n                var5 = var1;\n            \n                if (!var4) { assert(); }\n            \n                var temp6 = var5 / var4 * var3;\n                var temp7 = var1;\n                var temp8 = arg0;\n                memory[0x00:0x20] = temp8 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x0c;\n                var temp9 = keccak256(memory[0x00:0x40]);\n                storage[temp9] = storage[temp9] + (temp7 - temp6);\n                memory[0x00:0x20] = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x0c;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                storage[temp10] = storage[temp10] + temp6;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0c;\n                var temp11 = keccak256(memory[0x00:0x40]);\n                storage[temp11] = storage[temp11] + (msg.value - temp7);\n                memory[0x00:0x20] = temp8 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp12 = keccak256(memory[0x00:0x40]) + 0x02;\n                storage[temp12] = msg.sender | (storage[temp12] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                memory[0x00:0x20] = temp8 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp13 = keccak256(memory[0x00:0x40]) + 0x03;\n                storage[temp13] = (storage[temp13] & ~(0xff * 0x0100 ** 0x14)) | 0x00;\n                memory[0x00:0x20] = temp8 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                memory[0x20:0x40] = 0x0b;\n                var temp14 = keccak256(memory[0x00:0x40]);\n                var temp15 = temp14;\n                storage[temp15] = storage[temp15] & ~0xffffffff;\n                storage[temp14 + 0x01] = 0x00;\n                storage[temp14 + 0x02] = 0x00;\n                storage[temp14 + 0x03] = 0x00;\n                storage[temp14 + 0x04] = 0x00;\n                memory[0x00:0x20] = temp8 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                storage[keccak256(memory[0x00:0x40]) + 0x04] = 0x00;\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = temp8 & 0xffffffff;\n                var temp17 = memory[0x40:0x60];\n                log(memory[temp17:temp17 + (temp16 + 0x20) - temp17], [0x18520be5c292108dc6aa4e12344ca3a9f201415ad1633f5b9ffb4c6e19009743]);\n                return;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_1860; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getTankEarning(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x06] / 0x0100 ** 0x04 & 0xffffffff;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = (storage[keccak256(memory[0x00:0x40]) + 0x06] & 0xffffffff) - temp1 & 0xffffffff;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40]) + 0x04] * temp2;\n    }\n    \n    function cashOut(var arg0) {\n        if (!!(storage[0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 < 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n    \n        if (temp0 != temp0 & 0xffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (address(this).balance < arg0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0c;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg0) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 != 0x00) {\n            var temp1 = arg0;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0c;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = storage[temp2] - temp1;\n            var temp3 = memory[0x40:0x60];\n            var temp4;\n            temp4, memory[temp3:temp3 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n        \n            if (temp4) {\n            label_1F53:\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = arg0;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x9f5185b6b824ad17fcc1c1d1098e828613c62aa8f27fba237cbda8248272c357, msg.sender]);\n                return;\n            } else {\n            label_1F06:\n                var temp7 = arg0;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0c;\n                var temp8 = keccak256(memory[0x00:0x40]);\n                storage[temp8] = storage[temp8] + temp7;\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = temp7;\n                var temp10 = memory[0x40:0x60];\n                log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0x9f5185b6b824ad17fcc1c1d1098e828613c62aa8f27fba237cbda8248272c357, msg.sender]);\n                return;\n            }\n        } else {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0c;\n            var temp11 = storage[keccak256(memory[0x00:0x40])];\n            arg0 = temp11;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0c;\n            var temp12 = keccak256(memory[0x00:0x40]);\n            storage[temp12] = storage[temp12] - arg0;\n            var temp13 = memory[0x40:0x60];\n            var temp14;\n            temp14, memory[temp13:temp13 + 0x00] = address(msg.sender).call.gas(!arg0 * 0x08fc).value(arg0)(memory[temp13:temp13 + memory[0x40:0x60] - temp13]);\n        \n            if (temp14) { goto label_1F53; }\n            else { goto label_1F06; }\n        }\n    }\n    \n    function exportTank(var arg0, var arg1) {\n        if (!!(storage[0x03] / 0x0100 ** 0x14 & 0xff) != !!0x01) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]) + 0x03;\n        storage[temp2] = storage[temp2] + temp1;\n        var temp3 = memory[0x40:0x60];\n        var var0 = temp3;\n        memory[0x40:0x60] = var0 + 0x0120;\n        memory[var0:var0 + 0x20] = temp0 & 0xffffffff;\n        var temp4 = var0 + 0x20;\n        var temp5 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp5 + 0x80;\n        memory[temp5:temp5 + 0x20] = 0xff & 0x00;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = 0xff & 0x00;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = 0xff & 0x00;\n        memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = 0xff & 0x00;\n        memory[temp4:temp4 + 0x20] = temp5;\n        var temp8 = temp4 + 0x20;\n        var temp9 = arg0;\n        memory[temp8:temp8 + 0x20] = temp9 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp10 = temp8 + 0x20;\n        memory[temp10:temp10 + 0x20] = temp9 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp11 = temp10 + 0x20;\n        memory[temp11:temp11 + 0x20] = !!0x00;\n        var temp12 = temp11 + 0x20;\n        memory[temp12:temp12 + 0x20] = 0x00;\n        var temp13 = temp12 + 0x20;\n        memory[temp13:temp13 + 0x20] = 0x00;\n        var temp14 = temp13 + 0x20;\n        memory[temp14:temp14 + 0x20] = 0xffffffff & 0x00;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp15 = keccak256(memory[0x00:0x40]) + 0x06;\n        var temp16 = (storage[temp15] & 0xffffffff) + 0x01;\n        storage[temp15] = (temp16 & 0xffffffff) | (storage[temp15] & ~0xffffffff);\n        memory[temp14 + 0x20:temp14 + 0x20 + 0x20] = temp16 & 0xffffffff;\n        var temp17 = storage[0x03] / 0x0100 ** 0x15 & 0xffffffff;\n        storage[0x03] = (temp17 + 0x01 & 0xffffffff) * 0x0100 ** 0x15 | (storage[0x03] & ~(0xffffffff * 0x0100 ** 0x15));\n        memory[0x00:0x20] = temp17 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp18 = keccak256(memory[0x00:0x40]);\n        var var1 = temp18;\n        var temp19 = var1;\n        storage[temp19] = (memory[var0:var0 + 0x20] & 0xffffffff) | (storage[temp19] & ~0xffffffff);\n        var var2 = 0x2214;\n        var var3 = var1 + 0x01;\n        var var4 = memory[var0 + 0x20:var0 + 0x20 + 0x20];\n        var var5 = 0x04;\n        var2 = func_41DF(var3, var4, var5);\n        var temp20 = var0;\n        var temp21 = var1;\n        var temp22 = temp21 + 0x02;\n        storage[temp22] = (memory[temp20 + 0x40:temp20 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp22] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp23 = temp21 + 0x03;\n        storage[temp23] = (memory[temp20 + 0x60:temp20 + 0x60 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp23] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp24 = temp21 + 0x03;\n        storage[temp24] = !!memory[temp20 + 0x80:temp20 + 0x80 + 0x20] * 0x0100 ** 0x14 | (storage[temp24] & ~(0xff * 0x0100 ** 0x14));\n        storage[temp21 + 0x04] = memory[temp20 + 0xa0:temp20 + 0xa0 + 0x20];\n        storage[temp21 + 0x05] = memory[temp20 + 0xc0:temp20 + 0xc0 + 0x20];\n        var temp25 = temp21 + 0x06;\n        storage[temp25] = (memory[temp20 + 0xe0:temp20 + 0xe0 + 0x20] & 0xffffffff) | (storage[temp25] & ~0xffffffff);\n        var temp26 = temp21 + 0x06;\n        storage[temp26] = (memory[temp20 + 0x0100:temp20 + 0x0100 + 0x20] & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp26] & ~(0xffffffff * 0x0100 ** 0x04));\n        var0 = 0x00;\n        var1 = 0x2333;\n        var1 = tanksBeforeTheNewTankType();\n        var temp27 = var1 == var0;\n        var0 = temp27;\n    \n        if (!var0) {\n            if (!var0) {\n            label_2367:\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = arg1 & 0xffffffff;\n                var temp29 = temp28 + 0x20;\n                memory[temp29:temp29 + 0x20] = (storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) - 0x01 & 0xffffffff;\n                var temp30 = memory[0x40:0x60];\n                log(memory[temp30:temp30 + (temp29 + 0x20) - temp30], [0xa1578d536a4c08dce2b1a5bae569b81e0749e06a67e7a3f58041128656bf22b3, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n            label_235F:\n                var0 = 0x2366;\n                func_3CC1();\n                goto label_2367;\n            }\n        } else if (storage[0x03] / 0x0100 ** 0x19 & 0xffffffff > 0x79) { goto label_2367; }\n        else { goto label_235F; }\n    }\n    \n    function canExport() returns (var r0) { return storage[0x03] / 0x0100 ** 0x14 & 0xff; }\n    \n    function buyTank(var arg0) {\n        if (!!(storage[0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var0 = storage[keccak256(memory[0x00:0x40]) + 0x03] > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_2460:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n        \n            if (msg.value < storage[keccak256(memory[0x00:0x40]) + 0x03]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x05] > block.timestamp) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n        \n            if (msg.value <= storage[keccak256(memory[0x00:0x40]) + 0x03]) {\n                var temp0 = arg0;\n                memory[0x00:0x20] = temp0 & 0xffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                memory[0x00:0x20] = temp0 & 0xffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp2 = keccak256(memory[0x00:0x40]) + 0x03;\n                storage[temp2] = storage[temp2] + temp1;\n                var0 = 0x00;\n                var var1 = 0x25ba;\n                var1 = tanksBeforeTheNewTankType();\n            \n            label_25BA:\n                var temp3 = var1 == var0;\n                var0 = temp3;\n            \n                if (!var0) {\n                    if (!var0) {\n                    label_25EE:\n                        var temp4 = memory[0x40:0x60];\n                        var0 = temp4;\n                        memory[0x40:0x60] = var0 + 0x0120;\n                        var temp5 = arg0;\n                        memory[var0:var0 + 0x20] = temp5 & 0xffffffff;\n                        var temp6 = var0 + 0x20;\n                        var temp7 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp7 + 0x80;\n                        memory[temp7:temp7 + 0x20] = 0xff & 0x00;\n                        var temp8 = temp7 + 0x20;\n                        memory[temp8:temp8 + 0x20] = 0xff & 0x00;\n                        var temp9 = temp8 + 0x20;\n                        memory[temp9:temp9 + 0x20] = 0xff & 0x00;\n                        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = 0xff & 0x00;\n                        memory[temp6:temp6 + 0x20] = temp7;\n                        var temp10 = temp6 + 0x20;\n                        memory[temp10:temp10 + 0x20] = msg.sender;\n                        var temp11 = temp10 + 0x20;\n                        memory[temp11:temp11 + 0x20] = msg.sender;\n                        var temp12 = temp11 + 0x20;\n                        memory[temp12:temp12 + 0x20] = !!0x00;\n                        var temp13 = temp12 + 0x20;\n                        memory[temp13:temp13 + 0x20] = 0x00;\n                        var temp14 = temp13 + 0x20;\n                        memory[temp14:temp14 + 0x20] = 0x00;\n                        var temp15 = temp14 + 0x20;\n                        memory[temp15:temp15 + 0x20] = 0xffffffff & 0x00;\n                        memory[0x00:0x20] = temp5 & 0xffffffff;\n                        memory[0x20:0x40] = 0x07;\n                        var temp16 = keccak256(memory[0x00:0x40]) + 0x06;\n                        var temp17 = (storage[temp16] & 0xffffffff) + 0x01;\n                        storage[temp16] = (temp17 & 0xffffffff) | (storage[temp16] & ~0xffffffff);\n                        memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = temp17 & 0xffffffff;\n                        var temp18 = storage[0x03] / 0x0100 ** 0x15 & 0xffffffff;\n                        storage[0x03] = (temp18 + 0x01 & 0xffffffff) * 0x0100 ** 0x15 | (storage[0x03] & ~(0xffffffff * 0x0100 ** 0x15));\n                        memory[0x00:0x20] = temp18 & 0xffffffff;\n                        memory[0x20:0x40] = 0x06;\n                        var temp19 = keccak256(memory[0x00:0x40]);\n                        var1 = temp19;\n                        var temp20 = var1;\n                        storage[temp20] = (memory[var0:var0 + 0x20] & 0xffffffff) | (storage[temp20] & ~0xffffffff);\n                        var var2 = 0x278e;\n                        var var3 = var1 + 0x01;\n                        var var5 = 0x04;\n                        var var4 = memory[var0 + 0x20:var0 + 0x20 + 0x20];\n                        var2 = func_41DF(var3, var4, var5);\n                        var temp21 = var0;\n                        var temp22 = var1;\n                        var temp23 = temp22 + 0x02;\n                        storage[temp23] = (memory[temp21 + 0x40:temp21 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp23] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        var temp24 = temp22 + 0x03;\n                        storage[temp24] = (memory[temp21 + 0x60:temp21 + 0x60 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp24] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        var temp25 = temp22 + 0x03;\n                        storage[temp25] = !!memory[temp21 + 0x80:temp21 + 0x80 + 0x20] * 0x0100 ** 0x14 | (storage[temp25] & ~(0xff * 0x0100 ** 0x14));\n                        storage[temp22 + 0x04] = memory[temp21 + 0xa0:temp21 + 0xa0 + 0x20];\n                        storage[temp22 + 0x05] = memory[temp21 + 0xc0:temp21 + 0xc0 + 0x20];\n                        var temp26 = temp22 + 0x06;\n                        storage[temp26] = (memory[temp21 + 0xe0:temp21 + 0xe0 + 0x20] & 0xffffffff) | (storage[temp26] & ~0xffffffff);\n                        var temp27 = temp22 + 0x06;\n                        storage[temp27] = (memory[temp21 + 0x0100:temp21 + 0x0100 + 0x20] & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp27] & ~(0xffffffff * 0x0100 ** 0x04));\n                        var temp28 = arg0;\n                        memory[0x00:0x20] = temp28 & 0xffffffff;\n                        memory[0x20:0x40] = 0x07;\n                        var temp29 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                        memory[0x00:0x20] = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x0c;\n                        var temp30 = keccak256(memory[0x00:0x40]);\n                        storage[temp30] = storage[temp30] + temp29;\n                        var temp31 = memory[0x40:0x60];\n                        memory[temp31:temp31 + 0x20] = temp28 & 0xffffffff;\n                        var temp32 = temp31 + 0x20;\n                        memory[temp32:temp32 + 0x20] = (storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) - 0x01 & 0xffffffff;\n                        var temp33 = memory[0x40:0x60];\n                        log(memory[temp33:temp33 + (temp32 + 0x20) - temp33], [0xa1578d536a4c08dce2b1a5bae569b81e0749e06a67e7a3f58041128656bf22b3, msg.sender]);\n                        return;\n                    } else {\n                    label_25E6:\n                        var0 = 0x25ed;\n                        func_3CC1();\n                        goto label_25EE;\n                    }\n                } else if (storage[0x03] / 0x0100 ** 0x19 & 0xffffffff > 0x79) { goto label_25EE; }\n                else { goto label_25E6; }\n            } else {\n                var temp34 = arg0;\n                memory[0x00:0x20] = temp34 & 0xffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp35 = msg.value - storage[keccak256(memory[0x00:0x40]) + 0x03];\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0c;\n                var temp36 = keccak256(memory[0x00:0x40]);\n                storage[temp36] = storage[temp36] + temp35;\n                memory[0x00:0x20] = temp34 & 0xffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp37 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                memory[0x00:0x20] = temp34 & 0xffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp38 = keccak256(memory[0x00:0x40]) + 0x03;\n                storage[temp38] = storage[temp38] + temp37;\n                var0 = 0x00;\n                var1 = 0x25ba;\n                var1 = tanksBeforeTheNewTankType();\n                goto label_25BA;\n            }\n        } else if (msg.value > 0x00) { goto label_2460; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getContractBalance() returns (var r0) { return address(this).balance; }\n    \n    function getTankAuctionEntity(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40]) + 0x04];\n    }\n    \n    function ChangeTankSellMaster(var arg0) {\n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function cashOutTank(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!!(storage[0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_2B08:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x06] / 0x0100 ** 0x04 & 0xffffffff;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n            var temp2 = (storage[keccak256(memory[0x00:0x40]) + 0x06] & 0xffffffff) - temp1 & 0xffffffff;\n            memory[0x00:0x20] = temp0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n            var0 = storage[keccak256(memory[0x00:0x40]) + 0x04] * temp2;\n        \n            if (address(this).balance < var0) { revert(memory[0x00:0x00]); }\n        \n            if (var0 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var temp3 = arg0;\n            memory[0x00:0x20] = temp3 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var1 = storage[keccak256(memory[0x00:0x40]) + 0x06] / 0x0100 ** 0x04 & 0xffffffff;\n            memory[0x00:0x20] = temp3 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n            memory[0x20:0x40] = 0x07;\n            var temp4 = storage[keccak256(memory[0x00:0x40]) + 0x06] & 0xffffffff;\n            memory[0x00:0x20] = temp3 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp5 = keccak256(memory[0x00:0x40]) + 0x06;\n            storage[temp5] = (temp4 & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp5] & ~(0xffffffff * 0x0100 ** 0x04));\n            memory[0x00:0x20] = temp3 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp6 = var0;\n            var temp7 = memory[0x40:0x60];\n            var temp8;\n            temp8, memory[temp7:temp7 + 0x00] = address(storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp7:temp7 + memory[0x40:0x60] - temp7]);\n        \n            if (temp8) {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var0;\n                var temp10 = memory[0x40:0x60];\n                log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0x9f5185b6b824ad17fcc1c1d1098e828613c62aa8f27fba237cbda8248272c357, msg.sender]);\n                return;\n            } else {\n                memory[0x00:0x20] = arg0 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp11 = keccak256(memory[0x00:0x40]) + 0x06;\n                storage[temp11] = (var1 & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp11] & ~(0xffffffff * 0x0100 ** 0x04));\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var0;\n                var temp13 = memory[0x40:0x60];\n                log(memory[temp13:temp13 + (temp12 + 0x20) - temp13], [0x9f5185b6b824ad17fcc1c1d1098e828613c62aa8f27fba237cbda8248272c357, msg.sender]);\n                return;\n            }\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_2B08; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function _transfer(var arg0, var arg1) {\n        var var0 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_2EDA:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender == arg1 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg1;\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp2 = keccak256(memory[0x00:0x40]) + 0x02;\n            storage[temp2] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = temp1 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp3 = keccak256(memory[0x00:0x40]) + 0x03;\n            storage[temp3] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp1 & 0xffffffff;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x113bb8db9c3f402e36400928c81a0e95afa1d1cb577216ecf25bfd7c8b4641f7, msg.sender, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_2EDA; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getTankProduct(var arg0) returns (var r0) {\n        var var0 = 0x3112;\n        var0 = func_41B1();\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xc0;\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffff;\n        memory[0x20:0x40] = 0x08;\n        memory[temp0:temp0 + 0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        var temp2 = temp0 + 0x20;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffff;\n        memory[0x20:0x40] = 0x08;\n        memory[temp2:temp2 + 0x20] = storage[keccak256(memory[0x00:0x40])] / 0x0100 ** 0x04 & 0xffffffff;\n        var temp3 = temp2 + 0x20;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] / 0x0100 ** 0x04 & 0xffffffff;\n        memory[0x20:0x40] = 0x0a;\n        memory[temp3:temp3 + 0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        var temp4 = temp3 + 0x20;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] / 0x0100 ** 0x04 & 0xffffffff;\n        memory[0x20:0x40] = 0x0a;\n        memory[temp4:temp4 + 0x20] = storage[keccak256(memory[0x00:0x40])] / 0x0100 ** 0x04 & 0xffffffff;\n        var temp5 = temp4 + 0x20;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] / 0x0100 ** 0x04 & 0xffffffff;\n        memory[0x20:0x40] = 0x0a;\n        memory[temp5:temp5 + 0x20] = storage[keccak256(memory[0x00:0x40])] / 0x0100 ** 0x08 & 0xffffffff;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = storage[keccak256(memory[0x00:0x40]) + 0x05] & 0xffffffff;\n        return temp0;\n    }\n    \n    function getTankTotalEarned(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40]) + 0x05];\n    }\n    \n    function ChangeUpgradeMaster(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function getTankOwner(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function createNewTankWeapon() returns (var r0) { return storage[0x04] / 0x0100 ** 0x0c & 0xffffffff; }\n    \n    function AuctionMaster() returns (var r0) { return storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function sellTank(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_3535:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n        \n            if (arg1 < arg2) { revert(memory[0x00:0x00]); }\n        \n            var0 = arg1 > 0x00;\n        \n            if (!var0) {\n                if (!var0) { revert(memory[0x00:0x00]); }\n            \n            label_361E:\n            \n                if (arg3 <= 0x00) { revert(memory[0x00:0x00]); }\n            \n                var temp0 = arg1;\n            \n                if (temp0 != temp0 & 0xffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n            \n                var temp1 = arg2;\n            \n                if (temp1 != temp1 & 0xffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n            \n                var temp2 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp2 + 0xa0;\n                var temp3 = arg0;\n                memory[temp2:temp2 + 0x20] = temp3 & 0xffffffff;\n                var temp4 = temp2 + 0x20;\n                var temp5 = arg1;\n                memory[temp4:temp4 + 0x20] = temp5;\n                var temp6 = temp4 + 0x20;\n                var temp7 = arg2;\n                memory[temp6:temp6 + 0x20] = temp7;\n                var temp8 = temp6 + 0x20;\n                memory[temp8:temp8 + 0x20] = block.timestamp;\n                var temp9 = arg3;\n                memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp9;\n                memory[0x00:0x20] = storage[0x05];\n                memory[0x20:0x40] = 0x0b;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                var temp11 = temp10;\n                storage[temp11] = (memory[temp2:temp2 + 0x20] & 0xffffffff) | (storage[temp11] & ~0xffffffff);\n                storage[temp10 + 0x01] = memory[temp2 + 0x20:temp2 + 0x20 + 0x20];\n                storage[temp10 + 0x02] = memory[temp2 + 0x40:temp2 + 0x40 + 0x20];\n                storage[temp10 + 0x03] = memory[temp2 + 0x60:temp2 + 0x60 + 0x20];\n                storage[temp10 + 0x04] = memory[temp2 + 0x80:temp2 + 0x80 + 0x20];\n                memory[0x00:0x20] = temp3 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp12 = keccak256(memory[0x00:0x40]) + 0x03;\n                storage[temp12] = (storage[temp12] & ~(0xff * 0x0100 ** 0x14)) | 0x0100 ** 0x14;\n                var temp13 = storage[0x05];\n                storage[0x05] = temp13 + 0x01;\n                memory[0x00:0x20] = temp3 & 0xffffffff;\n                memory[0x20:0x40] = 0x06;\n                storage[keccak256(memory[0x00:0x40]) + 0x04] = temp13;\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = temp3 & 0xffffffff;\n                var temp15 = temp14 + 0x20;\n                memory[temp15:temp15 + 0x20] = temp5;\n                var temp16 = temp15 + 0x20;\n                memory[temp16:temp16 + 0x20] = temp7;\n                var temp17 = temp16 + 0x20;\n                memory[temp17:temp17 + 0x20] = temp9;\n                var temp18 = temp17 + 0x20;\n                memory[temp18:temp18 + 0x20] = block.timestamp;\n                var temp19 = memory[0x40:0x60];\n                log(memory[temp19:temp19 + (temp18 + 0x20) - temp19], [0xf6b924f817282ac2c02fb828bdc9a6c812e6c87369d31c4b7dbd286ea158ffe2, msg.sender]);\n                return;\n            } else if (arg2 >= 0x00) { goto label_361E; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_3535; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function newIdTankWeapon() returns (var r0) { return storage[0x04] / 0x0100 ** 0x04 & 0xffffffff; }\n    \n    function tanksBeforeTheNewTankType() returns (var r0) { return (((storage[0x03] / 0x0100 ** 0x19 & 0xffffffff) + 0x0a) * ((storage[0x03] / 0x0100 ** 0x19 & 0xffffffff) + 0x0a) * ((storage[0x03] / 0x0100 ** 0x19 & 0xffffffff) - 0x0b) + 0x03e8) - (storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) & 0xffffffff; }\n    \n    function howManyTanks() returns (var r0) { return storage[0x03] / 0x0100 ** 0x19 & 0xffffffff; }\n    \n    function getProductEarning(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40]) + 0x04];\n    }\n    \n    function exportTankResetEarning(var arg0) {\n        if (!!(storage[0x03] / 0x0100 ** 0x14 & 0xff) != !!0x01) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x06] & 0xffffffff;\n        memory[0x00:0x20] = temp0 & 0xffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]) + 0x06;\n        storage[temp2] = (temp1 & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp2] & ~(0xffffffff * 0x0100 ** 0x04));\n    }\n    \n    function _transferAction(var arg0, var arg1, var arg2) {\n        var var0 = arg0 & 0xffffffff > 0x00;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_3A1C:\n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender == arg1 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40]) + 0x03] / 0x0100 ** 0x14 & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg1;\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1 & 0xffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp2 = keccak256(memory[0x00:0x40]) + 0x02;\n            storage[temp2] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = temp1 & 0xffffffff;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = arg2 & 0xff;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xf77685804f81b41b8882a2b139a0e44bcabacefd99f6702aff10c4d0fa64c15a, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else if (arg0 & 0xffffffff < storage[0x03] / 0x0100 ** 0x15 & 0xffffffff) { goto label_3A1C; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function ExportMaster() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function TankSellMaster() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function createNewTankHull() returns (var r0) { return storage[0x04] / 0x0100 ** 0x08 & 0xffffffff; }\n    \n    function getPlayerBalance(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function newIdAuctionEntity() returns (var r0) { return storage[0x05]; }\n    \n    function newIdTankHull() returns (var r0) { return storage[0x04] & 0xffffffff; }\n    \n    function func_3CC1() {\n        if (storage[0x03] / 0x0100 ** 0x19 & 0xffffffff > 0x79) { goto label_3EED; }\n    \n        var var0 = storage[0x04] / 0x0100 ** 0x08 & 0xffffffff < (storage[0x04] & 0xffffffff) - 0x01 & 0xffffffff;\n    \n        if (!var0) {\n            if (!var0) {\n            label_3DC2:\n                storage[0x04] = ((storage[0x04] / 0x0100 ** 0x0c & 0xffffffff) + 0x01 & 0xffffffff) * 0x0100 ** 0x0c | (storage[0x04] & ~(0xffffffff * 0x0100 ** 0x0c));\n            \n                if (storage[0x04] / 0x0100 ** 0x08 & 0xffffffff != storage[0x04] / 0x0100 ** 0x0c & 0xffffffff) {\n                label_3E72:\n                    var0 = 0x3eec;\n                    var temp0 = memory[0x40:0x60];\n                    var var1 = temp0;\n                    memory[0x40:0x60] = var1 + 0x40;\n                    memory[var1:var1 + 0x20] = 0x04;\n                    memory[var1 + 0x20:var1 + 0x20 + 0x20] = 0x54616e6b00000000000000000000000000000000000000000000000000000000;\n                    var var2 = storage[0x04] / 0x0100 ** 0x08 & 0xffffffff;\n                    var var3 = storage[0x04] / 0x0100 ** 0x0c & 0xffffffff;\n                    var var4 = 0x02c68af0bb140000;\n                    var var5 = 0x0aa87bee538000;\n                    var var6 = block.timestamp + 0x0e10;\n                    func_3EEF(var1, var2, var3, var4, var5, var6);\n                \n                label_3EED:\n                    return;\n                } else {\n                    storage[0x04] = ((storage[0x04] / 0x0100 ** 0x0c & 0xffffffff) + 0x01 & 0xffffffff) * 0x0100 ** 0x0c | (storage[0x04] & ~(0xffffffff * 0x0100 ** 0x0c));\n                    goto label_3E72;\n                }\n            } else {\n            label_3D61:\n                storage[0x04] = (storage[0x04] & ~(0xffffffff * 0x0100 ** 0x0c)) | 0x0100 ** 0x0c;\n                storage[0x04] = ((storage[0x04] / 0x0100 ** 0x08 & 0xffffffff) + 0x01 & 0xffffffff) * 0x0100 ** 0x08 | (storage[0x04] & ~(0xffffffff * 0x0100 ** 0x08));\n                goto label_3E72;\n            }\n        } else if (storage[0x04] / 0x0100 ** 0x0c & 0xffffffff < (storage[0x04] / 0x0100 ** 0x04 & 0xffffffff) - 0x01 & 0xffffffff) { goto label_3DC2; }\n        else { goto label_3D61; }\n    }\n    \n    function func_3EEF(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var temp0 = memory[0x40:0x60];\n        var var0 = temp0;\n        memory[0x40:0x60] = var0 + 0x0100;\n        memory[var0:var0 + 0x20] = arg0;\n        var temp1 = var0 + 0x20;\n        memory[temp1:temp1 + 0x20] = arg1 & 0xffffffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg2 & 0xffffffff;\n        var temp3 = temp2 + 0x20;\n        var temp4 = arg3;\n        memory[temp3:temp3 + 0x20] = temp4;\n        var temp5 = temp3 + 0x20;\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg4;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = arg5;\n        memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = 0xffffffff & 0x00;\n        var temp8 = storage[0x03] / 0x0100 ** 0x19 & 0xffffffff;\n        storage[0x03] = (temp8 + 0x01 & 0xffffffff) * 0x0100 ** 0x19 | (storage[0x03] & ~(0xffffffff * 0x0100 ** 0x19));\n        memory[0x00:0x20] = temp8 & 0xffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var1 = keccak256(memory[0x00:0x40]);\n        var temp9 = memory[var0:var0 + 0x20];\n        var var2 = 0x3fb1;\n        var var3 = var1;\n        var var4 = temp9 + 0x20;\n        var var5 = memory[temp9:temp9 + 0x20];\n        var2 = func_4279(var3, var4, var5);\n        var temp10 = var0;\n        var temp11 = var1;\n        var temp12 = temp11 + 0x01;\n        storage[temp12] = (memory[temp10 + 0x20:temp10 + 0x20 + 0x20] & 0xffffffff) | (storage[temp12] & ~0xffffffff);\n        var temp13 = temp11 + 0x01;\n        storage[temp13] = (memory[temp10 + 0x40:temp10 + 0x40 + 0x20] & 0xffffffff) * 0x0100 ** 0x04 | (storage[temp13] & ~(0xffffffff * 0x0100 ** 0x04));\n        storage[temp11 + 0x02] = memory[temp10 + 0x60:temp10 + 0x60 + 0x20];\n        storage[temp11 + 0x03] = memory[temp10 + 0x80:temp10 + 0x80 + 0x20];\n        storage[temp11 + 0x04] = memory[temp10 + 0xa0:temp10 + 0xa0 + 0x20];\n        storage[temp11 + 0x05] = memory[temp10 + 0xc0:temp10 + 0xc0 + 0x20];\n        var temp14 = temp11 + 0x06;\n        storage[temp14] = (memory[temp10 + 0xe0:temp10 + 0xe0 + 0x20] & 0xffffffff) | (storage[temp14] & ~0xffffffff);\n        var0 = 0x54675320a731020d705bcc2541a314d97fb5e538182801e632f28fed6649baa7;\n        var1 = (storage[0x03] / 0x0100 ** 0x19 & 0xffffffff) - 0x01;\n        var temp15 = arg0;\n        var2 = temp15;\n        var3 = arg1;\n        var4 = arg2;\n        var5 = arg3;\n        var var6 = arg4;\n        var var7 = arg5;\n        var var8 = block.timestamp;\n        var temp16 = memory[0x40:0x60];\n        var var9 = temp16;\n        memory[var9:var9 + 0x20] = var1 & 0xffffffff;\n        var temp17 = var9 + 0x20;\n        var var10 = temp17;\n        var temp18 = var10 + 0x20;\n        memory[temp18:temp18 + 0x20] = var3 & 0xffffffff;\n        var temp19 = temp18 + 0x20;\n        memory[temp19:temp19 + 0x20] = var4 & 0xffffffff;\n        var temp20 = temp19 + 0x20;\n        memory[temp20:temp20 + 0x20] = var5;\n        var temp21 = temp20 + 0x20;\n        memory[temp21:temp21 + 0x20] = var6;\n        var temp22 = temp21 + 0x20;\n        memory[temp22:temp22 + 0x20] = var7;\n        var temp23 = temp22 + 0x20;\n        memory[temp23:temp23 + 0x20] = var8;\n        var temp24 = temp23 + 0x20;\n        memory[var10:var10 + 0x20] = temp24 - var9;\n        memory[temp24:temp24 + 0x20] = memory[var2:var2 + 0x20];\n        var var11 = temp24 + 0x20;\n        var var13 = memory[var2:var2 + 0x20];\n        var var12 = var2 + 0x20;\n        var var14 = var13;\n        var var15 = var11;\n        var var16 = var12;\n        var var17 = 0x00;\n    \n        if (var17 >= var14) {\n        label_411E:\n            var temp25 = var13;\n            var11 = temp25 + var11;\n            var12 = temp25 & 0x1f;\n        \n            if (!var12) {\n                var temp26 = memory[0x40:0x60];\n                log(memory[temp26:temp26 + var11 - temp26], [stack[-13]]);\n                return;\n            } else {\n                var temp27 = var12;\n                var temp28 = var11 - temp27;\n                memory[temp28:temp28 + 0x20] = ~(0x0100 ** (0x20 - temp27) - 0x01) & memory[temp28:temp28 + 0x20];\n                var temp29 = memory[0x40:0x60];\n                log(memory[temp29:temp29 + (temp28 + 0x20) - temp29], [stack[-13]]);\n                return;\n            }\n        } else {\n        label_410C:\n            var temp30 = var17;\n            memory[var15 + temp30:var15 + temp30 + 0x20] = memory[var16 + temp30:var16 + temp30 + 0x20];\n            var17 = temp30 + 0x20;\n        \n            if (var17 >= var14) { goto label_411E; }\n            else { goto label_410C; }\n        }\n    }\n    \n    function func_4167() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = 0xffffffff & 0x00;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x00;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = 0x00;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = 0x00;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_419D() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_41B1() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        var var0 = temp0;\n        memory[0x40:0x60] = var0 + 0xc0;\n        memory[var0:var0 + 0x20] = 0xffffffff & 0x00;\n        var var2 = var0 + 0x20;\n        var var1 = 0x06 - 0x01;\n    \n        if (!var1) { goto label_41DA; }\n    \n    label_41C1:\n        var temp1 = var2;\n        memory[temp1:temp1 + 0x20] = 0xffffffff & 0x00;\n        var2 = temp1 + 0x20;\n        var1 = var1 - 0x01;\n    \n        if (var1) { goto label_41C1; }\n    \n    label_41DA:\n        return var0;\n    }\n    \n    function func_41DF(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = arg0;\n        var var1 = arg1;\n        arg1 = var0 + (0x1f + 0x04) / 0x20;\n    \n        if (!arg2) {\n        label_4268:\n            var temp0 = arg1;\n            arg1 = 0x4275;\n            var0 = var0;\n            arg2 = temp0;\n            arg1 = func_42F9(arg2, var0);\n            return arg0;\n        } else {\n            var temp1 = arg2;\n            var temp2 = var1;\n            arg2 = temp2;\n            var1 = arg2 + temp1 * 0x20;\n            var var2 = 0x00;\n        \n            if (var1 <= arg2) {\n            label_4239:\n            \n                if (!var2) { goto label_4268; }\n            \n                var temp3 = var0;\n                var temp4 = var2;\n                storage[temp3] = ~(0x0100 ** temp4 * 0xff) & storage[temp3];\n                var temp5 = temp4 + 0x01;\n                var temp6 = temp5 / 0x20;\n                var0 = temp6 + temp3;\n                var2 = 0x01 - temp6 * temp5;\n                goto label_4239;\n            } else {\n            label_4204:\n                var temp7 = arg2;\n                var temp8 = var0;\n                var temp9 = var2;\n                var temp10 = 0x0100 ** temp9;\n                storage[temp8] = (memory[temp7:temp7 + 0x20] & 0xff) * temp10 | (~(temp10 * 0xff) & storage[temp8]);\n                arg2 = temp7 + 0x20;\n                var temp11 = temp9 + 0x01;\n                var temp12 = temp11 / 0x20;\n                var0 = temp12 + temp8;\n                var2 = 0x01 - temp12 * temp11;\n            \n                if (var1 <= arg2) { goto label_4239; }\n                else { goto label_4204; }\n            }\n        }\n    }\n    \n    function func_4279(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_42E8:\n                var temp4 = arg1;\n                arg1 = 0x42f5;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_4329(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = var1;\n                var temp6 = arg2;\n                arg2 = temp5;\n                var1 = arg2 + temp6;\n            \n                if (var1 <= arg2) {\n                label_42E7:\n                    goto label_42E8;\n                } else {\n                label_42D5:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var0 = temp8 + 0x01;\n                    var1 = var1;\n                \n                    if (var1 <= arg2) { goto label_42E7; }\n                    else { goto label_42D5; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_42E8;\n        }\n    }\n    \n    function func_42F9(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x4326;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_4322(arg1, var0); }\n    \n    label_4308:\n        var temp2 = var0;\n        storage[temp2] = storage[temp2] & ~0xff;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_4308; }\n    \n        arg0 = func_4322(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_4322(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_4329(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x434b;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_4347(arg1, var0); }\n    \n    label_4338:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_4338; }\n    \n        arg0 = func_4347(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_4347(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 108.74538040161133,
	"usage": {
		"completion_tokens": 1295,
		"prompt_tokens": 30247,
		"total_tokens": 31542
	}
}