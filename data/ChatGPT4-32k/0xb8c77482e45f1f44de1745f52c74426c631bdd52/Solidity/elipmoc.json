{
	"address": "0xb8c77482e45f1f44de1745f52c74426c631bdd52",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2022.11.29 16:16 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _freezeOf; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x7]\nuint256 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint256 _owner; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nBurn(address, uint256);\nUnfreeze(address, uint256);\nFreeze(address, uint256);\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 <= varg1;\n    require(v0);\n    return varg1 - varg0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 + varg0;\n    v1 = v2 = v0 >= varg1;\n    if (v2) {\n        v1 = v3 = v0 >= varg0;\n    }\n    require(v1);\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(varg1 > 0);\n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1 != 0);\n    require(varg2 > 0);\n    require(_balanceOf[varg0] >= varg2);\n    require(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    require(varg2 <= _allowance[msg.sender]);\n    v0 = _SafeSub(varg2, _balanceOf[varg0]);\n    _balanceOf[varg0] = v0;\n    v1 = _SafeAdd(varg2, _balanceOf[varg1]);\n    _balanceOf[varg1] = v1;\n    v2 = _SafeSub(varg2, _allowance[msg.sender]);\n    _allowance[msg.sender] = v2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdrawEther(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0);\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    require(varg0 > 0);\n    v0 = _SafeSub(varg0, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeSub(varg0, _totalSupply);\n    _totalSupply = v1;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction unfreeze(uint256 varg0) public nonPayable { \n    require(_freezeOf[msg.sender] >= varg0);\n    require(varg0 > 0);\n    v0 = _SafeSub(varg0, _freezeOf[msg.sender]);\n    _freezeOf[msg.sender] = v0;\n    v1 = _SafeAdd(varg0, _freezeOf[msg.sender]);\n    _balanceOf[msg.sender] = v1;\n    emit Unfreeze(msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        v4[v5] = v0[v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(varg1 > 0);\n    require(_balanceOf[msg.sender] >= varg1);\n    require(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    v0 = _SafeSub(varg1, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction freezeOf(address varg0) public nonPayable { \n    return _freezeOf[varg0];\n}\n\nfunction freeze(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    require(varg0 > 0);\n    v0 = _SafeSub(varg0, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(varg0, _freezeOf[msg.sender]);\n    _freezeOf[msg.sender] = v1;\n    emit Freeze(msg.sender, varg0);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        v4[v5] = v0[v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == uint32(function_selector >> 224)) {\n            name();\n        } else if (0x95ea7b3 == uint32(function_selector >> 224)) {\n            approve(address,uint256);\n        } else if (0x18160ddd == uint32(function_selector >> 224)) {\n            totalSupply();\n        } else if (0x23b872dd == uint32(function_selector >> 224)) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == uint32(function_selector >> 224)) {\n            decimals();\n        } else if (0x3bed33ce == uint32(function_selector >> 224)) {\n            withdrawEther(uint256);\n        } else if (0x42966c68 == uint32(function_selector >> 224)) {\n            burn(uint256);\n        } else if (0x6623fc46 == uint32(function_selector >> 224)) {\n            unfreeze(uint256);\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            owner();\n        } else if (0x95d89b41 == uint32(function_selector >> 224)) {\n            symbol();\n        } else if (0xa9059cbb == uint32(function_selector >> 224)) {\n            transfer(address,uint256);\n        } else if (0xcd4217c1 == uint32(function_selector >> 224)) {\n            freezeOf(address);\n        } else if (0xd7a78db8 == uint32(function_selector >> 224)) {\n            freeze(uint256);\n        } else if (0xdd62ed3e == uint32(function_selector >> 224)) {\n            allowance(address,address);\n        }\n    }\n}\n",
	"language": "Solidity",
	"status": "Connection error."
}