{
	"address": "0xd18475521245a127a933a4fcaf99e8c45a416f7e",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity contract code from the provided decompiled code:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Contract {\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n    address public owner;\n    uint public totalSupply;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint public price;\n    uint public currentEpoch;\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    function name() public view returns (string memory){\n        return name;\n    }\n    \n    function symbol() public view returns (string memory){\n        return symbol;\n    }\n    \n    function decimals() public view returns (uint8){\n        return decimals;\n    }\n    \n    function balanceOf(address _owner) public view returns (uint balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        return true;\n    }\n\n    function approve(address _spender, uint _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n```\n\nPlease note that the original contract's code might look different, but the functionality should be the same. The provided decompiled code is a bit complex and includes low-level operations, so it's not possible to provide an exact high-level Solidity equivalent. The provided Solidity contract code is a simplified version that should offer similar functionality.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471404,
	"id": "chatcmpl-8Mua486RVmi76UJ5QrtYbVJ70xeFy",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x8da5cb5b > var0) {\n            if (0x39509351 > var0) {\n                if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b6;\n                    var1 = name();\n                    var temp0 = memory[0x40:0x60];\n                    var var2 = temp0;\n                    var var3 = var2;\n                    var temp1 = var3 + 0x20;\n                    memory[var3:var3 + 0x20] = temp1 - var3;\n                    var temp2 = var1;\n                    memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                    var var4 = temp1 + 0x20;\n                    var var5 = temp2 + 0x20;\n                    var var6 = memory[temp2:temp2 + 0x20];\n                    var var7 = var6;\n                    var var8 = var4;\n                    var var9 = var5;\n                    var var10 = 0x00;\n                \n                    if (var10 >= var7) {\n                    label_01F6:\n                        var temp3 = var6;\n                        var4 = temp3 + var4;\n                        var5 = temp3 & 0x1f;\n                    \n                        if (!var5) {\n                            var temp4 = memory[0x40:0x60];\n                            return memory[temp4:temp4 + var4 - temp4];\n                        } else {\n                            var temp5 = var5;\n                            var temp6 = var4 - temp5;\n                            memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                            var temp7 = memory[0x40:0x60];\n                            return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                        }\n                    } else {\n                    label_01E4:\n                        var temp8 = var10;\n                        memory[var8 + temp8:var8 + temp8 + 0x20] = memory[var9 + temp8:var9 + temp8 + 0x20];\n                        var10 = temp8 + 0x20;\n                    \n                        if (var10 >= var7) { goto label_01F6; }\n                        else { goto label_01E4; }\n                    }\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x028a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = approve(var2, var3);\n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = !!var1;\n                    var temp10 = memory[0x40:0x60];\n                    return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n                } else if (var0 == 0x12065fe0) {\n                    // Dispatch table entry for getBalance()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02b9;\n                    var1 = getBalance();\n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = var1;\n                    var temp12 = memory[0x40:0x60];\n                    return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02e4;\n                    var1 = totalSupply();\n                    var temp13 = memory[0x40:0x60];\n                    memory[temp13:temp13 + 0x20] = var1;\n                    var temp14 = memory[0x40:0x60];\n                    return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n                } else if (var0 == 0x23b872dd) {\n                    // Dispatch table entry for transferFrom(address,address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0373;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    var1 = transferFrom(var2, var3);\n                    var temp15 = memory[0x40:0x60];\n                    memory[temp15:temp15 + 0x20] = !!var1;\n                    var temp16 = memory[0x40:0x60];\n                    return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n                } else if (var0 == 0x313ce567) {\n                    // Dispatch table entry for decimals()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03a2;\n                    var1 = decimals();\n                    var temp17 = memory[0x40:0x60];\n                    memory[temp17:temp17 + 0x20] = var1 & 0xff;\n                    var temp18 = memory[0x40:0x60];\n                    return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0x6c11bcd3 > var0) {\n                if (var0 == 0x39509351) {\n                    // Dispatch table entry for increaseAllowance(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0417;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = increaseAllowance(var2, var3);\n                    var temp19 = memory[0x40:0x60];\n                    memory[temp19:temp19 + 0x20] = !!var1;\n                    var temp20 = memory[0x40:0x60];\n                    return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n                } else if (var0 == 0x40c10f19) {\n                    // Dispatch table entry for mint(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x048a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = mint(var2, var3);\n                    var temp21 = memory[0x40:0x60];\n                    memory[temp21:temp21 + 0x20] = !!var1;\n                    var temp22 = memory[0x40:0x60];\n                    return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n                } else if (var0 == 0x42966c68) {\n                    // Dispatch table entry for burn(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x04dd;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = burn(var2, var3);\n                    var temp23 = memory[0x40:0x60];\n                    memory[temp23:temp23 + 0x20] = !!var1;\n                    var temp24 = memory[0x40:0x60];\n                    return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x6c11bcd3) {\n                // Dispatch table entry for sellTokens(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0530;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                sellTokens(var2, var3);\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0581;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = balanceOf(var2, var3);\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var1;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x715018a6) {\n                // Dispatch table entry for renounceOwnership()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ac;\n                renounceOwnership();\n                stop();\n            } else if (var0 == 0x7383b5ed) {\n                // Dispatch table entry for 0x7383b5ed (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0691;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                func_05D1(var2, var3);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xbc0bc6ba > var0) {\n            if (0x98d5fdca > var0) {\n                if (var0 == 0x8da5cb5b) {\n                    // Dispatch table entry for owner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x06a8;\n                    var1 = owner();\n                    var temp27 = memory[0x40:0x60];\n                    memory[temp27:temp27 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp28 = memory[0x40:0x60];\n                    return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n                } else if (var0 == 0x8f32d59b) {\n                    // Dispatch table entry for isOwner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x06ff;\n                    var1 = isOwner();\n                    var temp29 = memory[0x40:0x60];\n                    memory[temp29:temp29 + 0x20] = !!var1;\n                    var temp30 = memory[0x40:0x60];\n                    return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n                } else if (var0 == 0x95d89b41) {\n                    // Dispatch table entry for symbol()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x072e;\n                    var1 = symbol();\n                    var temp31 = memory[0x40:0x60];\n                    var2 = temp31;\n                    var3 = var2;\n                    var temp32 = var3 + 0x20;\n                    memory[var3:var3 + 0x20] = temp32 - var3;\n                    var temp33 = var1;\n                    memory[temp32:temp32 + 0x20] = memory[temp33:temp33 + 0x20];\n                    var4 = temp32 + 0x20;\n                    var5 = temp33 + 0x20;\n                    var6 = memory[temp33:temp33 + 0x20];\n                    var7 = var6;\n                    var8 = var4;\n                    var9 = var5;\n                    var10 = 0x00;\n                \n                    if (var10 >= var7) {\n                    label_076E:\n                        var temp34 = var6;\n                        var4 = temp34 + var4;\n                        var5 = temp34 & 0x1f;\n                    \n                        if (!var5) {\n                            var temp35 = memory[0x40:0x60];\n                            return memory[temp35:temp35 + var4 - temp35];\n                        } else {\n                            var temp36 = var5;\n                            var temp37 = var4 - temp36;\n                            memory[temp37:temp37 + 0x20] = ~(0x0100 ** (0x20 - temp36) - 0x01) & memory[temp37:temp37 + 0x20];\n                            var temp38 = memory[0x40:0x60];\n                            return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n                        }\n                    } else {\n                    label_075C:\n                        var temp39 = var10;\n                        memory[var8 + temp39:var8 + temp39 + 0x20] = memory[var9 + temp39:var9 + temp39 + 0x20];\n                        var10 = temp39 + 0x20;\n                    \n                        if (var10 >= var7) { goto label_076E; }\n                        else { goto label_075C; }\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x98d5fdca) {\n                // Dispatch table entry for getPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07be;\n                var1 = getPrice();\n                var temp40 = memory[0x40:0x60];\n                memory[temp40:temp40 + 0x20] = var1;\n                var temp41 = memory[0x40:0x60];\n                return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n            } else if (var0 == 0xa457c2d7) {\n                // Dispatch table entry for decreaseAllowance(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x082d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = decreaseAllowance(var2, var3);\n                var temp42 = memory[0x40:0x60];\n                memory[temp42:temp42 + 0x20] = !!var1;\n                var temp43 = memory[0x40:0x60];\n                return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08a0;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = transfer(var2, var3);\n                var temp44 = memory[0x40:0x60];\n                memory[temp44:temp44 + 0x20] = !!var1;\n                var temp45 = memory[0x40:0x60];\n                return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n            } else if (var0 == 0xb97dd9e2) {\n                // Dispatch table entry for getCurrentEpoch()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08cf;\n                var1 = getCurrentEpoch();\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var1;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xd8aabe7e > var0) {\n            if (var0 == 0xbc0bc6ba) {\n                // Dispatch table entry for getEpoch(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x091e;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1, var2, var3, var4, var5, var6 = getEpoch(var2, var3);\n                var temp48 = memory[0x40:0x60];\n                var7 = temp48;\n                var8 = var7;\n                var temp49 = var8 + 0x20;\n                memory[temp49:temp49 + 0x20] = var2;\n                var9 = temp49 + 0x20;\n                var temp50 = var9 + 0x20;\n                memory[temp50:temp50 + 0x20] = var4;\n                var temp51 = temp50 + 0x20;\n                memory[temp51:temp51 + 0x20] = var5;\n                var temp52 = temp51 + 0x20;\n                memory[temp52:temp52 + 0x20] = var6;\n                var temp53 = temp52 + 0x20;\n                memory[var8:var8 + 0x20] = temp53 - var8;\n                var temp54 = var1;\n                memory[temp53:temp53 + 0x20] = memory[temp54:temp54 + 0x20];\n                var10 = temp53 + 0x20;\n                var var12 = memory[temp54:temp54 + 0x20];\n                var var11 = temp54 + 0x20;\n                var var13 = var12;\n                var var14 = var10;\n                var var15 = var11;\n                var var16 = 0x00;\n            \n                if (var16 >= var13) {\n                label_097A:\n                    var temp55 = var12;\n                    var10 = temp55 + var10;\n                    var11 = temp55 & 0x1f;\n                \n                    if (!var11) {\n                        var temp56 = var10;\n                        memory[var9:var9 + 0x20] = temp56 - var7;\n                        var temp57 = var3;\n                        memory[temp56:temp56 + 0x20] = memory[temp57:temp57 + 0x20];\n                        var10 = temp56 + 0x20;\n                        var12 = memory[temp57:temp57 + 0x20];\n                        var11 = temp57 + 0x20;\n                        var13 = var12;\n                        var14 = var10;\n                        var15 = var11;\n                        var16 = 0x00;\n                    \n                        if (var16 >= var13) {\n                        label_09E0:\n                            var temp58 = var12;\n                            var10 = temp58 + var10;\n                            var11 = temp58 & 0x1f;\n                        \n                            if (!var11) {\n                                var temp59 = memory[0x40:0x60];\n                                return memory[temp59:temp59 + var10 - temp59];\n                            } else {\n                                var temp60 = var11;\n                                var temp61 = var10 - temp60;\n                                memory[temp61:temp61 + 0x20] = ~(0x0100 ** (0x20 - temp60) - 0x01) & memory[temp61:temp61 + 0x20];\n                                var temp62 = memory[0x40:0x60];\n                                return memory[temp62:temp62 + (temp61 + 0x20) - temp62];\n                            }\n                        } else {\n                        label_09CE:\n                            var temp63 = var16;\n                            memory[var14 + temp63:var14 + temp63 + 0x20] = memory[var15 + temp63:var15 + temp63 + 0x20];\n                            var16 = temp63 + 0x20;\n                        \n                            if (var16 >= var13) { goto label_09E0; }\n                            else { goto label_09CE; }\n                        }\n                    } else {\n                        var temp64 = var11;\n                        var temp65 = var10 - temp64;\n                        memory[temp65:temp65 + 0x20] = ~(0x0100 ** (0x20 - temp64) - 0x01) & memory[temp65:temp65 + 0x20];\n                        var temp66 = temp65 + 0x20;\n                        memory[var9:var9 + 0x20] = temp66 - var7;\n                        var temp67 = var3;\n                        memory[temp66:temp66 + 0x20] = memory[temp67:temp67 + 0x20];\n                        var10 = temp66 + 0x20;\n                        var11 = temp67 + 0x20;\n                        var12 = memory[temp67:temp67 + 0x20];\n                        var13 = var12;\n                        var14 = var10;\n                        var15 = var11;\n                        var16 = 0x00;\n                    \n                        if (var16 >= var13) { goto label_09E0; }\n                        else { goto label_09CE; }\n                    }\n                } else {\n                label_0968:\n                    var temp68 = var16;\n                    memory[var14 + temp68:var14 + temp68 + 0x20] = memory[var15 + temp68:var15 + temp68 + 0x20];\n                    var16 = temp68 + 0x20;\n                \n                    if (var16 >= var13) { goto label_097A; }\n                    else { goto label_0968; }\n                }\n            } else if (var0 == 0xce607688) {\n                // Dispatch table entry for 0xce607688 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0aaf;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                func_0A44(var2, var3);\n                stop();\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x0ab9;\n                var1 = deposit();\n                var temp69 = memory[0x40:0x60];\n                memory[temp69:temp69 + 0x20] = !!var1;\n                var temp70 = memory[0x40:0x60];\n                return memory[temp70:temp70 + (temp69 + 0x20) - temp70];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xd8aabe7e) {\n            // Dispatch table entry for 0xd8aabe7e (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b75;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n        \n            func_0AF6(var2, var3);\n            stop();\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0be6;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = allowance(var2, var3);\n            var temp71 = memory[0x40:0x60];\n            memory[temp71:temp71 + 0x20] = var1;\n            var temp72 = memory[0x40:0x60];\n            return memory[temp72:temp72 + (temp71 + 0x20) - temp72];\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c4b;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            transferOwnership(var2, var3);\n            stop();\n        } else if (var0 == 0xf3fef3a3) {\n            // Dispatch table entry for withdraw(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0ca6;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = withdraw(var2, var3);\n            var temp73 = memory[0x40:0x60];\n            memory[temp73:temp73 + 0x20] = !!var1;\n            var temp74 = memory[0x40:0x60];\n            return memory[temp74:temp74 + (temp73 + 0x20) - temp74];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x0d6f;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_1AD4(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transferFrom(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp1:temp1 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var1 = 0x00;\n        var var2 = 0x0d9a;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = var0;\n        func_1C33(var3, var4, var5);\n        var2 = 0x0e33;\n        var3 = arg0;\n        var4 = msg.sender;\n        var5 = 0x0e2e;\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var var6 = storage[keccak256(memory[0x00:0x40])];\n        var var7 = var0;\n        var5 = func_1DFD(var6, var7);\n        func_0E2E(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function increaseAllowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x0ef0;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = 0x0eeb;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        var var5 = storage[keccak256(memory[0x00:0x40])];\n        var var6 = arg1;\n        var4 = func_1E1D(var5, var6);\n        func_0EEB(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function mint(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x0f04;\n        var1 = isOwner();\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0f17;\n        var var2 = arg0;\n        var var3 = arg1;\n        func_1E3C(var2, var3);\n        return 0x01;\n    }\n    \n    function burn(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x00;\n        var var0 = 0x0f2b;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x0f3e;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        func_1F8E(var1, var2);\n        return 0x01;\n    }\n    \n    function sellTokens(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x00;\n        var var0 = 0x0f52;\n        var var1 = arg0;\n        var0 = func_20E0(var1);\n        arg1 = var0;\n        var0 = 0x0f5e;\n        var1 = msg.sender;\n        var var2 = arg0;\n        func_1F8E(var1, var2);\n        var0 = 0x0f73;\n        var1 = storage[0x0b];\n        var2 = arg1;\n        var0 = func_1DFD(var1, var2);\n        storage[0x0b] = var0;\n        var temp0 = arg1;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        var0 = !temp2;\n    \n        if (!var0) {\n            var0 = msg.sender;\n            var1 = 0x483f8aec0fd892ac72ad1ba8d0e9c9e73db59c12d263fd71de480b5b3deeae3c;\n            var2 = arg0;\n            var var3 = arg1;\n            var var4 = storage[0x0c];\n            var var5 = 0x1006;\n            var var6 = msg.sender;\n            var5 = func_1034(var6);\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = var2;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = var3;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = var4;\n            var temp6 = temp5 + 0x20;\n            memory[temp6:temp6 + 0x20] = var5;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [stack[-5], stack[-6]]);\n            return;\n        } else {\n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r0 = func_1034(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_05D1(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 * 0x20 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2;\n        var temp6 = var0;\n        var temp7 = arg1;\n        var0 = arg0;\n        arg1 = var1;\n        arg0 = temp6;\n        var1 = temp7;\n        var var3 = msg.data[temp5:temp5 + 0x20];\n        var2 = temp5 + 0x20;\n    \n        if (var3 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = var1 + var3;\n        var3 = temp8;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = var3;\n        var temp10 = msg.data[temp9:temp9 + 0x20];\n        var3 = temp10;\n        var var4 = var2;\n        var2 = temp9 + 0x20;\n    \n        if ((var3 > 0x0100000000) | (var2 + var3 * 0x20 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var1 = var3;\n        var0 = var2;\n        var2 = msg.data[var4:var4 + 0x20];\n        var3 = 0x1156;\n        var3 = isOwner();\n    \n        if (!var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = var2;\n        var4 = 0x1169;\n        var var5 = msg.sender;\n        var4 = func_1034(var5);\n    \n        if (var4 < var3) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 != var1) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 > 0xff & 0xc8) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x00;\n    \n        if (var3 >= arg1) {\n        label_11FD:\n            return;\n        } else {\n        label_11AC:\n            var4 = 0x11f0;\n            var5 = msg.sender;\n            var var6 = arg0;\n            var var7 = arg1;\n            var var8 = var3;\n        \n            if (var8 >= var7) { assert(); }\n        \n            func_11BB(var0, var1, var3, var5, var6, var7, var8);\n            var3 = var3 + 0x01;\n        \n            if (var3 >= arg1) { goto label_11FD; }\n            else { goto label_11AC; }\n        }\n    }\n    \n    function decreaseAllowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x13ce;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = 0x13c9;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        var var5 = storage[keccak256(memory[0x00:0x40])];\n        var var6 = arg1;\n        var4 = func_1DFD(var5, var6);\n        func_13C9(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x13e5;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_1C33(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function getEpoch(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3, var r4, var r5) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x60;\n        r3 = 0x00;\n        r4 = 0x60;\n        r5 = 0x00;\n        var var3 = r5;\n        var var4 = 0x00;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var var5 = temp1;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var var6 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var var7 = keccak256(memory[0x00:0x40]) + 0x02;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var var8 = storage[keccak256(memory[0x00:0x40]) + 0x03];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var var9 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var var10 = storage[keccak256(memory[0x00:0x40]) + 0x05];\n        var temp2 = storage[var5];\n        var temp3 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var11 = temp4;\n        var var12 = var5;\n        var var13 = temp3;\n        memory[var11:var11 + 0x20] = var13;\n        var var14 = var11 + 0x20;\n        var var15 = var12;\n        var temp5 = storage[var15];\n        var var16 = (!(temp5 & 0x01) * 0x0100 - 0x01 & temp5) / 0x02;\n    \n        if (!var16) {\n        label_1521:\n            var5 = var11;\n            var temp6 = var7;\n            var temp7 = storage[temp6];\n            var temp8 = (!(temp7 & 0x01) * 0x0100 - 0x01 & temp7) / 0x02;\n            var temp9 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp9 + (temp8 + 0x1f) / 0x20 * 0x20 + 0x20;\n            var11 = temp9;\n            var12 = temp6;\n            var13 = temp8;\n            memory[var11:var11 + 0x20] = var13;\n            var14 = var11 + 0x20;\n            var15 = var12;\n            var temp10 = storage[var15];\n            var16 = (!(temp10 & 0x01) * 0x0100 - 0x01 & temp10) / 0x02;\n        \n            if (!var16) {\n            label_15BD:\n                r5 = var10;\n                r3 = var8;\n                arg0 = var6;\n                r4 = var9;\n                arg1 = var11;\n                r0 = var5;\n                return r0, arg0, arg1, r3, r4, r5;\n            } else if (0x1f < var16) {\n                var temp11 = var14;\n                var temp12 = temp11 + var16;\n                var14 = temp12;\n                memory[0x00:0x20] = var15;\n                var temp13 = keccak256(memory[0x00:0x20]);\n                memory[temp11:temp11 + 0x20] = storage[temp13];\n                var15 = temp13 + 0x01;\n                var16 = temp11 + 0x20;\n            \n                if (var14 <= var16) { goto label_15B4; }\n            \n            label_15A0:\n                var temp14 = var15;\n                var temp15 = var16;\n                memory[temp15:temp15 + 0x20] = storage[temp14];\n                var15 = temp14 + 0x01;\n                var16 = temp15 + 0x20;\n            \n                if (var14 > var16) { goto label_15A0; }\n            \n            label_15B4:\n                var temp16 = var14;\n                var temp17 = temp16 + (var16 - temp16 & 0x1f);\n                var16 = temp16;\n                var14 = temp17;\n                goto label_15BD;\n            } else {\n                var temp18 = var14;\n                memory[temp18:temp18 + 0x20] = storage[var15] / 0x0100 * 0x0100;\n                var16 = var16;\n                var14 = temp18 + 0x20;\n                goto label_15BD;\n            }\n        } else if (0x1f < var16) {\n            var temp19 = var14;\n            var temp20 = temp19 + var16;\n            var14 = temp20;\n            memory[0x00:0x20] = var15;\n            var temp21 = keccak256(memory[0x00:0x20]);\n            memory[temp19:temp19 + 0x20] = storage[temp21];\n            var15 = temp21 + 0x01;\n            var16 = temp19 + 0x20;\n        \n            if (var14 <= var16) { goto label_1518; }\n        \n        label_1504:\n            var temp22 = var15;\n            var temp23 = var16;\n            memory[temp23:temp23 + 0x20] = storage[temp22];\n            var15 = temp22 + 0x01;\n            var16 = temp23 + 0x20;\n        \n            if (var14 > var16) { goto label_1504; }\n        \n        label_1518:\n            var temp24 = var14;\n            var temp25 = temp24 + (var16 - temp24 & 0x1f);\n            var16 = temp24;\n            var14 = temp25;\n            goto label_1521;\n        } else {\n            var temp26 = var14;\n            memory[temp26:temp26 + 0x20] = storage[var15] / 0x0100 * 0x0100;\n            var16 = var16;\n            var14 = temp26 + 0x20;\n            goto label_1521;\n        }\n    }\n    \n    function func_0A44(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = temp0 + arg1;\n        var var0 = temp0;\n        var var2 = msg.data[temp1:temp1 + 0x20];\n        var var1 = temp1 + 0x20;\n    \n        if (var2 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var0 + var2;\n        var2 = temp2;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var2;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var2 = temp4;\n        var var3 = var1;\n        var1 = temp3 + 0x20;\n    \n        if ((var2 > 0x0100000000) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var0 = var2;\n        arg1 = var1;\n        var1 = 0x15e1;\n        var1 = isOwner();\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x09] < arg0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x05] >= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var1 = 0x1640;\n        var2 = keccak256(memory[0x00:0x40]) + 0x02;\n        var var4 = var0;\n        var3 = arg1;\n        var1 = func_2258(var2, var3, var4);\n        var temp5 = var0;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = arg0;\n        var temp7 = temp6 + 0x20;\n        var temp8 = temp7 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp8 - temp6;\n        memory[temp8:temp8 + 0x20] = temp5;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp5] = msg.data[arg1:arg1 + temp5];\n        memory[temp9 + temp5:temp9 + temp5 + 0x20] = 0x00;\n        var temp10 = memory[0x40:0x60];\n        log(memory[temp10:temp10 + (temp9 + (temp5 + 0x1f & ~0x1f)) - temp10], [0x2980b8f6b424f577d41ae3c85b31a5b85136504bf2bb7205905d557f5e884ae9]);\n    }\n    \n    function func_0AF6(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2;\n        arg1 = var1;\n        arg0 = var0;\n        var temp6 = temp5 + 0x20;\n        var0 = msg.data[temp5:temp5 + 0x20];\n        var1 = msg.data[temp6:temp6 + 0x20];\n        var2 = msg.data[temp6 + 0x20:temp6 + 0x20 + 0x20];\n        var var3 = 0x1749;\n        var3 = isOwner();\n    \n        if (!var3) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x01] >= var0) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x00;\n        var var4 = 0x1780;\n        var4 = totalSupply();\n        var3 = var4;\n        var4 = storage[0x0c];\n        storage[0x09] = storage[0x09] + 0x01;\n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n        var var5 = 0x17c2;\n        var var6 = keccak256(memory[0x00:0x40]);\n        var var7 = arg0;\n        var var8 = arg1;\n        var5 = func_2258(var6, var7, var8);\n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n        storage[keccak256(memory[0x00:0x40]) + 0x01] = var0;\n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n        storage[keccak256(memory[0x00:0x40]) + 0x03] = var1;\n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n        storage[keccak256(memory[0x00:0x40]) + 0x04] = var2;\n        var5 = 0x1836;\n        var6 = var0;\n        var7 = 0xffffffff & 0x278d00;\n        var5 = func_1E1D(var6, var7);\n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n        storage[keccak256(memory[0x00:0x40]) + 0x05] = var5;\n        var5 = 0x189d;\n        var6 = 0x1868;\n        var7 = var3;\n        var8 = var2;\n        var6 = func_1E1D(var7, var8);\n        var5 = func_1868(var1, var3, var6);\n        storage[0x0c] = var5;\n    \n        if (storage[0x0c] == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp7 = memory[0x40:0x60];\n        memory[temp7:temp7 + 0x20] = storage[0x09];\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + 0x20] = var1;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + 0x20] = var2;\n        var temp10 = temp9 + 0x20;\n        memory[temp10:temp10 + 0x20] = storage[0x0c];\n        var temp11 = temp10 + 0x20;\n        memory[temp11:temp11 + 0x20] = var3;\n        var temp12 = temp11 + 0x20;\n        memory[temp12:temp12 + 0x20] = var4;\n        var temp13 = temp12 + 0x20;\n        memory[temp13:temp13 + 0x20] = storage[0x0b];\n        var temp14 = memory[0x40:0x60];\n        log(memory[temp14:temp14 + (temp13 + 0x20) - temp14], [0x451a33bce8b211ee8e3a53c196f1d829645dfbeeabdc58816723431a6411be5c]);\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferOwnership(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x19b8;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x19ca;\n        var var0 = arg0;\n        func_215E(var0);\n    }\n    \n    function withdraw(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x19d7;\n        var1 = isOwner();\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x1a2f;\n        var var2 = storage[0x0b];\n        var var3 = arg1;\n        var1 = func_1DFD(var2, var3);\n        storage[0x0b] = var1;\n        var temp1 = arg1;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n        var1 = !temp3;\n    \n        if (!var1) {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = arg1;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            var temp6 = returndata.length;\n            memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function name() returns (var r0) {\n        var var0 = 0x60;\n        var temp0 = storage[0x03];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x03;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_0D58:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_0D4F; }\n        \n        label_0D3B:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_0D3B; }\n        \n        label_0D4F:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_0D58;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp11 + 0x20;\n            goto label_0D58;\n        }\n    }\n    \n    function getBalance() returns (var r0) { return storage[0x0b]; }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function func_0E2E(var arg0, var arg1, var arg2) {\n        func_1AD4(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function func_0EEB(var arg0, var arg1, var arg2) {\n        func_1AD4(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1034(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function renounceOwnership() {\n        var var0 = 0x1084;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x05] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n        storage[0x05] = (storage[0x05] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01)) | 0x00;\n    }\n    \n    function func_11BB(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) {\n        arg4 = msg.data[arg6 * 0x20 + arg4:arg6 * 0x20 + arg4 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg5 = arg0;\n        arg6 = arg1;\n        var var0 = arg2;\n    \n        if (var0 >= arg6) { assert(); }\n    \n        arg5 = msg.data[var0 * 0x20 + arg5:var0 * 0x20 + arg5 + 0x20];\n        func_1C33(arg3, arg4, arg5);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function owner() returns (var r0) { return storage[0x05] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function isOwner() returns (var r0) { return msg.sender == storage[0x05] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x60;\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x04;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_131F:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_1316; }\n        \n        label_1302:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_1302; }\n        \n        label_1316:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_131F;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp11 + 0x20;\n            goto label_131F;\n        }\n    }\n    \n    function getPrice() returns (var r0) { return storage[0x0c]; }\n    \n    function func_13C9(var arg0, var arg1, var arg2) {\n        func_1AD4(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getCurrentEpoch() returns (var r0) { return storage[0x09]; }\n    \n    function deposit() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x16bb;\n        var1 = isOwner();\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x16e6;\n        var var2 = storage[0x0b];\n        var var3 = msg.value;\n        var1 = func_1E1D(var2, var3);\n        storage[0x0b] = var1;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n        return 0x01;\n    }\n    \n    function func_1868(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x188f;\n        var var1 = 0x1880;\n        var var2 = arg1;\n        var var3 = storage[0x0c];\n        var1 = func_20FE(var2, var3);\n        var0 = func_1880(arg0, var1);\n        var temp0 = arg2;\n        arg2 = var0;\n        var0 = temp0;\n        var1 = 0x00;\n    \n        if (var0 <= var1) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x00;\n        var3 = var0;\n        var var4 = arg2;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_1880(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = arg0;\n        var var0 = temp0;\n        r0 = func_1E1D(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1AD4(var arg0, var arg1, var arg2) {\n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg2;\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg1;\n        memory[0x00:0x20] = temp3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp2;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1C33(var arg0, var arg1, var arg2) {\n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x1cbe;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg2;\n        var0 = func_1DFD(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x1d51;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg2;\n        var0 = func_1E1D(var1, var2);\n        var temp0 = arg1;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg2;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1DFD(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1E1D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1E3C(var arg0, var arg1) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x1e8b;\n        var var1 = storage[0x02];\n        var var2 = arg1;\n        var0 = func_1E1D(var1, var2);\n        storage[0x02] = var0;\n        var0 = 0x1ee2;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg1;\n        var0 = func_1E1D(var1, var2);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0xffffffffffffffffffffffffffffffffffffffff & 0x00, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1F8E(var arg0, var arg1) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x1fdd;\n        var var1 = storage[0x02];\n        var var2 = arg1;\n        var0 = func_1DFD(var1, var2);\n        storage[0x02] = var0;\n        var0 = 0x2034;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg1;\n        var0 = func_1DFD(var1, var2);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n    }\n    \n    function func_20E0(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20f7;\n        var var2 = arg0;\n        var var3 = storage[0x0c];\n        return func_20FE(var2, var3);\n    }\n    \n    function func_20FE(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 != var0) {\n            var var1 = arg0 * arg1;\n            var var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { revert(memory[0x00:0x00]); }\n        \n            var0 = var1;\n        \n        label_2132:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_2132;\n        }\n    }\n    \n    function func_215E(var arg0) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x05] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x05] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100 ** 0x01 | (storage[0x05] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01));\n    }\n    \n    function func_2258(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_22C7:\n                var temp4 = arg1;\n                arg1 = 0x22d4;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_22D8(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_22C6:\n                    goto label_22C7;\n                } else {\n                label_22B4:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = msg.data[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_22C6; }\n                    else { goto label_22B4; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (msg.data[var1:var1 + 0x20] & ~0xff);\n            goto label_22C7;\n        }\n    }\n    \n    function func_22D8(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x22fa;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_22F6(arg1, var0); }\n    \n    label_22E7:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_22E7; }\n    \n        arg0 = func_22F6(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_22F6(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x8da5cb5b > var0) {\n            if (0x39509351 > var0) {\n                if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b6;\n                    var1 = name();\n                    var temp0 = memory[0x40:0x60];\n                    var var2 = temp0;\n                    var var3 = var2;\n                    var temp1 = var3 + 0x20;\n                    memory[var3:var3 + 0x20] = temp1 - var3;\n                    var temp2 = var1;\n                    memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                    var var4 = temp1 + 0x20;\n                    var var5 = temp2 + 0x20;\n                    var var6 = memory[temp2:temp2 + 0x20];\n                    var var7 = var6;\n                    var var8 = var4;\n                    var var9 = var5;\n                    var var10 = 0x00;\n                \n                    if (var10 >= var7) {\n                    label_01F6:\n                        var temp3 = var6;\n                        var4 = temp3 + var4;\n                        var5 = temp3 & 0x1f;\n                    \n                        if (!var5) {\n                            var temp4 = memory[0x40:0x60];\n                            return memory[temp4:temp4 + var4 - temp4];\n                        } else {\n                            var temp5 = var5;\n                            var temp6 = var4 - temp5;\n                            memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                            var temp7 = memory[0x40:0x60];\n                            return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                        }\n                    } else {\n                    label_01E4:\n                        var temp8 = var10;\n                        memory[var8 + temp8:var8 + temp8 + 0x20] = memory[var9 + temp8:var9 + temp8 + 0x20];\n                        var10 = temp8 + 0x20;\n                    \n                        if (var10 >= var7) { goto label_01F6; }\n                        else { goto label_01E4; }\n                    }\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x028a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = approve(var2, var3);\n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = !!var1;\n                    var temp10 = memory[0x40:0x60];\n                    return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n                } else if (var0 == 0x12065fe0) {\n                    // Dispatch table entry for getBalance()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02b9;\n                    var1 = getBalance();\n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = var1;\n                    var temp12 = memory[0x40:0x60];\n                    return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02e4;\n                    var1 = totalSupply();\n                    var temp13 = memory[0x40:0x60];\n                    memory[temp13:temp13 + 0x20] = var1;\n                    var temp14 = memory[0x40:0x60];\n                    return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n                } else if (var0 == 0x23b872dd) {\n                    // Dispatch table entry for transferFrom(address,address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0373;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    var1 = transferFrom(var2, var3);\n                    var temp15 = memory[0x40:0x60];\n                    memory[temp15:temp15 + 0x20] = !!var1;\n                    var temp16 = memory[0x40:0x60];\n                    return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n                } else if (var0 == 0x313ce567) {\n                    // Dispatch table entry for decimals()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03a2;\n                    var1 = decimals();\n                    var temp17 = memory[0x40:0x60];\n                    memory[temp17:temp17 + 0x20] = var1 & 0xff;\n                    var temp18 = memory[0x40:0x60];\n                    return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0x6c11bcd3 > var0) {\n                if (var0 == 0x39509351) {\n                    // Dispatch table entry for increaseAllowance(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0417;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = increaseAllowance(var2, var3);\n                    var temp19 = memory[0x40:0x60];\n                    memory[temp19:temp19 + 0x20] = !!var1;\n                    var temp20 = memory[0x40:0x60];\n                    return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n                } else if (var0 == 0x40c10f19) {\n                    // Dispatch table entry for mint(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x048a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = mint(var2, var3);\n                    var temp21 = memory[0x40:0x60];\n                    memory[temp21:temp21 + 0x20] = !!var1;\n                    var temp22 = memory[0x40:0x60];\n                    return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n                } else if (var0 == 0x42966c68) {\n                    // Dispatch table entry for burn(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x04dd;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = burn(var2, var3);\n                    var temp23 = memory[0x40:0x60];\n                    memory[temp23:temp23 + 0x20] = !!var1;\n                    var temp24 = memory[0x40:0x60];\n                    return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x6c11bcd3) {\n                // Dispatch table entry for sellTokens(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0530;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                sellTokens(var2, var3);\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0581;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = balanceOf(var2, var3);\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var1;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x715018a6) {\n                // Dispatch table entry for renounceOwnership()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ac;\n                renounceOwnership();\n                stop();\n            } else if (var0 == 0x7383b5ed) {\n                // Dispatch table entry for 0x7383b5ed (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0691;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                func_05D1(var2, var3);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xbc0bc6ba > var0) {\n            if (0x98d5fdca > var0) {\n                if (var0 == 0x8da5cb5b) {\n                    // Dispatch table entry for owner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x06a8;\n                    var1 = owner();\n                    var temp27 = memory[0x40:0x60];\n                    memory[temp27:temp27 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp28 = memory[0x40:0x60];\n                    return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n                } else if (var0 == 0x8f32d59b) {\n                    // Dispatch table entry for isOwner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x06ff;\n                    var1 = isOwner();\n                    var temp29 = memory[0x40:0x60];\n                    memory[temp29:temp29 + 0x20] = !!var1;\n                    var temp30 = memory[0x40:0x60];\n                    return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n                } else if (var0 == 0x95d89b41) {\n                    // Dispatch table entry for symbol()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x072e;\n                    var1 = symbol();\n                    var temp31 = memory[0x40:0x60];\n                    var2 = temp31;\n                    var3 = var2;\n                    var temp32 = var3 + 0x20;\n                    memory[var3:var3 + 0x20] = temp32 - var3;\n                    var temp33 = var1;\n                    memory[temp32:temp32 + 0x20] = memory[temp33:temp33 + 0x20];\n                    var4 = temp32 + 0x20;\n                    var5 = temp33 + 0x20;\n                    var6 = memory[temp33:temp33 + 0x20];\n                    var7 = var6;\n                    var8 = var4;\n                    var9 = var5;\n                    var10 = 0x00;\n                \n                    if (var10 >= var7) {\n                    label_076E:\n                        var temp34 = var6;\n                        var4 = temp34 + var4;\n                        var5 = temp34 & 0x1f;\n                    \n                        if (!var5) {\n                            var temp35 = memory[0x40:0x60];\n                            return memory[temp35:temp35 + var4 - temp35];\n                        } else {\n                            var temp36 = var5;\n                            var temp37 = var4 - temp36;\n                            memory[temp37:temp37 + 0x20] = ~(0x0100 ** (0x20 - temp36) - 0x01) & memory[temp37:temp37 + 0x20];\n                            var temp38 = memory[0x40:0x60];\n                            return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n                        }\n                    } else {\n                    label_075C:\n                        var temp39 = var10;\n                        memory[var8 + temp39:var8 + temp39 + 0x20] = memory[var9 + temp39:var9 + temp39 + 0x20];\n                        var10 = temp39 + 0x20;\n                    \n                        if (var10 >= var7) { goto label_076E; }\n                        else { goto label_075C; }\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x98d5fdca) {\n                // Dispatch table entry for getPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07be;\n                var1 = getPrice();\n                var temp40 = memory[0x40:0x60];\n                memory[temp40:temp40 + 0x20] = var1;\n                var temp41 = memory[0x40:0x60];\n                return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n            } else if (var0 == 0xa457c2d7) {\n                // Dispatch table entry for decreaseAllowance(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x082d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = decreaseAllowance(var2, var3);\n                var temp42 = memory[0x40:0x60];\n                memory[temp42:temp42 + 0x20] = !!var1;\n                var temp43 = memory[0x40:0x60];\n                return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08a0;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = transfer(var2, var3);\n                var temp44 = memory[0x40:0x60];\n                memory[temp44:temp44 + 0x20] = !!var1;\n                var temp45 = memory[0x40:0x60];\n                return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n            } else if (var0 == 0xb97dd9e2) {\n                // Dispatch table entry for getCurrentEpoch()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08cf;\n                var1 = getCurrentEpoch();\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var1;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xd8aabe7e > var0) {\n            if (var0 == 0xbc0bc6ba) {\n                // Dispatch table entry for getEpoch(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x091e;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1, var2, var3, var4, var5, var6 = getEpoch(var2, var3);\n                var temp48 = memory[0x40:0x60];\n                var7 = temp48;\n                var8 = var7;\n                var temp49 = var8 + 0x20;\n                memory[temp49:temp49 + 0x20] = var2;\n                var9 = temp49 + 0x20;\n                var temp50 = var9 + 0x20;\n                memory[temp50:temp50 + 0x20] = var4;\n                var temp51 = temp50 + 0x20;\n                memory[temp51:temp51 + 0x20] = var5;\n                var temp52 = temp51 + 0x20;\n                memory[temp52:temp52 + 0x20] = var6;\n                var temp53 = temp52 + 0x20;\n                memory[var8:var8 + 0x20] = temp53 - var8;\n                var temp54 = var1;\n                memory[temp53:temp53 + 0x20] = memory[temp54:temp54 + 0x20];\n                var10 = temp53 + 0x20;\n                var var12 = memory[temp54:temp54 + 0x20];\n                var var11 = temp54 + 0x20;\n                var var13 = var12;\n                var var14 = var10;\n                var var15 = var11;\n                var var16 = 0x00;\n            \n                if (var16 >= var13) {\n                label_097A:\n                    var temp55 = var12;\n                    var10 = temp55 + var10;\n                    var11 = temp55 & 0x1f;\n                \n                    if (!var11) {\n                        var temp56 = var10;\n                        memory[var9:var9 + 0x20] = temp56 - var7;\n                        var temp57 = var3;\n                        memory[temp56:temp56 + 0x20] = memory[temp57:temp57 + 0x20];\n                        var10 = temp56 + 0x20;\n                        var12 = memory[temp57:temp57 + 0x20];\n                        var11 = temp57 + 0x20;\n                        var13 = var12;\n                        var14 = var10;\n                        var15 = var11;\n                        var16 = 0x00;\n                    \n                        if (var16 >= var13) {\n                        label_09E0:\n                            var temp58 = var12;\n                            var10 = temp58 + var10;\n                            var11 = temp58 & 0x1f;\n                        \n                            if (!var11) {\n                                var temp59 = memory[0x40:0x60];\n                                return memory[temp59:temp59 + var10 - temp59];\n                            } else {\n                                var temp60 = var11;\n                                var temp61 = var10 - temp60;\n                                memory[temp61:temp61 + 0x20] = ~(0x0100 ** (0x20 - temp60) - 0x01) & memory[temp61:temp61 + 0x20];\n                                var temp62 = memory[0x40:0x60];\n                                return memory[temp62:temp62 + (temp61 + 0x20) - temp62];\n                            }\n                        } else {\n                        label_09CE:\n                            var temp63 = var16;\n                            memory[var14 + temp63:var14 + temp63 + 0x20] = memory[var15 + temp63:var15 + temp63 + 0x20];\n                            var16 = temp63 + 0x20;\n                        \n                            if (var16 >= var13) { goto label_09E0; }\n                            else { goto label_09CE; }\n                        }\n                    } else {\n                        var temp64 = var11;\n                        var temp65 = var10 - temp64;\n                        memory[temp65:temp65 + 0x20] = ~(0x0100 ** (0x20 - temp64) - 0x01) & memory[temp65:temp65 + 0x20];\n                        var temp66 = temp65 + 0x20;\n                        memory[var9:var9 + 0x20] = temp66 - var7;\n                        var temp67 = var3;\n                        memory[temp66:temp66 + 0x20] = memory[temp67:temp67 + 0x20];\n                        var10 = temp66 + 0x20;\n                        var11 = temp67 + 0x20;\n                        var12 = memory[temp67:temp67 + 0x20];\n                        var13 = var12;\n                        var14 = var10;\n                        var15 = var11;\n                        var16 = 0x00;\n                    \n                        if (var16 >= var13) { goto label_09E0; }\n                        else { goto label_09CE; }\n                    }\n                } else {\n                label_0968:\n                    var temp68 = var16;\n                    memory[var14 + temp68:var14 + temp68 + 0x20] = memory[var15 + temp68:var15 + temp68 + 0x20];\n                    var16 = temp68 + 0x20;\n                \n                    if (var16 >= var13) { goto label_097A; }\n                    else { goto label_0968; }\n                }\n            } else if (var0 == 0xce607688) {\n                // Dispatch table entry for 0xce607688 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0aaf;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                func_0A44(var2, var3);\n                stop();\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x0ab9;\n                var1 = deposit();\n                var temp69 = memory[0x40:0x60];\n                memory[temp69:temp69 + 0x20] = !!var1;\n                var temp70 = memory[0x40:0x60];\n                return memory[temp70:temp70 + (temp69 + 0x20) - temp70];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xd8aabe7e) {\n            // Dispatch table entry for 0xd8aabe7e (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b75;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n        \n            func_0AF6(var2, var3);\n            stop();\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0be6;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = allowance(var2, var3);\n            var temp71 = memory[0x40:0x60];\n            memory[temp71:temp71 + 0x20] = var1;\n            var temp72 = memory[0x40:0x60];\n            return memory[temp72:temp72 + (temp71 + 0x20) - temp72];\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c4b;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            transferOwnership(var2, var3);\n            stop();\n        } else if (var0 == 0xf3fef3a3) {\n            // Dispatch table entry for withdraw(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0ca6;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = withdraw(var2, var3);\n            var temp73 = memory[0x40:0x60];\n            memory[temp73:temp73 + 0x20] = !!var1;\n            var temp74 = memory[0x40:0x60];\n            return memory[temp74:temp74 + (temp73 + 0x20) - temp74];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x0d6f;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_1AD4(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transferFrom(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp1:temp1 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var1 = 0x00;\n        var var2 = 0x0d9a;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = var0;\n        func_1C33(var3, var4, var5);\n        var2 = 0x0e33;\n        var3 = arg0;\n        var4 = msg.sender;\n        var5 = 0x0e2e;\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var var6 = storage[keccak256(memory[0x00:0x40])];\n        var var7 = var0;\n        var5 = func_1DFD(var6, var7);\n        func_0E2E(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function increaseAllowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x0ef0;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = 0x0eeb;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        var var5 = storage[keccak256(memory[0x00:0x40])];\n        var var6 = arg1;\n        var4 = func_1E1D(var5, var6);\n        func_0EEB(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function mint(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x0f04;\n        var1 = isOwner();\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0f17;\n        var var2 = arg0;\n        var var3 = arg1;\n        func_1E3C(var2, var3);\n        return 0x01;\n    }\n    \n    function burn(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x00;\n        var var0 = 0x0f2b;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x0f3e;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        func_1F8E(var1, var2);\n        return 0x01;\n    }\n    \n    function sellTokens(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x00;\n        var var0 = 0x0f52;\n        var var1 = arg0;\n        var0 = func_20E0(var1);\n        arg1 = var0;\n        var0 = 0x0f5e;\n        var1 = msg.sender;\n        var var2 = arg0;\n        func_1F8E(var1, var2);\n        var0 = 0x0f73;\n        var1 = storage[0x0b];\n        var2 = arg1;\n        var0 = func_1DFD(var1, var2);\n        storage[0x0b] = var0;\n        var temp0 = arg1;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        var0 = !temp2;\n    \n        if (!var0) {\n            var0 = msg.sender;\n            var1 = 0x483f8aec0fd892ac72ad1ba8d0e9c9e73db59c12d263fd71de480b5b3deeae3c;\n            var2 = arg0;\n            var var3 = arg1;\n            var var4 = storage[0x0c];\n            var var5 = 0x1006;\n            var var6 = msg.sender;\n            var5 = func_1034(var6);\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = var2;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = var3;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = var4;\n            var temp6 = temp5 + 0x20;\n            memory[temp6:temp6 + 0x20] = var5;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [stack[-5], stack[-6]]);\n            return;\n        } else {\n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r0 = func_1034(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_05D1(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 * 0x20 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2;\n        var temp6 = var0;\n        var temp7 = arg1;\n        var0 = arg0;\n        arg1 = var1;\n        arg0 = temp6;\n        var1 = temp7;\n        var var3 = msg.data[temp5:temp5 + 0x20];\n        var2 = temp5 + 0x20;\n    \n        if (var3 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = var1 + var3;\n        var3 = temp8;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = var3;\n        var temp10 = msg.data[temp9:temp9 + 0x20];\n        var3 = temp10;\n        var var4 = var2;\n        var2 = temp9 + 0x20;\n    \n        if ((var3 > 0x0100000000) | (var2 + var3 * 0x20 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var1 = var3;\n        var0 = var2;\n        var2 = msg.data[var4:var4 + 0x20];\n        var3 = 0x1156;\n        var3 = isOwner();\n    \n        if (!var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = var2;\n        var4 = 0x1169;\n        var var5 = msg.sender;\n        var4 = func_1034(var5);\n    \n        if (var4 < var3) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 != var1) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 > 0xff & 0xc8) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x00;\n    \n        if (var3 >= arg1) {\n        label_11FD:\n            return;\n        } else {\n        label_11AC:\n            var4 = 0x11f0;\n            var5 = msg.sender;\n            var var6 = arg0;\n            var var7 = arg1;\n            var var8 = var3;\n        \n            if (var8 >= var7) { assert(); }\n        \n            func_11BB(var0, var1, var3, var5, var6, var7, var8);\n            var3 = var3 + 0x01;\n        \n            if (var3 >= arg1) { goto label_11FD; }\n            else { goto label_11AC; }\n        }\n    }\n    \n    function decreaseAllowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x13ce;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = 0x13c9;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        var var5 = storage[keccak256(memory[0x00:0x40])];\n        var var6 = arg1;\n        var4 = func_1DFD(var5, var6);\n        func_13C9(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x13e5;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_1C33(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function getEpoch(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3, var r4, var r5) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x60;\n        r3 = 0x00;\n        r4 = 0x60;\n        r5 = 0x00;\n        var var3 = r5;\n        var var4 = 0x00;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var var5 = temp1;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var var6 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var var7 = keccak256(memory[0x00:0x40]) + 0x02;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var var8 = storage[keccak256(memory[0x00:0x40]) + 0x03];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var var9 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var var10 = storage[keccak256(memory[0x00:0x40]) + 0x05];\n        var temp2 = storage[var5];\n        var temp3 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var11 = temp4;\n        var var12 = var5;\n        var var13 = temp3;\n        memory[var11:var11 + 0x20] = var13;\n        var var14 = var11 + 0x20;\n        var var15 = var12;\n        var temp5 = storage[var15];\n        var var16 = (!(temp5 & 0x01) * 0x0100 - 0x01 & temp5) / 0x02;\n    \n        if (!var16) {\n        label_1521:\n            var5 = var11;\n            var temp6 = var7;\n            var temp7 = storage[temp6];\n            var temp8 = (!(temp7 & 0x01) * 0x0100 - 0x01 & temp7) / 0x02;\n            var temp9 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp9 + (temp8 + 0x1f) / 0x20 * 0x20 + 0x20;\n            var11 = temp9;\n            var12 = temp6;\n            var13 = temp8;\n            memory[var11:var11 + 0x20] = var13;\n            var14 = var11 + 0x20;\n            var15 = var12;\n            var temp10 = storage[var15];\n            var16 = (!(temp10 & 0x01) * 0x0100 - 0x01 & temp10) / 0x02;\n        \n            if (!var16) {\n            label_15BD:\n                r5 = var10;\n                r3 = var8;\n                arg0 = var6;\n                r4 = var9;\n                arg1 = var11;\n                r0 = var5;\n                return r0, arg0, arg1, r3, r4, r5;\n            } else if (0x1f < var16) {\n                var temp11 = var14;\n                var temp12 = temp11 + var16;\n                var14 = temp12;\n                memory[0x00:0x20] = var15;\n                var temp13 = keccak256(memory[0x00:0x20]);\n                memory[temp11:temp11 + 0x20] = storage[temp13];\n                var15 = temp13 + 0x01;\n                var16 = temp11 + 0x20;\n            \n                if (var14 <= var16) { goto label_15B4; }\n            \n            label_15A0:\n                var temp14 = var15;\n                var temp15 = var16;\n                memory[temp15:temp15 + 0x20] = storage[temp14];\n                var15 = temp14 + 0x01;\n                var16 = temp15 + 0x20;\n            \n                if (var14 > var16) { goto label_15A0; }\n            \n            label_15B4:\n                var temp16 = var14;\n                var temp17 = temp16 + (var16 - temp16 & 0x1f);\n                var16 = temp16;\n                var14 = temp17;\n                goto label_15BD;\n            } else {\n                var temp18 = var14;\n                memory[temp18:temp18 + 0x20] = storage[var15] / 0x0100 * 0x0100;\n                var16 = var16;\n                var14 = temp18 + 0x20;\n                goto label_15BD;\n            }\n        } else if (0x1f < var16) {\n            var temp19 = var14;\n            var temp20 = temp19 + var16;\n            var14 = temp20;\n            memory[0x00:0x20] = var15;\n            var temp21 = keccak256(memory[0x00:0x20]);\n            memory[temp19:temp19 + 0x20] = storage[temp21];\n            var15 = temp21 + 0x01;\n            var16 = temp19 + 0x20;\n        \n            if (var14 <= var16) { goto label_1518; }\n        \n        label_1504:\n            var temp22 = var15;\n            var temp23 = var16;\n            memory[temp23:temp23 + 0x20] = storage[temp22];\n            var15 = temp22 + 0x01;\n            var16 = temp23 + 0x20;\n        \n            if (var14 > var16) { goto label_1504; }\n        \n        label_1518:\n            var temp24 = var14;\n            var temp25 = temp24 + (var16 - temp24 & 0x1f);\n            var16 = temp24;\n            var14 = temp25;\n            goto label_1521;\n        } else {\n            var temp26 = var14;\n            memory[temp26:temp26 + 0x20] = storage[var15] / 0x0100 * 0x0100;\n            var16 = var16;\n            var14 = temp26 + 0x20;\n            goto label_1521;\n        }\n    }\n    \n    function func_0A44(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = temp0 + arg1;\n        var var0 = temp0;\n        var var2 = msg.data[temp1:temp1 + 0x20];\n        var var1 = temp1 + 0x20;\n    \n        if (var2 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var0 + var2;\n        var2 = temp2;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var2;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var2 = temp4;\n        var var3 = var1;\n        var1 = temp3 + 0x20;\n    \n        if ((var2 > 0x0100000000) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var0 = var2;\n        arg1 = var1;\n        var1 = 0x15e1;\n        var1 = isOwner();\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x09] < arg0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x05] >= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var1 = 0x1640;\n        var2 = keccak256(memory[0x00:0x40]) + 0x02;\n        var var4 = var0;\n        var3 = arg1;\n        var1 = func_2258(var2, var3, var4);\n        var temp5 = var0;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = arg0;\n        var temp7 = temp6 + 0x20;\n        var temp8 = temp7 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp8 - temp6;\n        memory[temp8:temp8 + 0x20] = temp5;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp5] = msg.data[arg1:arg1 + temp5];\n        memory[temp9 + temp5:temp9 + temp5 + 0x20] = 0x00;\n        var temp10 = memory[0x40:0x60];\n        log(memory[temp10:temp10 + (temp9 + (temp5 + 0x1f & ~0x1f)) - temp10], [0x2980b8f6b424f577d41ae3c85b31a5b85136504bf2bb7205905d557f5e884ae9]);\n    }\n    \n    function func_0AF6(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2;\n        arg1 = var1;\n        arg0 = var0;\n        var temp6 = temp5 + 0x20;\n        var0 = msg.data[temp5:temp5 + 0x20];\n        var1 = msg.data[temp6:temp6 + 0x20];\n        var2 = msg.data[temp6 + 0x20:temp6 + 0x20 + 0x20];\n        var var3 = 0x1749;\n        var3 = isOwner();\n    \n        if (!var3) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x01] >= var0) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x00;\n        var var4 = 0x1780;\n        var4 = totalSupply();\n        var3 = var4;\n        var4 = storage[0x0c];\n        storage[0x09] = storage[0x09] + 0x01;\n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n        var var5 = 0x17c2;\n        var var6 = keccak256(memory[0x00:0x40]);\n        var var7 = arg0;\n        var var8 = arg1;\n        var5 = func_2258(var6, var7, var8);\n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n        storage[keccak256(memory[0x00:0x40]) + 0x01] = var0;\n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n        storage[keccak256(memory[0x00:0x40]) + 0x03] = var1;\n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n        storage[keccak256(memory[0x00:0x40]) + 0x04] = var2;\n        var5 = 0x1836;\n        var6 = var0;\n        var7 = 0xffffffff & 0x278d00;\n        var5 = func_1E1D(var6, var7);\n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n        storage[keccak256(memory[0x00:0x40]) + 0x05] = var5;\n        var5 = 0x189d;\n        var6 = 0x1868;\n        var7 = var3;\n        var8 = var2;\n        var6 = func_1E1D(var7, var8);\n        var5 = func_1868(var1, var3, var6);\n        storage[0x0c] = var5;\n    \n        if (storage[0x0c] == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp7 = memory[0x40:0x60];\n        memory[temp7:temp7 + 0x20] = storage[0x09];\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + 0x20] = var1;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + 0x20] = var2;\n        var temp10 = temp9 + 0x20;\n        memory[temp10:temp10 + 0x20] = storage[0x0c];\n        var temp11 = temp10 + 0x20;\n        memory[temp11:temp11 + 0x20] = var3;\n        var temp12 = temp11 + 0x20;\n        memory[temp12:temp12 + 0x20] = var4;\n        var temp13 = temp12 + 0x20;\n        memory[temp13:temp13 + 0x20] = storage[0x0b];\n        var temp14 = memory[0x40:0x60];\n        log(memory[temp14:temp14 + (temp13 + 0x20) - temp14], [0x451a33bce8b211ee8e3a53c196f1d829645dfbeeabdc58816723431a6411be5c]);\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferOwnership(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x19b8;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x19ca;\n        var var0 = arg0;\n        func_215E(var0);\n    }\n    \n    function withdraw(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x19d7;\n        var1 = isOwner();\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x1a2f;\n        var var2 = storage[0x0b];\n        var var3 = arg1;\n        var1 = func_1DFD(var2, var3);\n        storage[0x0b] = var1;\n        var temp1 = arg1;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n        var1 = !temp3;\n    \n        if (!var1) {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = arg1;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            var temp6 = returndata.length;\n            memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function name() returns (var r0) {\n        var var0 = 0x60;\n        var temp0 = storage[0x03];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x03;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_0D58:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_0D4F; }\n        \n        label_0D3B:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_0D3B; }\n        \n        label_0D4F:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_0D58;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp11 + 0x20;\n            goto label_0D58;\n        }\n    }\n    \n    function getBalance() returns (var r0) { return storage[0x0b]; }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function func_0E2E(var arg0, var arg1, var arg2) {\n        func_1AD4(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function func_0EEB(var arg0, var arg1, var arg2) {\n        func_1AD4(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1034(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function renounceOwnership() {\n        var var0 = 0x1084;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x05] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n        storage[0x05] = (storage[0x05] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01)) | 0x00;\n    }\n    \n    function func_11BB(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) {\n        arg4 = msg.data[arg6 * 0x20 + arg4:arg6 * 0x20 + arg4 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg5 = arg0;\n        arg6 = arg1;\n        var var0 = arg2;\n    \n        if (var0 >= arg6) { assert(); }\n    \n        arg5 = msg.data[var0 * 0x20 + arg5:var0 * 0x20 + arg5 + 0x20];\n        func_1C33(arg3, arg4, arg5);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function owner() returns (var r0) { return storage[0x05] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function isOwner() returns (var r0) { return msg.sender == storage[0x05] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x60;\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x04;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_131F:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_1316; }\n        \n        label_1302:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_1302; }\n        \n        label_1316:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_131F;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp11 + 0x20;\n            goto label_131F;\n        }\n    }\n    \n    function getPrice() returns (var r0) { return storage[0x0c]; }\n    \n    function func_13C9(var arg0, var arg1, var arg2) {\n        func_1AD4(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getCurrentEpoch() returns (var r0) { return storage[0x09]; }\n    \n    function deposit() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x16bb;\n        var1 = isOwner();\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x16e6;\n        var var2 = storage[0x0b];\n        var var3 = msg.value;\n        var1 = func_1E1D(var2, var3);\n        storage[0x0b] = var1;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n        return 0x01;\n    }\n    \n    function func_1868(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x188f;\n        var var1 = 0x1880;\n        var var2 = arg1;\n        var var3 = storage[0x0c];\n        var1 = func_20FE(var2, var3);\n        var0 = func_1880(arg0, var1);\n        var temp0 = arg2;\n        arg2 = var0;\n        var0 = temp0;\n        var1 = 0x00;\n    \n        if (var0 <= var1) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x00;\n        var3 = var0;\n        var var4 = arg2;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_1880(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = arg0;\n        var var0 = temp0;\n        r0 = func_1E1D(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1AD4(var arg0, var arg1, var arg2) {\n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg2;\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg1;\n        memory[0x00:0x20] = temp3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp2;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1C33(var arg0, var arg1, var arg2) {\n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x1cbe;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg2;\n        var0 = func_1DFD(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x1d51;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg2;\n        var0 = func_1E1D(var1, var2);\n        var temp0 = arg1;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg2;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1DFD(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1E1D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1E3C(var arg0, var arg1) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x1e8b;\n        var var1 = storage[0x02];\n        var var2 = arg1;\n        var0 = func_1E1D(var1, var2);\n        storage[0x02] = var0;\n        var0 = 0x1ee2;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg1;\n        var0 = func_1E1D(var1, var2);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0xffffffffffffffffffffffffffffffffffffffff & 0x00, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1F8E(var arg0, var arg1) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x1fdd;\n        var var1 = storage[0x02];\n        var var2 = arg1;\n        var0 = func_1DFD(var1, var2);\n        storage[0x02] = var0;\n        var0 = 0x2034;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg1;\n        var0 = func_1DFD(var1, var2);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n    }\n    \n    function func_20E0(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20f7;\n        var var2 = arg0;\n        var var3 = storage[0x0c];\n        return func_20FE(var2, var3);\n    }\n    \n    function func_20FE(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 != var0) {\n            var var1 = arg0 * arg1;\n            var var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { revert(memory[0x00:0x00]); }\n        \n            var0 = var1;\n        \n        label_2132:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_2132;\n        }\n    }\n    \n    function func_215E(var arg0) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x05] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x05] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100 ** 0x01 | (storage[0x05] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01));\n    }\n    \n    function func_2258(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_22C7:\n                var temp4 = arg1;\n                arg1 = 0x22d4;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_22D8(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_22C6:\n                    goto label_22C7;\n                } else {\n                label_22B4:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = msg.data[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_22C6; }\n                    else { goto label_22B4; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (msg.data[var1:var1 + 0x20] & ~0xff);\n            goto label_22C7;\n        }\n    }\n    \n    function func_22D8(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x22fa;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_22F6(arg1, var0); }\n    \n    label_22E7:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_22E7; }\n    \n        arg0 = func_22F6(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_22F6(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x8da5cb5b > var0) {\n            if (0x39509351 > var0) {\n                if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b6;\n                    var1 = name();\n                    var temp0 = memory[0x40:0x60];\n                    var var2 = temp0;\n                    var var3 = var2;\n                    var temp1 = var3 + 0x20;\n                    memory[var3:var3 + 0x20] = temp1 - var3;\n                    var temp2 = var1;\n                    memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                    var var4 = temp1 + 0x20;\n                    var var5 = temp2 + 0x20;\n                    var var6 = memory[temp2:temp2 + 0x20];\n                    var var7 = var6;\n                    var var8 = var4;\n                    var var9 = var5;\n                    var var10 = 0x00;\n                \n                    if (var10 >= var7) {\n                    label_01F6:\n                        var temp3 = var6;\n                        var4 = temp3 + var4;\n                        var5 = temp3 & 0x1f;\n                    \n                        if (!var5) {\n                            var temp4 = memory[0x40:0x60];\n                            return memory[temp4:temp4 + var4 - temp4];\n                        } else {\n                            var temp5 = var5;\n                            var temp6 = var4 - temp5;\n                            memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                            var temp7 = memory[0x40:0x60];\n                            return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                        }\n                    } else {\n                    label_01E4:\n                        var temp8 = var10;\n                        memory[var8 + temp8:var8 + temp8 + 0x20] = memory[var9 + temp8:var9 + temp8 + 0x20];\n                        var10 = temp8 + 0x20;\n                    \n                        if (var10 >= var7) { goto label_01F6; }\n                        else { goto label_01E4; }\n                    }\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x028a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = approve(var2, var3);\n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = !!var1;\n                    var temp10 = memory[0x40:0x60];\n                    return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n                } else if (var0 == 0x12065fe0) {\n                    // Dispatch table entry for getBalance()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02b9;\n                    var1 = getBalance();\n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = var1;\n                    var temp12 = memory[0x40:0x60];\n                    return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02e4;\n                    var1 = totalSupply();\n                    var temp13 = memory[0x40:0x60];\n                    memory[temp13:temp13 + 0x20] = var1;\n                    var temp14 = memory[0x40:0x60];\n                    return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n                } else if (var0 == 0x23b872dd) {\n                    // Dispatch table entry for transferFrom(address,address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0373;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    var1 = transferFrom(var2, var3);\n                    var temp15 = memory[0x40:0x60];\n                    memory[temp15:temp15 + 0x20] = !!var1;\n                    var temp16 = memory[0x40:0x60];\n                    return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n                } else if (var0 == 0x313ce567) {\n                    // Dispatch table entry for decimals()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03a2;\n                    var1 = decimals();\n                    var temp17 = memory[0x40:0x60];\n                    memory[temp17:temp17 + 0x20] = var1 & 0xff;\n                    var temp18 = memory[0x40:0x60];\n                    return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0x6c11bcd3 > var0) {\n                if (var0 == 0x39509351) {\n                    // Dispatch table entry for increaseAllowance(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0417;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = increaseAllowance(var2, var3);\n                    var temp19 = memory[0x40:0x60];\n                    memory[temp19:temp19 + 0x20] = !!var1;\n                    var temp20 = memory[0x40:0x60];\n                    return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n                } else if (var0 == 0x40c10f19) {\n                    // Dispatch table entry for mint(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x048a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = mint(var2, var3);\n                    var temp21 = memory[0x40:0x60];\n                    memory[temp21:temp21 + 0x20] = !!var1;\n                    var temp22 = memory[0x40:0x60];\n                    return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n                } else if (var0 == 0x42966c68) {\n                    // Dispatch table entry for burn(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x04dd;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = burn(var2, var3);\n                    var temp23 = memory[0x40:0x60];\n                    memory[temp23:temp23 + 0x20] = !!var1;\n                    var temp24 = memory[0x40:0x60];\n                    return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x6c11bcd3) {\n                // Dispatch table entry for sellTokens(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0530;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                sellTokens(var2, var3);\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0581;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = balanceOf(var2, var3);\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var1;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x715018a6) {\n                // Dispatch table entry for renounceOwnership()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ac;\n                renounceOwnership();\n                stop();\n            } else if (var0 == 0x7383b5ed) {\n                // Dispatch table entry for 0x7383b5ed (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0691;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                func_05D1(var2, var3);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xbc0bc6ba > var0) {\n            if (0x98d5fdca > var0) {\n                if (var0 == 0x8da5cb5b) {\n                    // Dispatch table entry for owner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x06a8;\n                    var1 = owner();\n                    var temp27 = memory[0x40:0x60];\n                    memory[temp27:temp27 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp28 = memory[0x40:0x60];\n                    return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n                } else if (var0 == 0x8f32d59b) {\n                    // Dispatch table entry for isOwner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x06ff;\n                    var1 = isOwner();\n                    var temp29 = memory[0x40:0x60];\n                    memory[temp29:temp29 + 0x20] = !!var1;\n                    var temp30 = memory[0x40:0x60];\n                    return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n                } else if (var0 == 0x95d89b41) {\n                    // Dispatch table entry for symbol()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x072e;\n                    var1 = symbol();\n                    var temp31 = memory[0x40:0x60];\n                    var2 = temp31;\n                    var3 = var2;\n                    var temp32 = var3 + 0x20;\n                    memory[var3:var3 + 0x20] = temp32 - var3;\n                    var temp33 = var1;\n                    memory[temp32:temp32 + 0x20] = memory[temp33:temp33 + 0x20];\n                    var4 = temp32 + 0x20;\n                    var5 = temp33 + 0x20;\n                    var6 = memory[temp33:temp33 + 0x20];\n                    var7 = var6;\n                    var8 = var4;\n                    var9 = var5;\n                    var10 = 0x00;\n                \n                    if (var10 >= var7) {\n                    label_076E:\n                        var temp34 = var6;\n                        var4 = temp34 + var4;\n                        var5 = temp34 & 0x1f;\n                    \n                        if (!var5) {\n                            var temp35 = memory[0x40:0x60];\n                            return memory[temp35:temp35 + var4 - temp35];\n                        } else {\n                            var temp36 = var5;\n                            var temp37 = var4 - temp36;\n                            memory[temp37:temp37 + 0x20] = ~(0x0100 ** (0x20 - temp36) - 0x01) & memory[temp37:temp37 + 0x20];\n                            var temp38 = memory[0x40:0x60];\n                            return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n                        }\n                    } else {\n                    label_075C:\n                        var temp39 = var10;\n                        memory[var8 + temp39:var8 + temp39 + 0x20] = memory[var9 + temp39:var9 + temp39 + 0x20];\n                        var10 = temp39 + 0x20;\n                    \n                        if (var10 >= var7) { goto label_076E; }\n                        else { goto label_075C; }\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x98d5fdca) {\n                // Dispatch table entry for getPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07be;\n                var1 = getPrice();\n                var temp40 = memory[0x40:0x60];\n                memory[temp40:temp40 + 0x20] = var1;\n                var temp41 = memory[0x40:0x60];\n                return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n            } else if (var0 == 0xa457c2d7) {\n                // Dispatch table entry for decreaseAllowance(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x082d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = decreaseAllowance(var2, var3);\n                var temp42 = memory[0x40:0x60];\n                memory[temp42:temp42 + 0x20] = !!var1;\n                var temp43 = memory[0x40:0x60];\n                return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08a0;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = transfer(var2, var3);\n                var temp44 = memory[0x40:0x60];\n                memory[temp44:temp44 + 0x20] = !!var1;\n                var temp45 = memory[0x40:0x60];\n                return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n            } else if (var0 == 0xb97dd9e2) {\n                // Dispatch table entry for getCurrentEpoch()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08cf;\n                var1 = getCurrentEpoch();\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var1;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xd8aabe7e > var0) {\n            if (var0 == 0xbc0bc6ba) {\n                // Dispatch table entry for getEpoch(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x091e;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1, var2, var3, var4, var5, var6 = getEpoch(var2, var3);\n                var temp48 = memory[0x40:0x60];\n                var7 = temp48;\n                var8 = var7;\n                var temp49 = var8 + 0x20;\n                memory[temp49:temp49 + 0x20] = var2;\n                var9 = temp49 + 0x20;\n                var temp50 = var9 + 0x20;\n                memory[temp50:temp50 + 0x20] = var4;\n                var temp51 = temp50 + 0x20;\n                memory[temp51:temp51 + 0x20] = var5;\n                var temp52 = temp51 + 0x20;\n                memory[temp52:temp52 + 0x20] = var6;\n                var temp53 = temp52 + 0x20;\n                memory[var8:var8 + 0x20] = temp53 - var8;\n                var temp54 = var1;\n                memory[temp53:temp53 + 0x20] = memory[temp54:temp54 + 0x20];\n                var10 = temp53 + 0x20;\n                var var12 = memory[temp54:temp54 + 0x20];\n                var var11 = temp54 + 0x20;\n                var var13 = var12;\n                var var14 = var10;\n                var var15 = var11;\n                var var16 = 0x00;\n            \n                if (var16 >= var13) {\n                label_097A:\n                    var temp55 = var12;\n                    var10 = temp55 + var10;\n                    var11 = temp55 & 0x1f;\n                \n                    if (!var11) {\n                        var temp56 = var10;\n                        memory[var9:var9 + 0x20] = temp56 - var7;\n                        var temp57 = var3;\n                        memory[temp56:temp56 + 0x20] = memory[temp57:temp57 + 0x20];\n                        var10 = temp56 + 0x20;\n                        var12 = memory[temp57:temp57 + 0x20];\n                        var11 = temp57 + 0x20;\n                        var13 = var12;\n                        var14 = var10;\n                        var15 = var11;\n                        var16 = 0x00;\n                    \n                        if (var16 >= var13) {\n                        label_09E0:\n                            var temp58 = var12;\n                            var10 = temp58 + var10;\n                            var11 = temp58 & 0x1f;\n                        \n                            if (!var11) {\n                                var temp59 = memory[0x40:0x60];\n                                return memory[temp59:temp59 + var10 - temp59];\n                            } else {\n                                var temp60 = var11;\n                                var temp61 = var10 - temp60;\n                                memory[temp61:temp61 + 0x20] = ~(0x0100 ** (0x20 - temp60) - 0x01) & memory[temp61:temp61 + 0x20];\n                                var temp62 = memory[0x40:0x60];\n                                return memory[temp62:temp62 + (temp61 + 0x20) - temp62];\n                            }\n                        } else {\n                        label_09CE:\n                            var temp63 = var16;\n                            memory[var14 + temp63:var14 + temp63 + 0x20] = memory[var15 + temp63:var15 + temp63 + 0x20];\n                            var16 = temp63 + 0x20;\n                        \n                            if (var16 >= var13) { goto label_09E0; }\n                            else { goto label_09CE; }\n                        }\n                    } else {\n                        var temp64 = var11;\n                        var temp65 = var10 - temp64;\n                        memory[temp65:temp65 + 0x20] = ~(0x0100 ** (0x20 - temp64) - 0x01) & memory[temp65:temp65 + 0x20];\n                        var temp66 = temp65 + 0x20;\n                        memory[var9:var9 + 0x20] = temp66 - var7;\n                        var temp67 = var3;\n                        memory[temp66:temp66 + 0x20] = memory[temp67:temp67 + 0x20];\n                        var10 = temp66 + 0x20;\n                        var11 = temp67 + 0x20;\n                        var12 = memory[temp67:temp67 + 0x20];\n                        var13 = var12;\n                        var14 = var10;\n                        var15 = var11;\n                        var16 = 0x00;\n                    \n                        if (var16 >= var13) { goto label_09E0; }\n                        else { goto label_09CE; }\n                    }\n                } else {\n                label_0968:\n                    var temp68 = var16;\n                    memory[var14 + temp68:var14 + temp68 + 0x20] = memory[var15 + temp68:var15 + temp68 + 0x20];\n                    var16 = temp68 + 0x20;\n                \n                    if (var16 >= var13) { goto label_097A; }\n                    else { goto label_0968; }\n                }\n            } else if (var0 == 0xce607688) {\n                // Dispatch table entry for 0xce607688 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0aaf;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                func_0A44(var2, var3);\n                stop();\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x0ab9;\n                var1 = deposit();\n                var temp69 = memory[0x40:0x60];\n                memory[temp69:temp69 + 0x20] = !!var1;\n                var temp70 = memory[0x40:0x60];\n                return memory[temp70:temp70 + (temp69 + 0x20) - temp70];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xd8aabe7e) {\n            // Dispatch table entry for 0xd8aabe7e (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b75;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n        \n            func_0AF6(var2, var3);\n            stop();\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0be6;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = allowance(var2, var3);\n            var temp71 = memory[0x40:0x60];\n            memory[temp71:temp71 + 0x20] = var1;\n            var temp72 = memory[0x40:0x60];\n            return memory[temp72:temp72 + (temp71 + 0x20) - temp72];\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c4b;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            transferOwnership(var2, var3);\n            stop();\n        } else if (var0 == 0xf3fef3a3) {\n            // Dispatch table entry for withdraw(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0ca6;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = withdraw(var2, var3);\n            var temp73 = memory[0x40:0x60];\n            memory[temp73:temp73 + 0x20] = !!var1;\n            var temp74 = memory[0x40:0x60];\n            return memory[temp74:temp74 + (temp73 + 0x20) - temp74];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x0d6f;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_1AD4(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transferFrom(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp1:temp1 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var1 = 0x00;\n        var var2 = 0x0d9a;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = var0;\n        func_1C33(var3, var4, var5);\n        var2 = 0x0e33;\n        var3 = arg0;\n        var4 = msg.sender;\n        var5 = 0x0e2e;\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var var6 = storage[keccak256(memory[0x00:0x40])];\n        var var7 = var0;\n        var5 = func_1DFD(var6, var7);\n        func_0E2E(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function increaseAllowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x0ef0;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = 0x0eeb;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        var var5 = storage[keccak256(memory[0x00:0x40])];\n        var var6 = arg1;\n        var4 = func_1E1D(var5, var6);\n        func_0EEB(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function mint(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x0f04;\n        var1 = isOwner();\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0f17;\n        var var2 = arg0;\n        var var3 = arg1;\n        func_1E3C(var2, var3);\n        return 0x01;\n    }\n    \n    function burn(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x00;\n        var var0 = 0x0f2b;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x0f3e;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        func_1F8E(var1, var2);\n        return 0x01;\n    }\n    \n    function sellTokens(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x00;\n        var var0 = 0x0f52;\n        var var1 = arg0;\n        var0 = func_20E0(var1);\n        arg1 = var0;\n        var0 = 0x0f5e;\n        var1 = msg.sender;\n        var var2 = arg0;\n        func_1F8E(var1, var2);\n        var0 = 0x0f73;\n        var1 = storage[0x0b];\n        var2 = arg1;\n        var0 = func_1DFD(var1, var2);\n        storage[0x0b] = var0;\n        var temp0 = arg1;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        var0 = !temp2;\n    \n        if (!var0) {\n            var0 = msg.sender;\n            var1 = 0x483f8aec0fd892ac72ad1ba8d0e9c9e73db59c12d263fd71de480b5b3deeae3c;\n            var2 = arg0;\n            var var3 = arg1;\n            var var4 = storage[0x0c];\n            var var5 = 0x1006;\n            var var6 = msg.sender;\n            var5 = func_1034(var6);\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = var2;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = var3;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = var4;\n            var temp6 = temp5 + 0x20;\n            memory[temp6:temp6 + 0x20] = var5;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [stack[-5], stack[-6]]);\n            return;\n        } else {\n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r0 = func_1034(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_05D1(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 * 0x20 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2;\n        var temp6 = var0;\n        var temp7 = arg1;\n        var0 = arg0;\n        arg1 = var1;\n        arg0 = temp6;\n        var1 = temp7;\n        var var3 = msg.data[temp5:temp5 + 0x20];\n        var2 = temp5 + 0x20;\n    \n        if (var3 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = var1 + var3;\n        var3 = temp8;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = var3;\n        var temp10 = msg.data[temp9:temp9 + 0x20];\n        var3 = temp10;\n        var var4 = var2;\n        var2 = temp9 + 0x20;\n    \n        if ((var3 > 0x0100000000) | (var2 + var3 * 0x20 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var1 = var3;\n        var0 = var2;\n        var2 = msg.data[var4:var4 + 0x20];\n        var3 = 0x1156;\n        var3 = isOwner();\n    \n        if (!var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = var2;\n        var4 = 0x1169;\n        var var5 = msg.sender;\n        var4 = func_1034(var5);\n    \n        if (var4 < var3) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 != var1) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 > 0xff & 0xc8) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x00;\n    \n        if (var3 >= arg1) {\n        label_11FD:\n            return;\n        } else {\n        label_11AC:\n            var4 = 0x11f0;\n            var5 = msg.sender;\n            var var6 = arg0;\n            var var7 = arg1;\n            var var8 = var3;\n        \n            if (var8 >= var7) { assert(); }\n        \n            func_11BB(var0, var1, var3, var5, var6, var7, var8);\n            var3 = var3 + 0x01;\n        \n            if (var3 >= arg1) { goto label_11FD; }\n            else { goto label_11AC; }\n        }\n    }\n    \n    function decreaseAllowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x13ce;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = 0x13c9;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        var var5 = storage[keccak256(memory[0x00:0x40])];\n        var var6 = arg1;\n        var4 = func_1DFD(var5, var6);\n        func_13C9(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x13e5;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_1C33(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function getEpoch(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3, var r4, var r5) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x60;\n        r3 = 0x00;\n        r4 = 0x60;\n        r5 = 0x00;\n        var var3 = r5;\n        var var4 = 0x00;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var var5 = temp1;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var var6 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var var7 = keccak256(memory[0x00:0x40]) + 0x02;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var var8 = storage[keccak256(memory[0x00:0x40]) + 0x03];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var var9 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var var10 = storage[keccak256(memory[0x00:0x40]) + 0x05];\n        var temp2 = storage[var5];\n        var temp3 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var11 = temp4;\n        var var12 = var5;\n        var var13 = temp3;\n        memory[var11:var11 + 0x20] = var13;\n        var var14 = var11 + 0x20;\n        var var15 = var12;\n        var temp5 = storage[var15];\n        var var16 = (!(temp5 & 0x01) * 0x0100 - 0x01 & temp5) / 0x02;\n    \n        if (!var16) {\n        label_1521:\n            var5 = var11;\n            var temp6 = var7;\n            var temp7 = storage[temp6];\n            var temp8 = (!(temp7 & 0x01) * 0x0100 - 0x01 & temp7) / 0x02;\n            var temp9 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp9 + (temp8 + 0x1f) / 0x20 * 0x20 + 0x20;\n            var11 = temp9;\n            var12 = temp6;\n            var13 = temp8;\n            memory[var11:var11 + 0x20] = var13;\n            var14 = var11 + 0x20;\n            var15 = var12;\n            var temp10 = storage[var15];\n            var16 = (!(temp10 & 0x01) * 0x0100 - 0x01 & temp10) / 0x02;\n        \n            if (!var16) {\n            label_15BD:\n                r5 = var10;\n                r3 = var8;\n                arg0 = var6;\n                r4 = var9;\n                arg1 = var11;\n                r0 = var5;\n                return r0, arg0, arg1, r3, r4, r5;\n            } else if (0x1f < var16) {\n                var temp11 = var14;\n                var temp12 = temp11 + var16;\n                var14 = temp12;\n                memory[0x00:0x20] = var15;\n                var temp13 = keccak256(memory[0x00:0x20]);\n                memory[temp11:temp11 + 0x20] = storage[temp13];\n                var15 = temp13 + 0x01;\n                var16 = temp11 + 0x20;\n            \n                if (var14 <= var16) { goto label_15B4; }\n            \n            label_15A0:\n                var temp14 = var15;\n                var temp15 = var16;\n                memory[temp15:temp15 + 0x20] = storage[temp14];\n                var15 = temp14 + 0x01;\n                var16 = temp15 + 0x20;\n            \n                if (var14 > var16) { goto label_15A0; }\n            \n            label_15B4:\n                var temp16 = var14;\n                var temp17 = temp16 + (var16 - temp16 & 0x1f);\n                var16 = temp16;\n                var14 = temp17;\n                goto label_15BD;\n            } else {\n                var temp18 = var14;\n                memory[temp18:temp18 + 0x20] = storage[var15] / 0x0100 * 0x0100;\n                var16 = var16;\n                var14 = temp18 + 0x20;\n                goto label_15BD;\n            }\n        } else if (0x1f < var16) {\n            var temp19 = var14;\n            var temp20 = temp19 + var16;\n            var14 = temp20;\n            memory[0x00:0x20] = var15;\n            var temp21 = keccak256(memory[0x00:0x20]);\n            memory[temp19:temp19 + 0x20] = storage[temp21];\n            var15 = temp21 + 0x01;\n            var16 = temp19 + 0x20;\n        \n            if (var14 <= var16) { goto label_1518; }\n        \n        label_1504:\n            var temp22 = var15;\n            var temp23 = var16;\n            memory[temp23:temp23 + 0x20] = storage[temp22];\n            var15 = temp22 + 0x01;\n            var16 = temp23 + 0x20;\n        \n            if (var14 > var16) { goto label_1504; }\n        \n        label_1518:\n            var temp24 = var14;\n            var temp25 = temp24 + (var16 - temp24 & 0x1f);\n            var16 = temp24;\n            var14 = temp25;\n            goto label_1521;\n        } else {\n            var temp26 = var14;\n            memory[temp26:temp26 + 0x20] = storage[var15] / 0x0100 * 0x0100;\n            var16 = var16;\n            var14 = temp26 + 0x20;\n            goto label_1521;\n        }\n    }\n    \n    function func_0A44(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = temp0 + arg1;\n        var var0 = temp0;\n        var var2 = msg.data[temp1:temp1 + 0x20];\n        var var1 = temp1 + 0x20;\n    \n        if (var2 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var0 + var2;\n        var2 = temp2;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var2;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var2 = temp4;\n        var var3 = var1;\n        var1 = temp3 + 0x20;\n    \n        if ((var2 > 0x0100000000) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var0 = var2;\n        arg1 = var1;\n        var1 = 0x15e1;\n        var1 = isOwner();\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x09] < arg0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x05] >= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var1 = 0x1640;\n        var2 = keccak256(memory[0x00:0x40]) + 0x02;\n        var var4 = var0;\n        var3 = arg1;\n        var1 = func_2258(var2, var3, var4);\n        var temp5 = var0;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = arg0;\n        var temp7 = temp6 + 0x20;\n        var temp8 = temp7 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp8 - temp6;\n        memory[temp8:temp8 + 0x20] = temp5;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp5] = msg.data[arg1:arg1 + temp5];\n        memory[temp9 + temp5:temp9 + temp5 + 0x20] = 0x00;\n        var temp10 = memory[0x40:0x60];\n        log(memory[temp10:temp10 + (temp9 + (temp5 + 0x1f & ~0x1f)) - temp10], [0x2980b8f6b424f577d41ae3c85b31a5b85136504bf2bb7205905d557f5e884ae9]);\n    }\n    \n    function func_0AF6(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2;\n        arg1 = var1;\n        arg0 = var0;\n        var temp6 = temp5 + 0x20;\n        var0 = msg.data[temp5:temp5 + 0x20];\n        var1 = msg.data[temp6:temp6 + 0x20];\n        var2 = msg.data[temp6 + 0x20:temp6 + 0x20 + 0x20];\n        var var3 = 0x1749;\n        var3 = isOwner();\n    \n        if (!var3) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x01] >= var0) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x00;\n        var var4 = 0x1780;\n        var4 = totalSupply();\n        var3 = var4;\n        var4 = storage[0x0c];\n        storage[0x09] = storage[0x09] + 0x01;\n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n        var var5 = 0x17c2;\n        var var6 = keccak256(memory[0x00:0x40]);\n        var var7 = arg0;\n        var var8 = arg1;\n        var5 = func_2258(var6, var7, var8);\n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n        storage[keccak256(memory[0x00:0x40]) + 0x01] = var0;\n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n        storage[keccak256(memory[0x00:0x40]) + 0x03] = var1;\n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n        storage[keccak256(memory[0x00:0x40]) + 0x04] = var2;\n        var5 = 0x1836;\n        var6 = var0;\n        var7 = 0xffffffff & 0x278d00;\n        var5 = func_1E1D(var6, var7);\n        memory[0x00:0x20] = storage[0x09];\n        memory[0x20:0x40] = 0x0a;\n        storage[keccak256(memory[0x00:0x40]) + 0x05] = var5;\n        var5 = 0x189d;\n        var6 = 0x1868;\n        var7 = var3;\n        var8 = var2;\n        var6 = func_1E1D(var7, var8);\n        var5 = func_1868(var1, var3, var6);\n        storage[0x0c] = var5;\n    \n        if (storage[0x0c] == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp7 = memory[0x40:0x60];\n        memory[temp7:temp7 + 0x20] = storage[0x09];\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + 0x20] = var1;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + 0x20] = var2;\n        var temp10 = temp9 + 0x20;\n        memory[temp10:temp10 + 0x20] = storage[0x0c];\n        var temp11 = temp10 + 0x20;\n        memory[temp11:temp11 + 0x20] = var3;\n        var temp12 = temp11 + 0x20;\n        memory[temp12:temp12 + 0x20] = var4;\n        var temp13 = temp12 + 0x20;\n        memory[temp13:temp13 + 0x20] = storage[0x0b];\n        var temp14 = memory[0x40:0x60];\n        log(memory[temp14:temp14 + (temp13 + 0x20) - temp14], [0x451a33bce8b211ee8e3a53c196f1d829645dfbeeabdc58816723431a6411be5c]);\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferOwnership(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x19b8;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x19ca;\n        var var0 = arg0;\n        func_215E(var0);\n    }\n    \n    function withdraw(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x19d7;\n        var1 = isOwner();\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x1a2f;\n        var var2 = storage[0x0b];\n        var var3 = arg1;\n        var1 = func_1DFD(var2, var3);\n        storage[0x0b] = var1;\n        var temp1 = arg1;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n        var1 = !temp3;\n    \n        if (!var1) {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = arg1;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            var temp6 = returndata.length;\n            memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function name() returns (var r0) {\n        var var0 = 0x60;\n        var temp0 = storage[0x03];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x03;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_0D58:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_0D4F; }\n        \n        label_0D3B:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_0D3B; }\n        \n        label_0D4F:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_0D58;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp11 + 0x20;\n            goto label_0D58;\n        }\n    }\n    \n    function getBalance() returns (var r0) { return storage[0x0b]; }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function func_0E2E(var arg0, var arg1, var arg2) {\n        func_1AD4(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function func_0EEB(var arg0, var arg1, var arg2) {\n        func_1AD4(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1034(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function renounceOwnership() {\n        var var0 = 0x1084;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x05] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n        storage[0x05] = (storage[0x05] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01)) | 0x00;\n    }\n    \n    function func_11BB(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) {\n        arg4 = msg.data[arg6 * 0x20 + arg4:arg6 * 0x20 + arg4 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg5 = arg0;\n        arg6 = arg1;\n        var var0 = arg2;\n    \n        if (var0 >= arg6) { assert(); }\n    \n        arg5 = msg.data[var0 * 0x20 + arg5:var0 * 0x20 + arg5 + 0x20];\n        func_1C33(arg3, arg4, arg5);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function owner() returns (var r0) { return storage[0x05] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function isOwner() returns (var r0) { return msg.sender == storage[0x05] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x60;\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x04;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_131F:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_1316; }\n        \n        label_1302:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_1302; }\n        \n        label_1316:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_131F;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp11 + 0x20;\n            goto label_131F;\n        }\n    }\n    \n    function getPrice() returns (var r0) { return storage[0x0c]; }\n    \n    function func_13C9(var arg0, var arg1, var arg2) {\n        func_1AD4(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getCurrentEpoch() returns (var r0) { return storage[0x09]; }\n    \n    function deposit() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x16bb;\n        var1 = isOwner();\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x16e6;\n        var var2 = storage[0x0b];\n        var var3 = msg.value;\n        var1 = func_1E1D(var2, var3);\n        storage[0x0b] = var1;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n        return 0x01;\n    }\n    \n    function func_1868(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x188f;\n        var var1 = 0x1880;\n        var var2 = arg1;\n        var var3 = storage[0x0c];\n        var1 = func_20FE(var2, var3);\n        var0 = func_1880(arg0, var1);\n        var temp0 = arg2;\n        arg2 = var0;\n        var0 = temp0;\n        var1 = 0x00;\n    \n        if (var0 <= var1) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x00;\n        var3 = var0;\n        var var4 = arg2;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_1880(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = arg0;\n        var var0 = temp0;\n        r0 = func_1E1D(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1AD4(var arg0, var arg1, var arg2) {\n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg2;\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg1;\n        memory[0x00:0x20] = temp3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp2;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1C33(var arg0, var arg1, var arg2) {\n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x1cbe;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg2;\n        var0 = func_1DFD(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x1d51;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg2;\n        var0 = func_1E1D(var1, var2);\n        var temp0 = arg1;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg2;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1DFD(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1E1D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1E3C(var arg0, var arg1) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x1e8b;\n        var var1 = storage[0x02];\n        var var2 = arg1;\n        var0 = func_1E1D(var1, var2);\n        storage[0x02] = var0;\n        var0 = 0x1ee2;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg1;\n        var0 = func_1E1D(var1, var2);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0xffffffffffffffffffffffffffffffffffffffff & 0x00, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1F8E(var arg0, var arg1) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x1fdd;\n        var var1 = storage[0x02];\n        var var2 = arg1;\n        var0 = func_1DFD(var1, var2);\n        storage[0x02] = var0;\n        var0 = 0x2034;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg1;\n        var0 = func_1DFD(var1, var2);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n    }\n    \n    function func_20E0(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20f7;\n        var var2 = arg0;\n        var var3 = storage[0x0c];\n        return func_20FE(var2, var3);\n    }\n    \n    function func_20FE(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 != var0) {\n            var var1 = arg0 * arg1;\n            var var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { revert(memory[0x00:0x00]); }\n        \n            var0 = var1;\n        \n        label_2132:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_2132;\n        }\n    }\n    \n    function func_215E(var arg0) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x05] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x05] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100 ** 0x01 | (storage[0x05] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01));\n    }\n    \n    function func_2258(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_22C7:\n                var temp4 = arg1;\n                arg1 = 0x22d4;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_22D8(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_22C6:\n                    goto label_22C7;\n                } else {\n                label_22B4:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = msg.data[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_22C6; }\n                    else { goto label_22B4; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (msg.data[var1:var1 + 0x20] & ~0xff);\n            goto label_22C7;\n        }\n    }\n    \n    function func_22D8(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x22fa;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_22F6(arg1, var0); }\n    \n    label_22E7:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_22E7; }\n    \n        arg0 = func_22F6(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_22F6(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 32.91898012161255,
	"usage": {
		"completion_tokens": 459,
		"prompt_tokens": 19805,
		"total_tokens": 20264
	}
}