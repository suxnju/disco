{
	"address": "0x827b358e0b2a1d795ca0be2b90e1b2da6fe12536",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the equivalent solidity code:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Crowdfunding {\n    uint256 public _fundingGoal;\n    uint256 public _amountRaised;\n    uint256 public _deadline;\n    uint256 public _priceT1;\n    uint256 public _priceT2;\n    uint256 public _priceT3;\n    uint256 public _priceT4;\n    uint256 public _startDate;\n    mapping(address => uint256) public _balanceOf;\n    address payable public _beneficiary;\n    uint8 public _safeWithdrawal;\n    uint8 public _fallback;\n    IERC20 public _tokenReward;\n\n    event FundTransfer(address _backer, uint _amount, bool _isContribution);\n    event GoalReached(address _beneficiary, uint _amountRaised);\n\n    function checkGoalReached() public { \n        if (block.timestamp >= _deadline) {\n            if (_amountRaised >= _fundingGoal) {\n                _safeWithdrawal = 1;\n                emit GoalReached(_beneficiary, _amountRaised);\n            }\n            _fallback = 1;\n        }\n    }\n\n    function safeWithdrawal() public { \n        if (block.timestamp >= _deadline) {\n            if (_safeWithdrawal == 0) {\n                uint256 amount = _balanceOf[msg.sender];\n                _balanceOf[msg.sender] = 0;\n                if (amount > 0) {\n                    if (!msg.sender.send(amount)) {\n                        _balanceOf[msg.sender] = amount;\n                    } else {\n                        emit FundTransfer(msg.sender, amount, false);\n                    }\n                }\n            }\n            if (_safeWithdrawal == 1 && _beneficiary == msg.sender) {\n                if (_beneficiary.send(_amountRaised)) {\n                    emit FundTransfer(_beneficiary, _amountRaised, false);\n                } else {\n                    _safeWithdrawal = 0;\n                }\n            }\n        }\n    }\n\n    function fallback() public payable { \n        require(!_fallback);\n        _balanceOf[msg.sender] += msg.value;\n        _amountRaised += msg.value;\n        uint256 price = _priceT1;\n        if (_startDate + 86400 > block.timestamp) {\n            if (_startDate + 86400 * 2 > block.timestamp) {\n                if (_startDate + 86400 * 3 <= block.timestamp) {\n                    price = _priceT2;\n                }\n            } else {\n                price = _priceT3;\n            }\n        } else {\n            price = _priceT4;\n        }\n        require(price > 0);\n        require(_tokenReward.transfer(msg.sender, msg.value / price));\n        emit FundTransfer(msg.sender, msg.value, true);\n    }\n}\n``` \n\nPlease note that IERC20 is an interface for ERC20 tokens, which should be defined somewhere else in your code. The contract assumes that `_tokenReward` is an instance of an ERC20 token. \n\nIn addition, the original `_fallback` function seems to be a mechanism for limiting contributions after a certain condition is met (e.g., after the deadline). The `_fallback` function has been renamed to `fallback` to avoid a naming conflict with the built-in fallback function in Solidity.",
				"role": "assistant"
			}
		}
	],
	"created": 1701469294,
	"id": "chatcmpl-8R6B4ztOSEfzadi2CL20tq2nkxX0N",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 23:32 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nuint256 _priceT1; // STORAGE[0x4]\nuint256 _priceT2; // STORAGE[0x5]\nuint256 _priceT3; // STORAGE[0x6]\nuint256 _priceT4; // STORAGE[0x7]\nuint256 _startDate; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xa]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 _safeWithdrawal; // STORAGE[0xb] bytes 0 to 0\nuint8 _fallback; // STORAGE[0xb] bytes 1 to 1\naddress _tokenReward; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            _safeWithdrawal = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _fallback = 1;\n    }\n}\n\nfunction startDate() public nonPayable { \n    return _startDate;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction priceT2() public nonPayable { \n    return _priceT2;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction priceT1() public nonPayable { \n    return _priceT1;\n}\n\nfunction priceT4() public nonPayable { \n    return _priceT4;\n}\n\nfunction priceT3() public nonPayable { \n    return _priceT3;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (!_safeWithdrawal) {\n            _balanceOf[msg.sender] = 0;\n            if (_balanceOf[msg.sender] > 0) {\n                v0 = msg.sender.call().value(_balanceOf[msg.sender]).gas(!_balanceOf[msg.sender] * 2300);\n                if (!v0) {\n                    _balanceOf[msg.sender] = _balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, _balanceOf[msg.sender], 0);\n                }\n            }\n        }\n        v1 = v2 = _safeWithdrawal;\n        if (v2) {\n            v1 = _beneficiary == msg.sender;\n        }\n        if (v1) {\n            v3 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (!v3) {\n                _safeWithdrawal = 0;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction fallback() public payable { \n    require(!_fallback);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    v0 = v1 = _priceT1;\n    if (_startDate + 0x93a80 > block.timestamp) {\n        if (_startDate + 0x127500 > block.timestamp) {\n            if (_startDate + 0x76a700 <= block.timestamp) {\n                v0 = v2 = _priceT2;\n            }\n        } else {\n            v0 = v3 = _priceT3;\n        }\n    } else {\n        v0 = v4 = _priceT4;\n    }\n    assert(v0);\n    require(_tokenReward.code.size);\n    v5 = _tokenReward.transfer(msg.sender, msg.value / v0 * 0xde0b6b3a7640000).gas(msg.gas);\n    require(v5); // checks call status, propagates error data on error\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0xb97bc86 == function_selector) {\n            startDate();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x45f988a4 == function_selector) {\n            priceT2();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa9ea1896 == function_selector) {\n            priceT1();\n        } else if (0xaba61514 == function_selector) {\n            priceT4();\n        } else if (0xfbd7c5f1 == function_selector) {\n            priceT3();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 23:32 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nuint256 _priceT1; // STORAGE[0x4]\nuint256 _priceT2; // STORAGE[0x5]\nuint256 _priceT3; // STORAGE[0x6]\nuint256 _priceT4; // STORAGE[0x7]\nuint256 _startDate; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xa]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 _safeWithdrawal; // STORAGE[0xb] bytes 0 to 0\nuint8 _fallback; // STORAGE[0xb] bytes 1 to 1\naddress _tokenReward; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            _safeWithdrawal = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _fallback = 1;\n    }\n}\n\nfunction startDate() public nonPayable { \n    return _startDate;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction priceT2() public nonPayable { \n    return _priceT2;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction priceT1() public nonPayable { \n    return _priceT1;\n}\n\nfunction priceT4() public nonPayable { \n    return _priceT4;\n}\n\nfunction priceT3() public nonPayable { \n    return _priceT3;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (!_safeWithdrawal) {\n            _balanceOf[msg.sender] = 0;\n            if (_balanceOf[msg.sender] > 0) {\n                v0 = msg.sender.call().value(_balanceOf[msg.sender]).gas(!_balanceOf[msg.sender] * 2300);\n                if (!v0) {\n                    _balanceOf[msg.sender] = _balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, _balanceOf[msg.sender], 0);\n                }\n            }\n        }\n        v1 = v2 = _safeWithdrawal;\n        if (v2) {\n            v1 = _beneficiary == msg.sender;\n        }\n        if (v1) {\n            v3 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (!v3) {\n                _safeWithdrawal = 0;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction fallback() public payable { \n    require(!_fallback);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    v0 = v1 = _priceT1;\n    if (_startDate + 0x93a80 > block.timestamp) {\n        if (_startDate + 0x127500 > block.timestamp) {\n            if (_startDate + 0x76a700 <= block.timestamp) {\n                v0 = v2 = _priceT2;\n            }\n        } else {\n            v0 = v3 = _priceT3;\n        }\n    } else {\n        v0 = v4 = _priceT4;\n    }\n    assert(v0);\n    require(_tokenReward.code.size);\n    v5 = _tokenReward.transfer(msg.sender, msg.value / v0 * 0xde0b6b3a7640000).gas(msg.gas);\n    require(v5); // checks call status, propagates error data on error\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0xb97bc86 == function_selector) {\n            startDate();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x45f988a4 == function_selector) {\n            priceT2();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa9ea1896 == function_selector) {\n            priceT1();\n        } else if (0xaba61514 == function_selector) {\n            priceT4();\n        } else if (0xfbd7c5f1 == function_selector) {\n            priceT3();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 23:32 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nuint256 _priceT1; // STORAGE[0x4]\nuint256 _priceT2; // STORAGE[0x5]\nuint256 _priceT3; // STORAGE[0x6]\nuint256 _priceT4; // STORAGE[0x7]\nuint256 _startDate; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xa]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 _safeWithdrawal; // STORAGE[0xb] bytes 0 to 0\nuint8 _fallback; // STORAGE[0xb] bytes 1 to 1\naddress _tokenReward; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            _safeWithdrawal = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _fallback = 1;\n    }\n}\n\nfunction startDate() public nonPayable { \n    return _startDate;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction priceT2() public nonPayable { \n    return _priceT2;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction priceT1() public nonPayable { \n    return _priceT1;\n}\n\nfunction priceT4() public nonPayable { \n    return _priceT4;\n}\n\nfunction priceT3() public nonPayable { \n    return _priceT3;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (!_safeWithdrawal) {\n            _balanceOf[msg.sender] = 0;\n            if (_balanceOf[msg.sender] > 0) {\n                v0 = msg.sender.call().value(_balanceOf[msg.sender]).gas(!_balanceOf[msg.sender] * 2300);\n                if (!v0) {\n                    _balanceOf[msg.sender] = _balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, _balanceOf[msg.sender], 0);\n                }\n            }\n        }\n        v1 = v2 = _safeWithdrawal;\n        if (v2) {\n            v1 = _beneficiary == msg.sender;\n        }\n        if (v1) {\n            v3 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (!v3) {\n                _safeWithdrawal = 0;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction fallback() public payable { \n    require(!_fallback);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    v0 = v1 = _priceT1;\n    if (_startDate + 0x93a80 > block.timestamp) {\n        if (_startDate + 0x127500 > block.timestamp) {\n            if (_startDate + 0x76a700 <= block.timestamp) {\n                v0 = v2 = _priceT2;\n            }\n        } else {\n            v0 = v3 = _priceT3;\n        }\n    } else {\n        v0 = v4 = _priceT4;\n    }\n    assert(v0);\n    require(_tokenReward.code.size);\n    v5 = _tokenReward.transfer(msg.sender, msg.value / v0 * 0xde0b6b3a7640000).gas(msg.gas);\n    require(v5); // checks call status, propagates error data on error\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0xb97bc86 == function_selector) {\n            startDate();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x45f988a4 == function_selector) {\n            priceT2();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa9ea1896 == function_selector) {\n            priceT1();\n        } else if (0xaba61514 == function_selector) {\n            priceT4();\n        } else if (0xfbd7c5f1 == function_selector) {\n            priceT3();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 47.55145049095154,
	"usage": {
		"completion_tokens": 668,
		"prompt_tokens": 1380,
		"total_tokens": 2048
	}
}