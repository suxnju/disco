{
	"address": "0x19c320b43744254ebdbcb1f1bd0e2a3dc08e01dc",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity contract that reflects the logic of your decompiled code. Note that, due to the complexity of the code, it's not possible to provide an exact match. However, the following contract should give you a starting point to further refine according to your requirements:\n\n```solidity\npragma solidity >=0.4.22 <0.7.0;\n\ncontract Contract {\n    mapping(uint256 => uint256) public storageMap;\n    mapping(uint256 => address) public ownerMap;\n    mapping(uint256 => bool) public forSaleMap;\n    mapping(uint256 => uint256) public priceMap;\n    mapping(uint256 => address) public buyerMap;\n    address public contractOwner;\n    uint256 public totalSupply;\n    uint256 public catIndex;\n    uint256 public releaseCeiling;\n    uint256 public symbol;\n    uint256 public decimals;\n    bool public allCatsAssigned;\n    bool public totalSupplyIsLocked;\n    uint256 public contractVersion;\n    uint256 public currentReleaseCeiling;\n    uint256 public catsRemainingToAssign;\n\n    function name() external view returns (string memory) {\n        return \"Contract\";\n    }\n\n    function buyCat(uint256 _catIndex) public payable {\n        require(forSaleMap[_catIndex], \"The cat is not for sale\");\n        require(msg.value >= priceMap[_catIndex], \"Not enough Ether sent\");\n        require(buyerMap[_catIndex] == address(0), \"The cat already has a buyer\");\n\n        address seller = ownerMap[_catIndex];\n\n        buyerMap[_catIndex] = msg.sender;\n        ownerMap[_catIndex] = msg.sender;\n        forSaleMap[_catIndex] = false;\n\n        seller.transfer(msg.value);\n    }\n\n    function offerCatForSale(uint256 _catIndex, uint256 _price) public {\n        require(ownerMap[_catIndex] == msg.sender, \"Only the owner can sell the cat\");\n        forSaleMap[_catIndex] = true;\n        priceMap[_catIndex] = _price;\n    }\n\n    function withdraw() public {\n        require(msg.sender == contractOwner, \"Only the contract owner can withdraw\");\n        contractOwner.transfer(address(this).balance);\n    }\n\n    function setCatPrice(uint256 _catIndex, uint256 _price) public {\n        require(ownerMap[_catIndex] == msg.sender, \"Only the owner can set the price\");\n        priceMap[_catIndex] = _price;\n    }\n\n    function getCatPrice(uint256 _catIndex) public view returns (uint256) {\n        return priceMap[_catIndex];\n    }\n\n    function setAttributeType(uint256 _catIndex, string memory _attribute) public {\n        require(ownerMap[_catIndex] == msg.sender, \"Only the owner can set the attribute\");\n        // Logic for setting the attribute\n    }\n\n    function transfer(address _to, uint256 _catIndex) public {\n        require(ownerMap[_catIndex] == msg.sender, \"Only the owner can transfer the cat\");\n        ownerMap[_catIndex] = _to;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        uint256 count = 0;\n        for (uint256 i = 0; i < totalSupply; i++) {\n            if (ownerMap[i] == _owner) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```\n\nThis contract includes basic functionality such as buying a cat, offering a cat for sale, withdrawing funds (for the contract owner), setting a cat's price, transferring ownership of a cat, and checking an owner's balance of cats.\n\nThe details of how cats are assigned, their attributes set, and other specific functionalities will need to be further elaborated according to your specific requirements.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472863,
	"id": "chatcmpl-8MuxbsgdTGm7weKs6vuIjNn0qrvnw",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0206;\n            var var2 = name();\n            var temp0 = memory[0x40:0x60];\n            var var3 = temp0;\n            var var4 = var3;\n            var temp1 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp1 - var4;\n            var temp2 = var2;\n            memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n            var var5 = temp1 + 0x20;\n            var var7 = memory[temp2:temp2 + 0x20];\n            var var6 = temp2 + 0x20;\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n            var var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0246:\n                var temp3 = var7;\n                var5 = temp3 + var5;\n                var6 = temp3 & 0x1f;\n            \n                if (!var6) {\n                    var temp4 = memory[0x40:0x60];\n                    return memory[temp4:temp4 + var5 - temp4];\n                } else {\n                    var temp5 = var6;\n                    var temp6 = var5 - temp5;\n                    memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                    var temp7 = memory[0x40:0x60];\n                    return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                }\n            } else {\n            label_0234:\n                var temp8 = var11;\n                memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                var11 = temp8 + 0x20;\n            \n                if (var11 >= var8) { goto label_0246; }\n                else { goto label_0234; }\n            }\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0294;\n            var1 = totalSupply();\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = var1;\n            var temp10 = memory[0x40:0x60];\n            return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n        } else if (var0 == 0x1fd9f187) {\n            // Dispatch table entry for catNoLongerForSale(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02cb;\n            var2 = msg.data[0x04:0x24];\n            catNoLongerForSale(var2);\n            stop();\n        } else if (var0 == 0x210fe93b) {\n            // Dispatch table entry for catIndexToAddress(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02ee;\n            var2 = msg.data[0x04:0x24];\n            var2 = catIndexToAddress(var2);\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp12 = memory[0x40:0x60];\n            return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0343;\n            var2 = decimals();\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = var2 & 0xff;\n            var temp14 = memory[0x40:0x60];\n            return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n        } else if (var0 == 0x3ccfd60b) {\n            // Dispatch table entry for withdraw()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0372;\n            withdraw();\n            stop();\n        } else if (var0 == 0x3eaaf86b) {\n            // Dispatch table entry for _totalSupply()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0387;\n            var2 = _totalSupply();\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = var2;\n            var temp16 = memory[0x40:0x60];\n            return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n        } else if (var0 == 0x40c558b2) {\n            // Dispatch table entry for releaseCatIndexUpperBound(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03be;\n            var2 = msg.data[0x04:0x24];\n            var2 = releaseCatIndexUpperBound(var2);\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = var2;\n            var temp18 = memory[0x40:0x60];\n            return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n        } else if (var0 == 0x42a4af66) {\n            // Dispatch table entry for updateCatReleasePrice(uint32,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0404;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44];\n            updateCatReleasePrice(var2, var3);\n            stop();\n        } else if (var0 == 0x442890d5) {\n            // Dispatch table entry for getContractOwner()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0419;\n            var1 = getContractOwner();\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp20 = memory[0x40:0x60];\n            return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n        } else if (var0 == 0x4da2b48e) {\n            // Dispatch table entry for getCat(uint256)\n            var1 = 0x0471;\n            var2 = msg.data[0x04:0x24];\n            getCat(var2);\n            stop();\n        } else if (var0 == 0x51605d80) {\n            // Dispatch table entry for imageHash()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0486;\n            var2 = imageHash();\n            var temp21 = memory[0x40:0x60];\n            var3 = temp21;\n            var4 = var3;\n            var temp22 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp22 - var4;\n            var temp23 = var2;\n            memory[temp22:temp22 + 0x20] = memory[temp23:temp23 + 0x20];\n            var5 = temp22 + 0x20;\n            var7 = memory[temp23:temp23 + 0x20];\n            var6 = temp23 + 0x20;\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_04C6:\n                var temp24 = var7;\n                var5 = temp24 + var5;\n                var6 = temp24 & 0x1f;\n            \n                if (!var6) {\n                    var temp25 = memory[0x40:0x60];\n                    return memory[temp25:temp25 + var5 - temp25];\n                } else {\n                    var temp26 = var6;\n                    var temp27 = var5 - temp26;\n                    memory[temp27:temp27 + 0x20] = ~(0x0100 ** (0x20 - temp26) - 0x01) & memory[temp27:temp27 + 0x20];\n                    var temp28 = memory[0x40:0x60];\n                    return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n                }\n            } else {\n            label_04B4:\n                var temp29 = var11;\n                memory[var9 + temp29:var9 + temp29 + 0x20] = memory[var10 + temp29:var10 + temp29 + 0x20];\n                var11 = temp29 + 0x20;\n            \n                if (var11 >= var8) { goto label_04C6; }\n                else { goto label_04B4; }\n            }\n        } else if (var0 == 0x51ecfd16) {\n            // Dispatch table entry for getCatPrice(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0522;\n            var2 = msg.data[0x04:0x24];\n            var1 = getCatPrice(var2);\n            var temp30 = memory[0x40:0x60];\n            memory[temp30:temp30 + 0x20] = var1;\n            var temp31 = memory[0x40:0x60];\n            return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n        } else if (var0 == 0x53e9dcae) {\n            // Dispatch table entry for attributeType(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0559;\n            var2 = msg.data[0x04:0x24];\n            var2 = attributeType(var2);\n            var temp32 = memory[0x40:0x60];\n            var3 = temp32;\n            var4 = var3;\n            var temp33 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp33 - var4;\n            var temp34 = var2;\n            memory[temp33:temp33 + 0x20] = memory[temp34:temp34 + 0x20];\n            var5 = temp33 + 0x20;\n            var7 = memory[temp34:temp34 + 0x20];\n            var6 = temp34 + 0x20;\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0599:\n                var temp35 = var7;\n                var5 = temp35 + var5;\n                var6 = temp35 & 0x1f;\n            \n                if (!var6) {\n                    var temp36 = memory[0x40:0x60];\n                    return memory[temp36:temp36 + var5 - temp36];\n                } else {\n                    var temp37 = var6;\n                    var temp38 = var5 - temp37;\n                    memory[temp38:temp38 + 0x20] = ~(0x0100 ** (0x20 - temp37) - 0x01) & memory[temp38:temp38 + 0x20];\n                    var temp39 = memory[0x40:0x60];\n                    return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n                }\n            } else {\n            label_0587:\n                var temp40 = var11;\n                memory[var9 + temp40:var9 + temp40 + 0x20] = memory[var10 + temp40:var10 + temp40 + 0x20];\n                var11 = temp40 + 0x20;\n            \n                if (var11 >= var8) { goto label_0599; }\n                else { goto label_0587; }\n            }\n        } else if (var0 == 0x55bdd4ac) {\n            // Dispatch table entry for offerCatForSaleToAddress(uint256,uint256,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x061d;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64] & 0xffffffffffffffffffffffffffffffffffffffff;\n            offerCatForSaleToAddress(var2, var3, var4);\n            stop();\n        } else if (var0 == 0x5a3b7e42) {\n            // Dispatch table entry for standard()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0632;\n            var2 = standard();\n            var temp41 = memory[0x40:0x60];\n            var3 = temp41;\n            var4 = var3;\n            var temp42 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp42 - var4;\n            var temp43 = var2;\n            memory[temp42:temp42 + 0x20] = memory[temp43:temp43 + 0x20];\n            var5 = temp42 + 0x20;\n            var6 = temp43 + 0x20;\n            var7 = memory[temp43:temp43 + 0x20];\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0672:\n                var temp44 = var7;\n                var5 = temp44 + var5;\n                var6 = temp44 & 0x1f;\n            \n                if (!var6) {\n                    var temp45 = memory[0x40:0x60];\n                    return memory[temp45:temp45 + var5 - temp45];\n                } else {\n                    var temp46 = var6;\n                    var temp47 = var5 - temp46;\n                    memory[temp47:temp47 + 0x20] = ~(0x0100 ** (0x20 - temp46) - 0x01) & memory[temp47:temp47 + 0x20];\n                    var temp48 = memory[0x40:0x60];\n                    return memory[temp48:temp48 + (temp47 + 0x20) - temp48];\n                }\n            } else {\n            label_0660:\n                var temp49 = var11;\n                memory[var9 + temp49:var9 + temp49 + 0x20] = memory[var10 + temp49:var10 + temp49 + 0x20];\n                var11 = temp49 + 0x20;\n            \n                if (var11 >= var8) { goto label_0672; }\n                else { goto label_0660; }\n            }\n        } else if (var0 == 0x61718141) {\n            // Dispatch table entry for totalSupplyIsLocked()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x06c0;\n            var2 = totalSupplyIsLocked();\n            var temp50 = memory[0x40:0x60];\n            memory[temp50:temp50 + 0x20] = !!var2;\n            var temp51 = memory[0x40:0x60];\n            return memory[temp51:temp51 + (temp50 + 0x20) - temp51];\n        } else if (var0 == 0x68d89792) {\n            // Dispatch table entry for setCatAttributeValue(uint256,uint256,string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0747;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var temp52 = msg.data[0x44:0x64] + 0x04;\n            var temp53 = msg.data[temp52:temp52 + 0x20];\n            var temp54 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp54 + (temp53 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp54:temp54 + 0x20] = temp53;\n            memory[temp54 + 0x20:temp54 + 0x20 + temp53] = msg.data[temp52 + 0x20:temp52 + 0x20 + temp53];\n            var4 = temp54;\n            setCatAttributeValue(var2, var3, var4);\n            stop();\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0780;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = balanceOf(var2);\n            var temp55 = memory[0x40:0x60];\n            memory[temp55:temp55 + 0x20] = var1;\n            var temp56 = memory[0x40:0x60];\n            return memory[temp56:temp56 + (temp55 + 0x20) - temp56];\n        } else if (var0 == 0x7b2c5148) {\n            // Dispatch table entry for catReleaseToPrice(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x07bd;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var2 = catReleaseToPrice(var2);\n            var temp57 = memory[0x40:0x60];\n            memory[temp57:temp57 + 0x20] = var2;\n            var temp58 = memory[0x40:0x60];\n            return memory[temp58:temp58 + (temp57 + 0x20) - temp58];\n        } else if (var0 == 0x861dd0a5) {\n            // Dispatch table entry for releaseCats(uint32,uint256,uint256,string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x084f;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64];\n            var temp59 = msg.data[0x64:0x84] + 0x04;\n            var temp60 = msg.data[temp59:temp59 + 0x20];\n            var temp61 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp61 + (temp60 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp61:temp61 + 0x20] = temp60;\n            memory[temp61 + 0x20:temp61 + 0x20 + temp60] = msg.data[temp59 + 0x20:temp59 + 0x20 + temp60];\n            var5 = temp61;\n            var1 = releaseCats(var2, var3, var4, var5);\n            var temp62 = memory[0x40:0x60];\n            memory[temp62:temp62 + 0x20] = var1;\n            var temp63 = memory[0x40:0x60];\n            return memory[temp63:temp63 + (temp62 + 0x20) - temp63];\n        } else if (var0 == 0x93fffddc) {\n            // Dispatch table entry for previousContractAddress()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0878;\n            var2 = previousContractAddress();\n            var temp64 = memory[0x40:0x60];\n            memory[temp64:temp64 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp65 = memory[0x40:0x60];\n            return memory[temp65:temp65 + (temp64 + 0x20) - temp65];\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x08cd;\n            var2 = symbol();\n            var temp66 = memory[0x40:0x60];\n            var3 = temp66;\n            var4 = var3;\n            var temp67 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp67 - var4;\n            var temp68 = var2;\n            memory[temp67:temp67 + 0x20] = memory[temp68:temp68 + 0x20];\n            var5 = temp67 + 0x20;\n            var6 = temp68 + 0x20;\n            var7 = memory[temp68:temp68 + 0x20];\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_090D:\n                var temp69 = var7;\n                var5 = temp69 + var5;\n                var6 = temp69 & 0x1f;\n            \n                if (!var6) {\n                    var temp70 = memory[0x40:0x60];\n                    return memory[temp70:temp70 + var5 - temp70];\n                } else {\n                    var temp71 = var6;\n                    var temp72 = var5 - temp71;\n                    memory[temp72:temp72 + 0x20] = ~(0x0100 ** (0x20 - temp71) - 0x01) & memory[temp72:temp72 + 0x20];\n                    var temp73 = memory[0x40:0x60];\n                    return memory[temp73:temp73 + (temp72 + 0x20) - temp73];\n                }\n            } else {\n            label_08FB:\n                var temp74 = var11;\n                memory[var9 + temp74:var9 + temp74 + 0x20] = memory[var10 + temp74:var10 + temp74 + 0x20];\n                var11 = temp74 + 0x20;\n            \n                if (var11 >= var8) { goto label_090D; }\n                else { goto label_08FB; }\n            }\n        } else if (var0 == 0x9c9cc12a) {\n            // Dispatch table entry for getCatRelease(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0969;\n            var2 = msg.data[0x04:0x24];\n            var1 = getCatRelease(var2);\n            var temp75 = memory[0x40:0x60];\n            memory[temp75:temp75 + 0x20] = var1 & 0xffffffff;\n            var temp76 = memory[0x40:0x60];\n            return memory[temp76:temp76 + (temp75 + 0x20) - temp76];\n        } else if (var0 == 0x9d773a1b) {\n            // Dispatch table entry for catsForSale(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x09ac;\n            var2 = msg.data[0x04:0x24];\n            var2, var3, var4, var5, var6 = catsForSale(var2);\n            var temp77 = memory[0x40:0x60];\n            memory[temp77:temp77 + 0x20] = !!var2;\n            var temp78 = temp77 + 0x20;\n            memory[temp78:temp78 + 0x20] = var3;\n            var temp79 = temp78 + 0x20;\n            memory[temp79:temp79 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp80 = temp79 + 0x20;\n            memory[temp80:temp80 + 0x20] = var5;\n            var temp81 = temp80 + 0x20;\n            memory[temp81:temp81 + 0x20] = var6 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp82 = memory[0x40:0x60];\n            return memory[temp82:temp82 + (temp81 + 0x20) - temp82];\n        } else if (var0 == 0x9e3e6878) {\n            // Dispatch table entry for allCatsAssigned()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a4d;\n            var2 = allCatsAssigned();\n            var temp83 = memory[0x40:0x60];\n            memory[temp83:temp83 + 0x20] = !!var2;\n            var temp84 = memory[0x40:0x60];\n            return memory[temp84:temp84 + (temp83 + 0x20) - temp84];\n        } else if (var0 == 0xa0a8e460) {\n            // Dispatch table entry for contractVersion()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a7a;\n            var2 = contractVersion();\n            var temp85 = memory[0x40:0x60];\n            memory[temp85:temp85 + 0x20] = var2 & 0xff;\n            var temp86 = memory[0x40:0x60];\n            return memory[temp86:temp86 + (temp85 + 0x20) - temp86];\n        } else if (var0 == 0xa2093e1b) {\n            // Dispatch table entry for migrateCatOwnersFromPreviousContract(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0ac0;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            migrateCatOwnersFromPreviousContract(var2, var3);\n            stop();\n        } else if (var0 == 0xa7e1a8ee) {\n            // Dispatch table entry for setAttributeType(uint256,string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b26;\n            var2 = msg.data[0x04:0x24];\n            var temp87 = msg.data[0x24:0x44] + 0x04;\n            var temp88 = msg.data[temp87:temp87 + 0x20];\n            var temp89 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp89 + (temp88 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp89:temp89 + 0x20] = temp88;\n            memory[temp89 + 0x20:temp89 + 0x20 + temp88] = msg.data[temp87 + 0x20:temp87 + 0x20 + temp88];\n            var3 = temp89;\n            setAttributeType(var2, var3);\n            stop();\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b68;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            var temp90 = memory[0x40:0x60];\n            memory[temp90:temp90 + 0x20] = !!var1;\n            var temp91 = memory[0x40:0x60];\n            return memory[temp91:temp91 + (temp90 + 0x20) - temp91];\n        } else if (var0 == 0xab179e9f) {\n            // Dispatch table entry for currentReleaseCeiling()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b95;\n            var2 = currentReleaseCeiling();\n            var temp92 = memory[0x40:0x60];\n            memory[temp92:temp92 + 0x20] = var2;\n            var temp93 = memory[0x40:0x60];\n            return memory[temp93:temp93 + (temp92 + 0x20) - temp93];\n        } else if (var0 == 0xb3c6487b) {\n            // Dispatch table entry for setCatPrice(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0bd5;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            setCatPrice(var2, var3);\n            stop();\n        } else if (var0 == 0xb9364835) {\n            // Dispatch table entry for getCatOwner(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0bf8;\n            var2 = msg.data[0x04:0x24];\n            var1 = getCatOwner(var2);\n            var temp94 = memory[0x40:0x60];\n            memory[temp94:temp94 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp95 = memory[0x40:0x60];\n            return memory[temp95:temp95 + (temp94 + 0x20) - temp95];\n        } else if (var0 == 0xd72503ba) {\n            // Dispatch table entry for buyCat(uint256)\n            var1 = 0x0c50;\n            var2 = msg.data[0x04:0x24];\n            buyCat(var2);\n            stop();\n        } else if (var0 == 0xdddf33cc) {\n            // Dispatch table entry for offerCatForSale(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c7c;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            offerCatForSale(var2, var3);\n            stop();\n        } else if (var0 == 0xe3acc49a) {\n            // Dispatch table entry for catIndexToPriceException(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c9f;\n            var2 = msg.data[0x04:0x24];\n            var2 = catIndexToPriceException(var2);\n            var temp96 = memory[0x40:0x60];\n            memory[temp96:temp96 + 0x20] = var2;\n            var temp97 = memory[0x40:0x60];\n            return memory[temp97:temp97 + (temp96 + 0x20) - temp97];\n        } else if (var0 == 0xea341309) {\n            // Dispatch table entry for catsRemainingToAssign()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0cc8;\n            var2 = catsRemainingToAssign();\n            var temp98 = memory[0x40:0x60];\n            memory[temp98:temp98 + 0x20] = var2;\n            var temp99 = memory[0x40:0x60];\n            return memory[temp99:temp99 + (temp98 + 0x20) - temp99];\n        } else if (var0 == 0xebeb0f48) {\n            // Dispatch table entry for lockTotalSupply()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0cf1;\n            lockTotalSupply();\n            stop();\n        } else if (var0 == 0xf3f43703) {\n            // Dispatch table entry for pendingWithdrawals(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0d2a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = pendingWithdrawals(var2);\n            var temp100 = memory[0x40:0x60];\n            memory[temp100:temp100 + 0x20] = var2;\n            var temp101 = memory[0x40:0x60];\n            return memory[temp101:temp101 + (temp100 + 0x20) - temp101];\n        } else if (var0 == 0xf7e23677) {\n            // Dispatch table entry for catAttributes(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0d6a;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var2 = catAttributes(var2, var3);\n            var temp102 = memory[0x40:0x60];\n            var3 = temp102;\n            var4 = var3;\n            var temp103 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp103 - var4;\n            var temp104 = var2;\n            memory[temp103:temp103 + 0x20] = memory[temp104:temp104 + 0x20];\n            var5 = temp103 + 0x20;\n            var7 = memory[temp104:temp104 + 0x20];\n            var6 = temp104 + 0x20;\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0DAA:\n                var temp105 = var7;\n                var5 = temp105 + var5;\n                var6 = temp105 & 0x1f;\n            \n                if (!var6) {\n                    var temp106 = memory[0x40:0x60];\n                    return memory[temp106:temp106 + var5 - temp106];\n                } else {\n                    var temp107 = var6;\n                    var temp108 = var5 - temp107;\n                    memory[temp108:temp108 + 0x20] = ~(0x0100 ** (0x20 - temp107) - 0x01) & memory[temp108:temp108 + 0x20];\n                    var temp109 = memory[0x40:0x60];\n                    return memory[temp109:temp109 + (temp108 + 0x20) - temp109];\n                }\n            } else {\n            label_0D98:\n                var temp110 = var11;\n                memory[var9 + temp110:var9 + temp110 + 0x20] = memory[var10 + temp110:var10 + temp110 + 0x20];\n                var11 = temp110 + 0x20;\n            \n                if (var11 >= var8) { goto label_0DAA; }\n                else { goto label_0D98; }\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x03;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0E7B:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0E72; }\n        \n        label_0E5E:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0E5E; }\n        \n        label_0E72:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0E7B;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0E7B;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x06]; }\n    \n    function catNoLongerForSale(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = !!0x00;\n        var temp1 = temp0 + 0x20;\n        var temp2 = arg0;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var temp3 = temp1 + 0x20;\n        memory[temp3:temp3 + 0x20] = msg.sender;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x00;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x11;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        var temp6 = temp5;\n        storage[temp6] = !!memory[temp0:temp0 + 0x20] | (storage[temp6] & ~0xff);\n        storage[temp5 + 0x01] = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var temp7 = temp5 + 0x02;\n        storage[temp7] = (memory[temp0 + 0x40:temp0 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp7] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp5 + 0x03] = memory[temp0 + 0x60:temp0 + 0x60 + 0x20];\n        var temp8 = temp5 + 0x04;\n        storage[temp8] = (memory[temp0 + 0x80:temp0 + 0x80 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + memory[0x40:0x60] - temp9], [0x7d5dcd38c1855f2d3253f06fbd995a7b03b1bd0d20277c21ffcb093862ccb0df, stack[-1]]);\n    }\n    \n    function catIndexToAddress(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function withdraw() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x12;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x12;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function _totalSupply() returns (var r0) { return storage[0x06]; }\n    \n    function releaseCatIndexUpperBound(var arg0) returns (var arg0) {\n        var var0 = 0x10;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])];\n    }\n    \n    function updateCatReleasePrice(var arg0, var arg1) {\n        var var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffff > storage[0x10]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x0b;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1 & 0xffffffff;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x0d18952b49d796ef682b17341dc9347e1cbd53ede7fa0529048f9d1c2c485fd4]);\n    }\n    \n    function getContractOwner() returns (var r0) { return storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function getCat(var arg0) {\n        if (storage[0x07] / 0x0100 ** 0x16 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x08] == 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x09]) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.value;\n        var var1 = 0x136c;\n        var var2 = arg0;\n        var1 = getCatPrice(var2);\n    \n        if (var1 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = msg.sender | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0d;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + 0x01;\n        storage[0x08] = storage[0x08] - 0x01;\n        memory[0x00:0x20] = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x12;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] + msg.value;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba, msg.sender]);\n    }\n    \n    function imageHash() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x00;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1583:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_157A; }\n        \n        label_1566:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1566; }\n        \n        label_157A:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1583;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1583;\n        }\n    }\n    \n    function getCatPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0c;\n    \n        if (storage[keccak256(memory[0x00:0x40])] == 0x00) {\n            var var2 = 0x15df;\n            var var3 = arg0;\n            var2 = getCatRelease(var3);\n            var1 = var2;\n            memory[0x00:0x20] = var1 & 0xffffffff;\n            memory[0x20:0x40] = 0x0b;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n        label_1604:\n            return var0;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n            goto label_1604;\n        }\n    }\n    \n    function attributeType(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0e;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        arg0 = temp3;\n        var var0 = temp0;\n        var var1 = temp2;\n        memory[arg0:arg0 + 0x20] = var1;\n        var var2 = arg0 + 0x20;\n        var var3 = var0;\n        var temp4 = storage[var3];\n        var var4 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var4) {\n        label_16B2:\n            return arg0;\n        } else if (0x1f < var4) {\n            var temp5 = var2;\n            var temp6 = temp5 + var4;\n            var2 = temp6;\n            memory[0x00:0x20] = var3;\n            var temp7 = keccak256(memory[0x00:0x20]);\n            memory[temp5:temp5 + 0x20] = storage[temp7];\n            var3 = temp7 + 0x01;\n            var4 = temp5 + 0x20;\n        \n            if (var2 <= var4) { goto label_16A9; }\n        \n        label_1695:\n            var temp8 = var3;\n            var temp9 = var4;\n            memory[temp9:temp9 + 0x20] = storage[temp8];\n            var3 = temp8 + 0x01;\n            var4 = temp9 + 0x20;\n        \n            if (var2 > var4) { goto label_1695; }\n        \n        label_16A9:\n            var temp10 = var2;\n            var temp11 = temp10 + (var4 - temp10 & 0x1f);\n            var4 = temp10;\n            var2 = temp11;\n            goto label_16B2;\n        } else {\n            var temp12 = var2;\n            memory[temp12:temp12 + 0x20] = storage[var3] / 0x0100 * 0x0100;\n            var2 = temp12 + 0x20;\n            var4 = var4;\n            goto label_16B2;\n        }\n    }\n    \n    function offerCatForSaleToAddress(var arg0, var arg1, var arg2) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = !!0x01;\n        var temp1 = temp0 + 0x20;\n        var temp2 = arg0;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var temp3 = temp1 + 0x20;\n        memory[temp3:temp3 + 0x20] = msg.sender;\n        var temp4 = temp3 + 0x20;\n        var temp5 = arg1;\n        memory[temp4:temp4 + 0x20] = temp5;\n        var temp6 = arg2;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp6 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x11;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        var temp8 = temp7;\n        storage[temp8] = !!memory[temp0:temp0 + 0x20] | (storage[temp8] & ~0xff);\n        storage[temp7 + 0x01] = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var temp9 = temp7 + 0x02;\n        storage[temp9] = (memory[temp0 + 0x40:temp0 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp9] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp7 + 0x03] = memory[temp0 + 0x60:temp0 + 0x60 + 0x20];\n        var temp10 = temp7 + 0x04;\n        storage[temp10] = (memory[temp0 + 0x80:temp0 + 0x80 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp10] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = temp5;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0x76eaef99642f3e716e9cfa6e3047136d4087a9fc18673cb754c35f522fa6f61f, stack[-3], stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function standard() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x02;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1950:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_1947; }\n        \n        label_1933:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1933; }\n        \n        label_1947:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1950;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_1950;\n        }\n    }\n    \n    function totalSupplyIsLocked() returns (var r0) { return storage[0x07] / 0x0100 ** 0x15 & 0xff; }\n    \n    function setCatAttributeValue(var arg0, var arg1, var arg2) {\n        var var0 = 0x1973;\n        var0 = func_2DEC();\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg1 >= 0x00;\n    \n        if (!var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_1A0C:\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = 0x0e;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = storage[temp0];\n            var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n            var temp3 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n            var1 = temp3;\n            var var2 = temp0;\n            var var3 = temp2;\n            memory[var1:var1 + 0x20] = var3;\n            var var4 = var1 + 0x20;\n            var var5 = var2;\n            var temp4 = storage[var5];\n            var var6 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n        \n            if (!var6) {\n            label_1AB3:\n                var0 = var1;\n            \n                if (memory[var0:var0 + 0x20] == 0x00) { revert(memory[0x00:0x00]); }\n            \n                var1 = arg2;\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0f;\n                var2 = keccak256(memory[0x00:0x40]);\n                var3 = arg1;\n            \n                if (var3 >= 0x06) { assert(); }\n            \n                var temp5 = var1;\n                var1 = 0x1b00;\n                var2 = var3 + var2;\n                var4 = memory[temp5:temp5 + 0x20];\n                var3 = temp5 + 0x20;\n                var1 = func_2E00(var2, var3, var4);\n                return;\n            } else if (0x1f < var6) {\n                var temp6 = var4;\n                var temp7 = temp6 + var6;\n                var4 = temp7;\n                memory[0x00:0x20] = var5;\n                var temp8 = keccak256(memory[0x00:0x20]);\n                memory[temp6:temp6 + 0x20] = storage[temp8];\n                var5 = temp8 + 0x01;\n                var6 = temp6 + 0x20;\n            \n                if (var4 <= var6) { goto label_1AAA; }\n            \n            label_1A96:\n                var temp9 = var5;\n                var temp10 = var6;\n                memory[temp10:temp10 + 0x20] = storage[temp9];\n                var5 = temp9 + 0x01;\n                var6 = temp10 + 0x20;\n            \n                if (var4 > var6) { goto label_1A96; }\n            \n            label_1AAA:\n                var temp11 = var4;\n                var temp12 = temp11 + (var6 - temp11 & 0x1f);\n                var6 = temp11;\n                var4 = temp12;\n                goto label_1AB3;\n            } else {\n                var temp13 = var4;\n                memory[temp13:temp13 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n                var4 = temp13 + 0x20;\n                var6 = var6;\n                goto label_1AB3;\n            }\n        } else if (arg1 < 0x06) { goto label_1A0C; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0d;\n    \n        if (storage[keccak256(memory[0x00:0x40])] == var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0d;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function catReleaseToPrice(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function releaseCats(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var2 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x07] / 0x0100 ** 0x15 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        storage[0x09] = storage[0x09] + temp0;\n        var1 = storage[0x06];\n        storage[0x06] = storage[0x06] + temp0;\n        storage[0x08] = storage[0x08] + temp0;\n        var temp1 = arg3;\n        var var3 = 0x1c7d;\n        var var4 = 0x00;\n        var var6 = memory[temp1:temp1 + 0x20];\n        var var5 = temp1 + 0x20;\n        var3 = func_2E00(var4, var5, var6);\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x0b;\n        storage[keccak256(memory[0x00:0x40])] = arg2;\n        var3 = 0x10;\n        var4 = storage[var3];\n        var5 = var4 + 0x01;\n        var6 = 0x1cb6;\n        var var7 = var3;\n        var var8 = var5;\n        func_2E80(var7, var8);\n        memory[0x00:0x20] = var3;\n        storage[var4 + keccak256(memory[0x00:0x20])] = storage[0x06];\n        var3 = arg1;\n        var4 = 0x76edb1b512062ed2fa9a21753f6906d5806f2522b48caf004f8b78eac6418ee5;\n        var5 = storage[0x06];\n        var6 = arg2;\n        var temp2 = arg3;\n        var7 = temp2;\n        var temp3 = memory[0x40:0x60];\n        var8 = temp3;\n        memory[var8:var8 + 0x20] = var5;\n        var temp4 = var8 + 0x20;\n        memory[temp4:temp4 + 0x20] = var6;\n        var temp5 = temp4 + 0x20;\n        var var9 = temp5;\n        var temp6 = var9 + 0x20;\n        memory[var9:var9 + 0x20] = temp6 - var8;\n        memory[temp6:temp6 + 0x20] = memory[var7:var7 + 0x20];\n        var var10 = temp6 + 0x20;\n        var var12 = memory[var7:var7 + 0x20];\n        var var11 = var7 + 0x20;\n        var var13 = var12;\n        var var14 = var10;\n        var var15 = var11;\n        var var16 = 0x00;\n    \n        if (var16 >= var13) {\n        label_1D40:\n            var temp7 = var12;\n            var10 = temp7 + var10;\n            var11 = temp7 & 0x1f;\n        \n            if (!var11) {\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + var10 - temp8], [stack[-8], stack[-9]]);\n                return storage[0x06];\n            } else {\n                var temp9 = var11;\n                var temp10 = var10 - temp9;\n                memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                var temp11 = memory[0x40:0x60];\n                log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [stack[-8], stack[-9]]);\n                return storage[0x06];\n            }\n        } else {\n        label_1D2E:\n            var temp12 = var16;\n            memory[var14 + temp12:var14 + temp12 + 0x20] = memory[var15 + temp12:var15 + temp12 + 0x20];\n            var16 = temp12 + 0x20;\n        \n            if (var16 >= var13) { goto label_1D40; }\n            else { goto label_1D2E; }\n        }\n    }\n    \n    function previousContractAddress() returns (var r0) { return storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x04;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1E47:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_1E3E; }\n        \n        label_1E2A:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1E2A; }\n        \n        label_1E3E:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1E47;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1E47;\n        }\n    }\n    \n    function getCatRelease(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 & 0xffffffff >= storage[0x10]) {\n        label_1EA7:\n            return var0;\n        } else {\n        label_1E6B:\n            var var2 = arg0;\n            var var3 = 0x10;\n            var var4 = var1 & 0xffffffff;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[var4 + keccak256(memory[0x00:0x20])] > var2) { return var1; }\n        \n            var1 = var1 + 0x01;\n        \n            if (var1 & 0xffffffff >= storage[0x10]) { goto label_1EA7; }\n            else { goto label_1E6B; }\n        }\n    }\n    \n    function catsForSale(var arg0) returns (var arg0, var r1, var r2, var r3, var r4) {\n        memory[0x20:0x40] = 0x11;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xff;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r3 = storage[temp0 + 0x03];\n        r4 = storage[temp0 + 0x04] & 0xffffffffffffffffffffffffffffffffffffffff;\n        return arg0, r1, r2, r3, r4;\n    }\n    \n    function allCatsAssigned() returns (var r0) { return storage[0x07] / 0x0100 ** 0x16 & 0xff; }\n    \n    function contractVersion() returns (var r0) { return storage[0x07] / 0x0100 ** 0x14 & 0xff; }\n    \n    function migrateCatOwnersFromPreviousContract(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var4 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var1 = arg0;\n    \n        if (var1 > arg1) {\n        label_2204:\n            var var5 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var6 = 0xea341309;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var var7 = temp0 + 0x04;\n            var var8 = 0x20;\n            var var9 = memory[0x40:0x60];\n            var var10 = var7 - var9;\n            var var11 = var9;\n            var var12 = 0x00;\n            var var13 = var5;\n        \n            if (!address(var13).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas - 0x02c6).value(var12)(memory[var11:var11 + var10]);\n        \n            if (!temp1) { revert(memory[0x00:0x00]); }\n        \n            storage[0x08] = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            return;\n        } else {\n        label_1FED:\n            var5 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = 0x210fe93b;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp3 = temp2 + 0x04;\n            memory[temp3:temp3 + 0x20] = var1;\n            var7 = temp3 + 0x20;\n            var8 = 0x20;\n            var9 = memory[0x40:0x60];\n            var10 = var7 - var9;\n            var11 = var9;\n            var12 = 0x00;\n            var13 = var5;\n        \n            if (!address(var13).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp4;\n            temp4, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas - 0x02c6).value(var12)(memory[var11:var11 + var10]);\n        \n            if (!temp4) { revert(memory[0x00:0x00]); }\n        \n            var2 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        \n            if (var2 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) {\n            label_21F7:\n                var1 = var1 + 0x01;\n            \n                if (var1 > arg1) { goto label_2204; }\n                else { goto label_1FED; }\n            } else {\n                var temp5 = var2;\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x0a;\n                var temp6 = keccak256(memory[0x00:0x40]);\n                storage[temp6] = (temp5 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var5 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var6 = 0x70a08231;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp8 = temp7 + 0x04;\n                memory[temp8:temp8 + 0x20] = temp5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var7 = temp8 + 0x20;\n                var8 = 0x20;\n                var9 = memory[0x40:0x60];\n                var10 = var7 - var9;\n                var11 = var9;\n                var12 = 0x00;\n                var13 = var5;\n            \n                if (!address(var13).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp9;\n                temp9, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas - 0x02c6).value(var12)(memory[var11:var11 + var10]);\n            \n                if (!temp9) { revert(memory[0x00:0x00]); }\n            \n                var temp10 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                var3 = temp10;\n                memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x0d;\n                storage[keccak256(memory[0x00:0x40])] = var3;\n                goto label_21F7;\n            }\n        }\n    }\n    \n    function setAttributeType(var arg0, var arg1) {\n        var var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0 >= 0x00;\n    \n        if (!var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_2313:\n            var temp0 = arg1;\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0e;\n            var1 = 0x233a;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var4 = memory[temp0:temp0 + 0x20];\n            var var3 = temp0 + 0x20;\n            var1 = func_2E00(var2, var3, var4);\n            return;\n        } else if (arg0 < 0x06) { goto label_2313; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1 < storage[0x06];\n    \n        if (var1) {\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = 0x0a;\n            var1 = storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender;\n        \n            if (!var1) { goto label_23FC; }\n            else { goto label_23B8; }\n        } else if (!var1) {\n        label_23FC:\n        \n            if (!var1) {\n            label_2560:\n                return 0x00;\n            } else {\n            label_2402:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0d;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = storage[temp0] - 0x01;\n                var temp1 = arg0;\n                var temp2 = arg1;\n                memory[0x00:0x20] = temp2;\n                memory[0x20:0x40] = 0x0a;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = (temp1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x0d;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                storage[temp4] = storage[temp4] + 0x01;\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = temp2;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            }\n        } else {\n        label_23B8:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0d;\n        \n            if (storage[keccak256(memory[0x00:0x40])] <= 0x00) { goto label_2560; }\n            else { goto label_2402; }\n        }\n    }\n    \n    function currentReleaseCeiling() returns (var r0) { return storage[0x09]; }\n    \n    function setCatPrice(var arg0, var arg1) {\n        var var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0c;\n        storage[keccak256(memory[0x00:0x40])] = arg1;\n    }\n    \n    function getCatOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function buyCat(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x11;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (!(storage[var0] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value < storage[var0 + 0x03]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[var0 + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[var0 + 0x04] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) {\n        label_282E:\n            var temp0 = storage[var0 + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x0a;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = msg.sender | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0d;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = storage[temp3] - 0x01;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0d;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = storage[temp4] + 0x01;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x01;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[stack[-2] + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff, msg.sender]);\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0x7d5dcd38c1855f2d3253f06fbd995a7b03b1bd0d20277c21ffcb093862ccb0df, stack[-3]]);\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x12;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            storage[temp8] = storage[temp8] + msg.value;\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = msg.value;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0x6bd7e7dd1046023e899374de62f095782f09a5ad4633e535375a11724bafed74, stack[-3], storage[stack[-2] + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff, msg.sender]);\n            return;\n        } else if (storage[var0 + 0x04] & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender) { goto label_282E; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function offerCatForSale(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = !!0x01;\n        var temp1 = temp0 + 0x20;\n        var temp2 = arg0;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var temp3 = temp1 + 0x20;\n        memory[temp3:temp3 + 0x20] = msg.sender;\n        var temp4 = temp3 + 0x20;\n        var temp5 = arg1;\n        memory[temp4:temp4 + 0x20] = temp5;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x11;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        var temp7 = temp6;\n        storage[temp7] = !!memory[temp0:temp0 + 0x20] | (storage[temp7] & ~0xff);\n        storage[temp6 + 0x01] = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var temp8 = temp6 + 0x02;\n        storage[temp8] = (memory[temp0 + 0x40:temp0 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp6 + 0x03] = memory[temp0 + 0x60:temp0 + 0x60 + 0x20];\n        var temp9 = temp6 + 0x04;\n        storage[temp9] = (memory[temp0 + 0x80:temp0 + 0x80 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp9] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + 0x20] = temp5;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [0x76eaef99642f3e716e9cfa6e3047136d4087a9fc18673cb754c35f522fa6f61f, stack[-2], 0x00]);\n    }\n    \n    function catIndexToPriceException(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function catsRemainingToAssign() returns (var r0) { return storage[0x08]; }\n    \n    function lockTotalSupply() {\n        var var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = (storage[0x07] & ~(0xff * 0x0100 ** 0x15)) | 0x0100 ** 0x15;\n    }\n    \n    function pendingWithdrawals(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x12;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function catAttributes(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x0f;\n        memory[0x00:0x20] = arg0;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = arg1;\n    \n        if (var1 >= 0x06) { assert(); }\n    \n        var temp0 = var1 + var0;\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        arg0 = temp3;\n        arg1 = temp0;\n        var0 = temp2;\n        memory[arg0:arg0 + 0x20] = var0;\n        var1 = arg0 + 0x20;\n        var var2 = arg1;\n        var temp4 = storage[var2];\n        var var3 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var3) {\n        label_2DE4:\n            return arg0;\n        } else if (0x1f < var3) {\n            var temp5 = var1;\n            var temp6 = temp5 + var3;\n            var1 = temp6;\n            memory[0x00:0x20] = var2;\n            var temp7 = keccak256(memory[0x00:0x20]);\n            memory[temp5:temp5 + 0x20] = storage[temp7];\n            var2 = temp7 + 0x01;\n            var3 = temp5 + 0x20;\n        \n            if (var1 <= var3) { goto label_2DDB; }\n        \n        label_2DC7:\n            var temp8 = var2;\n            var temp9 = var3;\n            memory[temp9:temp9 + 0x20] = storage[temp8];\n            var2 = temp8 + 0x01;\n            var3 = temp9 + 0x20;\n        \n            if (var1 > var3) { goto label_2DC7; }\n        \n        label_2DDB:\n            var temp10 = var1;\n            var temp11 = temp10 + (var3 - temp10 & 0x1f);\n            var3 = temp10;\n            var1 = temp11;\n            goto label_2DE4;\n        } else {\n            var temp12 = var1;\n            memory[temp12:temp12 + 0x20] = storage[var2] / 0x0100 * 0x0100;\n            var3 = var3;\n            var1 = temp12 + 0x20;\n            goto label_2DE4;\n        }\n    }\n    \n    function func_2DEC() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_2E00(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_2E6F:\n                var temp4 = arg1;\n                arg1 = 0x2e7c;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_2EAC(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_2E6E:\n                    goto label_2E6F;\n                } else {\n                label_2E5C:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_2E6E; }\n                    else { goto label_2E5C; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_2E6F;\n        }\n    }\n    \n    function func_2E80(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_2EA7:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x2ea6;\n            var var1 = temp4;\n            var var2 = temp3 + arg1;\n            var0 = func_2EAC(var1, var2);\n            goto label_2EA7;\n        }\n    }\n    \n    function func_2EAC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x2ece;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_2ECA(arg1, var0); }\n    \n    label_2EBB:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_2EBB; }\n    \n        arg0 = func_2ECA(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2ECA(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0206;\n            var var2 = name();\n            var temp0 = memory[0x40:0x60];\n            var var3 = temp0;\n            var var4 = var3;\n            var temp1 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp1 - var4;\n            var temp2 = var2;\n            memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n            var var5 = temp1 + 0x20;\n            var var7 = memory[temp2:temp2 + 0x20];\n            var var6 = temp2 + 0x20;\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n            var var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0246:\n                var temp3 = var7;\n                var5 = temp3 + var5;\n                var6 = temp3 & 0x1f;\n            \n                if (!var6) {\n                    var temp4 = memory[0x40:0x60];\n                    return memory[temp4:temp4 + var5 - temp4];\n                } else {\n                    var temp5 = var6;\n                    var temp6 = var5 - temp5;\n                    memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                    var temp7 = memory[0x40:0x60];\n                    return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                }\n            } else {\n            label_0234:\n                var temp8 = var11;\n                memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                var11 = temp8 + 0x20;\n            \n                if (var11 >= var8) { goto label_0246; }\n                else { goto label_0234; }\n            }\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0294;\n            var1 = totalSupply();\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = var1;\n            var temp10 = memory[0x40:0x60];\n            return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n        } else if (var0 == 0x1fd9f187) {\n            // Dispatch table entry for catNoLongerForSale(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02cb;\n            var2 = msg.data[0x04:0x24];\n            catNoLongerForSale(var2);\n            stop();\n        } else if (var0 == 0x210fe93b) {\n            // Dispatch table entry for catIndexToAddress(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02ee;\n            var2 = msg.data[0x04:0x24];\n            var2 = catIndexToAddress(var2);\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp12 = memory[0x40:0x60];\n            return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0343;\n            var2 = decimals();\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = var2 & 0xff;\n            var temp14 = memory[0x40:0x60];\n            return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n        } else if (var0 == 0x3ccfd60b) {\n            // Dispatch table entry for withdraw()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0372;\n            withdraw();\n            stop();\n        } else if (var0 == 0x3eaaf86b) {\n            // Dispatch table entry for _totalSupply()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0387;\n            var2 = _totalSupply();\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = var2;\n            var temp16 = memory[0x40:0x60];\n            return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n        } else if (var0 == 0x40c558b2) {\n            // Dispatch table entry for releaseCatIndexUpperBound(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03be;\n            var2 = msg.data[0x04:0x24];\n            var2 = releaseCatIndexUpperBound(var2);\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = var2;\n            var temp18 = memory[0x40:0x60];\n            return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n        } else if (var0 == 0x42a4af66) {\n            // Dispatch table entry for updateCatReleasePrice(uint32,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0404;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44];\n            updateCatReleasePrice(var2, var3);\n            stop();\n        } else if (var0 == 0x442890d5) {\n            // Dispatch table entry for getContractOwner()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0419;\n            var1 = getContractOwner();\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp20 = memory[0x40:0x60];\n            return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n        } else if (var0 == 0x4da2b48e) {\n            // Dispatch table entry for getCat(uint256)\n            var1 = 0x0471;\n            var2 = msg.data[0x04:0x24];\n            getCat(var2);\n            stop();\n        } else if (var0 == 0x51605d80) {\n            // Dispatch table entry for imageHash()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0486;\n            var2 = imageHash();\n            var temp21 = memory[0x40:0x60];\n            var3 = temp21;\n            var4 = var3;\n            var temp22 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp22 - var4;\n            var temp23 = var2;\n            memory[temp22:temp22 + 0x20] = memory[temp23:temp23 + 0x20];\n            var5 = temp22 + 0x20;\n            var7 = memory[temp23:temp23 + 0x20];\n            var6 = temp23 + 0x20;\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_04C6:\n                var temp24 = var7;\n                var5 = temp24 + var5;\n                var6 = temp24 & 0x1f;\n            \n                if (!var6) {\n                    var temp25 = memory[0x40:0x60];\n                    return memory[temp25:temp25 + var5 - temp25];\n                } else {\n                    var temp26 = var6;\n                    var temp27 = var5 - temp26;\n                    memory[temp27:temp27 + 0x20] = ~(0x0100 ** (0x20 - temp26) - 0x01) & memory[temp27:temp27 + 0x20];\n                    var temp28 = memory[0x40:0x60];\n                    return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n                }\n            } else {\n            label_04B4:\n                var temp29 = var11;\n                memory[var9 + temp29:var9 + temp29 + 0x20] = memory[var10 + temp29:var10 + temp29 + 0x20];\n                var11 = temp29 + 0x20;\n            \n                if (var11 >= var8) { goto label_04C6; }\n                else { goto label_04B4; }\n            }\n        } else if (var0 == 0x51ecfd16) {\n            // Dispatch table entry for getCatPrice(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0522;\n            var2 = msg.data[0x04:0x24];\n            var1 = getCatPrice(var2);\n            var temp30 = memory[0x40:0x60];\n            memory[temp30:temp30 + 0x20] = var1;\n            var temp31 = memory[0x40:0x60];\n            return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n        } else if (var0 == 0x53e9dcae) {\n            // Dispatch table entry for attributeType(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0559;\n            var2 = msg.data[0x04:0x24];\n            var2 = attributeType(var2);\n            var temp32 = memory[0x40:0x60];\n            var3 = temp32;\n            var4 = var3;\n            var temp33 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp33 - var4;\n            var temp34 = var2;\n            memory[temp33:temp33 + 0x20] = memory[temp34:temp34 + 0x20];\n            var5 = temp33 + 0x20;\n            var7 = memory[temp34:temp34 + 0x20];\n            var6 = temp34 + 0x20;\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0599:\n                var temp35 = var7;\n                var5 = temp35 + var5;\n                var6 = temp35 & 0x1f;\n            \n                if (!var6) {\n                    var temp36 = memory[0x40:0x60];\n                    return memory[temp36:temp36 + var5 - temp36];\n                } else {\n                    var temp37 = var6;\n                    var temp38 = var5 - temp37;\n                    memory[temp38:temp38 + 0x20] = ~(0x0100 ** (0x20 - temp37) - 0x01) & memory[temp38:temp38 + 0x20];\n                    var temp39 = memory[0x40:0x60];\n                    return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n                }\n            } else {\n            label_0587:\n                var temp40 = var11;\n                memory[var9 + temp40:var9 + temp40 + 0x20] = memory[var10 + temp40:var10 + temp40 + 0x20];\n                var11 = temp40 + 0x20;\n            \n                if (var11 >= var8) { goto label_0599; }\n                else { goto label_0587; }\n            }\n        } else if (var0 == 0x55bdd4ac) {\n            // Dispatch table entry for offerCatForSaleToAddress(uint256,uint256,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x061d;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64] & 0xffffffffffffffffffffffffffffffffffffffff;\n            offerCatForSaleToAddress(var2, var3, var4);\n            stop();\n        } else if (var0 == 0x5a3b7e42) {\n            // Dispatch table entry for standard()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0632;\n            var2 = standard();\n            var temp41 = memory[0x40:0x60];\n            var3 = temp41;\n            var4 = var3;\n            var temp42 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp42 - var4;\n            var temp43 = var2;\n            memory[temp42:temp42 + 0x20] = memory[temp43:temp43 + 0x20];\n            var5 = temp42 + 0x20;\n            var6 = temp43 + 0x20;\n            var7 = memory[temp43:temp43 + 0x20];\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0672:\n                var temp44 = var7;\n                var5 = temp44 + var5;\n                var6 = temp44 & 0x1f;\n            \n                if (!var6) {\n                    var temp45 = memory[0x40:0x60];\n                    return memory[temp45:temp45 + var5 - temp45];\n                } else {\n                    var temp46 = var6;\n                    var temp47 = var5 - temp46;\n                    memory[temp47:temp47 + 0x20] = ~(0x0100 ** (0x20 - temp46) - 0x01) & memory[temp47:temp47 + 0x20];\n                    var temp48 = memory[0x40:0x60];\n                    return memory[temp48:temp48 + (temp47 + 0x20) - temp48];\n                }\n            } else {\n            label_0660:\n                var temp49 = var11;\n                memory[var9 + temp49:var9 + temp49 + 0x20] = memory[var10 + temp49:var10 + temp49 + 0x20];\n                var11 = temp49 + 0x20;\n            \n                if (var11 >= var8) { goto label_0672; }\n                else { goto label_0660; }\n            }\n        } else if (var0 == 0x61718141) {\n            // Dispatch table entry for totalSupplyIsLocked()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x06c0;\n            var2 = totalSupplyIsLocked();\n            var temp50 = memory[0x40:0x60];\n            memory[temp50:temp50 + 0x20] = !!var2;\n            var temp51 = memory[0x40:0x60];\n            return memory[temp51:temp51 + (temp50 + 0x20) - temp51];\n        } else if (var0 == 0x68d89792) {\n            // Dispatch table entry for setCatAttributeValue(uint256,uint256,string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0747;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var temp52 = msg.data[0x44:0x64] + 0x04;\n            var temp53 = msg.data[temp52:temp52 + 0x20];\n            var temp54 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp54 + (temp53 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp54:temp54 + 0x20] = temp53;\n            memory[temp54 + 0x20:temp54 + 0x20 + temp53] = msg.data[temp52 + 0x20:temp52 + 0x20 + temp53];\n            var4 = temp54;\n            setCatAttributeValue(var2, var3, var4);\n            stop();\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0780;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = balanceOf(var2);\n            var temp55 = memory[0x40:0x60];\n            memory[temp55:temp55 + 0x20] = var1;\n            var temp56 = memory[0x40:0x60];\n            return memory[temp56:temp56 + (temp55 + 0x20) - temp56];\n        } else if (var0 == 0x7b2c5148) {\n            // Dispatch table entry for catReleaseToPrice(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x07bd;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var2 = catReleaseToPrice(var2);\n            var temp57 = memory[0x40:0x60];\n            memory[temp57:temp57 + 0x20] = var2;\n            var temp58 = memory[0x40:0x60];\n            return memory[temp58:temp58 + (temp57 + 0x20) - temp58];\n        } else if (var0 == 0x861dd0a5) {\n            // Dispatch table entry for releaseCats(uint32,uint256,uint256,string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x084f;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64];\n            var temp59 = msg.data[0x64:0x84] + 0x04;\n            var temp60 = msg.data[temp59:temp59 + 0x20];\n            var temp61 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp61 + (temp60 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp61:temp61 + 0x20] = temp60;\n            memory[temp61 + 0x20:temp61 + 0x20 + temp60] = msg.data[temp59 + 0x20:temp59 + 0x20 + temp60];\n            var5 = temp61;\n            var1 = releaseCats(var2, var3, var4, var5);\n            var temp62 = memory[0x40:0x60];\n            memory[temp62:temp62 + 0x20] = var1;\n            var temp63 = memory[0x40:0x60];\n            return memory[temp63:temp63 + (temp62 + 0x20) - temp63];\n        } else if (var0 == 0x93fffddc) {\n            // Dispatch table entry for previousContractAddress()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0878;\n            var2 = previousContractAddress();\n            var temp64 = memory[0x40:0x60];\n            memory[temp64:temp64 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp65 = memory[0x40:0x60];\n            return memory[temp65:temp65 + (temp64 + 0x20) - temp65];\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x08cd;\n            var2 = symbol();\n            var temp66 = memory[0x40:0x60];\n            var3 = temp66;\n            var4 = var3;\n            var temp67 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp67 - var4;\n            var temp68 = var2;\n            memory[temp67:temp67 + 0x20] = memory[temp68:temp68 + 0x20];\n            var5 = temp67 + 0x20;\n            var6 = temp68 + 0x20;\n            var7 = memory[temp68:temp68 + 0x20];\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_090D:\n                var temp69 = var7;\n                var5 = temp69 + var5;\n                var6 = temp69 & 0x1f;\n            \n                if (!var6) {\n                    var temp70 = memory[0x40:0x60];\n                    return memory[temp70:temp70 + var5 - temp70];\n                } else {\n                    var temp71 = var6;\n                    var temp72 = var5 - temp71;\n                    memory[temp72:temp72 + 0x20] = ~(0x0100 ** (0x20 - temp71) - 0x01) & memory[temp72:temp72 + 0x20];\n                    var temp73 = memory[0x40:0x60];\n                    return memory[temp73:temp73 + (temp72 + 0x20) - temp73];\n                }\n            } else {\n            label_08FB:\n                var temp74 = var11;\n                memory[var9 + temp74:var9 + temp74 + 0x20] = memory[var10 + temp74:var10 + temp74 + 0x20];\n                var11 = temp74 + 0x20;\n            \n                if (var11 >= var8) { goto label_090D; }\n                else { goto label_08FB; }\n            }\n        } else if (var0 == 0x9c9cc12a) {\n            // Dispatch table entry for getCatRelease(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0969;\n            var2 = msg.data[0x04:0x24];\n            var1 = getCatRelease(var2);\n            var temp75 = memory[0x40:0x60];\n            memory[temp75:temp75 + 0x20] = var1 & 0xffffffff;\n            var temp76 = memory[0x40:0x60];\n            return memory[temp76:temp76 + (temp75 + 0x20) - temp76];\n        } else if (var0 == 0x9d773a1b) {\n            // Dispatch table entry for catsForSale(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x09ac;\n            var2 = msg.data[0x04:0x24];\n            var2, var3, var4, var5, var6 = catsForSale(var2);\n            var temp77 = memory[0x40:0x60];\n            memory[temp77:temp77 + 0x20] = !!var2;\n            var temp78 = temp77 + 0x20;\n            memory[temp78:temp78 + 0x20] = var3;\n            var temp79 = temp78 + 0x20;\n            memory[temp79:temp79 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp80 = temp79 + 0x20;\n            memory[temp80:temp80 + 0x20] = var5;\n            var temp81 = temp80 + 0x20;\n            memory[temp81:temp81 + 0x20] = var6 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp82 = memory[0x40:0x60];\n            return memory[temp82:temp82 + (temp81 + 0x20) - temp82];\n        } else if (var0 == 0x9e3e6878) {\n            // Dispatch table entry for allCatsAssigned()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a4d;\n            var2 = allCatsAssigned();\n            var temp83 = memory[0x40:0x60];\n            memory[temp83:temp83 + 0x20] = !!var2;\n            var temp84 = memory[0x40:0x60];\n            return memory[temp84:temp84 + (temp83 + 0x20) - temp84];\n        } else if (var0 == 0xa0a8e460) {\n            // Dispatch table entry for contractVersion()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a7a;\n            var2 = contractVersion();\n            var temp85 = memory[0x40:0x60];\n            memory[temp85:temp85 + 0x20] = var2 & 0xff;\n            var temp86 = memory[0x40:0x60];\n            return memory[temp86:temp86 + (temp85 + 0x20) - temp86];\n        } else if (var0 == 0xa2093e1b) {\n            // Dispatch table entry for migrateCatOwnersFromPreviousContract(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0ac0;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            migrateCatOwnersFromPreviousContract(var2, var3);\n            stop();\n        } else if (var0 == 0xa7e1a8ee) {\n            // Dispatch table entry for setAttributeType(uint256,string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b26;\n            var2 = msg.data[0x04:0x24];\n            var temp87 = msg.data[0x24:0x44] + 0x04;\n            var temp88 = msg.data[temp87:temp87 + 0x20];\n            var temp89 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp89 + (temp88 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp89:temp89 + 0x20] = temp88;\n            memory[temp89 + 0x20:temp89 + 0x20 + temp88] = msg.data[temp87 + 0x20:temp87 + 0x20 + temp88];\n            var3 = temp89;\n            setAttributeType(var2, var3);\n            stop();\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b68;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            var temp90 = memory[0x40:0x60];\n            memory[temp90:temp90 + 0x20] = !!var1;\n            var temp91 = memory[0x40:0x60];\n            return memory[temp91:temp91 + (temp90 + 0x20) - temp91];\n        } else if (var0 == 0xab179e9f) {\n            // Dispatch table entry for currentReleaseCeiling()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b95;\n            var2 = currentReleaseCeiling();\n            var temp92 = memory[0x40:0x60];\n            memory[temp92:temp92 + 0x20] = var2;\n            var temp93 = memory[0x40:0x60];\n            return memory[temp93:temp93 + (temp92 + 0x20) - temp93];\n        } else if (var0 == 0xb3c6487b) {\n            // Dispatch table entry for setCatPrice(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0bd5;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            setCatPrice(var2, var3);\n            stop();\n        } else if (var0 == 0xb9364835) {\n            // Dispatch table entry for getCatOwner(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0bf8;\n            var2 = msg.data[0x04:0x24];\n            var1 = getCatOwner(var2);\n            var temp94 = memory[0x40:0x60];\n            memory[temp94:temp94 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp95 = memory[0x40:0x60];\n            return memory[temp95:temp95 + (temp94 + 0x20) - temp95];\n        } else if (var0 == 0xd72503ba) {\n            // Dispatch table entry for buyCat(uint256)\n            var1 = 0x0c50;\n            var2 = msg.data[0x04:0x24];\n            buyCat(var2);\n            stop();\n        } else if (var0 == 0xdddf33cc) {\n            // Dispatch table entry for offerCatForSale(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c7c;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            offerCatForSale(var2, var3);\n            stop();\n        } else if (var0 == 0xe3acc49a) {\n            // Dispatch table entry for catIndexToPriceException(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c9f;\n            var2 = msg.data[0x04:0x24];\n            var2 = catIndexToPriceException(var2);\n            var temp96 = memory[0x40:0x60];\n            memory[temp96:temp96 + 0x20] = var2;\n            var temp97 = memory[0x40:0x60];\n            return memory[temp97:temp97 + (temp96 + 0x20) - temp97];\n        } else if (var0 == 0xea341309) {\n            // Dispatch table entry for catsRemainingToAssign()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0cc8;\n            var2 = catsRemainingToAssign();\n            var temp98 = memory[0x40:0x60];\n            memory[temp98:temp98 + 0x20] = var2;\n            var temp99 = memory[0x40:0x60];\n            return memory[temp99:temp99 + (temp98 + 0x20) - temp99];\n        } else if (var0 == 0xebeb0f48) {\n            // Dispatch table entry for lockTotalSupply()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0cf1;\n            lockTotalSupply();\n            stop();\n        } else if (var0 == 0xf3f43703) {\n            // Dispatch table entry for pendingWithdrawals(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0d2a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = pendingWithdrawals(var2);\n            var temp100 = memory[0x40:0x60];\n            memory[temp100:temp100 + 0x20] = var2;\n            var temp101 = memory[0x40:0x60];\n            return memory[temp101:temp101 + (temp100 + 0x20) - temp101];\n        } else if (var0 == 0xf7e23677) {\n            // Dispatch table entry for catAttributes(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0d6a;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var2 = catAttributes(var2, var3);\n            var temp102 = memory[0x40:0x60];\n            var3 = temp102;\n            var4 = var3;\n            var temp103 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp103 - var4;\n            var temp104 = var2;\n            memory[temp103:temp103 + 0x20] = memory[temp104:temp104 + 0x20];\n            var5 = temp103 + 0x20;\n            var7 = memory[temp104:temp104 + 0x20];\n            var6 = temp104 + 0x20;\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0DAA:\n                var temp105 = var7;\n                var5 = temp105 + var5;\n                var6 = temp105 & 0x1f;\n            \n                if (!var6) {\n                    var temp106 = memory[0x40:0x60];\n                    return memory[temp106:temp106 + var5 - temp106];\n                } else {\n                    var temp107 = var6;\n                    var temp108 = var5 - temp107;\n                    memory[temp108:temp108 + 0x20] = ~(0x0100 ** (0x20 - temp107) - 0x01) & memory[temp108:temp108 + 0x20];\n                    var temp109 = memory[0x40:0x60];\n                    return memory[temp109:temp109 + (temp108 + 0x20) - temp109];\n                }\n            } else {\n            label_0D98:\n                var temp110 = var11;\n                memory[var9 + temp110:var9 + temp110 + 0x20] = memory[var10 + temp110:var10 + temp110 + 0x20];\n                var11 = temp110 + 0x20;\n            \n                if (var11 >= var8) { goto label_0DAA; }\n                else { goto label_0D98; }\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x03;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0E7B:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0E72; }\n        \n        label_0E5E:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0E5E; }\n        \n        label_0E72:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0E7B;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0E7B;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x06]; }\n    \n    function catNoLongerForSale(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = !!0x00;\n        var temp1 = temp0 + 0x20;\n        var temp2 = arg0;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var temp3 = temp1 + 0x20;\n        memory[temp3:temp3 + 0x20] = msg.sender;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x00;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x11;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        var temp6 = temp5;\n        storage[temp6] = !!memory[temp0:temp0 + 0x20] | (storage[temp6] & ~0xff);\n        storage[temp5 + 0x01] = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var temp7 = temp5 + 0x02;\n        storage[temp7] = (memory[temp0 + 0x40:temp0 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp7] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp5 + 0x03] = memory[temp0 + 0x60:temp0 + 0x60 + 0x20];\n        var temp8 = temp5 + 0x04;\n        storage[temp8] = (memory[temp0 + 0x80:temp0 + 0x80 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + memory[0x40:0x60] - temp9], [0x7d5dcd38c1855f2d3253f06fbd995a7b03b1bd0d20277c21ffcb093862ccb0df, stack[-1]]);\n    }\n    \n    function catIndexToAddress(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function withdraw() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x12;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x12;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function _totalSupply() returns (var r0) { return storage[0x06]; }\n    \n    function releaseCatIndexUpperBound(var arg0) returns (var arg0) {\n        var var0 = 0x10;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])];\n    }\n    \n    function updateCatReleasePrice(var arg0, var arg1) {\n        var var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffff > storage[0x10]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x0b;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1 & 0xffffffff;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x0d18952b49d796ef682b17341dc9347e1cbd53ede7fa0529048f9d1c2c485fd4]);\n    }\n    \n    function getContractOwner() returns (var r0) { return storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function getCat(var arg0) {\n        if (storage[0x07] / 0x0100 ** 0x16 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x08] == 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x09]) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.value;\n        var var1 = 0x136c;\n        var var2 = arg0;\n        var1 = getCatPrice(var2);\n    \n        if (var1 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = msg.sender | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0d;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + 0x01;\n        storage[0x08] = storage[0x08] - 0x01;\n        memory[0x00:0x20] = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x12;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] + msg.value;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba, msg.sender]);\n    }\n    \n    function imageHash() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x00;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1583:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_157A; }\n        \n        label_1566:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1566; }\n        \n        label_157A:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1583;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1583;\n        }\n    }\n    \n    function getCatPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0c;\n    \n        if (storage[keccak256(memory[0x00:0x40])] == 0x00) {\n            var var2 = 0x15df;\n            var var3 = arg0;\n            var2 = getCatRelease(var3);\n            var1 = var2;\n            memory[0x00:0x20] = var1 & 0xffffffff;\n            memory[0x20:0x40] = 0x0b;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n        label_1604:\n            return var0;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n            goto label_1604;\n        }\n    }\n    \n    function attributeType(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0e;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        arg0 = temp3;\n        var var0 = temp0;\n        var var1 = temp2;\n        memory[arg0:arg0 + 0x20] = var1;\n        var var2 = arg0 + 0x20;\n        var var3 = var0;\n        var temp4 = storage[var3];\n        var var4 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var4) {\n        label_16B2:\n            return arg0;\n        } else if (0x1f < var4) {\n            var temp5 = var2;\n            var temp6 = temp5 + var4;\n            var2 = temp6;\n            memory[0x00:0x20] = var3;\n            var temp7 = keccak256(memory[0x00:0x20]);\n            memory[temp5:temp5 + 0x20] = storage[temp7];\n            var3 = temp7 + 0x01;\n            var4 = temp5 + 0x20;\n        \n            if (var2 <= var4) { goto label_16A9; }\n        \n        label_1695:\n            var temp8 = var3;\n            var temp9 = var4;\n            memory[temp9:temp9 + 0x20] = storage[temp8];\n            var3 = temp8 + 0x01;\n            var4 = temp9 + 0x20;\n        \n            if (var2 > var4) { goto label_1695; }\n        \n        label_16A9:\n            var temp10 = var2;\n            var temp11 = temp10 + (var4 - temp10 & 0x1f);\n            var4 = temp10;\n            var2 = temp11;\n            goto label_16B2;\n        } else {\n            var temp12 = var2;\n            memory[temp12:temp12 + 0x20] = storage[var3] / 0x0100 * 0x0100;\n            var2 = temp12 + 0x20;\n            var4 = var4;\n            goto label_16B2;\n        }\n    }\n    \n    function offerCatForSaleToAddress(var arg0, var arg1, var arg2) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = !!0x01;\n        var temp1 = temp0 + 0x20;\n        var temp2 = arg0;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var temp3 = temp1 + 0x20;\n        memory[temp3:temp3 + 0x20] = msg.sender;\n        var temp4 = temp3 + 0x20;\n        var temp5 = arg1;\n        memory[temp4:temp4 + 0x20] = temp5;\n        var temp6 = arg2;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp6 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x11;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        var temp8 = temp7;\n        storage[temp8] = !!memory[temp0:temp0 + 0x20] | (storage[temp8] & ~0xff);\n        storage[temp7 + 0x01] = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var temp9 = temp7 + 0x02;\n        storage[temp9] = (memory[temp0 + 0x40:temp0 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp9] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp7 + 0x03] = memory[temp0 + 0x60:temp0 + 0x60 + 0x20];\n        var temp10 = temp7 + 0x04;\n        storage[temp10] = (memory[temp0 + 0x80:temp0 + 0x80 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp10] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = temp5;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0x76eaef99642f3e716e9cfa6e3047136d4087a9fc18673cb754c35f522fa6f61f, stack[-3], stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function standard() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x02;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1950:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_1947; }\n        \n        label_1933:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1933; }\n        \n        label_1947:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1950;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_1950;\n        }\n    }\n    \n    function totalSupplyIsLocked() returns (var r0) { return storage[0x07] / 0x0100 ** 0x15 & 0xff; }\n    \n    function setCatAttributeValue(var arg0, var arg1, var arg2) {\n        var var0 = 0x1973;\n        var0 = func_2DEC();\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg1 >= 0x00;\n    \n        if (!var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_1A0C:\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = 0x0e;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = storage[temp0];\n            var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n            var temp3 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n            var1 = temp3;\n            var var2 = temp0;\n            var var3 = temp2;\n            memory[var1:var1 + 0x20] = var3;\n            var var4 = var1 + 0x20;\n            var var5 = var2;\n            var temp4 = storage[var5];\n            var var6 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n        \n            if (!var6) {\n            label_1AB3:\n                var0 = var1;\n            \n                if (memory[var0:var0 + 0x20] == 0x00) { revert(memory[0x00:0x00]); }\n            \n                var1 = arg2;\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0f;\n                var2 = keccak256(memory[0x00:0x40]);\n                var3 = arg1;\n            \n                if (var3 >= 0x06) { assert(); }\n            \n                var temp5 = var1;\n                var1 = 0x1b00;\n                var2 = var3 + var2;\n                var4 = memory[temp5:temp5 + 0x20];\n                var3 = temp5 + 0x20;\n                var1 = func_2E00(var2, var3, var4);\n                return;\n            } else if (0x1f < var6) {\n                var temp6 = var4;\n                var temp7 = temp6 + var6;\n                var4 = temp7;\n                memory[0x00:0x20] = var5;\n                var temp8 = keccak256(memory[0x00:0x20]);\n                memory[temp6:temp6 + 0x20] = storage[temp8];\n                var5 = temp8 + 0x01;\n                var6 = temp6 + 0x20;\n            \n                if (var4 <= var6) { goto label_1AAA; }\n            \n            label_1A96:\n                var temp9 = var5;\n                var temp10 = var6;\n                memory[temp10:temp10 + 0x20] = storage[temp9];\n                var5 = temp9 + 0x01;\n                var6 = temp10 + 0x20;\n            \n                if (var4 > var6) { goto label_1A96; }\n            \n            label_1AAA:\n                var temp11 = var4;\n                var temp12 = temp11 + (var6 - temp11 & 0x1f);\n                var6 = temp11;\n                var4 = temp12;\n                goto label_1AB3;\n            } else {\n                var temp13 = var4;\n                memory[temp13:temp13 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n                var4 = temp13 + 0x20;\n                var6 = var6;\n                goto label_1AB3;\n            }\n        } else if (arg1 < 0x06) { goto label_1A0C; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0d;\n    \n        if (storage[keccak256(memory[0x00:0x40])] == var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0d;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function catReleaseToPrice(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function releaseCats(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var2 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x07] / 0x0100 ** 0x15 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        storage[0x09] = storage[0x09] + temp0;\n        var1 = storage[0x06];\n        storage[0x06] = storage[0x06] + temp0;\n        storage[0x08] = storage[0x08] + temp0;\n        var temp1 = arg3;\n        var var3 = 0x1c7d;\n        var var4 = 0x00;\n        var var6 = memory[temp1:temp1 + 0x20];\n        var var5 = temp1 + 0x20;\n        var3 = func_2E00(var4, var5, var6);\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x0b;\n        storage[keccak256(memory[0x00:0x40])] = arg2;\n        var3 = 0x10;\n        var4 = storage[var3];\n        var5 = var4 + 0x01;\n        var6 = 0x1cb6;\n        var var7 = var3;\n        var var8 = var5;\n        func_2E80(var7, var8);\n        memory[0x00:0x20] = var3;\n        storage[var4 + keccak256(memory[0x00:0x20])] = storage[0x06];\n        var3 = arg1;\n        var4 = 0x76edb1b512062ed2fa9a21753f6906d5806f2522b48caf004f8b78eac6418ee5;\n        var5 = storage[0x06];\n        var6 = arg2;\n        var temp2 = arg3;\n        var7 = temp2;\n        var temp3 = memory[0x40:0x60];\n        var8 = temp3;\n        memory[var8:var8 + 0x20] = var5;\n        var temp4 = var8 + 0x20;\n        memory[temp4:temp4 + 0x20] = var6;\n        var temp5 = temp4 + 0x20;\n        var var9 = temp5;\n        var temp6 = var9 + 0x20;\n        memory[var9:var9 + 0x20] = temp6 - var8;\n        memory[temp6:temp6 + 0x20] = memory[var7:var7 + 0x20];\n        var var10 = temp6 + 0x20;\n        var var12 = memory[var7:var7 + 0x20];\n        var var11 = var7 + 0x20;\n        var var13 = var12;\n        var var14 = var10;\n        var var15 = var11;\n        var var16 = 0x00;\n    \n        if (var16 >= var13) {\n        label_1D40:\n            var temp7 = var12;\n            var10 = temp7 + var10;\n            var11 = temp7 & 0x1f;\n        \n            if (!var11) {\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + var10 - temp8], [stack[-8], stack[-9]]);\n                return storage[0x06];\n            } else {\n                var temp9 = var11;\n                var temp10 = var10 - temp9;\n                memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                var temp11 = memory[0x40:0x60];\n                log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [stack[-8], stack[-9]]);\n                return storage[0x06];\n            }\n        } else {\n        label_1D2E:\n            var temp12 = var16;\n            memory[var14 + temp12:var14 + temp12 + 0x20] = memory[var15 + temp12:var15 + temp12 + 0x20];\n            var16 = temp12 + 0x20;\n        \n            if (var16 >= var13) { goto label_1D40; }\n            else { goto label_1D2E; }\n        }\n    }\n    \n    function previousContractAddress() returns (var r0) { return storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x04;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1E47:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_1E3E; }\n        \n        label_1E2A:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1E2A; }\n        \n        label_1E3E:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1E47;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1E47;\n        }\n    }\n    \n    function getCatRelease(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 & 0xffffffff >= storage[0x10]) {\n        label_1EA7:\n            return var0;\n        } else {\n        label_1E6B:\n            var var2 = arg0;\n            var var3 = 0x10;\n            var var4 = var1 & 0xffffffff;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[var4 + keccak256(memory[0x00:0x20])] > var2) { return var1; }\n        \n            var1 = var1 + 0x01;\n        \n            if (var1 & 0xffffffff >= storage[0x10]) { goto label_1EA7; }\n            else { goto label_1E6B; }\n        }\n    }\n    \n    function catsForSale(var arg0) returns (var arg0, var r1, var r2, var r3, var r4) {\n        memory[0x20:0x40] = 0x11;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xff;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r3 = storage[temp0 + 0x03];\n        r4 = storage[temp0 + 0x04] & 0xffffffffffffffffffffffffffffffffffffffff;\n        return arg0, r1, r2, r3, r4;\n    }\n    \n    function allCatsAssigned() returns (var r0) { return storage[0x07] / 0x0100 ** 0x16 & 0xff; }\n    \n    function contractVersion() returns (var r0) { return storage[0x07] / 0x0100 ** 0x14 & 0xff; }\n    \n    function migrateCatOwnersFromPreviousContract(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var4 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var1 = arg0;\n    \n        if (var1 > arg1) {\n        label_2204:\n            var var5 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var6 = 0xea341309;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var var7 = temp0 + 0x04;\n            var var8 = 0x20;\n            var var9 = memory[0x40:0x60];\n            var var10 = var7 - var9;\n            var var11 = var9;\n            var var12 = 0x00;\n            var var13 = var5;\n        \n            if (!address(var13).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas - 0x02c6).value(var12)(memory[var11:var11 + var10]);\n        \n            if (!temp1) { revert(memory[0x00:0x00]); }\n        \n            storage[0x08] = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            return;\n        } else {\n        label_1FED:\n            var5 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = 0x210fe93b;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp3 = temp2 + 0x04;\n            memory[temp3:temp3 + 0x20] = var1;\n            var7 = temp3 + 0x20;\n            var8 = 0x20;\n            var9 = memory[0x40:0x60];\n            var10 = var7 - var9;\n            var11 = var9;\n            var12 = 0x00;\n            var13 = var5;\n        \n            if (!address(var13).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp4;\n            temp4, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas - 0x02c6).value(var12)(memory[var11:var11 + var10]);\n        \n            if (!temp4) { revert(memory[0x00:0x00]); }\n        \n            var2 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        \n            if (var2 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) {\n            label_21F7:\n                var1 = var1 + 0x01;\n            \n                if (var1 > arg1) { goto label_2204; }\n                else { goto label_1FED; }\n            } else {\n                var temp5 = var2;\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x0a;\n                var temp6 = keccak256(memory[0x00:0x40]);\n                storage[temp6] = (temp5 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var5 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var6 = 0x70a08231;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp8 = temp7 + 0x04;\n                memory[temp8:temp8 + 0x20] = temp5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var7 = temp8 + 0x20;\n                var8 = 0x20;\n                var9 = memory[0x40:0x60];\n                var10 = var7 - var9;\n                var11 = var9;\n                var12 = 0x00;\n                var13 = var5;\n            \n                if (!address(var13).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp9;\n                temp9, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas - 0x02c6).value(var12)(memory[var11:var11 + var10]);\n            \n                if (!temp9) { revert(memory[0x00:0x00]); }\n            \n                var temp10 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                var3 = temp10;\n                memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x0d;\n                storage[keccak256(memory[0x00:0x40])] = var3;\n                goto label_21F7;\n            }\n        }\n    }\n    \n    function setAttributeType(var arg0, var arg1) {\n        var var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0 >= 0x00;\n    \n        if (!var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_2313:\n            var temp0 = arg1;\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0e;\n            var1 = 0x233a;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var4 = memory[temp0:temp0 + 0x20];\n            var var3 = temp0 + 0x20;\n            var1 = func_2E00(var2, var3, var4);\n            return;\n        } else if (arg0 < 0x06) { goto label_2313; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1 < storage[0x06];\n    \n        if (var1) {\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = 0x0a;\n            var1 = storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender;\n        \n            if (!var1) { goto label_23FC; }\n            else { goto label_23B8; }\n        } else if (!var1) {\n        label_23FC:\n        \n            if (!var1) {\n            label_2560:\n                return 0x00;\n            } else {\n            label_2402:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0d;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = storage[temp0] - 0x01;\n                var temp1 = arg0;\n                var temp2 = arg1;\n                memory[0x00:0x20] = temp2;\n                memory[0x20:0x40] = 0x0a;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = (temp1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x0d;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                storage[temp4] = storage[temp4] + 0x01;\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = temp2;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            }\n        } else {\n        label_23B8:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0d;\n        \n            if (storage[keccak256(memory[0x00:0x40])] <= 0x00) { goto label_2560; }\n            else { goto label_2402; }\n        }\n    }\n    \n    function currentReleaseCeiling() returns (var r0) { return storage[0x09]; }\n    \n    function setCatPrice(var arg0, var arg1) {\n        var var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0c;\n        storage[keccak256(memory[0x00:0x40])] = arg1;\n    }\n    \n    function getCatOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function buyCat(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x11;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (!(storage[var0] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value < storage[var0 + 0x03]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[var0 + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[var0 + 0x04] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) {\n        label_282E:\n            var temp0 = storage[var0 + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x0a;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = msg.sender | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0d;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = storage[temp3] - 0x01;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0d;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = storage[temp4] + 0x01;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x01;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[stack[-2] + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff, msg.sender]);\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0x7d5dcd38c1855f2d3253f06fbd995a7b03b1bd0d20277c21ffcb093862ccb0df, stack[-3]]);\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x12;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            storage[temp8] = storage[temp8] + msg.value;\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = msg.value;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0x6bd7e7dd1046023e899374de62f095782f09a5ad4633e535375a11724bafed74, stack[-3], storage[stack[-2] + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff, msg.sender]);\n            return;\n        } else if (storage[var0 + 0x04] & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender) { goto label_282E; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function offerCatForSale(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = !!0x01;\n        var temp1 = temp0 + 0x20;\n        var temp2 = arg0;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var temp3 = temp1 + 0x20;\n        memory[temp3:temp3 + 0x20] = msg.sender;\n        var temp4 = temp3 + 0x20;\n        var temp5 = arg1;\n        memory[temp4:temp4 + 0x20] = temp5;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x11;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        var temp7 = temp6;\n        storage[temp7] = !!memory[temp0:temp0 + 0x20] | (storage[temp7] & ~0xff);\n        storage[temp6 + 0x01] = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var temp8 = temp6 + 0x02;\n        storage[temp8] = (memory[temp0 + 0x40:temp0 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp6 + 0x03] = memory[temp0 + 0x60:temp0 + 0x60 + 0x20];\n        var temp9 = temp6 + 0x04;\n        storage[temp9] = (memory[temp0 + 0x80:temp0 + 0x80 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp9] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + 0x20] = temp5;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [0x76eaef99642f3e716e9cfa6e3047136d4087a9fc18673cb754c35f522fa6f61f, stack[-2], 0x00]);\n    }\n    \n    function catIndexToPriceException(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function catsRemainingToAssign() returns (var r0) { return storage[0x08]; }\n    \n    function lockTotalSupply() {\n        var var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = (storage[0x07] & ~(0xff * 0x0100 ** 0x15)) | 0x0100 ** 0x15;\n    }\n    \n    function pendingWithdrawals(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x12;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function catAttributes(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x0f;\n        memory[0x00:0x20] = arg0;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = arg1;\n    \n        if (var1 >= 0x06) { assert(); }\n    \n        var temp0 = var1 + var0;\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        arg0 = temp3;\n        arg1 = temp0;\n        var0 = temp2;\n        memory[arg0:arg0 + 0x20] = var0;\n        var1 = arg0 + 0x20;\n        var var2 = arg1;\n        var temp4 = storage[var2];\n        var var3 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var3) {\n        label_2DE4:\n            return arg0;\n        } else if (0x1f < var3) {\n            var temp5 = var1;\n            var temp6 = temp5 + var3;\n            var1 = temp6;\n            memory[0x00:0x20] = var2;\n            var temp7 = keccak256(memory[0x00:0x20]);\n            memory[temp5:temp5 + 0x20] = storage[temp7];\n            var2 = temp7 + 0x01;\n            var3 = temp5 + 0x20;\n        \n            if (var1 <= var3) { goto label_2DDB; }\n        \n        label_2DC7:\n            var temp8 = var2;\n            var temp9 = var3;\n            memory[temp9:temp9 + 0x20] = storage[temp8];\n            var2 = temp8 + 0x01;\n            var3 = temp9 + 0x20;\n        \n            if (var1 > var3) { goto label_2DC7; }\n        \n        label_2DDB:\n            var temp10 = var1;\n            var temp11 = temp10 + (var3 - temp10 & 0x1f);\n            var3 = temp10;\n            var1 = temp11;\n            goto label_2DE4;\n        } else {\n            var temp12 = var1;\n            memory[temp12:temp12 + 0x20] = storage[var2] / 0x0100 * 0x0100;\n            var3 = var3;\n            var1 = temp12 + 0x20;\n            goto label_2DE4;\n        }\n    }\n    \n    function func_2DEC() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_2E00(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_2E6F:\n                var temp4 = arg1;\n                arg1 = 0x2e7c;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_2EAC(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_2E6E:\n                    goto label_2E6F;\n                } else {\n                label_2E5C:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_2E6E; }\n                    else { goto label_2E5C; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_2E6F;\n        }\n    }\n    \n    function func_2E80(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_2EA7:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x2ea6;\n            var var1 = temp4;\n            var var2 = temp3 + arg1;\n            var0 = func_2EAC(var1, var2);\n            goto label_2EA7;\n        }\n    }\n    \n    function func_2EAC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x2ece;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_2ECA(arg1, var0); }\n    \n    label_2EBB:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_2EBB; }\n    \n        arg0 = func_2ECA(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2ECA(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0206;\n            var var2 = name();\n            var temp0 = memory[0x40:0x60];\n            var var3 = temp0;\n            var var4 = var3;\n            var temp1 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp1 - var4;\n            var temp2 = var2;\n            memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n            var var5 = temp1 + 0x20;\n            var var7 = memory[temp2:temp2 + 0x20];\n            var var6 = temp2 + 0x20;\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n            var var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0246:\n                var temp3 = var7;\n                var5 = temp3 + var5;\n                var6 = temp3 & 0x1f;\n            \n                if (!var6) {\n                    var temp4 = memory[0x40:0x60];\n                    return memory[temp4:temp4 + var5 - temp4];\n                } else {\n                    var temp5 = var6;\n                    var temp6 = var5 - temp5;\n                    memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                    var temp7 = memory[0x40:0x60];\n                    return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                }\n            } else {\n            label_0234:\n                var temp8 = var11;\n                memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                var11 = temp8 + 0x20;\n            \n                if (var11 >= var8) { goto label_0246; }\n                else { goto label_0234; }\n            }\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0294;\n            var1 = totalSupply();\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = var1;\n            var temp10 = memory[0x40:0x60];\n            return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n        } else if (var0 == 0x1fd9f187) {\n            // Dispatch table entry for catNoLongerForSale(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02cb;\n            var2 = msg.data[0x04:0x24];\n            catNoLongerForSale(var2);\n            stop();\n        } else if (var0 == 0x210fe93b) {\n            // Dispatch table entry for catIndexToAddress(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02ee;\n            var2 = msg.data[0x04:0x24];\n            var2 = catIndexToAddress(var2);\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp12 = memory[0x40:0x60];\n            return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0343;\n            var2 = decimals();\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = var2 & 0xff;\n            var temp14 = memory[0x40:0x60];\n            return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n        } else if (var0 == 0x3ccfd60b) {\n            // Dispatch table entry for withdraw()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0372;\n            withdraw();\n            stop();\n        } else if (var0 == 0x3eaaf86b) {\n            // Dispatch table entry for _totalSupply()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0387;\n            var2 = _totalSupply();\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = var2;\n            var temp16 = memory[0x40:0x60];\n            return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n        } else if (var0 == 0x40c558b2) {\n            // Dispatch table entry for releaseCatIndexUpperBound(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03be;\n            var2 = msg.data[0x04:0x24];\n            var2 = releaseCatIndexUpperBound(var2);\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = var2;\n            var temp18 = memory[0x40:0x60];\n            return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n        } else if (var0 == 0x42a4af66) {\n            // Dispatch table entry for updateCatReleasePrice(uint32,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0404;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44];\n            updateCatReleasePrice(var2, var3);\n            stop();\n        } else if (var0 == 0x442890d5) {\n            // Dispatch table entry for getContractOwner()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0419;\n            var1 = getContractOwner();\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp20 = memory[0x40:0x60];\n            return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n        } else if (var0 == 0x4da2b48e) {\n            // Dispatch table entry for getCat(uint256)\n            var1 = 0x0471;\n            var2 = msg.data[0x04:0x24];\n            getCat(var2);\n            stop();\n        } else if (var0 == 0x51605d80) {\n            // Dispatch table entry for imageHash()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0486;\n            var2 = imageHash();\n            var temp21 = memory[0x40:0x60];\n            var3 = temp21;\n            var4 = var3;\n            var temp22 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp22 - var4;\n            var temp23 = var2;\n            memory[temp22:temp22 + 0x20] = memory[temp23:temp23 + 0x20];\n            var5 = temp22 + 0x20;\n            var7 = memory[temp23:temp23 + 0x20];\n            var6 = temp23 + 0x20;\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_04C6:\n                var temp24 = var7;\n                var5 = temp24 + var5;\n                var6 = temp24 & 0x1f;\n            \n                if (!var6) {\n                    var temp25 = memory[0x40:0x60];\n                    return memory[temp25:temp25 + var5 - temp25];\n                } else {\n                    var temp26 = var6;\n                    var temp27 = var5 - temp26;\n                    memory[temp27:temp27 + 0x20] = ~(0x0100 ** (0x20 - temp26) - 0x01) & memory[temp27:temp27 + 0x20];\n                    var temp28 = memory[0x40:0x60];\n                    return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n                }\n            } else {\n            label_04B4:\n                var temp29 = var11;\n                memory[var9 + temp29:var9 + temp29 + 0x20] = memory[var10 + temp29:var10 + temp29 + 0x20];\n                var11 = temp29 + 0x20;\n            \n                if (var11 >= var8) { goto label_04C6; }\n                else { goto label_04B4; }\n            }\n        } else if (var0 == 0x51ecfd16) {\n            // Dispatch table entry for getCatPrice(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0522;\n            var2 = msg.data[0x04:0x24];\n            var1 = getCatPrice(var2);\n            var temp30 = memory[0x40:0x60];\n            memory[temp30:temp30 + 0x20] = var1;\n            var temp31 = memory[0x40:0x60];\n            return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n        } else if (var0 == 0x53e9dcae) {\n            // Dispatch table entry for attributeType(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0559;\n            var2 = msg.data[0x04:0x24];\n            var2 = attributeType(var2);\n            var temp32 = memory[0x40:0x60];\n            var3 = temp32;\n            var4 = var3;\n            var temp33 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp33 - var4;\n            var temp34 = var2;\n            memory[temp33:temp33 + 0x20] = memory[temp34:temp34 + 0x20];\n            var5 = temp33 + 0x20;\n            var7 = memory[temp34:temp34 + 0x20];\n            var6 = temp34 + 0x20;\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0599:\n                var temp35 = var7;\n                var5 = temp35 + var5;\n                var6 = temp35 & 0x1f;\n            \n                if (!var6) {\n                    var temp36 = memory[0x40:0x60];\n                    return memory[temp36:temp36 + var5 - temp36];\n                } else {\n                    var temp37 = var6;\n                    var temp38 = var5 - temp37;\n                    memory[temp38:temp38 + 0x20] = ~(0x0100 ** (0x20 - temp37) - 0x01) & memory[temp38:temp38 + 0x20];\n                    var temp39 = memory[0x40:0x60];\n                    return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n                }\n            } else {\n            label_0587:\n                var temp40 = var11;\n                memory[var9 + temp40:var9 + temp40 + 0x20] = memory[var10 + temp40:var10 + temp40 + 0x20];\n                var11 = temp40 + 0x20;\n            \n                if (var11 >= var8) { goto label_0599; }\n                else { goto label_0587; }\n            }\n        } else if (var0 == 0x55bdd4ac) {\n            // Dispatch table entry for offerCatForSaleToAddress(uint256,uint256,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x061d;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64] & 0xffffffffffffffffffffffffffffffffffffffff;\n            offerCatForSaleToAddress(var2, var3, var4);\n            stop();\n        } else if (var0 == 0x5a3b7e42) {\n            // Dispatch table entry for standard()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0632;\n            var2 = standard();\n            var temp41 = memory[0x40:0x60];\n            var3 = temp41;\n            var4 = var3;\n            var temp42 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp42 - var4;\n            var temp43 = var2;\n            memory[temp42:temp42 + 0x20] = memory[temp43:temp43 + 0x20];\n            var5 = temp42 + 0x20;\n            var6 = temp43 + 0x20;\n            var7 = memory[temp43:temp43 + 0x20];\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0672:\n                var temp44 = var7;\n                var5 = temp44 + var5;\n                var6 = temp44 & 0x1f;\n            \n                if (!var6) {\n                    var temp45 = memory[0x40:0x60];\n                    return memory[temp45:temp45 + var5 - temp45];\n                } else {\n                    var temp46 = var6;\n                    var temp47 = var5 - temp46;\n                    memory[temp47:temp47 + 0x20] = ~(0x0100 ** (0x20 - temp46) - 0x01) & memory[temp47:temp47 + 0x20];\n                    var temp48 = memory[0x40:0x60];\n                    return memory[temp48:temp48 + (temp47 + 0x20) - temp48];\n                }\n            } else {\n            label_0660:\n                var temp49 = var11;\n                memory[var9 + temp49:var9 + temp49 + 0x20] = memory[var10 + temp49:var10 + temp49 + 0x20];\n                var11 = temp49 + 0x20;\n            \n                if (var11 >= var8) { goto label_0672; }\n                else { goto label_0660; }\n            }\n        } else if (var0 == 0x61718141) {\n            // Dispatch table entry for totalSupplyIsLocked()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x06c0;\n            var2 = totalSupplyIsLocked();\n            var temp50 = memory[0x40:0x60];\n            memory[temp50:temp50 + 0x20] = !!var2;\n            var temp51 = memory[0x40:0x60];\n            return memory[temp51:temp51 + (temp50 + 0x20) - temp51];\n        } else if (var0 == 0x68d89792) {\n            // Dispatch table entry for setCatAttributeValue(uint256,uint256,string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0747;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var temp52 = msg.data[0x44:0x64] + 0x04;\n            var temp53 = msg.data[temp52:temp52 + 0x20];\n            var temp54 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp54 + (temp53 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp54:temp54 + 0x20] = temp53;\n            memory[temp54 + 0x20:temp54 + 0x20 + temp53] = msg.data[temp52 + 0x20:temp52 + 0x20 + temp53];\n            var4 = temp54;\n            setCatAttributeValue(var2, var3, var4);\n            stop();\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0780;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = balanceOf(var2);\n            var temp55 = memory[0x40:0x60];\n            memory[temp55:temp55 + 0x20] = var1;\n            var temp56 = memory[0x40:0x60];\n            return memory[temp56:temp56 + (temp55 + 0x20) - temp56];\n        } else if (var0 == 0x7b2c5148) {\n            // Dispatch table entry for catReleaseToPrice(uint32)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x07bd;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var2 = catReleaseToPrice(var2);\n            var temp57 = memory[0x40:0x60];\n            memory[temp57:temp57 + 0x20] = var2;\n            var temp58 = memory[0x40:0x60];\n            return memory[temp58:temp58 + (temp57 + 0x20) - temp58];\n        } else if (var0 == 0x861dd0a5) {\n            // Dispatch table entry for releaseCats(uint32,uint256,uint256,string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x084f;\n            var2 = msg.data[0x04:0x24] & 0xffffffff;\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64];\n            var temp59 = msg.data[0x64:0x84] + 0x04;\n            var temp60 = msg.data[temp59:temp59 + 0x20];\n            var temp61 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp61 + (temp60 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp61:temp61 + 0x20] = temp60;\n            memory[temp61 + 0x20:temp61 + 0x20 + temp60] = msg.data[temp59 + 0x20:temp59 + 0x20 + temp60];\n            var5 = temp61;\n            var1 = releaseCats(var2, var3, var4, var5);\n            var temp62 = memory[0x40:0x60];\n            memory[temp62:temp62 + 0x20] = var1;\n            var temp63 = memory[0x40:0x60];\n            return memory[temp63:temp63 + (temp62 + 0x20) - temp63];\n        } else if (var0 == 0x93fffddc) {\n            // Dispatch table entry for previousContractAddress()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0878;\n            var2 = previousContractAddress();\n            var temp64 = memory[0x40:0x60];\n            memory[temp64:temp64 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp65 = memory[0x40:0x60];\n            return memory[temp65:temp65 + (temp64 + 0x20) - temp65];\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x08cd;\n            var2 = symbol();\n            var temp66 = memory[0x40:0x60];\n            var3 = temp66;\n            var4 = var3;\n            var temp67 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp67 - var4;\n            var temp68 = var2;\n            memory[temp67:temp67 + 0x20] = memory[temp68:temp68 + 0x20];\n            var5 = temp67 + 0x20;\n            var6 = temp68 + 0x20;\n            var7 = memory[temp68:temp68 + 0x20];\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_090D:\n                var temp69 = var7;\n                var5 = temp69 + var5;\n                var6 = temp69 & 0x1f;\n            \n                if (!var6) {\n                    var temp70 = memory[0x40:0x60];\n                    return memory[temp70:temp70 + var5 - temp70];\n                } else {\n                    var temp71 = var6;\n                    var temp72 = var5 - temp71;\n                    memory[temp72:temp72 + 0x20] = ~(0x0100 ** (0x20 - temp71) - 0x01) & memory[temp72:temp72 + 0x20];\n                    var temp73 = memory[0x40:0x60];\n                    return memory[temp73:temp73 + (temp72 + 0x20) - temp73];\n                }\n            } else {\n            label_08FB:\n                var temp74 = var11;\n                memory[var9 + temp74:var9 + temp74 + 0x20] = memory[var10 + temp74:var10 + temp74 + 0x20];\n                var11 = temp74 + 0x20;\n            \n                if (var11 >= var8) { goto label_090D; }\n                else { goto label_08FB; }\n            }\n        } else if (var0 == 0x9c9cc12a) {\n            // Dispatch table entry for getCatRelease(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0969;\n            var2 = msg.data[0x04:0x24];\n            var1 = getCatRelease(var2);\n            var temp75 = memory[0x40:0x60];\n            memory[temp75:temp75 + 0x20] = var1 & 0xffffffff;\n            var temp76 = memory[0x40:0x60];\n            return memory[temp76:temp76 + (temp75 + 0x20) - temp76];\n        } else if (var0 == 0x9d773a1b) {\n            // Dispatch table entry for catsForSale(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x09ac;\n            var2 = msg.data[0x04:0x24];\n            var2, var3, var4, var5, var6 = catsForSale(var2);\n            var temp77 = memory[0x40:0x60];\n            memory[temp77:temp77 + 0x20] = !!var2;\n            var temp78 = temp77 + 0x20;\n            memory[temp78:temp78 + 0x20] = var3;\n            var temp79 = temp78 + 0x20;\n            memory[temp79:temp79 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp80 = temp79 + 0x20;\n            memory[temp80:temp80 + 0x20] = var5;\n            var temp81 = temp80 + 0x20;\n            memory[temp81:temp81 + 0x20] = var6 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp82 = memory[0x40:0x60];\n            return memory[temp82:temp82 + (temp81 + 0x20) - temp82];\n        } else if (var0 == 0x9e3e6878) {\n            // Dispatch table entry for allCatsAssigned()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a4d;\n            var2 = allCatsAssigned();\n            var temp83 = memory[0x40:0x60];\n            memory[temp83:temp83 + 0x20] = !!var2;\n            var temp84 = memory[0x40:0x60];\n            return memory[temp84:temp84 + (temp83 + 0x20) - temp84];\n        } else if (var0 == 0xa0a8e460) {\n            // Dispatch table entry for contractVersion()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0a7a;\n            var2 = contractVersion();\n            var temp85 = memory[0x40:0x60];\n            memory[temp85:temp85 + 0x20] = var2 & 0xff;\n            var temp86 = memory[0x40:0x60];\n            return memory[temp86:temp86 + (temp85 + 0x20) - temp86];\n        } else if (var0 == 0xa2093e1b) {\n            // Dispatch table entry for migrateCatOwnersFromPreviousContract(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0ac0;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            migrateCatOwnersFromPreviousContract(var2, var3);\n            stop();\n        } else if (var0 == 0xa7e1a8ee) {\n            // Dispatch table entry for setAttributeType(uint256,string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b26;\n            var2 = msg.data[0x04:0x24];\n            var temp87 = msg.data[0x24:0x44] + 0x04;\n            var temp88 = msg.data[temp87:temp87 + 0x20];\n            var temp89 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp89 + (temp88 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp89:temp89 + 0x20] = temp88;\n            memory[temp89 + 0x20:temp89 + 0x20 + temp88] = msg.data[temp87 + 0x20:temp87 + 0x20 + temp88];\n            var3 = temp89;\n            setAttributeType(var2, var3);\n            stop();\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b68;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            var temp90 = memory[0x40:0x60];\n            memory[temp90:temp90 + 0x20] = !!var1;\n            var temp91 = memory[0x40:0x60];\n            return memory[temp91:temp91 + (temp90 + 0x20) - temp91];\n        } else if (var0 == 0xab179e9f) {\n            // Dispatch table entry for currentReleaseCeiling()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0b95;\n            var2 = currentReleaseCeiling();\n            var temp92 = memory[0x40:0x60];\n            memory[temp92:temp92 + 0x20] = var2;\n            var temp93 = memory[0x40:0x60];\n            return memory[temp93:temp93 + (temp92 + 0x20) - temp93];\n        } else if (var0 == 0xb3c6487b) {\n            // Dispatch table entry for setCatPrice(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0bd5;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            setCatPrice(var2, var3);\n            stop();\n        } else if (var0 == 0xb9364835) {\n            // Dispatch table entry for getCatOwner(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0bf8;\n            var2 = msg.data[0x04:0x24];\n            var1 = getCatOwner(var2);\n            var temp94 = memory[0x40:0x60];\n            memory[temp94:temp94 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp95 = memory[0x40:0x60];\n            return memory[temp95:temp95 + (temp94 + 0x20) - temp95];\n        } else if (var0 == 0xd72503ba) {\n            // Dispatch table entry for buyCat(uint256)\n            var1 = 0x0c50;\n            var2 = msg.data[0x04:0x24];\n            buyCat(var2);\n            stop();\n        } else if (var0 == 0xdddf33cc) {\n            // Dispatch table entry for offerCatForSale(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c7c;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            offerCatForSale(var2, var3);\n            stop();\n        } else if (var0 == 0xe3acc49a) {\n            // Dispatch table entry for catIndexToPriceException(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0c9f;\n            var2 = msg.data[0x04:0x24];\n            var2 = catIndexToPriceException(var2);\n            var temp96 = memory[0x40:0x60];\n            memory[temp96:temp96 + 0x20] = var2;\n            var temp97 = memory[0x40:0x60];\n            return memory[temp97:temp97 + (temp96 + 0x20) - temp97];\n        } else if (var0 == 0xea341309) {\n            // Dispatch table entry for catsRemainingToAssign()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0cc8;\n            var2 = catsRemainingToAssign();\n            var temp98 = memory[0x40:0x60];\n            memory[temp98:temp98 + 0x20] = var2;\n            var temp99 = memory[0x40:0x60];\n            return memory[temp99:temp99 + (temp98 + 0x20) - temp99];\n        } else if (var0 == 0xebeb0f48) {\n            // Dispatch table entry for lockTotalSupply()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0cf1;\n            lockTotalSupply();\n            stop();\n        } else if (var0 == 0xf3f43703) {\n            // Dispatch table entry for pendingWithdrawals(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0d2a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = pendingWithdrawals(var2);\n            var temp100 = memory[0x40:0x60];\n            memory[temp100:temp100 + 0x20] = var2;\n            var temp101 = memory[0x40:0x60];\n            return memory[temp101:temp101 + (temp100 + 0x20) - temp101];\n        } else if (var0 == 0xf7e23677) {\n            // Dispatch table entry for catAttributes(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0d6a;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var2 = catAttributes(var2, var3);\n            var temp102 = memory[0x40:0x60];\n            var3 = temp102;\n            var4 = var3;\n            var temp103 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp103 - var4;\n            var temp104 = var2;\n            memory[temp103:temp103 + 0x20] = memory[temp104:temp104 + 0x20];\n            var5 = temp103 + 0x20;\n            var7 = memory[temp104:temp104 + 0x20];\n            var6 = temp104 + 0x20;\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0DAA:\n                var temp105 = var7;\n                var5 = temp105 + var5;\n                var6 = temp105 & 0x1f;\n            \n                if (!var6) {\n                    var temp106 = memory[0x40:0x60];\n                    return memory[temp106:temp106 + var5 - temp106];\n                } else {\n                    var temp107 = var6;\n                    var temp108 = var5 - temp107;\n                    memory[temp108:temp108 + 0x20] = ~(0x0100 ** (0x20 - temp107) - 0x01) & memory[temp108:temp108 + 0x20];\n                    var temp109 = memory[0x40:0x60];\n                    return memory[temp109:temp109 + (temp108 + 0x20) - temp109];\n                }\n            } else {\n            label_0D98:\n                var temp110 = var11;\n                memory[var9 + temp110:var9 + temp110 + 0x20] = memory[var10 + temp110:var10 + temp110 + 0x20];\n                var11 = temp110 + 0x20;\n            \n                if (var11 >= var8) { goto label_0DAA; }\n                else { goto label_0D98; }\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x03;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0E7B:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0E72; }\n        \n        label_0E5E:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0E5E; }\n        \n        label_0E72:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0E7B;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0E7B;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x06]; }\n    \n    function catNoLongerForSale(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = !!0x00;\n        var temp1 = temp0 + 0x20;\n        var temp2 = arg0;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var temp3 = temp1 + 0x20;\n        memory[temp3:temp3 + 0x20] = msg.sender;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x00;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x11;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        var temp6 = temp5;\n        storage[temp6] = !!memory[temp0:temp0 + 0x20] | (storage[temp6] & ~0xff);\n        storage[temp5 + 0x01] = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var temp7 = temp5 + 0x02;\n        storage[temp7] = (memory[temp0 + 0x40:temp0 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp7] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp5 + 0x03] = memory[temp0 + 0x60:temp0 + 0x60 + 0x20];\n        var temp8 = temp5 + 0x04;\n        storage[temp8] = (memory[temp0 + 0x80:temp0 + 0x80 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + memory[0x40:0x60] - temp9], [0x7d5dcd38c1855f2d3253f06fbd995a7b03b1bd0d20277c21ffcb093862ccb0df, stack[-1]]);\n    }\n    \n    function catIndexToAddress(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function withdraw() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x12;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x12;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function _totalSupply() returns (var r0) { return storage[0x06]; }\n    \n    function releaseCatIndexUpperBound(var arg0) returns (var arg0) {\n        var var0 = 0x10;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])];\n    }\n    \n    function updateCatReleasePrice(var arg0, var arg1) {\n        var var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffff > storage[0x10]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffff;\n        memory[0x20:0x40] = 0x0b;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1 & 0xffffffff;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x0d18952b49d796ef682b17341dc9347e1cbd53ede7fa0529048f9d1c2c485fd4]);\n    }\n    \n    function getContractOwner() returns (var r0) { return storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function getCat(var arg0) {\n        if (storage[0x07] / 0x0100 ** 0x16 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x08] == 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x09]) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.value;\n        var var1 = 0x136c;\n        var var2 = arg0;\n        var1 = getCatPrice(var2);\n    \n        if (var1 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = msg.sender | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0d;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + 0x01;\n        storage[0x08] = storage[0x08] - 0x01;\n        memory[0x00:0x20] = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x12;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] + msg.value;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba, msg.sender]);\n    }\n    \n    function imageHash() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x00;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1583:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_157A; }\n        \n        label_1566:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1566; }\n        \n        label_157A:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1583;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1583;\n        }\n    }\n    \n    function getCatPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0c;\n    \n        if (storage[keccak256(memory[0x00:0x40])] == 0x00) {\n            var var2 = 0x15df;\n            var var3 = arg0;\n            var2 = getCatRelease(var3);\n            var1 = var2;\n            memory[0x00:0x20] = var1 & 0xffffffff;\n            memory[0x20:0x40] = 0x0b;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n        label_1604:\n            return var0;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n            goto label_1604;\n        }\n    }\n    \n    function attributeType(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0e;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        arg0 = temp3;\n        var var0 = temp0;\n        var var1 = temp2;\n        memory[arg0:arg0 + 0x20] = var1;\n        var var2 = arg0 + 0x20;\n        var var3 = var0;\n        var temp4 = storage[var3];\n        var var4 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var4) {\n        label_16B2:\n            return arg0;\n        } else if (0x1f < var4) {\n            var temp5 = var2;\n            var temp6 = temp5 + var4;\n            var2 = temp6;\n            memory[0x00:0x20] = var3;\n            var temp7 = keccak256(memory[0x00:0x20]);\n            memory[temp5:temp5 + 0x20] = storage[temp7];\n            var3 = temp7 + 0x01;\n            var4 = temp5 + 0x20;\n        \n            if (var2 <= var4) { goto label_16A9; }\n        \n        label_1695:\n            var temp8 = var3;\n            var temp9 = var4;\n            memory[temp9:temp9 + 0x20] = storage[temp8];\n            var3 = temp8 + 0x01;\n            var4 = temp9 + 0x20;\n        \n            if (var2 > var4) { goto label_1695; }\n        \n        label_16A9:\n            var temp10 = var2;\n            var temp11 = temp10 + (var4 - temp10 & 0x1f);\n            var4 = temp10;\n            var2 = temp11;\n            goto label_16B2;\n        } else {\n            var temp12 = var2;\n            memory[temp12:temp12 + 0x20] = storage[var3] / 0x0100 * 0x0100;\n            var2 = temp12 + 0x20;\n            var4 = var4;\n            goto label_16B2;\n        }\n    }\n    \n    function offerCatForSaleToAddress(var arg0, var arg1, var arg2) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = !!0x01;\n        var temp1 = temp0 + 0x20;\n        var temp2 = arg0;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var temp3 = temp1 + 0x20;\n        memory[temp3:temp3 + 0x20] = msg.sender;\n        var temp4 = temp3 + 0x20;\n        var temp5 = arg1;\n        memory[temp4:temp4 + 0x20] = temp5;\n        var temp6 = arg2;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp6 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x11;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        var temp8 = temp7;\n        storage[temp8] = !!memory[temp0:temp0 + 0x20] | (storage[temp8] & ~0xff);\n        storage[temp7 + 0x01] = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var temp9 = temp7 + 0x02;\n        storage[temp9] = (memory[temp0 + 0x40:temp0 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp9] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp7 + 0x03] = memory[temp0 + 0x60:temp0 + 0x60 + 0x20];\n        var temp10 = temp7 + 0x04;\n        storage[temp10] = (memory[temp0 + 0x80:temp0 + 0x80 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp10] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = temp5;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0x76eaef99642f3e716e9cfa6e3047136d4087a9fc18673cb754c35f522fa6f61f, stack[-3], stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function standard() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x02;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1950:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_1947; }\n        \n        label_1933:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1933; }\n        \n        label_1947:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1950;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_1950;\n        }\n    }\n    \n    function totalSupplyIsLocked() returns (var r0) { return storage[0x07] / 0x0100 ** 0x15 & 0xff; }\n    \n    function setCatAttributeValue(var arg0, var arg1, var arg2) {\n        var var0 = 0x1973;\n        var0 = func_2DEC();\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg1 >= 0x00;\n    \n        if (!var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_1A0C:\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = 0x0e;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = storage[temp0];\n            var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n            var temp3 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n            var1 = temp3;\n            var var2 = temp0;\n            var var3 = temp2;\n            memory[var1:var1 + 0x20] = var3;\n            var var4 = var1 + 0x20;\n            var var5 = var2;\n            var temp4 = storage[var5];\n            var var6 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n        \n            if (!var6) {\n            label_1AB3:\n                var0 = var1;\n            \n                if (memory[var0:var0 + 0x20] == 0x00) { revert(memory[0x00:0x00]); }\n            \n                var1 = arg2;\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0f;\n                var2 = keccak256(memory[0x00:0x40]);\n                var3 = arg1;\n            \n                if (var3 >= 0x06) { assert(); }\n            \n                var temp5 = var1;\n                var1 = 0x1b00;\n                var2 = var3 + var2;\n                var4 = memory[temp5:temp5 + 0x20];\n                var3 = temp5 + 0x20;\n                var1 = func_2E00(var2, var3, var4);\n                return;\n            } else if (0x1f < var6) {\n                var temp6 = var4;\n                var temp7 = temp6 + var6;\n                var4 = temp7;\n                memory[0x00:0x20] = var5;\n                var temp8 = keccak256(memory[0x00:0x20]);\n                memory[temp6:temp6 + 0x20] = storage[temp8];\n                var5 = temp8 + 0x01;\n                var6 = temp6 + 0x20;\n            \n                if (var4 <= var6) { goto label_1AAA; }\n            \n            label_1A96:\n                var temp9 = var5;\n                var temp10 = var6;\n                memory[temp10:temp10 + 0x20] = storage[temp9];\n                var5 = temp9 + 0x01;\n                var6 = temp10 + 0x20;\n            \n                if (var4 > var6) { goto label_1A96; }\n            \n            label_1AAA:\n                var temp11 = var4;\n                var temp12 = temp11 + (var6 - temp11 & 0x1f);\n                var6 = temp11;\n                var4 = temp12;\n                goto label_1AB3;\n            } else {\n                var temp13 = var4;\n                memory[temp13:temp13 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n                var4 = temp13 + 0x20;\n                var6 = var6;\n                goto label_1AB3;\n            }\n        } else if (arg1 < 0x06) { goto label_1A0C; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0d;\n    \n        if (storage[keccak256(memory[0x00:0x40])] == var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0d;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function catReleaseToPrice(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function releaseCats(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var2 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x07] / 0x0100 ** 0x15 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        storage[0x09] = storage[0x09] + temp0;\n        var1 = storage[0x06];\n        storage[0x06] = storage[0x06] + temp0;\n        storage[0x08] = storage[0x08] + temp0;\n        var temp1 = arg3;\n        var var3 = 0x1c7d;\n        var var4 = 0x00;\n        var var6 = memory[temp1:temp1 + 0x20];\n        var var5 = temp1 + 0x20;\n        var3 = func_2E00(var4, var5, var6);\n        memory[0x00:0x20] = arg0 & 0xffffffff;\n        memory[0x20:0x40] = 0x0b;\n        storage[keccak256(memory[0x00:0x40])] = arg2;\n        var3 = 0x10;\n        var4 = storage[var3];\n        var5 = var4 + 0x01;\n        var6 = 0x1cb6;\n        var var7 = var3;\n        var var8 = var5;\n        func_2E80(var7, var8);\n        memory[0x00:0x20] = var3;\n        storage[var4 + keccak256(memory[0x00:0x20])] = storage[0x06];\n        var3 = arg1;\n        var4 = 0x76edb1b512062ed2fa9a21753f6906d5806f2522b48caf004f8b78eac6418ee5;\n        var5 = storage[0x06];\n        var6 = arg2;\n        var temp2 = arg3;\n        var7 = temp2;\n        var temp3 = memory[0x40:0x60];\n        var8 = temp3;\n        memory[var8:var8 + 0x20] = var5;\n        var temp4 = var8 + 0x20;\n        memory[temp4:temp4 + 0x20] = var6;\n        var temp5 = temp4 + 0x20;\n        var var9 = temp5;\n        var temp6 = var9 + 0x20;\n        memory[var9:var9 + 0x20] = temp6 - var8;\n        memory[temp6:temp6 + 0x20] = memory[var7:var7 + 0x20];\n        var var10 = temp6 + 0x20;\n        var var12 = memory[var7:var7 + 0x20];\n        var var11 = var7 + 0x20;\n        var var13 = var12;\n        var var14 = var10;\n        var var15 = var11;\n        var var16 = 0x00;\n    \n        if (var16 >= var13) {\n        label_1D40:\n            var temp7 = var12;\n            var10 = temp7 + var10;\n            var11 = temp7 & 0x1f;\n        \n            if (!var11) {\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + var10 - temp8], [stack[-8], stack[-9]]);\n                return storage[0x06];\n            } else {\n                var temp9 = var11;\n                var temp10 = var10 - temp9;\n                memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                var temp11 = memory[0x40:0x60];\n                log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [stack[-8], stack[-9]]);\n                return storage[0x06];\n            }\n        } else {\n        label_1D2E:\n            var temp12 = var16;\n            memory[var14 + temp12:var14 + temp12 + 0x20] = memory[var15 + temp12:var15 + temp12 + 0x20];\n            var16 = temp12 + 0x20;\n        \n            if (var16 >= var13) { goto label_1D40; }\n            else { goto label_1D2E; }\n        }\n    }\n    \n    function previousContractAddress() returns (var r0) { return storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x04;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1E47:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_1E3E; }\n        \n        label_1E2A:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1E2A; }\n        \n        label_1E3E:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1E47;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1E47;\n        }\n    }\n    \n    function getCatRelease(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 & 0xffffffff >= storage[0x10]) {\n        label_1EA7:\n            return var0;\n        } else {\n        label_1E6B:\n            var var2 = arg0;\n            var var3 = 0x10;\n            var var4 = var1 & 0xffffffff;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[var4 + keccak256(memory[0x00:0x20])] > var2) { return var1; }\n        \n            var1 = var1 + 0x01;\n        \n            if (var1 & 0xffffffff >= storage[0x10]) { goto label_1EA7; }\n            else { goto label_1E6B; }\n        }\n    }\n    \n    function catsForSale(var arg0) returns (var arg0, var r1, var r2, var r3, var r4) {\n        memory[0x20:0x40] = 0x11;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xff;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r3 = storage[temp0 + 0x03];\n        r4 = storage[temp0 + 0x04] & 0xffffffffffffffffffffffffffffffffffffffff;\n        return arg0, r1, r2, r3, r4;\n    }\n    \n    function allCatsAssigned() returns (var r0) { return storage[0x07] / 0x0100 ** 0x16 & 0xff; }\n    \n    function contractVersion() returns (var r0) { return storage[0x07] / 0x0100 ** 0x14 & 0xff; }\n    \n    function migrateCatOwnersFromPreviousContract(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var4 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var1 = arg0;\n    \n        if (var1 > arg1) {\n        label_2204:\n            var var5 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var6 = 0xea341309;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var var7 = temp0 + 0x04;\n            var var8 = 0x20;\n            var var9 = memory[0x40:0x60];\n            var var10 = var7 - var9;\n            var var11 = var9;\n            var var12 = 0x00;\n            var var13 = var5;\n        \n            if (!address(var13).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas - 0x02c6).value(var12)(memory[var11:var11 + var10]);\n        \n            if (!temp1) { revert(memory[0x00:0x00]); }\n        \n            storage[0x08] = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            return;\n        } else {\n        label_1FED:\n            var5 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = 0x210fe93b;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp3 = temp2 + 0x04;\n            memory[temp3:temp3 + 0x20] = var1;\n            var7 = temp3 + 0x20;\n            var8 = 0x20;\n            var9 = memory[0x40:0x60];\n            var10 = var7 - var9;\n            var11 = var9;\n            var12 = 0x00;\n            var13 = var5;\n        \n            if (!address(var13).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp4;\n            temp4, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas - 0x02c6).value(var12)(memory[var11:var11 + var10]);\n        \n            if (!temp4) { revert(memory[0x00:0x00]); }\n        \n            var2 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        \n            if (var2 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) {\n            label_21F7:\n                var1 = var1 + 0x01;\n            \n                if (var1 > arg1) { goto label_2204; }\n                else { goto label_1FED; }\n            } else {\n                var temp5 = var2;\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x0a;\n                var temp6 = keccak256(memory[0x00:0x40]);\n                storage[temp6] = (temp5 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var5 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var6 = 0x70a08231;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp8 = temp7 + 0x04;\n                memory[temp8:temp8 + 0x20] = temp5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var7 = temp8 + 0x20;\n                var8 = 0x20;\n                var9 = memory[0x40:0x60];\n                var10 = var7 - var9;\n                var11 = var9;\n                var12 = 0x00;\n                var13 = var5;\n            \n                if (!address(var13).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp9;\n                temp9, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas - 0x02c6).value(var12)(memory[var11:var11 + var10]);\n            \n                if (!temp9) { revert(memory[0x00:0x00]); }\n            \n                var temp10 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                var3 = temp10;\n                memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x0d;\n                storage[keccak256(memory[0x00:0x40])] = var3;\n                goto label_21F7;\n            }\n        }\n    }\n    \n    function setAttributeType(var arg0, var arg1) {\n        var var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0 >= 0x00;\n    \n        if (!var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_2313:\n            var temp0 = arg1;\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0e;\n            var1 = 0x233a;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var4 = memory[temp0:temp0 + 0x20];\n            var var3 = temp0 + 0x20;\n            var1 = func_2E00(var2, var3, var4);\n            return;\n        } else if (arg0 < 0x06) { goto label_2313; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1 < storage[0x06];\n    \n        if (var1) {\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = 0x0a;\n            var1 = storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender;\n        \n            if (!var1) { goto label_23FC; }\n            else { goto label_23B8; }\n        } else if (!var1) {\n        label_23FC:\n        \n            if (!var1) {\n            label_2560:\n                return 0x00;\n            } else {\n            label_2402:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0d;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = storage[temp0] - 0x01;\n                var temp1 = arg0;\n                var temp2 = arg1;\n                memory[0x00:0x20] = temp2;\n                memory[0x20:0x40] = 0x0a;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = (temp1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x0d;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                storage[temp4] = storage[temp4] + 0x01;\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = temp2;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            }\n        } else {\n        label_23B8:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0d;\n        \n            if (storage[keccak256(memory[0x00:0x40])] <= 0x00) { goto label_2560; }\n            else { goto label_2402; }\n        }\n    }\n    \n    function currentReleaseCeiling() returns (var r0) { return storage[0x09]; }\n    \n    function setCatPrice(var arg0, var arg1) {\n        var var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0c;\n        storage[keccak256(memory[0x00:0x40])] = arg1;\n    }\n    \n    function getCatOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function buyCat(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x11;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (!(storage[var0] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value < storage[var0 + 0x03]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[var0 + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff != storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[var0 + 0x04] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) {\n        label_282E:\n            var temp0 = storage[var0 + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x0a;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = msg.sender | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0d;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = storage[temp3] - 0x01;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0d;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = storage[temp4] + 0x01;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x01;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[stack[-2] + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff, msg.sender]);\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0x7d5dcd38c1855f2d3253f06fbd995a7b03b1bd0d20277c21ffcb093862ccb0df, stack[-3]]);\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x12;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            storage[temp8] = storage[temp8] + msg.value;\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = msg.value;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0x6bd7e7dd1046023e899374de62f095782f09a5ad4633e535375a11724bafed74, stack[-3], storage[stack[-2] + 0x02] & 0xffffffffffffffffffffffffffffffffffffffff, msg.sender]);\n            return;\n        } else if (storage[var0 + 0x04] & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender) { goto label_282E; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function offerCatForSale(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= storage[0x06]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = !!0x01;\n        var temp1 = temp0 + 0x20;\n        var temp2 = arg0;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var temp3 = temp1 + 0x20;\n        memory[temp3:temp3 + 0x20] = msg.sender;\n        var temp4 = temp3 + 0x20;\n        var temp5 = arg1;\n        memory[temp4:temp4 + 0x20] = temp5;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x11;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        var temp7 = temp6;\n        storage[temp7] = !!memory[temp0:temp0 + 0x20] | (storage[temp7] & ~0xff);\n        storage[temp6 + 0x01] = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var temp8 = temp6 + 0x02;\n        storage[temp8] = (memory[temp0 + 0x40:temp0 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp6 + 0x03] = memory[temp0 + 0x60:temp0 + 0x60 + 0x20];\n        var temp9 = temp6 + 0x04;\n        storage[temp9] = (memory[temp0 + 0x80:temp0 + 0x80 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp9] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + 0x20] = temp5;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [0x76eaef99642f3e716e9cfa6e3047136d4087a9fc18673cb754c35f522fa6f61f, stack[-2], 0x00]);\n    }\n    \n    function catIndexToPriceException(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function catsRemainingToAssign() returns (var r0) { return storage[0x08]; }\n    \n    function lockTotalSupply() {\n        var var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = (storage[0x07] & ~(0xff * 0x0100 ** 0x15)) | 0x0100 ** 0x15;\n    }\n    \n    function pendingWithdrawals(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x12;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function catAttributes(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x0f;\n        memory[0x00:0x20] = arg0;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = arg1;\n    \n        if (var1 >= 0x06) { assert(); }\n    \n        var temp0 = var1 + var0;\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        arg0 = temp3;\n        arg1 = temp0;\n        var0 = temp2;\n        memory[arg0:arg0 + 0x20] = var0;\n        var1 = arg0 + 0x20;\n        var var2 = arg1;\n        var temp4 = storage[var2];\n        var var3 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var3) {\n        label_2DE4:\n            return arg0;\n        } else if (0x1f < var3) {\n            var temp5 = var1;\n            var temp6 = temp5 + var3;\n            var1 = temp6;\n            memory[0x00:0x20] = var2;\n            var temp7 = keccak256(memory[0x00:0x20]);\n            memory[temp5:temp5 + 0x20] = storage[temp7];\n            var2 = temp7 + 0x01;\n            var3 = temp5 + 0x20;\n        \n            if (var1 <= var3) { goto label_2DDB; }\n        \n        label_2DC7:\n            var temp8 = var2;\n            var temp9 = var3;\n            memory[temp9:temp9 + 0x20] = storage[temp8];\n            var2 = temp8 + 0x01;\n            var3 = temp9 + 0x20;\n        \n            if (var1 > var3) { goto label_2DC7; }\n        \n        label_2DDB:\n            var temp10 = var1;\n            var temp11 = temp10 + (var3 - temp10 & 0x1f);\n            var3 = temp10;\n            var1 = temp11;\n            goto label_2DE4;\n        } else {\n            var temp12 = var1;\n            memory[temp12:temp12 + 0x20] = storage[var2] / 0x0100 * 0x0100;\n            var3 = var3;\n            var1 = temp12 + 0x20;\n            goto label_2DE4;\n        }\n    }\n    \n    function func_2DEC() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_2E00(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_2E6F:\n                var temp4 = arg1;\n                arg1 = 0x2e7c;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_2EAC(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_2E6E:\n                    goto label_2E6F;\n                } else {\n                label_2E5C:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_2E6E; }\n                    else { goto label_2E5C; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_2E6F;\n        }\n    }\n    \n    function func_2E80(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_2EA7:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x2ea6;\n            var var1 = temp4;\n            var var2 = temp3 + arg1;\n            var0 = func_2EAC(var1, var2);\n            goto label_2EA7;\n        }\n    }\n    \n    function func_2EAC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x2ece;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_2ECA(arg1, var0); }\n    \n    label_2EBB:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_2EBB; }\n    \n        arg0 = func_2ECA(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2ECA(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 65.33496928215027,
	"usage": {
		"completion_tokens": 779,
		"prompt_tokens": 24044,
		"total_tokens": 24823
	}
}