{
	"address": "0x5bafed0caa396408b7650dc774a10cfb2a921399",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's a Solidity version of the decompiled code provided. Note that this is a broad approximation of the code - the decompiled code makes use of many low-level operations for which there aren't direct Solidity equivalents, and many functions could not be resolved due to missing information. This is the most accurate interpretation that can be made from the provided decompiled code.\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Contract {\n    uint256 storage_location = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n    address implementation;\n    address admin;\n\n    function upgradeTo(address newImplementation) external {\n        require(msg.sender == admin, \"Not authorized\");\n        require(newImplementation != address(0), \"Invalid address\");\n        implementation = newImplementation;\n    }\n\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable {\n        require(msg.sender == admin, \"Not authorized\");\n        require(newImplementation != address(0), \"Invalid address\");\n        implementation = newImplementation;\n        (bool success,) = newImplementation.delegatecall(data);\n        require(success, \"Upgrade failed\");\n    }\n\n    function changeAdmin(address newAdmin) external {\n        require(msg.sender == admin, \"Not authorized\");\n        require(newAdmin != address(0), \"Invalid address\");\n        admin = newAdmin;\n    }\n    \n    function getImplementation() external view returns (address) {\n        require(msg.sender == admin, \"Not authorized\");\n        return implementation;\n    }\n\n    function getAdmin() external view returns (address) {\n        require(msg.sender == admin, \"Not authorized\");\n        return admin;\n    }\n    \n    fallback() external {\n        address _impl = implementation;\n        require(_impl != address(0));\n        assembly {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, 0, calldatasize())\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\n            let size := returndatasize()\n            returndatacopy(ptr, 0, size)\n\n            switch result\n            case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n}\n```\n\nIt worth mentioning that this is a basic version of a proxy contract in Solidity. The `fallback` function is forwarding calls to another contract (the implementation) and the `admin` can change the target of these calls by calling `upgradeTo` or `upgradeToAndCall`. The `admin` can also be changed by calling `changeAdmin`.",
				"role": "assistant"
			}
		}
	],
	"created": 1700631964,
	"id": "chatcmpl-8NaLkPImTScIHws6prejbn5u8dofD",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (var0 == 0x3659cfe6) {\n                // Dispatch table entry for upgradeTo(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x005b;\n                var2 = 0x0080;\n                var var3 = msg.data.length;\n                var var4 = 0x04;\n                var2 = func_06CA(var3, var4);\n                func_0080(var2);\n                stop();\n            } else if (var0 == 0x4f1ef286) {\n                // Dispatch table entry for upgradeToAndCall(address,bytes)\n                var1 = 0x005b;\n                var2 = 0x0093;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4 = func_06E5(var3, var4);\n                var var5 = 0x0167;\n                var5 = func_035F();\n            \n                if (msg.sender != var5 & (0x01 << 0xa0) - 0x01) {\n                    var5 = 0x01c3;\n                    goto label_00FE;\n                } else {\n                    var5 = 0x01c3;\n                    var var6 = var2;\n                    var temp3 = var4;\n                    var temp4 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    var var7 = temp4;\n                    memory[var7:var7 + 0x20] = temp3;\n                    var temp5 = var7 + 0x20;\n                    memory[temp5:temp5 + temp3] = msg.data[var3:var3 + temp3];\n                    memory[temp5 + temp3:temp5 + temp3 + 0x20] = 0x00;\n                    var var8 = 0x01;\n                    func_0392(var6, var7, var8);\n                    // Error: Could not resolve jump destination!\n                }\n            } else if (var0 == 0x5c60da1b) {\n                // Dispatch table entry for implementation()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00ad;\n                var2 = 0x00;\n                var3 = 0x01da;\n                var3 = func_035F();\n            \n                if (msg.sender != var3 & (0x01 << 0xa0) - 0x01) {\n                    var3 = 0x0208;\n                    goto label_00FE;\n                } else {\n                    var3 = 0x01fb;\n                    var3 = func_0331();\n                    var1 = var3;\n                    // Error: Could not resolve jump destination!\n                }\n            } else if (var0 == 0x8f283970) {\n                // Dispatch table entry for changeAdmin(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x005b;\n                var2 = 0x00e4;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_06CA(var3, var4);\n                var3 = 0x0213;\n                var3 = func_035F();\n            \n                if (msg.sender != var3 & (0x01 << 0xa0) - 0x01) {\n                    var3 = 0x0154;\n                    goto label_00FE;\n                } else {\n                    var3 = 0x0154;\n                    var4 = var2;\n                    func_03F1(var4);\n                    // Error: Could not resolve jump destination!\n                }\n            } else if (var0 == 0xf851a440) {\n                // Dispatch table entry for admin()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00ad;\n                var1 = func_0235();\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1 & (0x01 << 0xa0) - 0x01;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else { goto label_005D; }\n        } else if (msg.data.length) {\n        label_005D:\n            var var0 = 0x005b;\n        \n        label_00FE:\n            var var1 = 0x0106;\n            func_0292();\n            var1 = 0x0116;\n            var var2 = 0x0111;\n            var2 = func_0331();\n            var temp0 = msg.data.length;\n            memory[0x00:0x00 + temp0] = msg.data[0x00:0x00 + temp0];\n            var temp1;\n            temp1, memory[0x00:0x00] = address(var2).delegatecall.gas(msg.gas)(memory[0x00:0x00 + msg.data.length]);\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n        \n            if (!temp1) { revert(memory[0x00:0x00 + returndata.length]); }\n            else { return memory[0x00:0x00 + returndata.length]; }\n        } else {\n            var0 = 0x005b;\n            goto label_00FE;\n        }\n    }\n    \n    function func_0080(var arg0) {\n        var var0 = 0x0120;\n        var0 = func_035F();\n    \n        if (msg.sender != var0 & (0x01 << 0xa0) - 0x01) {\n            var0 = 0x0154;\n            var var1 = 0x0106;\n            func_0292();\n            var1 = 0x0116;\n            var var2 = 0x0111;\n            var2 = func_0331();\n            var temp0 = msg.data.length;\n            memory[0x00:0x00 + temp0] = msg.data[0x00:0x00 + temp0];\n            var temp1;\n            temp1, memory[0x00:0x00] = address(var2).delegatecall.gas(msg.gas)(memory[0x00:0x00 + msg.data.length]);\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n        \n            if (!temp1) { revert(memory[0x00:0x00 + returndata.length]); }\n            else { return memory[0x00:0x00 + returndata.length]; }\n        } else {\n            var0 = 0x0154;\n            var1 = arg0;\n            var temp3 = memory[0x40:0x60];\n            var2 = temp3;\n            memory[0x40:0x60] = var2 + 0x20;\n            memory[var2:var2 + 0x20] = 0x00;\n            var var3 = 0x00;\n            func_0392(var1, var2, var3);\n            return;\n        }\n    }\n    \n    function func_0235() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x023f;\n        var1 = func_035F();\n    \n        if (msg.sender != var1 & (0x01 << 0xa0) - 0x01) {\n            var1 = 0x0208;\n            var var2 = 0x0106;\n            func_0292();\n            var2 = 0x0116;\n            var var3 = 0x0111;\n            var3 = func_0331();\n            var temp0 = msg.data.length;\n            memory[0x00:0x00 + temp0] = msg.data[0x00:0x00 + temp0];\n            var temp1;\n            temp1, memory[0x00:0x00] = address(var3).delegatecall.gas(msg.gas)(memory[0x00:0x00 + msg.data.length]);\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n        \n            if (!temp1) { revert(memory[0x00:0x00 + returndata.length]); }\n            else { return memory[0x00:0x00 + returndata.length]; }\n        } else {\n            var1 = 0x01fb;\n            return func_035F();\n        }\n    }\n    \n    function func_0292() {\n        var var0 = 0x029a;\n        var0 = func_035F();\n    \n        if (msg.sender != var0 & (0x01 << 0xa0) - 0x01) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x42;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x5472616e73706172656e745570677261646561626c6550726f78793a2061646d;\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267;\n        memory[temp0 + 0x84:temp0 + 0x84 + 0x20] = 0x195d << 0xf2;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + (temp0 + 0xa4) - temp1]);\n    }\n    \n    function func_0331() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01fb;\n        return func_0519();\n    }\n    \n    function func_035F() returns (var r0) { return storage[0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103] & (0x01 << 0xa0) - 0x01; }\n    \n    function func_0392(var arg0, var arg1, var arg2) {\n        var var0 = 0x039b;\n        var var1 = arg0;\n        func_0541(var1);\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b, stack[-3] & (0x01 << 0xa0) - 0x01]);\n        var0 = memory[arg1:arg1 + 0x20] > 0x00;\n    \n        if (var0) {\n            if (!var0) {\n            label_01C3:\n                return;\n            } else {\n            label_03E2:\n                var0 = 0x03eb;\n                var1 = arg0;\n                var var2 = arg1;\n                var var3 = 0x60;\n                var var4 = 0x0285;\n                var var5 = var1;\n                var var6 = var2;\n                var temp0 = memory[0x40:0x60];\n                var var7 = temp0;\n                memory[0x40:0x60] = var7 + 0x60;\n                memory[var7:var7 + 0x20] = 0x27;\n                memory[var7 + 0x20:var7 + 0x20 + 0x27] = code[0x07e4:0x080b];\n                var4 = func_0445(var5, var6, var7);\n                var0 = var4;\n                // Error: Could not resolve jump destination!\n            }\n        } else if (!arg2) { goto label_01C3; }\n        else { goto label_03E2; }\n    }\n    \n    function func_03F1(var arg0) {\n        var var0 = 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f;\n        var var1 = 0x041a;\n        var1 = func_035F();\n        var temp0 = memory[0x40:0x60];\n        var temp1 = (0x01 << 0xa0) - 0x01;\n        memory[temp0:temp0 + 0x20] = temp1 & var1;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg0 & temp1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp0 + 0x40) - temp2], [stack[-2]]);\n        var0 = 0x0154;\n        var1 = arg0;\n        func_05E9(var1);\n    }\n    \n    function func_0445(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x60;\n    \n        if (address(arg0).code.length) {\n            var var1 = 0x00;\n            var var2 = var1;\n            var var3 = arg0 & (0x01 << 0xa0) - 0x01;\n            var var4 = 0x04bf;\n            var var5 = arg1;\n            var var6 = memory[0x40:0x60];\n            var4 = func_0794(var5, var6);\n            var temp0 = memory[0x40:0x60];\n            var temp1;\n            temp1, memory[temp0:temp0 + 0x00] = address(var3).delegatecall.gas(msg.gas)(memory[temp0:temp0 + var4 - temp0]);\n            var4 = returndata.length;\n            var5 = var4;\n        \n            if (var5 == 0x00) {\n                var2 = 0x60;\n                var temp2 = var3;\n                var1 = temp2;\n                var3 = 0x050f;\n                var4 = var1;\n                var5 = var2;\n                var6 = arg2;\n                var3 = func_0675(var4, var5, var6);\n            \n            label_050F:\n                return var3;\n            } else {\n                var temp3 = memory[0x40:0x60];\n                var4 = temp3;\n                memory[0x40:0x60] = var4 + (returndata.length + 0x3f & ~0x1f);\n                memory[var4:var4 + 0x20] = returndata.length;\n                var temp4 = returndata.length;\n                memory[var4 + 0x20:var4 + 0x20 + temp4] = returndata[0x00:0x00 + temp4];\n                var temp5 = var4;\n                var2 = temp5;\n                var temp6 = var3;\n                var1 = temp6;\n                var3 = 0x050f;\n                var4 = var1;\n                var5 = var2;\n                var6 = arg2;\n                var3 = func_0675(var4, var5, var6);\n                goto label_050F;\n            }\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x26;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x1b9d1c9858dd << 0xd2;\n            var1 = temp7 + 0x84;\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var1 - temp8]);\n        }\n    }\n    \n    function func_0519() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n        return storage[var1] & (0x01 << 0xa0) - 0x01;\n    }\n    \n    function func_0541(var arg0) {\n        if (address(arg0).code.length) {\n            storage[0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc] = (arg0 & (0x01 << 0xa0) - 0x01) | (storage[0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc] & ~((0x01 << 0xa0) - 0x01));\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2d;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x455243313936373a206e657720696d706c656d656e746174696f6e206973206e;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x1bdd08184818dbdb9d1c9858dd << 0x9a;\n            var var0 = temp0 + 0x84;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_05E9(var arg0) {\n        if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var var0 = arg0;\n            var var1 = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n            var temp0 = var1;\n            storage[temp0] = (var0 & (0x01 << 0xa0) - 0x01) | (storage[temp0] & ~((0x01 << 0xa0) - 0x01));\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x26;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x455243313936373a206e65772061646d696e20697320746865207a65726f2061;\n            memory[temp1 + 0x64:temp1 + 0x64 + 0x20] = 0x646472657373 << 0xd0;\n            var0 = temp1 + 0x84;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + var0 - temp2]);\n        }\n    }\n    \n    function func_0675(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x60;\n    \n        if (arg0) { return arg1; }\n    \n        if (!memory[arg1:arg1 + 0x20]) {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var var1 = 0x0328;\n            var var2 = arg2;\n            var var3 = temp0 + 0x04;\n            var1 = func_07B0(var2, var3);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var1 - temp1]);\n        } else {\n            var temp2 = arg1;\n            var1 = memory[temp2:temp2 + 0x20];\n            revert(memory[temp2 + 0x20:temp2 + 0x20 + var1]);\n        }\n    }\n    \n    function func_06AE(var arg0) returns (var r0) {\n        var temp0 = msg.data[arg0:arg0 + 0x20];\n        var var0 = temp0;\n    \n        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_06CA(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0285;\n        var var2 = arg1;\n        return func_06AE(var2);\n    }\n    \n    function func_06E5(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var3 = 0x0703;\n        var var4 = arg1;\n        var3 = func_06AE(var4);\n        var0 = var3;\n        var3 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var4 = 0xffffffffffffffff;\n    \n        if (var3 > var4) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1 + var3;\n        var3 = temp0;\n    \n        if (var3 + 0x1f i>= arg0) { revert(memory[0x00:0x00]); }\n    \n        var var5 = msg.data[var3:var3 + 0x20];\n    \n        if (var5 > var4) { revert(memory[0x00:0x00]); }\n    \n        if (var3 + var5 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        arg1 = var5;\n        arg0 = var3 + 0x20;\n        r0 = var0;\n        return r0, arg0, arg1;\n    }\n    \n    function func_0768(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n    \n        if (var0 >= arg0) {\n        label_0783:\n        \n            if (var0 <= arg0) { return; }\n        \n            memory[arg0 + arg1:arg0 + arg1 + 0x20] = 0x00;\n            return;\n        } else {\n        label_0774:\n            var temp0 = var0;\n            memory[temp0 + arg1:temp0 + arg1 + 0x20] = memory[temp0 + arg2:temp0 + arg2 + 0x20];\n            var0 = temp0 + 0x20;\n        \n            if (var0 >= arg0) { goto label_0783; }\n            else { goto label_0774; }\n        }\n    }\n    \n    function func_0794(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = memory[temp0:temp0 + 0x20];\n        var var2 = 0x07a6;\n        var var3 = var1;\n        var var4 = arg1;\n        var var5 = temp0 + 0x20;\n        func_0768(var3, var4, var5);\n        return var1 + arg1;\n    }\n    \n    function func_07B0(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        var var0 = 0x00;\n        var temp1 = arg0;\n        var temp2 = memory[temp1:temp1 + 0x20];\n        var var1 = temp2;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var1;\n        var var2 = 0x07cf;\n        var var3 = var1;\n        var var4 = temp0 + 0x40;\n        var var5 = temp1 + 0x20;\n        func_0768(var3, var4, var5);\n        return (var1 + 0x1f & ~0x1f) + arg1 + 0x40;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (var0 == 0x3659cfe6) {\n                // Dispatch table entry for upgradeTo(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x005b;\n                var2 = 0x0080;\n                var var3 = msg.data.length;\n                var var4 = 0x04;\n                var2 = func_06CA(var3, var4);\n                func_0080(var2);\n                stop();\n            } else if (var0 == 0x4f1ef286) {\n                // Dispatch table entry for upgradeToAndCall(address,bytes)\n                var1 = 0x005b;\n                var2 = 0x0093;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4 = func_06E5(var3, var4);\n                var var5 = 0x0167;\n                var5 = func_035F();\n            \n                if (msg.sender != var5 & (0x01 << 0xa0) - 0x01) {\n                    var5 = 0x01c3;\n                    goto label_00FE;\n                } else {\n                    var5 = 0x01c3;\n                    var var6 = var2;\n                    var temp3 = var4;\n                    var temp4 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    var var7 = temp4;\n                    memory[var7:var7 + 0x20] = temp3;\n                    var temp5 = var7 + 0x20;\n                    memory[temp5:temp5 + temp3] = msg.data[var3:var3 + temp3];\n                    memory[temp5 + temp3:temp5 + temp3 + 0x20] = 0x00;\n                    var var8 = 0x01;\n                    func_0392(var6, var7, var8);\n                    // Error: Could not resolve jump destination!\n                }\n            } else if (var0 == 0x5c60da1b) {\n                // Dispatch table entry for implementation()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00ad;\n                var2 = 0x00;\n                var3 = 0x01da;\n                var3 = func_035F();\n            \n                if (msg.sender != var3 & (0x01 << 0xa0) - 0x01) {\n                    var3 = 0x0208;\n                    goto label_00FE;\n                } else {\n                    var3 = 0x01fb;\n                    var3 = func_0331();\n                    var1 = var3;\n                    // Error: Could not resolve jump destination!\n                }\n            } else if (var0 == 0x8f283970) {\n                // Dispatch table entry for changeAdmin(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x005b;\n                var2 = 0x00e4;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_06CA(var3, var4);\n                var3 = 0x0213;\n                var3 = func_035F();\n            \n                if (msg.sender != var3 & (0x01 << 0xa0) - 0x01) {\n                    var3 = 0x0154;\n                    goto label_00FE;\n                } else {\n                    var3 = 0x0154;\n                    var4 = var2;\n                    func_03F1(var4);\n                    // Error: Could not resolve jump destination!\n                }\n            } else if (var0 == 0xf851a440) {\n                // Dispatch table entry for admin()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00ad;\n                var1 = func_0235();\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1 & (0x01 << 0xa0) - 0x01;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else { goto label_005D; }\n        } else if (msg.data.length) {\n        label_005D:\n            var var0 = 0x005b;\n        \n        label_00FE:\n            var var1 = 0x0106;\n            func_0292();\n            var1 = 0x0116;\n            var var2 = 0x0111;\n            var2 = func_0331();\n            var temp0 = msg.data.length;\n            memory[0x00:0x00 + temp0] = msg.data[0x00:0x00 + temp0];\n            var temp1;\n            temp1, memory[0x00:0x00] = address(var2).delegatecall.gas(msg.gas)(memory[0x00:0x00 + msg.data.length]);\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n        \n            if (!temp1) { revert(memory[0x00:0x00 + returndata.length]); }\n            else { return memory[0x00:0x00 + returndata.length]; }\n        } else {\n            var0 = 0x005b;\n            goto label_00FE;\n        }\n    }\n    \n    function func_0080(var arg0) {\n        var var0 = 0x0120;\n        var0 = func_035F();\n    \n        if (msg.sender != var0 & (0x01 << 0xa0) - 0x01) {\n            var0 = 0x0154;\n            var var1 = 0x0106;\n            func_0292();\n            var1 = 0x0116;\n            var var2 = 0x0111;\n            var2 = func_0331();\n            var temp0 = msg.data.length;\n            memory[0x00:0x00 + temp0] = msg.data[0x00:0x00 + temp0];\n            var temp1;\n            temp1, memory[0x00:0x00] = address(var2).delegatecall.gas(msg.gas)(memory[0x00:0x00 + msg.data.length]);\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n        \n            if (!temp1) { revert(memory[0x00:0x00 + returndata.length]); }\n            else { return memory[0x00:0x00 + returndata.length]; }\n        } else {\n            var0 = 0x0154;\n            var1 = arg0;\n            var temp3 = memory[0x40:0x60];\n            var2 = temp3;\n            memory[0x40:0x60] = var2 + 0x20;\n            memory[var2:var2 + 0x20] = 0x00;\n            var var3 = 0x00;\n            func_0392(var1, var2, var3);\n            return;\n        }\n    }\n    \n    function func_0235() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x023f;\n        var1 = func_035F();\n    \n        if (msg.sender != var1 & (0x01 << 0xa0) - 0x01) {\n            var1 = 0x0208;\n            var var2 = 0x0106;\n            func_0292();\n            var2 = 0x0116;\n            var var3 = 0x0111;\n            var3 = func_0331();\n            var temp0 = msg.data.length;\n            memory[0x00:0x00 + temp0] = msg.data[0x00:0x00 + temp0];\n            var temp1;\n            temp1, memory[0x00:0x00] = address(var3).delegatecall.gas(msg.gas)(memory[0x00:0x00 + msg.data.length]);\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n        \n            if (!temp1) { revert(memory[0x00:0x00 + returndata.length]); }\n            else { return memory[0x00:0x00 + returndata.length]; }\n        } else {\n            var1 = 0x01fb;\n            return func_035F();\n        }\n    }\n    \n    function func_0292() {\n        var var0 = 0x029a;\n        var0 = func_035F();\n    \n        if (msg.sender != var0 & (0x01 << 0xa0) - 0x01) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x42;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x5472616e73706172656e745570677261646561626c6550726f78793a2061646d;\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267;\n        memory[temp0 + 0x84:temp0 + 0x84 + 0x20] = 0x195d << 0xf2;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + (temp0 + 0xa4) - temp1]);\n    }\n    \n    function func_0331() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01fb;\n        return func_0519();\n    }\n    \n    function func_035F() returns (var r0) { return storage[0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103] & (0x01 << 0xa0) - 0x01; }\n    \n    function func_0392(var arg0, var arg1, var arg2) {\n        var var0 = 0x039b;\n        var var1 = arg0;\n        func_0541(var1);\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b, stack[-3] & (0x01 << 0xa0) - 0x01]);\n        var0 = memory[arg1:arg1 + 0x20] > 0x00;\n    \n        if (var0) {\n            if (!var0) {\n            label_01C3:\n                return;\n            } else {\n            label_03E2:\n                var0 = 0x03eb;\n                var1 = arg0;\n                var var2 = arg1;\n                var var3 = 0x60;\n                var var4 = 0x0285;\n                var var5 = var1;\n                var var6 = var2;\n                var temp0 = memory[0x40:0x60];\n                var var7 = temp0;\n                memory[0x40:0x60] = var7 + 0x60;\n                memory[var7:var7 + 0x20] = 0x27;\n                memory[var7 + 0x20:var7 + 0x20 + 0x27] = code[0x07e4:0x080b];\n                var4 = func_0445(var5, var6, var7);\n                var0 = var4;\n                // Error: Could not resolve jump destination!\n            }\n        } else if (!arg2) { goto label_01C3; }\n        else { goto label_03E2; }\n    }\n    \n    function func_03F1(var arg0) {\n        var var0 = 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f;\n        var var1 = 0x041a;\n        var1 = func_035F();\n        var temp0 = memory[0x40:0x60];\n        var temp1 = (0x01 << 0xa0) - 0x01;\n        memory[temp0:temp0 + 0x20] = temp1 & var1;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg0 & temp1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp0 + 0x40) - temp2], [stack[-2]]);\n        var0 = 0x0154;\n        var1 = arg0;\n        func_05E9(var1);\n    }\n    \n    function func_0445(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x60;\n    \n        if (address(arg0).code.length) {\n            var var1 = 0x00;\n            var var2 = var1;\n            var var3 = arg0 & (0x01 << 0xa0) - 0x01;\n            var var4 = 0x04bf;\n            var var5 = arg1;\n            var var6 = memory[0x40:0x60];\n            var4 = func_0794(var5, var6);\n            var temp0 = memory[0x40:0x60];\n            var temp1;\n            temp1, memory[temp0:temp0 + 0x00] = address(var3).delegatecall.gas(msg.gas)(memory[temp0:temp0 + var4 - temp0]);\n            var4 = returndata.length;\n            var5 = var4;\n        \n            if (var5 == 0x00) {\n                var2 = 0x60;\n                var temp2 = var3;\n                var1 = temp2;\n                var3 = 0x050f;\n                var4 = var1;\n                var5 = var2;\n                var6 = arg2;\n                var3 = func_0675(var4, var5, var6);\n            \n            label_050F:\n                return var3;\n            } else {\n                var temp3 = memory[0x40:0x60];\n                var4 = temp3;\n                memory[0x40:0x60] = var4 + (returndata.length + 0x3f & ~0x1f);\n                memory[var4:var4 + 0x20] = returndata.length;\n                var temp4 = returndata.length;\n                memory[var4 + 0x20:var4 + 0x20 + temp4] = returndata[0x00:0x00 + temp4];\n                var temp5 = var4;\n                var2 = temp5;\n                var temp6 = var3;\n                var1 = temp6;\n                var3 = 0x050f;\n                var4 = var1;\n                var5 = var2;\n                var6 = arg2;\n                var3 = func_0675(var4, var5, var6);\n                goto label_050F;\n            }\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x26;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x1b9d1c9858dd << 0xd2;\n            var1 = temp7 + 0x84;\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var1 - temp8]);\n        }\n    }\n    \n    function func_0519() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n        return storage[var1] & (0x01 << 0xa0) - 0x01;\n    }\n    \n    function func_0541(var arg0) {\n        if (address(arg0).code.length) {\n            storage[0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc] = (arg0 & (0x01 << 0xa0) - 0x01) | (storage[0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc] & ~((0x01 << 0xa0) - 0x01));\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2d;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x455243313936373a206e657720696d706c656d656e746174696f6e206973206e;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x1bdd08184818dbdb9d1c9858dd << 0x9a;\n            var var0 = temp0 + 0x84;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_05E9(var arg0) {\n        if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var var0 = arg0;\n            var var1 = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n            var temp0 = var1;\n            storage[temp0] = (var0 & (0x01 << 0xa0) - 0x01) | (storage[temp0] & ~((0x01 << 0xa0) - 0x01));\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x26;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x455243313936373a206e65772061646d696e20697320746865207a65726f2061;\n            memory[temp1 + 0x64:temp1 + 0x64 + 0x20] = 0x646472657373 << 0xd0;\n            var0 = temp1 + 0x84;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + var0 - temp2]);\n        }\n    }\n    \n    function func_0675(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x60;\n    \n        if (arg0) { return arg1; }\n    \n        if (!memory[arg1:arg1 + 0x20]) {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var var1 = 0x0328;\n            var var2 = arg2;\n            var var3 = temp0 + 0x04;\n            var1 = func_07B0(var2, var3);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var1 - temp1]);\n        } else {\n            var temp2 = arg1;\n            var1 = memory[temp2:temp2 + 0x20];\n            revert(memory[temp2 + 0x20:temp2 + 0x20 + var1]);\n        }\n    }\n    \n    function func_06AE(var arg0) returns (var r0) {\n        var temp0 = msg.data[arg0:arg0 + 0x20];\n        var var0 = temp0;\n    \n        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_06CA(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0285;\n        var var2 = arg1;\n        return func_06AE(var2);\n    }\n    \n    function func_06E5(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var3 = 0x0703;\n        var var4 = arg1;\n        var3 = func_06AE(var4);\n        var0 = var3;\n        var3 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var4 = 0xffffffffffffffff;\n    \n        if (var3 > var4) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1 + var3;\n        var3 = temp0;\n    \n        if (var3 + 0x1f i>= arg0) { revert(memory[0x00:0x00]); }\n    \n        var var5 = msg.data[var3:var3 + 0x20];\n    \n        if (var5 > var4) { revert(memory[0x00:0x00]); }\n    \n        if (var3 + var5 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        arg1 = var5;\n        arg0 = var3 + 0x20;\n        r0 = var0;\n        return r0, arg0, arg1;\n    }\n    \n    function func_0768(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n    \n        if (var0 >= arg0) {\n        label_0783:\n        \n            if (var0 <= arg0) { return; }\n        \n            memory[arg0 + arg1:arg0 + arg1 + 0x20] = 0x00;\n            return;\n        } else {\n        label_0774:\n            var temp0 = var0;\n            memory[temp0 + arg1:temp0 + arg1 + 0x20] = memory[temp0 + arg2:temp0 + arg2 + 0x20];\n            var0 = temp0 + 0x20;\n        \n            if (var0 >= arg0) { goto label_0783; }\n            else { goto label_0774; }\n        }\n    }\n    \n    function func_0794(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = memory[temp0:temp0 + 0x20];\n        var var2 = 0x07a6;\n        var var3 = var1;\n        var var4 = arg1;\n        var var5 = temp0 + 0x20;\n        func_0768(var3, var4, var5);\n        return var1 + arg1;\n    }\n    \n    function func_07B0(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        var var0 = 0x00;\n        var temp1 = arg0;\n        var temp2 = memory[temp1:temp1 + 0x20];\n        var var1 = temp2;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var1;\n        var var2 = 0x07cf;\n        var var3 = var1;\n        var var4 = temp0 + 0x40;\n        var var5 = temp1 + 0x20;\n        func_0768(var3, var4, var5);\n        return (var1 + 0x1f & ~0x1f) + arg1 + 0x40;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (var0 == 0x3659cfe6) {\n                // Dispatch table entry for upgradeTo(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x005b;\n                var2 = 0x0080;\n                var var3 = msg.data.length;\n                var var4 = 0x04;\n                var2 = func_06CA(var3, var4);\n                func_0080(var2);\n                stop();\n            } else if (var0 == 0x4f1ef286) {\n                // Dispatch table entry for upgradeToAndCall(address,bytes)\n                var1 = 0x005b;\n                var2 = 0x0093;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4 = func_06E5(var3, var4);\n                var var5 = 0x0167;\n                var5 = func_035F();\n            \n                if (msg.sender != var5 & (0x01 << 0xa0) - 0x01) {\n                    var5 = 0x01c3;\n                    goto label_00FE;\n                } else {\n                    var5 = 0x01c3;\n                    var var6 = var2;\n                    var temp3 = var4;\n                    var temp4 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    var var7 = temp4;\n                    memory[var7:var7 + 0x20] = temp3;\n                    var temp5 = var7 + 0x20;\n                    memory[temp5:temp5 + temp3] = msg.data[var3:var3 + temp3];\n                    memory[temp5 + temp3:temp5 + temp3 + 0x20] = 0x00;\n                    var var8 = 0x01;\n                    func_0392(var6, var7, var8);\n                    // Error: Could not resolve jump destination!\n                }\n            } else if (var0 == 0x5c60da1b) {\n                // Dispatch table entry for implementation()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00ad;\n                var2 = 0x00;\n                var3 = 0x01da;\n                var3 = func_035F();\n            \n                if (msg.sender != var3 & (0x01 << 0xa0) - 0x01) {\n                    var3 = 0x0208;\n                    goto label_00FE;\n                } else {\n                    var3 = 0x01fb;\n                    var3 = func_0331();\n                    var1 = var3;\n                    // Error: Could not resolve jump destination!\n                }\n            } else if (var0 == 0x8f283970) {\n                // Dispatch table entry for changeAdmin(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x005b;\n                var2 = 0x00e4;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_06CA(var3, var4);\n                var3 = 0x0213;\n                var3 = func_035F();\n            \n                if (msg.sender != var3 & (0x01 << 0xa0) - 0x01) {\n                    var3 = 0x0154;\n                    goto label_00FE;\n                } else {\n                    var3 = 0x0154;\n                    var4 = var2;\n                    func_03F1(var4);\n                    // Error: Could not resolve jump destination!\n                }\n            } else if (var0 == 0xf851a440) {\n                // Dispatch table entry for admin()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00ad;\n                var1 = func_0235();\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1 & (0x01 << 0xa0) - 0x01;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else { goto label_005D; }\n        } else if (msg.data.length) {\n        label_005D:\n            var var0 = 0x005b;\n        \n        label_00FE:\n            var var1 = 0x0106;\n            func_0292();\n            var1 = 0x0116;\n            var var2 = 0x0111;\n            var2 = func_0331();\n            var temp0 = msg.data.length;\n            memory[0x00:0x00 + temp0] = msg.data[0x00:0x00 + temp0];\n            var temp1;\n            temp1, memory[0x00:0x00] = address(var2).delegatecall.gas(msg.gas)(memory[0x00:0x00 + msg.data.length]);\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n        \n            if (!temp1) { revert(memory[0x00:0x00 + returndata.length]); }\n            else { return memory[0x00:0x00 + returndata.length]; }\n        } else {\n            var0 = 0x005b;\n            goto label_00FE;\n        }\n    }\n    \n    function func_0080(var arg0) {\n        var var0 = 0x0120;\n        var0 = func_035F();\n    \n        if (msg.sender != var0 & (0x01 << 0xa0) - 0x01) {\n            var0 = 0x0154;\n            var var1 = 0x0106;\n            func_0292();\n            var1 = 0x0116;\n            var var2 = 0x0111;\n            var2 = func_0331();\n            var temp0 = msg.data.length;\n            memory[0x00:0x00 + temp0] = msg.data[0x00:0x00 + temp0];\n            var temp1;\n            temp1, memory[0x00:0x00] = address(var2).delegatecall.gas(msg.gas)(memory[0x00:0x00 + msg.data.length]);\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n        \n            if (!temp1) { revert(memory[0x00:0x00 + returndata.length]); }\n            else { return memory[0x00:0x00 + returndata.length]; }\n        } else {\n            var0 = 0x0154;\n            var1 = arg0;\n            var temp3 = memory[0x40:0x60];\n            var2 = temp3;\n            memory[0x40:0x60] = var2 + 0x20;\n            memory[var2:var2 + 0x20] = 0x00;\n            var var3 = 0x00;\n            func_0392(var1, var2, var3);\n            return;\n        }\n    }\n    \n    function func_0235() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x023f;\n        var1 = func_035F();\n    \n        if (msg.sender != var1 & (0x01 << 0xa0) - 0x01) {\n            var1 = 0x0208;\n            var var2 = 0x0106;\n            func_0292();\n            var2 = 0x0116;\n            var var3 = 0x0111;\n            var3 = func_0331();\n            var temp0 = msg.data.length;\n            memory[0x00:0x00 + temp0] = msg.data[0x00:0x00 + temp0];\n            var temp1;\n            temp1, memory[0x00:0x00] = address(var3).delegatecall.gas(msg.gas)(memory[0x00:0x00 + msg.data.length]);\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n        \n            if (!temp1) { revert(memory[0x00:0x00 + returndata.length]); }\n            else { return memory[0x00:0x00 + returndata.length]; }\n        } else {\n            var1 = 0x01fb;\n            return func_035F();\n        }\n    }\n    \n    function func_0292() {\n        var var0 = 0x029a;\n        var0 = func_035F();\n    \n        if (msg.sender != var0 & (0x01 << 0xa0) - 0x01) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x42;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x5472616e73706172656e745570677261646561626c6550726f78793a2061646d;\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267;\n        memory[temp0 + 0x84:temp0 + 0x84 + 0x20] = 0x195d << 0xf2;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + (temp0 + 0xa4) - temp1]);\n    }\n    \n    function func_0331() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01fb;\n        return func_0519();\n    }\n    \n    function func_035F() returns (var r0) { return storage[0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103] & (0x01 << 0xa0) - 0x01; }\n    \n    function func_0392(var arg0, var arg1, var arg2) {\n        var var0 = 0x039b;\n        var var1 = arg0;\n        func_0541(var1);\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b, stack[-3] & (0x01 << 0xa0) - 0x01]);\n        var0 = memory[arg1:arg1 + 0x20] > 0x00;\n    \n        if (var0) {\n            if (!var0) {\n            label_01C3:\n                return;\n            } else {\n            label_03E2:\n                var0 = 0x03eb;\n                var1 = arg0;\n                var var2 = arg1;\n                var var3 = 0x60;\n                var var4 = 0x0285;\n                var var5 = var1;\n                var var6 = var2;\n                var temp0 = memory[0x40:0x60];\n                var var7 = temp0;\n                memory[0x40:0x60] = var7 + 0x60;\n                memory[var7:var7 + 0x20] = 0x27;\n                memory[var7 + 0x20:var7 + 0x20 + 0x27] = code[0x07e4:0x080b];\n                var4 = func_0445(var5, var6, var7);\n                var0 = var4;\n                // Error: Could not resolve jump destination!\n            }\n        } else if (!arg2) { goto label_01C3; }\n        else { goto label_03E2; }\n    }\n    \n    function func_03F1(var arg0) {\n        var var0 = 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f;\n        var var1 = 0x041a;\n        var1 = func_035F();\n        var temp0 = memory[0x40:0x60];\n        var temp1 = (0x01 << 0xa0) - 0x01;\n        memory[temp0:temp0 + 0x20] = temp1 & var1;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg0 & temp1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp0 + 0x40) - temp2], [stack[-2]]);\n        var0 = 0x0154;\n        var1 = arg0;\n        func_05E9(var1);\n    }\n    \n    function func_0445(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x60;\n    \n        if (address(arg0).code.length) {\n            var var1 = 0x00;\n            var var2 = var1;\n            var var3 = arg0 & (0x01 << 0xa0) - 0x01;\n            var var4 = 0x04bf;\n            var var5 = arg1;\n            var var6 = memory[0x40:0x60];\n            var4 = func_0794(var5, var6);\n            var temp0 = memory[0x40:0x60];\n            var temp1;\n            temp1, memory[temp0:temp0 + 0x00] = address(var3).delegatecall.gas(msg.gas)(memory[temp0:temp0 + var4 - temp0]);\n            var4 = returndata.length;\n            var5 = var4;\n        \n            if (var5 == 0x00) {\n                var2 = 0x60;\n                var temp2 = var3;\n                var1 = temp2;\n                var3 = 0x050f;\n                var4 = var1;\n                var5 = var2;\n                var6 = arg2;\n                var3 = func_0675(var4, var5, var6);\n            \n            label_050F:\n                return var3;\n            } else {\n                var temp3 = memory[0x40:0x60];\n                var4 = temp3;\n                memory[0x40:0x60] = var4 + (returndata.length + 0x3f & ~0x1f);\n                memory[var4:var4 + 0x20] = returndata.length;\n                var temp4 = returndata.length;\n                memory[var4 + 0x20:var4 + 0x20 + temp4] = returndata[0x00:0x00 + temp4];\n                var temp5 = var4;\n                var2 = temp5;\n                var temp6 = var3;\n                var1 = temp6;\n                var3 = 0x050f;\n                var4 = var1;\n                var5 = var2;\n                var6 = arg2;\n                var3 = func_0675(var4, var5, var6);\n                goto label_050F;\n            }\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x26;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x1b9d1c9858dd << 0xd2;\n            var1 = temp7 + 0x84;\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var1 - temp8]);\n        }\n    }\n    \n    function func_0519() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n        return storage[var1] & (0x01 << 0xa0) - 0x01;\n    }\n    \n    function func_0541(var arg0) {\n        if (address(arg0).code.length) {\n            storage[0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc] = (arg0 & (0x01 << 0xa0) - 0x01) | (storage[0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc] & ~((0x01 << 0xa0) - 0x01));\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2d;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x455243313936373a206e657720696d706c656d656e746174696f6e206973206e;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x1bdd08184818dbdb9d1c9858dd << 0x9a;\n            var var0 = temp0 + 0x84;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_05E9(var arg0) {\n        if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var var0 = arg0;\n            var var1 = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n            var temp0 = var1;\n            storage[temp0] = (var0 & (0x01 << 0xa0) - 0x01) | (storage[temp0] & ~((0x01 << 0xa0) - 0x01));\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x26;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x455243313936373a206e65772061646d696e20697320746865207a65726f2061;\n            memory[temp1 + 0x64:temp1 + 0x64 + 0x20] = 0x646472657373 << 0xd0;\n            var0 = temp1 + 0x84;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + var0 - temp2]);\n        }\n    }\n    \n    function func_0675(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x60;\n    \n        if (arg0) { return arg1; }\n    \n        if (!memory[arg1:arg1 + 0x20]) {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var var1 = 0x0328;\n            var var2 = arg2;\n            var var3 = temp0 + 0x04;\n            var1 = func_07B0(var2, var3);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var1 - temp1]);\n        } else {\n            var temp2 = arg1;\n            var1 = memory[temp2:temp2 + 0x20];\n            revert(memory[temp2 + 0x20:temp2 + 0x20 + var1]);\n        }\n    }\n    \n    function func_06AE(var arg0) returns (var r0) {\n        var temp0 = msg.data[arg0:arg0 + 0x20];\n        var var0 = temp0;\n    \n        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_06CA(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0285;\n        var var2 = arg1;\n        return func_06AE(var2);\n    }\n    \n    function func_06E5(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var3 = 0x0703;\n        var var4 = arg1;\n        var3 = func_06AE(var4);\n        var0 = var3;\n        var3 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var4 = 0xffffffffffffffff;\n    \n        if (var3 > var4) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1 + var3;\n        var3 = temp0;\n    \n        if (var3 + 0x1f i>= arg0) { revert(memory[0x00:0x00]); }\n    \n        var var5 = msg.data[var3:var3 + 0x20];\n    \n        if (var5 > var4) { revert(memory[0x00:0x00]); }\n    \n        if (var3 + var5 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        arg1 = var5;\n        arg0 = var3 + 0x20;\n        r0 = var0;\n        return r0, arg0, arg1;\n    }\n    \n    function func_0768(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n    \n        if (var0 >= arg0) {\n        label_0783:\n        \n            if (var0 <= arg0) { return; }\n        \n            memory[arg0 + arg1:arg0 + arg1 + 0x20] = 0x00;\n            return;\n        } else {\n        label_0774:\n            var temp0 = var0;\n            memory[temp0 + arg1:temp0 + arg1 + 0x20] = memory[temp0 + arg2:temp0 + arg2 + 0x20];\n            var0 = temp0 + 0x20;\n        \n            if (var0 >= arg0) { goto label_0783; }\n            else { goto label_0774; }\n        }\n    }\n    \n    function func_0794(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = memory[temp0:temp0 + 0x20];\n        var var2 = 0x07a6;\n        var var3 = var1;\n        var var4 = arg1;\n        var var5 = temp0 + 0x20;\n        func_0768(var3, var4, var5);\n        return var1 + arg1;\n    }\n    \n    function func_07B0(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        var var0 = 0x00;\n        var temp1 = arg0;\n        var temp2 = memory[temp1:temp1 + 0x20];\n        var var1 = temp2;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var1;\n        var var2 = 0x07cf;\n        var var3 = var1;\n        var var4 = temp0 + 0x40;\n        var var5 = temp1 + 0x20;\n        func_0768(var3, var4, var5);\n        return (var1 + 0x1f & ~0x1f) + arg1 + 0x40;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 21.09394359588623,
	"usage": {
		"completion_tokens": 558,
		"prompt_tokens": 6225,
		"total_tokens": 6783
	}
}