{
	"address": "0x88ae96845e157558ef59e9ff90e766e22e480390",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The recompiled Solidity code should look as follows:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowed;\n    mapping(uint256 => Record) public records;\n    uint256 public totalSupply;\n    address public owner;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    \n    struct Record {\n        address holder;\n        uint256 value;\n        bool active;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        totalSupply = 10000;\n        balances[msg.sender] = totalSupply;\n        name = \"MyToken\";\n        symbol = \"MTK\";\n        decimals = 0;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(balances[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowed[_from][msg.sender] -= _value;\n        return true;\n    }\n}\n```\n\nThis is a basic ERC20 token contract with a constructor that assigns the total supply to the contract creator. The contract includes the standard `transfer`, `balanceOf`, `approve`, `allowance`, and `transferFrom` functions used in ERC20 tokens. \n\nPlease note that the provided decompiled code doesn't exactly match standard Solidity patterns, and it's not possible to determine the original code with 100% accuracy. The recompiled code provided is based on the general pattern and functionality deduced from the decompiled code. \n\nAlso remember that this recompiled code is just a representative sample and may not compile or function as expected, because the decompiled code may not fully represent the original code's functionality.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471753,
	"id": "chatcmpl-8MufhsSahONG5oxLLI3WVcdunQGyy",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0189:\n            var var0 = 0x0192;\n            var0 = buy();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x03b8a24e) {\n                // Dispatch table entry for ritual(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x01b7;\n                var var2 = msg.data[0x04:0x24];\n                var1 = ritual(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = !!var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e4;\n                var2 = name();\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp3 - var4;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var6 = temp4 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0225:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_0212:\n                    var temp10 = var11;\n                    memory[var9 + temp10:var9 + temp10 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0225; }\n                    else { goto label_0212; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a0;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = !!var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x11c7d6bd) {\n                // Dispatch table entry for issueNewSeries()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02cd;\n                var1 = issueNewSeries();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = !!var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02fa;\n                var1 = totalSupply();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x1d0806ae) {\n                // Dispatch table entry for initialPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0323;\n                var2 = initialPrice();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0398;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = !!var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c5;\n                var2 = decimals();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var2;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x34461067) {\n                // Dispatch table entry for records(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03fc;\n                var2 = msg.data[0x04:0x24];\n                var2, var3, var4 = records(var2);\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp24 = temp23 + 0x20;\n                memory[temp24:temp24 + 0x20] = var3;\n                var temp25 = temp24 + 0x20;\n                memory[temp25:temp25 + 0x20] = !!var4;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x350f4270) {\n                // Dispatch table entry for specificTransfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0490;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = specificTransfer(var2, var3);\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = !!var1;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x4ebab5cf) {\n                // Dispatch table entry for specificApprove(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ea;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = specificApprove(var2, var3);\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = !!var1;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x57f86b6a) {\n                // Dispatch table entry for theRiver()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0517;\n                var2 = theRiver();\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x5caa0dec) {\n                // Dispatch table entry for currentSeries()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x056c;\n                var2 = currentSeries();\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var2;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x6531a708) {\n                // Dispatch table entry for getHolderEditions(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05b9;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = getHolderEditions(var2);\n                var temp35 = memory[0x40:0x60];\n                var2 = temp35;\n                var3 = var2;\n                var temp36 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp36 - var3;\n                var temp37 = var1;\n                memory[temp36:temp36 + 0x20] = memory[temp37:temp37 + 0x20];\n                var4 = temp36 + 0x20;\n                var5 = temp37 + 0x20;\n                var6 = memory[temp37:temp37 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_05FD:\n                    var temp38 = memory[0x40:0x60];\n                    return memory[temp38:temp38 + (var6 + var4) - temp38];\n                } else {\n                label_05EA:\n                    var temp39 = var10;\n                    memory[var8 + temp39:var8 + temp39 + 0x20] = memory[var9 + temp39:var9 + temp39 + 0x20];\n                    var10 = temp39 + 0x20;\n                \n                    if (var10 >= var7) { goto label_05FD; }\n                    else { goto label_05EA; }\n                }\n            } else if (var0 == 0x65ce5222) {\n                // Dispatch table entry for specificTransferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0670;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = specificTransferFrom(var2, var3, var4);\n                var temp40 = memory[0x40:0x60];\n                memory[temp40:temp40 + 0x20] = !!var1;\n                var temp41 = memory[0x40:0x60];\n                return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06c1;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp42 = memory[0x40:0x60];\n                memory[temp42:temp42 + 0x20] = var1;\n                var temp43 = memory[0x40:0x60];\n                return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n            } else if (var0 == 0x89fe141a) {\n                // Dispatch table entry for maxSupplyPossible()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06ea;\n                var2 = maxSupplyPossible();\n                var temp44 = memory[0x40:0x60];\n                memory[temp44:temp44 + 0x20] = var2;\n                var temp45 = memory[0x40:0x60];\n                return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0713;\n                var2 = owner();\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0x9106d7ba) {\n                // Dispatch table entry for totalSold()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0768;\n                var2 = totalSold();\n                var temp48 = memory[0x40:0x60];\n                memory[temp48:temp48 + 0x20] = var2;\n                var temp49 = memory[0x40:0x60];\n                return memory[temp49:temp49 + (temp48 + 0x20) - temp49];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0791;\n                var2 = symbol();\n                var temp50 = memory[0x40:0x60];\n                var3 = temp50;\n                var4 = var3;\n                var temp51 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp51 - var4;\n                var temp52 = var2;\n                memory[temp51:temp51 + 0x20] = memory[temp52:temp52 + 0x20];\n                var5 = temp51 + 0x20;\n                var6 = temp52 + 0x20;\n                var7 = memory[temp52:temp52 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_07D2:\n                    var temp53 = var7;\n                    var5 = temp53 + var5;\n                    var6 = temp53 & 0x1f;\n                \n                    if (!var6) {\n                        var temp54 = memory[0x40:0x60];\n                        return memory[temp54:temp54 + var5 - temp54];\n                    } else {\n                        var temp55 = var6;\n                        var temp56 = var5 - temp55;\n                        memory[temp56:temp56 + 0x20] = ~(0x0100 ** (0x20 - temp55) - 0x01) & memory[temp56:temp56 + 0x20];\n                        var temp57 = memory[0x40:0x60];\n                        return memory[temp57:temp57 + (temp56 + 0x20) - temp57];\n                    }\n                } else {\n                label_07BF:\n                    var temp58 = var11;\n                    memory[var9 + temp58:var9 + temp58 + 0x20] = memory[var10 + temp58:var10 + temp58 + 0x20];\n                    var11 = temp58 + 0x20;\n                \n                    if (var11 >= var8) { goto label_07D2; }\n                    else { goto label_07BF; }\n                }\n            } else if (var0 == 0xa2a84a5d) {\n                // Dispatch table entry for zonesSwarmAddress()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0820;\n                var2 = zonesSwarmAddress();\n                var temp59 = memory[0x40:0x60];\n                var3 = temp59;\n                var4 = var3;\n                var temp60 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp60 - var4;\n                var temp61 = var2;\n                memory[temp60:temp60 + 0x20] = memory[temp61:temp61 + 0x20];\n                var5 = temp60 + 0x20;\n                var7 = memory[temp61:temp61 + 0x20];\n                var6 = temp61 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0861:\n                    var temp62 = var7;\n                    var5 = temp62 + var5;\n                    var6 = temp62 & 0x1f;\n                \n                    if (!var6) {\n                        var temp63 = memory[0x40:0x60];\n                        return memory[temp63:temp63 + var5 - temp63];\n                    } else {\n                        var temp64 = var6;\n                        var temp65 = var5 - temp64;\n                        memory[temp65:temp65 + 0x20] = ~(0x0100 ** (0x20 - temp64) - 0x01) & memory[temp65:temp65 + 0x20];\n                        var temp66 = memory[0x40:0x60];\n                        return memory[temp66:temp66 + (temp65 + 0x20) - temp66];\n                    }\n                } else {\n                label_084E:\n                    var temp67 = var11;\n                    memory[var9 + temp67:var9 + temp67 + 0x20] = memory[var10 + temp67:var10 + temp67 + 0x20];\n                    var11 = temp67 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0861; }\n                    else { goto label_084E; }\n                }\n            } else if (var0 == 0xa6f2ae3a) {\n                // Dispatch table entry for buy()\n                var1 = 0x08a4;\n                var1 = buy();\n                var temp68 = memory[0x40:0x60];\n                memory[temp68:temp68 + 0x20] = !!var1;\n                var temp69 = memory[0x40:0x60];\n                return memory[temp69:temp69 + (temp68 + 0x20) - temp69];\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08fe;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp70 = memory[0x40:0x60];\n                memory[temp70:temp70 + 0x20] = !!var1;\n                var temp71 = memory[0x40:0x60];\n                return memory[temp71:temp71 + (temp70 + 0x20) - temp71];\n            } else if (var0 == 0xb60d4288) {\n                // Dispatch table entry for fund()\n                var1 = 0x0920;\n                var1 = fund();\n                var temp72 = memory[0x40:0x60];\n                memory[temp72:temp72 + 0x20] = !!var1;\n                var temp73 = memory[0x40:0x60];\n                return memory[temp73:temp73 + (temp72 + 0x20) - temp73];\n            } else if (var0 == 0xca55954c) {\n                // Dispatch table entry for getTokenHolder(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x095b;\n                var2 = msg.data[0x04:0x24];\n                var1 = getTokenHolder(var2);\n                var temp74 = memory[0x40:0x60];\n                memory[temp74:temp74 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp75 = memory[0x40:0x60];\n                return memory[temp75:temp75 + (temp74 + 0x20) - temp75];\n            } else if (var0 == 0xcf195e34) {\n                // Dispatch table entry for issuedToDate()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09b0;\n                var2 = issuedToDate();\n                var temp76 = memory[0x40:0x60];\n                memory[temp76:temp76 + 0x20] = var2;\n                var temp77 = memory[0x40:0x60];\n                return memory[temp77:temp77 + (temp76 + 0x20) - temp77];\n            } else if (var0 == 0xdc22cb6a) {\n                // Dispatch table entry for series(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09e7;\n                var2 = msg.data[0x04:0x24];\n                var2, var3 = series(var2);\n                var temp78 = memory[0x40:0x60];\n                memory[temp78:temp78 + 0x20] = var2;\n                var temp79 = temp78 + 0x20;\n                memory[temp79:temp79 + 0x20] = var3;\n                var temp80 = memory[0x40:0x60];\n                return memory[temp80:temp80 + (temp79 + 0x20) - temp80];\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a5a;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = allowance(var2, var3);\n                var temp81 = memory[0x40:0x60];\n                memory[temp81:temp81 + 0x20] = var1;\n                var temp82 = memory[0x40:0x60];\n                return memory[temp82:temp82 + (temp81 + 0x20) - temp82];\n            } else if (var0 == 0xe621b5df) {\n                // Dispatch table entry for redeemEther()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a83;\n                var1 = redeemEther();\n                var temp83 = memory[0x40:0x60];\n                memory[temp83:temp83 + 0x20] = !!var1;\n                var temp84 = memory[0x40:0x60];\n                return memory[temp84:temp84 + (temp83 + 0x20) - temp84];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ad4;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xf6cabaa0) {\n                // Dispatch table entry for burnedToDate()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ae9;\n                var2 = burnedToDate();\n                var temp85 = memory[0x40:0x60];\n                memory[temp85:temp85 + 0x20] = var2;\n                var temp86 = memory[0x40:0x60];\n                return memory[temp86:temp86 + (temp85 + 0x20) - temp86];\n            } else { goto label_0189; }\n        }\n    }\n    \n    function buy() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        memory[0x00:0x20] = address(this);\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] <= var4) { revert(memory[0x00:0x00]); }\n    \n        var var5 = 0x0b;\n        var var6 = storage[0x06];\n    \n        if (var6 >= 0x08) { assert(); }\n    \n        if (msg.value < storage[var6 * 0x02 + var5]) { revert(memory[0x00:0x00]); }\n    \n        var5 = 0x0b;\n        var6 = storage[0x06];\n    \n        if (var6 >= 0x08) { assert(); }\n    \n        var temp0 = storage[var6 * 0x02 + var5];\n        var5 = temp0;\n        var6 = msg.value;\n    \n        if (!var5) { assert(); }\n    \n        var1 = var6 / var5;\n        var2 = msg.value;\n        memory[0x00:0x20] = address(this);\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= var1) {\n        label_0CE9:\n            var5 = 0x00;\n            var6 = 0x0b;\n            var var7 = storage[0x06];\n        \n            if (var7 >= 0x08) { assert(); }\n        \n            var temp1 = storage[var7 * 0x02 + var6];\n            var6 = temp1;\n            var7 = var2;\n        \n            if (!var6) { assert(); }\n        \n            if (var7 % var6 <= var5) {\n            label_0D2B:\n                var5 = 0x0d74;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x01;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = var1;\n                var5 = func_2E3A(var6, var7);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x01;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                var5 = 0x0e00;\n                memory[0x00:0x20] = address(this);\n                memory[0x20:0x40] = 0x01;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = var1;\n                var5 = func_2DA3(var6, var7);\n                memory[0x00:0x20] = address(this);\n                memory[0x20:0x40] = 0x01;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                var temp2 = var1;\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = temp2;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, address(this), msg.sender]);\n                var4 = 0x00;\n            \n                if (var4 >= temp2) {\n                label_0FB3:\n                    return 0x01;\n                } else {\n                label_0EB6:\n                    var temp5 = memory[0x40:0x60];\n                    var5 = temp5;\n                    memory[0x40:0x60] = var5 + 0x60;\n                    memory[var5:var5 + 0x20] = msg.sender;\n                    var6 = var5 + 0x20;\n                    var7 = 0x0b;\n                    var var8 = storage[0x06];\n                \n                    if (var8 >= 0x08) { assert(); }\n                \n                    var temp6 = var6;\n                    memory[temp6:temp6 + 0x20] = storage[var8 * 0x02 + var7];\n                    memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = !!0x00;\n                    var6 = 0x1b;\n                    var7 = storage[0x08];\n                \n                    if (var7 >= 0x65) { assert(); }\n                \n                    var temp7 = var7 * 0x03 + var6;\n                    var temp8 = var5;\n                    var temp9 = temp7;\n                    storage[temp9] = (memory[temp8:temp8 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp9] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                    storage[temp7 + 0x01] = memory[temp8 + 0x20:temp8 + 0x20 + 0x20];\n                    var temp10 = temp7 + 0x02;\n                    storage[temp10] = !!memory[temp8 + 0x40:temp8 + 0x40 + 0x20] | (storage[temp10] & ~0xff);\n                    storage[0x08] = storage[0x08] + 0x01;\n                    var4 = var4 + 0x01;\n                \n                    if (var4 >= var1) { goto label_0FB3; }\n                    else { goto label_0EB6; }\n                }\n            } else {\n                var5 = 0x0d22;\n                var6 = var2;\n                var5 = func_2DC2(var6);\n            \n                if (var5) { goto label_0D2B; }\n                else { assert(); }\n            }\n        } else {\n            var5 = 0x0c58;\n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x01;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var7 = 0x0b;\n            var8 = storage[0x06];\n        \n            if (var8 >= 0x08) { assert(); }\n        \n            var5 = func_0C47(var6, var7, var8);\n            var temp11 = var5;\n            var2 = temp11;\n            var5 = 0x0c64;\n            var6 = msg.value;\n            var7 = var2;\n            var5 = func_2DA3(var6, var7);\n            var temp12 = var5;\n            var3 = temp12;\n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x01;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var temp13 = memory[0x40:0x60];\n            var temp14;\n            temp14, memory[temp13:temp13 + 0x00] = address(msg.sender).call.gas(!var3 * 0x08fc).value(var3)(memory[temp13:temp13 + memory[0x40:0x60] - temp13]);\n        \n            if (temp14) { goto label_0CE9; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_0C47(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = storage[arg2 * 0x02 + arg1];\n        arg2 = 0x00;\n        var temp0 = arg0;\n        var var0 = temp0 * arg1;\n        var var1 = temp0 == 0x00;\n    \n        if (var1) {\n        label_2D90:\n        \n            if (var1) { return var0; }\n            else { assert(); }\n        } else {\n            var1 = arg1;\n            var var2 = arg0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2 == var1;\n            goto label_2D90;\n        }\n    }\n    \n    function ritual(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = msg.sender;\n        var var3 = 0x1b;\n        var var4 = arg0;\n    \n        if (var4 >= 0x65) { assert(); }\n    \n        if (storage[var4 * 0x03 + var3] & 0xffffffffffffffffffffffffffffffffffffffff != var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x1b;\n        var3 = arg0;\n    \n        if (var3 >= 0x65) { assert(); }\n    \n        if (storage[var3 * 0x03 + var2 + 0x02] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x02;\n        var3 = 0x1b;\n        var4 = arg0;\n    \n        if (var4 >= 0x65) { assert(); }\n    \n        var3 = storage[var4 * 0x03 + var3 + 0x01];\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n    \n        if (address(this).balance < var1) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0xdead;\n        var3 = 0x1b;\n        var4 = arg0;\n    \n        if (var4 >= 0x65) { assert(); }\n    \n        var temp0 = var4 * 0x03 + var3;\n        storage[temp0] = (var2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var2 = 0x01;\n        var3 = 0x1b;\n        var4 = arg0;\n    \n        if (var4 >= 0x65) { assert(); }\n    \n        var temp1 = var4 * 0x03 + var3 + 0x02;\n        storage[temp1] = !!var2 | (storage[temp1] & ~0xff);\n        storage[0x09] = storage[0x09] + 0x01;\n        var2 = 0x11a3;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x01;\n        var2 = func_2DA3(var3, var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var temp2 = var1;\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(0xffffffffffffffffffffffffffffffffffffffff & 0x8ade9bcda847852de70bada69bbc9358c1c7b747).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n    \n        if (temp4) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x60;\n        memory[r0:r0 + 0x20] = 0x30;\n        var temp1 = r0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x4469676974616c205a6f6e65206f6620496d6d6174657269616c20506963746f;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = 0x7269616c2053656e736962696c69747900000000000000000000000000000000;\n        return r0;\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function issueNewSeries() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = address(this);\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] > 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x06] >= 0x07) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x0a] & 0xff)) {\n            storage[0x06] = storage[0x06] + 0x01;\n            goto label_14B4;\n        } else if (!(storage[0x0a] & 0xff)) {\n        label_14B4:\n            var var1 = 0x1519;\n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x01;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x0b;\n            var var4 = storage[0x06];\n        \n            if (var4 >= 0x08) { assert(); }\n        \n            var1 = func_1508(var2, var3, var4);\n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var1 = 0x1584;\n            var2 = storage[0x07];\n            var3 = 0x0b;\n            var4 = storage[0x06];\n        \n            if (var4 >= 0x08) { assert(); }\n        \n            var1 = func_1573(var2, var3, var4);\n            storage[0x07] = var1;\n            var temp0 = memory[0x40:0x60];\n            log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0x0d1a94de7718b697a5b4a1ef754fe8d19d6c6bf3d3189fc196e0df8751c2d466, storage[0x06]]);\n            return 0x01;\n        } else {\n            storage[0x0a] = (storage[0x0a] & ~0xff) | 0x00;\n            goto label_14B4;\n        }\n    }\n    \n    function func_1508(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = storage[arg2 * 0x02 + arg1 + 0x01];\n        r0 = func_2E3A(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1573(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = storage[arg2 * 0x02 + arg1 + 0x01];\n        r0 = func_2E3A(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x07] - storage[0x09]; }\n    \n    function initialPrice() returns (var r0) { return storage[0x05]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        if (arg2 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x00;\n        var2 = 0x00;\n    \n        if (var2 >= 0x65) {\n        label_1878:\n            var var3 = 0x18c1;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var5 = arg2;\n            var3 = func_2DA3(var4, var5);\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var3 = 0x198a;\n            memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp2;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var5 = arg2;\n            var3 = func_2DA3(var4, var5);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp3;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var3 = 0x1a53;\n            memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var5 = arg2;\n            var3 = func_2E3A(var4, var5);\n            var temp4 = arg1;\n            memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = arg2;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-7] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n        label_16D7:\n            var3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = 0x1b;\n            var5 = var2;\n        \n            if (var5 >= 0x65) { assert(); }\n        \n            var temp7 = storage[var5 * 0x03 + var4] & 0xffffffffffffffffffffffffffffffffffffffff == var3;\n            var3 = temp7;\n        \n            if (!var3) {\n                if (!var3) {\n                label_186A:\n                    var2 = var2 + 0x01;\n                \n                    if (var2 >= 0x65) { goto label_1878; }\n                    else { goto label_16D7; }\n                } else {\n                label_1750:\n                    var3 = arg1;\n                    var4 = 0x1b;\n                    var5 = var2;\n                \n                    if (var5 >= 0x65) { assert(); }\n                \n                    var temp8 = var5 * 0x03 + var4;\n                    storage[temp8] = (var3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                    var1 = var1 + 0x01;\n                    var3 = var2;\n                    var4 = 0x686da8ab505305dea46a4a41c4f06e7d07efd52dd1a016a942b0455bf7290c18;\n                    var5 = arg1;\n                    var var6 = 0x1b;\n                    var var7 = var3;\n                \n                    if (var7 >= 0x65) { assert(); }\n                \n                    var6 = storage[var7 * 0x03 + var6 + 0x01];\n                    var7 = 0x1b;\n                    var var8 = var2;\n                \n                    if (var8 >= 0x65) { assert(); }\n                \n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp10 = temp9 + 0x20;\n                    memory[temp10:temp10 + 0x20] = var6;\n                    var temp11 = temp10 + 0x20;\n                    memory[temp11:temp11 + 0x20] = !!(storage[var8 * 0x03 + var7 + 0x02] & 0xff);\n                    var temp12 = memory[0x40:0x60];\n                    log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [stack[-5], stack[-6]]);\n                    goto label_186A;\n                }\n            } else if (var1 >= arg2) { goto label_186A; }\n            else { goto label_1750; }\n        }\n    }\n    \n    function decimals() returns (var r0) { return 0x00; }\n    \n    function records(var arg0) returns (var arg0, var r1, var r2) {\n        r1 = 0x1b;\n        r2 = arg0;\n    \n        if (r2 >= 0x65) { assert(); }\n    \n        var temp0 = r2 * 0x03 + r1;\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02] & 0xff;\n        return arg0, r1, r2;\n    }\n    \n    function specificTransfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] <= var0) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.sender;\n        var var2 = 0x1b;\n        var var3 = arg1;\n    \n        if (var3 >= 0x65) { assert(); }\n    \n        if (storage[var3 * 0x03 + var2] & 0xffffffffffffffffffffffffffffffffffffffff != var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x1c78;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x01;\n        var1 = func_2DA3(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x1d05;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x01;\n        var1 = func_2E3A(var2, var3);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = arg0;\n        var2 = 0x1b;\n        var3 = arg1;\n    \n        if (var3 >= 0x65) { assert(); }\n    \n        var temp0 = var3 * 0x03 + var2;\n        storage[temp0] = (var1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x01;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        var1 = arg1;\n        var2 = 0x686da8ab505305dea46a4a41c4f06e7d07efd52dd1a016a942b0455bf7290c18;\n        var3 = arg0;\n        var var4 = 0x1b;\n        var var5 = var1;\n    \n        if (var5 >= 0x65) { assert(); }\n    \n        var4 = storage[var5 * 0x03 + var4 + 0x01];\n        var5 = 0x1b;\n        var var6 = arg1;\n    \n        if (var6 >= 0x65) { assert(); }\n    \n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = var4;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = !!(storage[var6 * 0x03 + var5 + 0x02] & 0xff);\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [stack[-5], stack[-6]]);\n        return 0x01;\n    }\n    \n    function specificApprove(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg1;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xc21fb125aad48df1c2e06ac3c462d3772fe147e0f33d8e031d619eb51776f60f, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1]]);\n        return 0x01;\n    }\n    \n    function theRiver() returns (var r0) { return 0x8ade9bcda847852de70bada69bbc9358c1c7b747; }\n    \n    function currentSeries() returns (var r0) { return storage[0x06]; }\n    \n    function getHolderEditions(var arg0) returns (var r0) {\n        var var0 = 0x1fff;\n        var0 = func_2E65();\n        var var1 = 0x2007;\n        var1 = func_2E65();\n        var var2 = 0x00;\n        var var3 = var2;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var var4 = storage[keccak256(memory[0x00:0x40])];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var4;\n            var temp1 = var5;\n            memory[temp1:temp1 + 0x20] = temp0;\n            memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n            var1 = temp1;\n            var3 = 0x00;\n        \n            if (var3 >= 0x65) {\n            label_211B:\n                return var1;\n            } else {\n            label_207A:\n                var4 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var5 = 0x1b;\n                var var6 = var3;\n            \n                if (var6 >= 0x65) { assert(); }\n            \n                if (storage[var6 * 0x03 + var5] & 0xffffffffffffffffffffffffffffffffffffffff != var4) {\n                label_210D:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= 0x65) { goto label_211B; }\n                    else { goto label_207A; }\n                } else {\n                    var4 = var3;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                    var2 = var2 + 0x01;\n                    goto label_210D;\n                }\n            }\n        } else {\n            var temp2 = MSIZE();\n            var temp3 = var4;\n            memory[temp2:temp2 + 0x20] = temp3;\n            memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n            var1 = temp2;\n            var3 = 0x00;\n        \n            if (var3 >= 0x65) { goto label_211B; }\n            else { goto label_207A; }\n        }\n    }\n    \n    function specificTransferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] <= var0) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0x1b;\n        var var3 = arg2;\n    \n        if (var3 >= 0x65) { assert(); }\n    \n        if (storage[var3 * 0x03 + var2] & 0xffffffffffffffffffffffffffffffffffffffff != var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg2;\n        memory[0x20:0x40] = temp1;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x22da;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x01;\n        var1 = func_2DA3(var2, var3);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x2367;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x01;\n        var1 = func_2E3A(var2, var3);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = arg2;\n        memory[0x00:0x20] = temp4;\n        memory[0x20:0x40] = temp3;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        storage[temp5] = (storage[temp5] & ~0xff) | 0x00;\n        var1 = arg1;\n        var2 = 0x1b;\n        var3 = temp4;\n    \n        if (var3 >= 0x65) { assert(); }\n    \n        var temp6 = var3 * 0x03 + var2;\n        storage[temp6] = (var1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp7 = memory[0x40:0x60];\n        memory[temp7:temp7 + 0x20] = 0x01;\n        var temp8 = memory[0x40:0x60];\n        log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        var1 = arg2;\n        var2 = 0x686da8ab505305dea46a4a41c4f06e7d07efd52dd1a016a942b0455bf7290c18;\n        var3 = arg1;\n        var var4 = 0x1b;\n        var var5 = var1;\n    \n        if (var5 >= 0x65) { assert(); }\n    \n        var4 = storage[var5 * 0x03 + var4 + 0x01];\n        var5 = 0x1b;\n        var var6 = arg2;\n    \n        if (var6 >= 0x65) { assert(); }\n    \n        var temp9 = memory[0x40:0x60];\n        memory[temp9:temp9 + 0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp10 = temp9 + 0x20;\n        memory[temp10:temp10 + 0x20] = var4;\n        var temp11 = temp10 + 0x20;\n        memory[temp11:temp11 + 0x20] = !!(storage[var6 * 0x03 + var5 + 0x02] & 0xff);\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [stack[-5], stack[-6]]);\n        return 0x01;\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function maxSupplyPossible() returns (var r0) { return storage[0x04]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function totalSold() returns (var r0) { return storage[0x08]; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x494b420000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function zonesSwarmAddress() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x60;\n        memory[r0:r0 + 0x20] = 0x40;\n        var temp1 = r0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x3061353266323635643864363061383964653431613635303639666134373261;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = 0x6333623133306332363962343738383831313232306236353436373834393230;\n        return r0;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg1) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x00;\n        var2 = 0x00;\n    \n        if (var2 >= 0x65) {\n        label_28FE:\n            var var3 = 0x2947;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var5 = arg1;\n            var3 = func_2DA3(var4, var5);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var3 = 0x29d3;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var5 = arg1;\n            var3 = func_2E3A(var4, var5);\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = arg1;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n        label_275D:\n            var3 = msg.sender;\n            var4 = 0x1b;\n            var5 = var2;\n        \n            if (var5 >= 0x65) { assert(); }\n        \n            var temp3 = storage[var5 * 0x03 + var4] & 0xffffffffffffffffffffffffffffffffffffffff == var3;\n            var3 = temp3;\n        \n            if (!var3) {\n                if (!var3) {\n                label_28F0:\n                    var2 = var2 + 0x01;\n                \n                    if (var2 >= 0x65) { goto label_28FE; }\n                    else { goto label_275D; }\n                } else {\n                label_27D6:\n                    var3 = arg0;\n                    var4 = 0x1b;\n                    var5 = var2;\n                \n                    if (var5 >= 0x65) { assert(); }\n                \n                    var temp4 = var5 * 0x03 + var4;\n                    storage[temp4] = (var3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                    var1 = var1 + 0x01;\n                    var3 = var2;\n                    var4 = 0x686da8ab505305dea46a4a41c4f06e7d07efd52dd1a016a942b0455bf7290c18;\n                    var5 = arg0;\n                    var var6 = 0x1b;\n                    var var7 = var3;\n                \n                    if (var7 >= 0x65) { assert(); }\n                \n                    var6 = storage[var7 * 0x03 + var6 + 0x01];\n                    var7 = 0x1b;\n                    var var8 = var2;\n                \n                    if (var8 >= 0x65) { assert(); }\n                \n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp6 = temp5 + 0x20;\n                    memory[temp6:temp6 + 0x20] = var6;\n                    var temp7 = temp6 + 0x20;\n                    memory[temp7:temp7 + 0x20] = !!(storage[var8 * 0x03 + var7 + 0x02] & 0xff);\n                    var temp8 = memory[0x40:0x60];\n                    log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [stack[-5], stack[-6]]);\n                    goto label_28F0;\n                }\n            } else if (var1 >= arg1) { goto label_28F0; }\n            else { goto label_27D6; }\n        }\n    }\n    \n    function fund() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getTokenHolder(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1b;\n        var var2 = arg0;\n    \n        if (var2 < 0x65) { return storage[var2 * 0x03 + var1] & 0xffffffffffffffffffffffffffffffffffffffff; }\n        else { assert(); }\n    }\n    \n    function issuedToDate() returns (var r0) { return storage[0x07]; }\n    \n    function series(var arg0) returns (var arg0, var r1) {\n        r1 = 0x0b;\n        var var1 = arg0;\n    \n        if (var1 >= 0x08) { assert(); }\n    \n        var temp0 = var1 * 0x02 + r1;\n        arg0 = storage[temp0];\n        r1 = storage[temp0 + 0x01];\n        return arg0, r1;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function redeemEther() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = address(this).balance;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function burnedToDate() returns (var r0) { return storage[0x09]; }\n    \n    function func_2DA3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 >= arg1) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_2DC2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0b;\n        var var3 = storage[0x06];\n    \n        if (var3 >= 0x08) { assert(); }\n    \n        var temp0 = storage[var3 * 0x02 + var2];\n        var2 = temp0;\n        var3 = arg0;\n    \n        if (!var2) { assert(); }\n    \n        var temp1 = var3 % var2;\n        var1 = temp1;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(msg.sender).call.gas(!var1 * 0x08fc).value(var1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (temp3) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2E3A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n        var var2 = var1 >= temp0;\n    \n        if (!var2) {\n            if (!var2) { assert(); }\n        \n        label_2E5A:\n            return var1;\n        } else if (var1 >= arg1) { goto label_2E5A; }\n        else { assert(); }\n    }\n    \n    function func_2E65() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0189:\n            var var0 = 0x0192;\n            var0 = buy();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x03b8a24e) {\n                // Dispatch table entry for ritual(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x01b7;\n                var var2 = msg.data[0x04:0x24];\n                var1 = ritual(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = !!var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e4;\n                var2 = name();\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp3 - var4;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var6 = temp4 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0225:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_0212:\n                    var temp10 = var11;\n                    memory[var9 + temp10:var9 + temp10 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0225; }\n                    else { goto label_0212; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a0;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = !!var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x11c7d6bd) {\n                // Dispatch table entry for issueNewSeries()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02cd;\n                var1 = issueNewSeries();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = !!var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02fa;\n                var1 = totalSupply();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x1d0806ae) {\n                // Dispatch table entry for initialPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0323;\n                var2 = initialPrice();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0398;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = !!var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c5;\n                var2 = decimals();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var2;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x34461067) {\n                // Dispatch table entry for records(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03fc;\n                var2 = msg.data[0x04:0x24];\n                var2, var3, var4 = records(var2);\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp24 = temp23 + 0x20;\n                memory[temp24:temp24 + 0x20] = var3;\n                var temp25 = temp24 + 0x20;\n                memory[temp25:temp25 + 0x20] = !!var4;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x350f4270) {\n                // Dispatch table entry for specificTransfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0490;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = specificTransfer(var2, var3);\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = !!var1;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x4ebab5cf) {\n                // Dispatch table entry for specificApprove(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ea;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = specificApprove(var2, var3);\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = !!var1;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x57f86b6a) {\n                // Dispatch table entry for theRiver()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0517;\n                var2 = theRiver();\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x5caa0dec) {\n                // Dispatch table entry for currentSeries()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x056c;\n                var2 = currentSeries();\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var2;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x6531a708) {\n                // Dispatch table entry for getHolderEditions(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05b9;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = getHolderEditions(var2);\n                var temp35 = memory[0x40:0x60];\n                var2 = temp35;\n                var3 = var2;\n                var temp36 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp36 - var3;\n                var temp37 = var1;\n                memory[temp36:temp36 + 0x20] = memory[temp37:temp37 + 0x20];\n                var4 = temp36 + 0x20;\n                var5 = temp37 + 0x20;\n                var6 = memory[temp37:temp37 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_05FD:\n                    var temp38 = memory[0x40:0x60];\n                    return memory[temp38:temp38 + (var6 + var4) - temp38];\n                } else {\n                label_05EA:\n                    var temp39 = var10;\n                    memory[var8 + temp39:var8 + temp39 + 0x20] = memory[var9 + temp39:var9 + temp39 + 0x20];\n                    var10 = temp39 + 0x20;\n                \n                    if (var10 >= var7) { goto label_05FD; }\n                    else { goto label_05EA; }\n                }\n            } else if (var0 == 0x65ce5222) {\n                // Dispatch table entry for specificTransferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0670;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = specificTransferFrom(var2, var3, var4);\n                var temp40 = memory[0x40:0x60];\n                memory[temp40:temp40 + 0x20] = !!var1;\n                var temp41 = memory[0x40:0x60];\n                return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06c1;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp42 = memory[0x40:0x60];\n                memory[temp42:temp42 + 0x20] = var1;\n                var temp43 = memory[0x40:0x60];\n                return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n            } else if (var0 == 0x89fe141a) {\n                // Dispatch table entry for maxSupplyPossible()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06ea;\n                var2 = maxSupplyPossible();\n                var temp44 = memory[0x40:0x60];\n                memory[temp44:temp44 + 0x20] = var2;\n                var temp45 = memory[0x40:0x60];\n                return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0713;\n                var2 = owner();\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0x9106d7ba) {\n                // Dispatch table entry for totalSold()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0768;\n                var2 = totalSold();\n                var temp48 = memory[0x40:0x60];\n                memory[temp48:temp48 + 0x20] = var2;\n                var temp49 = memory[0x40:0x60];\n                return memory[temp49:temp49 + (temp48 + 0x20) - temp49];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0791;\n                var2 = symbol();\n                var temp50 = memory[0x40:0x60];\n                var3 = temp50;\n                var4 = var3;\n                var temp51 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp51 - var4;\n                var temp52 = var2;\n                memory[temp51:temp51 + 0x20] = memory[temp52:temp52 + 0x20];\n                var5 = temp51 + 0x20;\n                var6 = temp52 + 0x20;\n                var7 = memory[temp52:temp52 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_07D2:\n                    var temp53 = var7;\n                    var5 = temp53 + var5;\n                    var6 = temp53 & 0x1f;\n                \n                    if (!var6) {\n                        var temp54 = memory[0x40:0x60];\n                        return memory[temp54:temp54 + var5 - temp54];\n                    } else {\n                        var temp55 = var6;\n                        var temp56 = var5 - temp55;\n                        memory[temp56:temp56 + 0x20] = ~(0x0100 ** (0x20 - temp55) - 0x01) & memory[temp56:temp56 + 0x20];\n                        var temp57 = memory[0x40:0x60];\n                        return memory[temp57:temp57 + (temp56 + 0x20) - temp57];\n                    }\n                } else {\n                label_07BF:\n                    var temp58 = var11;\n                    memory[var9 + temp58:var9 + temp58 + 0x20] = memory[var10 + temp58:var10 + temp58 + 0x20];\n                    var11 = temp58 + 0x20;\n                \n                    if (var11 >= var8) { goto label_07D2; }\n                    else { goto label_07BF; }\n                }\n            } else if (var0 == 0xa2a84a5d) {\n                // Dispatch table entry for zonesSwarmAddress()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0820;\n                var2 = zonesSwarmAddress();\n                var temp59 = memory[0x40:0x60];\n                var3 = temp59;\n                var4 = var3;\n                var temp60 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp60 - var4;\n                var temp61 = var2;\n                memory[temp60:temp60 + 0x20] = memory[temp61:temp61 + 0x20];\n                var5 = temp60 + 0x20;\n                var7 = memory[temp61:temp61 + 0x20];\n                var6 = temp61 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0861:\n                    var temp62 = var7;\n                    var5 = temp62 + var5;\n                    var6 = temp62 & 0x1f;\n                \n                    if (!var6) {\n                        var temp63 = memory[0x40:0x60];\n                        return memory[temp63:temp63 + var5 - temp63];\n                    } else {\n                        var temp64 = var6;\n                        var temp65 = var5 - temp64;\n                        memory[temp65:temp65 + 0x20] = ~(0x0100 ** (0x20 - temp64) - 0x01) & memory[temp65:temp65 + 0x20];\n                        var temp66 = memory[0x40:0x60];\n                        return memory[temp66:temp66 + (temp65 + 0x20) - temp66];\n                    }\n                } else {\n                label_084E:\n                    var temp67 = var11;\n                    memory[var9 + temp67:var9 + temp67 + 0x20] = memory[var10 + temp67:var10 + temp67 + 0x20];\n                    var11 = temp67 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0861; }\n                    else { goto label_084E; }\n                }\n            } else if (var0 == 0xa6f2ae3a) {\n                // Dispatch table entry for buy()\n                var1 = 0x08a4;\n                var1 = buy();\n                var temp68 = memory[0x40:0x60];\n                memory[temp68:temp68 + 0x20] = !!var1;\n                var temp69 = memory[0x40:0x60];\n                return memory[temp69:temp69 + (temp68 + 0x20) - temp69];\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08fe;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp70 = memory[0x40:0x60];\n                memory[temp70:temp70 + 0x20] = !!var1;\n                var temp71 = memory[0x40:0x60];\n                return memory[temp71:temp71 + (temp70 + 0x20) - temp71];\n            } else if (var0 == 0xb60d4288) {\n                // Dispatch table entry for fund()\n                var1 = 0x0920;\n                var1 = fund();\n                var temp72 = memory[0x40:0x60];\n                memory[temp72:temp72 + 0x20] = !!var1;\n                var temp73 = memory[0x40:0x60];\n                return memory[temp73:temp73 + (temp72 + 0x20) - temp73];\n            } else if (var0 == 0xca55954c) {\n                // Dispatch table entry for getTokenHolder(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x095b;\n                var2 = msg.data[0x04:0x24];\n                var1 = getTokenHolder(var2);\n                var temp74 = memory[0x40:0x60];\n                memory[temp74:temp74 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp75 = memory[0x40:0x60];\n                return memory[temp75:temp75 + (temp74 + 0x20) - temp75];\n            } else if (var0 == 0xcf195e34) {\n                // Dispatch table entry for issuedToDate()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09b0;\n                var2 = issuedToDate();\n                var temp76 = memory[0x40:0x60];\n                memory[temp76:temp76 + 0x20] = var2;\n                var temp77 = memory[0x40:0x60];\n                return memory[temp77:temp77 + (temp76 + 0x20) - temp77];\n            } else if (var0 == 0xdc22cb6a) {\n                // Dispatch table entry for series(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09e7;\n                var2 = msg.data[0x04:0x24];\n                var2, var3 = series(var2);\n                var temp78 = memory[0x40:0x60];\n                memory[temp78:temp78 + 0x20] = var2;\n                var temp79 = temp78 + 0x20;\n                memory[temp79:temp79 + 0x20] = var3;\n                var temp80 = memory[0x40:0x60];\n                return memory[temp80:temp80 + (temp79 + 0x20) - temp80];\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a5a;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = allowance(var2, var3);\n                var temp81 = memory[0x40:0x60];\n                memory[temp81:temp81 + 0x20] = var1;\n                var temp82 = memory[0x40:0x60];\n                return memory[temp82:temp82 + (temp81 + 0x20) - temp82];\n            } else if (var0 == 0xe621b5df) {\n                // Dispatch table entry for redeemEther()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a83;\n                var1 = redeemEther();\n                var temp83 = memory[0x40:0x60];\n                memory[temp83:temp83 + 0x20] = !!var1;\n                var temp84 = memory[0x40:0x60];\n                return memory[temp84:temp84 + (temp83 + 0x20) - temp84];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ad4;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xf6cabaa0) {\n                // Dispatch table entry for burnedToDate()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ae9;\n                var2 = burnedToDate();\n                var temp85 = memory[0x40:0x60];\n                memory[temp85:temp85 + 0x20] = var2;\n                var temp86 = memory[0x40:0x60];\n                return memory[temp86:temp86 + (temp85 + 0x20) - temp86];\n            } else { goto label_0189; }\n        }\n    }\n    \n    function buy() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        memory[0x00:0x20] = address(this);\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] <= var4) { revert(memory[0x00:0x00]); }\n    \n        var var5 = 0x0b;\n        var var6 = storage[0x06];\n    \n        if (var6 >= 0x08) { assert(); }\n    \n        if (msg.value < storage[var6 * 0x02 + var5]) { revert(memory[0x00:0x00]); }\n    \n        var5 = 0x0b;\n        var6 = storage[0x06];\n    \n        if (var6 >= 0x08) { assert(); }\n    \n        var temp0 = storage[var6 * 0x02 + var5];\n        var5 = temp0;\n        var6 = msg.value;\n    \n        if (!var5) { assert(); }\n    \n        var1 = var6 / var5;\n        var2 = msg.value;\n        memory[0x00:0x20] = address(this);\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= var1) {\n        label_0CE9:\n            var5 = 0x00;\n            var6 = 0x0b;\n            var var7 = storage[0x06];\n        \n            if (var7 >= 0x08) { assert(); }\n        \n            var temp1 = storage[var7 * 0x02 + var6];\n            var6 = temp1;\n            var7 = var2;\n        \n            if (!var6) { assert(); }\n        \n            if (var7 % var6 <= var5) {\n            label_0D2B:\n                var5 = 0x0d74;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x01;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = var1;\n                var5 = func_2E3A(var6, var7);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x01;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                var5 = 0x0e00;\n                memory[0x00:0x20] = address(this);\n                memory[0x20:0x40] = 0x01;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = var1;\n                var5 = func_2DA3(var6, var7);\n                memory[0x00:0x20] = address(this);\n                memory[0x20:0x40] = 0x01;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                var temp2 = var1;\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = temp2;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, address(this), msg.sender]);\n                var4 = 0x00;\n            \n                if (var4 >= temp2) {\n                label_0FB3:\n                    return 0x01;\n                } else {\n                label_0EB6:\n                    var temp5 = memory[0x40:0x60];\n                    var5 = temp5;\n                    memory[0x40:0x60] = var5 + 0x60;\n                    memory[var5:var5 + 0x20] = msg.sender;\n                    var6 = var5 + 0x20;\n                    var7 = 0x0b;\n                    var var8 = storage[0x06];\n                \n                    if (var8 >= 0x08) { assert(); }\n                \n                    var temp6 = var6;\n                    memory[temp6:temp6 + 0x20] = storage[var8 * 0x02 + var7];\n                    memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = !!0x00;\n                    var6 = 0x1b;\n                    var7 = storage[0x08];\n                \n                    if (var7 >= 0x65) { assert(); }\n                \n                    var temp7 = var7 * 0x03 + var6;\n                    var temp8 = var5;\n                    var temp9 = temp7;\n                    storage[temp9] = (memory[temp8:temp8 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp9] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                    storage[temp7 + 0x01] = memory[temp8 + 0x20:temp8 + 0x20 + 0x20];\n                    var temp10 = temp7 + 0x02;\n                    storage[temp10] = !!memory[temp8 + 0x40:temp8 + 0x40 + 0x20] | (storage[temp10] & ~0xff);\n                    storage[0x08] = storage[0x08] + 0x01;\n                    var4 = var4 + 0x01;\n                \n                    if (var4 >= var1) { goto label_0FB3; }\n                    else { goto label_0EB6; }\n                }\n            } else {\n                var5 = 0x0d22;\n                var6 = var2;\n                var5 = func_2DC2(var6);\n            \n                if (var5) { goto label_0D2B; }\n                else { assert(); }\n            }\n        } else {\n            var5 = 0x0c58;\n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x01;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var7 = 0x0b;\n            var8 = storage[0x06];\n        \n            if (var8 >= 0x08) { assert(); }\n        \n            var5 = func_0C47(var6, var7, var8);\n            var temp11 = var5;\n            var2 = temp11;\n            var5 = 0x0c64;\n            var6 = msg.value;\n            var7 = var2;\n            var5 = func_2DA3(var6, var7);\n            var temp12 = var5;\n            var3 = temp12;\n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x01;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var temp13 = memory[0x40:0x60];\n            var temp14;\n            temp14, memory[temp13:temp13 + 0x00] = address(msg.sender).call.gas(!var3 * 0x08fc).value(var3)(memory[temp13:temp13 + memory[0x40:0x60] - temp13]);\n        \n            if (temp14) { goto label_0CE9; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_0C47(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = storage[arg2 * 0x02 + arg1];\n        arg2 = 0x00;\n        var temp0 = arg0;\n        var var0 = temp0 * arg1;\n        var var1 = temp0 == 0x00;\n    \n        if (var1) {\n        label_2D90:\n        \n            if (var1) { return var0; }\n            else { assert(); }\n        } else {\n            var1 = arg1;\n            var var2 = arg0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2 == var1;\n            goto label_2D90;\n        }\n    }\n    \n    function ritual(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = msg.sender;\n        var var3 = 0x1b;\n        var var4 = arg0;\n    \n        if (var4 >= 0x65) { assert(); }\n    \n        if (storage[var4 * 0x03 + var3] & 0xffffffffffffffffffffffffffffffffffffffff != var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x1b;\n        var3 = arg0;\n    \n        if (var3 >= 0x65) { assert(); }\n    \n        if (storage[var3 * 0x03 + var2 + 0x02] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x02;\n        var3 = 0x1b;\n        var4 = arg0;\n    \n        if (var4 >= 0x65) { assert(); }\n    \n        var3 = storage[var4 * 0x03 + var3 + 0x01];\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n    \n        if (address(this).balance < var1) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0xdead;\n        var3 = 0x1b;\n        var4 = arg0;\n    \n        if (var4 >= 0x65) { assert(); }\n    \n        var temp0 = var4 * 0x03 + var3;\n        storage[temp0] = (var2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var2 = 0x01;\n        var3 = 0x1b;\n        var4 = arg0;\n    \n        if (var4 >= 0x65) { assert(); }\n    \n        var temp1 = var4 * 0x03 + var3 + 0x02;\n        storage[temp1] = !!var2 | (storage[temp1] & ~0xff);\n        storage[0x09] = storage[0x09] + 0x01;\n        var2 = 0x11a3;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x01;\n        var2 = func_2DA3(var3, var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var temp2 = var1;\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(0xffffffffffffffffffffffffffffffffffffffff & 0x8ade9bcda847852de70bada69bbc9358c1c7b747).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n    \n        if (temp4) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x60;\n        memory[r0:r0 + 0x20] = 0x30;\n        var temp1 = r0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x4469676974616c205a6f6e65206f6620496d6d6174657269616c20506963746f;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = 0x7269616c2053656e736962696c69747900000000000000000000000000000000;\n        return r0;\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function issueNewSeries() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = address(this);\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] > 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x06] >= 0x07) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x0a] & 0xff)) {\n            storage[0x06] = storage[0x06] + 0x01;\n            goto label_14B4;\n        } else if (!(storage[0x0a] & 0xff)) {\n        label_14B4:\n            var var1 = 0x1519;\n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x01;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x0b;\n            var var4 = storage[0x06];\n        \n            if (var4 >= 0x08) { assert(); }\n        \n            var1 = func_1508(var2, var3, var4);\n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var1 = 0x1584;\n            var2 = storage[0x07];\n            var3 = 0x0b;\n            var4 = storage[0x06];\n        \n            if (var4 >= 0x08) { assert(); }\n        \n            var1 = func_1573(var2, var3, var4);\n            storage[0x07] = var1;\n            var temp0 = memory[0x40:0x60];\n            log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0x0d1a94de7718b697a5b4a1ef754fe8d19d6c6bf3d3189fc196e0df8751c2d466, storage[0x06]]);\n            return 0x01;\n        } else {\n            storage[0x0a] = (storage[0x0a] & ~0xff) | 0x00;\n            goto label_14B4;\n        }\n    }\n    \n    function func_1508(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = storage[arg2 * 0x02 + arg1 + 0x01];\n        r0 = func_2E3A(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1573(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = storage[arg2 * 0x02 + arg1 + 0x01];\n        r0 = func_2E3A(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x07] - storage[0x09]; }\n    \n    function initialPrice() returns (var r0) { return storage[0x05]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        if (arg2 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x00;\n        var2 = 0x00;\n    \n        if (var2 >= 0x65) {\n        label_1878:\n            var var3 = 0x18c1;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var5 = arg2;\n            var3 = func_2DA3(var4, var5);\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var3 = 0x198a;\n            memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp2;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var5 = arg2;\n            var3 = func_2DA3(var4, var5);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp3;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var3 = 0x1a53;\n            memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var5 = arg2;\n            var3 = func_2E3A(var4, var5);\n            var temp4 = arg1;\n            memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = arg2;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-7] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n        label_16D7:\n            var3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = 0x1b;\n            var5 = var2;\n        \n            if (var5 >= 0x65) { assert(); }\n        \n            var temp7 = storage[var5 * 0x03 + var4] & 0xffffffffffffffffffffffffffffffffffffffff == var3;\n            var3 = temp7;\n        \n            if (!var3) {\n                if (!var3) {\n                label_186A:\n                    var2 = var2 + 0x01;\n                \n                    if (var2 >= 0x65) { goto label_1878; }\n                    else { goto label_16D7; }\n                } else {\n                label_1750:\n                    var3 = arg1;\n                    var4 = 0x1b;\n                    var5 = var2;\n                \n                    if (var5 >= 0x65) { assert(); }\n                \n                    var temp8 = var5 * 0x03 + var4;\n                    storage[temp8] = (var3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                    var1 = var1 + 0x01;\n                    var3 = var2;\n                    var4 = 0x686da8ab505305dea46a4a41c4f06e7d07efd52dd1a016a942b0455bf7290c18;\n                    var5 = arg1;\n                    var var6 = 0x1b;\n                    var var7 = var3;\n                \n                    if (var7 >= 0x65) { assert(); }\n                \n                    var6 = storage[var7 * 0x03 + var6 + 0x01];\n                    var7 = 0x1b;\n                    var var8 = var2;\n                \n                    if (var8 >= 0x65) { assert(); }\n                \n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp10 = temp9 + 0x20;\n                    memory[temp10:temp10 + 0x20] = var6;\n                    var temp11 = temp10 + 0x20;\n                    memory[temp11:temp11 + 0x20] = !!(storage[var8 * 0x03 + var7 + 0x02] & 0xff);\n                    var temp12 = memory[0x40:0x60];\n                    log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [stack[-5], stack[-6]]);\n                    goto label_186A;\n                }\n            } else if (var1 >= arg2) { goto label_186A; }\n            else { goto label_1750; }\n        }\n    }\n    \n    function decimals() returns (var r0) { return 0x00; }\n    \n    function records(var arg0) returns (var arg0, var r1, var r2) {\n        r1 = 0x1b;\n        r2 = arg0;\n    \n        if (r2 >= 0x65) { assert(); }\n    \n        var temp0 = r2 * 0x03 + r1;\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02] & 0xff;\n        return arg0, r1, r2;\n    }\n    \n    function specificTransfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] <= var0) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.sender;\n        var var2 = 0x1b;\n        var var3 = arg1;\n    \n        if (var3 >= 0x65) { assert(); }\n    \n        if (storage[var3 * 0x03 + var2] & 0xffffffffffffffffffffffffffffffffffffffff != var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x1c78;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x01;\n        var1 = func_2DA3(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x1d05;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x01;\n        var1 = func_2E3A(var2, var3);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = arg0;\n        var2 = 0x1b;\n        var3 = arg1;\n    \n        if (var3 >= 0x65) { assert(); }\n    \n        var temp0 = var3 * 0x03 + var2;\n        storage[temp0] = (var1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x01;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        var1 = arg1;\n        var2 = 0x686da8ab505305dea46a4a41c4f06e7d07efd52dd1a016a942b0455bf7290c18;\n        var3 = arg0;\n        var var4 = 0x1b;\n        var var5 = var1;\n    \n        if (var5 >= 0x65) { assert(); }\n    \n        var4 = storage[var5 * 0x03 + var4 + 0x01];\n        var5 = 0x1b;\n        var var6 = arg1;\n    \n        if (var6 >= 0x65) { assert(); }\n    \n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = var4;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = !!(storage[var6 * 0x03 + var5 + 0x02] & 0xff);\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [stack[-5], stack[-6]]);\n        return 0x01;\n    }\n    \n    function specificApprove(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg1;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xc21fb125aad48df1c2e06ac3c462d3772fe147e0f33d8e031d619eb51776f60f, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1]]);\n        return 0x01;\n    }\n    \n    function theRiver() returns (var r0) { return 0x8ade9bcda847852de70bada69bbc9358c1c7b747; }\n    \n    function currentSeries() returns (var r0) { return storage[0x06]; }\n    \n    function getHolderEditions(var arg0) returns (var r0) {\n        var var0 = 0x1fff;\n        var0 = func_2E65();\n        var var1 = 0x2007;\n        var1 = func_2E65();\n        var var2 = 0x00;\n        var var3 = var2;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var var4 = storage[keccak256(memory[0x00:0x40])];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var4;\n            var temp1 = var5;\n            memory[temp1:temp1 + 0x20] = temp0;\n            memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n            var1 = temp1;\n            var3 = 0x00;\n        \n            if (var3 >= 0x65) {\n            label_211B:\n                return var1;\n            } else {\n            label_207A:\n                var4 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var5 = 0x1b;\n                var var6 = var3;\n            \n                if (var6 >= 0x65) { assert(); }\n            \n                if (storage[var6 * 0x03 + var5] & 0xffffffffffffffffffffffffffffffffffffffff != var4) {\n                label_210D:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= 0x65) { goto label_211B; }\n                    else { goto label_207A; }\n                } else {\n                    var4 = var3;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                    var2 = var2 + 0x01;\n                    goto label_210D;\n                }\n            }\n        } else {\n            var temp2 = MSIZE();\n            var temp3 = var4;\n            memory[temp2:temp2 + 0x20] = temp3;\n            memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n            var1 = temp2;\n            var3 = 0x00;\n        \n            if (var3 >= 0x65) { goto label_211B; }\n            else { goto label_207A; }\n        }\n    }\n    \n    function specificTransferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] <= var0) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0x1b;\n        var var3 = arg2;\n    \n        if (var3 >= 0x65) { assert(); }\n    \n        if (storage[var3 * 0x03 + var2] & 0xffffffffffffffffffffffffffffffffffffffff != var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg2;\n        memory[0x20:0x40] = temp1;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x22da;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x01;\n        var1 = func_2DA3(var2, var3);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x2367;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x01;\n        var1 = func_2E3A(var2, var3);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = arg2;\n        memory[0x00:0x20] = temp4;\n        memory[0x20:0x40] = temp3;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        storage[temp5] = (storage[temp5] & ~0xff) | 0x00;\n        var1 = arg1;\n        var2 = 0x1b;\n        var3 = temp4;\n    \n        if (var3 >= 0x65) { assert(); }\n    \n        var temp6 = var3 * 0x03 + var2;\n        storage[temp6] = (var1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp7 = memory[0x40:0x60];\n        memory[temp7:temp7 + 0x20] = 0x01;\n        var temp8 = memory[0x40:0x60];\n        log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        var1 = arg2;\n        var2 = 0x686da8ab505305dea46a4a41c4f06e7d07efd52dd1a016a942b0455bf7290c18;\n        var3 = arg1;\n        var var4 = 0x1b;\n        var var5 = var1;\n    \n        if (var5 >= 0x65) { assert(); }\n    \n        var4 = storage[var5 * 0x03 + var4 + 0x01];\n        var5 = 0x1b;\n        var var6 = arg2;\n    \n        if (var6 >= 0x65) { assert(); }\n    \n        var temp9 = memory[0x40:0x60];\n        memory[temp9:temp9 + 0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp10 = temp9 + 0x20;\n        memory[temp10:temp10 + 0x20] = var4;\n        var temp11 = temp10 + 0x20;\n        memory[temp11:temp11 + 0x20] = !!(storage[var6 * 0x03 + var5 + 0x02] & 0xff);\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [stack[-5], stack[-6]]);\n        return 0x01;\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function maxSupplyPossible() returns (var r0) { return storage[0x04]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function totalSold() returns (var r0) { return storage[0x08]; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x494b420000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function zonesSwarmAddress() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x60;\n        memory[r0:r0 + 0x20] = 0x40;\n        var temp1 = r0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x3061353266323635643864363061383964653431613635303639666134373261;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = 0x6333623133306332363962343738383831313232306236353436373834393230;\n        return r0;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg1) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x00;\n        var2 = 0x00;\n    \n        if (var2 >= 0x65) {\n        label_28FE:\n            var var3 = 0x2947;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var5 = arg1;\n            var3 = func_2DA3(var4, var5);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var3 = 0x29d3;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var5 = arg1;\n            var3 = func_2E3A(var4, var5);\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = arg1;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n        label_275D:\n            var3 = msg.sender;\n            var4 = 0x1b;\n            var5 = var2;\n        \n            if (var5 >= 0x65) { assert(); }\n        \n            var temp3 = storage[var5 * 0x03 + var4] & 0xffffffffffffffffffffffffffffffffffffffff == var3;\n            var3 = temp3;\n        \n            if (!var3) {\n                if (!var3) {\n                label_28F0:\n                    var2 = var2 + 0x01;\n                \n                    if (var2 >= 0x65) { goto label_28FE; }\n                    else { goto label_275D; }\n                } else {\n                label_27D6:\n                    var3 = arg0;\n                    var4 = 0x1b;\n                    var5 = var2;\n                \n                    if (var5 >= 0x65) { assert(); }\n                \n                    var temp4 = var5 * 0x03 + var4;\n                    storage[temp4] = (var3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                    var1 = var1 + 0x01;\n                    var3 = var2;\n                    var4 = 0x686da8ab505305dea46a4a41c4f06e7d07efd52dd1a016a942b0455bf7290c18;\n                    var5 = arg0;\n                    var var6 = 0x1b;\n                    var var7 = var3;\n                \n                    if (var7 >= 0x65) { assert(); }\n                \n                    var6 = storage[var7 * 0x03 + var6 + 0x01];\n                    var7 = 0x1b;\n                    var var8 = var2;\n                \n                    if (var8 >= 0x65) { assert(); }\n                \n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp6 = temp5 + 0x20;\n                    memory[temp6:temp6 + 0x20] = var6;\n                    var temp7 = temp6 + 0x20;\n                    memory[temp7:temp7 + 0x20] = !!(storage[var8 * 0x03 + var7 + 0x02] & 0xff);\n                    var temp8 = memory[0x40:0x60];\n                    log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [stack[-5], stack[-6]]);\n                    goto label_28F0;\n                }\n            } else if (var1 >= arg1) { goto label_28F0; }\n            else { goto label_27D6; }\n        }\n    }\n    \n    function fund() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getTokenHolder(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1b;\n        var var2 = arg0;\n    \n        if (var2 < 0x65) { return storage[var2 * 0x03 + var1] & 0xffffffffffffffffffffffffffffffffffffffff; }\n        else { assert(); }\n    }\n    \n    function issuedToDate() returns (var r0) { return storage[0x07]; }\n    \n    function series(var arg0) returns (var arg0, var r1) {\n        r1 = 0x0b;\n        var var1 = arg0;\n    \n        if (var1 >= 0x08) { assert(); }\n    \n        var temp0 = var1 * 0x02 + r1;\n        arg0 = storage[temp0];\n        r1 = storage[temp0 + 0x01];\n        return arg0, r1;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function redeemEther() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = address(this).balance;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function burnedToDate() returns (var r0) { return storage[0x09]; }\n    \n    function func_2DA3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 >= arg1) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_2DC2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0b;\n        var var3 = storage[0x06];\n    \n        if (var3 >= 0x08) { assert(); }\n    \n        var temp0 = storage[var3 * 0x02 + var2];\n        var2 = temp0;\n        var3 = arg0;\n    \n        if (!var2) { assert(); }\n    \n        var temp1 = var3 % var2;\n        var1 = temp1;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(msg.sender).call.gas(!var1 * 0x08fc).value(var1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (temp3) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2E3A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n        var var2 = var1 >= temp0;\n    \n        if (!var2) {\n            if (!var2) { assert(); }\n        \n        label_2E5A:\n            return var1;\n        } else if (var1 >= arg1) { goto label_2E5A; }\n        else { assert(); }\n    }\n    \n    function func_2E65() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0189:\n            var var0 = 0x0192;\n            var0 = buy();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x03b8a24e) {\n                // Dispatch table entry for ritual(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x01b7;\n                var var2 = msg.data[0x04:0x24];\n                var1 = ritual(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = !!var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e4;\n                var2 = name();\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp3 - var4;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var6 = temp4 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0225:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_0212:\n                    var temp10 = var11;\n                    memory[var9 + temp10:var9 + temp10 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0225; }\n                    else { goto label_0212; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a0;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = !!var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x11c7d6bd) {\n                // Dispatch table entry for issueNewSeries()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02cd;\n                var1 = issueNewSeries();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = !!var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02fa;\n                var1 = totalSupply();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x1d0806ae) {\n                // Dispatch table entry for initialPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0323;\n                var2 = initialPrice();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0398;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = !!var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c5;\n                var2 = decimals();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var2;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x34461067) {\n                // Dispatch table entry for records(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03fc;\n                var2 = msg.data[0x04:0x24];\n                var2, var3, var4 = records(var2);\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp24 = temp23 + 0x20;\n                memory[temp24:temp24 + 0x20] = var3;\n                var temp25 = temp24 + 0x20;\n                memory[temp25:temp25 + 0x20] = !!var4;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x350f4270) {\n                // Dispatch table entry for specificTransfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0490;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = specificTransfer(var2, var3);\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = !!var1;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x4ebab5cf) {\n                // Dispatch table entry for specificApprove(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ea;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = specificApprove(var2, var3);\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = !!var1;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x57f86b6a) {\n                // Dispatch table entry for theRiver()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0517;\n                var2 = theRiver();\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x5caa0dec) {\n                // Dispatch table entry for currentSeries()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x056c;\n                var2 = currentSeries();\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var2;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x6531a708) {\n                // Dispatch table entry for getHolderEditions(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05b9;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = getHolderEditions(var2);\n                var temp35 = memory[0x40:0x60];\n                var2 = temp35;\n                var3 = var2;\n                var temp36 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp36 - var3;\n                var temp37 = var1;\n                memory[temp36:temp36 + 0x20] = memory[temp37:temp37 + 0x20];\n                var4 = temp36 + 0x20;\n                var5 = temp37 + 0x20;\n                var6 = memory[temp37:temp37 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_05FD:\n                    var temp38 = memory[0x40:0x60];\n                    return memory[temp38:temp38 + (var6 + var4) - temp38];\n                } else {\n                label_05EA:\n                    var temp39 = var10;\n                    memory[var8 + temp39:var8 + temp39 + 0x20] = memory[var9 + temp39:var9 + temp39 + 0x20];\n                    var10 = temp39 + 0x20;\n                \n                    if (var10 >= var7) { goto label_05FD; }\n                    else { goto label_05EA; }\n                }\n            } else if (var0 == 0x65ce5222) {\n                // Dispatch table entry for specificTransferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0670;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = specificTransferFrom(var2, var3, var4);\n                var temp40 = memory[0x40:0x60];\n                memory[temp40:temp40 + 0x20] = !!var1;\n                var temp41 = memory[0x40:0x60];\n                return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06c1;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp42 = memory[0x40:0x60];\n                memory[temp42:temp42 + 0x20] = var1;\n                var temp43 = memory[0x40:0x60];\n                return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n            } else if (var0 == 0x89fe141a) {\n                // Dispatch table entry for maxSupplyPossible()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06ea;\n                var2 = maxSupplyPossible();\n                var temp44 = memory[0x40:0x60];\n                memory[temp44:temp44 + 0x20] = var2;\n                var temp45 = memory[0x40:0x60];\n                return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0713;\n                var2 = owner();\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0x9106d7ba) {\n                // Dispatch table entry for totalSold()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0768;\n                var2 = totalSold();\n                var temp48 = memory[0x40:0x60];\n                memory[temp48:temp48 + 0x20] = var2;\n                var temp49 = memory[0x40:0x60];\n                return memory[temp49:temp49 + (temp48 + 0x20) - temp49];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0791;\n                var2 = symbol();\n                var temp50 = memory[0x40:0x60];\n                var3 = temp50;\n                var4 = var3;\n                var temp51 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp51 - var4;\n                var temp52 = var2;\n                memory[temp51:temp51 + 0x20] = memory[temp52:temp52 + 0x20];\n                var5 = temp51 + 0x20;\n                var6 = temp52 + 0x20;\n                var7 = memory[temp52:temp52 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_07D2:\n                    var temp53 = var7;\n                    var5 = temp53 + var5;\n                    var6 = temp53 & 0x1f;\n                \n                    if (!var6) {\n                        var temp54 = memory[0x40:0x60];\n                        return memory[temp54:temp54 + var5 - temp54];\n                    } else {\n                        var temp55 = var6;\n                        var temp56 = var5 - temp55;\n                        memory[temp56:temp56 + 0x20] = ~(0x0100 ** (0x20 - temp55) - 0x01) & memory[temp56:temp56 + 0x20];\n                        var temp57 = memory[0x40:0x60];\n                        return memory[temp57:temp57 + (temp56 + 0x20) - temp57];\n                    }\n                } else {\n                label_07BF:\n                    var temp58 = var11;\n                    memory[var9 + temp58:var9 + temp58 + 0x20] = memory[var10 + temp58:var10 + temp58 + 0x20];\n                    var11 = temp58 + 0x20;\n                \n                    if (var11 >= var8) { goto label_07D2; }\n                    else { goto label_07BF; }\n                }\n            } else if (var0 == 0xa2a84a5d) {\n                // Dispatch table entry for zonesSwarmAddress()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0820;\n                var2 = zonesSwarmAddress();\n                var temp59 = memory[0x40:0x60];\n                var3 = temp59;\n                var4 = var3;\n                var temp60 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp60 - var4;\n                var temp61 = var2;\n                memory[temp60:temp60 + 0x20] = memory[temp61:temp61 + 0x20];\n                var5 = temp60 + 0x20;\n                var7 = memory[temp61:temp61 + 0x20];\n                var6 = temp61 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0861:\n                    var temp62 = var7;\n                    var5 = temp62 + var5;\n                    var6 = temp62 & 0x1f;\n                \n                    if (!var6) {\n                        var temp63 = memory[0x40:0x60];\n                        return memory[temp63:temp63 + var5 - temp63];\n                    } else {\n                        var temp64 = var6;\n                        var temp65 = var5 - temp64;\n                        memory[temp65:temp65 + 0x20] = ~(0x0100 ** (0x20 - temp64) - 0x01) & memory[temp65:temp65 + 0x20];\n                        var temp66 = memory[0x40:0x60];\n                        return memory[temp66:temp66 + (temp65 + 0x20) - temp66];\n                    }\n                } else {\n                label_084E:\n                    var temp67 = var11;\n                    memory[var9 + temp67:var9 + temp67 + 0x20] = memory[var10 + temp67:var10 + temp67 + 0x20];\n                    var11 = temp67 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0861; }\n                    else { goto label_084E; }\n                }\n            } else if (var0 == 0xa6f2ae3a) {\n                // Dispatch table entry for buy()\n                var1 = 0x08a4;\n                var1 = buy();\n                var temp68 = memory[0x40:0x60];\n                memory[temp68:temp68 + 0x20] = !!var1;\n                var temp69 = memory[0x40:0x60];\n                return memory[temp69:temp69 + (temp68 + 0x20) - temp69];\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08fe;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp70 = memory[0x40:0x60];\n                memory[temp70:temp70 + 0x20] = !!var1;\n                var temp71 = memory[0x40:0x60];\n                return memory[temp71:temp71 + (temp70 + 0x20) - temp71];\n            } else if (var0 == 0xb60d4288) {\n                // Dispatch table entry for fund()\n                var1 = 0x0920;\n                var1 = fund();\n                var temp72 = memory[0x40:0x60];\n                memory[temp72:temp72 + 0x20] = !!var1;\n                var temp73 = memory[0x40:0x60];\n                return memory[temp73:temp73 + (temp72 + 0x20) - temp73];\n            } else if (var0 == 0xca55954c) {\n                // Dispatch table entry for getTokenHolder(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x095b;\n                var2 = msg.data[0x04:0x24];\n                var1 = getTokenHolder(var2);\n                var temp74 = memory[0x40:0x60];\n                memory[temp74:temp74 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp75 = memory[0x40:0x60];\n                return memory[temp75:temp75 + (temp74 + 0x20) - temp75];\n            } else if (var0 == 0xcf195e34) {\n                // Dispatch table entry for issuedToDate()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09b0;\n                var2 = issuedToDate();\n                var temp76 = memory[0x40:0x60];\n                memory[temp76:temp76 + 0x20] = var2;\n                var temp77 = memory[0x40:0x60];\n                return memory[temp77:temp77 + (temp76 + 0x20) - temp77];\n            } else if (var0 == 0xdc22cb6a) {\n                // Dispatch table entry for series(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09e7;\n                var2 = msg.data[0x04:0x24];\n                var2, var3 = series(var2);\n                var temp78 = memory[0x40:0x60];\n                memory[temp78:temp78 + 0x20] = var2;\n                var temp79 = temp78 + 0x20;\n                memory[temp79:temp79 + 0x20] = var3;\n                var temp80 = memory[0x40:0x60];\n                return memory[temp80:temp80 + (temp79 + 0x20) - temp80];\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a5a;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = allowance(var2, var3);\n                var temp81 = memory[0x40:0x60];\n                memory[temp81:temp81 + 0x20] = var1;\n                var temp82 = memory[0x40:0x60];\n                return memory[temp82:temp82 + (temp81 + 0x20) - temp82];\n            } else if (var0 == 0xe621b5df) {\n                // Dispatch table entry for redeemEther()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a83;\n                var1 = redeemEther();\n                var temp83 = memory[0x40:0x60];\n                memory[temp83:temp83 + 0x20] = !!var1;\n                var temp84 = memory[0x40:0x60];\n                return memory[temp84:temp84 + (temp83 + 0x20) - temp84];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ad4;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xf6cabaa0) {\n                // Dispatch table entry for burnedToDate()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ae9;\n                var2 = burnedToDate();\n                var temp85 = memory[0x40:0x60];\n                memory[temp85:temp85 + 0x20] = var2;\n                var temp86 = memory[0x40:0x60];\n                return memory[temp86:temp86 + (temp85 + 0x20) - temp86];\n            } else { goto label_0189; }\n        }\n    }\n    \n    function buy() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        memory[0x00:0x20] = address(this);\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] <= var4) { revert(memory[0x00:0x00]); }\n    \n        var var5 = 0x0b;\n        var var6 = storage[0x06];\n    \n        if (var6 >= 0x08) { assert(); }\n    \n        if (msg.value < storage[var6 * 0x02 + var5]) { revert(memory[0x00:0x00]); }\n    \n        var5 = 0x0b;\n        var6 = storage[0x06];\n    \n        if (var6 >= 0x08) { assert(); }\n    \n        var temp0 = storage[var6 * 0x02 + var5];\n        var5 = temp0;\n        var6 = msg.value;\n    \n        if (!var5) { assert(); }\n    \n        var1 = var6 / var5;\n        var2 = msg.value;\n        memory[0x00:0x20] = address(this);\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= var1) {\n        label_0CE9:\n            var5 = 0x00;\n            var6 = 0x0b;\n            var var7 = storage[0x06];\n        \n            if (var7 >= 0x08) { assert(); }\n        \n            var temp1 = storage[var7 * 0x02 + var6];\n            var6 = temp1;\n            var7 = var2;\n        \n            if (!var6) { assert(); }\n        \n            if (var7 % var6 <= var5) {\n            label_0D2B:\n                var5 = 0x0d74;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x01;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = var1;\n                var5 = func_2E3A(var6, var7);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x01;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                var5 = 0x0e00;\n                memory[0x00:0x20] = address(this);\n                memory[0x20:0x40] = 0x01;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = var1;\n                var5 = func_2DA3(var6, var7);\n                memory[0x00:0x20] = address(this);\n                memory[0x20:0x40] = 0x01;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                var temp2 = var1;\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = temp2;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, address(this), msg.sender]);\n                var4 = 0x00;\n            \n                if (var4 >= temp2) {\n                label_0FB3:\n                    return 0x01;\n                } else {\n                label_0EB6:\n                    var temp5 = memory[0x40:0x60];\n                    var5 = temp5;\n                    memory[0x40:0x60] = var5 + 0x60;\n                    memory[var5:var5 + 0x20] = msg.sender;\n                    var6 = var5 + 0x20;\n                    var7 = 0x0b;\n                    var var8 = storage[0x06];\n                \n                    if (var8 >= 0x08) { assert(); }\n                \n                    var temp6 = var6;\n                    memory[temp6:temp6 + 0x20] = storage[var8 * 0x02 + var7];\n                    memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = !!0x00;\n                    var6 = 0x1b;\n                    var7 = storage[0x08];\n                \n                    if (var7 >= 0x65) { assert(); }\n                \n                    var temp7 = var7 * 0x03 + var6;\n                    var temp8 = var5;\n                    var temp9 = temp7;\n                    storage[temp9] = (memory[temp8:temp8 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp9] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                    storage[temp7 + 0x01] = memory[temp8 + 0x20:temp8 + 0x20 + 0x20];\n                    var temp10 = temp7 + 0x02;\n                    storage[temp10] = !!memory[temp8 + 0x40:temp8 + 0x40 + 0x20] | (storage[temp10] & ~0xff);\n                    storage[0x08] = storage[0x08] + 0x01;\n                    var4 = var4 + 0x01;\n                \n                    if (var4 >= var1) { goto label_0FB3; }\n                    else { goto label_0EB6; }\n                }\n            } else {\n                var5 = 0x0d22;\n                var6 = var2;\n                var5 = func_2DC2(var6);\n            \n                if (var5) { goto label_0D2B; }\n                else { assert(); }\n            }\n        } else {\n            var5 = 0x0c58;\n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x01;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var7 = 0x0b;\n            var8 = storage[0x06];\n        \n            if (var8 >= 0x08) { assert(); }\n        \n            var5 = func_0C47(var6, var7, var8);\n            var temp11 = var5;\n            var2 = temp11;\n            var5 = 0x0c64;\n            var6 = msg.value;\n            var7 = var2;\n            var5 = func_2DA3(var6, var7);\n            var temp12 = var5;\n            var3 = temp12;\n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x01;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var temp13 = memory[0x40:0x60];\n            var temp14;\n            temp14, memory[temp13:temp13 + 0x00] = address(msg.sender).call.gas(!var3 * 0x08fc).value(var3)(memory[temp13:temp13 + memory[0x40:0x60] - temp13]);\n        \n            if (temp14) { goto label_0CE9; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_0C47(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = storage[arg2 * 0x02 + arg1];\n        arg2 = 0x00;\n        var temp0 = arg0;\n        var var0 = temp0 * arg1;\n        var var1 = temp0 == 0x00;\n    \n        if (var1) {\n        label_2D90:\n        \n            if (var1) { return var0; }\n            else { assert(); }\n        } else {\n            var1 = arg1;\n            var var2 = arg0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2 == var1;\n            goto label_2D90;\n        }\n    }\n    \n    function ritual(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = msg.sender;\n        var var3 = 0x1b;\n        var var4 = arg0;\n    \n        if (var4 >= 0x65) { assert(); }\n    \n        if (storage[var4 * 0x03 + var3] & 0xffffffffffffffffffffffffffffffffffffffff != var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x1b;\n        var3 = arg0;\n    \n        if (var3 >= 0x65) { assert(); }\n    \n        if (storage[var3 * 0x03 + var2 + 0x02] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x02;\n        var3 = 0x1b;\n        var4 = arg0;\n    \n        if (var4 >= 0x65) { assert(); }\n    \n        var3 = storage[var4 * 0x03 + var3 + 0x01];\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n    \n        if (address(this).balance < var1) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0xdead;\n        var3 = 0x1b;\n        var4 = arg0;\n    \n        if (var4 >= 0x65) { assert(); }\n    \n        var temp0 = var4 * 0x03 + var3;\n        storage[temp0] = (var2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var2 = 0x01;\n        var3 = 0x1b;\n        var4 = arg0;\n    \n        if (var4 >= 0x65) { assert(); }\n    \n        var temp1 = var4 * 0x03 + var3 + 0x02;\n        storage[temp1] = !!var2 | (storage[temp1] & ~0xff);\n        storage[0x09] = storage[0x09] + 0x01;\n        var2 = 0x11a3;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x01;\n        var2 = func_2DA3(var3, var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var temp2 = var1;\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(0xffffffffffffffffffffffffffffffffffffffff & 0x8ade9bcda847852de70bada69bbc9358c1c7b747).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n    \n        if (temp4) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x60;\n        memory[r0:r0 + 0x20] = 0x30;\n        var temp1 = r0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x4469676974616c205a6f6e65206f6620496d6d6174657269616c20506963746f;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = 0x7269616c2053656e736962696c69747900000000000000000000000000000000;\n        return r0;\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function issueNewSeries() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = address(this);\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] > 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x06] >= 0x07) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x0a] & 0xff)) {\n            storage[0x06] = storage[0x06] + 0x01;\n            goto label_14B4;\n        } else if (!(storage[0x0a] & 0xff)) {\n        label_14B4:\n            var var1 = 0x1519;\n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x01;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x0b;\n            var var4 = storage[0x06];\n        \n            if (var4 >= 0x08) { assert(); }\n        \n            var1 = func_1508(var2, var3, var4);\n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var1 = 0x1584;\n            var2 = storage[0x07];\n            var3 = 0x0b;\n            var4 = storage[0x06];\n        \n            if (var4 >= 0x08) { assert(); }\n        \n            var1 = func_1573(var2, var3, var4);\n            storage[0x07] = var1;\n            var temp0 = memory[0x40:0x60];\n            log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0x0d1a94de7718b697a5b4a1ef754fe8d19d6c6bf3d3189fc196e0df8751c2d466, storage[0x06]]);\n            return 0x01;\n        } else {\n            storage[0x0a] = (storage[0x0a] & ~0xff) | 0x00;\n            goto label_14B4;\n        }\n    }\n    \n    function func_1508(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = storage[arg2 * 0x02 + arg1 + 0x01];\n        r0 = func_2E3A(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1573(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = storage[arg2 * 0x02 + arg1 + 0x01];\n        r0 = func_2E3A(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x07] - storage[0x09]; }\n    \n    function initialPrice() returns (var r0) { return storage[0x05]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        if (arg2 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x00;\n        var2 = 0x00;\n    \n        if (var2 >= 0x65) {\n        label_1878:\n            var var3 = 0x18c1;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var5 = arg2;\n            var3 = func_2DA3(var4, var5);\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var3 = 0x198a;\n            memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp2;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var5 = arg2;\n            var3 = func_2DA3(var4, var5);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp3;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var3 = 0x1a53;\n            memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var5 = arg2;\n            var3 = func_2E3A(var4, var5);\n            var temp4 = arg1;\n            memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = arg2;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-7] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n        label_16D7:\n            var3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = 0x1b;\n            var5 = var2;\n        \n            if (var5 >= 0x65) { assert(); }\n        \n            var temp7 = storage[var5 * 0x03 + var4] & 0xffffffffffffffffffffffffffffffffffffffff == var3;\n            var3 = temp7;\n        \n            if (!var3) {\n                if (!var3) {\n                label_186A:\n                    var2 = var2 + 0x01;\n                \n                    if (var2 >= 0x65) { goto label_1878; }\n                    else { goto label_16D7; }\n                } else {\n                label_1750:\n                    var3 = arg1;\n                    var4 = 0x1b;\n                    var5 = var2;\n                \n                    if (var5 >= 0x65) { assert(); }\n                \n                    var temp8 = var5 * 0x03 + var4;\n                    storage[temp8] = (var3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                    var1 = var1 + 0x01;\n                    var3 = var2;\n                    var4 = 0x686da8ab505305dea46a4a41c4f06e7d07efd52dd1a016a942b0455bf7290c18;\n                    var5 = arg1;\n                    var var6 = 0x1b;\n                    var var7 = var3;\n                \n                    if (var7 >= 0x65) { assert(); }\n                \n                    var6 = storage[var7 * 0x03 + var6 + 0x01];\n                    var7 = 0x1b;\n                    var var8 = var2;\n                \n                    if (var8 >= 0x65) { assert(); }\n                \n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp10 = temp9 + 0x20;\n                    memory[temp10:temp10 + 0x20] = var6;\n                    var temp11 = temp10 + 0x20;\n                    memory[temp11:temp11 + 0x20] = !!(storage[var8 * 0x03 + var7 + 0x02] & 0xff);\n                    var temp12 = memory[0x40:0x60];\n                    log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [stack[-5], stack[-6]]);\n                    goto label_186A;\n                }\n            } else if (var1 >= arg2) { goto label_186A; }\n            else { goto label_1750; }\n        }\n    }\n    \n    function decimals() returns (var r0) { return 0x00; }\n    \n    function records(var arg0) returns (var arg0, var r1, var r2) {\n        r1 = 0x1b;\n        r2 = arg0;\n    \n        if (r2 >= 0x65) { assert(); }\n    \n        var temp0 = r2 * 0x03 + r1;\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02] & 0xff;\n        return arg0, r1, r2;\n    }\n    \n    function specificTransfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] <= var0) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.sender;\n        var var2 = 0x1b;\n        var var3 = arg1;\n    \n        if (var3 >= 0x65) { assert(); }\n    \n        if (storage[var3 * 0x03 + var2] & 0xffffffffffffffffffffffffffffffffffffffff != var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x1c78;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x01;\n        var1 = func_2DA3(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x1d05;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x01;\n        var1 = func_2E3A(var2, var3);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = arg0;\n        var2 = 0x1b;\n        var3 = arg1;\n    \n        if (var3 >= 0x65) { assert(); }\n    \n        var temp0 = var3 * 0x03 + var2;\n        storage[temp0] = (var1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x01;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        var1 = arg1;\n        var2 = 0x686da8ab505305dea46a4a41c4f06e7d07efd52dd1a016a942b0455bf7290c18;\n        var3 = arg0;\n        var var4 = 0x1b;\n        var var5 = var1;\n    \n        if (var5 >= 0x65) { assert(); }\n    \n        var4 = storage[var5 * 0x03 + var4 + 0x01];\n        var5 = 0x1b;\n        var var6 = arg1;\n    \n        if (var6 >= 0x65) { assert(); }\n    \n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = var4;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = !!(storage[var6 * 0x03 + var5 + 0x02] & 0xff);\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [stack[-5], stack[-6]]);\n        return 0x01;\n    }\n    \n    function specificApprove(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg1;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xc21fb125aad48df1c2e06ac3c462d3772fe147e0f33d8e031d619eb51776f60f, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1]]);\n        return 0x01;\n    }\n    \n    function theRiver() returns (var r0) { return 0x8ade9bcda847852de70bada69bbc9358c1c7b747; }\n    \n    function currentSeries() returns (var r0) { return storage[0x06]; }\n    \n    function getHolderEditions(var arg0) returns (var r0) {\n        var var0 = 0x1fff;\n        var0 = func_2E65();\n        var var1 = 0x2007;\n        var1 = func_2E65();\n        var var2 = 0x00;\n        var var3 = var2;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var var4 = storage[keccak256(memory[0x00:0x40])];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var4;\n            var temp1 = var5;\n            memory[temp1:temp1 + 0x20] = temp0;\n            memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n            var1 = temp1;\n            var3 = 0x00;\n        \n            if (var3 >= 0x65) {\n            label_211B:\n                return var1;\n            } else {\n            label_207A:\n                var4 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var5 = 0x1b;\n                var var6 = var3;\n            \n                if (var6 >= 0x65) { assert(); }\n            \n                if (storage[var6 * 0x03 + var5] & 0xffffffffffffffffffffffffffffffffffffffff != var4) {\n                label_210D:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= 0x65) { goto label_211B; }\n                    else { goto label_207A; }\n                } else {\n                    var4 = var3;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                    var2 = var2 + 0x01;\n                    goto label_210D;\n                }\n            }\n        } else {\n            var temp2 = MSIZE();\n            var temp3 = var4;\n            memory[temp2:temp2 + 0x20] = temp3;\n            memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n            var1 = temp2;\n            var3 = 0x00;\n        \n            if (var3 >= 0x65) { goto label_211B; }\n            else { goto label_207A; }\n        }\n    }\n    \n    function specificTransferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] <= var0) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0x1b;\n        var var3 = arg2;\n    \n        if (var3 >= 0x65) { assert(); }\n    \n        if (storage[var3 * 0x03 + var2] & 0xffffffffffffffffffffffffffffffffffffffff != var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg2;\n        memory[0x20:0x40] = temp1;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x22da;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x01;\n        var1 = func_2DA3(var2, var3);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x2367;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x01;\n        var1 = func_2E3A(var2, var3);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = arg2;\n        memory[0x00:0x20] = temp4;\n        memory[0x20:0x40] = temp3;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        storage[temp5] = (storage[temp5] & ~0xff) | 0x00;\n        var1 = arg1;\n        var2 = 0x1b;\n        var3 = temp4;\n    \n        if (var3 >= 0x65) { assert(); }\n    \n        var temp6 = var3 * 0x03 + var2;\n        storage[temp6] = (var1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp7 = memory[0x40:0x60];\n        memory[temp7:temp7 + 0x20] = 0x01;\n        var temp8 = memory[0x40:0x60];\n        log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        var1 = arg2;\n        var2 = 0x686da8ab505305dea46a4a41c4f06e7d07efd52dd1a016a942b0455bf7290c18;\n        var3 = arg1;\n        var var4 = 0x1b;\n        var var5 = var1;\n    \n        if (var5 >= 0x65) { assert(); }\n    \n        var4 = storage[var5 * 0x03 + var4 + 0x01];\n        var5 = 0x1b;\n        var var6 = arg2;\n    \n        if (var6 >= 0x65) { assert(); }\n    \n        var temp9 = memory[0x40:0x60];\n        memory[temp9:temp9 + 0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp10 = temp9 + 0x20;\n        memory[temp10:temp10 + 0x20] = var4;\n        var temp11 = temp10 + 0x20;\n        memory[temp11:temp11 + 0x20] = !!(storage[var6 * 0x03 + var5 + 0x02] & 0xff);\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [stack[-5], stack[-6]]);\n        return 0x01;\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function maxSupplyPossible() returns (var r0) { return storage[0x04]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function totalSold() returns (var r0) { return storage[0x08]; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x494b420000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function zonesSwarmAddress() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x60;\n        memory[r0:r0 + 0x20] = 0x40;\n        var temp1 = r0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x3061353266323635643864363061383964653431613635303639666134373261;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = 0x6333623133306332363962343738383831313232306236353436373834393230;\n        return r0;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg1) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x00;\n        var2 = 0x00;\n    \n        if (var2 >= 0x65) {\n        label_28FE:\n            var var3 = 0x2947;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var5 = arg1;\n            var3 = func_2DA3(var4, var5);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var3 = 0x29d3;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var5 = arg1;\n            var3 = func_2E3A(var4, var5);\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = arg1;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n        label_275D:\n            var3 = msg.sender;\n            var4 = 0x1b;\n            var5 = var2;\n        \n            if (var5 >= 0x65) { assert(); }\n        \n            var temp3 = storage[var5 * 0x03 + var4] & 0xffffffffffffffffffffffffffffffffffffffff == var3;\n            var3 = temp3;\n        \n            if (!var3) {\n                if (!var3) {\n                label_28F0:\n                    var2 = var2 + 0x01;\n                \n                    if (var2 >= 0x65) { goto label_28FE; }\n                    else { goto label_275D; }\n                } else {\n                label_27D6:\n                    var3 = arg0;\n                    var4 = 0x1b;\n                    var5 = var2;\n                \n                    if (var5 >= 0x65) { assert(); }\n                \n                    var temp4 = var5 * 0x03 + var4;\n                    storage[temp4] = (var3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                    var1 = var1 + 0x01;\n                    var3 = var2;\n                    var4 = 0x686da8ab505305dea46a4a41c4f06e7d07efd52dd1a016a942b0455bf7290c18;\n                    var5 = arg0;\n                    var var6 = 0x1b;\n                    var var7 = var3;\n                \n                    if (var7 >= 0x65) { assert(); }\n                \n                    var6 = storage[var7 * 0x03 + var6 + 0x01];\n                    var7 = 0x1b;\n                    var var8 = var2;\n                \n                    if (var8 >= 0x65) { assert(); }\n                \n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp6 = temp5 + 0x20;\n                    memory[temp6:temp6 + 0x20] = var6;\n                    var temp7 = temp6 + 0x20;\n                    memory[temp7:temp7 + 0x20] = !!(storage[var8 * 0x03 + var7 + 0x02] & 0xff);\n                    var temp8 = memory[0x40:0x60];\n                    log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [stack[-5], stack[-6]]);\n                    goto label_28F0;\n                }\n            } else if (var1 >= arg1) { goto label_28F0; }\n            else { goto label_27D6; }\n        }\n    }\n    \n    function fund() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getTokenHolder(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1b;\n        var var2 = arg0;\n    \n        if (var2 < 0x65) { return storage[var2 * 0x03 + var1] & 0xffffffffffffffffffffffffffffffffffffffff; }\n        else { assert(); }\n    }\n    \n    function issuedToDate() returns (var r0) { return storage[0x07]; }\n    \n    function series(var arg0) returns (var arg0, var r1) {\n        r1 = 0x0b;\n        var var1 = arg0;\n    \n        if (var1 >= 0x08) { assert(); }\n    \n        var temp0 = var1 * 0x02 + r1;\n        arg0 = storage[temp0];\n        r1 = storage[temp0 + 0x01];\n        return arg0, r1;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function redeemEther() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = address(this).balance;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function burnedToDate() returns (var r0) { return storage[0x09]; }\n    \n    function func_2DA3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 >= arg1) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_2DC2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0b;\n        var var3 = storage[0x06];\n    \n        if (var3 >= 0x08) { assert(); }\n    \n        var temp0 = storage[var3 * 0x02 + var2];\n        var2 = temp0;\n        var3 = arg0;\n    \n        if (!var2) { assert(); }\n    \n        var temp1 = var3 % var2;\n        var1 = temp1;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(msg.sender).call.gas(!var1 * 0x08fc).value(var1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (temp3) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2E3A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n        var var2 = var1 >= temp0;\n    \n        if (!var2) {\n            if (!var2) { assert(); }\n        \n        label_2E5A:\n            return var1;\n        } else if (var1 >= arg1) { goto label_2E5A; }\n        else { assert(); }\n    }\n    \n    function func_2E65() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 41.55716609954834,
	"usage": {
		"completion_tokens": 532,
		"prompt_tokens": 18545,
		"total_tokens": 19077
	}
}