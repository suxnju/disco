{
	"address": "0x971fdec17b5f70d98d3a1017034499cf7172d9b4",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity contract equivalent to the decompiled code provided could look something like this:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract ICO {\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    uint256 public totalSupply;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    address payable public fundsWallet;\n    uint256 public unitsOneEthCanBuy;\n    uint256 public totalEthInWei;\n    bool public ico_finish;\n    bool public token_was_created;\n    uint256 public preIcoSupply;\n    uint256 public preIcoTotalSupply;\n    uint256 public icoSupply;\n    uint256 public icoTotalSupply;\n    uint256 public maxSupply;\n    uint256 public fundingEndTime;\n    uint256 public preIcoFinishTimestamp;\n    uint256 public finalTokensIssueTime;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Burn(address indexed from, uint256 value);\n\n    constructor(\n        uint256 initialSupply,\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint8 decimalUnits,\n        address payable walletAddress,\n        uint256 ethCanBuy,\n        uint256 icoEndTime\n    ) public {\n        balanceOf[msg.sender] = initialSupply;\n        totalSupply = initialSupply;\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = decimalUnits;\n        fundsWallet = walletAddress;\n        unitsOneEthCanBuy = ethCanBuy;\n        fundingEndTime = icoEndTime;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balanceOf[_from]);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function() external payable {\n        totalEthInWei = totalEthInWei + msg.value;\n        uint256 amount = msg.value * unitsOneEthCanBuy;\n        require(balanceOf[fundsWallet] >= amount);\n\n        balanceOf[fundsWallet] -= amount;\n        balanceOf[msg.sender] += amount;\n\n        emit Transfer(fundsWallet, msg.sender, amount);\n\n        fundsWallet.transfer(msg.value);\n    }\n}\n```\nPlease note, the above contract is a simplified version of the decompiled code provided and is a basic ICO contract. The actual solidity code may vary based on the actual functionality of the original contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701456941,
	"id": "chatcmpl-8R2xp42NVMkLoKSmacXWfstNRdVco",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 09:10 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 stor_2; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x5]\nuint256[] _version; // STORAGE[0x6]\nuint256 _preIcoSupply; // STORAGE[0x9]\nuint256 _preIcoTotalSupply; // STORAGE[0xa]\nuint256 _icoSupply; // STORAGE[0xb]\nuint256 _icoTotalSupply; // STORAGE[0xc]\nuint256 _maxSupply; // STORAGE[0xd]\nuint256 _totalSupply; // STORAGE[0xe]\nuint256 _unitsOneEthCanBuy; // STORAGE[0xf]\nuint256 _totalEthInWei; // STORAGE[0x10]\nuint256 _preIcoFinishTimestamp; // STORAGE[0x12]\nuint256 _fundingEndTime; // STORAGE[0x13]\nuint256 _finalTokensIssueTime; // STORAGE[0x14]\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\nuint8 _ico_finish; // STORAGE[0x11] bytes 0 to 0\nuint8 _token_was_created; // STORAGE[0x11] bytes 1 to 1\naddress _fundsWallet; // STORAGE[0x7] bytes 0 to 19\nuint160 _contractAddress; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nBurn(address, uint256);\n\nfunction fallback() public payable { \n    require(!_ico_finish);\n    require(block.timestamp < _fundingEndTime);\n    require(msg.value != 0);\n    _totalEthInWei = _totalEthInWei + msg.value;\n    if (block.timestamp >= _preIcoFinishTimestamp) {\n        require(msg.value * _unitsOneEthCanBuy <= _icoTotalSupply - _icoSupply);\n        v0 = _SafeMul(_unitsOneEthCanBuy, msg.value);\n        require(_icoSupply + v0 >= _icoSupply);\n        _icoSupply = _icoSupply + v0;\n        require(_balanceOf[msg.sender] + v0 >= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + v0;\n        require(_totalSupply + v0 >= _totalSupply);\n        _totalSupply = _totalSupply + v0;\n        emit Transfer(_contractAddress, msg.sender, v0);\n    } else {\n        require(msg.value * _unitsOneEthCanBuy * 13 / 10 <= _preIcoTotalSupply - _preIcoSupply);\n        v1 = _SafeMul(13, _unitsOneEthCanBuy);\n        v2 = _SafeDiv(10, v1);\n        v3 = _SafeMul(v2, msg.value);\n        require(_preIcoSupply + v3 >= _preIcoSupply);\n        _preIcoSupply = _preIcoSupply + v3;\n        require(_balanceOf[msg.sender] + v3 >= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + v3;\n        require(_totalSupply + v3 >= _totalSupply);\n        _totalSupply = _totalSupply + v3;\n        emit Transfer(_contractAddress, msg.sender, v3);\n    }\n}\n\nfunction preIcoFinishTimestamp() public nonPayable { \n    return _preIcoFinishTimestamp;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction ico_finish() public nonPayable { \n    return _ico_finish;\n}\n\nfunction fundsWallet() public nonPayable { \n    return _fundsWallet;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    require(_allowance[varg1] + varg2 >= _allowance[varg1]);\n    _balanceOf[varg1] = _allowance[varg1] + varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction IcoTotalSupply() public nonPayable { \n    return _icoTotalSupply;\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _fundsWallet);\n    v0 = _fundsWallet.call().value(_contractAddress.balance).gas(!_contractAddress.balance * 2300);\n    require(v0);\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    require(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    require(varg0 <= stor_2);\n    stor_2 = stor_2 - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction createTokensForCrypton() public nonPayable { \n    v0 = v1 = 0;\n    require(_ico_finish);\n    require(!_token_was_created);\n    if (block.timestamp > _finalTokensIssueTime) {\n        require(_preIcoSupply + _icoSupply >= _preIcoSupply);\n        v2 = _SafeMul(3, _preIcoSupply + _icoSupply);\n        v3 = _SafeDiv(10, v2);\n        require(_balanceOf[_fundsWallet] + v3 >= _balanceOf[_fundsWallet]);\n        _balanceOf[_fundsWallet] = _balanceOf[_fundsWallet] + v3;\n        require(_totalSupply + v3 >= _totalSupply);\n        _totalSupply = _totalSupply + v3;\n        emit Transfer(_contractAddress, _fundsWallet, v3);\n        _token_was_created = 1;\n        v0 = v4 = 1;\n    }\n    return v0;\n}\n\nfunction IcoSupply() public nonPayable { \n    return _icoSupply;\n}\n\nfunction version() public nonPayable { \n    v0 = new bytes[](_version.length);\n    v1 = v2 = v0.data;\n    if (_version.length) {\n        if (31 < _version.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _version.length <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction unitsOneEthCanBuy() public nonPayable { \n    return _unitsOneEthCanBuy;\n}\n\nfunction setTokenPrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _fundsWallet);\n    require(varg0 < 1500);\n    _unitsOneEthCanBuy = varg0;\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingEndTime() public nonPayable { \n    return _fundingEndTime;\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    require(varg1 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    require(varg1 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    require(varg1 <= stor_2);\n    stor_2 = stor_2 - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction stopIco() public nonPayable { \n    v0 = v1 = 0;\n    if (block.timestamp > _fundingEndTime) {\n        _ico_finish = 1;\n        v0 = v2 = 1;\n    }\n    return v0;\n}\n\nfunction preIcoSupply() public nonPayable { \n    return _preIcoSupply;\n}\n\nfunction totalEthInWei() public nonPayable { \n    return _totalEthInWei;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction safeSub(uint256 varg0, uint256 varg1) public nonPayable { \n    require(varg1 <= varg0);\n    return varg0 - varg1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    require(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction finalTokensIssueTime() public nonPayable { \n    return _finalTokensIssueTime;\n}\n\nfunction safeDiv(uint256 varg0, uint256 varg1) public nonPayable { \n    v0 = _SafeDiv(varg1, varg0);\n    return v0;\n}\n\nfunction token_was_created() public nonPayable { \n    return _token_was_created;\n}\n\nfunction safeMul(uint256 varg0, uint256 varg1) public nonPayable { \n    v0 = _SafeMul(varg1, varg0);\n    return v0;\n}\n\nfunction maxSupply() public nonPayable { \n    return _maxSupply;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction safeAdd(uint256 varg0, uint256 varg1) public nonPayable { \n    require(varg0 + varg1 >= varg0);\n    return varg0 + varg1;\n}\n\nfunction preIcoTotalSupply() public nonPayable { \n    return _preIcoTotalSupply;\n}\n\nfunction contractAddress() public nonPayable { \n    return _contractAddress;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    require(v1);\n    return v0;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    require(varg0 > 0);\n    assert(varg0);\n    return varg1 / varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x214e9cf == function_selector) {\n            preIcoFinishTimestamp();\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x1ce7d9da == function_selector) {\n            ico_finish();\n        } else if (0x2194f3a2 == function_selector) {\n            fundsWallet();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x363db35d == function_selector) {\n            IcoTotalSupply();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x45ff59b2 == function_selector) {\n            createTokensForCrypton();\n        } else if (0x51f550be == function_selector) {\n            IcoSupply();\n        } else if (0x54fd4d50 == function_selector) {\n            version();\n        } else if (0x65f2bc2e == function_selector) {\n            unitsOneEthCanBuy();\n        } else if (0x6a61e5fc == function_selector) {\n            setTokenPrice(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x74eedd46 == function_selector) {\n            fundingEndTime();\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x7b274afc == function_selector) {\n            stopIco();\n        } else if (0x8b3e23d9 == function_selector) {\n            preIcoSupply();\n        } else if (0x933ba413 == function_selector) {\n            totalEthInWei();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa293d1e8 == function_selector) {\n            safeSub(uint256,uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xada1b74e == function_selector) {\n            finalTokensIssueTime();\n        } else if (0xb5931f7c == function_selector) {\n            safeDiv(uint256,uint256);\n        } else if (0xb5d7eca5 == function_selector) {\n            token_was_created();\n        } else if (0xd05c78da == function_selector) {\n            safeMul(uint256,uint256);\n        } else if (0xd5abeb01 == function_selector) {\n            maxSupply();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe6cb9013 == function_selector) {\n            safeAdd(uint256,uint256);\n        } else if (0xef7c9ecd == function_selector) {\n            preIcoTotalSupply();\n        } else if (0xf6b4dfb4 == function_selector) {\n            contractAddress();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 09:10 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 stor_2; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x5]\nuint256[] _version; // STORAGE[0x6]\nuint256 _preIcoSupply; // STORAGE[0x9]\nuint256 _preIcoTotalSupply; // STORAGE[0xa]\nuint256 _icoSupply; // STORAGE[0xb]\nuint256 _icoTotalSupply; // STORAGE[0xc]\nuint256 _maxSupply; // STORAGE[0xd]\nuint256 _totalSupply; // STORAGE[0xe]\nuint256 _unitsOneEthCanBuy; // STORAGE[0xf]\nuint256 _totalEthInWei; // STORAGE[0x10]\nuint256 _preIcoFinishTimestamp; // STORAGE[0x12]\nuint256 _fundingEndTime; // STORAGE[0x13]\nuint256 _finalTokensIssueTime; // STORAGE[0x14]\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\nuint8 _ico_finish; // STORAGE[0x11] bytes 0 to 0\nuint8 _token_was_created; // STORAGE[0x11] bytes 1 to 1\naddress _fundsWallet; // STORAGE[0x7] bytes 0 to 19\nuint160 _contractAddress; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nBurn(address, uint256);\n\nfunction fallback() public payable { \n    require(!_ico_finish);\n    require(block.timestamp < _fundingEndTime);\n    require(msg.value != 0);\n    _totalEthInWei = _totalEthInWei + msg.value;\n    if (block.timestamp >= _preIcoFinishTimestamp) {\n        require(msg.value * _unitsOneEthCanBuy <= _icoTotalSupply - _icoSupply);\n        v0 = _SafeMul(_unitsOneEthCanBuy, msg.value);\n        require(_icoSupply + v0 >= _icoSupply);\n        _icoSupply = _icoSupply + v0;\n        require(_balanceOf[msg.sender] + v0 >= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + v0;\n        require(_totalSupply + v0 >= _totalSupply);\n        _totalSupply = _totalSupply + v0;\n        emit Transfer(_contractAddress, msg.sender, v0);\n    } else {\n        require(msg.value * _unitsOneEthCanBuy * 13 / 10 <= _preIcoTotalSupply - _preIcoSupply);\n        v1 = _SafeMul(13, _unitsOneEthCanBuy);\n        v2 = _SafeDiv(10, v1);\n        v3 = _SafeMul(v2, msg.value);\n        require(_preIcoSupply + v3 >= _preIcoSupply);\n        _preIcoSupply = _preIcoSupply + v3;\n        require(_balanceOf[msg.sender] + v3 >= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + v3;\n        require(_totalSupply + v3 >= _totalSupply);\n        _totalSupply = _totalSupply + v3;\n        emit Transfer(_contractAddress, msg.sender, v3);\n    }\n}\n\nfunction preIcoFinishTimestamp() public nonPayable { \n    return _preIcoFinishTimestamp;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction ico_finish() public nonPayable { \n    return _ico_finish;\n}\n\nfunction fundsWallet() public nonPayable { \n    return _fundsWallet;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    require(_allowance[varg1] + varg2 >= _allowance[varg1]);\n    _balanceOf[varg1] = _allowance[varg1] + varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction IcoTotalSupply() public nonPayable { \n    return _icoTotalSupply;\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _fundsWallet);\n    v0 = _fundsWallet.call().value(_contractAddress.balance).gas(!_contractAddress.balance * 2300);\n    require(v0);\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    require(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    require(varg0 <= stor_2);\n    stor_2 = stor_2 - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction createTokensForCrypton() public nonPayable { \n    v0 = v1 = 0;\n    require(_ico_finish);\n    require(!_token_was_created);\n    if (block.timestamp > _finalTokensIssueTime) {\n        require(_preIcoSupply + _icoSupply >= _preIcoSupply);\n        v2 = _SafeMul(3, _preIcoSupply + _icoSupply);\n        v3 = _SafeDiv(10, v2);\n        require(_balanceOf[_fundsWallet] + v3 >= _balanceOf[_fundsWallet]);\n        _balanceOf[_fundsWallet] = _balanceOf[_fundsWallet] + v3;\n        require(_totalSupply + v3 >= _totalSupply);\n        _totalSupply = _totalSupply + v3;\n        emit Transfer(_contractAddress, _fundsWallet, v3);\n        _token_was_created = 1;\n        v0 = v4 = 1;\n    }\n    return v0;\n}\n\nfunction IcoSupply() public nonPayable { \n    return _icoSupply;\n}\n\nfunction version() public nonPayable { \n    v0 = new bytes[](_version.length);\n    v1 = v2 = v0.data;\n    if (_version.length) {\n        if (31 < _version.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _version.length <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction unitsOneEthCanBuy() public nonPayable { \n    return _unitsOneEthCanBuy;\n}\n\nfunction setTokenPrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _fundsWallet);\n    require(varg0 < 1500);\n    _unitsOneEthCanBuy = varg0;\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingEndTime() public nonPayable { \n    return _fundingEndTime;\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    require(varg1 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    require(varg1 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    require(varg1 <= stor_2);\n    stor_2 = stor_2 - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction stopIco() public nonPayable { \n    v0 = v1 = 0;\n    if (block.timestamp > _fundingEndTime) {\n        _ico_finish = 1;\n        v0 = v2 = 1;\n    }\n    return v0;\n}\n\nfunction preIcoSupply() public nonPayable { \n    return _preIcoSupply;\n}\n\nfunction totalEthInWei() public nonPayable { \n    return _totalEthInWei;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction safeSub(uint256 varg0, uint256 varg1) public nonPayable { \n    require(varg1 <= varg0);\n    return varg0 - varg1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    require(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction finalTokensIssueTime() public nonPayable { \n    return _finalTokensIssueTime;\n}\n\nfunction safeDiv(uint256 varg0, uint256 varg1) public nonPayable { \n    v0 = _SafeDiv(varg1, varg0);\n    return v0;\n}\n\nfunction token_was_created() public nonPayable { \n    return _token_was_created;\n}\n\nfunction safeMul(uint256 varg0, uint256 varg1) public nonPayable { \n    v0 = _SafeMul(varg1, varg0);\n    return v0;\n}\n\nfunction maxSupply() public nonPayable { \n    return _maxSupply;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction safeAdd(uint256 varg0, uint256 varg1) public nonPayable { \n    require(varg0 + varg1 >= varg0);\n    return varg0 + varg1;\n}\n\nfunction preIcoTotalSupply() public nonPayable { \n    return _preIcoTotalSupply;\n}\n\nfunction contractAddress() public nonPayable { \n    return _contractAddress;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    require(v1);\n    return v0;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    require(varg0 > 0);\n    assert(varg0);\n    return varg1 / varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x214e9cf == function_selector) {\n            preIcoFinishTimestamp();\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x1ce7d9da == function_selector) {\n            ico_finish();\n        } else if (0x2194f3a2 == function_selector) {\n            fundsWallet();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x363db35d == function_selector) {\n            IcoTotalSupply();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x45ff59b2 == function_selector) {\n            createTokensForCrypton();\n        } else if (0x51f550be == function_selector) {\n            IcoSupply();\n        } else if (0x54fd4d50 == function_selector) {\n            version();\n        } else if (0x65f2bc2e == function_selector) {\n            unitsOneEthCanBuy();\n        } else if (0x6a61e5fc == function_selector) {\n            setTokenPrice(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x74eedd46 == function_selector) {\n            fundingEndTime();\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x7b274afc == function_selector) {\n            stopIco();\n        } else if (0x8b3e23d9 == function_selector) {\n            preIcoSupply();\n        } else if (0x933ba413 == function_selector) {\n            totalEthInWei();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa293d1e8 == function_selector) {\n            safeSub(uint256,uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xada1b74e == function_selector) {\n            finalTokensIssueTime();\n        } else if (0xb5931f7c == function_selector) {\n            safeDiv(uint256,uint256);\n        } else if (0xb5d7eca5 == function_selector) {\n            token_was_created();\n        } else if (0xd05c78da == function_selector) {\n            safeMul(uint256,uint256);\n        } else if (0xd5abeb01 == function_selector) {\n            maxSupply();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe6cb9013 == function_selector) {\n            safeAdd(uint256,uint256);\n        } else if (0xef7c9ecd == function_selector) {\n            preIcoTotalSupply();\n        } else if (0xf6b4dfb4 == function_selector) {\n            contractAddress();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 09:10 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 stor_2; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x5]\nuint256[] _version; // STORAGE[0x6]\nuint256 _preIcoSupply; // STORAGE[0x9]\nuint256 _preIcoTotalSupply; // STORAGE[0xa]\nuint256 _icoSupply; // STORAGE[0xb]\nuint256 _icoTotalSupply; // STORAGE[0xc]\nuint256 _maxSupply; // STORAGE[0xd]\nuint256 _totalSupply; // STORAGE[0xe]\nuint256 _unitsOneEthCanBuy; // STORAGE[0xf]\nuint256 _totalEthInWei; // STORAGE[0x10]\nuint256 _preIcoFinishTimestamp; // STORAGE[0x12]\nuint256 _fundingEndTime; // STORAGE[0x13]\nuint256 _finalTokensIssueTime; // STORAGE[0x14]\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\nuint8 _ico_finish; // STORAGE[0x11] bytes 0 to 0\nuint8 _token_was_created; // STORAGE[0x11] bytes 1 to 1\naddress _fundsWallet; // STORAGE[0x7] bytes 0 to 19\nuint160 _contractAddress; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nBurn(address, uint256);\n\nfunction fallback() public payable { \n    require(!_ico_finish);\n    require(block.timestamp < _fundingEndTime);\n    require(msg.value != 0);\n    _totalEthInWei = _totalEthInWei + msg.value;\n    if (block.timestamp >= _preIcoFinishTimestamp) {\n        require(msg.value * _unitsOneEthCanBuy <= _icoTotalSupply - _icoSupply);\n        v0 = _SafeMul(_unitsOneEthCanBuy, msg.value);\n        require(_icoSupply + v0 >= _icoSupply);\n        _icoSupply = _icoSupply + v0;\n        require(_balanceOf[msg.sender] + v0 >= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + v0;\n        require(_totalSupply + v0 >= _totalSupply);\n        _totalSupply = _totalSupply + v0;\n        emit Transfer(_contractAddress, msg.sender, v0);\n    } else {\n        require(msg.value * _unitsOneEthCanBuy * 13 / 10 <= _preIcoTotalSupply - _preIcoSupply);\n        v1 = _SafeMul(13, _unitsOneEthCanBuy);\n        v2 = _SafeDiv(10, v1);\n        v3 = _SafeMul(v2, msg.value);\n        require(_preIcoSupply + v3 >= _preIcoSupply);\n        _preIcoSupply = _preIcoSupply + v3;\n        require(_balanceOf[msg.sender] + v3 >= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + v3;\n        require(_totalSupply + v3 >= _totalSupply);\n        _totalSupply = _totalSupply + v3;\n        emit Transfer(_contractAddress, msg.sender, v3);\n    }\n}\n\nfunction preIcoFinishTimestamp() public nonPayable { \n    return _preIcoFinishTimestamp;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction ico_finish() public nonPayable { \n    return _ico_finish;\n}\n\nfunction fundsWallet() public nonPayable { \n    return _fundsWallet;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    require(_allowance[varg1] + varg2 >= _allowance[varg1]);\n    _balanceOf[varg1] = _allowance[varg1] + varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction IcoTotalSupply() public nonPayable { \n    return _icoTotalSupply;\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _fundsWallet);\n    v0 = _fundsWallet.call().value(_contractAddress.balance).gas(!_contractAddress.balance * 2300);\n    require(v0);\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    require(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    require(varg0 <= stor_2);\n    stor_2 = stor_2 - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction createTokensForCrypton() public nonPayable { \n    v0 = v1 = 0;\n    require(_ico_finish);\n    require(!_token_was_created);\n    if (block.timestamp > _finalTokensIssueTime) {\n        require(_preIcoSupply + _icoSupply >= _preIcoSupply);\n        v2 = _SafeMul(3, _preIcoSupply + _icoSupply);\n        v3 = _SafeDiv(10, v2);\n        require(_balanceOf[_fundsWallet] + v3 >= _balanceOf[_fundsWallet]);\n        _balanceOf[_fundsWallet] = _balanceOf[_fundsWallet] + v3;\n        require(_totalSupply + v3 >= _totalSupply);\n        _totalSupply = _totalSupply + v3;\n        emit Transfer(_contractAddress, _fundsWallet, v3);\n        _token_was_created = 1;\n        v0 = v4 = 1;\n    }\n    return v0;\n}\n\nfunction IcoSupply() public nonPayable { \n    return _icoSupply;\n}\n\nfunction version() public nonPayable { \n    v0 = new bytes[](_version.length);\n    v1 = v2 = v0.data;\n    if (_version.length) {\n        if (31 < _version.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _version.length <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction unitsOneEthCanBuy() public nonPayable { \n    return _unitsOneEthCanBuy;\n}\n\nfunction setTokenPrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _fundsWallet);\n    require(varg0 < 1500);\n    _unitsOneEthCanBuy = varg0;\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingEndTime() public nonPayable { \n    return _fundingEndTime;\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    require(varg1 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    require(varg1 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    require(varg1 <= stor_2);\n    stor_2 = stor_2 - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction stopIco() public nonPayable { \n    v0 = v1 = 0;\n    if (block.timestamp > _fundingEndTime) {\n        _ico_finish = 1;\n        v0 = v2 = 1;\n    }\n    return v0;\n}\n\nfunction preIcoSupply() public nonPayable { \n    return _preIcoSupply;\n}\n\nfunction totalEthInWei() public nonPayable { \n    return _totalEthInWei;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction safeSub(uint256 varg0, uint256 varg1) public nonPayable { \n    require(varg1 <= varg0);\n    return varg0 - varg1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    require(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction finalTokensIssueTime() public nonPayable { \n    return _finalTokensIssueTime;\n}\n\nfunction safeDiv(uint256 varg0, uint256 varg1) public nonPayable { \n    v0 = _SafeDiv(varg1, varg0);\n    return v0;\n}\n\nfunction token_was_created() public nonPayable { \n    return _token_was_created;\n}\n\nfunction safeMul(uint256 varg0, uint256 varg1) public nonPayable { \n    v0 = _SafeMul(varg1, varg0);\n    return v0;\n}\n\nfunction maxSupply() public nonPayable { \n    return _maxSupply;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction safeAdd(uint256 varg0, uint256 varg1) public nonPayable { \n    require(varg0 + varg1 >= varg0);\n    return varg0 + varg1;\n}\n\nfunction preIcoTotalSupply() public nonPayable { \n    return _preIcoTotalSupply;\n}\n\nfunction contractAddress() public nonPayable { \n    return _contractAddress;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    require(v1);\n    return v0;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    require(varg0 > 0);\n    assert(varg0);\n    return varg1 / varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x214e9cf == function_selector) {\n            preIcoFinishTimestamp();\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x1ce7d9da == function_selector) {\n            ico_finish();\n        } else if (0x2194f3a2 == function_selector) {\n            fundsWallet();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x363db35d == function_selector) {\n            IcoTotalSupply();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x45ff59b2 == function_selector) {\n            createTokensForCrypton();\n        } else if (0x51f550be == function_selector) {\n            IcoSupply();\n        } else if (0x54fd4d50 == function_selector) {\n            version();\n        } else if (0x65f2bc2e == function_selector) {\n            unitsOneEthCanBuy();\n        } else if (0x6a61e5fc == function_selector) {\n            setTokenPrice(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x74eedd46 == function_selector) {\n            fundingEndTime();\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x7b274afc == function_selector) {\n            stopIco();\n        } else if (0x8b3e23d9 == function_selector) {\n            preIcoSupply();\n        } else if (0x933ba413 == function_selector) {\n            totalEthInWei();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa293d1e8 == function_selector) {\n            safeSub(uint256,uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xada1b74e == function_selector) {\n            finalTokensIssueTime();\n        } else if (0xb5931f7c == function_selector) {\n            safeDiv(uint256,uint256);\n        } else if (0xb5d7eca5 == function_selector) {\n            token_was_created();\n        } else if (0xd05c78da == function_selector) {\n            safeMul(uint256,uint256);\n        } else if (0xd5abeb01 == function_selector) {\n            maxSupply();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe6cb9013 == function_selector) {\n            safeAdd(uint256,uint256);\n        } else if (0xef7c9ecd == function_selector) {\n            preIcoTotalSupply();\n        } else if (0xf6b4dfb4 == function_selector) {\n            contractAddress();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 32.43433237075806,
	"usage": {
		"completion_tokens": 702,
		"prompt_tokens": 4063,
		"total_tokens": 4765
	}
}