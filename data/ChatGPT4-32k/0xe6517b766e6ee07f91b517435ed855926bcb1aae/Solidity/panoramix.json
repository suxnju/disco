{
	"address": "0xe6517b766e6ee07f91b517435ed855926bcb1aae",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the corresponding Solidity code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract BettingContract {\n    address public owner;\n    address public treasuryAddress;\n    uint256 public contractBalance;\n    uint256 public houseEdge;\n    uint256 public maxProfit;\n    uint256 public maxProfitAsPercentOfHouse;\n    uint256 public minBet;\n    uint256 public totalBets;\n    uint256 public totalUserProfit;\n    uint256 public maxPendingPayouts;\n    mapping(address => uint256) public playerGetPendingTxBy;\n\n    constructor() public {\n        owner = msg.sender;\n        treasuryAddress = msg.sender;\n        contractBalance = 0;\n        houseEdge = 0;\n        maxProfit = 0;\n        maxProfitAsPercentOfHouse = 0;\n        minBet = 0;\n        totalBets = 0;\n        totalUserProfit = 0;\n        maxPendingPayouts = 0;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyTreasury {\n        require(msg.sender == treasuryAddress);\n        _;\n    }\n\n    function kill() public onlyOwner {\n        selfdestruct(msg.sender);\n    }\n\n    function setMinBet(uint256 _minBet) public onlyOwner {\n        minBet = _minBet;\n    }\n\n    function setHouseEdge(uint256 _houseEdge) public onlyOwner {\n        houseEdge = _houseEdge;\n    }\n\n    function setTreasury(address _treasury) public onlyOwner {\n        treasuryAddress = _treasury;\n    }\n\n    function addBankroll() public payable onlyTreasury {\n        require(contractBalance + msg.value >= contractBalance);\n        contractBalance += msg.value;\n        maxProfit = maxProfitAsPercentOfHouse * contractBalance / 10^6;\n    }\n\n    function setMaxProfitAsPercentOfHouse(uint256 _maxProfitAsPercent) public onlyOwner {\n        require(_maxProfitAsPercent <= 50000);\n        maxProfitAsPercentOfHouse = _maxProfitAsPercent;\n        maxProfit = maxProfitAsPercentOfHouse * contractBalance / 10^6;\n    }\n\n    // rest of the contract...\n}\n```\nPlease note that this is a simplified version of the corresponding Solidity code and some functions (like the playerRollDice) and other implementation details are not included. Also, please note that the Solidity 0.5.0 version is used, your actual version may vary. You will need to implement the rest of the functions and details yourself based on your needs.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472304,
	"id": "chatcmpl-8MuoariQsy5ing0YPwLtGB2yBjnBT",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\nconst maxBetDivisor = 10^6\nconst maxNumber = 99\nconst minNumber = 2\nconst houseEdgeDivisor = 1000\n\ndef storage:\n  stor0 is address at storage 0\n  stor1 is uint8 at storage 1 offset 160\n  gasForOraclize is uint32 at storage 1 offset 168\n  stor1 is uint128 at storage 1 offset 160\n  stor1 is uint256 at storage 1\n  stor2 is uint8 at storage 2 offset 160\n  stor2 is uint128 at storage 2 offset 160\n  owner is address at storage 2\n  treasuryAddress is address at storage 3\n  contractBalance is uint256 at storage 4\n  houseEdge is uint256 at storage 5\n  maxProfit is uint256 at storage 6\n  maxProfitAsPercentOfHouse is uint256 at storage 7\n  minBet is uint256 at storage 8\n  totalBets is uint256 at storage 9\n  totalUserProfit is uint256 at storage 10\n  maxPendingPayouts is uint256 at storage 11\n  stor12 is mapping of address at storage 12\n  playerGetPendingTxBy is mapping of uint256 at storage 20\n\ndef maxProfitAsPercentOfHouse(): # not payable\n  return maxProfitAsPercentOfHouse\n\ndef payoutsPaused(): # not payable\n  return bool(uint8(stor2.field_160))\n\ndef playerGetPendingTxByAddress(address addressToCheck): # not payable\n  return playerGetPendingTxBy[address(addressToCheck)]\n\ndef treasury(): # not payable\n  return treasuryAddress\n\ndef gasForOraclize(): # not payable\n  return gasForOraclize\n\ndef contractBalance(): # not payable\n  return contractBalance\n\ndef owner(): # not payable\n  return owner\n\ndef minBet(): # not payable\n  return minBet\n\ndef maxProfit(): # not payable\n  return maxProfit\n\ndef totalUserProfit(): # not payable\n  return totalUserProfit\n\ndef totalBets(): # not payable\n  return totalBets\n\ndef gamePaused(): # not payable\n  return bool(uint8(stor1.field_160))\n\ndef houseEdge(): # not payable\n  return houseEdge\n\ndef maxPendingPayouts(): # not payable\n  return maxPendingPayouts\n\n#\n#  Regular functions\n#\n\ndef ownerkill(): # not payable\n  require owner == caller\n  selfdestruct(owner)\n\ndef ownerChangeOwner(address newOwner): # not payable\n  require owner == caller\n  owner = newOwner\n\ndef ownerSetMinBet(uint256 newMinimumBet): # not payable\n  require owner == caller\n  minBet = newMinimumBet\n\ndef ownerSetHouseEdge(uint256 newHouseEdge): # not payable\n  require owner == caller\n  houseEdge = newHouseEdge\n\ndef ownerSetTreasury(address newTreasury): # not payable\n  require owner == caller\n  treasuryAddress = newTreasury\n\ndef ownerSetOraclizeSafeGas(uint32 newSafeGasToOraclize): # not payable\n  require owner == caller\n  gasForOraclize = newSafeGasToOraclize\n\ndef ownerPauseGame(bool newStatus): # not payable\n  require owner == caller\n  Mask(96, 0, stor1.field_160) = Mask(96, 0, newStatus)\n\ndef ownerPausePayouts(bool newPayoutStatus): # not payable\n  require owner == caller\n  Mask(96, 0, stor2.field_160) = Mask(96, 0, newPayoutStatus)\n\ndef ownerAddBankroll() payable: \n  require treasuryAddress == caller\n  require contractBalance + call.value >= contractBalance\n  contractBalance += call.value\n  maxProfit = maxProfitAsPercentOfHouse * contractBalance / 10^6\n\ndef ownerSetMaxProfitAsPercentOfHouse(uint256 newMaxProfitAsPercent): # not payable\n  require owner == caller\n  require newMaxProfitAsPercent <= 50000\n  maxProfitAsPercentOfHouse = newMaxProfitAsPercent\n  maxProfit = maxProfitAsPercentOfHouse * contractBalance / 10^6\n\ndef playerWithdrawPendingTransactions(): # not payable\n  require bool(uint8(stor2.field_160)) != 1\n  playerGetPendingTxBy[caller] = 0\n  call caller with:\n     value playerGetPendingTxBy[caller] wei\n       gas gas_remaining - 34050 wei\n  if not ext_call.success:\n      return 0\n  return 1\n\ndef ownerTransferEther(address sendTo, uint256 amount): # not payable\n  require owner == caller\n  require amount <= contractBalance\n  contractBalance -= amount\n  maxProfit = maxProfitAsPercentOfHouse * contractBalance / 10^6\n  call sendTo with:\n     value amount wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log LogOwnerTransfer(\n        address SentToAddress=sendTo,\n        uint256 AmountTransferred=amount)\n\ndef ownerRefundPlayer(bytes32 originalPlayerBetId, address sendTo, uint256 originalPlayerProfit, uint256 originalPlayerBetValue): # not payable\n  require owner == caller\n  require originalPlayerProfit <= maxPendingPayouts\n  maxPendingPayouts -= originalPlayerProfit\n  call sendTo with:\n     value originalPlayerBetValue wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log LogRefund(\n        bytes32 BetID=originalPlayerBetId,\n        address PlayerAddress=sendTo,\n        uint256 RefundValue=originalPlayerBetValue)\n\ndef _fallback(?) payable: # default function\n  require bool(uint8(stor1.field_160)) != 1\n  require ((54 * call.value / 46 * houseEdge) + (call.value * houseEdge) / 1000) - call.value <= maxProfit\n  require call.value >= minBet\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                  stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n              else:\n                  if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                      stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                  else:\n                      if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                          stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                      else:\n                          if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                              stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n      require ext_code.size(stor0)\n  else:\n      if not ext_code.size(stor0):\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n          else:\n              if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n                  stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n              else:\n                  if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                      stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n                  else:\n                      if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                          stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                      else:\n                          if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                              stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                          else:\n                              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n          require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1.field_0) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1.field_0))\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef __callback(bytes32 myid, string result): # not payable\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                  stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n              else:\n                  if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                      stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                  else:\n                      if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                          stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                      else:\n                          if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                              stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n      require ext_code.size(stor0)\n  else:\n      if not ext_code.size(stor0):\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n          else:\n              if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n                  stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n              else:\n                  if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                      stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n                  else:\n                      if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                          stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                      else:\n                          if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                              stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                          else:\n                              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n          require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1.field_0) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1.field_0))\n  require ext_code.size(address(ext_call.return_data[0]))\n  call address(ext_call.return_data[0]).cbAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  require caller == ext_call.return_data[12 len 20]\n  require bool(uint8(stor2.field_160)) != 1\n  require stor12[myid]\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef __callback(bytes32 myid, string result, bytes proof): # not payable\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                  stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n              else:\n                  if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                      stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                  else:\n                      if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                          stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                      else:\n                          if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                              stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n      require ext_code.size(stor0)\n  else:\n      if not ext_code.size(stor0):\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n          else:\n              if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n                  stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n              else:\n                  if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                      stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n                  else:\n                      if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                          stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                      else:\n                          if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                              stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                          else:\n                              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n          require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1.field_0) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1.field_0))\n  require ext_code.size(address(ext_call.return_data[0]))\n  call address(ext_call.return_data[0]).cbAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  require caller == ext_call.return_data[12 len 20]\n  require bool(uint8(stor2.field_160)) != 1\n  require stor12[myid]\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef playerRollDice(uint256 rollUnder) payable: \n  require bool(uint8(stor1.field_160)) != 1\n  require 1 <= rollUnder\n  require rollUnder - 1\n  require (((101 * call.value) - (rollUnder * call.value) / rollUnder - 1 * houseEdge) + (call.value * houseEdge) / 1000) - call.value <= maxProfit\n  require call.value >= minBet\n  require rollUnder >= 2\n  require rollUnder <= 99\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                  stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n              else:\n                  if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                      stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                  else:\n                      if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                          stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                      else:\n                          if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                              stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n      require ext_code.size(stor0)\n  else:\n      if not ext_code.size(stor0):\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n          else:\n              if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n                  stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n              else:\n                  if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                      stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n                  else:\n                      if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                          stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                      else:\n                          if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                              stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                          else:\n                              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n          require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1.field_0) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1.field_0))\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: # Palkeoramix decompiler. \n\nconst maxBetDivisor = 10^6\nconst maxNumber = 99\nconst minNumber = 2\nconst houseEdgeDivisor = 1000\n\ndef storage:\n  stor0 is address at storage 0\n  stor1 is uint8 at storage 1 offset 160\n  gasForOraclize is uint32 at storage 1 offset 168\n  stor1 is uint128 at storage 1 offset 160\n  stor1 is uint256 at storage 1\n  stor2 is uint8 at storage 2 offset 160\n  stor2 is uint128 at storage 2 offset 160\n  owner is address at storage 2\n  treasuryAddress is address at storage 3\n  contractBalance is uint256 at storage 4\n  houseEdge is uint256 at storage 5\n  maxProfit is uint256 at storage 6\n  maxProfitAsPercentOfHouse is uint256 at storage 7\n  minBet is uint256 at storage 8\n  totalBets is uint256 at storage 9\n  totalUserProfit is uint256 at storage 10\n  maxPendingPayouts is uint256 at storage 11\n  stor12 is mapping of address at storage 12\n  playerGetPendingTxBy is mapping of uint256 at storage 20\n\ndef maxProfitAsPercentOfHouse(): # not payable\n  return maxProfitAsPercentOfHouse\n\ndef payoutsPaused(): # not payable\n  return bool(uint8(stor2.field_160))\n\ndef playerGetPendingTxByAddress(address addressToCheck): # not payable\n  return playerGetPendingTxBy[address(addressToCheck)]\n\ndef treasury(): # not payable\n  return treasuryAddress\n\ndef gasForOraclize(): # not payable\n  return gasForOraclize\n\ndef contractBalance(): # not payable\n  return contractBalance\n\ndef owner(): # not payable\n  return owner\n\ndef minBet(): # not payable\n  return minBet\n\ndef maxProfit(): # not payable\n  return maxProfit\n\ndef totalUserProfit(): # not payable\n  return totalUserProfit\n\ndef totalBets(): # not payable\n  return totalBets\n\ndef gamePaused(): # not payable\n  return bool(uint8(stor1.field_160))\n\ndef houseEdge(): # not payable\n  return houseEdge\n\ndef maxPendingPayouts(): # not payable\n  return maxPendingPayouts\n\n#\n#  Regular functions\n#\n\ndef ownerkill(): # not payable\n  require owner == caller\n  selfdestruct(owner)\n\ndef ownerChangeOwner(address newOwner): # not payable\n  require owner == caller\n  owner = newOwner\n\ndef ownerSetMinBet(uint256 newMinimumBet): # not payable\n  require owner == caller\n  minBet = newMinimumBet\n\ndef ownerSetHouseEdge(uint256 newHouseEdge): # not payable\n  require owner == caller\n  houseEdge = newHouseEdge\n\ndef ownerSetTreasury(address newTreasury): # not payable\n  require owner == caller\n  treasuryAddress = newTreasury\n\ndef ownerSetOraclizeSafeGas(uint32 newSafeGasToOraclize): # not payable\n  require owner == caller\n  gasForOraclize = newSafeGasToOraclize\n\ndef ownerPauseGame(bool newStatus): # not payable\n  require owner == caller\n  Mask(96, 0, stor1.field_160) = Mask(96, 0, newStatus)\n\ndef ownerPausePayouts(bool newPayoutStatus): # not payable\n  require owner == caller\n  Mask(96, 0, stor2.field_160) = Mask(96, 0, newPayoutStatus)\n\ndef ownerAddBankroll() payable: \n  require treasuryAddress == caller\n  require contractBalance + call.value >= contractBalance\n  contractBalance += call.value\n  maxProfit = maxProfitAsPercentOfHouse * contractBalance / 10^6\n\ndef ownerSetMaxProfitAsPercentOfHouse(uint256 newMaxProfitAsPercent): # not payable\n  require owner == caller\n  require newMaxProfitAsPercent <= 50000\n  maxProfitAsPercentOfHouse = newMaxProfitAsPercent\n  maxProfit = maxProfitAsPercentOfHouse * contractBalance / 10^6\n\ndef playerWithdrawPendingTransactions(): # not payable\n  require bool(uint8(stor2.field_160)) != 1\n  playerGetPendingTxBy[caller] = 0\n  call caller with:\n     value playerGetPendingTxBy[caller] wei\n       gas gas_remaining - 34050 wei\n  if not ext_call.success:\n      return 0\n  return 1\n\ndef ownerTransferEther(address sendTo, uint256 amount): # not payable\n  require owner == caller\n  require amount <= contractBalance\n  contractBalance -= amount\n  maxProfit = maxProfitAsPercentOfHouse * contractBalance / 10^6\n  call sendTo with:\n     value amount wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log LogOwnerTransfer(\n        address SentToAddress=sendTo,\n        uint256 AmountTransferred=amount)\n\ndef ownerRefundPlayer(bytes32 originalPlayerBetId, address sendTo, uint256 originalPlayerProfit, uint256 originalPlayerBetValue): # not payable\n  require owner == caller\n  require originalPlayerProfit <= maxPendingPayouts\n  maxPendingPayouts -= originalPlayerProfit\n  call sendTo with:\n     value originalPlayerBetValue wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log LogRefund(\n        bytes32 BetID=originalPlayerBetId,\n        address PlayerAddress=sendTo,\n        uint256 RefundValue=originalPlayerBetValue)\n\ndef _fallback(?) payable: # default function\n  require bool(uint8(stor1.field_160)) != 1\n  require ((54 * call.value / 46 * houseEdge) + (call.value * houseEdge) / 1000) - call.value <= maxProfit\n  require call.value >= minBet\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                  stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n              else:\n                  if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                      stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                  else:\n                      if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                          stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                      else:\n                          if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                              stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n      require ext_code.size(stor0)\n  else:\n      if not ext_code.size(stor0):\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n          else:\n              if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n                  stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n              else:\n                  if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                      stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n                  else:\n                      if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                          stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                      else:\n                          if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                              stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                          else:\n                              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n          require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1.field_0) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1.field_0))\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef __callback(bytes32 myid, string result): # not payable\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                  stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n              else:\n                  if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                      stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                  else:\n                      if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                          stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                      else:\n                          if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                              stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n      require ext_code.size(stor0)\n  else:\n      if not ext_code.size(stor0):\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n          else:\n              if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n                  stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n              else:\n                  if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                      stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n                  else:\n                      if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                          stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                      else:\n                          if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                              stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                          else:\n                              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n          require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1.field_0) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1.field_0))\n  require ext_code.size(address(ext_call.return_data[0]))\n  call address(ext_call.return_data[0]).cbAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  require caller == ext_call.return_data[12 len 20]\n  require bool(uint8(stor2.field_160)) != 1\n  require stor12[myid]\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef __callback(bytes32 myid, string result, bytes proof): # not payable\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                  stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n              else:\n                  if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                      stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                  else:\n                      if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                          stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                      else:\n                          if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                              stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n      require ext_code.size(stor0)\n  else:\n      if not ext_code.size(stor0):\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n          else:\n              if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n                  stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n              else:\n                  if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                      stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n                  else:\n                      if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                          stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                      else:\n                          if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                              stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                          else:\n                              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n          require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1.field_0) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1.field_0))\n  require ext_code.size(address(ext_call.return_data[0]))\n  call address(ext_call.return_data[0]).cbAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  require caller == ext_call.return_data[12 len 20]\n  require bool(uint8(stor2.field_160)) != 1\n  require stor12[myid]\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef playerRollDice(uint256 rollUnder) payable: \n  require bool(uint8(stor1.field_160)) != 1\n  require 1 <= rollUnder\n  require rollUnder - 1\n  require (((101 * call.value) - (rollUnder * call.value) / rollUnder - 1 * houseEdge) + (call.value * houseEdge) / 1000) - call.value <= maxProfit\n  require call.value >= minBet\n  require rollUnder >= 2\n  require rollUnder <= 99\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                  stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n              else:\n                  if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                      stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                  else:\n                      if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                          stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                      else:\n                          if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                              stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n      require ext_code.size(stor0)\n  else:\n      if not ext_code.size(stor0):\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n          else:\n              if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n                  stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n              else:\n                  if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                      stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n                  else:\n                      if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                          stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                      else:\n                          if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                              stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                          else:\n                              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n          require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1.field_0) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1.field_0))\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: # Palkeoramix decompiler. \n\nconst maxBetDivisor = 10^6\nconst maxNumber = 99\nconst minNumber = 2\nconst houseEdgeDivisor = 1000\n\ndef storage:\n  stor0 is address at storage 0\n  stor1 is uint8 at storage 1 offset 160\n  gasForOraclize is uint32 at storage 1 offset 168\n  stor1 is uint128 at storage 1 offset 160\n  stor1 is uint256 at storage 1\n  stor2 is uint8 at storage 2 offset 160\n  stor2 is uint128 at storage 2 offset 160\n  owner is address at storage 2\n  treasuryAddress is address at storage 3\n  contractBalance is uint256 at storage 4\n  houseEdge is uint256 at storage 5\n  maxProfit is uint256 at storage 6\n  maxProfitAsPercentOfHouse is uint256 at storage 7\n  minBet is uint256 at storage 8\n  totalBets is uint256 at storage 9\n  totalUserProfit is uint256 at storage 10\n  maxPendingPayouts is uint256 at storage 11\n  stor12 is mapping of address at storage 12\n  playerGetPendingTxBy is mapping of uint256 at storage 20\n\ndef maxProfitAsPercentOfHouse(): # not payable\n  return maxProfitAsPercentOfHouse\n\ndef payoutsPaused(): # not payable\n  return bool(uint8(stor2.field_160))\n\ndef playerGetPendingTxByAddress(address addressToCheck): # not payable\n  return playerGetPendingTxBy[address(addressToCheck)]\n\ndef treasury(): # not payable\n  return treasuryAddress\n\ndef gasForOraclize(): # not payable\n  return gasForOraclize\n\ndef contractBalance(): # not payable\n  return contractBalance\n\ndef owner(): # not payable\n  return owner\n\ndef minBet(): # not payable\n  return minBet\n\ndef maxProfit(): # not payable\n  return maxProfit\n\ndef totalUserProfit(): # not payable\n  return totalUserProfit\n\ndef totalBets(): # not payable\n  return totalBets\n\ndef gamePaused(): # not payable\n  return bool(uint8(stor1.field_160))\n\ndef houseEdge(): # not payable\n  return houseEdge\n\ndef maxPendingPayouts(): # not payable\n  return maxPendingPayouts\n\n#\n#  Regular functions\n#\n\ndef ownerkill(): # not payable\n  require owner == caller\n  selfdestruct(owner)\n\ndef ownerChangeOwner(address newOwner): # not payable\n  require owner == caller\n  owner = newOwner\n\ndef ownerSetMinBet(uint256 newMinimumBet): # not payable\n  require owner == caller\n  minBet = newMinimumBet\n\ndef ownerSetHouseEdge(uint256 newHouseEdge): # not payable\n  require owner == caller\n  houseEdge = newHouseEdge\n\ndef ownerSetTreasury(address newTreasury): # not payable\n  require owner == caller\n  treasuryAddress = newTreasury\n\ndef ownerSetOraclizeSafeGas(uint32 newSafeGasToOraclize): # not payable\n  require owner == caller\n  gasForOraclize = newSafeGasToOraclize\n\ndef ownerPauseGame(bool newStatus): # not payable\n  require owner == caller\n  Mask(96, 0, stor1.field_160) = Mask(96, 0, newStatus)\n\ndef ownerPausePayouts(bool newPayoutStatus): # not payable\n  require owner == caller\n  Mask(96, 0, stor2.field_160) = Mask(96, 0, newPayoutStatus)\n\ndef ownerAddBankroll() payable: \n  require treasuryAddress == caller\n  require contractBalance + call.value >= contractBalance\n  contractBalance += call.value\n  maxProfit = maxProfitAsPercentOfHouse * contractBalance / 10^6\n\ndef ownerSetMaxProfitAsPercentOfHouse(uint256 newMaxProfitAsPercent): # not payable\n  require owner == caller\n  require newMaxProfitAsPercent <= 50000\n  maxProfitAsPercentOfHouse = newMaxProfitAsPercent\n  maxProfit = maxProfitAsPercentOfHouse * contractBalance / 10^6\n\ndef playerWithdrawPendingTransactions(): # not payable\n  require bool(uint8(stor2.field_160)) != 1\n  playerGetPendingTxBy[caller] = 0\n  call caller with:\n     value playerGetPendingTxBy[caller] wei\n       gas gas_remaining - 34050 wei\n  if not ext_call.success:\n      return 0\n  return 1\n\ndef ownerTransferEther(address sendTo, uint256 amount): # not payable\n  require owner == caller\n  require amount <= contractBalance\n  contractBalance -= amount\n  maxProfit = maxProfitAsPercentOfHouse * contractBalance / 10^6\n  call sendTo with:\n     value amount wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log LogOwnerTransfer(\n        address SentToAddress=sendTo,\n        uint256 AmountTransferred=amount)\n\ndef ownerRefundPlayer(bytes32 originalPlayerBetId, address sendTo, uint256 originalPlayerProfit, uint256 originalPlayerBetValue): # not payable\n  require owner == caller\n  require originalPlayerProfit <= maxPendingPayouts\n  maxPendingPayouts -= originalPlayerProfit\n  call sendTo with:\n     value originalPlayerBetValue wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log LogRefund(\n        bytes32 BetID=originalPlayerBetId,\n        address PlayerAddress=sendTo,\n        uint256 RefundValue=originalPlayerBetValue)\n\ndef _fallback(?) payable: # default function\n  require bool(uint8(stor1.field_160)) != 1\n  require ((54 * call.value / 46 * houseEdge) + (call.value * houseEdge) / 1000) - call.value <= maxProfit\n  require call.value >= minBet\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                  stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n              else:\n                  if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                      stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                  else:\n                      if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                          stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                      else:\n                          if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                              stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n      require ext_code.size(stor0)\n  else:\n      if not ext_code.size(stor0):\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n          else:\n              if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n                  stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n              else:\n                  if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                      stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n                  else:\n                      if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                          stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                      else:\n                          if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                              stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                          else:\n                              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n          require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1.field_0) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1.field_0))\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef __callback(bytes32 myid, string result): # not payable\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                  stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n              else:\n                  if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                      stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                  else:\n                      if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                          stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                      else:\n                          if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                              stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n      require ext_code.size(stor0)\n  else:\n      if not ext_code.size(stor0):\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n          else:\n              if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n                  stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n              else:\n                  if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                      stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n                  else:\n                      if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                          stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                      else:\n                          if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                              stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                          else:\n                              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n          require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1.field_0) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1.field_0))\n  require ext_code.size(address(ext_call.return_data[0]))\n  call address(ext_call.return_data[0]).cbAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  require caller == ext_call.return_data[12 len 20]\n  require bool(uint8(stor2.field_160)) != 1\n  require stor12[myid]\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef __callback(bytes32 myid, string result, bytes proof): # not payable\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                  stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n              else:\n                  if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                      stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                  else:\n                      if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                          stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                      else:\n                          if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                              stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n      require ext_code.size(stor0)\n  else:\n      if not ext_code.size(stor0):\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n          else:\n              if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n                  stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n              else:\n                  if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                      stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n                  else:\n                      if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                          stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                      else:\n                          if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                              stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                          else:\n                              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n          require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1.field_0) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1.field_0))\n  require ext_code.size(address(ext_call.return_data[0]))\n  call address(ext_call.return_data[0]).cbAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  require caller == ext_call.return_data[12 len 20]\n  require bool(uint8(stor2.field_160)) != 1\n  require stor12[myid]\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef playerRollDice(uint256 rollUnder) payable: \n  require bool(uint8(stor1.field_160)) != 1\n  require 1 <= rollUnder\n  require rollUnder - 1\n  require (((101 * call.value) - (rollUnder * call.value) / rollUnder - 1 * houseEdge) + (call.value * houseEdge) / 1000) - call.value <= maxProfit\n  require call.value >= minBet\n  require rollUnder >= 2\n  require rollUnder <= 99\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                  stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n              else:\n                  if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                      stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                  else:\n                      if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                          stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                      else:\n                          if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                              stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n      require ext_code.size(stor0)\n  else:\n      if not ext_code.size(stor0):\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n          else:\n              if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n                  stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n              else:\n                  if ext_code.size(0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e) > 0:\n                      stor0 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e\n                  else:\n                      if ext_code.size(0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475) > 0:\n                          stor0 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475\n                      else:\n                          if ext_code.size(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf) > 0:\n                              stor0 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf\n                          else:\n                              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n          require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1.field_0) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1.field_0))\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n.",
	"status": "1",
	"time_cost": 41.18683886528015,
	"usage": {
		"completion_tokens": 529,
		"prompt_tokens": 5718,
		"total_tokens": 6247
	}
}