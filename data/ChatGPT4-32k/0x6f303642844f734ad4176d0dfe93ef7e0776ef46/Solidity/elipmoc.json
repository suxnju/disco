{
	"address": "0x6f303642844f734ad4176d0dfe93ef7e0776ef46",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code that corresponds to the decompiled code:\n\n```solidity\npragma solidity ^0.7.0;\n\ncontract FundingContract {\n    uint256 private _fundingGoal;\n    uint256 private _amountRaised;\n    uint256 private _deadline;\n    uint256 private _price;\n    mapping (address => uint256) private _balanceOf;\n    address private _beneficiary;\n    bool private goalReached;\n    IERC20 private _tokenReward;\n\n    event FundTransfer(address backer, uint amount, bool isContribution);\n    event GoalReached(address beneficiary, uint amountRaised);\n\n    function checkGoalReached() public {\n        require(block.timestamp >= _deadline);\n        if (_amountRaised >= _fundingGoal && !goalReached) {\n            goalReached = true;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n    }\n\n    function deadline() public view returns (uint256) {\n        return _deadline;\n    }\n\n    function beneficiary() public view returns (address) {\n        return _beneficiary;\n    }\n\n    function tokenReward() public view returns (IERC20) {\n        return _tokenReward;\n    }\n\n    function balanceOf(address user) public view returns (uint256) {\n        return _balanceOf[user];\n    }\n\n    function fundingGoal() public view returns (uint256) {\n        return _fundingGoal;\n    }\n\n    function amountRaised() public view returns (uint256) {\n        return _amountRaised;\n    }\n\n    function price() public view returns (uint256) {\n        return _price;\n    }\n\n    function tokenWithdraw(uint256 amount) public {\n        require(block.timestamp >= _deadline);\n        require(_beneficiary == msg.sender);\n        require(_tokenReward.transfer(msg.sender, amount));\n    }\n\n    function safeWithdrawal() public {\n        require(block.timestamp >= _deadline);\n        if (!goalReached) {\n            uint amount = _balanceOf[msg.sender];\n            _balanceOf[msg.sender] = 0;\n            if (amount > 0) {\n                if (msg.sender.send(amount)) {\n                    emit FundTransfer(msg.sender, amount, false);\n                } else {\n                    _balanceOf[msg.sender] = amount;\n                }\n            }\n        } else if (goalReached && _beneficiary == msg.sender) {\n            if (_beneficiary.send(_amountRaised)) {\n                emit FundTransfer(_beneficiary, _amountRaised, false);\n            } else {\n                goalReached = false;\n            }\n        }\n    }\n}\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n```\nPlease note that this contract uses the `IERC20` interface for the `_tokenReward` variable, which is a token contract following the ERC20 standard. This contract may not work as expected if the token contract doesn't fully implement the ERC20 standard. \n\nAlso, the `checkGoalReached`, `tokenWithdraw` and `safeWithdrawal` functions can potentially change the state of the contract, but they do not have any access control mechanism. Anyone can call these functions which might not be desirable in a real-world scenario. Consider adding appropriate access control mechanism to these functions.",
				"role": "assistant"
			}
		}
	],
	"created": 1701457626,
	"id": "chatcmpl-8R38snxx3GGkfGxHmvohcGw79VLSo",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.24 14:05 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nuint256 _price; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x6]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_4_0_0; // STORAGE[0x4] bytes 0 to 0\nuint8 stor_7_0_0; // STORAGE[0x7] bytes 0 to 0\nuint8 ___function_selector__; // STORAGE[0x7] bytes 1 to 1\naddress _tokenReward; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public payable { \n    assert(!msg.value);\n    0x310();\n}\n\nfunction deadline() public payable { \n    assert(!msg.value);\n    return _deadline;\n}\n\nfunction beneficiary() public payable { \n    assert(!msg.value);\n    return _beneficiary;\n}\n\nfunction tokenReward() public payable { \n    assert(!msg.value);\n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public payable { \n    assert(!msg.value);\n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public payable { \n    assert(!msg.value);\n    return _fundingGoal;\n}\n\nfunction amountRaised() public payable { \n    assert(!msg.value);\n    return _amountRaised;\n}\n\nfunction price() public payable { \n    assert(!msg.value);\n    return _price;\n}\n\nfunction tokenWithdraw(uint256 varg0) public payable { \n    assert(!msg.value);\n    if (block.timestamp >= _deadline) {\n        if (_beneficiary == msg.sender) {\n            assert(_tokenReward.code.size);\n            v0 = _tokenReward.transfer(msg.sender, varg0).gas(msg.gas - 710);\n            assert(v0);\n            goto 0x1c70x2e9;\n        }\n    }\n}\n\nfunction safeWithdrawal() public payable { \n    assert(!msg.value);\n    if (block.timestamp >= _deadline) {\n        0x310();\n        if (!stor_7_0_0) {\n            _balanceOf[msg.sender] = 0;\n            if (_balanceOf[msg.sender] > 0) {\n                v0 = msg.sender.call().value(_balanceOf[msg.sender]).gas(2300 * !_balanceOf[msg.sender]);\n                if (!v0) {\n                    _balanceOf[msg.sender] = _balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, _balanceOf[msg.sender], 0);\n                }\n            }\n        }\n        v1 = v2 = stor_7_0_0;\n        if (v2) {\n            v1 = _beneficiary == msg.sender;\n        }\n        if (v1) {\n            v3 = _beneficiary.call().value(_amountRaised).gas(2300 * !_amountRaised);\n            if (!v3) {\n                stor_7_0_0 = 0;\n                goto 0x1c70x2fe;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction 0x310() private { \n    if (block.timestamp >= _deadline) {\n        v0 = v1 = _amountRaised >= _fundingGoal;\n        if (v1) {\n            v0 = v2 = !stor_7_0_0;\n        }\n        if (v0) {\n            stor_7_0_0 = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        ___function_selector__ = 1;\n    }\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x1cb3b20) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xd7e751ff == function_selector) {\n            tokenWithdraw(uint256);\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    require(!___function_selector__);\n    _balanceOf[msg.sender] = msg.value;\n    _amountRaised += msg.value;\n    assert(stor_4_0_0);\n    assert(_tokenReward.code.size);\n    v0 = _tokenReward.transfer(msg.sender, msg.value / _price).gas(msg.gas - 710);\n    assert(v0);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 14:05 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nuint256 _price; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x6]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_4_0_0; // STORAGE[0x4] bytes 0 to 0\nuint8 stor_7_0_0; // STORAGE[0x7] bytes 0 to 0\nuint8 ___function_selector__; // STORAGE[0x7] bytes 1 to 1\naddress _tokenReward; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public payable { \n    assert(!msg.value);\n    0x310();\n}\n\nfunction deadline() public payable { \n    assert(!msg.value);\n    return _deadline;\n}\n\nfunction beneficiary() public payable { \n    assert(!msg.value);\n    return _beneficiary;\n}\n\nfunction tokenReward() public payable { \n    assert(!msg.value);\n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public payable { \n    assert(!msg.value);\n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public payable { \n    assert(!msg.value);\n    return _fundingGoal;\n}\n\nfunction amountRaised() public payable { \n    assert(!msg.value);\n    return _amountRaised;\n}\n\nfunction price() public payable { \n    assert(!msg.value);\n    return _price;\n}\n\nfunction tokenWithdraw(uint256 varg0) public payable { \n    assert(!msg.value);\n    if (block.timestamp >= _deadline) {\n        if (_beneficiary == msg.sender) {\n            assert(_tokenReward.code.size);\n            v0 = _tokenReward.transfer(msg.sender, varg0).gas(msg.gas - 710);\n            assert(v0);\n            goto 0x1c70x2e9;\n        }\n    }\n}\n\nfunction safeWithdrawal() public payable { \n    assert(!msg.value);\n    if (block.timestamp >= _deadline) {\n        0x310();\n        if (!stor_7_0_0) {\n            _balanceOf[msg.sender] = 0;\n            if (_balanceOf[msg.sender] > 0) {\n                v0 = msg.sender.call().value(_balanceOf[msg.sender]).gas(2300 * !_balanceOf[msg.sender]);\n                if (!v0) {\n                    _balanceOf[msg.sender] = _balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, _balanceOf[msg.sender], 0);\n                }\n            }\n        }\n        v1 = v2 = stor_7_0_0;\n        if (v2) {\n            v1 = _beneficiary == msg.sender;\n        }\n        if (v1) {\n            v3 = _beneficiary.call().value(_amountRaised).gas(2300 * !_amountRaised);\n            if (!v3) {\n                stor_7_0_0 = 0;\n                goto 0x1c70x2fe;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction 0x310() private { \n    if (block.timestamp >= _deadline) {\n        v0 = v1 = _amountRaised >= _fundingGoal;\n        if (v1) {\n            v0 = v2 = !stor_7_0_0;\n        }\n        if (v0) {\n            stor_7_0_0 = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        ___function_selector__ = 1;\n    }\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x1cb3b20) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xd7e751ff == function_selector) {\n            tokenWithdraw(uint256);\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    require(!___function_selector__);\n    _balanceOf[msg.sender] = msg.value;\n    _amountRaised += msg.value;\n    assert(stor_4_0_0);\n    assert(_tokenReward.code.size);\n    v0 = _tokenReward.transfer(msg.sender, msg.value / _price).gas(msg.gas - 710);\n    assert(v0);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 14:05 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nuint256 _price; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x6]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_4_0_0; // STORAGE[0x4] bytes 0 to 0\nuint8 stor_7_0_0; // STORAGE[0x7] bytes 0 to 0\nuint8 ___function_selector__; // STORAGE[0x7] bytes 1 to 1\naddress _tokenReward; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public payable { \n    assert(!msg.value);\n    0x310();\n}\n\nfunction deadline() public payable { \n    assert(!msg.value);\n    return _deadline;\n}\n\nfunction beneficiary() public payable { \n    assert(!msg.value);\n    return _beneficiary;\n}\n\nfunction tokenReward() public payable { \n    assert(!msg.value);\n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public payable { \n    assert(!msg.value);\n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public payable { \n    assert(!msg.value);\n    return _fundingGoal;\n}\n\nfunction amountRaised() public payable { \n    assert(!msg.value);\n    return _amountRaised;\n}\n\nfunction price() public payable { \n    assert(!msg.value);\n    return _price;\n}\n\nfunction tokenWithdraw(uint256 varg0) public payable { \n    assert(!msg.value);\n    if (block.timestamp >= _deadline) {\n        if (_beneficiary == msg.sender) {\n            assert(_tokenReward.code.size);\n            v0 = _tokenReward.transfer(msg.sender, varg0).gas(msg.gas - 710);\n            assert(v0);\n            goto 0x1c70x2e9;\n        }\n    }\n}\n\nfunction safeWithdrawal() public payable { \n    assert(!msg.value);\n    if (block.timestamp >= _deadline) {\n        0x310();\n        if (!stor_7_0_0) {\n            _balanceOf[msg.sender] = 0;\n            if (_balanceOf[msg.sender] > 0) {\n                v0 = msg.sender.call().value(_balanceOf[msg.sender]).gas(2300 * !_balanceOf[msg.sender]);\n                if (!v0) {\n                    _balanceOf[msg.sender] = _balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, _balanceOf[msg.sender], 0);\n                }\n            }\n        }\n        v1 = v2 = stor_7_0_0;\n        if (v2) {\n            v1 = _beneficiary == msg.sender;\n        }\n        if (v1) {\n            v3 = _beneficiary.call().value(_amountRaised).gas(2300 * !_amountRaised);\n            if (!v3) {\n                stor_7_0_0 = 0;\n                goto 0x1c70x2fe;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction 0x310() private { \n    if (block.timestamp >= _deadline) {\n        v0 = v1 = _amountRaised >= _fundingGoal;\n        if (v1) {\n            v0 = v2 = !stor_7_0_0;\n        }\n        if (v0) {\n            stor_7_0_0 = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        ___function_selector__ = 1;\n    }\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x1cb3b20) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xd7e751ff == function_selector) {\n            tokenWithdraw(uint256);\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    require(!___function_selector__);\n    _balanceOf[msg.sender] = msg.value;\n    _amountRaised += msg.value;\n    assert(stor_4_0_0);\n    assert(_tokenReward.code.size);\n    v0 = _tokenReward.transfer(msg.sender, msg.value / _price).gas(msg.gas - 710);\n    assert(v0);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n.",
	"status": "1",
	"time_cost": 24.96809697151184,
	"usage": {
		"completion_tokens": 654,
		"prompt_tokens": 1285,
		"total_tokens": 1939
	}
}