{
	"address": "0x16a0772b17ae004e6645e0e95bf50ad69498a34e",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity equivalent of the given decompiled contract code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(address => uint256) owners;\n    mapping(address => bool) isOwner;\n    mapping(uint256 => Confirmation) confirmations;\n    mapping(uint256 => Transaction) transactions;\n    uint256 public transactionCount;\n    uint256 public required;\n    uint256 public MAX_OWNER_COUNT;\n    uint256 public ownersCount;\n\n    struct Confirmation {\n        address sender;\n        uint256 transactionId;\n    }\n\n    struct Transaction {\n        address destination;\n        uint256 value;\n        bytes data;\n        bool executed;\n    }\n    \n    function addOwner(address _owner) public {\n        require(!isOwner[_owner], \"Owner already exists\");\n        require(_owner != address(0), \"Cannot add zero address\");\n        require(ownersCount < MAX_OWNER_COUNT, \"Max owners reached\");\n        owners[_owner] = ownersCount;\n        ownersCount++;\n        isOwner[_owner] = true;\n    }\n    \n    function removeOwner(address _owner) public {\n        require(isOwner[_owner], \"Not an owner\");\n        require(ownersCount > 1, \"Cannot remove last owner\");\n        isOwner[_owner] = false;\n        owners[_owner] = 0;\n        ownersCount--;\n    }\n    \n    function replaceOwner(address _owner, address _newOwner) public {\n        require(isOwner[_owner], \"Not an owner\");\n        require(!isOwner[_newOwner], \"New owner already exists\");\n        require(_newOwner != address(0), \"Cannot add zero address\");\n        owners[_newOwner] = owners[_owner];\n        owners[_owner] = 0;\n        isOwner[_newOwner] = true;\n        isOwner[_owner] = false;\n    }\n    \n    function confirmTransaction(uint256 _transactionId) public {\n        require(isOwner[msg.sender], \"Not an owner\");\n        confirmations[_transactionId].transactionId = _transactionId;\n        confirmations[_transactionId].sender = msg.sender;\n    }\n    \n    function executeTransaction(uint256 _transactionId) public {\n        require(transactions[_transactionId].executed == false, \"Transaction already executed\");\n        transactions[_transactionId].executed = true;\n    }\n    \n    function changeRequirement(uint256 _required) public {\n        require(_required <= ownersCount, \"Required cannot exceed owners count\");\n        required = _required;\n    }\n    \n    function submitTransaction(address _destination, uint256 _value, bytes memory _data) public {\n        require(isOwner[msg.sender], \"Not an owner\");\n        transactions[transactionCount].destination = _destination;\n        transactions[transactionCount].value = _value;\n        transactions[transactionCount].data = _data;\n        transactionCount++;\n    }\n}\n```\n\nPlease note that the given decompiled code has a lot of low-level operations and is quite complex. So, the above Solidity code is a high-level equivalent representation. It might not be exactly the same and might not have the same functionality as the decompiled code, but it replicates the general structure and the main functionalities.",
				"role": "assistant"
			}
		}
	],
	"created": 1700470924,
	"id": "chatcmpl-8MuSKZA5q19P6GfSpEMck2sz8c6GV",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_011A:\n        \n            if (msg.value <= 0x00) { stop(); }\n        \n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = msg.value;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n            stop();\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x017b;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ef;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = isOwner(var2);\n            \n            label_01EF:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ef;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var2 = confirmations(var2, var3);\n                goto label_01EF;\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n            \n            label_0256:\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ef;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                goto label_01EF;\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                goto label_0256;\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f1;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp8 = memory[0x40:0x60];\n                var var6 = temp8;\n                memory[var6:var6 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[var6 + 0x20:var6 + 0x20 + 0x20] = var3;\n                memory[var6 + 0x60:var6 + 0x60 + 0x20] = !!var5;\n                memory[var6 + 0x40:var6 + 0x40 + 0x20] = 0x80;\n                var temp9 = storage[var4];\n                var temp10 = (temp9 & !(temp9 & 0x01) * 0x0100 + ~0x00) / 0x02;\n                memory[var6 + 0x80:var6 + 0x80 + 0x20] = temp10;\n                var var7 = var6 + 0x40;\n                var var8 = var6 + 0xa0;\n                var var9 = var4;\n                var var10 = temp10;\n            \n                if (!var10) {\n                label_0388:\n                    var temp11 = memory[0x40:0x60];\n                    return memory[temp11:temp11 + var8 - temp11];\n                } else if (0x1f < var10) {\n                    var temp12 = var8;\n                    var temp13 = temp12 + var10;\n                    var8 = temp13;\n                    memory[0x00:0x20] = var9;\n                    var temp14 = keccak256(memory[0x00:0x20]);\n                    memory[temp12:temp12 + 0x20] = storage[temp14];\n                    var9 = temp14 + 0x01;\n                    var10 = temp12 + 0x20;\n                \n                    if (var8 <= var10) { goto label_037F; }\n                \n                label_036B:\n                    var temp15 = var9;\n                    var temp16 = var10;\n                    memory[temp16:temp16 + 0x20] = storage[temp15];\n                    var9 = temp15 + 0x01;\n                    var10 = temp16 + 0x20;\n                \n                    if (var8 > var10) { goto label_036B; }\n                \n                label_037F:\n                    var temp17 = var8;\n                    var temp18 = temp17 + (var10 - temp17 & 0x1f);\n                    var10 = temp17;\n                    var8 = temp18;\n                    goto label_0388;\n                } else {\n                    var temp19 = var8;\n                    memory[temp19:temp19 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                    var8 = temp19 + 0x20;\n                    var10 = var10;\n                    goto label_0388;\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = getOwners();\n            \n            label_03AD:\n                var temp20 = memory[0x40:0x60];\n                var2 = temp20;\n                memory[var2:var2 + 0x20] = 0x20;\n                var3 = var2;\n                var temp21 = var3 + 0x20;\n                var temp22 = var1;\n                memory[temp21:temp21 + 0x20] = memory[temp22:temp22 + 0x20];\n                var4 = temp21 + 0x20;\n                var5 = temp22 + 0x20;\n                var6 = memory[temp22:temp22 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_03ED:\n                    var temp23 = memory[0x40:0x60];\n                    return memory[temp23:temp23 + (var6 + var4) - temp23];\n                } else {\n                label_03DD:\n                    var temp24 = var10;\n                    memory[var8 + temp24:var8 + temp24 + 0x20] = memory[var9 + temp24:var9 + temp24 + 0x20];\n                    var10 = temp24 + 0x20;\n                \n                    if (var10 >= var7) { goto label_03ED; }\n                    else { goto label_03DD; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                goto label_03AD;\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                goto label_03AD;\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = transactionCount();\n                goto label_0256;\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var temp25 = msg.data[0x44:0x64];\n                var temp26 = msg.data[temp25 + 0x04:temp25 + 0x04 + 0x20];\n                var temp27 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp27 + (temp26 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp27:temp27 + 0x20] = temp26;\n                memory[temp27 + 0x20:temp27 + 0x20 + temp26] = msg.data[temp25 + 0x24:temp25 + 0x24 + temp26];\n                var4 = temp27;\n                var5 = 0x00;\n                var6 = 0x10c8;\n                var7 = var2;\n                var8 = var3;\n                var9 = var4;\n                var10 = 0x00;\n                var var11 = var7;\n            \n                if (!(var11 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                var10 = storage[0x05];\n                var temp28 = memory[0x40:0x60];\n                var var12 = temp28;\n                memory[0x40:0x60] = var12 + 0x80;\n                memory[var12:var12 + 0x20] = var7 & 0x02 ** 0xa0 - 0x01;\n                memory[var12 + 0x20:var12 + 0x20 + 0x20] = var8;\n                memory[var12 + 0x40:var12 + 0x40 + 0x20] = var9;\n                memory[var12 + 0x60:var12 + 0x60 + 0x20] = 0x00;\n                memory[0x00:0x20] = var10;\n                memory[0x20:0x40] = 0x00;\n                var temp29 = keccak256(memory[0x00:0x40]);\n                var var13 = temp29;\n                storage[var13] = (memory[var12:var12 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[var13] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                storage[var13 + 0x01] = memory[var12 + 0x20:var12 + 0x20 + 0x20];\n                var temp30 = memory[var12 + 0x40:var12 + 0x40 + 0x20];\n                var var14 = 0x14a9;\n                var var15 = var13 + 0x02;\n                var var17 = memory[temp30:temp30 + 0x20];\n                var var16 = temp30 + 0x20;\n                var temp31 = var15;\n                var temp32 = storage[temp31];\n                memory[0x00:0x20] = temp31;\n                var var18 = keccak256(memory[0x00:0x20]);\n                var temp33 = var16;\n                var16 = var18 + ((!(temp32 & 0x01) * 0x0100 - 0x01 & temp32) / 0x02 + 0x1f) / 0x20;\n                var var19 = temp33;\n            \n                if (0x1f < var17) {\n                    var temp34 = var17;\n                    storage[var15] = temp34 + temp34 + 0x01;\n                \n                    if (!temp34) {\n                    label_15EB:\n                        var temp35 = var16;\n                        var16 = 0x15f8;\n                        var17 = temp35;\n                        var16 = func_15FC(var17, var18);\n                        var14 = func_15F8(var15, var16);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp36 = var17;\n                        var temp37 = var19;\n                        var17 = temp37;\n                        var19 = var17 + temp36;\n                    \n                        if (var19 <= var17) { goto label_15EB; }\n                    \n                    label_15D9:\n                        var temp38 = var17;\n                        var temp39 = var18;\n                        storage[temp39] = memory[temp38:temp38 + 0x20];\n                        var17 = temp38 + 0x20;\n                        var19 = var19;\n                        var18 = temp39 + 0x01;\n                    \n                        if (var19 <= var17) { goto label_15EB; }\n                        else { goto label_15D9; }\n                    }\n                } else {\n                    var temp40 = var17;\n                    storage[var15] = temp40 + temp40 | (memory[var19:var19 + 0x20] & ~0xff);\n                    goto label_15EB;\n                }\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = MAX_OWNER_COUNT();\n                goto label_0256;\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = required();\n                goto label_0256;\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var temp41 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp41 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp41;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else { goto label_011A; }\n        }\n    }\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~0xff;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] + ~0x00) {\n        label_07AF:\n            var var2 = storage[0x03] + ~0x00;\n            var var4 = 0x03;\n            var var3 = 0x07c2;\n            var var5 = var2;\n            func_1505(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_07DB:\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n                var3 = storage[0x03];\n                var2 = 0x07db;\n                changeRequirement(var3);\n                goto label_07DB;\n            }\n        } else {\n        label_06E6:\n            var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[var4 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var2) {\n                var1 = var1;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] + ~0x00) { goto label_07AF; }\n                else { goto label_06E6; }\n            } else {\n                var2 = 0x03;\n                var temp2 = storage[var2];\n                var3 = temp2 + ~0x00;\n            \n                if (var3 >= temp2) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var2 = storage[var3 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x03;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp3 = var4 + keccak256(memory[0x00:0x20]);\n                storage[temp3] = (var2 & 0x02 ** 0xa0 - 0x01) | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n                goto label_07AF;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var1 = arg0;\n        var var2 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var3 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] & ~0xff;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x05]) {\n        label_0998:\n            return var0;\n        } else {\n        label_0940:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_0982; }\n                else { goto label_0964; }\n            } else if (var2) {\n            label_0982:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0935:\n                \n                    if (var1 >= storage[0x05]) { goto label_0998; }\n                    else { goto label_0940; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0935;\n                }\n            } else {\n            label_0964:\n                var2 = arg1;\n            \n                if (!var2) { goto label_0982; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_0982;\n            }\n        }\n    }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var0 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x05;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_0A21; }\n            else { goto label_0A1E; }\n        } else if (var4) {\n        label_0A21:\n        \n            if (var4) {\n            label_0A2A:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_0A34:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var var5 = storage[0x03];\n                var4 = 0x03;\n                var var6 = var5 + 0x01;\n                var var7 = 0x0a6c;\n                var var8 = var4;\n                var var9 = var6;\n                func_1505(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = var5 + keccak256(memory[0x00:0x20]);\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                var temp3 = arg0 & temp2;\n                storage[temp1] = (storage[temp1] & ~temp2) | temp3;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n            label_0A27:\n            \n                if (var2) { goto label_0A34; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0A1E:\n            var4 = !var3;\n        \n            if (var4) { goto label_0A2A; }\n            else { goto label_0A27; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= storage[0x03]) {\n        label_0B61:\n            return var0;\n        } else {\n        label_0AE5:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var5 = 0x03;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff) {\n                var temp1 = var1 + 0x01;\n                var1 = temp1;\n            \n                if (var1 != storage[0x04]) { goto label_0B58; }\n                else { goto label_0B50; }\n            } else if (var1 != storage[0x04]) {\n            label_0B58:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_0B61; }\n                else { goto label_0AE5; }\n            } else {\n            label_0B50:\n                var0 = 0x01;\n                goto label_0B61;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x03]) {\n        label_0BE1:\n            return var0;\n        } else {\n        label_0B78:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var4 = 0x03;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_0B6D:\n            \n                if (var1 >= storage[0x03]) { goto label_0BE1; }\n                else { goto label_0B78; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_0B6D;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        return arg0, r1, r2, r3;\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x0c24;\n        var0 = func_1559();\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_0C7A:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp4 + 0x01;\n            var6 = temp2 + 0x20;\n        \n            if (var4 <= var6) { goto label_0C7A; }\n        \n        label_0C5C:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_0C5C; }\n            else { goto label_0C7A; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x0c8d;\n        var0 = func_1559();\n        var var1 = 0x0c95;\n        var1 = func_1559();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_0D40:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_0DA7:\n                        return var0;\n                    } else {\n                    label_0D71:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_0DA7; }\n                        else { goto label_0D71; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_0DA7; }\n                    else { goto label_0D71; }\n                }\n            } else {\n            label_0CD0:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_0D12; }\n                    else { goto label_0CF4; }\n                } else if (var4) {\n                label_0D12:\n                \n                    if (!var4) {\n                    label_0D37:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_0D40; }\n                        else { goto label_0CD0; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3;\n                        var2 = var2 + 0x01;\n                        goto label_0D37;\n                    }\n                } else {\n                label_0CF4:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_0D12; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_0D12;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_0D40; }\n            else { goto label_0CD0; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x0dbb;\n        var0 = func_1559();\n        var var1 = 0x0dc3;\n        var1 = func_1559();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x03];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var4;\n            var temp1 = var5;\n            memory[temp1:temp1 + 0x20] = temp0;\n            memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n            var1 = temp1;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_0EBB:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_0F2C:\n                        return var0;\n                    } else {\n                    label_0EEB:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_0F2C; }\n                        else { goto label_0EEB; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_0F2C; }\n                    else { goto label_0EEB; }\n                }\n            } else {\n            label_0E00:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var6 = 0x03;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp6 + 0x40])] & 0xff)) {\n                label_0EB2:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_0EBB; }\n                    else { goto label_0E00; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                    var3 = var3;\n                    var2 = var2 + 0x01;\n                    goto label_0EB2;\n                }\n            }\n        } else {\n            var temp7 = MSIZE();\n            var temp8 = var4;\n            memory[temp7:temp7 + 0x20] = temp8;\n            memory[0x40:0x60] = temp7 + temp8 * 0x20 + 0x20;\n            var1 = temp7;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_0EBB; }\n            else { goto label_0E00; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x05;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_0F76; }\n            else { goto label_0F73; }\n        } else if (var2) {\n        label_0F76:\n        \n            if (var2) {\n            label_0F7F:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_0F89:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_0F7C:\n            \n                if (var0) { goto label_0F89; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0F73:\n            var2 = !var1;\n        \n            if (var2) { goto label_0F7F; }\n            else { goto label_0F7C; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var2 = arg0;\n        var var3 = msg.sender;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x08f2;\n        var var5 = temp1;\n        executeTransaction(var5);\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x05; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var2 = arg1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1201:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = ~0xff;\n            storage[temp2] = temp3 & storage[temp2];\n            var temp4 = arg1;\n            memory[0x00:0x20] = temp4 & temp0;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = (temp3 & storage[temp5]) | 0x01;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n        label_1169:\n            var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var3) {\n                var2 = var2;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1201; }\n                else { goto label_1169; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp8 = var5 + keccak256(memory[0x00:0x20]);\n                storage[temp8] = (var3 & 0x02 ** 0xa0 - 0x01) | (storage[temp8] & ~(0x02 ** 0xa0 - 0x01));\n                goto label_1201;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = var0;\n        var var1 = arg0;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x12d1;\n        var var3 = arg0;\n        var2 = isConfirmed(var3);\n    \n        if (!var2) {\n        label_0813:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x00;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = temp0 + 0x03;\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x01;\n            var3 = storage[temp0 + 0x01];\n            var0 = temp0;\n            var2 = storage[var0] & 0x02 ** 0xa0 - 0x01;\n            var var4 = var0 + 0x02;\n            var var5 = memory[0x40:0x60];\n            var var6 = var5;\n            var var7 = var4;\n            var temp2 = storage[var7];\n            var var8 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        \n            if (!var8) {\n            label_1373:\n                var temp3 = memory[0x40:0x60];\n                var temp4;\n                temp4, memory[temp3:temp3 + 0x00] = address(var2).call.gas(msg.gas - 0x8796).value(var3)(memory[temp3:temp3 + var6 - temp3]);\n            \n                if (!temp4) {\n                    var temp5 = memory[0x40:0x60];\n                    log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-3]]);\n                    var temp6 = var0 + 0x03;\n                    storage[temp6] = storage[temp6] & ~0xff;\n                    return;\n                } else {\n                    var temp7 = memory[0x40:0x60];\n                    log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-3]]);\n                    goto label_0813;\n                }\n            } else if (0x1f < var8) {\n                var temp8 = var6;\n                var temp9 = temp8 + var8;\n                var6 = temp9;\n                memory[0x00:0x20] = var7;\n                var temp10 = keccak256(memory[0x00:0x20]);\n                memory[temp8:temp8 + 0x20] = storage[temp10];\n                var7 = temp10 + 0x01;\n                var8 = temp8 + 0x20;\n            \n                if (var6 <= var8) { goto label_136A; }\n            \n            label_1356:\n                var temp11 = var7;\n                var temp12 = var8;\n                memory[temp12:temp12 + 0x20] = storage[temp11];\n                var7 = temp11 + 0x01;\n                var8 = temp12 + 0x20;\n            \n                if (var6 > var8) { goto label_1356; }\n            \n            label_136A:\n                var temp13 = var6;\n                var temp14 = temp13 + (var8 - temp13 & 0x1f);\n                var8 = temp13;\n                var6 = temp14;\n                goto label_1373;\n            } else {\n                var temp15 = var6;\n                memory[temp15:temp15 + 0x20] = storage[var7] / 0x0100 * 0x0100;\n                var6 = temp15 + 0x20;\n                var8 = var8;\n                goto label_1373;\n            }\n        }\n    }\n    \n    function func_1505(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_0813:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x0813;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_15FC(var1, var2);\n            goto label_0813;\n        }\n    }\n    \n    function func_1559() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_15F8(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_15FC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x0c82;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_15F8(arg1, var0); }\n    \n    label_160B:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_160B; }\n    \n        arg0 = func_15F8(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_011A:\n        \n            if (msg.value <= 0x00) { stop(); }\n        \n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = msg.value;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n            stop();\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x017b;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ef;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = isOwner(var2);\n            \n            label_01EF:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ef;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var2 = confirmations(var2, var3);\n                goto label_01EF;\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n            \n            label_0256:\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ef;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                goto label_01EF;\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                goto label_0256;\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f1;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp8 = memory[0x40:0x60];\n                var var6 = temp8;\n                memory[var6:var6 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[var6 + 0x20:var6 + 0x20 + 0x20] = var3;\n                memory[var6 + 0x60:var6 + 0x60 + 0x20] = !!var5;\n                memory[var6 + 0x40:var6 + 0x40 + 0x20] = 0x80;\n                var temp9 = storage[var4];\n                var temp10 = (temp9 & !(temp9 & 0x01) * 0x0100 + ~0x00) / 0x02;\n                memory[var6 + 0x80:var6 + 0x80 + 0x20] = temp10;\n                var var7 = var6 + 0x40;\n                var var8 = var6 + 0xa0;\n                var var9 = var4;\n                var var10 = temp10;\n            \n                if (!var10) {\n                label_0388:\n                    var temp11 = memory[0x40:0x60];\n                    return memory[temp11:temp11 + var8 - temp11];\n                } else if (0x1f < var10) {\n                    var temp12 = var8;\n                    var temp13 = temp12 + var10;\n                    var8 = temp13;\n                    memory[0x00:0x20] = var9;\n                    var temp14 = keccak256(memory[0x00:0x20]);\n                    memory[temp12:temp12 + 0x20] = storage[temp14];\n                    var9 = temp14 + 0x01;\n                    var10 = temp12 + 0x20;\n                \n                    if (var8 <= var10) { goto label_037F; }\n                \n                label_036B:\n                    var temp15 = var9;\n                    var temp16 = var10;\n                    memory[temp16:temp16 + 0x20] = storage[temp15];\n                    var9 = temp15 + 0x01;\n                    var10 = temp16 + 0x20;\n                \n                    if (var8 > var10) { goto label_036B; }\n                \n                label_037F:\n                    var temp17 = var8;\n                    var temp18 = temp17 + (var10 - temp17 & 0x1f);\n                    var10 = temp17;\n                    var8 = temp18;\n                    goto label_0388;\n                } else {\n                    var temp19 = var8;\n                    memory[temp19:temp19 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                    var8 = temp19 + 0x20;\n                    var10 = var10;\n                    goto label_0388;\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = getOwners();\n            \n            label_03AD:\n                var temp20 = memory[0x40:0x60];\n                var2 = temp20;\n                memory[var2:var2 + 0x20] = 0x20;\n                var3 = var2;\n                var temp21 = var3 + 0x20;\n                var temp22 = var1;\n                memory[temp21:temp21 + 0x20] = memory[temp22:temp22 + 0x20];\n                var4 = temp21 + 0x20;\n                var5 = temp22 + 0x20;\n                var6 = memory[temp22:temp22 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_03ED:\n                    var temp23 = memory[0x40:0x60];\n                    return memory[temp23:temp23 + (var6 + var4) - temp23];\n                } else {\n                label_03DD:\n                    var temp24 = var10;\n                    memory[var8 + temp24:var8 + temp24 + 0x20] = memory[var9 + temp24:var9 + temp24 + 0x20];\n                    var10 = temp24 + 0x20;\n                \n                    if (var10 >= var7) { goto label_03ED; }\n                    else { goto label_03DD; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                goto label_03AD;\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                goto label_03AD;\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = transactionCount();\n                goto label_0256;\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var temp25 = msg.data[0x44:0x64];\n                var temp26 = msg.data[temp25 + 0x04:temp25 + 0x04 + 0x20];\n                var temp27 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp27 + (temp26 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp27:temp27 + 0x20] = temp26;\n                memory[temp27 + 0x20:temp27 + 0x20 + temp26] = msg.data[temp25 + 0x24:temp25 + 0x24 + temp26];\n                var4 = temp27;\n                var5 = 0x00;\n                var6 = 0x10c8;\n                var7 = var2;\n                var8 = var3;\n                var9 = var4;\n                var10 = 0x00;\n                var var11 = var7;\n            \n                if (!(var11 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                var10 = storage[0x05];\n                var temp28 = memory[0x40:0x60];\n                var var12 = temp28;\n                memory[0x40:0x60] = var12 + 0x80;\n                memory[var12:var12 + 0x20] = var7 & 0x02 ** 0xa0 - 0x01;\n                memory[var12 + 0x20:var12 + 0x20 + 0x20] = var8;\n                memory[var12 + 0x40:var12 + 0x40 + 0x20] = var9;\n                memory[var12 + 0x60:var12 + 0x60 + 0x20] = 0x00;\n                memory[0x00:0x20] = var10;\n                memory[0x20:0x40] = 0x00;\n                var temp29 = keccak256(memory[0x00:0x40]);\n                var var13 = temp29;\n                storage[var13] = (memory[var12:var12 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[var13] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                storage[var13 + 0x01] = memory[var12 + 0x20:var12 + 0x20 + 0x20];\n                var temp30 = memory[var12 + 0x40:var12 + 0x40 + 0x20];\n                var var14 = 0x14a9;\n                var var15 = var13 + 0x02;\n                var var17 = memory[temp30:temp30 + 0x20];\n                var var16 = temp30 + 0x20;\n                var temp31 = var15;\n                var temp32 = storage[temp31];\n                memory[0x00:0x20] = temp31;\n                var var18 = keccak256(memory[0x00:0x20]);\n                var temp33 = var16;\n                var16 = var18 + ((!(temp32 & 0x01) * 0x0100 - 0x01 & temp32) / 0x02 + 0x1f) / 0x20;\n                var var19 = temp33;\n            \n                if (0x1f < var17) {\n                    var temp34 = var17;\n                    storage[var15] = temp34 + temp34 + 0x01;\n                \n                    if (!temp34) {\n                    label_15EB:\n                        var temp35 = var16;\n                        var16 = 0x15f8;\n                        var17 = temp35;\n                        var16 = func_15FC(var17, var18);\n                        var14 = func_15F8(var15, var16);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp36 = var17;\n                        var temp37 = var19;\n                        var17 = temp37;\n                        var19 = var17 + temp36;\n                    \n                        if (var19 <= var17) { goto label_15EB; }\n                    \n                    label_15D9:\n                        var temp38 = var17;\n                        var temp39 = var18;\n                        storage[temp39] = memory[temp38:temp38 + 0x20];\n                        var17 = temp38 + 0x20;\n                        var19 = var19;\n                        var18 = temp39 + 0x01;\n                    \n                        if (var19 <= var17) { goto label_15EB; }\n                        else { goto label_15D9; }\n                    }\n                } else {\n                    var temp40 = var17;\n                    storage[var15] = temp40 + temp40 | (memory[var19:var19 + 0x20] & ~0xff);\n                    goto label_15EB;\n                }\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = MAX_OWNER_COUNT();\n                goto label_0256;\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = required();\n                goto label_0256;\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var temp41 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp41 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp41;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else { goto label_011A; }\n        }\n    }\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~0xff;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] + ~0x00) {\n        label_07AF:\n            var var2 = storage[0x03] + ~0x00;\n            var var4 = 0x03;\n            var var3 = 0x07c2;\n            var var5 = var2;\n            func_1505(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_07DB:\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n                var3 = storage[0x03];\n                var2 = 0x07db;\n                changeRequirement(var3);\n                goto label_07DB;\n            }\n        } else {\n        label_06E6:\n            var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[var4 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var2) {\n                var1 = var1;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] + ~0x00) { goto label_07AF; }\n                else { goto label_06E6; }\n            } else {\n                var2 = 0x03;\n                var temp2 = storage[var2];\n                var3 = temp2 + ~0x00;\n            \n                if (var3 >= temp2) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var2 = storage[var3 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x03;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp3 = var4 + keccak256(memory[0x00:0x20]);\n                storage[temp3] = (var2 & 0x02 ** 0xa0 - 0x01) | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n                goto label_07AF;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var1 = arg0;\n        var var2 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var3 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] & ~0xff;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x05]) {\n        label_0998:\n            return var0;\n        } else {\n        label_0940:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_0982; }\n                else { goto label_0964; }\n            } else if (var2) {\n            label_0982:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0935:\n                \n                    if (var1 >= storage[0x05]) { goto label_0998; }\n                    else { goto label_0940; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0935;\n                }\n            } else {\n            label_0964:\n                var2 = arg1;\n            \n                if (!var2) { goto label_0982; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_0982;\n            }\n        }\n    }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var0 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x05;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_0A21; }\n            else { goto label_0A1E; }\n        } else if (var4) {\n        label_0A21:\n        \n            if (var4) {\n            label_0A2A:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_0A34:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var var5 = storage[0x03];\n                var4 = 0x03;\n                var var6 = var5 + 0x01;\n                var var7 = 0x0a6c;\n                var var8 = var4;\n                var var9 = var6;\n                func_1505(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = var5 + keccak256(memory[0x00:0x20]);\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                var temp3 = arg0 & temp2;\n                storage[temp1] = (storage[temp1] & ~temp2) | temp3;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n            label_0A27:\n            \n                if (var2) { goto label_0A34; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0A1E:\n            var4 = !var3;\n        \n            if (var4) { goto label_0A2A; }\n            else { goto label_0A27; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= storage[0x03]) {\n        label_0B61:\n            return var0;\n        } else {\n        label_0AE5:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var5 = 0x03;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff) {\n                var temp1 = var1 + 0x01;\n                var1 = temp1;\n            \n                if (var1 != storage[0x04]) { goto label_0B58; }\n                else { goto label_0B50; }\n            } else if (var1 != storage[0x04]) {\n            label_0B58:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_0B61; }\n                else { goto label_0AE5; }\n            } else {\n            label_0B50:\n                var0 = 0x01;\n                goto label_0B61;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x03]) {\n        label_0BE1:\n            return var0;\n        } else {\n        label_0B78:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var4 = 0x03;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_0B6D:\n            \n                if (var1 >= storage[0x03]) { goto label_0BE1; }\n                else { goto label_0B78; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_0B6D;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        return arg0, r1, r2, r3;\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x0c24;\n        var0 = func_1559();\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_0C7A:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp4 + 0x01;\n            var6 = temp2 + 0x20;\n        \n            if (var4 <= var6) { goto label_0C7A; }\n        \n        label_0C5C:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_0C5C; }\n            else { goto label_0C7A; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x0c8d;\n        var0 = func_1559();\n        var var1 = 0x0c95;\n        var1 = func_1559();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_0D40:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_0DA7:\n                        return var0;\n                    } else {\n                    label_0D71:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_0DA7; }\n                        else { goto label_0D71; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_0DA7; }\n                    else { goto label_0D71; }\n                }\n            } else {\n            label_0CD0:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_0D12; }\n                    else { goto label_0CF4; }\n                } else if (var4) {\n                label_0D12:\n                \n                    if (!var4) {\n                    label_0D37:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_0D40; }\n                        else { goto label_0CD0; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3;\n                        var2 = var2 + 0x01;\n                        goto label_0D37;\n                    }\n                } else {\n                label_0CF4:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_0D12; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_0D12;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_0D40; }\n            else { goto label_0CD0; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x0dbb;\n        var0 = func_1559();\n        var var1 = 0x0dc3;\n        var1 = func_1559();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x03];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var4;\n            var temp1 = var5;\n            memory[temp1:temp1 + 0x20] = temp0;\n            memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n            var1 = temp1;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_0EBB:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_0F2C:\n                        return var0;\n                    } else {\n                    label_0EEB:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_0F2C; }\n                        else { goto label_0EEB; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_0F2C; }\n                    else { goto label_0EEB; }\n                }\n            } else {\n            label_0E00:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var6 = 0x03;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp6 + 0x40])] & 0xff)) {\n                label_0EB2:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_0EBB; }\n                    else { goto label_0E00; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                    var3 = var3;\n                    var2 = var2 + 0x01;\n                    goto label_0EB2;\n                }\n            }\n        } else {\n            var temp7 = MSIZE();\n            var temp8 = var4;\n            memory[temp7:temp7 + 0x20] = temp8;\n            memory[0x40:0x60] = temp7 + temp8 * 0x20 + 0x20;\n            var1 = temp7;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_0EBB; }\n            else { goto label_0E00; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x05;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_0F76; }\n            else { goto label_0F73; }\n        } else if (var2) {\n        label_0F76:\n        \n            if (var2) {\n            label_0F7F:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_0F89:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_0F7C:\n            \n                if (var0) { goto label_0F89; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0F73:\n            var2 = !var1;\n        \n            if (var2) { goto label_0F7F; }\n            else { goto label_0F7C; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var2 = arg0;\n        var var3 = msg.sender;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x08f2;\n        var var5 = temp1;\n        executeTransaction(var5);\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x05; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var2 = arg1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1201:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = ~0xff;\n            storage[temp2] = temp3 & storage[temp2];\n            var temp4 = arg1;\n            memory[0x00:0x20] = temp4 & temp0;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = (temp3 & storage[temp5]) | 0x01;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n        label_1169:\n            var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var3) {\n                var2 = var2;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1201; }\n                else { goto label_1169; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp8 = var5 + keccak256(memory[0x00:0x20]);\n                storage[temp8] = (var3 & 0x02 ** 0xa0 - 0x01) | (storage[temp8] & ~(0x02 ** 0xa0 - 0x01));\n                goto label_1201;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = var0;\n        var var1 = arg0;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x12d1;\n        var var3 = arg0;\n        var2 = isConfirmed(var3);\n    \n        if (!var2) {\n        label_0813:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x00;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = temp0 + 0x03;\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x01;\n            var3 = storage[temp0 + 0x01];\n            var0 = temp0;\n            var2 = storage[var0] & 0x02 ** 0xa0 - 0x01;\n            var var4 = var0 + 0x02;\n            var var5 = memory[0x40:0x60];\n            var var6 = var5;\n            var var7 = var4;\n            var temp2 = storage[var7];\n            var var8 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        \n            if (!var8) {\n            label_1373:\n                var temp3 = memory[0x40:0x60];\n                var temp4;\n                temp4, memory[temp3:temp3 + 0x00] = address(var2).call.gas(msg.gas - 0x8796).value(var3)(memory[temp3:temp3 + var6 - temp3]);\n            \n                if (!temp4) {\n                    var temp5 = memory[0x40:0x60];\n                    log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-3]]);\n                    var temp6 = var0 + 0x03;\n                    storage[temp6] = storage[temp6] & ~0xff;\n                    return;\n                } else {\n                    var temp7 = memory[0x40:0x60];\n                    log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-3]]);\n                    goto label_0813;\n                }\n            } else if (0x1f < var8) {\n                var temp8 = var6;\n                var temp9 = temp8 + var8;\n                var6 = temp9;\n                memory[0x00:0x20] = var7;\n                var temp10 = keccak256(memory[0x00:0x20]);\n                memory[temp8:temp8 + 0x20] = storage[temp10];\n                var7 = temp10 + 0x01;\n                var8 = temp8 + 0x20;\n            \n                if (var6 <= var8) { goto label_136A; }\n            \n            label_1356:\n                var temp11 = var7;\n                var temp12 = var8;\n                memory[temp12:temp12 + 0x20] = storage[temp11];\n                var7 = temp11 + 0x01;\n                var8 = temp12 + 0x20;\n            \n                if (var6 > var8) { goto label_1356; }\n            \n            label_136A:\n                var temp13 = var6;\n                var temp14 = temp13 + (var8 - temp13 & 0x1f);\n                var8 = temp13;\n                var6 = temp14;\n                goto label_1373;\n            } else {\n                var temp15 = var6;\n                memory[temp15:temp15 + 0x20] = storage[var7] / 0x0100 * 0x0100;\n                var6 = temp15 + 0x20;\n                var8 = var8;\n                goto label_1373;\n            }\n        }\n    }\n    \n    function func_1505(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_0813:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x0813;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_15FC(var1, var2);\n            goto label_0813;\n        }\n    }\n    \n    function func_1559() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_15F8(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_15FC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x0c82;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_15F8(arg1, var0); }\n    \n    label_160B:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_160B; }\n    \n        arg0 = func_15F8(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_011A:\n        \n            if (msg.value <= 0x00) { stop(); }\n        \n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = msg.value;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n            stop();\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x017b;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ef;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = isOwner(var2);\n            \n            label_01EF:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ef;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var2 = confirmations(var2, var3);\n                goto label_01EF;\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n            \n            label_0256:\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ef;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                goto label_01EF;\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                goto label_0256;\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f1;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp8 = memory[0x40:0x60];\n                var var6 = temp8;\n                memory[var6:var6 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[var6 + 0x20:var6 + 0x20 + 0x20] = var3;\n                memory[var6 + 0x60:var6 + 0x60 + 0x20] = !!var5;\n                memory[var6 + 0x40:var6 + 0x40 + 0x20] = 0x80;\n                var temp9 = storage[var4];\n                var temp10 = (temp9 & !(temp9 & 0x01) * 0x0100 + ~0x00) / 0x02;\n                memory[var6 + 0x80:var6 + 0x80 + 0x20] = temp10;\n                var var7 = var6 + 0x40;\n                var var8 = var6 + 0xa0;\n                var var9 = var4;\n                var var10 = temp10;\n            \n                if (!var10) {\n                label_0388:\n                    var temp11 = memory[0x40:0x60];\n                    return memory[temp11:temp11 + var8 - temp11];\n                } else if (0x1f < var10) {\n                    var temp12 = var8;\n                    var temp13 = temp12 + var10;\n                    var8 = temp13;\n                    memory[0x00:0x20] = var9;\n                    var temp14 = keccak256(memory[0x00:0x20]);\n                    memory[temp12:temp12 + 0x20] = storage[temp14];\n                    var9 = temp14 + 0x01;\n                    var10 = temp12 + 0x20;\n                \n                    if (var8 <= var10) { goto label_037F; }\n                \n                label_036B:\n                    var temp15 = var9;\n                    var temp16 = var10;\n                    memory[temp16:temp16 + 0x20] = storage[temp15];\n                    var9 = temp15 + 0x01;\n                    var10 = temp16 + 0x20;\n                \n                    if (var8 > var10) { goto label_036B; }\n                \n                label_037F:\n                    var temp17 = var8;\n                    var temp18 = temp17 + (var10 - temp17 & 0x1f);\n                    var10 = temp17;\n                    var8 = temp18;\n                    goto label_0388;\n                } else {\n                    var temp19 = var8;\n                    memory[temp19:temp19 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                    var8 = temp19 + 0x20;\n                    var10 = var10;\n                    goto label_0388;\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = getOwners();\n            \n            label_03AD:\n                var temp20 = memory[0x40:0x60];\n                var2 = temp20;\n                memory[var2:var2 + 0x20] = 0x20;\n                var3 = var2;\n                var temp21 = var3 + 0x20;\n                var temp22 = var1;\n                memory[temp21:temp21 + 0x20] = memory[temp22:temp22 + 0x20];\n                var4 = temp21 + 0x20;\n                var5 = temp22 + 0x20;\n                var6 = memory[temp22:temp22 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_03ED:\n                    var temp23 = memory[0x40:0x60];\n                    return memory[temp23:temp23 + (var6 + var4) - temp23];\n                } else {\n                label_03DD:\n                    var temp24 = var10;\n                    memory[var8 + temp24:var8 + temp24 + 0x20] = memory[var9 + temp24:var9 + temp24 + 0x20];\n                    var10 = temp24 + 0x20;\n                \n                    if (var10 >= var7) { goto label_03ED; }\n                    else { goto label_03DD; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                goto label_03AD;\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                goto label_03AD;\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = transactionCount();\n                goto label_0256;\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var temp25 = msg.data[0x44:0x64];\n                var temp26 = msg.data[temp25 + 0x04:temp25 + 0x04 + 0x20];\n                var temp27 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp27 + (temp26 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp27:temp27 + 0x20] = temp26;\n                memory[temp27 + 0x20:temp27 + 0x20 + temp26] = msg.data[temp25 + 0x24:temp25 + 0x24 + temp26];\n                var4 = temp27;\n                var5 = 0x00;\n                var6 = 0x10c8;\n                var7 = var2;\n                var8 = var3;\n                var9 = var4;\n                var10 = 0x00;\n                var var11 = var7;\n            \n                if (!(var11 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                var10 = storage[0x05];\n                var temp28 = memory[0x40:0x60];\n                var var12 = temp28;\n                memory[0x40:0x60] = var12 + 0x80;\n                memory[var12:var12 + 0x20] = var7 & 0x02 ** 0xa0 - 0x01;\n                memory[var12 + 0x20:var12 + 0x20 + 0x20] = var8;\n                memory[var12 + 0x40:var12 + 0x40 + 0x20] = var9;\n                memory[var12 + 0x60:var12 + 0x60 + 0x20] = 0x00;\n                memory[0x00:0x20] = var10;\n                memory[0x20:0x40] = 0x00;\n                var temp29 = keccak256(memory[0x00:0x40]);\n                var var13 = temp29;\n                storage[var13] = (memory[var12:var12 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[var13] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                storage[var13 + 0x01] = memory[var12 + 0x20:var12 + 0x20 + 0x20];\n                var temp30 = memory[var12 + 0x40:var12 + 0x40 + 0x20];\n                var var14 = 0x14a9;\n                var var15 = var13 + 0x02;\n                var var17 = memory[temp30:temp30 + 0x20];\n                var var16 = temp30 + 0x20;\n                var temp31 = var15;\n                var temp32 = storage[temp31];\n                memory[0x00:0x20] = temp31;\n                var var18 = keccak256(memory[0x00:0x20]);\n                var temp33 = var16;\n                var16 = var18 + ((!(temp32 & 0x01) * 0x0100 - 0x01 & temp32) / 0x02 + 0x1f) / 0x20;\n                var var19 = temp33;\n            \n                if (0x1f < var17) {\n                    var temp34 = var17;\n                    storage[var15] = temp34 + temp34 + 0x01;\n                \n                    if (!temp34) {\n                    label_15EB:\n                        var temp35 = var16;\n                        var16 = 0x15f8;\n                        var17 = temp35;\n                        var16 = func_15FC(var17, var18);\n                        var14 = func_15F8(var15, var16);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp36 = var17;\n                        var temp37 = var19;\n                        var17 = temp37;\n                        var19 = var17 + temp36;\n                    \n                        if (var19 <= var17) { goto label_15EB; }\n                    \n                    label_15D9:\n                        var temp38 = var17;\n                        var temp39 = var18;\n                        storage[temp39] = memory[temp38:temp38 + 0x20];\n                        var17 = temp38 + 0x20;\n                        var19 = var19;\n                        var18 = temp39 + 0x01;\n                    \n                        if (var19 <= var17) { goto label_15EB; }\n                        else { goto label_15D9; }\n                    }\n                } else {\n                    var temp40 = var17;\n                    storage[var15] = temp40 + temp40 | (memory[var19:var19 + 0x20] & ~0xff);\n                    goto label_15EB;\n                }\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = MAX_OWNER_COUNT();\n                goto label_0256;\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0256;\n                var2 = required();\n                goto label_0256;\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var temp41 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp41 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp41;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0162;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else { goto label_011A; }\n        }\n    }\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~0xff;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] + ~0x00) {\n        label_07AF:\n            var var2 = storage[0x03] + ~0x00;\n            var var4 = 0x03;\n            var var3 = 0x07c2;\n            var var5 = var2;\n            func_1505(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_07DB:\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n                var3 = storage[0x03];\n                var2 = 0x07db;\n                changeRequirement(var3);\n                goto label_07DB;\n            }\n        } else {\n        label_06E6:\n            var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[var4 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var2) {\n                var1 = var1;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] + ~0x00) { goto label_07AF; }\n                else { goto label_06E6; }\n            } else {\n                var2 = 0x03;\n                var temp2 = storage[var2];\n                var3 = temp2 + ~0x00;\n            \n                if (var3 >= temp2) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var2 = storage[var3 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x03;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp3 = var4 + keccak256(memory[0x00:0x20]);\n                storage[temp3] = (var2 & 0x02 ** 0xa0 - 0x01) | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n                goto label_07AF;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var1 = arg0;\n        var var2 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var3 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] & ~0xff;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x05]) {\n        label_0998:\n            return var0;\n        } else {\n        label_0940:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_0982; }\n                else { goto label_0964; }\n            } else if (var2) {\n            label_0982:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0935:\n                \n                    if (var1 >= storage[0x05]) { goto label_0998; }\n                    else { goto label_0940; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0935;\n                }\n            } else {\n            label_0964:\n                var2 = arg1;\n            \n                if (!var2) { goto label_0982; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_0982;\n            }\n        }\n    }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var0 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x05;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_0A21; }\n            else { goto label_0A1E; }\n        } else if (var4) {\n        label_0A21:\n        \n            if (var4) {\n            label_0A2A:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_0A34:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var var5 = storage[0x03];\n                var4 = 0x03;\n                var var6 = var5 + 0x01;\n                var var7 = 0x0a6c;\n                var var8 = var4;\n                var var9 = var6;\n                func_1505(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = var5 + keccak256(memory[0x00:0x20]);\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                var temp3 = arg0 & temp2;\n                storage[temp1] = (storage[temp1] & ~temp2) | temp3;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n            label_0A27:\n            \n                if (var2) { goto label_0A34; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0A1E:\n            var4 = !var3;\n        \n            if (var4) { goto label_0A2A; }\n            else { goto label_0A27; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= storage[0x03]) {\n        label_0B61:\n            return var0;\n        } else {\n        label_0AE5:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var5 = 0x03;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff) {\n                var temp1 = var1 + 0x01;\n                var1 = temp1;\n            \n                if (var1 != storage[0x04]) { goto label_0B58; }\n                else { goto label_0B50; }\n            } else if (var1 != storage[0x04]) {\n            label_0B58:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_0B61; }\n                else { goto label_0AE5; }\n            } else {\n            label_0B50:\n                var0 = 0x01;\n                goto label_0B61;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x03]) {\n        label_0BE1:\n            return var0;\n        } else {\n        label_0B78:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var4 = 0x03;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_0B6D:\n            \n                if (var1 >= storage[0x03]) { goto label_0BE1; }\n                else { goto label_0B78; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_0B6D;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        return arg0, r1, r2, r3;\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x0c24;\n        var0 = func_1559();\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_0C7A:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp4 + 0x01;\n            var6 = temp2 + 0x20;\n        \n            if (var4 <= var6) { goto label_0C7A; }\n        \n        label_0C5C:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_0C5C; }\n            else { goto label_0C7A; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x0c8d;\n        var0 = func_1559();\n        var var1 = 0x0c95;\n        var1 = func_1559();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_0D40:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_0DA7:\n                        return var0;\n                    } else {\n                    label_0D71:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_0DA7; }\n                        else { goto label_0D71; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_0DA7; }\n                    else { goto label_0D71; }\n                }\n            } else {\n            label_0CD0:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_0D12; }\n                    else { goto label_0CF4; }\n                } else if (var4) {\n                label_0D12:\n                \n                    if (!var4) {\n                    label_0D37:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_0D40; }\n                        else { goto label_0CD0; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3;\n                        var2 = var2 + 0x01;\n                        goto label_0D37;\n                    }\n                } else {\n                label_0CF4:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_0D12; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_0D12;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_0D40; }\n            else { goto label_0CD0; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x0dbb;\n        var0 = func_1559();\n        var var1 = 0x0dc3;\n        var1 = func_1559();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x03];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var4;\n            var temp1 = var5;\n            memory[temp1:temp1 + 0x20] = temp0;\n            memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n            var1 = temp1;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_0EBB:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_0F2C:\n                        return var0;\n                    } else {\n                    label_0EEB:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_0F2C; }\n                        else { goto label_0EEB; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_0F2C; }\n                    else { goto label_0EEB; }\n                }\n            } else {\n            label_0E00:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var6 = 0x03;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp6 + 0x40])] & 0xff)) {\n                label_0EB2:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_0EBB; }\n                    else { goto label_0E00; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                    var3 = var3;\n                    var2 = var2 + 0x01;\n                    goto label_0EB2;\n                }\n            }\n        } else {\n            var temp7 = MSIZE();\n            var temp8 = var4;\n            memory[temp7:temp7 + 0x20] = temp8;\n            memory[0x40:0x60] = temp7 + temp8 * 0x20 + 0x20;\n            var1 = temp7;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_0EBB; }\n            else { goto label_0E00; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x05;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_0F76; }\n            else { goto label_0F73; }\n        } else if (var2) {\n        label_0F76:\n        \n            if (var2) {\n            label_0F7F:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_0F89:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_0F7C:\n            \n                if (var0) { goto label_0F89; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0F73:\n            var2 = !var1;\n        \n            if (var2) { goto label_0F7F; }\n            else { goto label_0F7C; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var2 = arg0;\n        var var3 = msg.sender;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x08f2;\n        var var5 = temp1;\n        executeTransaction(var5);\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x05; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var2 = arg1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1201:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = ~0xff;\n            storage[temp2] = temp3 & storage[temp2];\n            var temp4 = arg1;\n            memory[0x00:0x20] = temp4 & temp0;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = (temp3 & storage[temp5]) | 0x01;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n        label_1169:\n            var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var3) {\n                var2 = var2;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1201; }\n                else { goto label_1169; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp8 = var5 + keccak256(memory[0x00:0x20]);\n                storage[temp8] = (var3 & 0x02 ** 0xa0 - 0x01) | (storage[temp8] & ~(0x02 ** 0xa0 - 0x01));\n                goto label_1201;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = var0;\n        var var1 = arg0;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x12d1;\n        var var3 = arg0;\n        var2 = isConfirmed(var3);\n    \n        if (!var2) {\n        label_0813:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x00;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = temp0 + 0x03;\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x01;\n            var3 = storage[temp0 + 0x01];\n            var0 = temp0;\n            var2 = storage[var0] & 0x02 ** 0xa0 - 0x01;\n            var var4 = var0 + 0x02;\n            var var5 = memory[0x40:0x60];\n            var var6 = var5;\n            var var7 = var4;\n            var temp2 = storage[var7];\n            var var8 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        \n            if (!var8) {\n            label_1373:\n                var temp3 = memory[0x40:0x60];\n                var temp4;\n                temp4, memory[temp3:temp3 + 0x00] = address(var2).call.gas(msg.gas - 0x8796).value(var3)(memory[temp3:temp3 + var6 - temp3]);\n            \n                if (!temp4) {\n                    var temp5 = memory[0x40:0x60];\n                    log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-3]]);\n                    var temp6 = var0 + 0x03;\n                    storage[temp6] = storage[temp6] & ~0xff;\n                    return;\n                } else {\n                    var temp7 = memory[0x40:0x60];\n                    log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-3]]);\n                    goto label_0813;\n                }\n            } else if (0x1f < var8) {\n                var temp8 = var6;\n                var temp9 = temp8 + var8;\n                var6 = temp9;\n                memory[0x00:0x20] = var7;\n                var temp10 = keccak256(memory[0x00:0x20]);\n                memory[temp8:temp8 + 0x20] = storage[temp10];\n                var7 = temp10 + 0x01;\n                var8 = temp8 + 0x20;\n            \n                if (var6 <= var8) { goto label_136A; }\n            \n            label_1356:\n                var temp11 = var7;\n                var temp12 = var8;\n                memory[temp12:temp12 + 0x20] = storage[temp11];\n                var7 = temp11 + 0x01;\n                var8 = temp12 + 0x20;\n            \n                if (var6 > var8) { goto label_1356; }\n            \n            label_136A:\n                var temp13 = var6;\n                var temp14 = temp13 + (var8 - temp13 & 0x1f);\n                var8 = temp13;\n                var6 = temp14;\n                goto label_1373;\n            } else {\n                var temp15 = var6;\n                memory[temp15:temp15 + 0x20] = storage[var7] / 0x0100 * 0x0100;\n                var6 = temp15 + 0x20;\n                var8 = var8;\n                goto label_1373;\n            }\n        }\n    }\n    \n    function func_1505(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_0813:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x0813;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_15FC(var1, var2);\n            goto label_0813;\n        }\n    }\n    \n    function func_1559() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_15F8(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_15FC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x0c82;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_15F8(arg1, var0); }\n    \n    label_160B:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_160B; }\n    \n        arg0 = func_15F8(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 47.735246419906616,
	"usage": {
		"completion_tokens": 647,
		"prompt_tokens": 14947,
		"total_tokens": 15594
	}
}