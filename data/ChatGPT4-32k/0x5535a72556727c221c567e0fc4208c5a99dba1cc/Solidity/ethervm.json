{
	"address": "0x5535a72556727c221c567e0fc4208c5a99dba1cc",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity smart contract code that represents the decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.5.16;\n\ncontract Contract {\n    mapping (address => uint) public balanceOf;\n    address public owner;\n    uint public contributorCount;\n\n    event Log(bytes32 indexed hash, address indexed from, address indexed to, uint value);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function deposit() public payable {\n        require(msg.value > 0, \"No value sent with transaction\");\n        balanceOf[msg.sender] += msg.value;\n        contributorCount++;\n        emit Log(keccak256(abi.encodePacked(msg.sender, msg.value)), msg.sender, address(this), msg.value);\n    }\n\n    function withdraw(uint amount) public {\n        require(amount <= balanceOf[msg.sender], \"Insufficient balance\");\n        balanceOf[msg.sender] -= amount;\n        emit Log(keccak256(abi.encodePacked(msg.sender, amount)), msg.sender, address(this), amount);\n        msg.sender.transfer(amount);\n    }\n\n    function getContribution(address contributor) public view returns (uint) {\n        return balanceOf[contributor];\n    }\n\n    function setOwner(address newOwner) public {\n        require(msg.sender == owner, \"Only the owner can perform this operation\");\n        owner = newOwner;\n    }\n}\n```\nPlease note that this code is a simplified representation of the decompiled EVM bytecode. The actual Solidity code might have more complex structures and features.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472513,
	"id": "chatcmpl-8MurxYAVa1Gx16W6KlBbvv2khhzJS",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00A2:\n            var var0 = 0x00;\n            var var1 = storage[var0] & 0xff;\n        \n            if (var1 > 0x03) { assert(); }\n        \n            var var2 = var0;\n        \n            if (var2 > 0x03) { assert(); }\n        \n            if (var2 != var1) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x04;\n        \n            if (storage[keccak256(memory[0x00:0x40])] != 0x00) {\n            label_0196:\n                var1 = 0x01df;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x04;\n                var2 = storage[keccak256(memory[0x00:0x40])];\n                var var3 = msg.value;\n                var1 = func_0429(var2, var3);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = msg.value;\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee, msg.sender, address(this)]);\n                stop();\n            } else {\n                memory[0x00:0x20] = storage[0x01];\n                memory[0x20:0x40] = 0x03;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                storage[temp2] = msg.sender | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var1 = 0x018f;\n                var2 = storage[0x01];\n                var3 = 0x01;\n                var1 = func_0429(var2, var3);\n                storage[0x01] = var1;\n                goto label_0196;\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x0c3f6acf) {\n                // Dispatch table entry for currentState()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x029f;\n                var2 = currentState();\n                var3 = memory[0x40:0x60];\n                var var4 = var3;\n                var var5 = var2;\n            \n                if (var5 > 0x03) { assert(); }\n            \n                var temp3 = var4;\n                memory[temp3:temp3 + 0x20] = var5 & 0xff;\n                var temp4 = memory[0x40:0x60];\n                return memory[temp4:temp4 + (temp3 + 0x20) - temp4];\n            } else if (var0 == 0x146901db) {\n                // Dispatch table entry for setFailed()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d6;\n                setFailed();\n                stop();\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02eb;\n                refund();\n                stop();\n            } else if (var0 == 0x63bd1d4a) {\n                // Dispatch table entry for payout()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0300;\n                payout();\n                stop();\n            } else if (var0 == 0x760a8c2a) {\n                // Dispatch table entry for setActive()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0315;\n                setActive();\n                stop();\n            } else if (var0 == 0x8ad14ee6) {\n                // Dispatch table entry for setSuccessful()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032a;\n                setSuccessful();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033f;\n                var2 = owner();\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp6 = memory[0x40:0x60];\n                return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n            } else if (var0 == 0xa494817b) {\n                // Dispatch table entry for setIdle()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0394;\n                setIdle();\n                stop();\n            } else if (var0 == 0xcef42254) {\n                // Dispatch table entry for getContribution(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b7;\n                var2 = msg.data[0x04:0x24];\n                var1, var2 = getContribution(var2);\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp8 = temp7 + 0x20;\n                memory[temp8:temp8 + 0x20] = var2;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0xecfd8928) {\n                // Dispatch table entry for contributorCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0413;\n                var2 = contributorCount();\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else { goto label_00A2; }\n        }\n    }\n    \n    function func_0429(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n        var var1 = var0 >= temp0;\n    \n        if (!var1) {\n            if (!var1) { assert(); }\n        \n        label_0448:\n            return var0;\n        } else if (var0 >= arg1) { goto label_0448; }\n        else { assert(); }\n    }\n    \n    function currentState() returns (var r0) { return storage[0x00] & 0xff; }\n    \n    function setFailed() {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x00] & 0xff;\n        var2 = 0x03;\n        var3 = 0x00;\n        var var5 = 0x0100 ** var3;\n        var var4 = ~(var5 * 0xff) & storage[var3];\n        var var6 = var2;\n    \n        if (var6 > 0x03) { assert(); }\n    \n        storage[var3] = var6 * var5 | var4;\n        var2 = address(this);\n        var3 = msg.sender;\n        var4 = 0xe9ed7c8788612648049556b046b8ca806767063db36cb7f1b65ab87df0bd47c6;\n        var5 = var0;\n        var6 = storage[0x00] & 0xff;\n        var var7 = memory[0x40:0x60];\n        var var8 = var7;\n        var var9 = var5;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp0 = var8;\n        memory[temp0:temp0 + 0x20] = var9 & 0xff;\n        var8 = temp0 + 0x20;\n        var9 = var6;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp1 = var8;\n        memory[temp1:temp1 + 0x20] = var9 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-6], stack[-7], stack[-8]]);\n    }\n    \n    function refund() {\n        var var0 = 0x00;\n        var var1 = 0x03;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n        var2 = var0 > 0x00;\n    \n        if (!var2) {\n            if (!var2) { assert(); }\n        \n        label_066C:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            var temp0 = var0;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        \n            if (!temp2) { revert(memory[0x00:0x00]); }\n        \n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = var0;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee, address(this), msg.sender]);\n            return;\n        } else if (var0 <= address(this).balance) { goto label_066C; }\n        else { assert(); }\n    }\n    \n    function payout() {\n        var var0 = 0x00;\n        var var1 = 0x02;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = address(this).balance;\n        var0 = temp0;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = var0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee, address(this), storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function setActive() {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x00] & 0xff;\n        var2 = 0x00;\n        var3 = var2;\n        var var4 = storage[var3] & ~0xff;\n        var var5 = 0x01;\n        var var6 = var3;\n    \n        if (var6 > 0x03) { assert(); }\n    \n        storage[var3] = var6 * var5 | var4;\n        var2 = address(this);\n        var3 = msg.sender;\n        var4 = 0xe9ed7c8788612648049556b046b8ca806767063db36cb7f1b65ab87df0bd47c6;\n        var5 = var0;\n        var6 = storage[0x00] & 0xff;\n        var var7 = memory[0x40:0x60];\n        var var8 = var7;\n        var var9 = var5;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp0 = var8;\n        memory[temp0:temp0 + 0x20] = var9 & 0xff;\n        var8 = temp0 + 0x20;\n        var9 = var6;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp1 = var8;\n        memory[temp1:temp1 + 0x20] = var9 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-6], stack[-7], stack[-8]]);\n    }\n    \n    function setSuccessful() {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x00] & 0xff;\n        var2 = 0x02;\n        var3 = 0x00;\n        var var4 = ~(0x0100 ** var3 * 0xff) & storage[var3];\n        var var5 = 0x0100 ** var3;\n        var var6 = var2;\n    \n        if (var6 > 0x03) { assert(); }\n    \n        storage[var3] = var6 * var5 | var4;\n        var2 = address(this);\n        var3 = msg.sender;\n        var4 = 0xe9ed7c8788612648049556b046b8ca806767063db36cb7f1b65ab87df0bd47c6;\n        var5 = var0;\n        var6 = storage[0x00] & 0xff;\n        var var7 = memory[0x40:0x60];\n        var var8 = var7;\n        var var9 = var5;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp0 = var8;\n        memory[temp0:temp0 + 0x20] = var9 & 0xff;\n        var8 = temp0 + 0x20;\n        var9 = var6;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp1 = var8;\n        memory[temp1:temp1 + 0x20] = var9 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-6], stack[-7], stack[-8]]);\n    }\n    \n    function owner() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function setIdle() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x00] & 0xff;\n        var2 = 0x01;\n        var3 = 0x00;\n        var var5 = 0x0100 ** var3;\n        var var4 = ~(var5 * 0xff) & storage[var3];\n        var var6 = var2;\n    \n        if (var6 > 0x03) { assert(); }\n    \n        storage[var3] = var6 * var5 | var4;\n        var2 = address(this);\n        var3 = msg.sender;\n        var4 = 0xe9ed7c8788612648049556b046b8ca806767063db36cb7f1b65ab87df0bd47c6;\n        var5 = var0;\n        var6 = storage[0x00] & 0xff;\n        var var7 = memory[0x40:0x60];\n        var var8 = var7;\n        var var9 = var5;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp0 = var8;\n        memory[temp0:temp0 + 0x20] = var9 & 0xff;\n        var8 = temp0 + 0x20;\n        var9 = var6;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp1 = var8;\n        memory[temp1:temp1 + 0x20] = var9 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-6], stack[-7], stack[-8]]);\n    }\n    \n    function getContribution(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg0 >= 0x00;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_0D69:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            arg0 = storage[keccak256(memory[0x00:0x40])];\n            r0 = temp0;\n            return r0, arg0;\n        } else if (arg0 < storage[0x01]) { goto label_0D69; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function contributorCount() returns (var r0) { return storage[0x01]; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00A2:\n            var var0 = 0x00;\n            var var1 = storage[var0] & 0xff;\n        \n            if (var1 > 0x03) { assert(); }\n        \n            var var2 = var0;\n        \n            if (var2 > 0x03) { assert(); }\n        \n            if (var2 != var1) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x04;\n        \n            if (storage[keccak256(memory[0x00:0x40])] != 0x00) {\n            label_0196:\n                var1 = 0x01df;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x04;\n                var2 = storage[keccak256(memory[0x00:0x40])];\n                var var3 = msg.value;\n                var1 = func_0429(var2, var3);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = msg.value;\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee, msg.sender, address(this)]);\n                stop();\n            } else {\n                memory[0x00:0x20] = storage[0x01];\n                memory[0x20:0x40] = 0x03;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                storage[temp2] = msg.sender | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var1 = 0x018f;\n                var2 = storage[0x01];\n                var3 = 0x01;\n                var1 = func_0429(var2, var3);\n                storage[0x01] = var1;\n                goto label_0196;\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x0c3f6acf) {\n                // Dispatch table entry for currentState()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x029f;\n                var2 = currentState();\n                var3 = memory[0x40:0x60];\n                var var4 = var3;\n                var var5 = var2;\n            \n                if (var5 > 0x03) { assert(); }\n            \n                var temp3 = var4;\n                memory[temp3:temp3 + 0x20] = var5 & 0xff;\n                var temp4 = memory[0x40:0x60];\n                return memory[temp4:temp4 + (temp3 + 0x20) - temp4];\n            } else if (var0 == 0x146901db) {\n                // Dispatch table entry for setFailed()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d6;\n                setFailed();\n                stop();\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02eb;\n                refund();\n                stop();\n            } else if (var0 == 0x63bd1d4a) {\n                // Dispatch table entry for payout()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0300;\n                payout();\n                stop();\n            } else if (var0 == 0x760a8c2a) {\n                // Dispatch table entry for setActive()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0315;\n                setActive();\n                stop();\n            } else if (var0 == 0x8ad14ee6) {\n                // Dispatch table entry for setSuccessful()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032a;\n                setSuccessful();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033f;\n                var2 = owner();\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp6 = memory[0x40:0x60];\n                return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n            } else if (var0 == 0xa494817b) {\n                // Dispatch table entry for setIdle()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0394;\n                setIdle();\n                stop();\n            } else if (var0 == 0xcef42254) {\n                // Dispatch table entry for getContribution(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b7;\n                var2 = msg.data[0x04:0x24];\n                var1, var2 = getContribution(var2);\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp8 = temp7 + 0x20;\n                memory[temp8:temp8 + 0x20] = var2;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0xecfd8928) {\n                // Dispatch table entry for contributorCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0413;\n                var2 = contributorCount();\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else { goto label_00A2; }\n        }\n    }\n    \n    function func_0429(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n        var var1 = var0 >= temp0;\n    \n        if (!var1) {\n            if (!var1) { assert(); }\n        \n        label_0448:\n            return var0;\n        } else if (var0 >= arg1) { goto label_0448; }\n        else { assert(); }\n    }\n    \n    function currentState() returns (var r0) { return storage[0x00] & 0xff; }\n    \n    function setFailed() {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x00] & 0xff;\n        var2 = 0x03;\n        var3 = 0x00;\n        var var5 = 0x0100 ** var3;\n        var var4 = ~(var5 * 0xff) & storage[var3];\n        var var6 = var2;\n    \n        if (var6 > 0x03) { assert(); }\n    \n        storage[var3] = var6 * var5 | var4;\n        var2 = address(this);\n        var3 = msg.sender;\n        var4 = 0xe9ed7c8788612648049556b046b8ca806767063db36cb7f1b65ab87df0bd47c6;\n        var5 = var0;\n        var6 = storage[0x00] & 0xff;\n        var var7 = memory[0x40:0x60];\n        var var8 = var7;\n        var var9 = var5;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp0 = var8;\n        memory[temp0:temp0 + 0x20] = var9 & 0xff;\n        var8 = temp0 + 0x20;\n        var9 = var6;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp1 = var8;\n        memory[temp1:temp1 + 0x20] = var9 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-6], stack[-7], stack[-8]]);\n    }\n    \n    function refund() {\n        var var0 = 0x00;\n        var var1 = 0x03;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n        var2 = var0 > 0x00;\n    \n        if (!var2) {\n            if (!var2) { assert(); }\n        \n        label_066C:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            var temp0 = var0;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        \n            if (!temp2) { revert(memory[0x00:0x00]); }\n        \n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = var0;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee, address(this), msg.sender]);\n            return;\n        } else if (var0 <= address(this).balance) { goto label_066C; }\n        else { assert(); }\n    }\n    \n    function payout() {\n        var var0 = 0x00;\n        var var1 = 0x02;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = address(this).balance;\n        var0 = temp0;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = var0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee, address(this), storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function setActive() {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x00] & 0xff;\n        var2 = 0x00;\n        var3 = var2;\n        var var4 = storage[var3] & ~0xff;\n        var var5 = 0x01;\n        var var6 = var3;\n    \n        if (var6 > 0x03) { assert(); }\n    \n        storage[var3] = var6 * var5 | var4;\n        var2 = address(this);\n        var3 = msg.sender;\n        var4 = 0xe9ed7c8788612648049556b046b8ca806767063db36cb7f1b65ab87df0bd47c6;\n        var5 = var0;\n        var6 = storage[0x00] & 0xff;\n        var var7 = memory[0x40:0x60];\n        var var8 = var7;\n        var var9 = var5;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp0 = var8;\n        memory[temp0:temp0 + 0x20] = var9 & 0xff;\n        var8 = temp0 + 0x20;\n        var9 = var6;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp1 = var8;\n        memory[temp1:temp1 + 0x20] = var9 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-6], stack[-7], stack[-8]]);\n    }\n    \n    function setSuccessful() {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x00] & 0xff;\n        var2 = 0x02;\n        var3 = 0x00;\n        var var4 = ~(0x0100 ** var3 * 0xff) & storage[var3];\n        var var5 = 0x0100 ** var3;\n        var var6 = var2;\n    \n        if (var6 > 0x03) { assert(); }\n    \n        storage[var3] = var6 * var5 | var4;\n        var2 = address(this);\n        var3 = msg.sender;\n        var4 = 0xe9ed7c8788612648049556b046b8ca806767063db36cb7f1b65ab87df0bd47c6;\n        var5 = var0;\n        var6 = storage[0x00] & 0xff;\n        var var7 = memory[0x40:0x60];\n        var var8 = var7;\n        var var9 = var5;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp0 = var8;\n        memory[temp0:temp0 + 0x20] = var9 & 0xff;\n        var8 = temp0 + 0x20;\n        var9 = var6;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp1 = var8;\n        memory[temp1:temp1 + 0x20] = var9 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-6], stack[-7], stack[-8]]);\n    }\n    \n    function owner() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function setIdle() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x00] & 0xff;\n        var2 = 0x01;\n        var3 = 0x00;\n        var var5 = 0x0100 ** var3;\n        var var4 = ~(var5 * 0xff) & storage[var3];\n        var var6 = var2;\n    \n        if (var6 > 0x03) { assert(); }\n    \n        storage[var3] = var6 * var5 | var4;\n        var2 = address(this);\n        var3 = msg.sender;\n        var4 = 0xe9ed7c8788612648049556b046b8ca806767063db36cb7f1b65ab87df0bd47c6;\n        var5 = var0;\n        var6 = storage[0x00] & 0xff;\n        var var7 = memory[0x40:0x60];\n        var var8 = var7;\n        var var9 = var5;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp0 = var8;\n        memory[temp0:temp0 + 0x20] = var9 & 0xff;\n        var8 = temp0 + 0x20;\n        var9 = var6;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp1 = var8;\n        memory[temp1:temp1 + 0x20] = var9 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-6], stack[-7], stack[-8]]);\n    }\n    \n    function getContribution(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg0 >= 0x00;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_0D69:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            arg0 = storage[keccak256(memory[0x00:0x40])];\n            r0 = temp0;\n            return r0, arg0;\n        } else if (arg0 < storage[0x01]) { goto label_0D69; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function contributorCount() returns (var r0) { return storage[0x01]; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00A2:\n            var var0 = 0x00;\n            var var1 = storage[var0] & 0xff;\n        \n            if (var1 > 0x03) { assert(); }\n        \n            var var2 = var0;\n        \n            if (var2 > 0x03) { assert(); }\n        \n            if (var2 != var1) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x04;\n        \n            if (storage[keccak256(memory[0x00:0x40])] != 0x00) {\n            label_0196:\n                var1 = 0x01df;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x04;\n                var2 = storage[keccak256(memory[0x00:0x40])];\n                var var3 = msg.value;\n                var1 = func_0429(var2, var3);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = msg.value;\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee, msg.sender, address(this)]);\n                stop();\n            } else {\n                memory[0x00:0x20] = storage[0x01];\n                memory[0x20:0x40] = 0x03;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                storage[temp2] = msg.sender | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var1 = 0x018f;\n                var2 = storage[0x01];\n                var3 = 0x01;\n                var1 = func_0429(var2, var3);\n                storage[0x01] = var1;\n                goto label_0196;\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x0c3f6acf) {\n                // Dispatch table entry for currentState()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x029f;\n                var2 = currentState();\n                var3 = memory[0x40:0x60];\n                var var4 = var3;\n                var var5 = var2;\n            \n                if (var5 > 0x03) { assert(); }\n            \n                var temp3 = var4;\n                memory[temp3:temp3 + 0x20] = var5 & 0xff;\n                var temp4 = memory[0x40:0x60];\n                return memory[temp4:temp4 + (temp3 + 0x20) - temp4];\n            } else if (var0 == 0x146901db) {\n                // Dispatch table entry for setFailed()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d6;\n                setFailed();\n                stop();\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02eb;\n                refund();\n                stop();\n            } else if (var0 == 0x63bd1d4a) {\n                // Dispatch table entry for payout()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0300;\n                payout();\n                stop();\n            } else if (var0 == 0x760a8c2a) {\n                // Dispatch table entry for setActive()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0315;\n                setActive();\n                stop();\n            } else if (var0 == 0x8ad14ee6) {\n                // Dispatch table entry for setSuccessful()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032a;\n                setSuccessful();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033f;\n                var2 = owner();\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp6 = memory[0x40:0x60];\n                return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n            } else if (var0 == 0xa494817b) {\n                // Dispatch table entry for setIdle()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0394;\n                setIdle();\n                stop();\n            } else if (var0 == 0xcef42254) {\n                // Dispatch table entry for getContribution(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b7;\n                var2 = msg.data[0x04:0x24];\n                var1, var2 = getContribution(var2);\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp8 = temp7 + 0x20;\n                memory[temp8:temp8 + 0x20] = var2;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0xecfd8928) {\n                // Dispatch table entry for contributorCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0413;\n                var2 = contributorCount();\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else { goto label_00A2; }\n        }\n    }\n    \n    function func_0429(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n        var var1 = var0 >= temp0;\n    \n        if (!var1) {\n            if (!var1) { assert(); }\n        \n        label_0448:\n            return var0;\n        } else if (var0 >= arg1) { goto label_0448; }\n        else { assert(); }\n    }\n    \n    function currentState() returns (var r0) { return storage[0x00] & 0xff; }\n    \n    function setFailed() {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x00] & 0xff;\n        var2 = 0x03;\n        var3 = 0x00;\n        var var5 = 0x0100 ** var3;\n        var var4 = ~(var5 * 0xff) & storage[var3];\n        var var6 = var2;\n    \n        if (var6 > 0x03) { assert(); }\n    \n        storage[var3] = var6 * var5 | var4;\n        var2 = address(this);\n        var3 = msg.sender;\n        var4 = 0xe9ed7c8788612648049556b046b8ca806767063db36cb7f1b65ab87df0bd47c6;\n        var5 = var0;\n        var6 = storage[0x00] & 0xff;\n        var var7 = memory[0x40:0x60];\n        var var8 = var7;\n        var var9 = var5;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp0 = var8;\n        memory[temp0:temp0 + 0x20] = var9 & 0xff;\n        var8 = temp0 + 0x20;\n        var9 = var6;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp1 = var8;\n        memory[temp1:temp1 + 0x20] = var9 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-6], stack[-7], stack[-8]]);\n    }\n    \n    function refund() {\n        var var0 = 0x00;\n        var var1 = 0x03;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n        var2 = var0 > 0x00;\n    \n        if (!var2) {\n            if (!var2) { assert(); }\n        \n        label_066C:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            var temp0 = var0;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        \n            if (!temp2) { revert(memory[0x00:0x00]); }\n        \n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = var0;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee, address(this), msg.sender]);\n            return;\n        } else if (var0 <= address(this).balance) { goto label_066C; }\n        else { assert(); }\n    }\n    \n    function payout() {\n        var var0 = 0x00;\n        var var1 = 0x02;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = address(this).balance;\n        var0 = temp0;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = var0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee, address(this), storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function setActive() {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x00] & 0xff;\n        var2 = 0x00;\n        var3 = var2;\n        var var4 = storage[var3] & ~0xff;\n        var var5 = 0x01;\n        var var6 = var3;\n    \n        if (var6 > 0x03) { assert(); }\n    \n        storage[var3] = var6 * var5 | var4;\n        var2 = address(this);\n        var3 = msg.sender;\n        var4 = 0xe9ed7c8788612648049556b046b8ca806767063db36cb7f1b65ab87df0bd47c6;\n        var5 = var0;\n        var6 = storage[0x00] & 0xff;\n        var var7 = memory[0x40:0x60];\n        var var8 = var7;\n        var var9 = var5;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp0 = var8;\n        memory[temp0:temp0 + 0x20] = var9 & 0xff;\n        var8 = temp0 + 0x20;\n        var9 = var6;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp1 = var8;\n        memory[temp1:temp1 + 0x20] = var9 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-6], stack[-7], stack[-8]]);\n    }\n    \n    function setSuccessful() {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x00] & 0xff;\n        var2 = 0x02;\n        var3 = 0x00;\n        var var4 = ~(0x0100 ** var3 * 0xff) & storage[var3];\n        var var5 = 0x0100 ** var3;\n        var var6 = var2;\n    \n        if (var6 > 0x03) { assert(); }\n    \n        storage[var3] = var6 * var5 | var4;\n        var2 = address(this);\n        var3 = msg.sender;\n        var4 = 0xe9ed7c8788612648049556b046b8ca806767063db36cb7f1b65ab87df0bd47c6;\n        var5 = var0;\n        var6 = storage[0x00] & 0xff;\n        var var7 = memory[0x40:0x60];\n        var var8 = var7;\n        var var9 = var5;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp0 = var8;\n        memory[temp0:temp0 + 0x20] = var9 & 0xff;\n        var8 = temp0 + 0x20;\n        var9 = var6;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp1 = var8;\n        memory[temp1:temp1 + 0x20] = var9 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-6], stack[-7], stack[-8]]);\n    }\n    \n    function owner() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function setIdle() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x00] & 0xff;\n    \n        if (var2 > 0x03) { assert(); }\n    \n        var var3 = var1;\n    \n        if (var3 > 0x03) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x00] & 0xff;\n        var2 = 0x01;\n        var3 = 0x00;\n        var var5 = 0x0100 ** var3;\n        var var4 = ~(var5 * 0xff) & storage[var3];\n        var var6 = var2;\n    \n        if (var6 > 0x03) { assert(); }\n    \n        storage[var3] = var6 * var5 | var4;\n        var2 = address(this);\n        var3 = msg.sender;\n        var4 = 0xe9ed7c8788612648049556b046b8ca806767063db36cb7f1b65ab87df0bd47c6;\n        var5 = var0;\n        var6 = storage[0x00] & 0xff;\n        var var7 = memory[0x40:0x60];\n        var var8 = var7;\n        var var9 = var5;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp0 = var8;\n        memory[temp0:temp0 + 0x20] = var9 & 0xff;\n        var8 = temp0 + 0x20;\n        var9 = var6;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        var temp1 = var8;\n        memory[temp1:temp1 + 0x20] = var9 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-6], stack[-7], stack[-8]]);\n    }\n    \n    function getContribution(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg0 >= 0x00;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_0D69:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            arg0 = storage[keccak256(memory[0x00:0x40])];\n            r0 = temp0;\n            return r0, arg0;\n        } else if (arg0 < storage[0x01]) { goto label_0D69; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function contributorCount() returns (var r0) { return storage[0x01]; }\n}\n\n.",
	"status": "1",
	"time_cost": 19.823673009872437,
	"usage": {
		"completion_tokens": 308,
		"prompt_tokens": 5185,
		"total_tokens": 5493
	}
}