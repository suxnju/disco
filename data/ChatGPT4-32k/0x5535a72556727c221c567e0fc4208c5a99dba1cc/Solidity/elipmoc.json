{
	"address": "0x5535a72556727c221c567e0fc4208c5a99dba1cc",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "```\npragma solidity ^0.8.0;\n\ncontract DecompiledContract {\n\n    uint8 private _currentState; \n    uint256 private _contributorCount; \n    mapping (uint256 => uint256[]) private _getContribution;\n    mapping (address => uint256) private owner_4;\n    address private _owner; \n\n    event Transferred(address indexed _from, address indexed _to, uint256 _value);\n    event Transitioned(address indexed _from, address indexed _to, uint8 _oldState, uint8 _newState);\n\n    function currentState() public view returns(uint8) { \n        require(_currentState <= 3);\n        return _currentState;\n    }\n\n    function setFailed() public { \n        require(_currentState <= 3 && 1 <= 3 && 1 == _currentState && msg.sender == _owner);\n        _currentState = 3;\n        emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n    }\n\n    function refund() public { \n        require(_currentState <= 3 && 3 <= 3 && 3 == _currentState);\n        bool v1 = owner_4[msg.sender] > 0;\n        if (v1) {\n            v1 = owner_4[msg.sender] <= address(this).balance;\n        }\n        require(v1);\n        owner_4[msg.sender] = 0;\n        (bool success, ) = msg.sender.call{value: owner_4[msg.sender]}(\"\");\n        require(success);\n        emit Transferred(address(this), msg.sender, owner_4[msg.sender]);\n    }\n\n    function payout() public { \n        require(_currentState <= 3 && 2 <= 3 && 2 == _currentState && msg.sender == _owner);\n        (bool success, ) = _owner.call{value: address(this).balance}(\"\");\n        require(success);\n        emit Transferred(address(this), _owner, address(this).balance);\n    }\n\n    function setActive() public { \n        require(_currentState <= 3 && 1 <= 3 && 1 == _currentState && msg.sender == _owner);\n        _currentState = 0;\n        emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n    }\n\n    function setSuccessful() public { \n        require(_currentState <= 3 && 1 <= 3 && 1 == _currentState && msg.sender == _owner);\n        _currentState = 2;\n        emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n    }\n\n    function owner() public view returns(address) { \n        return _owner;\n    }\n\n    function setIdle() public { \n        require(_currentState <= 3 && 0 <= 3 && 0 == _currentState && msg.sender == _owner);\n        _currentState = 1;\n        emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n    }\n\n    function getContribution(uint256 _id) public view returns(uint256[] memory) { \n        require(_id >= 0 && _id < _contributorCount);\n        return _getContribution[_id];\n    }\n\n    function contributorCount() public view returns(uint256) { \n        return _contributorCount;\n    }\n\n    function _SafeAdd(uint256 _a, uint256 _b) private pure returns (uint256) { \n        uint256 c = _a + _b;\n        require(c >= _a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function __function_selector__(uint32 function_selector) public payable { \n        // This is a placeholder function for the original function selector, it doesn't have an implementation in Solidity\n    }\n}\n```\n\nPlease note that Solidity does not have an equivalent implementation for the `__function_selector__` function so it's included as a placeholder. The `__function_selector__` function is used to manually handle function calls in EVM bytecode, but in Solidity we don't have to manually handle function calls as the Solidity compiler automatically takes care of it.",
				"role": "assistant"
			}
		}
	],
	"created": 1701455540,
	"id": "chatcmpl-8R2bEBXOqYrOqFtvo2YrvmOUpFLJj",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.24 09:59 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint8 _currentState; // STORAGE[0x0] bytes 0 to 0\nuint256 _contributorCount; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _getContribution; // STORAGE[0x3]\nmapping (uint256 => [uint256]) owner_4; // STORAGE[0x4]\naddress _owner; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nTransferred(address, address, uint256);\nTransitioned(address, address, uint8, uint8);\n\nfunction currentState() public nonPayable { \n    assert(_currentState <= 3);\n    return _currentState;\n}\n\nfunction setFailed() public nonPayable { \n    assert(_currentState <= 3);\n    assert(1 <= 3);\n    require(1 == _currentState);\n    require(msg.sender == _owner);\n    _currentState = 3;\n    assert(_currentState <= 3);\n    assert(_currentState <= 3);\n    emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n}\n\nfunction refund() public nonPayable { \n    assert(_currentState <= 3);\n    assert(3 <= 3);\n    require(3 == _currentState);\n    v0 = v1 = owner_4[msg.sender] > 0;\n    if (v1) {\n        v0 = owner_4[msg.sender] <= (address(this)).balance;\n    }\n    assert(v0);\n    owner_4[msg.sender] = 0;\n    v2 = msg.sender.call().value(owner_4[msg.sender]).gas(!owner_4[msg.sender] * 2300);\n    require(v2);\n    emit Transferred(address(this), msg.sender, owner_4[msg.sender]);\n}\n\nfunction payout() public nonPayable { \n    assert(_currentState <= 3);\n    assert(2 <= 3);\n    require(2 == _currentState);\n    require(msg.sender == _owner);\n    v0 = _owner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0);\n    emit Transferred(address(this), _owner, (address(this)).balance);\n}\n\nfunction setActive() public nonPayable { \n    assert(_currentState <= 3);\n    assert(1 <= 3);\n    require(1 == _currentState);\n    require(msg.sender == _owner);\n    _currentState = 0;\n    assert(_currentState <= 3);\n    assert(_currentState <= 3);\n    emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n}\n\nfunction setSuccessful() public nonPayable { \n    assert(_currentState <= 3);\n    assert(1 <= 3);\n    require(1 == _currentState);\n    require(msg.sender == _owner);\n    _currentState = 2;\n    assert(_currentState <= 3);\n    assert(_currentState <= 3);\n    emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction setIdle() public nonPayable { \n    assert(_currentState <= 3);\n    assert(0 <= 3);\n    require(0 == _currentState);\n    require(msg.sender == _owner);\n    _currentState = 1;\n    assert(_currentState <= 3);\n    assert(_currentState <= 3);\n    emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n}\n\nfunction getContribution(uint256 varg0) public nonPayable { \n    v0 = v1 = varg0 >= 0;\n    if (v1) {\n        v0 = varg0 < _contributorCount;\n    }\n    require(v0);\n    return address(_getContribution[varg0]), _getContribution[address(_getContribution[varg0])];\n}\n\nfunction contributorCount() public nonPayable { \n    return _contributorCount;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 + varg0;\n    v1 = v2 = v0 >= varg1;\n    if (v2) {\n        v1 = v3 = v0 >= varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0xc3f6acf == function_selector) {\n            currentState();\n        } else if (0x146901db == function_selector) {\n            setFailed();\n        } else if (0x590e1ae3 == function_selector) {\n            refund();\n        } else if (0x63bd1d4a == function_selector) {\n            payout();\n        } else if (0x760a8c2a == function_selector) {\n            setActive();\n        } else if (0x8ad14ee6 == function_selector) {\n            setSuccessful();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa494817b == function_selector) {\n            setIdle();\n        } else if (0xcef42254 == function_selector) {\n            getContribution(uint256);\n        } else if (0xecfd8928 == function_selector) {\n            contributorCount();\n        }\n    }\n    assert(_currentState <= 3);\n    assert(0 <= 3);\n    require(0 == _currentState);\n    require(msg.value > 0);\n    if (owner_4[msg.sender] == 0) {\n        _getContribution[_contributorCount] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & _getContribution[_contributorCount];\n        v0 = _SafeAdd(1, _contributorCount);\n        _contributorCount = v0;\n    }\n    v1 = _SafeAdd(msg.value, owner_4[msg.sender]);\n    owner_4[msg.sender] = v1;\n    emit Transferred(msg.sender, address(this), msg.value);\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 09:59 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint8 _currentState; // STORAGE[0x0] bytes 0 to 0\nuint256 _contributorCount; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _getContribution; // STORAGE[0x3]\nmapping (uint256 => [uint256]) owner_4; // STORAGE[0x4]\naddress _owner; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nTransferred(address, address, uint256);\nTransitioned(address, address, uint8, uint8);\n\nfunction currentState() public nonPayable { \n    assert(_currentState <= 3);\n    return _currentState;\n}\n\nfunction setFailed() public nonPayable { \n    assert(_currentState <= 3);\n    assert(1 <= 3);\n    require(1 == _currentState);\n    require(msg.sender == _owner);\n    _currentState = 3;\n    assert(_currentState <= 3);\n    assert(_currentState <= 3);\n    emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n}\n\nfunction refund() public nonPayable { \n    assert(_currentState <= 3);\n    assert(3 <= 3);\n    require(3 == _currentState);\n    v0 = v1 = owner_4[msg.sender] > 0;\n    if (v1) {\n        v0 = owner_4[msg.sender] <= (address(this)).balance;\n    }\n    assert(v0);\n    owner_4[msg.sender] = 0;\n    v2 = msg.sender.call().value(owner_4[msg.sender]).gas(!owner_4[msg.sender] * 2300);\n    require(v2);\n    emit Transferred(address(this), msg.sender, owner_4[msg.sender]);\n}\n\nfunction payout() public nonPayable { \n    assert(_currentState <= 3);\n    assert(2 <= 3);\n    require(2 == _currentState);\n    require(msg.sender == _owner);\n    v0 = _owner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0);\n    emit Transferred(address(this), _owner, (address(this)).balance);\n}\n\nfunction setActive() public nonPayable { \n    assert(_currentState <= 3);\n    assert(1 <= 3);\n    require(1 == _currentState);\n    require(msg.sender == _owner);\n    _currentState = 0;\n    assert(_currentState <= 3);\n    assert(_currentState <= 3);\n    emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n}\n\nfunction setSuccessful() public nonPayable { \n    assert(_currentState <= 3);\n    assert(1 <= 3);\n    require(1 == _currentState);\n    require(msg.sender == _owner);\n    _currentState = 2;\n    assert(_currentState <= 3);\n    assert(_currentState <= 3);\n    emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction setIdle() public nonPayable { \n    assert(_currentState <= 3);\n    assert(0 <= 3);\n    require(0 == _currentState);\n    require(msg.sender == _owner);\n    _currentState = 1;\n    assert(_currentState <= 3);\n    assert(_currentState <= 3);\n    emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n}\n\nfunction getContribution(uint256 varg0) public nonPayable { \n    v0 = v1 = varg0 >= 0;\n    if (v1) {\n        v0 = varg0 < _contributorCount;\n    }\n    require(v0);\n    return address(_getContribution[varg0]), _getContribution[address(_getContribution[varg0])];\n}\n\nfunction contributorCount() public nonPayable { \n    return _contributorCount;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 + varg0;\n    v1 = v2 = v0 >= varg1;\n    if (v2) {\n        v1 = v3 = v0 >= varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0xc3f6acf == function_selector) {\n            currentState();\n        } else if (0x146901db == function_selector) {\n            setFailed();\n        } else if (0x590e1ae3 == function_selector) {\n            refund();\n        } else if (0x63bd1d4a == function_selector) {\n            payout();\n        } else if (0x760a8c2a == function_selector) {\n            setActive();\n        } else if (0x8ad14ee6 == function_selector) {\n            setSuccessful();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa494817b == function_selector) {\n            setIdle();\n        } else if (0xcef42254 == function_selector) {\n            getContribution(uint256);\n        } else if (0xecfd8928 == function_selector) {\n            contributorCount();\n        }\n    }\n    assert(_currentState <= 3);\n    assert(0 <= 3);\n    require(0 == _currentState);\n    require(msg.value > 0);\n    if (owner_4[msg.sender] == 0) {\n        _getContribution[_contributorCount] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & _getContribution[_contributorCount];\n        v0 = _SafeAdd(1, _contributorCount);\n        _contributorCount = v0;\n    }\n    v1 = _SafeAdd(msg.value, owner_4[msg.sender]);\n    owner_4[msg.sender] = v1;\n    emit Transferred(msg.sender, address(this), msg.value);\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 09:59 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint8 _currentState; // STORAGE[0x0] bytes 0 to 0\nuint256 _contributorCount; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _getContribution; // STORAGE[0x3]\nmapping (uint256 => [uint256]) owner_4; // STORAGE[0x4]\naddress _owner; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nTransferred(address, address, uint256);\nTransitioned(address, address, uint8, uint8);\n\nfunction currentState() public nonPayable { \n    assert(_currentState <= 3);\n    return _currentState;\n}\n\nfunction setFailed() public nonPayable { \n    assert(_currentState <= 3);\n    assert(1 <= 3);\n    require(1 == _currentState);\n    require(msg.sender == _owner);\n    _currentState = 3;\n    assert(_currentState <= 3);\n    assert(_currentState <= 3);\n    emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n}\n\nfunction refund() public nonPayable { \n    assert(_currentState <= 3);\n    assert(3 <= 3);\n    require(3 == _currentState);\n    v0 = v1 = owner_4[msg.sender] > 0;\n    if (v1) {\n        v0 = owner_4[msg.sender] <= (address(this)).balance;\n    }\n    assert(v0);\n    owner_4[msg.sender] = 0;\n    v2 = msg.sender.call().value(owner_4[msg.sender]).gas(!owner_4[msg.sender] * 2300);\n    require(v2);\n    emit Transferred(address(this), msg.sender, owner_4[msg.sender]);\n}\n\nfunction payout() public nonPayable { \n    assert(_currentState <= 3);\n    assert(2 <= 3);\n    require(2 == _currentState);\n    require(msg.sender == _owner);\n    v0 = _owner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0);\n    emit Transferred(address(this), _owner, (address(this)).balance);\n}\n\nfunction setActive() public nonPayable { \n    assert(_currentState <= 3);\n    assert(1 <= 3);\n    require(1 == _currentState);\n    require(msg.sender == _owner);\n    _currentState = 0;\n    assert(_currentState <= 3);\n    assert(_currentState <= 3);\n    emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n}\n\nfunction setSuccessful() public nonPayable { \n    assert(_currentState <= 3);\n    assert(1 <= 3);\n    require(1 == _currentState);\n    require(msg.sender == _owner);\n    _currentState = 2;\n    assert(_currentState <= 3);\n    assert(_currentState <= 3);\n    emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction setIdle() public nonPayable { \n    assert(_currentState <= 3);\n    assert(0 <= 3);\n    require(0 == _currentState);\n    require(msg.sender == _owner);\n    _currentState = 1;\n    assert(_currentState <= 3);\n    assert(_currentState <= 3);\n    emit Transitioned(msg.sender, address(this), _currentState, _currentState);\n}\n\nfunction getContribution(uint256 varg0) public nonPayable { \n    v0 = v1 = varg0 >= 0;\n    if (v1) {\n        v0 = varg0 < _contributorCount;\n    }\n    require(v0);\n    return address(_getContribution[varg0]), _getContribution[address(_getContribution[varg0])];\n}\n\nfunction contributorCount() public nonPayable { \n    return _contributorCount;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 + varg0;\n    v1 = v2 = v0 >= varg1;\n    if (v2) {\n        v1 = v3 = v0 >= varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0xc3f6acf == function_selector) {\n            currentState();\n        } else if (0x146901db == function_selector) {\n            setFailed();\n        } else if (0x590e1ae3 == function_selector) {\n            refund();\n        } else if (0x63bd1d4a == function_selector) {\n            payout();\n        } else if (0x760a8c2a == function_selector) {\n            setActive();\n        } else if (0x8ad14ee6 == function_selector) {\n            setSuccessful();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa494817b == function_selector) {\n            setIdle();\n        } else if (0xcef42254 == function_selector) {\n            getContribution(uint256);\n        } else if (0xecfd8928 == function_selector) {\n            contributorCount();\n        }\n    }\n    assert(_currentState <= 3);\n    assert(0 <= 3);\n    require(0 == _currentState);\n    require(msg.value > 0);\n    if (owner_4[msg.sender] == 0) {\n        _getContribution[_contributorCount] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & _getContribution[_contributorCount];\n        v0 = _SafeAdd(1, _contributorCount);\n        _contributorCount = v0;\n    }\n    v1 = _SafeAdd(msg.value, owner_4[msg.sender]);\n    owner_4[msg.sender] = v1;\n    emit Transferred(msg.sender, address(this), msg.value);\n}\n.",
	"status": "1",
	"time_cost": 52.91510558128357,
	"usage": {
		"completion_tokens": 830,
		"prompt_tokens": 1388,
		"total_tokens": 2218
	}
}