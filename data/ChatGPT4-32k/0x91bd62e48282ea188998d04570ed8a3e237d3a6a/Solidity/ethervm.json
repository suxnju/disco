{
	"address": "0x91bd62e48282ea188998d04570ed8a3e237d3a6a",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's a Solidity program that closely matches the functionality described in the decompiled code. Please note that the decompiled code is quite complex and some details might not be perfectly translated. \n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(uint256 => address) public owners;\n    mapping(address => bool) public ownerChecks;\n    mapping(address => mapping(uint256 => bool)) confirmations;\n\n    uint256[] public transactions;\n    uint256 public transactionCount;\n\n    uint256 public required;\n\n    event TransactionExecuted(uint256 txIndex);\n    event TransactionConfirmed(address owner, uint256 txIndex);\n    event OwnerChange(address oldOwner, address newOwner);\n\n    function addOwner(address _newOwner) public {\n        require(!isOwner(_newOwner));\n        owners[transactionCount++] = _newOwner;\n        ownerChecks[_newOwner] = true;\n    }\n\n    function removeOwner(address _owner) public {\n        require(isOwner(_owner));\n        delete owners[transactionCount--];\n        ownerChecks[_owner] = false;\n    }\n\n    function replaceOwner(address _oldOwner, address _newOwner) public {\n        require(isOwner(_oldOwner));\n        require(!isOwner(_newOwner));\n        for (uint i = 0; i < transactionCount; i++) {\n            if (owners[i] == _oldOwner) {\n                owners[i] = _newOwner;\n            }\n        }\n        ownerChecks[_oldOwner] = false;\n        ownerChecks[_newOwner] = true;\n    }\n\n    function isOwner(address _addr) public view returns (bool) {\n        return ownerChecks[_addr];\n    }\n\n    function submitTransaction(address _destination, uint256 _value, bytes memory _data) public returns (uint256) {\n        require(isOwner(msg.sender));\n        uint256 txIndex = transactions.length;\n        transactions.push(txIndex);\n        confirmations[msg.sender][txIndex] = true;\n        return txIndex;\n    }\n\n    function confirmTransaction(uint256 _txIndex) public {\n        require(isOwner(msg.sender));\n        confirmations[msg.sender][_txIndex] = true;\n        executeTransaction(_txIndex);\n    }\n\n    function executeTransaction(uint256 _txIndex) public {\n        require(isOwner(msg.sender));\n        if (isConfirmed(_txIndex)) {\n            (bool success,) = owners[_txIndex].call.value(transactions[_txIndex])(\"\");\n            if (success) {\n                emit TransactionExecuted(_txIndex);\n            }\n        }\n    }\n\n    function isConfirmed(uint256 _txIndex) public view returns (bool) {\n        uint256 count = 0;\n        for (uint256 i = 0; i < transactionCount; i++) {\n            if (confirmations[owners[i]][_txIndex]) {\n                count += 1;\n            }\n            if (count == required) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```\n\nAs the decompiled code is quite complex and seems to be a part of a multi-signature wallet contract, it involves many functions such as adding/removing/confirming owners, submitting/executing transactions, etc. These functions are implemented in Solidity code with the help of mappings and arrays to keep track of owners and transactions. It also emits events for major actions such as confirming a transaction and changing an owner. \n\nPlease note that this is a basic translation and might not cover every single detail of the original EVM bytecode. It's always recommended to test the contract thoroughly before deploying it to a live network.",
				"role": "assistant"
			}
		}
	],
	"created": 1700470980,
	"id": "chatcmpl-8MuTEEW9XBY53ZUWcgUP5yinwXDut",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_011D:\n        \n            if (msg.value <= 0x00) { stop(); }\n        \n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = msg.value;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n            stop();\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x0198;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0211;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0234;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026d;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = isOwner(var2);\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c7;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = confirmations(var2, var3);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = !!var2;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030f;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035c;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x037f;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = !!var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ba;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f1;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp14 = memory[0x40:0x60];\n                var var6 = temp14;\n                memory[var6:var6 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp15 = var6 + 0x20;\n                memory[temp15:temp15 + 0x20] = var3;\n                var temp16 = temp15 + 0x20;\n                var var7 = temp16;\n                var temp17 = var7 + 0x20;\n                memory[temp17:temp17 + 0x20] = !!var5;\n                var temp18 = temp17 + 0x20;\n                memory[var7:var7 + 0x20] = temp18 - var6;\n                var temp19 = var4;\n                var var9 = temp19;\n                var temp20 = storage[var9];\n                memory[temp18:temp18 + 0x20] = (!(temp20 & 0x01) * 0x0100 - 0x01 & temp20) / 0x02;\n                var var8 = temp18 + 0x20;\n                var temp21 = storage[var9];\n                var var10 = (!(temp21 & 0x01) * 0x0100 - 0x01 & temp21) / 0x02;\n            \n                if (!var10) {\n                label_04BC:\n                    var temp22 = memory[0x40:0x60];\n                    return memory[temp22:temp22 + var8 - temp22];\n                } else if (0x1f < var10) {\n                    var temp23 = var8;\n                    var temp24 = temp23 + var10;\n                    var8 = temp24;\n                    memory[0x00:0x20] = var9;\n                    var temp25 = keccak256(memory[0x00:0x20]);\n                    memory[temp23:temp23 + 0x20] = storage[temp25];\n                    var9 = temp25 + 0x01;\n                    var10 = temp23 + 0x20;\n                \n                    if (var8 <= var10) { goto label_04B3; }\n                \n                label_049F:\n                    var temp26 = var9;\n                    var temp27 = var10;\n                    memory[temp27:temp27 + 0x20] = storage[temp26];\n                    var9 = temp26 + 0x01;\n                    var10 = temp27 + 0x20;\n                \n                    if (var8 > var10) { goto label_049F; }\n                \n                label_04B3:\n                    var temp28 = var8;\n                    var temp29 = temp28 + (var10 - temp28 & 0x1f);\n                    var10 = temp28;\n                    var8 = temp29;\n                    goto label_04BC;\n                } else {\n                    var temp30 = var8;\n                    memory[temp30:temp30 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                    var8 = temp30 + 0x20;\n                    var10 = var10;\n                    goto label_04BC;\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e1;\n                var1 = getOwners();\n                var temp31 = memory[0x40:0x60];\n                var2 = temp31;\n                var3 = var2;\n                var temp32 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp32 - var3;\n                var temp33 = var1;\n                memory[temp32:temp32 + 0x20] = memory[temp33:temp33 + 0x20];\n                var4 = temp32 + 0x20;\n                var5 = temp33 + 0x20;\n                var6 = memory[temp33:temp33 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_0524:\n                    var temp34 = memory[0x40:0x60];\n                    return memory[temp34:temp34 + (var6 + var4) - temp34];\n                } else {\n                label_0512:\n                    var temp35 = var10;\n                    memory[var8 + temp35:var8 + temp35 + 0x20] = memory[var9 + temp35:var9 + temp35 + 0x20];\n                    var10 = temp35 + 0x20;\n                \n                    if (var10 >= var7) { goto label_0524; }\n                    else { goto label_0512; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0578;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                var temp36 = memory[0x40:0x60];\n                var2 = temp36;\n                var3 = var2;\n                var temp37 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp37 - var3;\n                var temp38 = var1;\n                memory[temp37:temp37 + 0x20] = memory[temp38:temp38 + 0x20];\n                var4 = temp37 + 0x20;\n                var5 = temp38 + 0x20;\n                var6 = memory[temp38:temp38 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_05BB:\n                    var temp39 = memory[0x40:0x60];\n                    return memory[temp39:temp39 + (var6 + var4) - temp39];\n                } else {\n                label_05A9:\n                    var temp40 = var10;\n                    memory[var8 + temp40:var8 + temp40 + 0x20] = memory[var9 + temp40:var9 + temp40 + 0x20];\n                    var10 = temp40 + 0x20;\n                \n                    if (var10 >= var7) { goto label_05BB; }\n                    else { goto label_05A9; }\n                }\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05f0;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                var temp41 = memory[0x40:0x60];\n                var2 = temp41;\n                var3 = var2;\n                var temp42 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp42 - var3;\n                var temp43 = var1;\n                memory[temp42:temp42 + 0x20] = memory[temp43:temp43 + 0x20];\n                var4 = temp42 + 0x20;\n                var5 = temp43 + 0x20;\n                var6 = memory[temp43:temp43 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_0633:\n                    var temp44 = memory[0x40:0x60];\n                    return memory[temp44:temp44 + (var6 + var4) - temp44];\n                } else {\n                label_0621:\n                    var temp45 = var10;\n                    memory[var8 + temp45:var8 + temp45 + 0x20] = memory[var9 + temp45:var9 + temp45 + 0x20];\n                    var10 = temp45 + 0x20;\n                \n                    if (var10 >= var7) { goto label_0633; }\n                    else { goto label_0621; }\n                }\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x065a;\n                var2 = transactionCount();\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var2;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0691;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06b4;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0739;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var temp48 = msg.data[0x44:0x64] + 0x04;\n                var temp49 = msg.data[temp48:temp48 + 0x20];\n                var temp50 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp50 + (temp49 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp50:temp50 + 0x20] = temp49;\n                memory[temp50 + 0x20:temp50 + 0x20 + temp49] = msg.data[temp48 + 0x20:temp48 + 0x20 + temp49];\n                var4 = temp50;\n                var1 = submitTransaction(var2, var3, var4);\n                var temp51 = memory[0x40:0x60];\n                memory[temp51:temp51 + 0x20] = var1;\n                var temp52 = memory[0x40:0x60];\n                return memory[temp52:temp52 + (temp51 + 0x20) - temp52];\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0762;\n                var2 = MAX_OWNER_COUNT();\n                var temp53 = memory[0x40:0x60];\n                memory[temp53:temp53 + 0x20] = var2;\n                var temp54 = memory[0x40:0x60];\n                return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x078b;\n                var2 = required();\n                var temp55 = memory[0x40:0x60];\n                memory[temp55:temp55 + 0x20] = var2;\n                var temp56 = memory[0x40:0x60];\n                return memory[temp56:temp56 + (temp55 + 0x20) - temp56];\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07f7;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x081a;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else { goto label_011D; }\n        }\n    }\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (storage[temp0] & ~0xff) | 0x00;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] - 0x01) {\n        label_0A78:\n            var var2 = storage[0x03] - 0x01;\n            var var3 = 0x0a90;\n            var var5 = var2;\n            var var4 = 0x03;\n            func_1F53(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_0AAF:\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n                var2 = 0x0aae;\n                var3 = storage[0x03];\n                changeRequirement(var3);\n                goto label_0AAF;\n            }\n        } else {\n        label_095E:\n            var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[var4 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff != var2) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] - 0x01) { goto label_0A78; }\n                else { goto label_095E; }\n            } else {\n                var2 = 0x03;\n                var3 = storage[0x03] - 0x01;\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var2 = storage[var3 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = 0x03;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp2 = var4 + keccak256(memory[0x00:0x20]);\n                storage[temp2] = (var2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_0A78;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        var var2 = msg.sender;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0;\n        memory[0x00:0x20] = var3;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x00;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x05]) {\n        label_0D77:\n            return var0;\n        } else {\n        label_0CFF:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_0D5E; }\n                else { goto label_0D31; }\n            } else if (var2) {\n            label_0D5E:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0CF4:\n                \n                    if (var1 >= storage[0x05]) { goto label_0D77; }\n                    else { goto label_0CFF; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0CF4;\n                }\n            } else {\n            label_0D31:\n                var2 = arg1;\n            \n                if (!var2) { goto label_0D5E; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_0D5E;\n            }\n        }\n    }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x32;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_0E5A; }\n            else { goto label_0E55; }\n        } else if (var4) {\n        label_0E5A:\n        \n            if (var4) {\n            label_0E65:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_0E6F:\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var4 = 0x03;\n                var var5 = storage[var4];\n                var var6 = var5 + 0x01;\n                var var7 = 0x0edb;\n                var var9 = var6;\n                var var8 = var4;\n                func_1F7F(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = var5 + keccak256(memory[0x00:0x20]);\n                var temp2 = arg0;\n                storage[temp1] = (temp2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + memory[0x40:0x60] - temp3], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n            label_0E60:\n            \n                if (var2 != 0x00) { goto label_0E6F; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0E55:\n            var4 = var3 == 0x00;\n        \n            if (var4) { goto label_0E65; }\n            else { goto label_0E60; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n    \n        if (var2 >= storage[0x03]) {\n        label_1052:\n            return var0;\n        } else {\n        label_0F8F:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var5 = 0x03;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff) {\n                var temp2 = var1 + 0x01;\n                var1 = temp2;\n            \n                if (var1 != storage[0x04]) { goto label_1045; }\n                else { goto label_103D; }\n            } else if (var1 != storage[0x04]) {\n            label_1045:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_1052; }\n                else { goto label_0F8F; }\n            } else {\n            label_103D:\n                return 0x01;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x03]) {\n        label_1120:\n            return var0;\n        } else {\n        label_1070:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var4 = 0x03;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_1062:\n            \n                if (var1 >= storage[0x03]) { goto label_1120; }\n                else { goto label_1070; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_1062;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        return arg0, r1, r2, r3;\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x118a;\n        var0 = func_1FAB();\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_120C:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var5 = temp4 + 0x01;\n            var6 = temp2 + 0x20;\n        \n            if (var4 <= var6) { goto label_120C; }\n        \n        label_11C2:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_11C2; }\n            else { goto label_120C; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x121e;\n        var0 = func_1FBF();\n        var var1 = 0x1226;\n        var1 = func_1FBF();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_12F5:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_1367:\n                        return var0;\n                    } else {\n                    label_1325:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_1367; }\n                        else { goto label_1325; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_1367; }\n                    else { goto label_1325; }\n                }\n            } else {\n            label_1260:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_12BF; }\n                    else { goto label_1292; }\n                } else if (var4) {\n                label_12BF:\n                \n                    if (!var4) {\n                    label_12E8:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_12F5; }\n                        else { goto label_1260; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var2 = var2 + 0x01;\n                        goto label_12E8;\n                    }\n                } else {\n                label_1292:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_12BF; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_12BF;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_12F5; }\n            else { goto label_1260; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x137a;\n        var0 = func_1FAB();\n        var var1 = 0x1382;\n        var1 = func_1FAB();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x03];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_14F7:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_1594:\n                        return var0;\n                    } else {\n                    label_1526:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_1594; }\n                        else { goto label_1526; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_1594; }\n                    else { goto label_1526; }\n                }\n            } else {\n            label_13C2:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var6 = 0x03;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp7 = temp6 + 0x20;\n                memory[temp7:temp7 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp7 + 0x20])] & 0xff)) {\n                label_14EA:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_14F7; }\n                    else { goto label_13C2; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var2 = var2 + 0x01;\n                    goto label_14EA;\n                }\n            }\n        } else {\n            var temp8 = MSIZE();\n            var temp9 = var4;\n            memory[temp8:temp8 + 0x20] = temp9;\n            memory[0x40:0x60] = temp8 + temp9 * 0x20 + 0x20;\n            var1 = temp8;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_14F7; }\n            else { goto label_13C2; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x32;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_15FC; }\n            else { goto label_15F7; }\n        } else if (var2) {\n        label_15FC:\n        \n            if (var2) {\n            label_1607:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_1611:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_1602:\n            \n                if (var0 != 0x00) { goto label_1611; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_15F7:\n            var2 = var1 == 0x00;\n        \n            if (var2) { goto label_1607; }\n            else { goto label_1602; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0;\n        var var3 = msg.sender;\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x1826;\n        var var5 = temp1;\n        var4 = isConfirmed(var5);\n    \n        if (!var4) {\n        label_1835:\n            return;\n        } else {\n            var4 = 0x1834;\n            var5 = arg0;\n            executeTransaction(var5);\n            goto label_1835;\n        }\n    }\n    \n    function submitTransaction(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1849;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        var1 = func_1E03(var2, var3, var4);\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x1854;\n        var2 = var0;\n        confirmTransaction(var2);\n        return var0;\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1A3E:\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x00;\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n        label_1966:\n            var var3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff != var3) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1A3E; }\n                else { goto label_1966; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp6 = var5 + keccak256(memory[0x00:0x20]);\n                storage[temp6] = (var3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_1A3E;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0;\n        var var3 = msg.sender;\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var4 = arg0;\n        memory[0x00:0x20] = var4;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var5 = arg0;\n        var var6 = 0x1c79;\n        var var7 = var5;\n        var6 = isConfirmed(var7);\n    \n        if (!var6) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var0 = temp1;\n        var temp2 = var0 + 0x03;\n        storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n        var6 = storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var7 = storage[var0 + 0x01];\n        var var8 = var0 + 0x02;\n        var var9 = memory[0x40:0x60];\n        var var10 = var9;\n        var var11 = var8;\n        var temp3 = storage[var11];\n        var var12 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var12) {\n        label_1D5E:\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x00] = address(var6).call.gas(msg.gas - 0x8796).value(var7)(memory[temp4:temp4 + var10 - temp4]);\n        \n            if (!temp5) {\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-7]]);\n                var temp7 = var0 + 0x03;\n                storage[temp7] = (storage[temp7] & ~0xff) | 0x00;\n                return;\n            } else {\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + memory[0x40:0x60] - temp8], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-7]]);\n                return;\n            }\n        } else if (0x1f < var12) {\n            var temp9 = var10;\n            var temp10 = temp9 + var12;\n            var10 = temp10;\n            memory[0x00:0x20] = var11;\n            var temp11 = keccak256(memory[0x00:0x20]);\n            memory[temp9:temp9 + 0x20] = storage[temp11];\n            var11 = temp11 + 0x01;\n            var12 = temp9 + 0x20;\n        \n            if (var10 <= var12) { goto label_1D55; }\n        \n        label_1D41:\n            var temp12 = var11;\n            var temp13 = var12;\n            memory[temp13:temp13 + 0x20] = storage[temp12];\n            var11 = temp12 + 0x01;\n            var12 = temp13 + 0x20;\n        \n            if (var10 > var12) { goto label_1D41; }\n        \n        label_1D55:\n            var temp14 = var10;\n            var temp15 = temp14 + (var12 - temp14 & 0x1f);\n            var12 = temp14;\n            var10 = temp15;\n            goto label_1D5E;\n        } else {\n            var temp16 = var10;\n            memory[temp16:temp16 + 0x20] = storage[var11] / 0x0100 * 0x0100;\n            var10 = temp16 + 0x20;\n            var12 = var12;\n            goto label_1D5E;\n        }\n    }\n    \n    function func_1E03(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x05];\n        var temp0 = memory[0x40:0x60];\n        var var2 = temp0;\n        memory[0x40:0x60] = var2 + 0x80;\n        memory[var2:var2 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp1 = var2 + 0x20;\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg2;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = !!0x00;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x00;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var var3 = temp3;\n        var temp4 = var3;\n        storage[temp4] = (memory[var2:var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[var3 + 0x01] = memory[var2 + 0x20:var2 + 0x20 + 0x20];\n        var temp5 = memory[var2 + 0x40:var2 + 0x40 + 0x20];\n        var var4 = 0x1ee9;\n        var var5 = var3 + 0x02;\n        var var6 = temp5 + 0x20;\n        var var7 = memory[temp5:temp5 + 0x20];\n        var4 = func_1FD3(var5, var6, var7);\n        var temp6 = var3 + 0x03;\n        storage[temp6] = !!memory[var2 + 0x60:var2 + 0x60 + 0x20] | (storage[temp6] & ~0xff);\n        storage[0x05] = storage[0x05] + 0x01;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51, stack[-5]]);\n        return var0;\n    }\n    \n    function func_1F53(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1F7A:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1f79;\n            var var2 = temp3 + arg1;\n            var var1 = temp4;\n            var0 = func_2053(var1, var2);\n            goto label_1F7A;\n        }\n    }\n    \n    function func_1F7F(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1FA6:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1fa5;\n            var var1 = temp4;\n            var var2 = temp3 + arg1;\n            var0 = func_2053(var1, var2);\n            goto label_1FA6;\n        }\n    }\n    \n    function func_1FAB() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_1FBF() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_1FD3(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var var1 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n    \n        if (0x1f < arg2) {\n            var temp2 = arg2;\n            storage[arg0] = temp2 + temp2 + 0x01;\n        \n            if (!temp2) {\n            label_2042:\n                var temp3 = arg1;\n                arg1 = 0x204f;\n                var0 = var0;\n                arg2 = temp3;\n                arg1 = func_2053(arg2, var0);\n                return arg0;\n            } else {\n                var temp4 = arg2;\n                var temp5 = var1;\n                arg2 = temp5;\n                var1 = arg2 + temp4;\n            \n                if (var1 <= arg2) {\n                label_2041:\n                    goto label_2042;\n                } else {\n                label_202F:\n                    var temp6 = arg2;\n                    var temp7 = var0;\n                    storage[temp7] = memory[temp6:temp6 + 0x20];\n                    arg2 = temp6 + 0x20;\n                    var1 = var1;\n                    var0 = temp7 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_2041; }\n                    else { goto label_202F; }\n                }\n            }\n        } else {\n            var temp8 = arg2;\n            storage[arg0] = temp8 + temp8 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_2042;\n        }\n    }\n    \n    function func_2053(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x2075;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_2071(arg1, var0); }\n    \n    label_2062:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_2062; }\n    \n        arg0 = func_2071(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2071(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_011D:\n        \n            if (msg.value <= 0x00) { stop(); }\n        \n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = msg.value;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n            stop();\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x0198;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0211;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0234;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026d;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = isOwner(var2);\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c7;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = confirmations(var2, var3);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = !!var2;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030f;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035c;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x037f;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = !!var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ba;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f1;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp14 = memory[0x40:0x60];\n                var var6 = temp14;\n                memory[var6:var6 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp15 = var6 + 0x20;\n                memory[temp15:temp15 + 0x20] = var3;\n                var temp16 = temp15 + 0x20;\n                var var7 = temp16;\n                var temp17 = var7 + 0x20;\n                memory[temp17:temp17 + 0x20] = !!var5;\n                var temp18 = temp17 + 0x20;\n                memory[var7:var7 + 0x20] = temp18 - var6;\n                var temp19 = var4;\n                var var9 = temp19;\n                var temp20 = storage[var9];\n                memory[temp18:temp18 + 0x20] = (!(temp20 & 0x01) * 0x0100 - 0x01 & temp20) / 0x02;\n                var var8 = temp18 + 0x20;\n                var temp21 = storage[var9];\n                var var10 = (!(temp21 & 0x01) * 0x0100 - 0x01 & temp21) / 0x02;\n            \n                if (!var10) {\n                label_04BC:\n                    var temp22 = memory[0x40:0x60];\n                    return memory[temp22:temp22 + var8 - temp22];\n                } else if (0x1f < var10) {\n                    var temp23 = var8;\n                    var temp24 = temp23 + var10;\n                    var8 = temp24;\n                    memory[0x00:0x20] = var9;\n                    var temp25 = keccak256(memory[0x00:0x20]);\n                    memory[temp23:temp23 + 0x20] = storage[temp25];\n                    var9 = temp25 + 0x01;\n                    var10 = temp23 + 0x20;\n                \n                    if (var8 <= var10) { goto label_04B3; }\n                \n                label_049F:\n                    var temp26 = var9;\n                    var temp27 = var10;\n                    memory[temp27:temp27 + 0x20] = storage[temp26];\n                    var9 = temp26 + 0x01;\n                    var10 = temp27 + 0x20;\n                \n                    if (var8 > var10) { goto label_049F; }\n                \n                label_04B3:\n                    var temp28 = var8;\n                    var temp29 = temp28 + (var10 - temp28 & 0x1f);\n                    var10 = temp28;\n                    var8 = temp29;\n                    goto label_04BC;\n                } else {\n                    var temp30 = var8;\n                    memory[temp30:temp30 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                    var8 = temp30 + 0x20;\n                    var10 = var10;\n                    goto label_04BC;\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e1;\n                var1 = getOwners();\n                var temp31 = memory[0x40:0x60];\n                var2 = temp31;\n                var3 = var2;\n                var temp32 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp32 - var3;\n                var temp33 = var1;\n                memory[temp32:temp32 + 0x20] = memory[temp33:temp33 + 0x20];\n                var4 = temp32 + 0x20;\n                var5 = temp33 + 0x20;\n                var6 = memory[temp33:temp33 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_0524:\n                    var temp34 = memory[0x40:0x60];\n                    return memory[temp34:temp34 + (var6 + var4) - temp34];\n                } else {\n                label_0512:\n                    var temp35 = var10;\n                    memory[var8 + temp35:var8 + temp35 + 0x20] = memory[var9 + temp35:var9 + temp35 + 0x20];\n                    var10 = temp35 + 0x20;\n                \n                    if (var10 >= var7) { goto label_0524; }\n                    else { goto label_0512; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0578;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                var temp36 = memory[0x40:0x60];\n                var2 = temp36;\n                var3 = var2;\n                var temp37 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp37 - var3;\n                var temp38 = var1;\n                memory[temp37:temp37 + 0x20] = memory[temp38:temp38 + 0x20];\n                var4 = temp37 + 0x20;\n                var5 = temp38 + 0x20;\n                var6 = memory[temp38:temp38 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_05BB:\n                    var temp39 = memory[0x40:0x60];\n                    return memory[temp39:temp39 + (var6 + var4) - temp39];\n                } else {\n                label_05A9:\n                    var temp40 = var10;\n                    memory[var8 + temp40:var8 + temp40 + 0x20] = memory[var9 + temp40:var9 + temp40 + 0x20];\n                    var10 = temp40 + 0x20;\n                \n                    if (var10 >= var7) { goto label_05BB; }\n                    else { goto label_05A9; }\n                }\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05f0;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                var temp41 = memory[0x40:0x60];\n                var2 = temp41;\n                var3 = var2;\n                var temp42 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp42 - var3;\n                var temp43 = var1;\n                memory[temp42:temp42 + 0x20] = memory[temp43:temp43 + 0x20];\n                var4 = temp42 + 0x20;\n                var5 = temp43 + 0x20;\n                var6 = memory[temp43:temp43 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_0633:\n                    var temp44 = memory[0x40:0x60];\n                    return memory[temp44:temp44 + (var6 + var4) - temp44];\n                } else {\n                label_0621:\n                    var temp45 = var10;\n                    memory[var8 + temp45:var8 + temp45 + 0x20] = memory[var9 + temp45:var9 + temp45 + 0x20];\n                    var10 = temp45 + 0x20;\n                \n                    if (var10 >= var7) { goto label_0633; }\n                    else { goto label_0621; }\n                }\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x065a;\n                var2 = transactionCount();\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var2;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0691;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06b4;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0739;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var temp48 = msg.data[0x44:0x64] + 0x04;\n                var temp49 = msg.data[temp48:temp48 + 0x20];\n                var temp50 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp50 + (temp49 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp50:temp50 + 0x20] = temp49;\n                memory[temp50 + 0x20:temp50 + 0x20 + temp49] = msg.data[temp48 + 0x20:temp48 + 0x20 + temp49];\n                var4 = temp50;\n                var1 = submitTransaction(var2, var3, var4);\n                var temp51 = memory[0x40:0x60];\n                memory[temp51:temp51 + 0x20] = var1;\n                var temp52 = memory[0x40:0x60];\n                return memory[temp52:temp52 + (temp51 + 0x20) - temp52];\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0762;\n                var2 = MAX_OWNER_COUNT();\n                var temp53 = memory[0x40:0x60];\n                memory[temp53:temp53 + 0x20] = var2;\n                var temp54 = memory[0x40:0x60];\n                return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x078b;\n                var2 = required();\n                var temp55 = memory[0x40:0x60];\n                memory[temp55:temp55 + 0x20] = var2;\n                var temp56 = memory[0x40:0x60];\n                return memory[temp56:temp56 + (temp55 + 0x20) - temp56];\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07f7;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x081a;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else { goto label_011D; }\n        }\n    }\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (storage[temp0] & ~0xff) | 0x00;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] - 0x01) {\n        label_0A78:\n            var var2 = storage[0x03] - 0x01;\n            var var3 = 0x0a90;\n            var var5 = var2;\n            var var4 = 0x03;\n            func_1F53(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_0AAF:\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n                var2 = 0x0aae;\n                var3 = storage[0x03];\n                changeRequirement(var3);\n                goto label_0AAF;\n            }\n        } else {\n        label_095E:\n            var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[var4 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff != var2) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] - 0x01) { goto label_0A78; }\n                else { goto label_095E; }\n            } else {\n                var2 = 0x03;\n                var3 = storage[0x03] - 0x01;\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var2 = storage[var3 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = 0x03;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp2 = var4 + keccak256(memory[0x00:0x20]);\n                storage[temp2] = (var2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_0A78;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        var var2 = msg.sender;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0;\n        memory[0x00:0x20] = var3;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x00;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x05]) {\n        label_0D77:\n            return var0;\n        } else {\n        label_0CFF:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_0D5E; }\n                else { goto label_0D31; }\n            } else if (var2) {\n            label_0D5E:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0CF4:\n                \n                    if (var1 >= storage[0x05]) { goto label_0D77; }\n                    else { goto label_0CFF; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0CF4;\n                }\n            } else {\n            label_0D31:\n                var2 = arg1;\n            \n                if (!var2) { goto label_0D5E; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_0D5E;\n            }\n        }\n    }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x32;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_0E5A; }\n            else { goto label_0E55; }\n        } else if (var4) {\n        label_0E5A:\n        \n            if (var4) {\n            label_0E65:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_0E6F:\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var4 = 0x03;\n                var var5 = storage[var4];\n                var var6 = var5 + 0x01;\n                var var7 = 0x0edb;\n                var var9 = var6;\n                var var8 = var4;\n                func_1F7F(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = var5 + keccak256(memory[0x00:0x20]);\n                var temp2 = arg0;\n                storage[temp1] = (temp2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + memory[0x40:0x60] - temp3], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n            label_0E60:\n            \n                if (var2 != 0x00) { goto label_0E6F; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0E55:\n            var4 = var3 == 0x00;\n        \n            if (var4) { goto label_0E65; }\n            else { goto label_0E60; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n    \n        if (var2 >= storage[0x03]) {\n        label_1052:\n            return var0;\n        } else {\n        label_0F8F:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var5 = 0x03;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff) {\n                var temp2 = var1 + 0x01;\n                var1 = temp2;\n            \n                if (var1 != storage[0x04]) { goto label_1045; }\n                else { goto label_103D; }\n            } else if (var1 != storage[0x04]) {\n            label_1045:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_1052; }\n                else { goto label_0F8F; }\n            } else {\n            label_103D:\n                return 0x01;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x03]) {\n        label_1120:\n            return var0;\n        } else {\n        label_1070:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var4 = 0x03;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_1062:\n            \n                if (var1 >= storage[0x03]) { goto label_1120; }\n                else { goto label_1070; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_1062;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        return arg0, r1, r2, r3;\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x118a;\n        var0 = func_1FAB();\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_120C:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var5 = temp4 + 0x01;\n            var6 = temp2 + 0x20;\n        \n            if (var4 <= var6) { goto label_120C; }\n        \n        label_11C2:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_11C2; }\n            else { goto label_120C; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x121e;\n        var0 = func_1FBF();\n        var var1 = 0x1226;\n        var1 = func_1FBF();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_12F5:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_1367:\n                        return var0;\n                    } else {\n                    label_1325:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_1367; }\n                        else { goto label_1325; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_1367; }\n                    else { goto label_1325; }\n                }\n            } else {\n            label_1260:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_12BF; }\n                    else { goto label_1292; }\n                } else if (var4) {\n                label_12BF:\n                \n                    if (!var4) {\n                    label_12E8:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_12F5; }\n                        else { goto label_1260; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var2 = var2 + 0x01;\n                        goto label_12E8;\n                    }\n                } else {\n                label_1292:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_12BF; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_12BF;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_12F5; }\n            else { goto label_1260; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x137a;\n        var0 = func_1FAB();\n        var var1 = 0x1382;\n        var1 = func_1FAB();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x03];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_14F7:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_1594:\n                        return var0;\n                    } else {\n                    label_1526:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_1594; }\n                        else { goto label_1526; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_1594; }\n                    else { goto label_1526; }\n                }\n            } else {\n            label_13C2:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var6 = 0x03;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp7 = temp6 + 0x20;\n                memory[temp7:temp7 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp7 + 0x20])] & 0xff)) {\n                label_14EA:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_14F7; }\n                    else { goto label_13C2; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var2 = var2 + 0x01;\n                    goto label_14EA;\n                }\n            }\n        } else {\n            var temp8 = MSIZE();\n            var temp9 = var4;\n            memory[temp8:temp8 + 0x20] = temp9;\n            memory[0x40:0x60] = temp8 + temp9 * 0x20 + 0x20;\n            var1 = temp8;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_14F7; }\n            else { goto label_13C2; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x32;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_15FC; }\n            else { goto label_15F7; }\n        } else if (var2) {\n        label_15FC:\n        \n            if (var2) {\n            label_1607:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_1611:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_1602:\n            \n                if (var0 != 0x00) { goto label_1611; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_15F7:\n            var2 = var1 == 0x00;\n        \n            if (var2) { goto label_1607; }\n            else { goto label_1602; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0;\n        var var3 = msg.sender;\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x1826;\n        var var5 = temp1;\n        var4 = isConfirmed(var5);\n    \n        if (!var4) {\n        label_1835:\n            return;\n        } else {\n            var4 = 0x1834;\n            var5 = arg0;\n            executeTransaction(var5);\n            goto label_1835;\n        }\n    }\n    \n    function submitTransaction(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1849;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        var1 = func_1E03(var2, var3, var4);\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x1854;\n        var2 = var0;\n        confirmTransaction(var2);\n        return var0;\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1A3E:\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x00;\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n        label_1966:\n            var var3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff != var3) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1A3E; }\n                else { goto label_1966; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp6 = var5 + keccak256(memory[0x00:0x20]);\n                storage[temp6] = (var3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_1A3E;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0;\n        var var3 = msg.sender;\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var4 = arg0;\n        memory[0x00:0x20] = var4;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var5 = arg0;\n        var var6 = 0x1c79;\n        var var7 = var5;\n        var6 = isConfirmed(var7);\n    \n        if (!var6) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var0 = temp1;\n        var temp2 = var0 + 0x03;\n        storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n        var6 = storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var7 = storage[var0 + 0x01];\n        var var8 = var0 + 0x02;\n        var var9 = memory[0x40:0x60];\n        var var10 = var9;\n        var var11 = var8;\n        var temp3 = storage[var11];\n        var var12 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var12) {\n        label_1D5E:\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x00] = address(var6).call.gas(msg.gas - 0x8796).value(var7)(memory[temp4:temp4 + var10 - temp4]);\n        \n            if (!temp5) {\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-7]]);\n                var temp7 = var0 + 0x03;\n                storage[temp7] = (storage[temp7] & ~0xff) | 0x00;\n                return;\n            } else {\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + memory[0x40:0x60] - temp8], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-7]]);\n                return;\n            }\n        } else if (0x1f < var12) {\n            var temp9 = var10;\n            var temp10 = temp9 + var12;\n            var10 = temp10;\n            memory[0x00:0x20] = var11;\n            var temp11 = keccak256(memory[0x00:0x20]);\n            memory[temp9:temp9 + 0x20] = storage[temp11];\n            var11 = temp11 + 0x01;\n            var12 = temp9 + 0x20;\n        \n            if (var10 <= var12) { goto label_1D55; }\n        \n        label_1D41:\n            var temp12 = var11;\n            var temp13 = var12;\n            memory[temp13:temp13 + 0x20] = storage[temp12];\n            var11 = temp12 + 0x01;\n            var12 = temp13 + 0x20;\n        \n            if (var10 > var12) { goto label_1D41; }\n        \n        label_1D55:\n            var temp14 = var10;\n            var temp15 = temp14 + (var12 - temp14 & 0x1f);\n            var12 = temp14;\n            var10 = temp15;\n            goto label_1D5E;\n        } else {\n            var temp16 = var10;\n            memory[temp16:temp16 + 0x20] = storage[var11] / 0x0100 * 0x0100;\n            var10 = temp16 + 0x20;\n            var12 = var12;\n            goto label_1D5E;\n        }\n    }\n    \n    function func_1E03(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x05];\n        var temp0 = memory[0x40:0x60];\n        var var2 = temp0;\n        memory[0x40:0x60] = var2 + 0x80;\n        memory[var2:var2 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp1 = var2 + 0x20;\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg2;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = !!0x00;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x00;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var var3 = temp3;\n        var temp4 = var3;\n        storage[temp4] = (memory[var2:var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[var3 + 0x01] = memory[var2 + 0x20:var2 + 0x20 + 0x20];\n        var temp5 = memory[var2 + 0x40:var2 + 0x40 + 0x20];\n        var var4 = 0x1ee9;\n        var var5 = var3 + 0x02;\n        var var6 = temp5 + 0x20;\n        var var7 = memory[temp5:temp5 + 0x20];\n        var4 = func_1FD3(var5, var6, var7);\n        var temp6 = var3 + 0x03;\n        storage[temp6] = !!memory[var2 + 0x60:var2 + 0x60 + 0x20] | (storage[temp6] & ~0xff);\n        storage[0x05] = storage[0x05] + 0x01;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51, stack[-5]]);\n        return var0;\n    }\n    \n    function func_1F53(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1F7A:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1f79;\n            var var2 = temp3 + arg1;\n            var var1 = temp4;\n            var0 = func_2053(var1, var2);\n            goto label_1F7A;\n        }\n    }\n    \n    function func_1F7F(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1FA6:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1fa5;\n            var var1 = temp4;\n            var var2 = temp3 + arg1;\n            var0 = func_2053(var1, var2);\n            goto label_1FA6;\n        }\n    }\n    \n    function func_1FAB() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_1FBF() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_1FD3(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var var1 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n    \n        if (0x1f < arg2) {\n            var temp2 = arg2;\n            storage[arg0] = temp2 + temp2 + 0x01;\n        \n            if (!temp2) {\n            label_2042:\n                var temp3 = arg1;\n                arg1 = 0x204f;\n                var0 = var0;\n                arg2 = temp3;\n                arg1 = func_2053(arg2, var0);\n                return arg0;\n            } else {\n                var temp4 = arg2;\n                var temp5 = var1;\n                arg2 = temp5;\n                var1 = arg2 + temp4;\n            \n                if (var1 <= arg2) {\n                label_2041:\n                    goto label_2042;\n                } else {\n                label_202F:\n                    var temp6 = arg2;\n                    var temp7 = var0;\n                    storage[temp7] = memory[temp6:temp6 + 0x20];\n                    arg2 = temp6 + 0x20;\n                    var1 = var1;\n                    var0 = temp7 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_2041; }\n                    else { goto label_202F; }\n                }\n            }\n        } else {\n            var temp8 = arg2;\n            storage[arg0] = temp8 + temp8 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_2042;\n        }\n    }\n    \n    function func_2053(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x2075;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_2071(arg1, var0); }\n    \n    label_2062:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_2062; }\n    \n        arg0 = func_2071(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2071(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_011D:\n        \n            if (msg.value <= 0x00) { stop(); }\n        \n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = msg.value;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n            stop();\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x0198;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0211;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0234;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026d;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = isOwner(var2);\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c7;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = confirmations(var2, var3);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = !!var2;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030f;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035c;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x037f;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = !!var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ba;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f1;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp14 = memory[0x40:0x60];\n                var var6 = temp14;\n                memory[var6:var6 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp15 = var6 + 0x20;\n                memory[temp15:temp15 + 0x20] = var3;\n                var temp16 = temp15 + 0x20;\n                var var7 = temp16;\n                var temp17 = var7 + 0x20;\n                memory[temp17:temp17 + 0x20] = !!var5;\n                var temp18 = temp17 + 0x20;\n                memory[var7:var7 + 0x20] = temp18 - var6;\n                var temp19 = var4;\n                var var9 = temp19;\n                var temp20 = storage[var9];\n                memory[temp18:temp18 + 0x20] = (!(temp20 & 0x01) * 0x0100 - 0x01 & temp20) / 0x02;\n                var var8 = temp18 + 0x20;\n                var temp21 = storage[var9];\n                var var10 = (!(temp21 & 0x01) * 0x0100 - 0x01 & temp21) / 0x02;\n            \n                if (!var10) {\n                label_04BC:\n                    var temp22 = memory[0x40:0x60];\n                    return memory[temp22:temp22 + var8 - temp22];\n                } else if (0x1f < var10) {\n                    var temp23 = var8;\n                    var temp24 = temp23 + var10;\n                    var8 = temp24;\n                    memory[0x00:0x20] = var9;\n                    var temp25 = keccak256(memory[0x00:0x20]);\n                    memory[temp23:temp23 + 0x20] = storage[temp25];\n                    var9 = temp25 + 0x01;\n                    var10 = temp23 + 0x20;\n                \n                    if (var8 <= var10) { goto label_04B3; }\n                \n                label_049F:\n                    var temp26 = var9;\n                    var temp27 = var10;\n                    memory[temp27:temp27 + 0x20] = storage[temp26];\n                    var9 = temp26 + 0x01;\n                    var10 = temp27 + 0x20;\n                \n                    if (var8 > var10) { goto label_049F; }\n                \n                label_04B3:\n                    var temp28 = var8;\n                    var temp29 = temp28 + (var10 - temp28 & 0x1f);\n                    var10 = temp28;\n                    var8 = temp29;\n                    goto label_04BC;\n                } else {\n                    var temp30 = var8;\n                    memory[temp30:temp30 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                    var8 = temp30 + 0x20;\n                    var10 = var10;\n                    goto label_04BC;\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e1;\n                var1 = getOwners();\n                var temp31 = memory[0x40:0x60];\n                var2 = temp31;\n                var3 = var2;\n                var temp32 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp32 - var3;\n                var temp33 = var1;\n                memory[temp32:temp32 + 0x20] = memory[temp33:temp33 + 0x20];\n                var4 = temp32 + 0x20;\n                var5 = temp33 + 0x20;\n                var6 = memory[temp33:temp33 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_0524:\n                    var temp34 = memory[0x40:0x60];\n                    return memory[temp34:temp34 + (var6 + var4) - temp34];\n                } else {\n                label_0512:\n                    var temp35 = var10;\n                    memory[var8 + temp35:var8 + temp35 + 0x20] = memory[var9 + temp35:var9 + temp35 + 0x20];\n                    var10 = temp35 + 0x20;\n                \n                    if (var10 >= var7) { goto label_0524; }\n                    else { goto label_0512; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0578;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                var temp36 = memory[0x40:0x60];\n                var2 = temp36;\n                var3 = var2;\n                var temp37 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp37 - var3;\n                var temp38 = var1;\n                memory[temp37:temp37 + 0x20] = memory[temp38:temp38 + 0x20];\n                var4 = temp37 + 0x20;\n                var5 = temp38 + 0x20;\n                var6 = memory[temp38:temp38 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_05BB:\n                    var temp39 = memory[0x40:0x60];\n                    return memory[temp39:temp39 + (var6 + var4) - temp39];\n                } else {\n                label_05A9:\n                    var temp40 = var10;\n                    memory[var8 + temp40:var8 + temp40 + 0x20] = memory[var9 + temp40:var9 + temp40 + 0x20];\n                    var10 = temp40 + 0x20;\n                \n                    if (var10 >= var7) { goto label_05BB; }\n                    else { goto label_05A9; }\n                }\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05f0;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                var temp41 = memory[0x40:0x60];\n                var2 = temp41;\n                var3 = var2;\n                var temp42 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp42 - var3;\n                var temp43 = var1;\n                memory[temp42:temp42 + 0x20] = memory[temp43:temp43 + 0x20];\n                var4 = temp42 + 0x20;\n                var5 = temp43 + 0x20;\n                var6 = memory[temp43:temp43 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_0633:\n                    var temp44 = memory[0x40:0x60];\n                    return memory[temp44:temp44 + (var6 + var4) - temp44];\n                } else {\n                label_0621:\n                    var temp45 = var10;\n                    memory[var8 + temp45:var8 + temp45 + 0x20] = memory[var9 + temp45:var9 + temp45 + 0x20];\n                    var10 = temp45 + 0x20;\n                \n                    if (var10 >= var7) { goto label_0633; }\n                    else { goto label_0621; }\n                }\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x065a;\n                var2 = transactionCount();\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var2;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0691;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06b4;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0739;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var temp48 = msg.data[0x44:0x64] + 0x04;\n                var temp49 = msg.data[temp48:temp48 + 0x20];\n                var temp50 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp50 + (temp49 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp50:temp50 + 0x20] = temp49;\n                memory[temp50 + 0x20:temp50 + 0x20 + temp49] = msg.data[temp48 + 0x20:temp48 + 0x20 + temp49];\n                var4 = temp50;\n                var1 = submitTransaction(var2, var3, var4);\n                var temp51 = memory[0x40:0x60];\n                memory[temp51:temp51 + 0x20] = var1;\n                var temp52 = memory[0x40:0x60];\n                return memory[temp52:temp52 + (temp51 + 0x20) - temp52];\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0762;\n                var2 = MAX_OWNER_COUNT();\n                var temp53 = memory[0x40:0x60];\n                memory[temp53:temp53 + 0x20] = var2;\n                var temp54 = memory[0x40:0x60];\n                return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x078b;\n                var2 = required();\n                var temp55 = memory[0x40:0x60];\n                memory[temp55:temp55 + 0x20] = var2;\n                var temp56 = memory[0x40:0x60];\n                return memory[temp56:temp56 + (temp55 + 0x20) - temp56];\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07f7;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x081a;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else { goto label_011D; }\n        }\n    }\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (storage[temp0] & ~0xff) | 0x00;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] - 0x01) {\n        label_0A78:\n            var var2 = storage[0x03] - 0x01;\n            var var3 = 0x0a90;\n            var var5 = var2;\n            var var4 = 0x03;\n            func_1F53(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_0AAF:\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n                var2 = 0x0aae;\n                var3 = storage[0x03];\n                changeRequirement(var3);\n                goto label_0AAF;\n            }\n        } else {\n        label_095E:\n            var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[var4 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff != var2) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] - 0x01) { goto label_0A78; }\n                else { goto label_095E; }\n            } else {\n                var2 = 0x03;\n                var3 = storage[0x03] - 0x01;\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var2 = storage[var3 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = 0x03;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp2 = var4 + keccak256(memory[0x00:0x20]);\n                storage[temp2] = (var2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_0A78;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        var var2 = msg.sender;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0;\n        memory[0x00:0x20] = var3;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x00;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x05]) {\n        label_0D77:\n            return var0;\n        } else {\n        label_0CFF:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_0D5E; }\n                else { goto label_0D31; }\n            } else if (var2) {\n            label_0D5E:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0CF4:\n                \n                    if (var1 >= storage[0x05]) { goto label_0D77; }\n                    else { goto label_0CFF; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0CF4;\n                }\n            } else {\n            label_0D31:\n                var2 = arg1;\n            \n                if (!var2) { goto label_0D5E; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_0D5E;\n            }\n        }\n    }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x32;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_0E5A; }\n            else { goto label_0E55; }\n        } else if (var4) {\n        label_0E5A:\n        \n            if (var4) {\n            label_0E65:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_0E6F:\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var4 = 0x03;\n                var var5 = storage[var4];\n                var var6 = var5 + 0x01;\n                var var7 = 0x0edb;\n                var var9 = var6;\n                var var8 = var4;\n                func_1F7F(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = var5 + keccak256(memory[0x00:0x20]);\n                var temp2 = arg0;\n                storage[temp1] = (temp2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + memory[0x40:0x60] - temp3], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n            label_0E60:\n            \n                if (var2 != 0x00) { goto label_0E6F; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0E55:\n            var4 = var3 == 0x00;\n        \n            if (var4) { goto label_0E65; }\n            else { goto label_0E60; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n    \n        if (var2 >= storage[0x03]) {\n        label_1052:\n            return var0;\n        } else {\n        label_0F8F:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var5 = 0x03;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff) {\n                var temp2 = var1 + 0x01;\n                var1 = temp2;\n            \n                if (var1 != storage[0x04]) { goto label_1045; }\n                else { goto label_103D; }\n            } else if (var1 != storage[0x04]) {\n            label_1045:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_1052; }\n                else { goto label_0F8F; }\n            } else {\n            label_103D:\n                return 0x01;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x03]) {\n        label_1120:\n            return var0;\n        } else {\n        label_1070:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var4 = 0x03;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_1062:\n            \n                if (var1 >= storage[0x03]) { goto label_1120; }\n                else { goto label_1070; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_1062;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        return arg0, r1, r2, r3;\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x118a;\n        var0 = func_1FAB();\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_120C:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var5 = temp4 + 0x01;\n            var6 = temp2 + 0x20;\n        \n            if (var4 <= var6) { goto label_120C; }\n        \n        label_11C2:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_11C2; }\n            else { goto label_120C; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x121e;\n        var0 = func_1FBF();\n        var var1 = 0x1226;\n        var1 = func_1FBF();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_12F5:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_1367:\n                        return var0;\n                    } else {\n                    label_1325:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_1367; }\n                        else { goto label_1325; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_1367; }\n                    else { goto label_1325; }\n                }\n            } else {\n            label_1260:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_12BF; }\n                    else { goto label_1292; }\n                } else if (var4) {\n                label_12BF:\n                \n                    if (!var4) {\n                    label_12E8:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_12F5; }\n                        else { goto label_1260; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var2 = var2 + 0x01;\n                        goto label_12E8;\n                    }\n                } else {\n                label_1292:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_12BF; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_12BF;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_12F5; }\n            else { goto label_1260; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x137a;\n        var0 = func_1FAB();\n        var var1 = 0x1382;\n        var1 = func_1FAB();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x03];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_14F7:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_1594:\n                        return var0;\n                    } else {\n                    label_1526:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_1594; }\n                        else { goto label_1526; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_1594; }\n                    else { goto label_1526; }\n                }\n            } else {\n            label_13C2:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var6 = 0x03;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp7 = temp6 + 0x20;\n                memory[temp7:temp7 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp7 + 0x20])] & 0xff)) {\n                label_14EA:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_14F7; }\n                    else { goto label_13C2; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var2 = var2 + 0x01;\n                    goto label_14EA;\n                }\n            }\n        } else {\n            var temp8 = MSIZE();\n            var temp9 = var4;\n            memory[temp8:temp8 + 0x20] = temp9;\n            memory[0x40:0x60] = temp8 + temp9 * 0x20 + 0x20;\n            var1 = temp8;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_14F7; }\n            else { goto label_13C2; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x32;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_15FC; }\n            else { goto label_15F7; }\n        } else if (var2) {\n        label_15FC:\n        \n            if (var2) {\n            label_1607:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_1611:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_1602:\n            \n                if (var0 != 0x00) { goto label_1611; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_15F7:\n            var2 = var1 == 0x00;\n        \n            if (var2) { goto label_1607; }\n            else { goto label_1602; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0;\n        var var3 = msg.sender;\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x1826;\n        var var5 = temp1;\n        var4 = isConfirmed(var5);\n    \n        if (!var4) {\n        label_1835:\n            return;\n        } else {\n            var4 = 0x1834;\n            var5 = arg0;\n            executeTransaction(var5);\n            goto label_1835;\n        }\n    }\n    \n    function submitTransaction(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1849;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        var1 = func_1E03(var2, var3, var4);\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x1854;\n        var2 = var0;\n        confirmTransaction(var2);\n        return var0;\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1A3E:\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x00;\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n        label_1966:\n            var var3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff != var3) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1A3E; }\n                else { goto label_1966; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp6 = var5 + keccak256(memory[0x00:0x20]);\n                storage[temp6] = (var3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_1A3E;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0;\n        var var3 = msg.sender;\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var4 = arg0;\n        memory[0x00:0x20] = var4;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var5 = arg0;\n        var var6 = 0x1c79;\n        var var7 = var5;\n        var6 = isConfirmed(var7);\n    \n        if (!var6) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var0 = temp1;\n        var temp2 = var0 + 0x03;\n        storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n        var6 = storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var7 = storage[var0 + 0x01];\n        var var8 = var0 + 0x02;\n        var var9 = memory[0x40:0x60];\n        var var10 = var9;\n        var var11 = var8;\n        var temp3 = storage[var11];\n        var var12 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var12) {\n        label_1D5E:\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x00] = address(var6).call.gas(msg.gas - 0x8796).value(var7)(memory[temp4:temp4 + var10 - temp4]);\n        \n            if (!temp5) {\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-7]]);\n                var temp7 = var0 + 0x03;\n                storage[temp7] = (storage[temp7] & ~0xff) | 0x00;\n                return;\n            } else {\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + memory[0x40:0x60] - temp8], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-7]]);\n                return;\n            }\n        } else if (0x1f < var12) {\n            var temp9 = var10;\n            var temp10 = temp9 + var12;\n            var10 = temp10;\n            memory[0x00:0x20] = var11;\n            var temp11 = keccak256(memory[0x00:0x20]);\n            memory[temp9:temp9 + 0x20] = storage[temp11];\n            var11 = temp11 + 0x01;\n            var12 = temp9 + 0x20;\n        \n            if (var10 <= var12) { goto label_1D55; }\n        \n        label_1D41:\n            var temp12 = var11;\n            var temp13 = var12;\n            memory[temp13:temp13 + 0x20] = storage[temp12];\n            var11 = temp12 + 0x01;\n            var12 = temp13 + 0x20;\n        \n            if (var10 > var12) { goto label_1D41; }\n        \n        label_1D55:\n            var temp14 = var10;\n            var temp15 = temp14 + (var12 - temp14 & 0x1f);\n            var12 = temp14;\n            var10 = temp15;\n            goto label_1D5E;\n        } else {\n            var temp16 = var10;\n            memory[temp16:temp16 + 0x20] = storage[var11] / 0x0100 * 0x0100;\n            var10 = temp16 + 0x20;\n            var12 = var12;\n            goto label_1D5E;\n        }\n    }\n    \n    function func_1E03(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x05];\n        var temp0 = memory[0x40:0x60];\n        var var2 = temp0;\n        memory[0x40:0x60] = var2 + 0x80;\n        memory[var2:var2 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp1 = var2 + 0x20;\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg2;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = !!0x00;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x00;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var var3 = temp3;\n        var temp4 = var3;\n        storage[temp4] = (memory[var2:var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[var3 + 0x01] = memory[var2 + 0x20:var2 + 0x20 + 0x20];\n        var temp5 = memory[var2 + 0x40:var2 + 0x40 + 0x20];\n        var var4 = 0x1ee9;\n        var var5 = var3 + 0x02;\n        var var6 = temp5 + 0x20;\n        var var7 = memory[temp5:temp5 + 0x20];\n        var4 = func_1FD3(var5, var6, var7);\n        var temp6 = var3 + 0x03;\n        storage[temp6] = !!memory[var2 + 0x60:var2 + 0x60 + 0x20] | (storage[temp6] & ~0xff);\n        storage[0x05] = storage[0x05] + 0x01;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51, stack[-5]]);\n        return var0;\n    }\n    \n    function func_1F53(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1F7A:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1f79;\n            var var2 = temp3 + arg1;\n            var var1 = temp4;\n            var0 = func_2053(var1, var2);\n            goto label_1F7A;\n        }\n    }\n    \n    function func_1F7F(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1FA6:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1fa5;\n            var var1 = temp4;\n            var var2 = temp3 + arg1;\n            var0 = func_2053(var1, var2);\n            goto label_1FA6;\n        }\n    }\n    \n    function func_1FAB() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_1FBF() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_1FD3(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var var1 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n    \n        if (0x1f < arg2) {\n            var temp2 = arg2;\n            storage[arg0] = temp2 + temp2 + 0x01;\n        \n            if (!temp2) {\n            label_2042:\n                var temp3 = arg1;\n                arg1 = 0x204f;\n                var0 = var0;\n                arg2 = temp3;\n                arg1 = func_2053(arg2, var0);\n                return arg0;\n            } else {\n                var temp4 = arg2;\n                var temp5 = var1;\n                arg2 = temp5;\n                var1 = arg2 + temp4;\n            \n                if (var1 <= arg2) {\n                label_2041:\n                    goto label_2042;\n                } else {\n                label_202F:\n                    var temp6 = arg2;\n                    var temp7 = var0;\n                    storage[temp7] = memory[temp6:temp6 + 0x20];\n                    arg2 = temp6 + 0x20;\n                    var1 = var1;\n                    var0 = temp7 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_2041; }\n                    else { goto label_202F; }\n                }\n            }\n        } else {\n            var temp8 = arg2;\n            storage[arg0] = temp8 + temp8 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_2042;\n        }\n    }\n    \n    function func_2053(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x2075;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_2071(arg1, var0); }\n    \n    label_2062:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_2062; }\n    \n        arg0 = func_2071(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2071(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 41.13784861564636,
	"usage": {
		"completion_tokens": 730,
		"prompt_tokens": 16602,
		"total_tokens": 17332
	}
}