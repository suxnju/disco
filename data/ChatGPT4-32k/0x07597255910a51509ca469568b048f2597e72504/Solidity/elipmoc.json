{
	"address": "0x07597255910a51509ca469568b048f2597e72504",
	"choices": {
		"finish_reason": "stop",
		"index": 0,
		"logprobs": null,
		"message": {
			"content": "It's quite challenging to convert the decompiled EVM Bytecode back into a Solidity contract without having the original contract. However, this code seems to represent an ERC-20 Token contract with additional functionality, like transferring ownership. \n\nThe converted Solidity contract might look as follows:\n\n```solidity\npragma solidity ^0.4.7;\n\ncontract MyToken {\n    uint256 public totalSupply;\n    uint256 public decimal;\n    address public owner;\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor(uint256 _totalSupply) public {\n        owner = msg.sender;\n        totalSupply = _totalSupply;\n        balanceOf[msg.sender] = _totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balanceOf[_from]);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == owner);\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n```\nPlease note, as mentioned before, the original contract could have additional logic and functions which are not identifiable from the given decompiled EVM Bytecode. This is a simplified version of the original contract based on the standard ERC20 token contract with some additional functionality like transferring ownership. You should use this as a starting point and add additional logic based on your needs.",
			"function_call": null,
			"role": "assistant",
			"tool_calls": null
		}
	},
	"created": 1711534044,
	"id": "chatcmpl-97KTkCYb6fhJhdIpAAIU2b4M8MoP9",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2024.03.16 07:21 UTC\n// Compiled using the solidity compiler version 0.4.7<=v<0.5.9\n\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_0; // STORAGE[0x0]\nmapping (uint256 => uint256) owner_2; // STORAGE[0x2]\nmapping (uint256 => mapping (uint256 => uint256)) owner_3; // STORAGE[0x3]\nuint256 stor_4; // STORAGE[0x4]\nuint256[] array_5; // STORAGE[0x5]\nuint256 stor_6; // STORAGE[0x6]\nuint256[] array_7; // STORAGE[0x7]\nuint256 ___function_selector__; // STORAGE[0x1] bytes 0 to 19\n\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nOwnershipTransferred(address, address);\n\nfunction 0x5fd() private { \n    v0 = new bytes[](((!(0x1 & array_5.length) << 8) - 1 & array_5.length) >> 1);\n    v1 = v2 = v0.data;\n    if (!(((!(0x1 & array_5.length) << 8) - 1 & array_5.length) >> 1)) {\n        return v0, v3;\n    } else if (31 < ((!(0x1 & array_5.length) << 8) - 1 & array_5.length) >> 1) {\n        v4 = v5 = array_5.data;\n        do {\n            MEM[v1] = STORAGE[v4];\n            v4 += 1;\n            v1 += 32;\n        } while (v2 + (((!(0x1 & array_5.length) << 8) - 1 & array_5.length) >> 1) <= v1);\n        return v0, v3;\n    } else {\n        MEM[v2] = array_5.length >> 8 << 8;\n        return v0, v3;\n    }\n}\n\nfunction function_selector() public payable { \n    revert();\n}\n\nfunction 0xeb5() private { \n    v0 = new bytes[](((!(0x1 & array_7.length) << 8) - 1 & array_7.length) >> 1);\n    v1 = v2 = v0.data;\n    if (!(((!(0x1 & array_7.length) << 8) - 1 & array_7.length) >> 1)) {\n        return v0, v3;\n    } else if (31 < ((!(0x1 & array_7.length) << 8) - 1 & array_7.length) >> 1) {\n        v4 = v5 = array_7.data;\n        do {\n            MEM[v1] = STORAGE[v4];\n            v4 += 1;\n            v1 += 32;\n        } while (v2 + (((!(0x1 & array_7.length) << 8) - 1 & array_7.length) >> 1) <= v1);\n        return v0, v3;\n    } else {\n        MEM[v2] = array_7.length >> 8 << 8;\n        return v0, v3;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction function_selector(bytes4 function_selector, uint256 varg1, uint256 varg2, uint256 varg3) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            v0, v1 = 0x5fd();\n            v2 = new bytes[](v0.length);\n            v3 = v4 = 0;\n            while (v3 < v0.length) {\n                v2[v3] = v0[v3];\n                v3 = v3 + 32;\n            }\n            v5 = v6 = v0.length + v2.data;\n            if (0x1f & v0.length) {\n                MEM[v6 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v6 - (0x1f & v0.length)];\n            }\n            return v2;\n        } else if (0x95ea7b3 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(owner_2[msg.sender] >= varg2);\n            owner_3[msg.sender][address(varg1)] = varg2;\n            emit Approval(msg.sender, address(varg1), varg2);\n            return True;\n        } else if (0x141ddca7 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return stor_4;\n        } else if (0x18160ddd == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return stor_0;\n        } else if (0x23b872dd == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            v7 = v8 = owner_2[address(varg1)] >= varg3;\n            if (owner_2[address(varg1)] >= varg3) {\n                v7 = v9 = owner_3[address(varg1)][msg.sender] >= varg3;\n            }\n            require(bool(v7));\n            owner_2[address(varg2)] = owner_2[address(varg2)] + varg3;\n            owner_2[address(varg1)] = owner_2[address(varg1)] - varg3;\n            if (owner_3[address(varg1)][msg.sender] < uint256.max) {\n                owner_3[address(varg1)][msg.sender] = owner_3[address(varg1)][msg.sender] - varg3;\n            }\n            emit Transfer(address(varg1), address(varg2), varg3);\n            return True;\n        } else if (0x313ce567 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return stor_6;\n        } else if (0x42966c68 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(msg.sender == ___function_selector__);\n            require(bool(address(msg.sender) != address(0x0)));\n            stor_0 = stor_0 - varg1;\n            owner_2[msg.sender] = owner_2[msg.sender] - varg1;\n            emit Transfer(msg.sender, address(0x0), varg1);\n            exit;\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return owner_2[address(varg1)];\n        } else if (0x79cc6790 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(owner_2[msg.sender] >= varg2);\n            owner_2[msg.sender] = owner_2[msg.sender] - varg2;\n            emit Transfer(msg.sender, address(0x0), varg2);\n            return True;\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return ___function_selector__;\n        } else if (0x8de93222 == uint32(function_selector >> 224)) {\n            assert(bool(stor_4));\n            require(owner_2[___function_selector__] >= msg.value * 10 ** 18 / stor_4);\n            owner_2[___function_selector__] = owner_2[___function_selector__] - msg.value * 10 ** 18 / stor_4;\n            owner_2[address(varg1)] = owner_2[address(varg1)] + msg.value * 10 ** 18 / stor_4;\n            emit Transfer(___function_selector__, address(varg1), msg.value * 10 ** 18 / stor_4);\n            return True;\n        } else if (0x91b7f5ed == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(msg.sender == ___function_selector__);\n            stor_4 = varg1;\n            return True;\n        } else if (0x95d89b41 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            v10, v11 = 0xeb5();\n            v12 = new bytes[](v10.length);\n            v13 = v14 = 0;\n            while (v13 < v10.length) {\n                v12[v13] = v10[v13];\n                v13 = v13 + 32;\n            }\n            v15 = v16 = v10.length + v12.data;\n            if (0x1f & v10.length) {\n                MEM[v16 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v16 - (0x1f & v10.length)];\n            }\n            return v12;\n        } else if (0xa9059cbb == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(owner_2[msg.sender] >= varg2);\n            owner_2[msg.sender] = owner_2[msg.sender] - varg2;\n            owner_2[address(varg1)] = owner_2[address(varg1)] + varg2;\n            emit Transfer(msg.sender, address(varg1), varg2);\n            return True;\n        } else if (0xdd62ed3e == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return owner_3[address(varg1)][address(varg2)];\n        } else if (0xf2fde38b == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(msg.sender == ___function_selector__);\n            require(bool(address(address(varg1)) != address(0x0)));\n            emit OwnershipTransferred(___function_selector__, address(varg1));\n            ___function_selector__ = address(varg1);\n            owner_2[msg.sender] = owner_2[msg.sender] - owner_2[msg.sender];\n            owner_2[address(varg1)] = owner_2[address(varg1)] + owner_2[msg.sender];\n            emit Transfer(msg.sender, address(varg1), owner_2[msg.sender]);\n            exit;\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2024.03.16 07:21 UTC\n// Compiled using the solidity compiler version 0.4.7<=v<0.5.9\n\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_0; // STORAGE[0x0]\nmapping (uint256 => uint256) owner_2; // STORAGE[0x2]\nmapping (uint256 => mapping (uint256 => uint256)) owner_3; // STORAGE[0x3]\nuint256 stor_4; // STORAGE[0x4]\nuint256[] array_5; // STORAGE[0x5]\nuint256 stor_6; // STORAGE[0x6]\nuint256[] array_7; // STORAGE[0x7]\nuint256 ___function_selector__; // STORAGE[0x1] bytes 0 to 19\n\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nOwnershipTransferred(address, address);\n\nfunction 0x5fd() private { \n    v0 = new bytes[](((!(0x1 & array_5.length) << 8) - 1 & array_5.length) >> 1);\n    v1 = v2 = v0.data;\n    if (!(((!(0x1 & array_5.length) << 8) - 1 & array_5.length) >> 1)) {\n        return v0, v3;\n    } else if (31 < ((!(0x1 & array_5.length) << 8) - 1 & array_5.length) >> 1) {\n        v4 = v5 = array_5.data;\n        do {\n            MEM[v1] = STORAGE[v4];\n            v4 += 1;\n            v1 += 32;\n        } while (v2 + (((!(0x1 & array_5.length) << 8) - 1 & array_5.length) >> 1) <= v1);\n        return v0, v3;\n    } else {\n        MEM[v2] = array_5.length >> 8 << 8;\n        return v0, v3;\n    }\n}\n\nfunction function_selector() public payable { \n    revert();\n}\n\nfunction 0xeb5() private { \n    v0 = new bytes[](((!(0x1 & array_7.length) << 8) - 1 & array_7.length) >> 1);\n    v1 = v2 = v0.data;\n    if (!(((!(0x1 & array_7.length) << 8) - 1 & array_7.length) >> 1)) {\n        return v0, v3;\n    } else if (31 < ((!(0x1 & array_7.length) << 8) - 1 & array_7.length) >> 1) {\n        v4 = v5 = array_7.data;\n        do {\n            MEM[v1] = STORAGE[v4];\n            v4 += 1;\n            v1 += 32;\n        } while (v2 + (((!(0x1 & array_7.length) << 8) - 1 & array_7.length) >> 1) <= v1);\n        return v0, v3;\n    } else {\n        MEM[v2] = array_7.length >> 8 << 8;\n        return v0, v3;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction function_selector(bytes4 function_selector, uint256 varg1, uint256 varg2, uint256 varg3) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            v0, v1 = 0x5fd();\n            v2 = new bytes[](v0.length);\n            v3 = v4 = 0;\n            while (v3 < v0.length) {\n                v2[v3] = v0[v3];\n                v3 = v3 + 32;\n            }\n            v5 = v6 = v0.length + v2.data;\n            if (0x1f & v0.length) {\n                MEM[v6 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v6 - (0x1f & v0.length)];\n            }\n            return v2;\n        } else if (0x95ea7b3 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(owner_2[msg.sender] >= varg2);\n            owner_3[msg.sender][address(varg1)] = varg2;\n            emit Approval(msg.sender, address(varg1), varg2);\n            return True;\n        } else if (0x141ddca7 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return stor_4;\n        } else if (0x18160ddd == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return stor_0;\n        } else if (0x23b872dd == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            v7 = v8 = owner_2[address(varg1)] >= varg3;\n            if (owner_2[address(varg1)] >= varg3) {\n                v7 = v9 = owner_3[address(varg1)][msg.sender] >= varg3;\n            }\n            require(bool(v7));\n            owner_2[address(varg2)] = owner_2[address(varg2)] + varg3;\n            owner_2[address(varg1)] = owner_2[address(varg1)] - varg3;\n            if (owner_3[address(varg1)][msg.sender] < uint256.max) {\n                owner_3[address(varg1)][msg.sender] = owner_3[address(varg1)][msg.sender] - varg3;\n            }\n            emit Transfer(address(varg1), address(varg2), varg3);\n            return True;\n        } else if (0x313ce567 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return stor_6;\n        } else if (0x42966c68 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(msg.sender == ___function_selector__);\n            require(bool(address(msg.sender) != address(0x0)));\n            stor_0 = stor_0 - varg1;\n            owner_2[msg.sender] = owner_2[msg.sender] - varg1;\n            emit Transfer(msg.sender, address(0x0), varg1);\n            exit;\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return owner_2[address(varg1)];\n        } else if (0x79cc6790 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(owner_2[msg.sender] >= varg2);\n            owner_2[msg.sender] = owner_2[msg.sender] - varg2;\n            emit Transfer(msg.sender, address(0x0), varg2);\n            return True;\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return ___function_selector__;\n        } else if (0x8de93222 == uint32(function_selector >> 224)) {\n            assert(bool(stor_4));\n            require(owner_2[___function_selector__] >= msg.value * 10 ** 18 / stor_4);\n            owner_2[___function_selector__] = owner_2[___function_selector__] - msg.value * 10 ** 18 / stor_4;\n            owner_2[address(varg1)] = owner_2[address(varg1)] + msg.value * 10 ** 18 / stor_4;\n            emit Transfer(___function_selector__, address(varg1), msg.value * 10 ** 18 / stor_4);\n            return True;\n        } else if (0x91b7f5ed == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(msg.sender == ___function_selector__);\n            stor_4 = varg1;\n            return True;\n        } else if (0x95d89b41 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            v10, v11 = 0xeb5();\n            v12 = new bytes[](v10.length);\n            v13 = v14 = 0;\n            while (v13 < v10.length) {\n                v12[v13] = v10[v13];\n                v13 = v13 + 32;\n            }\n            v15 = v16 = v10.length + v12.data;\n            if (0x1f & v10.length) {\n                MEM[v16 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v16 - (0x1f & v10.length)];\n            }\n            return v12;\n        } else if (0xa9059cbb == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(owner_2[msg.sender] >= varg2);\n            owner_2[msg.sender] = owner_2[msg.sender] - varg2;\n            owner_2[address(varg1)] = owner_2[address(varg1)] + varg2;\n            emit Transfer(msg.sender, address(varg1), varg2);\n            return True;\n        } else if (0xdd62ed3e == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return owner_3[address(varg1)][address(varg2)];\n        } else if (0xf2fde38b == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(msg.sender == ___function_selector__);\n            require(bool(address(address(varg1)) != address(0x0)));\n            emit OwnershipTransferred(___function_selector__, address(varg1));\n            ___function_selector__ = address(varg1);\n            owner_2[msg.sender] = owner_2[msg.sender] - owner_2[msg.sender];\n            owner_2[address(varg1)] = owner_2[address(varg1)] + owner_2[msg.sender];\n            emit Transfer(msg.sender, address(varg1), owner_2[msg.sender]);\n            exit;\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2024.03.16 07:21 UTC\n// Compiled using the solidity compiler version 0.4.7<=v<0.5.9\n\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_0; // STORAGE[0x0]\nmapping (uint256 => uint256) owner_2; // STORAGE[0x2]\nmapping (uint256 => mapping (uint256 => uint256)) owner_3; // STORAGE[0x3]\nuint256 stor_4; // STORAGE[0x4]\nuint256[] array_5; // STORAGE[0x5]\nuint256 stor_6; // STORAGE[0x6]\nuint256[] array_7; // STORAGE[0x7]\nuint256 ___function_selector__; // STORAGE[0x1] bytes 0 to 19\n\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nOwnershipTransferred(address, address);\n\nfunction 0x5fd() private { \n    v0 = new bytes[](((!(0x1 & array_5.length) << 8) - 1 & array_5.length) >> 1);\n    v1 = v2 = v0.data;\n    if (!(((!(0x1 & array_5.length) << 8) - 1 & array_5.length) >> 1)) {\n        return v0, v3;\n    } else if (31 < ((!(0x1 & array_5.length) << 8) - 1 & array_5.length) >> 1) {\n        v4 = v5 = array_5.data;\n        do {\n            MEM[v1] = STORAGE[v4];\n            v4 += 1;\n            v1 += 32;\n        } while (v2 + (((!(0x1 & array_5.length) << 8) - 1 & array_5.length) >> 1) <= v1);\n        return v0, v3;\n    } else {\n        MEM[v2] = array_5.length >> 8 << 8;\n        return v0, v3;\n    }\n}\n\nfunction function_selector() public payable { \n    revert();\n}\n\nfunction 0xeb5() private { \n    v0 = new bytes[](((!(0x1 & array_7.length) << 8) - 1 & array_7.length) >> 1);\n    v1 = v2 = v0.data;\n    if (!(((!(0x1 & array_7.length) << 8) - 1 & array_7.length) >> 1)) {\n        return v0, v3;\n    } else if (31 < ((!(0x1 & array_7.length) << 8) - 1 & array_7.length) >> 1) {\n        v4 = v5 = array_7.data;\n        do {\n            MEM[v1] = STORAGE[v4];\n            v4 += 1;\n            v1 += 32;\n        } while (v2 + (((!(0x1 & array_7.length) << 8) - 1 & array_7.length) >> 1) <= v1);\n        return v0, v3;\n    } else {\n        MEM[v2] = array_7.length >> 8 << 8;\n        return v0, v3;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction function_selector(bytes4 function_selector, uint256 varg1, uint256 varg2, uint256 varg3) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            v0, v1 = 0x5fd();\n            v2 = new bytes[](v0.length);\n            v3 = v4 = 0;\n            while (v3 < v0.length) {\n                v2[v3] = v0[v3];\n                v3 = v3 + 32;\n            }\n            v5 = v6 = v0.length + v2.data;\n            if (0x1f & v0.length) {\n                MEM[v6 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v6 - (0x1f & v0.length)];\n            }\n            return v2;\n        } else if (0x95ea7b3 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(owner_2[msg.sender] >= varg2);\n            owner_3[msg.sender][address(varg1)] = varg2;\n            emit Approval(msg.sender, address(varg1), varg2);\n            return True;\n        } else if (0x141ddca7 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return stor_4;\n        } else if (0x18160ddd == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return stor_0;\n        } else if (0x23b872dd == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            v7 = v8 = owner_2[address(varg1)] >= varg3;\n            if (owner_2[address(varg1)] >= varg3) {\n                v7 = v9 = owner_3[address(varg1)][msg.sender] >= varg3;\n            }\n            require(bool(v7));\n            owner_2[address(varg2)] = owner_2[address(varg2)] + varg3;\n            owner_2[address(varg1)] = owner_2[address(varg1)] - varg3;\n            if (owner_3[address(varg1)][msg.sender] < uint256.max) {\n                owner_3[address(varg1)][msg.sender] = owner_3[address(varg1)][msg.sender] - varg3;\n            }\n            emit Transfer(address(varg1), address(varg2), varg3);\n            return True;\n        } else if (0x313ce567 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return stor_6;\n        } else if (0x42966c68 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(msg.sender == ___function_selector__);\n            require(bool(address(msg.sender) != address(0x0)));\n            stor_0 = stor_0 - varg1;\n            owner_2[msg.sender] = owner_2[msg.sender] - varg1;\n            emit Transfer(msg.sender, address(0x0), varg1);\n            exit;\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return owner_2[address(varg1)];\n        } else if (0x79cc6790 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(owner_2[msg.sender] >= varg2);\n            owner_2[msg.sender] = owner_2[msg.sender] - varg2;\n            emit Transfer(msg.sender, address(0x0), varg2);\n            return True;\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return ___function_selector__;\n        } else if (0x8de93222 == uint32(function_selector >> 224)) {\n            assert(bool(stor_4));\n            require(owner_2[___function_selector__] >= msg.value * 10 ** 18 / stor_4);\n            owner_2[___function_selector__] = owner_2[___function_selector__] - msg.value * 10 ** 18 / stor_4;\n            owner_2[address(varg1)] = owner_2[address(varg1)] + msg.value * 10 ** 18 / stor_4;\n            emit Transfer(___function_selector__, address(varg1), msg.value * 10 ** 18 / stor_4);\n            return True;\n        } else if (0x91b7f5ed == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(msg.sender == ___function_selector__);\n            stor_4 = varg1;\n            return True;\n        } else if (0x95d89b41 == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            v10, v11 = 0xeb5();\n            v12 = new bytes[](v10.length);\n            v13 = v14 = 0;\n            while (v13 < v10.length) {\n                v12[v13] = v10[v13];\n                v13 = v13 + 32;\n            }\n            v15 = v16 = v10.length + v12.data;\n            if (0x1f & v10.length) {\n                MEM[v16 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v16 - (0x1f & v10.length)];\n            }\n            return v12;\n        } else if (0xa9059cbb == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(owner_2[msg.sender] >= varg2);\n            owner_2[msg.sender] = owner_2[msg.sender] - varg2;\n            owner_2[address(varg1)] = owner_2[address(varg1)] + varg2;\n            emit Transfer(msg.sender, address(varg1), varg2);\n            return True;\n        } else if (0xdd62ed3e == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            return owner_3[address(varg1)][address(varg2)];\n        } else if (0xf2fde38b == uint32(function_selector >> 224)) {\n            require(!msg.value);\n            require(msg.sender == ___function_selector__);\n            require(bool(address(address(varg1)) != address(0x0)));\n            emit OwnershipTransferred(___function_selector__, address(varg1));\n            ___function_selector__ = address(varg1);\n            owner_2[msg.sender] = owner_2[msg.sender] - owner_2[msg.sender];\n            owner_2[address(varg1)] = owner_2[address(varg1)] + owner_2[msg.sender];\n            emit Transfer(msg.sender, address(varg1), owner_2[msg.sender]);\n            exit;\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 52.014967918395996,
	"usage": {
		"completion_tokens": 532,
		"prompt_tokens": 2368,
		"total_tokens": 2900
	}
}