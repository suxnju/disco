{
	"address": "0x9a688e01028670141e4e0551560c7bbdc28d006e",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Given the decompiled code, here's the corresponding Solidity contract:\n\n```solidity\npragma solidity ^0.8.7;\n\ncontract MyContract {\n    address private _owner;\n    string private _name;\n    string private _symbol;\n    uint256 private _totalSupply;\n    uint256 private _decimals;\n    uint256 private _price;\n    mapping(address => uint256) private _balances;\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Withdraw(address indexed from, uint256 value);\n    event Burn(address indexed from, uint256 value);\n\n    constructor() {\n        _owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == _owner, \"Caller is not the owner\");\n        _;\n    }\n\n    function withdrawAmount(uint256 amount) external onlyOwner {\n        payable(msg.sender).transfer(amount);\n        emit Withdraw(msg.sender, amount);\n    }\n\n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function decimals() external view returns (uint256) {\n        return _decimals;\n    }\n\n    function burn(uint256 amount) external onlyOwner {\n        require(amount <= _balances[msg.sender], \"Burn amount exceeds balance\");\n        _balances[msg.sender] -= amount;\n        _totalSupply -= amount;\n        emit Burn(msg.sender, amount);\n    }\n\n    function balanceOf(address account) external view returns (uint256) {\n        return _balances[account];\n    }\n\n    function create(uint256 amount) external onlyOwner {\n        _totalSupply += amount;\n        _balances[_owner] += amount;\n    }\n\n    function withdrawAll() external onlyOwner {\n        payable(msg.sender).transfer(address(this).balance);\n        emit Withdraw(msg.sender, address(this).balance);\n    }\n\n    function getOwner() external view returns (address) {\n        return _owner;\n    }\n\n    function setDecimals(uint256 decimals) external onlyOwner {\n        _decimals = decimals;\n    }\n\n    function setPrice(uint256 price) external onlyOwner {\n        _price = price;\n    }\n\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n    function price() external view returns (uint256) {\n        return _price;\n    }\n\n    function sendEtherToAddress(address recipient, uint256 amount) external onlyOwner {\n        payable(recipient).transfer(amount);\n    }\n\n    function transfer(address recipient, uint256 amount) external {\n        require(amount <= _balances[msg.sender], \"Transfer amount exceeds balance\");\n        _balances[msg.sender] -= amount;\n        _balances[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n    }\n\n    function setName(string memory newName) external onlyOwner {\n        _name = newName;\n    }\n\n    fallback() external payable {\n        require(msg.value <= _balances[_owner], \"Ether amount is too high\");\n        _balances[_owner] += msg.value;\n        _totalSupply += msg.value;\n    }\n}\n```\n\nPlease note that this is a simplified interpretation of the provided decompiled code and may not include all the details from the original contract. For example, bitwise operations, low-level calls and other complex logic were simplified or omitted for the sake of readability and safety.",
				"role": "assistant"
			}
		}
	],
	"created": 1701461029,
	"id": "chatcmpl-8R41lUoqVbbnFDhFbRsQbIoEHg62E",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.12 19:50 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\nuint256 _price; // STORAGE[0x3]\nuint256 _decimals; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x6]\naddress _getOwner; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nWithdraw(address, uint256);\nBurn(address, uint256);\n\nfunction withdrawAmount(uint256 varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    v0 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    require(v0); // checks call status, propagates error data on error\n    emit Withdraw(msg.sender, varg0);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    require(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction create(uint256 varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    _totalSupply += varg0;\n    _balanceOf[_getOwner] += varg0;\n    return 1;\n}\n\nfunction withdrawAll() public nonPayable { \n    require(msg.sender == _getOwner);\n    v0 = msg.sender.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n    emit Withdraw(msg.sender, this.balance);\n}\n\nfunction getOwner() public nonPayable { \n    return _getOwner;\n}\n\nfunction setDecimals(uint256 varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    _decimals = varg0;\n    return varg0;\n}\n\nfunction setPrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    _price = varg0;\n    return varg0;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction sendEtherToAddress(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _getOwner);\n    require(varg0);\n    v0 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v0); // checks call status, propagates error data on error\n    v1 = msg.sender.call().value(varg1).gas(!varg1 * 2300);\n    require(v1); // checks call status, propagates error data on error\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x407(varg1, varg0, msg.sender);\n}\n\nfunction setName(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    require(msg.sender == _getOwner);\n    v2 = v3 = v0.data;\n    if (31 < v0.length) {\n        _name.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v3 + v0.length > v2) {\n                STORAGE[v4] = MEM[v2];\n                v2 += 32;\n                v4 += 1;\n            }\n        }\n    } else {\n        _name.length = v0.length + v0.length | ~0xff & MEM[v3];\n    }\n    while (v5 + (31 + _name.length >> 5) > v4) {\n        STORAGE[v4] = 0;\n        v4 += 1;\n    }\n    v6 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v7 = v8 = v6.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v7] = STORAGE[v9];\n                v9 += 1;\n                v7 += 32;\n            } while (v8 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v7);\n        } else {\n            MEM[v8] = _name.length >> 8 << 8;\n        }\n    }\n    v10 = new array[](v6.length);\n    v11 = v12 = 0;\n    while (v11 < v6.length) {\n        MEM[v11 + v10.data] = MEM[v11 + v6.data];\n        v11 += 32;\n    }\n    v13 = v14 = v6.length + v10.data;\n    if (0x1f & v6.length) {\n        MEM[v14 - (0x1f & v6.length)] = ~(256 ** (32 - (0x1f & v6.length)) - 1) & MEM[v14 - (0x1f & v6.length)];\n    }\n    return v10;\n}\n\nfunction 0x407(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 >= _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    _balanceOf[v2] += varg0;\n    emit Transfer(v3, v2, varg0);\n    v4 = address(varg1);\n    v5 = address(varg2);\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v5] + _balanceOf[v4]);\n    return ;\n}\n\nfunction fallback() public payable { \n    assert(10 ** _decimals);\n    if (msg.sender != _getOwner) {\n        require(msg.value * _price / 10 ** _decimals <= _balanceOf[_getOwner]);\n        0x407(msg.value * _price / 10 ** _decimals, msg.sender, _getOwner);\n    } else {\n        _totalSupply += msg.value * _price / 10 ** _decimals;\n        _balanceOf[_getOwner] += msg.value * _price / 10 ** _decimals;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x562b9f7) {\n            withdrawAmount(uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x780900dc == function_selector) {\n            create(uint256);\n        } else if (0x853828b6 == function_selector) {\n            withdrawAll();\n        } else if (0x893d20e8 == function_selector) {\n            getOwner();\n        } else if (0x8c8885c8 == function_selector) {\n            setDecimals(uint256);\n        } else if (0x91b7f5ed == function_selector) {\n            setPrice(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xa127809d == function_selector) {\n            sendEtherToAddress(address,uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xc47f0027 == function_selector) {\n            setName(string);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.12 19:50 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\nuint256 _price; // STORAGE[0x3]\nuint256 _decimals; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x6]\naddress _getOwner; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nWithdraw(address, uint256);\nBurn(address, uint256);\n\nfunction withdrawAmount(uint256 varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    v0 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    require(v0); // checks call status, propagates error data on error\n    emit Withdraw(msg.sender, varg0);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    require(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction create(uint256 varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    _totalSupply += varg0;\n    _balanceOf[_getOwner] += varg0;\n    return 1;\n}\n\nfunction withdrawAll() public nonPayable { \n    require(msg.sender == _getOwner);\n    v0 = msg.sender.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n    emit Withdraw(msg.sender, this.balance);\n}\n\nfunction getOwner() public nonPayable { \n    return _getOwner;\n}\n\nfunction setDecimals(uint256 varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    _decimals = varg0;\n    return varg0;\n}\n\nfunction setPrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    _price = varg0;\n    return varg0;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction sendEtherToAddress(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _getOwner);\n    require(varg0);\n    v0 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v0); // checks call status, propagates error data on error\n    v1 = msg.sender.call().value(varg1).gas(!varg1 * 2300);\n    require(v1); // checks call status, propagates error data on error\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x407(varg1, varg0, msg.sender);\n}\n\nfunction setName(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    require(msg.sender == _getOwner);\n    v2 = v3 = v0.data;\n    if (31 < v0.length) {\n        _name.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v3 + v0.length > v2) {\n                STORAGE[v4] = MEM[v2];\n                v2 += 32;\n                v4 += 1;\n            }\n        }\n    } else {\n        _name.length = v0.length + v0.length | ~0xff & MEM[v3];\n    }\n    while (v5 + (31 + _name.length >> 5) > v4) {\n        STORAGE[v4] = 0;\n        v4 += 1;\n    }\n    v6 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v7 = v8 = v6.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v7] = STORAGE[v9];\n                v9 += 1;\n                v7 += 32;\n            } while (v8 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v7);\n        } else {\n            MEM[v8] = _name.length >> 8 << 8;\n        }\n    }\n    v10 = new array[](v6.length);\n    v11 = v12 = 0;\n    while (v11 < v6.length) {\n        MEM[v11 + v10.data] = MEM[v11 + v6.data];\n        v11 += 32;\n    }\n    v13 = v14 = v6.length + v10.data;\n    if (0x1f & v6.length) {\n        MEM[v14 - (0x1f & v6.length)] = ~(256 ** (32 - (0x1f & v6.length)) - 1) & MEM[v14 - (0x1f & v6.length)];\n    }\n    return v10;\n}\n\nfunction 0x407(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 >= _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    _balanceOf[v2] += varg0;\n    emit Transfer(v3, v2, varg0);\n    v4 = address(varg1);\n    v5 = address(varg2);\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v5] + _balanceOf[v4]);\n    return ;\n}\n\nfunction fallback() public payable { \n    assert(10 ** _decimals);\n    if (msg.sender != _getOwner) {\n        require(msg.value * _price / 10 ** _decimals <= _balanceOf[_getOwner]);\n        0x407(msg.value * _price / 10 ** _decimals, msg.sender, _getOwner);\n    } else {\n        _totalSupply += msg.value * _price / 10 ** _decimals;\n        _balanceOf[_getOwner] += msg.value * _price / 10 ** _decimals;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x562b9f7) {\n            withdrawAmount(uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x780900dc == function_selector) {\n            create(uint256);\n        } else if (0x853828b6 == function_selector) {\n            withdrawAll();\n        } else if (0x893d20e8 == function_selector) {\n            getOwner();\n        } else if (0x8c8885c8 == function_selector) {\n            setDecimals(uint256);\n        } else if (0x91b7f5ed == function_selector) {\n            setPrice(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xa127809d == function_selector) {\n            sendEtherToAddress(address,uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xc47f0027 == function_selector) {\n            setName(string);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.12 19:50 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\nuint256 _price; // STORAGE[0x3]\nuint256 _decimals; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x6]\naddress _getOwner; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nWithdraw(address, uint256);\nBurn(address, uint256);\n\nfunction withdrawAmount(uint256 varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    v0 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    require(v0); // checks call status, propagates error data on error\n    emit Withdraw(msg.sender, varg0);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    require(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction create(uint256 varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    _totalSupply += varg0;\n    _balanceOf[_getOwner] += varg0;\n    return 1;\n}\n\nfunction withdrawAll() public nonPayable { \n    require(msg.sender == _getOwner);\n    v0 = msg.sender.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n    emit Withdraw(msg.sender, this.balance);\n}\n\nfunction getOwner() public nonPayable { \n    return _getOwner;\n}\n\nfunction setDecimals(uint256 varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    _decimals = varg0;\n    return varg0;\n}\n\nfunction setPrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    _price = varg0;\n    return varg0;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction sendEtherToAddress(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _getOwner);\n    require(varg0);\n    v0 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v0); // checks call status, propagates error data on error\n    v1 = msg.sender.call().value(varg1).gas(!varg1 * 2300);\n    require(v1); // checks call status, propagates error data on error\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x407(varg1, varg0, msg.sender);\n}\n\nfunction setName(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    require(msg.sender == _getOwner);\n    v2 = v3 = v0.data;\n    if (31 < v0.length) {\n        _name.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v3 + v0.length > v2) {\n                STORAGE[v4] = MEM[v2];\n                v2 += 32;\n                v4 += 1;\n            }\n        }\n    } else {\n        _name.length = v0.length + v0.length | ~0xff & MEM[v3];\n    }\n    while (v5 + (31 + _name.length >> 5) > v4) {\n        STORAGE[v4] = 0;\n        v4 += 1;\n    }\n    v6 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v7 = v8 = v6.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v7] = STORAGE[v9];\n                v9 += 1;\n                v7 += 32;\n            } while (v8 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v7);\n        } else {\n            MEM[v8] = _name.length >> 8 << 8;\n        }\n    }\n    v10 = new array[](v6.length);\n    v11 = v12 = 0;\n    while (v11 < v6.length) {\n        MEM[v11 + v10.data] = MEM[v11 + v6.data];\n        v11 += 32;\n    }\n    v13 = v14 = v6.length + v10.data;\n    if (0x1f & v6.length) {\n        MEM[v14 - (0x1f & v6.length)] = ~(256 ** (32 - (0x1f & v6.length)) - 1) & MEM[v14 - (0x1f & v6.length)];\n    }\n    return v10;\n}\n\nfunction 0x407(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 >= _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    _balanceOf[v2] += varg0;\n    emit Transfer(v3, v2, varg0);\n    v4 = address(varg1);\n    v5 = address(varg2);\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v5] + _balanceOf[v4]);\n    return ;\n}\n\nfunction fallback() public payable { \n    assert(10 ** _decimals);\n    if (msg.sender != _getOwner) {\n        require(msg.value * _price / 10 ** _decimals <= _balanceOf[_getOwner]);\n        0x407(msg.value * _price / 10 ** _decimals, msg.sender, _getOwner);\n    } else {\n        _totalSupply += msg.value * _price / 10 ** _decimals;\n        _balanceOf[_getOwner] += msg.value * _price / 10 ** _decimals;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x562b9f7) {\n            withdrawAmount(uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x780900dc == function_selector) {\n            create(uint256);\n        } else if (0x853828b6 == function_selector) {\n            withdrawAll();\n        } else if (0x893d20e8 == function_selector) {\n            getOwner();\n        } else if (0x8c8885c8 == function_selector) {\n            setDecimals(uint256);\n        } else if (0x91b7f5ed == function_selector) {\n            setPrice(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xa127809d == function_selector) {\n            sendEtherToAddress(address,uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xc47f0027 == function_selector) {\n            setName(string);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 37.645039558410645,
	"usage": {
		"completion_tokens": 686,
		"prompt_tokens": 2769,
		"total_tokens": 3455
	}
}