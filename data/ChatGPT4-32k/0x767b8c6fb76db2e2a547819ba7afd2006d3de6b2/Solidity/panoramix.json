{
	"address": "0x767b8c6fb76db2e2a547819ba7afd2006d3de6b2",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\ndef storage:\n  management is mapping of address at storage 0\n  manVault is mapping of uint256 at storage 1\n  price is mapping of uint256 at storage 2\n  totalSupplyShares is uint256 at storage 3\n  ethPendingManagement is uint256 at storage 4\n  bondsOutstanding is mapping of uint256 at storage 5\n  totalSupplyBonds is uint256 at storage 6\n  playerVault is mapping of uint256 at storage 7\n  pendingFills is mapping of uint256 at storage 8\n  playerId is mapping of uint256 at storage 9\n  idToAdress is mapping of address at storage 10\n  nextPlayerID is uint256 at storage 11\n  stor12 is mapping of uint8 at storage 12\n  percentageToReinvest is mapping of uint256 at storage 13\n  stor14 is uint256 at storage 14\n  stor15 is uint256 at storage 15\n  cheatLine is mapping of address at storage 16\n  stor17 is mapping of uint8 at storage 17\n  lineNumber is mapping of uint256 at storage 18\n  cheatLinePot is uint256 at storage 19\n  nextInLine is uint256 at storage 20\n  lastInLine is uint256 at storage 21\n  cheatLineWhale is mapping of address at storage 22\n  stor23 is mapping of uint8 at storage 23\n  lineNumberWhale is mapping of uint256 at storage 24\n  cheatLinePotWhale is uint256 at storage 25\n  nextInLineWhale is uint256 at storage 26\n  lastInLineWhale is uint256 at storage 27\n  arbitragePot is uint256 at storage 28\n  arbitragePotRisky is uint256 at storage 29\n  odds is mapping of uint256 at storage 30\n  stor31 is uint256 at storage 31 offset 1\n  poioPot is uint256 at storage 31\n  oddsWhale is mapping of uint256 at storage 32\n  stor33 is uint256 at storage 33 offset 1\n  poioPotWhale is uint256 at storage 33\n  oddsAll is uint256 at storage 34\n  stor35 is uint256 at storage 35 offset 1\n  poioPotAll is uint256 at storage 35\n  decreasingOddsAll is uint256 at storage 36\n  stor37 is uint256 at storage 37 offset 1\n  podoPotAll is uint256 at storage 37\n  randomPot is uint256 at storage 38\n  randomDistr is mapping of address at storage 39\n  randomNext is uint256 at storage 40\n  lastdraw is uint256 at storage 41\n  randomPotWhale is uint256 at storage 42\n  randomDistrWhale is mapping of address at storage 43\n  randomNextWhale is uint256 at storage 44\n  lastdrawWhale is uint256 at storage 45\n  randomPotAlways is uint256 at storage 46\n  randomDistrAlways is mapping of address at storage 47\n  randomNextAlways is uint256 at storage 48\n  lastdrawAlways is uint256 at storage 49\n  dicerollpot is uint256 at storage 50\n  amountPlayed is uint256 at storage 51\n  stor52 is uint256 at storage 52 offset 1\n  badOddsPot is uint256 at storage 52\n  snip3dPot is uint256 at storage 53\n  slaughter3dPot is uint256 at storage 54\n  ethRollBank is uint256 at storage 55\n  ethStuckOnPLinc is uint256 at storage 56\n  canGetPaidForHelping is uint8 at storage 57 offset 160\n  stor57 is uint128 at storage 57 offset 160\n  currentHelperAddress is address at storage 57\n  stor58 is mapping of uint8 at storage 58\n  pLincGiverOfEth is uint256 at storage 59\n  vaultSmall is uint256 at storage 60\n  timeSmall is uint256 at storage 61\n  vaultMedium is uint256 at storage 62\n  timeMedium is uint256 at storage 63\n  vaultLarge is uint256 at storage 64\n  timeLarge is uint256 at storage 65\n  vaultDrip is uint256 at storage 66\n  timeDrip is uint256 at storage 67\n  pointMultiplier is uint256 at storage 68\n  stor69 is mapping of struct at storage 69\n  totalDividendPoints is uint256 at storage 70\n  unclaimedDividends is uint256 at storage 71\n  stor7DFE is uint256 at storage 0x7dfe757ecd65cbd7922a9c0161e935dd7fdbcc0e999689c7d31633896b1fc60b\n  storD2AD is address at storage 0xd2ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5f\n  storD9D1 is uint256 at storage 0xd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f\n  storE268 is uint256 at storage 0xe2689cd4a84e23ad2f564004f1c9013e9589d260bde6380aba3ca7e09e4df40c\n  storEDC9 is uint256 at storage 0xedc95719e9a3b28dd8e80877cb5880a9be7de1a13fc8b05e7999683b6b567643\n\ndef Slaughter3dPot(): # not payable\n  return slaughter3dPot\n\ndef randomPotWhale(): # not payable\n  return randomPotWhale\n\ndef nextInLine(): # not payable\n  return nextInLine\n\ndef totalDividendPoints(): # not payable\n  return totalDividendPoints\n\ndef nextPlayerID(): # not payable\n  return nextPlayerID\n\ndef price(uint256 _count): # not payable\n  return price[_count]\n\ndef decreasingOddsAll(): # not payable\n  return decreasingOddsAll\n\ndef randomNext(): # not payable\n  return randomNext\n\ndef randomDistr(uint256 _param1): # not payable\n  return randomDistr[_param1]\n\ndef arbitragePot(): # not payable\n  return arbitragePot\n\ndef arbitragePotRisky(): # not payable\n  return arbitragePotRisky\n\ndef IdToAdress(uint256 _param1): # not payable\n  return idToAdress[_param1]\n\ndef unclaimedDividends(): # not payable\n  return unclaimedDividends\n\ndef playerId(address _param1): # not payable\n  return playerId[_param1]\n\ndef badOddsPot(): # not payable\n  return badOddsPot\n\ndef lastInLine(): # not payable\n  return lastInLine\n\ndef manVault(uint256 _param1): # not payable\n  return manVault[_param1]\n\ndef lastdraw(): # not payable\n  return lastdraw\n\ndef percentageToReinvest(address _param1): # not payable\n  return percentageToReinvest[_param1]\n\ndef hassEthstuck(address _param1): # not payable\n  return bool(stor58[_param1])\n\ndef timeDrip(): # not payable\n  return timeDrip\n\ndef odds(address _param1): # not payable\n  return odds[_param1]\n\ndef vaultSmall(): # not payable\n  return vaultSmall\n\ndef management(uint256 _param1): # not payable\n  return management[_param1]\n\ndef pointMultiplier(): # not payable\n  return pointMultiplier\n\ndef vaultLarge(): # not payable\n  return vaultLarge\n\ndef isInLine(address _param1): # not payable\n  return bool(stor17[_param1])\n\ndef ethStuckOnPLinc(): # not payable\n  return ethStuckOnPLinc\n\ndef ethRollBank(): # not payable\n  return ethRollBank\n\ndef randomDistrWhale(uint256 _param1): # not payable\n  return randomDistrWhale[_param1]\n\ndef timeSmall(): # not payable\n  return timeSmall\n\ndef poioPotWhale(): # not payable\n  return poioPotWhale\n\ndef randomPot(): # not payable\n  return randomPot\n\ndef vaultDrip(): # not payable\n  return vaultDrip\n\ndef timeMedium(): # not payable\n  return timeMedium\n\ndef Snip3dPot(): # not payable\n  return snip3dPot\n\ndef timeLarge(): # not payable\n  return timeLarge\n\ndef cheatLine(uint256 _param1): # not payable\n  return cheatLine[_param1]\n\ndef lastdrawWhale(): # not payable\n  return lastdrawWhale\n\ndef pendingFills(address _param1): # not payable\n  return pendingFills[_param1]\n\ndef PLincGiverOfEth(): # not payable\n  return pLincGiverOfEth\n\ndef cheatLinePot(): # not payable\n  return cheatLinePot\n\ndef oddsAll(): # not payable\n  return oddsAll\n\ndef ethPendingManagement(): # not payable\n  return ethPendingManagement\n\ndef cheatLinePotWhale(): # not payable\n  return cheatLinePotWhale\n\ndef canGetPaidForHelping(): # not payable\n  return bool(canGetPaidForHelping)\n\ndef playerVault(address _param1): # not payable\n  return playerVault[_param1]\n\ndef isInLineWhale(address _param1): # not payable\n  return bool(stor23[_param1])\n\ndef oddsWhale(address _param1): # not payable\n  return oddsWhale[_param1]\n\ndef lineNumber(address _param1): # not payable\n  return lineNumber[_param1]\n\ndef totalSupplyShares(): # not payable\n  return totalSupplyShares\n\ndef dicerollpot(): # not payable\n  return dicerollpot\n\ndef randomDistrAlways(uint256 _param1): # not payable\n  return randomDistrAlways[_param1]\n\ndef vaultMedium(): # not payable\n  return vaultMedium\n\ndef lineNumberWhale(address _param1): # not payable\n  return lineNumberWhale[_param1]\n\ndef randomPotAlways(): # not payable\n  return randomPotAlways\n\ndef nextInLineWhale(): # not payable\n  return nextInLineWhale\n\ndef cheatLineWhale(uint256 _param1): # not payable\n  return cheatLineWhale[_param1]\n\ndef randomNextAlways(): # not payable\n  return randomNextAlways\n\ndef randomNextWhale(): # not payable\n  return randomNextWhale\n\ndef totalSupplyBonds(): # not payable\n  return totalSupplyBonds\n\ndef poioPotAll(): # not payable\n  return poioPotAll\n\ndef poioPot(): # not payable\n  return poioPot\n\ndef bondsOutstanding(address _param1): # not payable\n  return bondsOutstanding[_param1]\n\ndef allowAutoInvest(address _param1): # not payable\n  return bool(stor12[_param1])\n\ndef podoPotAll(): # not payable\n  return podoPotAll\n\ndef amountPlayed(): # not payable\n  return amountPlayed\n\ndef currentHelper(): # not payable\n  return currentHelperAddress\n\ndef lastInLineWhale(): # not payable\n  return lastInLineWhale\n\ndef lastdrawAlways(): # not payable\n  return lastdrawAlways\n\n#\n#  Regular functions\n#\n\ndef _fallback(?) payable: # default function\n  stop\n\ndef disableAuto(): # not payable\n  stor12[caller] = 0\n\ndef fetchDataMain(): # not payable\n  return stor14, ethPendingManagement, stor15\n\ndef fetchCheatLine(): # not payable\n  return cheatLine[stor20 - 1], cheatLine[stor20 - 2], cheatLine[stor20 - 3], cheatLinePot\n\ndef fetchCheatLineWhale(): # not payable\n  return cheatLineWhale[stor26 - 1], cheatLineWhale[stor26 - 2], cheatLineWhale[stor26 - 3], cheatLinePotWhale\n\ndef setAuto(uint256 percentage): # not payable\n  stor12[caller] = 1\n  require percentage <= 100\n  require percentage > 0\n  percentageToReinvest[caller] = percentage\n\ndef releaseVaultSmall(): # not payable\n  if timeSmall + (24 * 3600) >= block.timestamp:\n      require vaultSmall > 10 * 10^18\n  timeSmall = block.timestamp\n  vaultSmall = 0\n  require vaultSmall + stor14 >= stor14\n  stor14 += vaultSmall\n\ndef releaseVaultLarge(): # not payable\n  if timeLarge + (720 * 24 * 3600) >= block.timestamp:\n      require vaultLarge > 1000 * 10^18\n  timeLarge = block.timestamp\n  vaultLarge = 0\n  require vaultLarge + stor14 >= stor14\n  stor14 += vaultLarge\n\ndef releaseVaultMedium(): # not payable\n  if timeMedium + (168 * 24 * 3600) >= block.timestamp:\n      require vaultMedium > 100 * 10^18\n  timeMedium = block.timestamp\n  vaultMedium = 0\n  require vaultMedium + stor14 >= stor14\n  stor14 += vaultMedium\n\ndef soldierBuy(): # not payable\n  require snip3dPot > 10^17\n  snip3dPot = 0\n  require ext_code.size(0x99352d1edfa7f124ec618dfb51014f6d54bac4ae)\n  call 0x99352d1edfa7f124ec618dfb51014f6d54bac4ae.sacUp() with:\n     value snip3dPot wei\n       gas gas_remaining wei\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n\ndef sendButcher(): # not payable\n  require slaughter3dPot > 10^17\n  slaughter3dPot = 0\n  require ext_code.size(0x3e752ffd5eff7b7f2715ef43d8339ecabd0e65b9)\n  call 0x3e752ffd5eff7b7f2715ef43d8339ecabd0e65b9.sacUp() with:\n     value slaughter3dPot wei\n       gas gas_remaining wei\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n\ndef harvestabledivs(): # not payable\n  require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n  call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.myDividends(bool _includeReferralBonus) with:\n       gas gas_remaining wei\n      args 1\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  require return_data.size >= 32\n  return ext_call.return_data[0]\n\ndef dividendsOwing(address account): # not payable\n  require stor69[address(account)] <= totalDividendPoints\n  require pointMultiplier\n  return ((totalDividendPoints * bondsOutstanding[address(account)]) - (stor69[address(account)] * bondsOutstanding[address(account)]) / pointMultiplier)\n\ndef managementWithdraw(uint256 who): # not payable\n  require who < 6\n  require manVault[who] > 0\n  manVault[who] = 0\n  call management[who] with:\n     value manVault[who] wei\n       gas 2300 * is_zero(value) wei\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  log cashout(\n        address winner=management[who],\n        uint256 amount=manVault[who])\n\ndef vaultToWallet(address toPay): # not payable\n  require 0 < playerVault[address(toPay)]\n  playerVault[address(toPay)] = 0\n  call toPay with:\n     value playerVault[address(toPay)] wei\n       gas 2300 * is_zero(value) wei\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  log cashout(\n        address winner=caller,\n        uint256 amount=playerVault[address(toPay)])\n\ndef releaseDrip(): # not payable\n  require timeDrip + (24 * 3600) < block.timestamp\n  timeDrip = block.timestamp\n  require vaultDrip / 100 <= vaultDrip\n  vaultDrip -= vaultDrip / 100\n  require (vaultDrip / 100) + totalDividendPoints >= totalDividendPoints\n  totalDividendPoints += vaultDrip / 100\n  require (vaultDrip / 100) + unclaimedDividends >= unclaimedDividends\n  unclaimedDividends += vaultDrip / 100\n  log bondsMatured(uint256 amount=vaultDrip / 100)\n\ndef snip3dVaultToPLinc(): # not payable\n  require ext_code.size(0x99352d1edfa7f124ec618dfb51014f6d54bac4ae)\n  call 0x99352d1edfa7f124ec618dfb51014f6d54bac4ae.harvestableBalance() with:\n       gas gas_remaining wei\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  require return_data.size >= 32\n  require ext_code.size(0x99352d1edfa7f124ec618dfb51014f6d54bac4ae)\n  call 0x99352d1edfa7f124ec618dfb51014f6d54bac4ae.fetchBalance() with:\n       gas gas_remaining wei\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  require ext_call.return_data[0] + stor14 >= stor14\n  stor14 += ext_call.return_data[0]\n\ndef slaughter3dbridgeToPLinc(): # not payable\n  require ext_code.size(0x3e752ffd5eff7b7f2715ef43d8339ecabd0e65b9)\n  call 0x3e752ffd5eff7b7f2715ef43d8339ecabd0e65b9.harvestableBalance() with:\n       gas gas_remaining wei\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  require return_data.size >= 32\n  require ext_code.size(0x3e752ffd5eff7b7f2715ef43d8339ecabd0e65b9)\n  call 0x3e752ffd5eff7b7f2715ef43d8339ecabd0e65b9.fetchBalance() with:\n       gas gas_remaining wei\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  require ext_call.return_data[0] + stor14 >= stor14\n  stor14 += ext_call.return_data[0]\n\ndef payoutCheatLine(): # not payable\n  require cheatLinePot >= 10^17\n  require nextInLine > 0\n  require tx.origin == caller\n  require 1 <= nextInLine\n  nextInLine--\n  require 10^17 <= cheatLinePot\n  cheatLinePot -= 10^17\n  require pendingFills[stor16[stor20 - 1]] + 10^17 >= pendingFills[stor16[stor20 - 1]]\n  pendingFills[stor16[stor20 - 1]] += 10^17\n  stor17[stor16[stor20 - 1]] = 0\n  log 0xa39007b5: cheatLine[stor20 - 1], 1, 10^17, 1\n\ndef fetchP3Ddivs(): # not payable\n  require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n  call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.myDividends(bool _includeReferralBonus) with:\n       gas gas_remaining wei\n      args 1\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  require return_data.size >= 32\n  require ext_call.return_data[0] > 0\n  require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n  call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.withdraw() with:\n       gas gas_remaining wei\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  require ext_call.return_data[0] + stor14 >= stor14\n  stor14 += ext_call.return_data[0]\n\ndef payoutCheatLineWhale(): # not payable\n  require cheatLinePotWhale >= 10 * 10^18\n  require nextInLineWhale > 0\n  require tx.origin == caller\n  require 1 <= nextInLineWhale\n  nextInLineWhale--\n  require 10 * 10^18 <= cheatLinePotWhale\n  cheatLinePotWhale -= 10 * 10^18\n  require pendingFills[stor22[stor26 - 1]] + 10 * 10^18 >= pendingFills[stor22[stor26 - 1]]\n  pendingFills[stor22[stor26 - 1]] += 10 * 10^18\n  stor23[stor22[stor26 - 1]] = 0\n  log 0xa39007b5: cheatLineWhale[stor26 - 1], 1, 10 * 10^18, 2\n\ndef transferEthToHelper(): # not payable\n  require caller == tx.origin\n  require 1 == bool(stor58[caller])\n  require 1 == bool(canGetPaidForHelping)\n  require 4 * 10^15 < ethStuckOnPLinc\n  stor58[caller] = 0\n  canGetPaidForHelping = 0\n  require 4 * 10^15 <= ethStuckOnPLinc\n  ethStuckOnPLinc -= 4 * 10^15\n  require pendingFills[address(stor57.field_0)] + 4 * 10^15 >= pendingFills[address(stor57.field_0)]\n  pendingFills[address(stor57.field_0)] += 4 * 10^15\n  log 0xa39007b5: currentHelperAddress, 1, 4 * 10^15, 15\n\ndef buyCEO() payable: \n  require call.value >= price[0]\n  require (call.value / 2) + manVault[0] >= manVault[0]\n  playerVault[storD2AD] = (call.value / 2) + manVault[0] + playerVault[storD2AD]\n  manVault[0] = 0\n  log CEOsold(\n        address previousOwner=storD2AD,\n        address newOwner=caller,\n        uint256 price=call.value)\n  storD2AD = caller\n  require (call.value / 2) + stor14 >= stor14\n  stor14 += call.value / 2\n  if price[0]:\n      require price[0]\n      require 21 * price[0] / price[0] == 21\n  price[0] = 21 * price[0] / 10\n\ndef payoutRandomDistrAlways(): # not payable\n  require tx.origin == caller\n  require randomPotAlways >= 10^18\n  require randomNextAlways > 0\n  require lastdrawAlways != block.number\n  require block.timestamp + block.hash(block.number - 1) >= block.hash(block.number - 1)\n  require randomNextAlways\n  log RNGgenerated(uint256 number=block.timestamp + block.hash(block.number - 1) % randomNextAlways)\n  require 10^18 <= randomPotAlways\n  randomPotAlways -= 10^18\n  require pendingFills[stor47[block.timestamp + block.hash(block.number - 1) % stor48]] + 10^18 >= pendingFills[stor47[block.timestamp + block.hash(block.number - 1) % stor48]]\n  pendingFills[stor47[block.timestamp + block.hash(block.number - 1) % stor48]] += 10^18\n  lastdraw = block.number\n  log 0xa39007b5: randomDistrAlways[block.timestamp + block.hash(block.number - 1) % stor48], 1, 10^18, 11\n\ndef payoutRandomDistr(): # not payable\n  require randomPot >= 10^17\n  require randomNext > 0\n  require lastdraw != block.number\n  require tx.origin == caller\n  require block.timestamp + block.hash(block.number - 1) >= block.hash(block.number - 1)\n  require randomNext\n  log RNGgenerated(uint256 number=block.timestamp + block.hash(block.number - 1) % randomNext)\n  require 10^17 <= randomPot\n  randomPot -= 10^17\n  require pendingFills[stor39[block.timestamp + block.hash(block.number - 1) % stor40]] + 10^17 >= pendingFills[stor39[block.timestamp + block.hash(block.number - 1) % stor40]]\n  pendingFills[stor39[block.timestamp + block.hash(block.number - 1) % stor40]] += 10^17\n  randomDistr[block.timestamp + block.hash(block.number - 1) % stor40] = randomDistr[stor40 - 1]\n  randomNext--\n  lastdraw = block.number\n  log 0xa39007b5: randomDistr[block.timestamp + block.hash(block.number - 1) % stor40], 1, 10^17, 9\n\ndef payoutRandomDistrWhale(): # not payable\n  require randomPotWhale >= 10 * 10^18\n  require randomNextWhale > 0\n  require lastdrawWhale != block.number\n  require tx.origin == caller\n  require block.timestamp + block.hash(block.number - 1) >= block.hash(block.number - 1)\n  require randomNextWhale\n  log RNGgenerated(uint256 number=block.timestamp + block.hash(block.number - 1) % randomNextWhale)\n  require 10 * 10^18 <= randomPotWhale\n  randomPotWhale -= 10 * 10^18\n  require pendingFills[stor43[block.timestamp + block.hash(block.number - 1) % stor44]] + 10 * 10^18 >= pendingFills[stor43[block.timestamp + block.hash(block.number - 1) % stor44]]\n  pendingFills[stor43[block.timestamp + block.hash(block.number - 1) % stor44]] += 10 * 10^18\n  randomDistrWhale[block.timestamp + block.hash(block.number - 1) % stor44] = randomDistrWhale[stor40 - 1]\n  randomNextWhale--\n  lastdrawWhale = block.number\n  log 0xa39007b5: randomDistrWhale[block.timestamp + block.hash(block.number - 1) % stor44], 1, 10 * 10^18, 10\n\ndef buyDirector(uint256 spot) payable: \n  require spot > 0\n  require spot < 6\n  require call.value >= price[spot]\n  require (call.value / 2) + manVault[spot] >= manVault[spot]\n  playerVault[stor0[spot]] = (call.value / 2) + manVault[spot] + playerVault[stor0[spot]]\n  manVault[spot] = 0\n  log Directorsold(\n        address previousOwner=spot,\n        address newOwner=management[spot],\n        uint256 price=caller,\n        uint256 spot=call.value)\n  management[spot] = caller\n  require (call.value / 4) + stor14 >= stor14\n  stor14 += call.value / 4\n  require (call.value / 4) + playerVault[storD2AD] >= playerVault[storD2AD]\n  playerVault[storD2AD] += call.value / 4\n  if price[spot]:\n      require price[spot]\n      require 21 * price[spot] / price[spot] == 21\n  price[spot] = 21 * price[spot] / 10\n\ndef ethPropagate(): # not payable\n  require stor14 > 0\n  stor14 = 0\n  require ext_code.size(0xfaae60f2ce6491886c9f7c9356bd92f688ca66a1)\n  call 0xfaae60f2ce6491886c9f7c9356bd92f688ca66a1.disburse() with:\n     value stor14 / 50 wei\n       gas gas_remaining wei\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  require (stor14 / 50) + ethPendingManagement >= ethPendingManagement\n  ethPendingManagement += stor14 / 50\n  if stor14 / 50:\n      require stor14 / 50\n      require 5 * stor14 / 50 / stor14 / 50 == 5\n  if 5 * stor14 / 50:\n      require 5 * stor14 / 50\n      require 5 * pointMultiplier * stor14 / 50 / 5 * stor14 / 50 == pointMultiplier\n  require totalSupplyBonds > 0\n  require totalSupplyBonds\n  require (5 * pointMultiplier * stor14 / 50 / totalSupplyBonds) + totalDividendPoints >= totalDividendPoints\n  totalDividendPoints += 5 * pointMultiplier * stor14 / 50 / totalSupplyBonds\n  require (5 * stor14 / 50) + unclaimedDividends >= unclaimedDividends\n  unclaimedDividends += 5 * stor14 / 50\n  log bondsMatured(uint256 amount=5 * stor14 / 50)\n  if stor14 / 50:\n      require stor14 / 50\n      require 43 * stor14 / 50 / stor14 / 50 == 43\n  require (43 * stor14 / 50) + stor15 >= stor15\n  stor15 += 43 * stor14 / 50\n\ndef helpUnstuckEth() payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  require caller == tx.origin\n  require call.value >= 2 * 10^15\n  stor58[address(stor57.field_0)] = 1\n  currentHelperAddress = caller\n  canGetPaidForHelping = 1\n  Mask(96, 0, stor57.field_160) = 0\n  stor58[caller] = 0\n  require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n  bondsOutstanding[caller] += call.value\n  require call.value + totalSupplyBonds >= totalSupplyBonds\n  totalSupplyBonds += call.value\n  require call.value + stor14 >= stor14\n  stor14 += call.value\n\ndef fetchdivs(address toupdate): # not payable\n  require stor69[address(toupdate)] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[address(toupdate)]) - (stor69[address(toupdate)] * bondsOutstanding[address(toupdate)]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[address(toupdate)]) - (stor69[address(toupdate)] * bondsOutstanding[address(toupdate)]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[address(toupdate)]) - (stor69[address(toupdate)] * bondsOutstanding[address(toupdate)]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[address(toupdate)]) - (stor69[address(toupdate)] * bondsOutstanding[address(toupdate)]) / pointMultiplier) + pendingFills[address(toupdate)] >= pendingFills[address(toupdate)]\n      pendingFills[address(toupdate)] += (totalDividendPoints * bondsOutstanding[address(toupdate)]) - (stor69[address(toupdate)] * bondsOutstanding[address(toupdate)]) / pointMultiplier\n  stor69[address(toupdate)] = totalDividendPoints\n\ndef playRandomDistribution(uint256 plays) payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  if plays:\n      require plays\n      require 10^16 * plays / plays == 10^16\n  require call.value >= 10^16 * plays\n  require plays > 0\n  idx = 0\n  s = 0\n  while idx < plays:\n      mem[0] = idx + randomNext\n      mem[32] = 39\n      randomDistr[idx + stor40] = caller\n      idx = idx + 1\n      s = idx + randomNext\n      continue \n  randomNext += plays\n  require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n  bondsOutstanding[caller] += call.value\n  require call.value + totalSupplyBonds >= totalSupplyBonds\n  totalSupplyBonds += call.value\n  require call.value + stor14 >= stor14\n  stor14 += call.value\n\ndef cheatTheLineWhale() payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  require call.value >= 10^18\n  require tx.origin == caller\n  if 1 == bool(stor23[caller]):\n      cheatLineWhale[stor24[caller]] = cheatLineWhale[stor27]\n      cheatLineWhale[stor26] = caller\n      nextInLineWhale++\n      lastInLineWhale++\n  if not stor23[caller]:\n      cheatLineWhale[stor26] = caller\n      lineNumberWhale[caller] = nextInLineWhale\n      nextInLineWhale++\n      stor23[caller] = 1\n  require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n  bondsOutstanding[caller] += call.value\n  require call.value + totalSupplyBonds >= totalSupplyBonds\n  totalSupplyBonds += call.value\n  require call.value + stor14 >= stor14\n  stor14 += call.value\n\ndef cheatTheLine() payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  require call.value >= 10^16\n  require tx.origin == caller\n  if 1 == bool(stor17[caller]):\n      cheatLine[stor18[caller]] = cheatLine[stor21]\n      cheatLine[stor20] = caller\n      nextInLine++\n      lastInLine++\n  if not stor17[caller]:\n      cheatLine[stor20] = caller\n      lineNumber[caller] = nextInLine\n      nextInLine++\n      stor17[caller] = 1\n  require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n  bondsOutstanding[caller] += call.value\n  require call.value + totalSupplyBonds >= totalSupplyBonds\n  totalSupplyBonds += call.value\n  require call.value + stor14 >= stor14\n  stor14 += call.value\n  log 0x778299cb: caller, call.value\n\ndef playRandomDistributionWhale(uint256 plays) payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  if plays:\n      require plays\n      require 10^18 * plays / plays == 10^18\n  require call.value >= 10^18 * plays\n  require plays > 0\n  idx = 0\n  s = 0\n  while idx < plays:\n      mem[0] = idx + randomNextWhale\n      mem[32] = 43\n      randomDistrWhale[idx + stor44] = caller\n      idx = idx + 1\n      s = idx + randomNextWhale\n      continue \n  randomNextWhale += plays\n  require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n  bondsOutstanding[caller] += call.value\n  require call.value + totalSupplyBonds >= totalSupplyBonds\n  totalSupplyBonds += call.value\n  require call.value + stor14 >= stor14\n  stor14 += call.value\n\ndef playRandomDistributionAlways(uint256 plays) payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  if plays:\n      require plays\n      require 10^17 * plays / plays == 10^17\n  require call.value >= 10^17 * plays\n  require plays > 0\n  idx = 0\n  s = 0\n  while idx < plays:\n      mem[0] = idx + randomNextAlways\n      mem[32] = 47\n      randomDistrAlways[idx + stor48] = caller\n      idx = idx + 1\n      s = idx + randomNextAlways\n      continue \n  randomNextAlways += plays\n  require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n  bondsOutstanding[caller] += call.value\n  require call.value + totalSupplyBonds >= totalSupplyBonds\n  totalSupplyBonds += call.value\n  require call.value + stor14 >= stor14\n  stor14 += call.value\n\ndef takeArbitrageOpportunity() payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  require call.value > arbitragePot / 100\n  require arbitragePot / 100 > 1000\n  if arbitragePot / 100:\n      require arbitragePot / 100\n      require 101 * arbitragePot / 100 / arbitragePot / 100 == 101\n  require 101 * arbitragePot / 100 / 100 <= arbitragePot\n  arbitragePot -= 101 * arbitragePot / 100 / 100\n  require caller == tx.origin\n  require (101 * arbitragePot / 100 / 100) + pendingFills[caller] >= pendingFills[caller]\n  pendingFills[caller] += 101 * arbitragePot / 100 / 100\n  require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n  bondsOutstanding[caller] += call.value\n  require call.value + totalSupplyBonds >= totalSupplyBonds\n  totalSupplyBonds += call.value\n  require call.value + stor14 >= stor14\n  stor14 += call.value\n  log 0xa39007b5: caller, 1, 101 * arbitragePot / 100 / 100, 3\n\ndef takeArbitrageOpportunityRisky() payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  require call.value > arbitragePotRisky / 5\n  require arbitragePotRisky / 5 > 1000\n  if arbitragePotRisky / 5:\n      require arbitragePotRisky / 5\n      require 101 * arbitragePotRisky / 5 / arbitragePotRisky / 5 == 101\n  require 101 * arbitragePotRisky / 5 / 100 <= arbitragePotRisky\n  arbitragePotRisky -= 101 * arbitragePotRisky / 5 / 100\n  require caller == tx.origin\n  require (101 * arbitragePotRisky / 5 / 100) + pendingFills[caller] >= pendingFills[caller]\n  pendingFills[caller] += 101 * arbitragePotRisky / 5 / 100\n  require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n  bondsOutstanding[caller] += call.value\n  require call.value + totalSupplyBonds >= totalSupplyBonds\n  totalSupplyBonds += call.value\n  require call.value + stor14 >= stor14\n  stor14 += call.value\n  log 0xa39007b5: caller, 1, 101 * arbitragePotRisky / 5 / 100, 4\n\ndef begForFreeEth() payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  require caller == tx.origin\n  require call.value >= 10^17\n  if 101 * 10^15 > pLincGiverOfEth:\n      require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n      bondsOutstanding[caller] += call.value\n      require call.value + totalSupplyBonds >= totalSupplyBonds\n      totalSupplyBonds += call.value\n      require call.value + stor14 >= stor14\n      stor14 += call.value\n      log 0xa39007b5: caller, 0, 101 * 10^15, 16\n  else:\n      require 10^17 <= pLincGiverOfEth\n      pLincGiverOfEth -= 10^17\n      require pendingFills[caller] + 101 * 10^15 >= pendingFills[caller]\n      pendingFills[caller] += 101 * 10^15\n      require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n      bondsOutstanding[caller] += call.value\n      require call.value + totalSupplyBonds >= totalSupplyBonds\n      totalSupplyBonds += call.value\n      require call.value + stor14 >= stor14\n      stor14 += call.value\n      log 0xa39007b5: caller, 1, 101 * 10^15, 16\n\ndef PendinglinesToLines(): # not payable\n  require stor15 > 1000\n  stor15 = 0\n  require (stor15 / 25) + cheatLinePot >= cheatLinePot\n  cheatLinePot += stor15 / 25\n  require (stor15 / 25) + cheatLinePotWhale >= cheatLinePotWhale\n  cheatLinePotWhale += stor15 / 25\n  require (stor15 / 25) + arbitragePot >= arbitragePot\n  arbitragePot += stor15 / 25\n  require (stor15 / 25) + arbitragePotRisky >= arbitragePotRisky\n  arbitragePotRisky += stor15 / 25\n  require (stor15 / 25) + poioPot >= poioPot\n  poioPot += stor15 / 25\n  require (stor15 / 25) + poioPotWhale >= poioPotWhale\n  poioPotWhale += stor15 / 25\n  require (stor15 / 25) + poioPotAll >= poioPotAll\n  poioPotAll += stor15 / 25\n  require (stor15 / 25) + podoPotAll >= podoPotAll\n  podoPotAll += stor15 / 25\n  require (stor15 / 25) + randomPot >= randomPot\n  randomPot += stor15 / 25\n  require (stor15 / 25) + randomPotWhale >= randomPotWhale\n  randomPotWhale += stor15 / 25\n  require (stor15 / 25) + randomPotAlways >= randomPotAlways\n  randomPotAlways += stor15 / 25\n  require (stor15 / 25) + dicerollpot >= dicerollpot\n  dicerollpot += stor15 / 25\n  require (stor15 / 25) + badOddsPot >= badOddsPot\n  badOddsPot += stor15 / 25\n  require (stor15 / 25) + snip3dPot >= snip3dPot\n  snip3dPot += stor15 / 25\n  require (stor15 / 25) + slaughter3dPot >= slaughter3dPot\n  slaughter3dPot += stor15 / 25\n  require (stor15 / 25) + ethRollBank >= ethRollBank\n  ethRollBank += stor15 / 25\n  require (stor15 / 25) + ethStuckOnPLinc >= ethStuckOnPLinc\n  ethStuckOnPLinc += stor15 / 25\n  require (stor15 / 25) + pLincGiverOfEth >= pLincGiverOfEth\n  pLincGiverOfEth += stor15 / 25\n  require (stor15 / 25) + vaultSmall >= vaultSmall\n  vaultSmall += stor15 / 25\n  require (stor15 / 25) + vaultMedium >= vaultMedium\n  vaultMedium += stor15 / 25\n  require (stor15 / 25) + vaultLarge >= vaultLarge\n  vaultLarge += stor15 / 25\n  if stor15 / 25:\n      require stor15 / 25\n      require 4 * stor15 / 25 / stor15 / 25 == 4\n  require (4 * stor15 / 25) + vaultDrip >= vaultDrip\n  vaultDrip += 4 * stor15 / 25\n\ndef ethManagementPropagate(): # not payable\n  require ethPendingManagement > 0\n  ethPendingManagement = 0\n  if not ethPendingManagement / 20:\n      manVault[0] += 5 * ethPendingManagement / 20\n      manVault[1] += 5 * ethPendingManagement / 20\n      storD9D1 += 4 * ethPendingManagement / 20\n      stor7DFE += 3 * ethPendingManagement / 20\n      storEDC9 += 2 * ethPendingManagement / 20\n  else:\n      require ethPendingManagement / 20\n      require 5 * ethPendingManagement / 20 / ethPendingManagement / 20 == 5\n      manVault[0] += 5 * ethPendingManagement / 20\n      if not ethPendingManagement / 20:\n          manVault[1] += 5 * ethPendingManagement / 20\n          storD9D1 += 4 * ethPendingManagement / 20\n          stor7DFE += 3 * ethPendingManagement / 20\n          storEDC9 += 2 * ethPendingManagement / 20\n      else:\n          require ethPendingManagement / 20\n          require 5 * ethPendingManagement / 20 / ethPendingManagement / 20 == 5\n          manVault[1] += 5 * ethPendingManagement / 20\n          if not ethPendingManagement / 20:\n              storD9D1 += 4 * ethPendingManagement / 20\n              stor7DFE += 3 * ethPendingManagement / 20\n              storEDC9 += 2 * ethPendingManagement / 20\n          else:\n              require ethPendingManagement / 20\n              require 4 * ethPendingManagement / 20 / ethPendingManagement / 20 == 4\n              storD9D1 += 4 * ethPendingManagement / 20\n              if not ethPendingManagement / 20:\n                  stor7DFE += 3 * ethPendingManagement / 20\n                  storEDC9 += 2 * ethPendingManagement / 20\n              else:\n                  require ethPendingManagement / 20\n                  require 3 * ethPendingManagement / 20 / ethPendingManagement / 20 == 3\n                  stor7DFE += 3 * ethPendingManagement / 20\n                  if not ethPendingManagement / 20:\n                      storEDC9 += 2 * ethPendingManagement / 20\n                  else:\n                      require ethPendingManagement / 20\n                      require 2 * ethPendingManagement / 20 / ethPendingManagement / 20 == 2\n                      storEDC9 += 2 * ethPendingManagement / 20\n                      if ethPendingManagement / 20:\n                          require ethPendingManagement / 20\n                          require ethPendingManagement / 20 / ethPendingManagement / 20 == 1\n  storE268 += ethPendingManagement / 20\n\ndef playProofOfDecreasingOddsALL(uint256 plays) payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  require caller == tx.origin\n  if plays:\n      require plays\n      require 10^17 * plays / plays == 10^17\n  require call.value >= 10^17 * plays\n  require plays > 0\n  s = 0\n  t = 0\n  idx = 0\n  t = 0\n  u = 0\n  while idx < plays:\n      require block.timestamp + block.hash(block.number - 1) >= block.hash(block.number - 1)\n      require idx + decreasingOddsAll\n      log RNGgenerated(uint256 number=block.timestamp + block.hash(block.number - 1) % idx + decreasingOddsAll)\n      if block.timestamp + block.hash(block.number - 1) % idx + decreasingOddsAll != 1:\n          s = s\n          t = block.timestamp + block.hash(block.number - 1) % idx + decreasingOddsAll\n          idx = idx + 1\n          t = t\n          u = idx + decreasingOddsAll\n          continue \n      podoPotAll = stor37\n      require stor37 + pendingFills[caller] >= pendingFills[caller]\n      mem[0] = caller\n      mem[32] = 8\n      pendingFills[caller] += stor37\n      decreasingOddsAll = 10\n      s = podoPotAll\n      t = block.timestamp + block.hash(block.number - 1) % idx + decreasingOddsAll\n      idx = plays + 1\n      t = 1\n      u = idx + decreasingOddsAll\n      continue \n  decreasingOddsAll += idx\n  require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n  bondsOutstanding[caller] += call.value\n  require call.value + totalSupplyBonds >= totalSupplyBonds\n  totalSupplyBonds += call.value\n  require call.value + stor14 >= stor14\n  stor14 += call.value\n  log 0xa39007b5: caller, bool(t), s, 8\n\ndef playProofOfDiceRolls(uint256 oddsTaken) payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  if call.value:\n      require call.value\n      require 100 * call.value / call.value == 100\n  require oddsTaken > 0\n  require oddsTaken\n  require tx.origin == caller\n  require 100 * call.value / oddsTaken <= dicerollpot\n  require oddsTaken > 0\n  require oddsTaken < 100\n  require block.timestamp + block.hash(block.number - 1) >= block.hash(block.number - 1)\n  require amountPlayed >= 0\n  log RNGgenerated(uint256 number=amountPlayed + block.timestamp + block.hash(block.number - 1) % 100)\n  if amountPlayed + block.timestamp + block.hash(block.number - 1) % 100 >= oddsTaken:\n      amountPlayed++\n      require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n      bondsOutstanding[caller] += call.value\n      require call.value + totalSupplyBonds >= totalSupplyBonds\n      totalSupplyBonds += call.value\n      require call.value + stor14 >= stor14\n      stor14 += call.value\n      log 0xa39007b5: caller, 0, 0, 13\n  else:\n      require 100 * call.value / oddsTaken <= dicerollpot\n      dicerollpot -= 100 * call.value / oddsTaken\n      require (100 * call.value / oddsTaken) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += 100 * call.value / oddsTaken\n      amountPlayed++\n      require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n      bondsOutstanding[caller] += call.value\n      require call.value + totalSupplyBonds >= totalSupplyBonds\n      totalSupplyBonds += call.value\n      require call.value + stor14 >= stor14\n      stor14 += call.value\n      log 0xa39007b5: caller, 1, 100 * call.value / oddsTaken, 13\n\ndef playProofOfRediculousBadOdds(uint256 plays) payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  require caller == tx.origin\n  if plays:\n      require plays\n      require 10^14 * plays / plays == 10^14\n  require call.value >= 10^14 * plays\n  require plays > 0\n  s = 0\n  t = 0\n  idx = 0\n  t = 0\n  u = 0\n  while idx < plays:\n      require amountPlayed + 10^6 >= amountPlayed\n      require idx >= 0\n      require block.timestamp + block.hash(block.number - 1) >= block.hash(block.number - 1)\n      require idx + amountPlayed + 10^6\n      log RNGgenerated(uint256 number=block.timestamp + block.hash(block.number - 1) % idx + amountPlayed + 10^6)\n      if block.timestamp + block.hash(block.number - 1) % idx + amountPlayed + 10^6 != 1:\n          s = s\n          t = block.timestamp + block.hash(block.number - 1) % idx + amountPlayed + 10^6\n          idx = idx + 1\n          t = t\n          u = idx + amountPlayed + 10^6\n          continue \n      badOddsPot = stor52\n      require stor52 + pendingFills[caller] >= pendingFills[caller]\n      mem[0] = caller\n      mem[32] = 8\n      pendingFills[caller] += stor52\n      s = badOddsPot\n      t = block.timestamp + block.hash(block.number - 1) % idx + amountPlayed + 10^6\n      idx = plays + 1\n      t = 1\n      u = idx + amountPlayed + 10^6\n      continue \n  amountPlayed += idx\n  require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n  bondsOutstanding[caller] += call.value\n  require call.value + totalSupplyBonds >= totalSupplyBonds\n  totalSupplyBonds += call.value\n  require call.value + stor14 >= stor14\n  stor14 += call.value\n  log 0xa39007b5: caller, bool(t), s, 12\n\ndef playProofOfEthRolls(uint256 oddsTaken) payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  if call.value:\n      require call.value\n      require 100 * call.value / call.value == 100\n  require oddsTaken > 0\n  require oddsTaken\n  require tx.origin == caller\n  require 100 * call.value / oddsTaken <= ethRollBank\n  require oddsTaken > 0\n  require oddsTaken < 100\n  require block.timestamp + block.hash(block.number - 1) >= block.hash(block.number - 1)\n  require amountPlayed >= 0\n  log RNGgenerated(uint256 number=amountPlayed + block.timestamp + block.hash(block.number - 1) % 100)\n  if amountPlayed + block.timestamp + block.hash(block.number - 1) % 100 >= oddsTaken:\n      amountPlayed++\n      require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n      bondsOutstanding[caller] += call.value\n      require call.value + totalSupplyBonds >= totalSupplyBonds\n      totalSupplyBonds += call.value\n      require (call.value / 100) + stor14 >= stor14\n      stor14 += call.value / 100\n      if call.value / 100:\n          require call.value / 100\n          require 99 * call.value / 100 / call.value / 100 == 99\n      require (99 * call.value / 100) + ethRollBank >= ethRollBank\n      ethRollBank += 99 * call.value / 100\n      log 0xa39007b5: caller, 0, 0, 14\n  else:\n      require 100 * call.value / oddsTaken <= ethRollBank\n      ethRollBank -= 100 * call.value / oddsTaken\n      require (100 * call.value / oddsTaken) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += 100 * call.value / oddsTaken\n      amountPlayed++\n      require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n      bondsOutstanding[caller] += call.value\n      require call.value + totalSupplyBonds >= totalSupplyBonds\n      totalSupplyBonds += call.value\n      require (call.value / 100) + stor14 >= stor14\n      stor14 += call.value / 100\n      if call.value / 100:\n          require call.value / 100\n          require 99 * call.value / 100 / call.value / 100 == 99\n      require (99 * call.value / 100) + ethRollBank >= ethRollBank\n      ethRollBank += 99 * call.value / 100\n      log 0xa39007b5: caller, 1, 100 * call.value / oddsTaken, 14\n\ndef playProofOfIncreasingOddsALL(uint256 plays) payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  require caller == tx.origin\n  if plays:\n      require plays\n      require 10^17 * plays / plays == 10^17\n  require call.value >= 10^17 * plays\n  require plays > 0\n  s = 0\n  t = 0\n  idx = 0\n  t = 0\n  u = 0\n  while idx < plays:\n      if -oddsAll + -idx + 1000 <= 2:\n          log RNGgenerated(uint256 number=block.hash(block.number - 1) % 2)\n          if block.hash(block.number - 1) % 2 != 1:\n              s = s\n              t = block.hash(block.number - 1) % 2\n              idx = idx + 1\n              t = t\n              u = 2\n              continue \n          poioPotAll = stor35\n          require stor35 + pendingFills[caller] >= pendingFills[caller]\n          mem[0] = caller\n          pendingFills[caller] += stor35\n          mem[32] = 30\n          odds[caller] = 0\n          s = poioPotAll\n          t = block.hash(block.number - 1) % 2\n          idx = plays + 1\n          t = 1\n          u = 2\n          continue \n      require -oddsAll + -idx + 1000\n      log RNGgenerated(uint256 number=block.hash(block.number - 1) % -oddsAll + -idx + 1000)\n      if block.hash(block.number - 1) % -oddsAll + -idx + 1000 != 1:\n          s = s\n          t = block.hash(block.number - 1) % -oddsAll + -idx + 1000\n          idx = idx + 1\n          t = t\n          u = -oddsAll + -idx + 1000\n          continue \n      poioPotAll = stor35\n      require stor35 + pendingFills[caller] >= pendingFills[caller]\n      mem[0] = caller\n      pendingFills[caller] += stor35\n      mem[32] = 30\n      odds[caller] = 0\n      s = poioPotAll\n      t = block.hash(block.number - 1) % -oddsAll + -idx + 1000\n      idx = plays + 1\n      t = 1\n      u = -oddsAll + -idx + 1000\n      continue \n  oddsAll += idx\n  require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n  bondsOutstanding[caller] += call.value\n  require call.value + totalSupplyBonds >= totalSupplyBonds\n  totalSupplyBonds += call.value\n  require call.value + stor14 >= stor14\n  stor14 += call.value\n  log 0xa39007b5: caller, bool(t), s, 7\n\ndef playProofOfIncreasingOdds(uint256 plays) payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  require caller == tx.origin\n  if plays:\n      require plays\n      require 10^17 * plays / plays == 10^17\n  require call.value >= 10^17 * plays\n  require plays > 0\n  s = 0\n  t = 0\n  idx = 0\n  t = 0\n  u = 0\n  while idx < plays:\n      if -odds[caller] + -idx + 1000 <= 2:\n          log RNGgenerated(uint256 number=block.hash(block.number - 1) % 2)\n          if block.hash(block.number - 1) % 2 != 1:\n              s = s\n              t = block.hash(block.number - 1) % 2\n              idx = idx + 1\n              t = t\n              u = 2\n              continue \n          poioPot = stor31\n          require stor31 + pendingFills[caller] >= pendingFills[caller]\n          mem[0] = caller\n          pendingFills[caller] += stor31\n          mem[32] = 30\n          odds[caller] = 0\n          s = poioPot\n          t = block.hash(block.number - 1) % 2\n          idx = plays + 1\n          t = 1\n          u = 2\n          continue \n      require -odds[caller] + -idx + 1000\n      log RNGgenerated(uint256 number=block.hash(block.number - 1) % -odds[caller] + -idx + 1000)\n      if block.hash(block.number - 1) % -odds[caller] + -idx + 1000 != 1:\n          s = s\n          t = block.hash(block.number - 1) % -odds[caller] + -idx + 1000\n          idx = idx + 1\n          t = t\n          u = -odds[caller] + -idx + 1000\n          continue \n      poioPot = stor31\n      require stor31 + pendingFills[caller] >= pendingFills[caller]\n      mem[0] = caller\n      pendingFills[caller] += stor31\n      mem[32] = 30\n      odds[caller] = 0\n      s = poioPot\n      t = block.hash(block.number - 1) % -odds[caller] + -idx + 1000\n      idx = plays + 1\n      t = 1\n      u = -odds[caller] + -idx + 1000\n      continue \n  odds[caller] += idx\n  require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n  bondsOutstanding[caller] += call.value\n  require call.value + totalSupplyBonds >= totalSupplyBonds\n  totalSupplyBonds += call.value\n  require call.value + stor14 >= stor14\n  stor14 += call.value\n  log 0xa39007b5: caller, bool(t), s, 5\n\ndef playProofOfIncreasingOddsWhale(uint256 plays) payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  require caller == tx.origin\n  if plays:\n      require plays\n      require 10 * 10^18 * plays / plays == 10 * 10^18\n  require call.value >= 10 * 10^18 * plays\n  require plays > 0\n  s = 0\n  t = 0\n  idx = 0\n  t = 0\n  u = 0\n  while idx < plays:\n      if -oddsWhale[caller] + -idx + 1000 <= 2:\n          log RNGgenerated(uint256 number=block.hash(block.number - 1) % 2)\n          if block.hash(block.number - 1) % 2 != 1:\n              s = s\n              t = block.hash(block.number - 1) % 2\n              idx = idx + 1\n              t = t\n              u = 2\n              continue \n          poioPotWhale = stor33\n          require stor33 + pendingFills[caller] >= pendingFills[caller]\n          mem[0] = caller\n          pendingFills[caller] += stor33\n          mem[32] = 32\n          oddsWhale[caller] = 0\n          s = poioPotWhale\n          t = block.hash(block.number - 1) % 2\n          idx = plays + 1\n          t = 1\n          u = 2\n          continue \n      require -oddsWhale[caller] + -idx + 1000\n      log RNGgenerated(uint256 number=block.hash(block.number - 1) % -oddsWhale[caller] + -idx + 1000)\n      if block.hash(block.number - 1) % -oddsWhale[caller] + -idx + 1000 != 1:\n          s = s\n          t = block.hash(block.number - 1) % -oddsWhale[caller] + -idx + 1000\n          idx = idx + 1\n          t = t\n          u = -oddsWhale[caller] + -idx + 1000\n          continue \n      poioPotWhale = stor33\n      require stor33 + pendingFills[caller] >= pendingFills[caller]\n      mem[0] = caller\n      pendingFills[caller] += stor33\n      mem[32] = 32\n      oddsWhale[caller] = 0\n      s = poioPotWhale\n      t = block.hash(block.number - 1) % -oddsWhale[caller] + -idx + 1000\n      idx = plays + 1\n      t = 1\n      u = -oddsWhale[caller] + -idx + 1000\n      continue \n  oddsWhale[caller] += idx\n  require call.value + bondsOutstanding[caller] >= bondsOutstanding[caller]\n  bondsOutstanding[caller] += call.value\n  require call.value + totalSupplyBonds >= totalSupplyBonds\n  totalSupplyBonds += call.value\n  require call.value + stor14 >= stor14\n  stor14 += call.value\n  log 0xa39007b5: caller, bool(t), s, 6\n\ndef fillBonds(address bondsOwner): # not payable\n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  require stor69[address(bondsOwner)] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[address(bondsOwner)]) - (stor69[address(bondsOwner)] * bondsOutstanding[address(bondsOwner)]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[address(bondsOwner)]) - (stor69[address(bondsOwner)] * bondsOutstanding[address(bondsOwner)]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[address(bondsOwner)]) - (stor69[address(bondsOwner)] * bondsOutstanding[address(bondsOwner)]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[address(bondsOwner)]) - (stor69[address(bondsOwner)] * bondsOutstanding[address(bondsOwner)]) / pointMultiplier) + pendingFills[address(bondsOwner)] >= pendingFills[address(bondsOwner)]\n      pendingFills[address(bondsOwner)] += (totalDividendPoints * bondsOutstanding[address(bondsOwner)]) - (stor69[address(bondsOwner)] * bondsOutstanding[address(bondsOwner)]) / pointMultiplier\n  stor69[address(bondsOwner)] = totalDividendPoints\n  require 1000 < bondsOutstanding[address(bondsOwner)]\n  require pendingFills[address(bondsOwner)] > 1000\n  require tx.origin == caller\n  require pendingFills[address(bondsOwner)] <= bondsOutstanding[address(bondsOwner)]\n  pendingFills[address(bondsOwner)] = 0\n  require pendingFills[address(bondsOwner)] <= bondsOutstanding[address(bondsOwner)]\n  bondsOutstanding[address(bondsOwner)] -= pendingFills[address(bondsOwner)]\n  require (pendingFills[address(bondsOwner)] / 1000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n  bondsOutstanding[caller] += pendingFills[address(bondsOwner)] / 1000\n  require pendingFills[address(bondsOwner)] <= totalSupplyBonds\n  require pendingFills[address(bondsOwner)] / 1000 >= 0\n  totalSupplyBonds = (pendingFills[address(bondsOwner)] / 1000) + totalSupplyBonds - pendingFills[address(bondsOwner)]\n  require pendingFills[address(bondsOwner)] + playerVault[address(bondsOwner)] >= playerVault[address(bondsOwner)]\n  playerVault[address(bondsOwner)] += pendingFills[address(bondsOwner)]\n  log bondsFilled(\n        address player=bondsOwner,\n        uint256 bonds=pendingFills[address(bondsOwner)])\n\ndef buyBonds(address masternode, address referral) payable: \n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  require stor69[address(referral)] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[address(referral)]) - (stor69[address(referral)] * bondsOutstanding[address(referral)]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[address(referral)]) - (stor69[address(referral)] * bondsOutstanding[address(referral)]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[address(referral)]) - (stor69[address(referral)] * bondsOutstanding[address(referral)]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[address(referral)]) - (stor69[address(referral)] * bondsOutstanding[address(referral)]) / pointMultiplier) + pendingFills[address(referral)] >= pendingFills[address(referral)]\n      pendingFills[address(referral)] += (totalDividendPoints * bondsOutstanding[address(referral)]) - (stor69[address(referral)] * bondsOutstanding[address(referral)]) / pointMultiplier\n  stor69[address(referral)] = totalDividendPoints\n  require call.value > 0\n  require referral\n  if call.value / 100:\n      require call.value / 100\n      require 5 * call.value / 100 / call.value / 100 == 5\n  require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n  call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.buy(address _referredBy) with:\n     value 5 * call.value / 100 wei\n       gas gas_remaining wei\n      args masternode\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  require return_data.size >= 32\n  if call.value:\n      require call.value\n      require 11 * call.value / call.value == 11\n  require (11 * call.value / 10) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n  bondsOutstanding[caller] += 11 * call.value / 10\n  log 0x778299cb: caller, 11 * call.value / 10\n  if call.value:\n      require call.value\n      require 2 * call.value / call.value == 2\n  require (2 * call.value / 100) + bondsOutstanding[address(referral)] >= bondsOutstanding[address(referral)]\n  bondsOutstanding[address(referral)] += 2 * call.value / 100\n  if call.value:\n      require call.value\n      require 2 * call.value / call.value == 2\n  require (2 * call.value / 100) + (11 * call.value / 10) >= 11 * call.value / 10\n  require (2 * call.value / 100) + (11 * call.value / 10) + totalSupplyBonds >= totalSupplyBonds\n  totalSupplyBonds = (2 * call.value / 100) + (11 * call.value / 10) + totalSupplyBonds\n  if call.value / 100:\n      require call.value / 100\n      require 95 * call.value / 100 / call.value / 100 == 95\n  require (95 * call.value / 100) + stor14 >= stor14\n  stor14 += 95 * call.value / 100\n  if not playerId[caller]:\n      playerId[caller] = nextPlayerID\n      idToAdress[stor11] = caller\n      nextPlayerID++\n\ndef forceBonds(address bondsOwner, address masternode): # not payable\n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n  stor69[caller] = totalDividendPoints\n  require stor69[address(bondsOwner)] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[address(bondsOwner)]) - (stor69[address(bondsOwner)] * bondsOutstanding[address(bondsOwner)]) / pointMultiplier > 0:\n      require (totalDividendPoints * bondsOutstanding[address(bondsOwner)]) - (stor69[address(bondsOwner)] * bondsOutstanding[address(bondsOwner)]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[address(bondsOwner)]) - (stor69[address(bondsOwner)] * bondsOutstanding[address(bondsOwner)]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[address(bondsOwner)]) - (stor69[address(bondsOwner)] * bondsOutstanding[address(bondsOwner)]) / pointMultiplier) + pendingFills[address(bondsOwner)] >= pendingFills[address(bondsOwner)]\n      pendingFills[address(bondsOwner)] += (totalDividendPoints * bondsOutstanding[address(bondsOwner)]) - (stor69[address(bondsOwner)] * bondsOutstanding[address(bondsOwner)]) / pointMultiplier\n  stor69[address(bondsOwner)] = totalDividendPoints\n  require 1000 < bondsOutstanding[address(bondsOwner)]\n  require 1000 < pendingFills[address(bondsOwner)]\n  require pendingFills[address(bondsOwner)] > bondsOutstanding[address(bondsOwner)]\n  require bondsOutstanding[address(bondsOwner)] <= pendingFills[address(bondsOwner)]\n  require bondsOutstanding[address(bondsOwner)] <= pendingFills[address(bondsOwner)]\n  pendingFills[address(bondsOwner)] -= bondsOutstanding[address(bondsOwner)]\n  if pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] / 100:\n      require pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] / 100\n      require 5 * pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] / 100 / pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] / 100 == 5\n  require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n  call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.buy(address _referredBy) with:\n     value 5 * pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] / 100 wei\n       gas gas_remaining wei\n      args masternode\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  require return_data.size >= 32\n  if pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)]:\n      require pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)]\n      require (11 * pendingFills[address(bondsOwner)]) - (11 * bondsOutstanding[address(bondsOwner)]) / pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] == 11\n  bondsOutstanding[address(bondsOwner)] += (11 * pendingFills[address(bondsOwner)]) - (11 * bondsOutstanding[address(bondsOwner)]) / 10\n  if pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)]:\n      require pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)]\n      require 2 * pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] / pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] == 2\n  bondsOutstanding[caller] += 2 * pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] / 100\n  if pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)]:\n      require pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)]\n      require 2 * pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] / pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] == 2\n  require (2 * pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] / 100) + ((11 * pendingFills[address(bondsOwner)]) - (11 * bondsOutstanding[address(bondsOwner)]) / 10) >= (11 * pendingFills[address(bondsOwner)]) - (11 * bondsOutstanding[address(bondsOwner)]) / 10\n  totalSupplyBonds = (2 * pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] / 100) + ((11 * pendingFills[address(bondsOwner)]) - (11 * bondsOutstanding[address(bondsOwner)]) / 10) + totalSupplyBonds\n  if pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] / 100:\n      require pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] / 100\n      require 95 * pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] / 100 / pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] / 100 == 95\n  stor14 += 95 * pendingFills[address(bondsOwner)] - bondsOutstanding[address(bondsOwner)] / 100\n  log 0x778299cb: bondsOwner, (11 * pendingFills[address(bondsOwner)]) - (11 * bondsOutstanding[address(bondsOwner)]) / 10\n\ndef freelanceReinvest(address stackOwner, address masternode): # not payable\n  require stor69[caller] <= totalDividendPoints\n  require pointMultiplier\n  if (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= 0:\n      stor69[caller] = totalDividendPoints\n      require stor69[address(stackOwner)] <= totalDividendPoints\n      require pointMultiplier\n      if (totalDividendPoints * bondsOutstanding[address(stackOwner)]) - (stor69[address(stackOwner)] * bondsOutstanding[address(stackOwner)]) / pointMultiplier <= 0:\n          stor69[address(stackOwner)] = totalDividendPoints\n          require bool(stor12[address(stackOwner)]) == 1\n          require 100000 < playerVault[address(stackOwner)]\n          require tx.origin == caller\n          playerVault[address(stackOwner)] = 0\n          if playerVault[address(stackOwner)] / 100000:\n              require playerVault[address(stackOwner)] / 100000\n              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / playerVault[address(stackOwner)] / 100000 == percentageToReinvest[address(stackOwner)]\n          if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n          require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n          call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.buy(address _referredBy) with:\n             value 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 wei\n               gas gas_remaining wei\n              args masternode\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 950\n          if 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n              require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n          if 100 > percentageToReinvest[address(stackOwner)]:\n              if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                  require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n              call stackOwner with:\n                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n          log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          stop\n      require (totalDividendPoints * bondsOutstanding[address(stackOwner)]) - (stor69[address(stackOwner)] * bondsOutstanding[address(stackOwner)]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[address(stackOwner)]) - (stor69[address(stackOwner)] * bondsOutstanding[address(stackOwner)]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[address(stackOwner)]) - (stor69[address(stackOwner)] * bondsOutstanding[address(stackOwner)]) / pointMultiplier) + pendingFills[address(stackOwner)] >= pendingFills[address(stackOwner)]\n      pendingFills[address(stackOwner)] += (totalDividendPoints * bondsOutstanding[address(stackOwner)]) - (stor69[address(stackOwner)] * bondsOutstanding[address(stackOwner)]) / pointMultiplier\n      stor69[address(stackOwner)] = totalDividendPoints\n      require bool(stor12[address(stackOwner)]) == 1\n      require 100000 < playerVault[address(stackOwner)]\n      require tx.origin == caller\n      playerVault[address(stackOwner)] = 0\n      if not playerVault[address(stackOwner)] / 100000:\n          if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n          require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n          call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.buy(address _referredBy) with:\n             value 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 wei\n               gas gas_remaining wei\n              args masternode\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 950\n          if 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n              require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n          if 100 > percentageToReinvest[address(stackOwner)]:\n              if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                  require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n              call stackOwner with:\n                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n          log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          stop\n      require playerVault[address(stackOwner)] / 100000\n      require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / playerVault[address(stackOwner)] / 100000 == percentageToReinvest[address(stackOwner)]\n      if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n          require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n          call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.buy(address _referredBy) with:\n             value 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 wei\n               gas gas_remaining wei\n              args masternode\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 950\n          if 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n              require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n          if 100 > percentageToReinvest[address(stackOwner)]:\n              if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                  require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n              call stackOwner with:\n                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n          log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          stop\n      require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n      require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n      require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n      call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.buy(address _referredBy) with:\n         value 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 wei\n           gas gas_remaining wei\n          args masternode\n      if not ext_call.success:\n          revert with ext_call.return_data[0 len return_data.size]\n      require return_data.size >= 32\n      if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n          if 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n              require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n          if 100 > percentageToReinvest[address(stackOwner)]:\n              if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                  require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n              call stackOwner with:\n                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n          log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          stop\n      require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n      require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 950\n      if not 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n          if 100 > percentageToReinvest[address(stackOwner)]:\n              if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                  require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n              call stackOwner with:\n                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n          log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          stop\n      require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n      require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n      require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n      bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n      require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n      bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n      require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n      require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n      totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n      require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n      stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n      if 100 <= percentageToReinvest[address(stackOwner)]:\n          log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          stop\n      if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n          require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n          require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n          call stackOwner with:\n             value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n               gas 2300 * is_zero(value) wei\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          stop\n      require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n      require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n      require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n      require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n      call stackOwner with:\n         value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n           gas 2300 * is_zero(value) wei\n      if not ext_call.success:\n          revert with ext_call.return_data[0 len return_data.size]\n      log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n  else:\n      require (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier <= unclaimedDividends\n      unclaimedDividends -= (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      require ((totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier) + pendingFills[caller] >= pendingFills[caller]\n      pendingFills[caller] += (totalDividendPoints * bondsOutstanding[caller]) - (stor69[caller] * bondsOutstanding[caller]) / pointMultiplier\n      stor69[caller] = totalDividendPoints\n      require stor69[address(stackOwner)] <= totalDividendPoints\n      require pointMultiplier\n      if (totalDividendPoints * bondsOutstanding[address(stackOwner)]) - (stor69[address(stackOwner)] * bondsOutstanding[address(stackOwner)]) / pointMultiplier <= 0:\n          stor69[address(stackOwner)] = totalDividendPoints\n          require bool(stor12[address(stackOwner)]) == 1\n          require 100000 < playerVault[address(stackOwner)]\n          require tx.origin == caller\n          playerVault[address(stackOwner)] = 0\n          if not playerVault[address(stackOwner)] / 100000:\n              if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                  require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n              require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n              call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.buy(address _referredBy) with:\n                 value 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 wei\n                   gas gas_remaining wei\n                  args masternode\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                  require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 950\n              if 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                  require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n              require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n              bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n              require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n              bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n              require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n              require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n              totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n              require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n              stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              if 100 > percentageToReinvest[address(stackOwner)]:\n                  if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                      require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                      require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                  require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                  call stackOwner with:\n                     value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n              stop\n          require playerVault[address(stackOwner)] / 100000\n          require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / playerVault[address(stackOwner)] / 100000 == percentageToReinvest[address(stackOwner)]\n          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n              require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n              call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.buy(address _referredBy) with:\n                 value 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 wei\n                   gas gas_remaining wei\n                  args masternode\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                  require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 950\n              if 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                  require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n              require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n              bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n              require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n              bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n              require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n              require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n              totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n              require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n              stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              if 100 > percentageToReinvest[address(stackOwner)]:\n                  if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                      require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                      require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                  require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                  call stackOwner with:\n                     value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n              stop\n          require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n          require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n          require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n          call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.buy(address _referredBy) with:\n             value 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 wei\n               gas gas_remaining wei\n              args masternode\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n              if 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                  require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n              require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n              bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n              require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n              bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n              require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n              require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n              totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n              require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n              stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              if 100 > percentageToReinvest[address(stackOwner)]:\n                  if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                      require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                      require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                  require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                  call stackOwner with:\n                     value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n              stop\n          require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n          require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 950\n          if not 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n              require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n              bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n              require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n              bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n              require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n              require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n              totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n              require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n              stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              if 100 > percentageToReinvest[address(stackOwner)]:\n                  if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                      require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                      require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                  require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                  call stackOwner with:\n                     value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n              stop\n          require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n          require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n          if 100 <= percentageToReinvest[address(stackOwner)]:\n              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n              stop\n          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n              call stackOwner with:\n                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n              stop\n          require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n          require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n          require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n          require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n          call stackOwner with:\n             value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n               gas 2300 * is_zero(value) wei\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n      else:\n          require (totalDividendPoints * bondsOutstanding[address(stackOwner)]) - (stor69[address(stackOwner)] * bondsOutstanding[address(stackOwner)]) / pointMultiplier <= unclaimedDividends\n          unclaimedDividends -= (totalDividendPoints * bondsOutstanding[address(stackOwner)]) - (stor69[address(stackOwner)] * bondsOutstanding[address(stackOwner)]) / pointMultiplier\n          require ((totalDividendPoints * bondsOutstanding[address(stackOwner)]) - (stor69[address(stackOwner)] * bondsOutstanding[address(stackOwner)]) / pointMultiplier) + pendingFills[address(stackOwner)] >= pendingFills[address(stackOwner)]\n          pendingFills[address(stackOwner)] += (totalDividendPoints * bondsOutstanding[address(stackOwner)]) - (stor69[address(stackOwner)] * bondsOutstanding[address(stackOwner)]) / pointMultiplier\n          stor69[address(stackOwner)] = totalDividendPoints\n          require bool(stor12[address(stackOwner)]) == 1\n          require 100000 < playerVault[address(stackOwner)]\n          require tx.origin == caller\n          playerVault[address(stackOwner)] = 0\n          if not playerVault[address(stackOwner)] / 100000:\n              if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                  require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n                  call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.buy(address _referredBy) with:\n                     value 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 wei\n                       gas gas_remaining wei\n                      args masternode\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                      if not 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          if 100 > percentageToReinvest[address(stackOwner)]:\n                              if percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                                  require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                                  require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                              call stackOwner with:\n                                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                          log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          stop\n                      require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                      require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n                      require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                      bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                      require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                      bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                      require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                      require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                      totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                      require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                      stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                      if 100 <= percentageToReinvest[address(stackOwner)]:\n                          log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          stop\n                      if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                          require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                          call stackOwner with:\n                             value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          stop\n                      require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                      require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                      require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                      require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                      call stackOwner with:\n                         value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                  else:\n                      require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                      require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 950\n                      if not 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          if 100 <= percentageToReinvest[address(stackOwner)]:\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                              call stackOwner with:\n                                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                          require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                          call stackOwner with:\n                             value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                      else:\n                          require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n                          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          if 100 <= percentageToReinvest[address(stackOwner)]:\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                              call stackOwner with:\n                                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                          else:\n                              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n              else:\n                  require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                  require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n                  call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.buy(address _referredBy) with:\n                     value 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 wei\n                       gas gas_remaining wei\n                      args masternode\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                      if not 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          if 100 <= percentageToReinvest[address(stackOwner)]:\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                              call stackOwner with:\n                                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                          require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                          call stackOwner with:\n                             value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                      else:\n                          require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n                          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          if 100 <= percentageToReinvest[address(stackOwner)]:\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                              call stackOwner with:\n                                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                          else:\n                              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                  else:\n                      require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                      require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 950\n                      if not 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          if 100 <= percentageToReinvest[address(stackOwner)]:\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                              call stackOwner with:\n                                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                          else:\n                              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                      else:\n                          require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n                          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          if 100 <= percentageToReinvest[address(stackOwner)]:\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                          else:\n                              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n          else:\n              require playerVault[address(stackOwner)] / 100000\n              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / playerVault[address(stackOwner)] / 100000 == percentageToReinvest[address(stackOwner)]\n              if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                  require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n                  call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.buy(address _referredBy) with:\n                     value 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 wei\n                       gas gas_remaining wei\n                      args masternode\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                      if not 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          if 100 <= percentageToReinvest[address(stackOwner)]:\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                              call stackOwner with:\n                                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                          require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                          call stackOwner with:\n                             value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                      else:\n                          require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n                          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          if 100 <= percentageToReinvest[address(stackOwner)]:\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                              call stackOwner with:\n                                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                          else:\n                              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                  else:\n                      require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                      require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 950\n                      if not 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          if 100 <= percentageToReinvest[address(stackOwner)]:\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                              call stackOwner with:\n                                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                          else:\n                              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                      else:\n                          require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n                          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          if 100 <= percentageToReinvest[address(stackOwner)]:\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                          else:\n                              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n              else:\n                  require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                  require ext_code.size(0xb3775fb83f7d12a36e0475abdd1fca35c091efbe)\n                  call 0xb3775fb83f7d12a36e0475abdd1fca35c091efbe.buy(address _referredBy) with:\n                     value 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 wei\n                       gas gas_remaining wei\n                      args masternode\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                      if not 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          if 100 <= percentageToReinvest[address(stackOwner)]:\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                              call stackOwner with:\n                                 value playerVault[address(stackOwner)] - (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) - (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                          else:\n                              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                      else:\n                          require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n                          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          if 100 <= percentageToReinvest[address(stackOwner)]:\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                          else:\n                              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                  else:\n                      require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                      require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 950\n                      if not 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          if 100 <= percentageToReinvest[address(stackOwner)]:\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) <= playerVault[address(stackOwner)]\n                          else:\n                              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                      else:\n                          require 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          require 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 109\n                          require (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + bondsOutstanding[address(stackOwner)] >= bondsOutstanding[address(stackOwner)]\n                          bondsOutstanding[address(stackOwner)] += 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller] >= bondsOutstanding[caller]\n                          bondsOutstanding[caller] = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + bondsOutstanding[caller]\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) >= 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                          require (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds >= totalSupplyBonds\n                          totalSupplyBonds = (percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100) + totalSupplyBonds\n                          require (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + stor14 >= stor14\n                          stor14 += 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          if 100 <= percentageToReinvest[address(stackOwner)]:\n                              log 0x778299cb: stackOwner, 103550 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / 100\n                              stop\n                          if not percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000:\n                              require (50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) + (950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000) >= 950 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                          else:\n                              require percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000\n                              require 50 * percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 / percentageToReinvest[address(stackOwner)] * playerVault[address(stackOwner)] / 100000 == 50\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 53480 tokens. Please reduce the length of the messages."
}