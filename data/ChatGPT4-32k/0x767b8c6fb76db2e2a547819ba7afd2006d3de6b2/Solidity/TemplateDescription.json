{
	"address": "0x767b8c6fb76db2e2a547819ba7afd2006d3de6b2",
	"input_format": "TemplateDescription",
	"ir": "For the function releaseDrip.\n  When (timedrip+0x15180) is smaller than current time:\n  - the state variable timedrip will be updated to current time.\n  When (timedrip+0x15180) is smaller than current time, and (vaultdrip/100) is not greater than vaultdrip:\n  - the state variable vaultdrip will be updated to (vaultdrip-(vaultdrip/100)).\n  When (timedrip+0x15180) is smaller than current time, and (vaultdrip/100) is not greater than vaultdrip, and ((vaultdrip/100)+totaldividendpoints) is not smaller than totaldividendpoints:\n  - the state variable totaldividendpoints will be updated to ((vaultdrip/100)+totaldividendpoints).\n  When (timedrip+0x15180) is smaller than current time, and (vaultdrip/100) is not greater than vaultdrip, and ((vaultdrip/100)+totaldividendpoints) is not smaller than totaldividendpoints, and ((vaultdrip/100)+unclaimeddividends) is not smaller than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to ((vaultdrip/100)+unclaimeddividends).\n\nFor the function payoutRandomDistrAlways.\n  For origin, and totalsupply4 does not equal to the current block's number, and (current time+blockhash (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than blockhash (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and totalsupply5 is greater than 0, and 0xde0b6b3a7640000 is not greater than totalsupply6, and totalsupply5 is greater than 0, and totalsupply6 is not smaller than 0xde0b6b3a7640000:\n  - the state variable totalSupply6 will be updated to (totalSupply6-0xde0b6b3a7640000).\n  For origin, and totalsupply4 does not equal to the current block's number, and (current time+blockhash (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than blockhash (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and totalsupply5 is greater than 0, and 0xde0b6b3a7640000 is not greater than totalsupply6, and (0xde0b6b3a7640000+the pendingfills of the balance of (current time+blockhash (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) mod totalsupply5) is not smaller than the pendingfills of the balance of (current time+blockhash (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) mod totalsupply5, and totalsupply5 is greater than 0, and totalsupply6 is not smaller than 0xde0b6b3a7640000:\n  - the pendingfills of the balance of (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD totalSupply5 will be updated to (0xde0b6b3a7640000+the pendingfills of the balance of (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD totalSupply5).\n  - the state variable lastdraw will be updated to the current block's number.\n\nFor the function fetchdivs, it has one argument and its type is address.\n  When the tokenURI from the first argument to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0:\n  - the tokenURI from the first argument to 1 will be updated to 0.\n  When the tokenURI from the first argument to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier) is not greater than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier)).\n  When the tokenURI from the first argument to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier)+the pendingfills of the first argument) is not smaller than the pendingfills of the first argument:\n  - the pendingfills of the first argument will be updated to ((((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier)+the pendingfills of the first argument).\n\nFor the payable function helpUnstuckEth.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and for ORIGIN, and the ether just received (i.e., msg.value) is not smaller than 0x71afd498d0000:\n  - the hassethstuck of owner will be updated to 1.\n  - the state variable cangetpaidforhelping will be updated to 1.\n  - the hassethstuck of caller or 0x10000000000000000000000000000000000000000 or addressOfBountyMembers and 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 will be updated to the hassethstuck of caller or 0x10000000000000000000000000000000000000000 or addressOfBountyMembers and 0xffffffffffffffffffffffff0000000000000000000000000000000000000000.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and for ORIGIN, and the ether just received (i.e., msg.value) is not smaller than 0x71afd498d0000, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller:\n  - the balance2 of caller will be updated to (the ether just received (i.e., msg.value)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and for ORIGIN, and the ether just received (i.e., msg.value) is not smaller than 0x71afd498d0000, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7:\n  - the state variable totalSupply7 will be updated to (the ether just received (i.e., msg.value)+totalSupply7).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and for ORIGIN, and the ether just received (i.e., msg.value) is not smaller than 0x71afd498d0000, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and (the ether just received (i.e., msg.value)+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to (the ether just received (i.e., msg.value)+totalSupply2).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0:\n  - the tokenURI from caller to 1 will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller).\n\nFor the function releaseVaultMedium.\n  When (timemedium+0x93a80) is smaller than current time:\n  - the state variable timemedium will be updated to current time.\n  - the state variable totalSupply1 will be updated to 0.\n  When (timemedium+0x93a80) is smaller than current time, and (totalSupply1+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to (totalSupply1+totalSupply2).\n\nFor the function snip3dVaultToPLinc.\n  - it calls an external function harvestableBalance of 0x99352D1edfa7f124eC618dfb51014f6D54bAc4aE, and gets the returned value as v0.\n  When RETURNDATASIZE is not smaller than 32:\n  - it calls an external function fetchBalance of 0x99352D1edfa7f124eC618dfb51014f6D54bAc4aE.\n  When RETURNDATASIZE is not smaller than 32, and (v0+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to (v0+totalSupply2).\n\nFor the function releaseVaultSmall.\n  When (timesmall+0x15180) is smaller than current time:\n  - the state variable timesmall will be updated to current time.\n  - the state variable vaultsmall will be updated to 0.\n  When (timesmall+0x15180) is smaller than current time, and (vaultsmall+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to (vaultsmall+totalSupply2).\n\nFor the payable function playProofOfDecreasingOddsALL, it has one argument and its type is uint256.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and decreasingoddsall is greater than 0, and 1 is not smaller than the first argument, and 0 is smaller than the first argument:\n  - the state variable decreasingoddsall will be updated to (1+decreasingoddsall).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and decreasingoddsall is greater than 0, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and 0 is smaller than the first argument, and 1 is not smaller than the first argument:\n  - the balance2 of caller will be updated to (the ether just received (i.e., msg.value)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and decreasingoddsall is greater than 0, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and 0 is smaller than the first argument, and 1 is not smaller than the first argument:\n  - the state variable totalSupply7 will be updated to (the ether just received (i.e., msg.value)+totalSupply7).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and decreasingoddsall is greater than 0, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and (the ether just received (i.e., msg.value)+totalSupply2) is not smaller than totalSupply2, and 0 is smaller than the first argument, and 1 is not smaller than the first argument:\n  - the state variable totalSupply2 will be updated to (the ether just received (i.e., msg.value)+totalSupply2).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0:\n  - the tokenURI from caller to 1 will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller).\n\nFor the payable function begForFreeEth.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the ether just received (i.e., msg.value) is not smaller than 0x16345785d8a0000, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and 0x166d2f702508000 is greater than plincgiverofeth:\n  - the balance2 of caller will be updated to (the ether just received (i.e., msg.value)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the ether just received (i.e., msg.value) is not smaller than 0x16345785d8a0000, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and 0x166d2f702508000 is greater than plincgiverofeth:\n  - the state variable totalSupply7 will be updated to (the ether just received (i.e., msg.value)+totalSupply7).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the ether just received (i.e., msg.value) is not smaller than 0x16345785d8a0000, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and (the ether just received (i.e., msg.value)+totalSupply2) is not smaller than totalSupply2, and 0x166d2f702508000 is greater than plincgiverofeth:\n  - the state variable totalSupply2 will be updated to (the ether just received (i.e., msg.value)+totalSupply2).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0:\n  - the tokenURI from caller to 1 will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the ether just received (i.e., msg.value) is not smaller than 0x16345785d8a0000, and 0x166d2f702508000 is not greater than plincgiverofeth, and 0x16345785d8a0000 is not greater than plincgiverofeth:\n  - the state variable plincgiverofeth will be updated to (plincgiverofeth-0x16345785d8a0000).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the ether just received (i.e., msg.value) is not smaller than 0x16345785d8a0000, and 0x166d2f702508000 is not greater than plincgiverofeth, and 0x16345785d8a0000 is not greater than plincgiverofeth, and (0x166d2f702508000+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to (0x166d2f702508000+the pendingfills of caller).\n\nFor the payable function takeArbitrageOpportunityRisky.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and (arbitragepotrisky/5) is greater than 1000, and (arbitragepotrisky/5) is 0, and ((101*(arbitragepotrisky/5))/100) is not greater than arbitragepotrisky, and the ether just received (i.e., msg.value) is greater than (arbitragepotrisky/5):\n  - the state variable arbitragepotrisky will be updated to (arbitragepotrisky-((101*(arbitragepotrisky/5))/100)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and (arbitragepotrisky/5) is greater than 1000, and (arbitragepotrisky/5) is 0, and ((101*(arbitragepotrisky/5))/100) is not greater than arbitragepotrisky, and for ORIGIN, and (((101*(arbitragepotrisky/5))/100)+the pendingfills of caller) is not smaller than the pendingfills of caller, and the ether just received (i.e., msg.value) is greater than (arbitragepotrisky/5):\n  - the pendingfills of caller will be updated to (((101*(arbitragepotrisky/5))/100)+the pendingfills of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and (arbitragepotrisky/5) is greater than 1000, and (arbitragepotrisky/5) is 0, and ((101*(arbitragepotrisky/5))/100) is not greater than arbitragepotrisky, and for ORIGIN, and (((101*(arbitragepotrisky/5))/100)+the pendingfills of caller) is not smaller than the pendingfills of caller, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and the ether just received (i.e., msg.value) is greater than (arbitragepotrisky/5):\n  - the balance2 of caller will be updated to (the ether just received (i.e., msg.value)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and (arbitragepotrisky/5) is greater than 1000, and (arbitragepotrisky/5) is 0, and ((101*(arbitragepotrisky/5))/100) is not greater than arbitragepotrisky, and for ORIGIN, and (((101*(arbitragepotrisky/5))/100)+the pendingfills of caller) is not smaller than the pendingfills of caller, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and the ether just received (i.e., msg.value) is greater than (arbitragepotrisky/5):\n  - the state variable totalSupply7 will be updated to (the ether just received (i.e., msg.value)+totalSupply7).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and (arbitragepotrisky/5) is greater than 1000, and (arbitragepotrisky/5) is 0, and ((101*(arbitragepotrisky/5))/100) is not greater than arbitragepotrisky, and for ORIGIN, and (((101*(arbitragepotrisky/5))/100)+the pendingfills of caller) is not smaller than the pendingfills of caller, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and (the ether just received (i.e., msg.value)+totalSupply2) is not smaller than totalSupply2, and the ether just received (i.e., msg.value) is greater than (arbitragepotrisky/5):\n  - the state variable totalSupply2 will be updated to (the ether just received (i.e., msg.value)+totalSupply2).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0:\n  - the tokenURI from caller to 1 will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0:\n  - the pendingfills of caller will be updated to ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller).\n\nFor the function setAuto, it has one argument and its type is uint256.\n  - the balance8 of caller will be updated to 1.\n  When the first argument is greater than 0, and the first argument is not greater than 100:\n  - the percentagetoreinvest of caller will be updated to the first argument.\n\nFor the function sendButcher.\n  When slaughter3dpot is greater than 0x16345785d8a0000:\n  - it calls an external function sacUp of 0x3E752fFD5eff7b7f2715eF43D8339ecABd0e65b9 with ether valued valued slaughter3dpot. Afterthat, \n    - the state variable slaughter3dpot will be updated to 0.\n\nFor the payable function buyCEO.\n  When the ether just received (i.e., msg.value) is not smaller than the price of 0, and ((the ether just received (i.e., msg.value)/2)+the manvault of 0) is not smaller than the manvault of 0:\n  - the playervault of the management of the address will be updated to (((the ether just received (i.e., msg.value)/2)+the manvault of 0)+the playervault of the management of the address). Afterthat, \n    - the manvault of 0 will be updated to 0.\n  - the management of the address will be updated to caller.\n  When the ether just received (i.e., msg.value) is not smaller than the price of 0, and ((the ether just received (i.e., msg.value)/2)+the manvault of 0) is not smaller than the manvault of 0, and ((the ether just received (i.e., msg.value)/2)+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to ((the ether just received (i.e., msg.value)/2)+totalSupply2).\n  When the ether just received (i.e., msg.value) is not smaller than the price of 0, and ((the ether just received (i.e., msg.value)/2)+the manvault of 0) is not smaller than the manvault of 0, and ((the ether just received (i.e., msg.value)/2)+totalSupply2) is not smaller than totalSupply2, and the price of 0 is 0:\n  - the price of 0 will be updated to ((21*the price of 0)/10).\n\nFor the payable function playProofOfIncreasingOddsWhale, it has one argument and its type is uint256.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and for ORIGIN, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0x8ac7230489e80000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (1000-the oddswhale of caller) is greater than 0, and 1 is not smaller than the first argument, and (1000-the oddswhale of caller) is greater than 2:\n  - the oddswhale of caller will be updated to (1+the oddswhale of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and for ORIGIN, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0x8ac7230489e80000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (1000-the oddswhale of caller) is greater than 0, and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (1000-the oddswhale of caller) is greater than 2:\n  - the balance2 of caller will be updated to (the ether just received (i.e., msg.value)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and for ORIGIN, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0x8ac7230489e80000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (1000-the oddswhale of caller) is greater than 0, and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and (1000-the oddswhale of caller) is greater than 2:\n  - the state variable totalSupply7 will be updated to (the ether just received (i.e., msg.value)+totalSupply7).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and for ORIGIN, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0x8ac7230489e80000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (1000-the oddswhale of caller) is greater than 0, and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and (the ether just received (i.e., msg.value)+totalSupply2) is not smaller than totalSupply2, and (1000-the oddswhale of caller) is greater than 2:\n  - the state variable totalSupply2 will be updated to (the ether just received (i.e., msg.value)+totalSupply2).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0:\n  - the tokenURI from caller to 1 will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and for ORIGIN, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0x8ac7230489e80000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (1000-the oddswhale of caller) is greater than 0, and 1 equals to BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) MOD (1000-the oddswhale of caller), and (1000-the oddswhale of caller) is greater than 2:\n  - the state variable poiopotwhale will be updated to (poiopotwhale/2).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and for ORIGIN, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0x8ac7230489e80000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (1000-the oddswhale of caller) is greater than 0, and 1 equals to BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) MOD (1000-the oddswhale of caller), and ((poiopotwhale/2)+the pendingfills of caller) is not smaller than the pendingfills of caller, and (1000-the oddswhale of caller) is greater than 2:\n  - the pendingfills of caller will be updated to ((poiopotwhale/2)+the pendingfills of caller).\n  - the oddswhale of caller will be updated to 0.\n\nFor the payable function playRandomDistributionWhale, it has one argument and its type is uint256.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0xde0b6b3a7640000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument:\n  - the randomdistrwhale of s_44 will be updated to caller.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0xde0b6b3a7640000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and 1 is not smaller than the first argument:\n  - the state variable s_44 will be updated to (1+s_44).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0xde0b6b3a7640000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller:\n  - the balance2 of caller will be updated to (the ether just received (i.e., msg.value)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0xde0b6b3a7640000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7:\n  - the state variable totalSupply7 will be updated to (the ether just received (i.e., msg.value)+totalSupply7).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0xde0b6b3a7640000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and (the ether just received (i.e., msg.value)+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to (the ether just received (i.e., msg.value)+totalSupply2).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0:\n  - the tokenURI from caller to 1 will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller).\n\nFor the function harvestabledivs.\n  - it calls an external function myDividends of 0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe with 1 as the argument.\n\nFor the function fillBonds, it has one argument and its type is address.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and the tokenURI from the first argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier) is not greater than 0, and the pendingfills of the first argument is greater than 1000, and for ORIGIN, and the pendingfills of the first argument is not greater than the balance2 of the first argument, and 1000 is smaller than the balance2 of the first argument, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0:\n  - the balance2 of the first argument will be updated to (the balance2 of the first argument-the pendingfills of the first argument). Afterthat, \n    - the pendingfills of the first argument will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and the tokenURI from the first argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier) is not greater than 0, and the pendingfills of the first argument is greater than 1000, and for ORIGIN, and the pendingfills of the first argument is not greater than the balance2 of the first argument, and ((the pendingfills of the first argument/1000)+the balance2 of caller) is not smaller than the balance2 of caller, and 1000 is smaller than the balance2 of the first argument, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0:\n  - the balance2 of caller will be updated to ((the pendingfills of the first argument/1000)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and the tokenURI from the first argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier) is not greater than 0, and the pendingfills of the first argument is greater than 1000, and for ORIGIN, and the pendingfills of the first argument is not greater than the balance2 of the first argument, and ((the pendingfills of the first argument/1000)+the balance2 of caller) is not smaller than the balance2 of caller, and the pendingfills of the first argument is not greater than totalSupply7, and ((the pendingfills of the first argument/1000)+(totalSupply7-the pendingfills of the first argument)) is not smaller than (totalSupply7-the pendingfills of the first argument), and 1000 is smaller than the balance2 of the first argument, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0:\n  - the state variable totalSupply7 will be updated to ((the pendingfills of the first argument/1000)+(totalSupply7-the pendingfills of the first argument)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and the tokenURI from the first argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier) is not greater than 0, and the pendingfills of the first argument is greater than 1000, and for ORIGIN, and the pendingfills of the first argument is not greater than the balance2 of the first argument, and ((the pendingfills of the first argument/1000)+the balance2 of caller) is not smaller than the balance2 of caller, and the pendingfills of the first argument is not greater than totalSupply7, and ((the pendingfills of the first argument/1000)+(totalSupply7-the pendingfills of the first argument)) is not smaller than (totalSupply7-the pendingfills of the first argument), and (the pendingfills of the first argument+the playervault of the first argument) is not smaller than the playervault of the first argument, and 1000 is smaller than the balance2 of the first argument, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0:\n  - the playervault of the first argument will be updated to (the pendingfills of the first argument+the playervault of the first argument).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and the tokenURI from the first argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier) is not greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0:\n  - the tokenURI from caller to 1 will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0:\n  - the pendingfills of caller will be updated to ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and the tokenURI from the first argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier) is not greater than unclaimeddividends, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and (((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier) is greater than 0:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and the tokenURI from the first argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier)+the pendingfills of the first argument) is not smaller than the pendingfills of the first argument, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and (((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier) is greater than 0:\n  - the pendingfills of the first argument will be updated to ((((totaldividendpoints-the tokenURI from the first argument to 1)*the balance2 of the first argument)/pointmultiplier)+the pendingfills of the first argument).\n\nFor the function managementWithdraw, it has one argument and its type is uint256.\n  When the first argument is smaller than 6, and the manvault of the first argument is greater than 0:\n  - it transfers ether valued the manvault of the first argument to the management of the first argument. Afterthat, \n    - the manvault of the first argument will be updated to 0.\n\nFor the function slaughter3dbridgeToPLinc.\n  - it calls an external function harvestableBalance of 0x3E752fFD5eff7b7f2715eF43D8339ecABd0e65b9, and gets the returned value as v0.\n  When RETURNDATASIZE is not smaller than 32:\n  - it calls an external function fetchBalance of 0x3E752fFD5eff7b7f2715eF43D8339ecABd0e65b9.\n  When RETURNDATASIZE is not smaller than 32, and (v0+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to (v0+totalSupply2).\n\nFor the function payoutCheatLine.\n  When nextinline is greater than 0, and for ORIGIN, and 1 is not greater than nextinline, and cheatlinepot is not smaller than 0x16345785d8a0000:\n  - the state variable nextinline will be updated to (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff+nextinline).\n  When nextinline is greater than 0, and for ORIGIN, and 1 is not greater than nextinline, and 0x16345785d8a0000 is not greater than cheatlinepot, and cheatlinepot is not smaller than 0x16345785d8a0000:\n  - the state variable cheatlinepot will be updated to (cheatlinepot-0x16345785d8a0000).\n  When nextinline is greater than 0, and for ORIGIN, and 1 is not greater than nextinline, and 0x16345785d8a0000 is not greater than cheatlinepot, and (0x16345785d8a0000+the pendingfills of the cheatline of (nextinline-1)) is not smaller than the pendingfills of the cheatline of (nextinline-1), and cheatlinepot is not smaller than 0x16345785d8a0000:\n  - the pendingfills of the cheatline of (nextinline-1) will be updated to (0x16345785d8a0000+the pendingfills of the cheatline of (nextinline-1)).\n  - the isinline of the cheatline of (nextinline-1) will be updated to the isinline of the cheatline of (nextinline-1).\n\nFor the function soldierBuy.\n  When snip3dpot is greater than 0x16345785d8a0000:\n  - it calls an external function sacUp of 0x99352D1edfa7f124eC618dfb51014f6D54bAc4aE with ether valued valued snip3dpot. Afterthat, \n    - the state variable snip3dpot will be updated to 0.\n\nFor the payable function playProofOfIncreasingOddsALL, it has one argument and its type is uint256.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (1000-oddsall) is greater than 0, and 1 does not equal to BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) MOD (1000-oddsall), and 1 is not smaller than the first argument, and (1000-oddsall) is greater than 2:\n  - the state variable oddsall will be updated to (1+oddsall).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (1000-oddsall) is greater than 0, and 1 does not equal to BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) MOD (1000-oddsall), and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (1000-oddsall) is greater than 2:\n  - the balance2 of caller will be updated to (the ether just received (i.e., msg.value)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (1000-oddsall) is greater than 0, and 1 does not equal to BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) MOD (1000-oddsall), and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and (1000-oddsall) is greater than 2:\n  - the state variable totalSupply7 will be updated to (the ether just received (i.e., msg.value)+totalSupply7).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the first argument is 0, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (1000-oddsall) is greater than 0, and 1 does not equal to BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) MOD (1000-oddsall), and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and (the ether just received (i.e., msg.value)+totalSupply2) is not smaller than totalSupply2, and (1000-oddsall) is greater than 2:\n  - the state variable totalSupply2 will be updated to (the ether just received (i.e., msg.value)+totalSupply2).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0:\n  - the tokenURI from caller to 1 will be updated to 0.\n\nFor the function ethManagementPropagate.\n  When ethpendingmanagement is greater than 0:\n  - the state variable ethpendingmanagement will be updated to 0.\n  When ethpendingmanagement is greater than 0, and (ethpendingmanagement/20) is greater than 0, and ((5*(ethpendingmanagement/20))/(ethpendingmanagement/20)) equals to 5:\n  - the manvault of 0 will be updated to ((5*(ethpendingmanagement/20))+the manvault of 0).\n  - the manvault of 1 will be updated to ((5*(ethpendingmanagement/20))+the manvault of 1).\n  When ethpendingmanagement is greater than 0, and (ethpendingmanagement/20) is greater than 0, and ((5*(ethpendingmanagement/20))/(ethpendingmanagement/20)) equals to 5, and ((4*(ethpendingmanagement/20))/(ethpendingmanagement/20)) equals to 4:\n  - the manvault of 2 will be updated to ((4*(ethpendingmanagement/20))+the manvault of 2).\n  When ethpendingmanagement is greater than 0, and (ethpendingmanagement/20) is greater than 0, and ((5*(ethpendingmanagement/20))/(ethpendingmanagement/20)) equals to 5, and ((4*(ethpendingmanagement/20))/(ethpendingmanagement/20)) equals to 4, and ((3*(ethpendingmanagement/20))/(ethpendingmanagement/20)) equals to 3:\n  - the manvault of 3 will be updated to ((3*(ethpendingmanagement/20))+the manvault of 3).\n  When ethpendingmanagement is greater than 0, and (ethpendingmanagement/20) is greater than 0, and ((5*(ethpendingmanagement/20))/(ethpendingmanagement/20)) equals to 5, and ((4*(ethpendingmanagement/20))/(ethpendingmanagement/20)) equals to 4, and ((3*(ethpendingmanagement/20))/(ethpendingmanagement/20)) equals to 3, and ((2*(ethpendingmanagement/20))/(ethpendingmanagement/20)) equals to 2:\n  - the manvault of 4 will be updated to ((2*(ethpendingmanagement/20))+the manvault of 4).\n  When ethpendingmanagement is greater than 0, and (ethpendingmanagement/20) is greater than 0, and ((5*(ethpendingmanagement/20))/(ethpendingmanagement/20)) equals to 5, and ((4*(ethpendingmanagement/20))/(ethpendingmanagement/20)) equals to 4, and ((3*(ethpendingmanagement/20))/(ethpendingmanagement/20)) equals to 3, and ((2*(ethpendingmanagement/20))/(ethpendingmanagement/20)) equals to 2, and ((1*(ethpendingmanagement/20))/(ethpendingmanagement/20)) equals to 1:\n  - the manvault of 5 will be updated to ((1*(ethpendingmanagement/20))+the manvault of 5).\n\nFor the payable function playProofOfIncreasingOdds, it has one argument and its type is uint256.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the first argument is greater than 0, and ((0x16345785d8a0000*the first argument)/the first argument) equals to 0x16345785d8a0000, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (1000-the odds of caller) is greater than 2, and (1000-the odds of caller) is greater than 0, and for users, except 1 equals to BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) MOD (1000-the odds of caller), and 1 is not smaller than the first argument:\n  - the odds of caller will be updated to (1+the odds of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the first argument is greater than 0, and ((0x16345785d8a0000*the first argument)/the first argument) equals to 0x16345785d8a0000, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (1000-the odds of caller) is greater than 2, and (1000-the odds of caller) is greater than 0, and for users, except 1 equals to BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) MOD (1000-the odds of caller), and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller:\n  - the balance2 of caller will be updated to (the ether just received (i.e., msg.value)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the first argument is greater than 0, and ((0x16345785d8a0000*the first argument)/the first argument) equals to 0x16345785d8a0000, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (1000-the odds of caller) is greater than 2, and (1000-the odds of caller) is greater than 0, and for users, except 1 equals to BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) MOD (1000-the odds of caller), and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7:\n  - the state variable totalSupply7 will be updated to (the ether just received (i.e., msg.value)+totalSupply7).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and for ORIGIN, and the first argument is greater than 0, and ((0x16345785d8a0000*the first argument)/the first argument) equals to 0x16345785d8a0000, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (1000-the odds of caller) is greater than 2, and (1000-the odds of caller) is greater than 0, and for users, except 1 equals to BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) MOD (1000-the odds of caller), and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and (the ether just received (i.e., msg.value)+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to (the ether just received (i.e., msg.value)+totalSupply2).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0:\n  - the tokenURI from caller to 1 will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller).\n\nFor the function transferEthToHelper.\n  For origin, and 1 equals to the hassethstuck of caller, and 1 equals to cangetpaidforhelping, and 0xe35fa931a0000 is smaller than ethstuckonplinc:\n  - the hassethstuck of caller will be updated to the hassethstuck of caller.\n  - the state variable cangetpaidforhelping will be updated to 0.\n  For origin, and 1 equals to the hassethstuck of caller, and 1 equals to cangetpaidforhelping, and 0xe35fa931a0000 is smaller than ethstuckonplinc, and 0xe35fa931a0000 is not greater than ethstuckonplinc:\n  - the state variable ethstuckonplinc will be updated to (ethstuckonplinc-0xe35fa931a0000).\n  For origin, and 1 equals to the hassethstuck of caller, and 1 equals to cangetpaidforhelping, and 0xe35fa931a0000 is smaller than ethstuckonplinc, and 0xe35fa931a0000 is not greater than ethstuckonplinc, and (0xe35fa931a0000+the pendingfills of owner) is not smaller than the pendingfills of owner:\n  - the pendingfills of owner will be updated to (0xe35fa931a0000+the pendingfills of owner).\n\nFor the function ethPropagate.\n  When totalSupply2 is greater than 0:\n  - it calls an external function disburse of 0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1 with ether valued valued (totalSupply2/50). Afterthat, \n    - the state variable totalSupply2 will be updated to 0.\n  When totalSupply2 is greater than 0, and ((totalSupply2/50)+ethpendingmanagement) is not smaller than ethpendingmanagement:\n  - the state variable ethpendingmanagement will be updated to ((totalSupply2/50)+ethpendingmanagement).\n  When totalSupply2 is greater than 0, and ((totalSupply2/50)+ethpendingmanagement) is not smaller than ethpendingmanagement, and (totalSupply2/50) is greater than 0, and ((5*(totalSupply2/50))/(totalSupply2/50)) equals to 5, and (5*(totalSupply2/50)) is greater than 0, and ((pointmultiplier*(5*(totalSupply2/50)))/(5*(totalSupply2/50))) equals to pointmultiplier, and totalSupply7 is greater than 0, and totalSupply7 is greater than 0, and (((pointmultiplier*(5*(totalSupply2/50)))/totalSupply7)+totaldividendpoints) is not smaller than totaldividendpoints:\n  - the state variable totaldividendpoints will be updated to (((pointmultiplier*(5*(totalSupply2/50)))/totalSupply7)+totaldividendpoints).\n  When totalSupply2 is greater than 0, and ((totalSupply2/50)+ethpendingmanagement) is not smaller than ethpendingmanagement, and (totalSupply2/50) is greater than 0, and ((5*(totalSupply2/50))/(totalSupply2/50)) equals to 5, and (5*(totalSupply2/50)) is greater than 0, and ((pointmultiplier*(5*(totalSupply2/50)))/(5*(totalSupply2/50))) equals to pointmultiplier, and totalSupply7 is greater than 0, and totalSupply7 is greater than 0, and (((pointmultiplier*(5*(totalSupply2/50)))/totalSupply7)+totaldividendpoints) is not smaller than totaldividendpoints, and ((5*(totalSupply2/50))+unclaimeddividends) is not smaller than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to ((5*(totalSupply2/50))+unclaimeddividends).\n  When totalSupply2 is greater than 0, and ((totalSupply2/50)+ethpendingmanagement) is not smaller than ethpendingmanagement, and (totalSupply2/50) is greater than 0, and ((5*(totalSupply2/50))/(totalSupply2/50)) equals to 5, and (5*(totalSupply2/50)) is greater than 0, and ((pointmultiplier*(5*(totalSupply2/50)))/(5*(totalSupply2/50))) equals to pointmultiplier, and totalSupply7 is greater than 0, and totalSupply7 is greater than 0, and (((pointmultiplier*(5*(totalSupply2/50)))/totalSupply7)+totaldividendpoints) is not smaller than totaldividendpoints, and ((5*(totalSupply2/50))+unclaimeddividends) is not smaller than unclaimeddividends, and ((43*(totalSupply2/50))/(totalSupply2/50)) equals to 43, and ((43*(totalSupply2/50))+totalSupply15) is not smaller than totalSupply15:\n  - the state variable totalSupply15 will be updated to ((43*(totalSupply2/50))+totalSupply15).\n\nFor the function disableAuto.\n  - the balance8 of caller will be updated to the balance8 of caller.\n\nFor the function payoutRandomDistr.\n  When randompot is not smaller than 0x16345785d8a0000, and randomnext is greater than 0, and lastdraw does not equal to the current block's number, and for ORIGIN, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and randomnext is greater than 0, and 0x16345785d8a0000 is not greater than randompot:\n  - the state variable randompot will be updated to (randompot-0x16345785d8a0000).\n  When randompot is not smaller than 0x16345785d8a0000, and randomnext is greater than 0, and lastdraw does not equal to the current block's number, and for ORIGIN, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and randomnext is greater than 0, and 0x16345785d8a0000 is not greater than randompot, and (0x16345785d8a0000+the pendingfills of the randomdistr of (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD randomnext) is not smaller than the pendingfills of the randomdistr of (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD randomnext:\n  - the pendingfills of the randomdistr of (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD randomnext will be updated to (0x16345785d8a0000+the pendingfills of the randomdistr of (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD randomnext).\n  - the randomdistr of (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD randomnext will be updated to the randomdistr of (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff+randomnext).\n  - the state variable randomnext will be updated to (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff+randomnext).\n  - the state variable lastdraw will be updated to the current block's number.\n\nFor the function vaultToWallet, it has one argument and its type is address.\n  When 0 is smaller than the playervault of the first argument:\n  - it transfers ether valued the playervault of the first argument to the first argument. Afterthat, \n    - the playervault of the first argument will be updated to 0.\n\nFor the payable function playProofOfDiceRolls, it has one argument and its type is uint256.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and ((100*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 100, and the first argument is greater than 0, and the first argument is greater than 0, and for ORIGIN, and ((100*the ether just received (i.e., msg.value))/the first argument) is not greater than totalSupply11, and the first argument is smaller than 100, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) is not smaller than (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) MOD 100 is not smaller than the first argument:\n  - the state variable totalSupply12 will be updated to (1+totalSupply12).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and ((100*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 100, and the first argument is greater than 0, and the first argument is greater than 0, and for ORIGIN, and ((100*the ether just received (i.e., msg.value))/the first argument) is not greater than totalSupply11, and the first argument is smaller than 100, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) is not smaller than (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) MOD 100 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller:\n  - the balance2 of caller will be updated to (the ether just received (i.e., msg.value)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and ((100*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 100, and the first argument is greater than 0, and the first argument is greater than 0, and for ORIGIN, and ((100*the ether just received (i.e., msg.value))/the first argument) is not greater than totalSupply11, and the first argument is smaller than 100, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) is not smaller than (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) MOD 100 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7:\n  - the state variable totalSupply7 will be updated to (the ether just received (i.e., msg.value)+totalSupply7).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and ((100*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 100, and the first argument is greater than 0, and the first argument is greater than 0, and for ORIGIN, and ((100*the ether just received (i.e., msg.value))/the first argument) is not greater than totalSupply11, and the first argument is smaller than 100, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) is not smaller than (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) MOD 100 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and (the ether just received (i.e., msg.value)+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to (the ether just received (i.e., msg.value)+totalSupply2).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0:\n  - the tokenURI from caller to 1 will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and ((100*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 100, and the first argument is greater than 0, and the first argument is greater than 0, and for ORIGIN, and ((100*the ether just received (i.e., msg.value))/the first argument) is not greater than totalSupply11, and the first argument is smaller than 100, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) is not smaller than (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) MOD 100 is smaller than the first argument:\n  - the state variable totalSupply11 will be updated to (totalSupply11-((100*the ether just received (i.e., msg.value))/the first argument)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and ((100*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 100, and the first argument is greater than 0, and the first argument is greater than 0, and for ORIGIN, and ((100*the ether just received (i.e., msg.value))/the first argument) is not greater than totalSupply11, and the first argument is smaller than 100, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) is not smaller than (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) MOD 100 is smaller than the first argument, and (((100*the ether just received (i.e., msg.value))/the first argument)+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to (((100*the ether just received (i.e., msg.value))/the first argument)+the pendingfills of caller).\n\nFor the payable function playRandomDistribution, it has one argument and its type is uint256.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the first argument is greater than 0, and ((0x2386f26fc10000*the first argument)/the first argument) equals to 0x2386f26fc10000, and the ether just received (i.e., msg.value) is not smaller than (0x2386f26fc10000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument:\n  - the randomdistr of randomnext will be updated to caller.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the first argument is greater than 0, and ((0x2386f26fc10000*the first argument)/the first argument) equals to 0x2386f26fc10000, and the ether just received (i.e., msg.value) is not smaller than (0x2386f26fc10000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and 1 is not smaller than the first argument:\n  - the state variable randomnext will be updated to (1+randomnext).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the first argument is greater than 0, and ((0x2386f26fc10000*the first argument)/the first argument) equals to 0x2386f26fc10000, and the ether just received (i.e., msg.value) is not smaller than (0x2386f26fc10000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller:\n  - the balance2 of caller will be updated to (the ether just received (i.e., msg.value)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the first argument is greater than 0, and ((0x2386f26fc10000*the first argument)/the first argument) equals to 0x2386f26fc10000, and the ether just received (i.e., msg.value) is not smaller than (0x2386f26fc10000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7:\n  - the state variable totalSupply7 will be updated to (the ether just received (i.e., msg.value)+totalSupply7).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the first argument is greater than 0, and ((0x2386f26fc10000*the first argument)/the first argument) equals to 0x2386f26fc10000, and the ether just received (i.e., msg.value) is not smaller than (0x2386f26fc10000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and (the ether just received (i.e., msg.value)+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to (the ether just received (i.e., msg.value)+totalSupply2).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0:\n  - the tokenURI from caller to 1 will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller).\n\nFor the payable function playRandomDistributionAlways, it has one argument and its type is uint256.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller). Afterthat, \n    - the tokenURI from caller to 1 will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller, and the first argument is greater than 0, and ((0x16345785d8a0000*the first argument)/the first argument) equals to 0x16345785d8a0000, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument:\n  - the balance of totalSupply5 will be updated to caller.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller, and the first argument is greater than 0, and ((0x16345785d8a0000*the first argument)/the first argument) equals to 0x16345785d8a0000, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and 1 is not smaller than the first argument:\n  - the state variable totalSupply5 will be updated to (1+totalSupply5).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller, and the first argument is greater than 0, and ((0x16345785d8a0000*the first argument)/the first argument) equals to 0x16345785d8a0000, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller:\n  - the balance2 of caller will be updated to (the ether just received (i.e., msg.value)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller, and the first argument is greater than 0, and ((0x16345785d8a0000*the first argument)/the first argument) equals to 0x16345785d8a0000, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7:\n  - the state variable totalSupply7 will be updated to (the ether just received (i.e., msg.value)+totalSupply7).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller, and the first argument is greater than 0, and ((0x16345785d8a0000*the first argument)/the first argument) equals to 0x16345785d8a0000, and the ether just received (i.e., msg.value) is not smaller than (0x16345785d8a0000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and 1 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and (the ether just received (i.e., msg.value)+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to (the ether just received (i.e., msg.value)+totalSupply2).\n\nFor the payable function cheatTheLine.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is not smaller than 0x2386f26fc10000, and for ORIGIN, and for users, except 1 equals to the isinline of caller, and the isinline of caller is 0:\n  - the cheatline of nextinline will be updated to caller.\n  - the linenumber of caller will be updated to nextinline. Afterthat, \n    - the state variable nextinline will be updated to (1+nextinline).\n  - the isinline of caller will be updated to 1.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is not smaller than 0x2386f26fc10000, and for ORIGIN, and for users, except 1 equals to the isinline of caller, and the isinline of caller is 0, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller:\n  - the balance2 of caller will be updated to (the ether just received (i.e., msg.value)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is not smaller than 0x2386f26fc10000, and for ORIGIN, and for users, except 1 equals to the isinline of caller, and the isinline of caller is 0, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7:\n  - the state variable totalSupply7 will be updated to (the ether just received (i.e., msg.value)+totalSupply7).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is not smaller than 0x2386f26fc10000, and for ORIGIN, and for users, except 1 equals to the isinline of caller, and the isinline of caller is 0, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and (the ether just received (i.e., msg.value)+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to (the ether just received (i.e., msg.value)+totalSupply2).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0:\n  - the tokenURI from caller to 1 will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is not smaller than 0x2386f26fc10000, and for ORIGIN, and 1 equals to the isinline of caller:\n  - the cheatline of lastinline will be updated to the cheatline of the linenumber of caller.\n  - the cheatline of nextinline will be updated to caller.\n  - the state variable nextinline will be updated to (1+nextinline).\n  - the state variable lastinline will be updated to (lastinline+1).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller).\n\nFor the payable function buyDirector, it has one argument and its type is uint256.\n  When the first argument is greater than 0, and the first argument is smaller than 6, and the ether just received (i.e., msg.value) is not smaller than the price of the first argument, and ((the ether just received (i.e., msg.value)/2)+the manvault of the first argument) is not smaller than the manvault of the first argument:\n  - the playervault of the management of the first argument will be updated to (((the ether just received (i.e., msg.value)/2)+the manvault of the first argument)+the playervault of the management of the first argument). Afterthat, \n    - the manvault of the first argument will be updated to 0.\n  - the management of the first argument will be updated to caller.\n  When the first argument is greater than 0, and the first argument is smaller than 6, and the ether just received (i.e., msg.value) is not smaller than the price of the first argument, and ((the ether just received (i.e., msg.value)/2)+the manvault of the first argument) is not smaller than the manvault of the first argument, and ((the ether just received (i.e., msg.value)/4)+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to ((the ether just received (i.e., msg.value)/4)+totalSupply2).\n  When the first argument is greater than 0, and the first argument is smaller than 6, and the ether just received (i.e., msg.value) is not smaller than the price of the first argument, and ((the ether just received (i.e., msg.value)/2)+the manvault of the first argument) is not smaller than the manvault of the first argument, and ((the ether just received (i.e., msg.value)/4)+totalSupply2) is not smaller than totalSupply2, and ((the ether just received (i.e., msg.value)/4)+the playervault of the management of the address) is not smaller than the playervault of the management of the address:\n  - the playervault of the management of the address will be updated to ((the ether just received (i.e., msg.value)/4)+the playervault of the management of the address).\n  When the first argument is greater than 0, and the first argument is smaller than 6, and the ether just received (i.e., msg.value) is not smaller than the price of the first argument, and ((the ether just received (i.e., msg.value)/2)+the manvault of the first argument) is not smaller than the manvault of the first argument, and ((the ether just received (i.e., msg.value)/4)+totalSupply2) is not smaller than totalSupply2, and ((the ether just received (i.e., msg.value)/4)+the playervault of the management of the address) is not smaller than the playervault of the management of the address, and the price of the first argument is greater than 0, and ((21*the price of the first argument)/the price of the first argument) equals to 21:\n  - the price of the first argument will be updated to ((21*the price of the first argument)/10).\n\nFor the function PendinglinesToLines.\n  When totalSupply15 is greater than 1000:\n  - the state variable totalSupply15 will be updated to 0.\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot:\n  - the state variable cheatlinepot will be updated to ((totalSupply15/25)+cheatlinepot).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale:\n  - the state variable cheatlinepotwhale will be updated to ((totalSupply15/25)+cheatlinepotwhale).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot:\n  - the state variable arbitragepot will be updated to ((totalSupply15/25)+arbitragepot).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky:\n  - the state variable arbitragepotrisky will be updated to ((totalSupply15/25)+arbitragepotrisky).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31:\n  - the state variable s_31 will be updated to ((totalSupply15/25)+s_31).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale:\n  - the state variable poiopotwhale will be updated to ((totalSupply15/25)+poiopotwhale).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35:\n  - the state variable s_35 will be updated to ((totalSupply15/25)+s_35).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35, and ((totalSupply15/25)+s_37) is not smaller than s_37:\n  - the state variable s_37 will be updated to ((totalSupply15/25)+s_37).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35, and ((totalSupply15/25)+s_37) is not smaller than s_37, and ((totalSupply15/25)+randompot) is not smaller than randompot:\n  - the state variable randompot will be updated to ((totalSupply15/25)+randompot).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35, and ((totalSupply15/25)+s_37) is not smaller than s_37, and ((totalSupply15/25)+randompot) is not smaller than randompot, and ((totalSupply15/25)+randompotwhale) is not smaller than randompotwhale:\n  - the state variable randompotwhale will be updated to ((totalSupply15/25)+randompotwhale).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35, and ((totalSupply15/25)+s_37) is not smaller than s_37, and ((totalSupply15/25)+randompot) is not smaller than randompot, and ((totalSupply15/25)+randompotwhale) is not smaller than randompotwhale, and ((totalSupply15/25)+totalSupply6) is not smaller than totalSupply6:\n  - the state variable totalSupply6 will be updated to ((totalSupply15/25)+totalSupply6).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35, and ((totalSupply15/25)+s_37) is not smaller than s_37, and ((totalSupply15/25)+randompot) is not smaller than randompot, and ((totalSupply15/25)+randompotwhale) is not smaller than randompotwhale, and ((totalSupply15/25)+totalSupply6) is not smaller than totalSupply6, and ((totalSupply15/25)+totalSupply11) is not smaller than totalSupply11:\n  - the state variable totalSupply11 will be updated to ((totalSupply15/25)+totalSupply11).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35, and ((totalSupply15/25)+s_37) is not smaller than s_37, and ((totalSupply15/25)+randompot) is not smaller than randompot, and ((totalSupply15/25)+randompotwhale) is not smaller than randompotwhale, and ((totalSupply15/25)+totalSupply6) is not smaller than totalSupply6, and ((totalSupply15/25)+totalSupply11) is not smaller than totalSupply11, and ((totalSupply15/25)+badoddspot) is not smaller than badoddspot:\n  - the state variable badoddspot will be updated to ((totalSupply15/25)+badoddspot).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35, and ((totalSupply15/25)+s_37) is not smaller than s_37, and ((totalSupply15/25)+randompot) is not smaller than randompot, and ((totalSupply15/25)+randompotwhale) is not smaller than randompotwhale, and ((totalSupply15/25)+totalSupply6) is not smaller than totalSupply6, and ((totalSupply15/25)+totalSupply11) is not smaller than totalSupply11, and ((totalSupply15/25)+badoddspot) is not smaller than badoddspot, and ((totalSupply15/25)+snip3dpot) is not smaller than snip3dpot:\n  - the state variable snip3dpot will be updated to ((totalSupply15/25)+snip3dpot).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35, and ((totalSupply15/25)+s_37) is not smaller than s_37, and ((totalSupply15/25)+randompot) is not smaller than randompot, and ((totalSupply15/25)+randompotwhale) is not smaller than randompotwhale, and ((totalSupply15/25)+totalSupply6) is not smaller than totalSupply6, and ((totalSupply15/25)+totalSupply11) is not smaller than totalSupply11, and ((totalSupply15/25)+badoddspot) is not smaller than badoddspot, and ((totalSupply15/25)+snip3dpot) is not smaller than snip3dpot, and ((totalSupply15/25)+slaughter3dpot) is not smaller than slaughter3dpot:\n  - the state variable slaughter3dpot will be updated to ((totalSupply15/25)+slaughter3dpot).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35, and ((totalSupply15/25)+s_37) is not smaller than s_37, and ((totalSupply15/25)+randompot) is not smaller than randompot, and ((totalSupply15/25)+randompotwhale) is not smaller than randompotwhale, and ((totalSupply15/25)+totalSupply6) is not smaller than totalSupply6, and ((totalSupply15/25)+totalSupply11) is not smaller than totalSupply11, and ((totalSupply15/25)+badoddspot) is not smaller than badoddspot, and ((totalSupply15/25)+snip3dpot) is not smaller than snip3dpot, and ((totalSupply15/25)+slaughter3dpot) is not smaller than slaughter3dpot, and ((totalSupply15/25)+ethrollbank) is not smaller than ethrollbank:\n  - the state variable ethrollbank will be updated to ((totalSupply15/25)+ethrollbank).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35, and ((totalSupply15/25)+s_37) is not smaller than s_37, and ((totalSupply15/25)+randompot) is not smaller than randompot, and ((totalSupply15/25)+randompotwhale) is not smaller than randompotwhale, and ((totalSupply15/25)+totalSupply6) is not smaller than totalSupply6, and ((totalSupply15/25)+totalSupply11) is not smaller than totalSupply11, and ((totalSupply15/25)+badoddspot) is not smaller than badoddspot, and ((totalSupply15/25)+snip3dpot) is not smaller than snip3dpot, and ((totalSupply15/25)+slaughter3dpot) is not smaller than slaughter3dpot, and ((totalSupply15/25)+ethrollbank) is not smaller than ethrollbank, and ((totalSupply15/25)+ethstuckonplinc) is not smaller than ethstuckonplinc:\n  - the state variable ethstuckonplinc will be updated to ((totalSupply15/25)+ethstuckonplinc).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35, and ((totalSupply15/25)+s_37) is not smaller than s_37, and ((totalSupply15/25)+randompot) is not smaller than randompot, and ((totalSupply15/25)+randompotwhale) is not smaller than randompotwhale, and ((totalSupply15/25)+totalSupply6) is not smaller than totalSupply6, and ((totalSupply15/25)+totalSupply11) is not smaller than totalSupply11, and ((totalSupply15/25)+badoddspot) is not smaller than badoddspot, and ((totalSupply15/25)+snip3dpot) is not smaller than snip3dpot, and ((totalSupply15/25)+slaughter3dpot) is not smaller than slaughter3dpot, and ((totalSupply15/25)+ethrollbank) is not smaller than ethrollbank, and ((totalSupply15/25)+ethstuckonplinc) is not smaller than ethstuckonplinc, and ((totalSupply15/25)+plincgiverofeth) is not smaller than plincgiverofeth:\n  - the state variable plincgiverofeth will be updated to ((totalSupply15/25)+plincgiverofeth).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35, and ((totalSupply15/25)+s_37) is not smaller than s_37, and ((totalSupply15/25)+randompot) is not smaller than randompot, and ((totalSupply15/25)+randompotwhale) is not smaller than randompotwhale, and ((totalSupply15/25)+totalSupply6) is not smaller than totalSupply6, and ((totalSupply15/25)+totalSupply11) is not smaller than totalSupply11, and ((totalSupply15/25)+badoddspot) is not smaller than badoddspot, and ((totalSupply15/25)+snip3dpot) is not smaller than snip3dpot, and ((totalSupply15/25)+slaughter3dpot) is not smaller than slaughter3dpot, and ((totalSupply15/25)+ethrollbank) is not smaller than ethrollbank, and ((totalSupply15/25)+ethstuckonplinc) is not smaller than ethstuckonplinc, and ((totalSupply15/25)+plincgiverofeth) is not smaller than plincgiverofeth, and ((totalSupply15/25)+vaultsmall) is not smaller than vaultsmall:\n  - the state variable vaultsmall will be updated to ((totalSupply15/25)+vaultsmall).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35, and ((totalSupply15/25)+s_37) is not smaller than s_37, and ((totalSupply15/25)+randompot) is not smaller than randompot, and ((totalSupply15/25)+randompotwhale) is not smaller than randompotwhale, and ((totalSupply15/25)+totalSupply6) is not smaller than totalSupply6, and ((totalSupply15/25)+totalSupply11) is not smaller than totalSupply11, and ((totalSupply15/25)+badoddspot) is not smaller than badoddspot, and ((totalSupply15/25)+snip3dpot) is not smaller than snip3dpot, and ((totalSupply15/25)+slaughter3dpot) is not smaller than slaughter3dpot, and ((totalSupply15/25)+ethrollbank) is not smaller than ethrollbank, and ((totalSupply15/25)+ethstuckonplinc) is not smaller than ethstuckonplinc, and ((totalSupply15/25)+plincgiverofeth) is not smaller than plincgiverofeth, and ((totalSupply15/25)+vaultsmall) is not smaller than vaultsmall, and ((totalSupply15/25)+totalSupply1) is not smaller than totalSupply1:\n  - the state variable totalSupply1 will be updated to ((totalSupply15/25)+totalSupply1).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35, and ((totalSupply15/25)+s_37) is not smaller than s_37, and ((totalSupply15/25)+randompot) is not smaller than randompot, and ((totalSupply15/25)+randompotwhale) is not smaller than randompotwhale, and ((totalSupply15/25)+totalSupply6) is not smaller than totalSupply6, and ((totalSupply15/25)+totalSupply11) is not smaller than totalSupply11, and ((totalSupply15/25)+badoddspot) is not smaller than badoddspot, and ((totalSupply15/25)+snip3dpot) is not smaller than snip3dpot, and ((totalSupply15/25)+slaughter3dpot) is not smaller than slaughter3dpot, and ((totalSupply15/25)+ethrollbank) is not smaller than ethrollbank, and ((totalSupply15/25)+ethstuckonplinc) is not smaller than ethstuckonplinc, and ((totalSupply15/25)+plincgiverofeth) is not smaller than plincgiverofeth, and ((totalSupply15/25)+vaultsmall) is not smaller than vaultsmall, and ((totalSupply15/25)+totalSupply1) is not smaller than totalSupply1, and ((totalSupply15/25)+vaultlarge) is not smaller than vaultlarge:\n  - the state variable vaultlarge will be updated to ((totalSupply15/25)+vaultlarge).\n  When totalSupply15 is greater than 1000, and ((totalSupply15/25)+cheatlinepot) is not smaller than cheatlinepot, and ((totalSupply15/25)+cheatlinepotwhale) is not smaller than cheatlinepotwhale, and ((totalSupply15/25)+arbitragepot) is not smaller than arbitragepot, and ((totalSupply15/25)+arbitragepotrisky) is not smaller than arbitragepotrisky, and ((totalSupply15/25)+s_31) is not smaller than s_31, and ((totalSupply15/25)+poiopotwhale) is not smaller than poiopotwhale, and ((totalSupply15/25)+s_35) is not smaller than s_35, and ((totalSupply15/25)+s_37) is not smaller than s_37, and ((totalSupply15/25)+randompot) is not smaller than randompot, and ((totalSupply15/25)+randompotwhale) is not smaller than randompotwhale, and ((totalSupply15/25)+totalSupply6) is not smaller than totalSupply6, and ((totalSupply15/25)+totalSupply11) is not smaller than totalSupply11, and ((totalSupply15/25)+badoddspot) is not smaller than badoddspot, and ((totalSupply15/25)+snip3dpot) is not smaller than snip3dpot, and ((totalSupply15/25)+slaughter3dpot) is not smaller than slaughter3dpot, and ((totalSupply15/25)+ethrollbank) is not smaller than ethrollbank, and ((totalSupply15/25)+ethstuckonplinc) is not smaller than ethstuckonplinc, and ((totalSupply15/25)+plincgiverofeth) is not smaller than plincgiverofeth, and ((totalSupply15/25)+vaultsmall) is not smaller than vaultsmall, and ((totalSupply15/25)+totalSupply1) is not smaller than totalSupply1, and ((totalSupply15/25)+vaultlarge) is not smaller than vaultlarge, and (totalSupply15/25) is greater than 0, and ((4*(totalSupply15/25))/(totalSupply15/25)) equals to 4, and ((4*(totalSupply15/25))+vaultdrip) is not smaller than vaultdrip:\n  - the state variable vaultdrip will be updated to ((4*(totalSupply15/25))+vaultdrip).\n\nFor the payable function playProofOfEthRolls, it has one argument and its type is uint256.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and ((100*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 100, and the first argument is greater than 0, and the first argument is greater than 0, and for ORIGIN, and ((100*the ether just received (i.e., msg.value))/the first argument) is not greater than ethrollbank, and the first argument is smaller than 100, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) is not smaller than (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) MOD 100 is not smaller than the first argument:\n  - the state variable totalSupply12 will be updated to (1+totalSupply12).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and ((100*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 100, and the first argument is greater than 0, and the first argument is greater than 0, and for ORIGIN, and ((100*the ether just received (i.e., msg.value))/the first argument) is not greater than ethrollbank, and the first argument is smaller than 100, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) is not smaller than (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) MOD 100 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller:\n  - the balance2 of caller will be updated to (the ether just received (i.e., msg.value)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and ((100*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 100, and the first argument is greater than 0, and the first argument is greater than 0, and for ORIGIN, and ((100*the ether just received (i.e., msg.value))/the first argument) is not greater than ethrollbank, and the first argument is smaller than 100, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) is not smaller than (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) MOD 100 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7:\n  - the state variable totalSupply7 will be updated to (the ether just received (i.e., msg.value)+totalSupply7).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and ((100*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 100, and the first argument is greater than 0, and the first argument is greater than 0, and for ORIGIN, and ((100*the ether just received (i.e., msg.value))/the first argument) is not greater than ethrollbank, and the first argument is smaller than 100, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) is not smaller than (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) MOD 100 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and ((the ether just received (i.e., msg.value)/100)+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to ((the ether just received (i.e., msg.value)/100)+totalSupply2).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and ((100*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 100, and the first argument is greater than 0, and the first argument is greater than 0, and for ORIGIN, and ((100*the ether just received (i.e., msg.value))/the first argument) is not greater than ethrollbank, and the first argument is smaller than 100, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) is not smaller than (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) MOD 100 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and ((the ether just received (i.e., msg.value)/100)+totalSupply2) is not smaller than totalSupply2, and (the ether just received (i.e., msg.value)/100) is greater than 0, and ((99*(the ether just received (i.e., msg.value)/100))/(the ether just received (i.e., msg.value)/100)) equals to 99, and ((99*(the ether just received (i.e., msg.value)/100))+ethrollbank) is not smaller than ethrollbank:\n  - the state variable ethrollbank will be updated to ((99*(the ether just received (i.e., msg.value)/100))+ethrollbank).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0:\n  - the tokenURI from caller to 1 will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and ((100*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 100, and the first argument is greater than 0, and the first argument is greater than 0, and for ORIGIN, and ((100*the ether just received (i.e., msg.value))/the first argument) is not greater than ethrollbank, and the first argument is smaller than 100, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) is not smaller than (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) MOD 100 is smaller than the first argument:\n  - the state variable ethrollbank will be updated to (ethrollbank-((100*the ether just received (i.e., msg.value))/the first argument)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and ((100*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 100, and the first argument is greater than 0, and the first argument is greater than 0, and for ORIGIN, and ((100*the ether just received (i.e., msg.value))/the first argument) is not greater than ethrollbank, and the first argument is smaller than 100, and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) is not smaller than (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)), and (totalSupply12+(current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) MOD 100 is smaller than the first argument, and (((100*the ether just received (i.e., msg.value))/the first argument)+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to (((100*the ether just received (i.e., msg.value))/the first argument)+the pendingfills of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller).\n\nFor the payable function buyBonds, it has 2 arguments and the type of each argument is as follows: address, address.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the tokenURI from the second argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the second argument to 1)*the balance2 of the second argument)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and the second argument is greater than 0, and (the ether just received (i.e., msg.value)/100) is greater than 0, and ((5*(the ether just received (i.e., msg.value)/100))/(the ether just received (i.e., msg.value)/100)) equals to 5:\n  - it calls an external function buy of 0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe with ether valued valued (5*(the ether just received (i.e., msg.value)/100)) and the first argument.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the tokenURI from the second argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the second argument to 1)*the balance2 of the second argument)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and the second argument is greater than 0, and (the ether just received (i.e., msg.value)/100) is greater than 0, and ((5*(the ether just received (i.e., msg.value)/100))/(the ether just received (i.e., msg.value)/100)) equals to 5, and RETURNDATASIZE is not smaller than 32, and the ether just received (i.e., msg.value) is greater than 0, and ((11*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 11, and (((11*the ether just received (i.e., msg.value))/10)+the balance2 of caller) is not smaller than the balance2 of caller:\n  - the balance2 of caller will be updated to (((11*the ether just received (i.e., msg.value))/10)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the tokenURI from the second argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the second argument to 1)*the balance2 of the second argument)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and the second argument is greater than 0, and (the ether just received (i.e., msg.value)/100) is greater than 0, and ((5*(the ether just received (i.e., msg.value)/100))/(the ether just received (i.e., msg.value)/100)) equals to 5, and RETURNDATASIZE is not smaller than 32, and the ether just received (i.e., msg.value) is greater than 0, and ((11*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 11, and (((11*the ether just received (i.e., msg.value))/10)+the balance2 of caller) is not smaller than the balance2 of caller, and ((2*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 2, and (((2*the ether just received (i.e., msg.value))/100)+the balance2 of the second argument) is not smaller than the balance2 of the second argument:\n  - the balance2 of the second argument will be updated to (((2*the ether just received (i.e., msg.value))/100)+the balance2 of the second argument).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the tokenURI from the second argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the second argument to 1)*the balance2 of the second argument)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and the second argument is greater than 0, and (the ether just received (i.e., msg.value)/100) is greater than 0, and ((5*(the ether just received (i.e., msg.value)/100))/(the ether just received (i.e., msg.value)/100)) equals to 5, and RETURNDATASIZE is not smaller than 32, and the ether just received (i.e., msg.value) is greater than 0, and ((11*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 11, and (((11*the ether just received (i.e., msg.value))/10)+the balance2 of caller) is not smaller than the balance2 of caller, and ((2*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 2, and (((2*the ether just received (i.e., msg.value))/100)+the balance2 of the second argument) is not smaller than the balance2 of the second argument, and (((2*the ether just received (i.e., msg.value))/100)+((11*the ether just received (i.e., msg.value))/10)) is not smaller than ((11*the ether just received (i.e., msg.value))/10), and ((((2*the ether just received (i.e., msg.value))/100)+((11*the ether just received (i.e., msg.value))/10))+totalSupply7) is not smaller than totalSupply7:\n  - the state variable totalSupply7 will be updated to ((((2*the ether just received (i.e., msg.value))/100)+((11*the ether just received (i.e., msg.value))/10))+totalSupply7).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the tokenURI from the second argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the second argument to 1)*the balance2 of the second argument)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and the second argument is greater than 0, and (the ether just received (i.e., msg.value)/100) is greater than 0, and ((5*(the ether just received (i.e., msg.value)/100))/(the ether just received (i.e., msg.value)/100)) equals to 5, and RETURNDATASIZE is not smaller than 32, and the ether just received (i.e., msg.value) is greater than 0, and ((11*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 11, and (((11*the ether just received (i.e., msg.value))/10)+the balance2 of caller) is not smaller than the balance2 of caller, and ((2*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 2, and (((2*the ether just received (i.e., msg.value))/100)+the balance2 of the second argument) is not smaller than the balance2 of the second argument, and (((2*the ether just received (i.e., msg.value))/100)+((11*the ether just received (i.e., msg.value))/10)) is not smaller than ((11*the ether just received (i.e., msg.value))/10), and ((((2*the ether just received (i.e., msg.value))/100)+((11*the ether just received (i.e., msg.value))/10))+totalSupply7) is not smaller than totalSupply7, and ((95*(the ether just received (i.e., msg.value)/100))/(the ether just received (i.e., msg.value)/100)) equals to 95, and ((95*(the ether just received (i.e., msg.value)/100))+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to ((95*(the ether just received (i.e., msg.value)/100))+totalSupply2).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the tokenURI from the second argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the second argument to 1)*the balance2 of the second argument)/pointmultiplier) is not greater than 0:\n  - the tokenURI from caller to 1 will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the tokenURI from the second argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the second argument to 1)*the balance2 of the second argument)/pointmultiplier) is not greater than 0, and the ether just received (i.e., msg.value) is greater than 0, and the second argument is greater than 0, and (the ether just received (i.e., msg.value)/100) is greater than 0, and ((5*(the ether just received (i.e., msg.value)/100))/(the ether just received (i.e., msg.value)/100)) equals to 5, and RETURNDATASIZE is not smaller than 32, and the ether just received (i.e., msg.value) is greater than 0, and ((11*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 11, and (((11*the ether just received (i.e., msg.value))/10)+the balance2 of caller) is not smaller than the balance2 of caller, and ((2*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 2, and (((2*the ether just received (i.e., msg.value))/100)+the balance2 of the second argument) is not smaller than the balance2 of the second argument, and (((2*the ether just received (i.e., msg.value))/100)+((11*the ether just received (i.e., msg.value))/10)) is not smaller than ((11*the ether just received (i.e., msg.value))/10), and ((((2*the ether just received (i.e., msg.value))/100)+((11*the ether just received (i.e., msg.value))/10))+totalSupply7) is not smaller than totalSupply7, and ((95*(the ether just received (i.e., msg.value)/100))/(the ether just received (i.e., msg.value)/100)) equals to 95, and ((95*(the ether just received (i.e., msg.value)/100))+totalSupply2) is not smaller than totalSupply2, and the playerid of caller is 0:\n  - the playerid of caller will be updated to nextplayerid. Afterthat, \n    - the state variable nextplayerid will be updated to (1+nextplayerid).\n  - the idtoadress of nextplayerid will be updated to caller.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the tokenURI from the second argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the second argument to 1)*the balance2 of the second argument)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from the second argument to 1)*the balance2 of the second argument)/pointmultiplier) is not greater than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from the second argument to 1)*the balance2 of the second argument)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than 0, and the tokenURI from the second argument to 1 is not greater than totaldividendpoints, and (((totaldividendpoints-the tokenURI from the second argument to 1)*the balance2 of the second argument)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from the second argument to 1)*the balance2 of the second argument)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from the second argument to 1)*the balance2 of the second argument)/pointmultiplier)+the pendingfills of the second argument) is not smaller than the pendingfills of the second argument:\n  - the pendingfills of the second argument will be updated to ((((totaldividendpoints-the tokenURI from the second argument to 1)*the balance2 of the second argument)/pointmultiplier)+the pendingfills of the second argument).\n\nFor the payable function playProofOfRediculousBadOdds, it has one argument and its type is uint256.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends:\n  - the state variable unclaimeddividends will be updated to (unclaimeddividends-(((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller:\n  - the pendingfills of caller will be updated to ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller). Afterthat, \n    - the tokenURI from caller to 1 will be updated to 0.\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller, and for ORIGIN, and the first argument is greater than 0, and ((0x5af3107a4000*the first argument)/the first argument) equals to 0x5af3107a4000, and the ether just received (i.e., msg.value) is not smaller than (0x5af3107a4000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (0xf4240+totalSupply12) is not smaller than totalSupply12, and (0xf4240+totalSupply12) is not smaller than (0xf4240+totalSupply12), and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (0xf4240+totalSupply12) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (0xf4240+totalSupply12), and 1 is smaller than the first argument, and (1+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (1+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (1+(0xf4240+totalSupply12)), and 2 is smaller than the first argument, and (2+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (2+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (2+(0xf4240+totalSupply12)), and 3 is smaller than the first argument, and (3+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (3+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (3+(0xf4240+totalSupply12)), and 4 is smaller than the first argument, and (4+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (4+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (4+(0xf4240+totalSupply12)), and 5 is smaller than the first argument, and (5+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (5+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (5+(0xf4240+totalSupply12)), and 6 is smaller than the first argument, and (6+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (6+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (6+(0xf4240+totalSupply12)), and 7 is smaller than the first argument, and (7+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (7+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (7+(0xf4240+totalSupply12)), and 8 is smaller than the first argument, and (8+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (8+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (8+(0xf4240+totalSupply12)), and 9 is smaller than the first argument, and (9+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (9+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (9+(0xf4240+totalSupply12)), and 10 is smaller than the first argument, and (10+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (10+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (10+(0xf4240+totalSupply12)), and 11 is smaller than the first argument, and (11+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (11+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (11+(0xf4240+totalSupply12)), and 12 is smaller than the first argument, and (12+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (12+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (12+(0xf4240+totalSupply12)), and 13 is smaller than the first argument, and (13+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (13+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (13+(0xf4240+totalSupply12)), and 14 is smaller than the first argument, and (14+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (14+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (14+(0xf4240+totalSupply12)), and 15 is smaller than the first argument, and (15+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (15+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (15+(0xf4240+totalSupply12)), and 16 is smaller than the first argument, and (16+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (16+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (16+(0xf4240+totalSupply12)), and 17 is smaller than the first argument, and (17+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (17+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (17+(0xf4240+totalSupply12)), and 18 is smaller than the first argument, and (18+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (18+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (18+(0xf4240+totalSupply12)), and 19 is smaller than the first argument, and (19+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (19+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (19+(0xf4240+totalSupply12)), and 20 is not smaller than the first argument:\n  - the state variable totalSupply12 will be updated to (20+totalSupply12).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller, and for ORIGIN, and the first argument is greater than 0, and ((0x5af3107a4000*the first argument)/the first argument) equals to 0x5af3107a4000, and the ether just received (i.e., msg.value) is not smaller than (0x5af3107a4000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (0xf4240+totalSupply12) is not smaller than totalSupply12, and (0xf4240+totalSupply12) is not smaller than (0xf4240+totalSupply12), and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (0xf4240+totalSupply12) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (0xf4240+totalSupply12), and 1 is smaller than the first argument, and (1+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (1+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (1+(0xf4240+totalSupply12)), and 2 is smaller than the first argument, and (2+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (2+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (2+(0xf4240+totalSupply12)), and 3 is smaller than the first argument, and (3+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (3+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (3+(0xf4240+totalSupply12)), and 4 is smaller than the first argument, and (4+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (4+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (4+(0xf4240+totalSupply12)), and 5 is smaller than the first argument, and (5+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (5+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (5+(0xf4240+totalSupply12)), and 6 is smaller than the first argument, and (6+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (6+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (6+(0xf4240+totalSupply12)), and 7 is smaller than the first argument, and (7+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (7+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (7+(0xf4240+totalSupply12)), and 8 is smaller than the first argument, and (8+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (8+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (8+(0xf4240+totalSupply12)), and 9 is smaller than the first argument, and (9+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (9+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (9+(0xf4240+totalSupply12)), and 10 is smaller than the first argument, and (10+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (10+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (10+(0xf4240+totalSupply12)), and 11 is smaller than the first argument, and (11+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (11+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (11+(0xf4240+totalSupply12)), and 12 is smaller than the first argument, and (12+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (12+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (12+(0xf4240+totalSupply12)), and 13 is smaller than the first argument, and (13+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (13+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (13+(0xf4240+totalSupply12)), and 14 is smaller than the first argument, and (14+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (14+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (14+(0xf4240+totalSupply12)), and 15 is smaller than the first argument, and (15+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (15+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (15+(0xf4240+totalSupply12)), and 16 is smaller than the first argument, and (16+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (16+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (16+(0xf4240+totalSupply12)), and 17 is smaller than the first argument, and (17+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (17+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (17+(0xf4240+totalSupply12)), and 18 is smaller than the first argument, and (18+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (18+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (18+(0xf4240+totalSupply12)), and 19 is smaller than the first argument, and (19+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (19+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (19+(0xf4240+totalSupply12)), and 20 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller:\n  - the balance2 of caller will be updated to (the ether just received (i.e., msg.value)+the balance2 of caller).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller, and for ORIGIN, and the first argument is greater than 0, and ((0x5af3107a4000*the first argument)/the first argument) equals to 0x5af3107a4000, and the ether just received (i.e., msg.value) is not smaller than (0x5af3107a4000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (0xf4240+totalSupply12) is not smaller than totalSupply12, and (0xf4240+totalSupply12) is not smaller than (0xf4240+totalSupply12), and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (0xf4240+totalSupply12) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (0xf4240+totalSupply12), and 1 is smaller than the first argument, and (1+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (1+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (1+(0xf4240+totalSupply12)), and 2 is smaller than the first argument, and (2+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (2+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (2+(0xf4240+totalSupply12)), and 3 is smaller than the first argument, and (3+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (3+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (3+(0xf4240+totalSupply12)), and 4 is smaller than the first argument, and (4+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (4+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (4+(0xf4240+totalSupply12)), and 5 is smaller than the first argument, and (5+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (5+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (5+(0xf4240+totalSupply12)), and 6 is smaller than the first argument, and (6+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (6+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (6+(0xf4240+totalSupply12)), and 7 is smaller than the first argument, and (7+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (7+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (7+(0xf4240+totalSupply12)), and 8 is smaller than the first argument, and (8+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (8+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (8+(0xf4240+totalSupply12)), and 9 is smaller than the first argument, and (9+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (9+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (9+(0xf4240+totalSupply12)), and 10 is smaller than the first argument, and (10+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (10+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (10+(0xf4240+totalSupply12)), and 11 is smaller than the first argument, and (11+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (11+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (11+(0xf4240+totalSupply12)), and 12 is smaller than the first argument, and (12+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (12+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (12+(0xf4240+totalSupply12)), and 13 is smaller than the first argument, and (13+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (13+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (13+(0xf4240+totalSupply12)), and 14 is smaller than the first argument, and (14+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (14+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (14+(0xf4240+totalSupply12)), and 15 is smaller than the first argument, and (15+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (15+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (15+(0xf4240+totalSupply12)), and 16 is smaller than the first argument, and (16+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (16+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (16+(0xf4240+totalSupply12)), and 17 is smaller than the first argument, and (17+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (17+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (17+(0xf4240+totalSupply12)), and 18 is smaller than the first argument, and (18+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (18+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (18+(0xf4240+totalSupply12)), and 19 is smaller than the first argument, and (19+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (19+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (19+(0xf4240+totalSupply12)), and 20 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7:\n  - the state variable totalSupply7 will be updated to (the ether just received (i.e., msg.value)+totalSupply7).\n  When the tokenURI from caller to 1 is not greater than totaldividendpoints, and pointmultiplier is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is greater than 0, and (((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier) is not greater than unclaimeddividends, and ((((totaldividendpoints-the tokenURI from caller to 1)*the balance2 of caller)/pointmultiplier)+the pendingfills of caller) is not smaller than the pendingfills of caller, and for ORIGIN, and the first argument is greater than 0, and ((0x5af3107a4000*the first argument)/the first argument) equals to 0x5af3107a4000, and the ether just received (i.e., msg.value) is not smaller than (0x5af3107a4000*the first argument), and the first argument is greater than 0, and 0 is smaller than the first argument, and (0xf4240+totalSupply12) is not smaller than totalSupply12, and (0xf4240+totalSupply12) is not smaller than (0xf4240+totalSupply12), and (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) is not smaller than BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), and (0xf4240+totalSupply12) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (0xf4240+totalSupply12), and 1 is smaller than the first argument, and (1+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (1+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (1+(0xf4240+totalSupply12)), and 2 is smaller than the first argument, and (2+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (2+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (2+(0xf4240+totalSupply12)), and 3 is smaller than the first argument, and (3+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (3+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (3+(0xf4240+totalSupply12)), and 4 is smaller than the first argument, and (4+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (4+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (4+(0xf4240+totalSupply12)), and 5 is smaller than the first argument, and (5+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (5+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (5+(0xf4240+totalSupply12)), and 6 is smaller than the first argument, and (6+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (6+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (6+(0xf4240+totalSupply12)), and 7 is smaller than the first argument, and (7+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (7+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (7+(0xf4240+totalSupply12)), and 8 is smaller than the first argument, and (8+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (8+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (8+(0xf4240+totalSupply12)), and 9 is smaller than the first argument, and (9+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (9+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (9+(0xf4240+totalSupply12)), and 10 is smaller than the first argument, and (10+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (10+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (10+(0xf4240+totalSupply12)), and 11 is smaller than the first argument, and (11+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (11+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (11+(0xf4240+totalSupply12)), and 12 is smaller than the first argument, and (12+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (12+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (12+(0xf4240+totalSupply12)), and 13 is smaller than the first argument, and (13+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (13+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (13+(0xf4240+totalSupply12)), and 14 is smaller than the first argument, and (14+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (14+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (14+(0xf4240+totalSupply12)), and 15 is smaller than the first argument, and (15+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (15+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (15+(0xf4240+totalSupply12)), and 16 is smaller than the first argument, and (16+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (16+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (16+(0xf4240+totalSupply12)), and 17 is smaller than the first argument, and (17+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (17+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (17+(0xf4240+totalSupply12)), and 18 is smaller than the first argument, and (18+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (18+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (18+(0xf4240+totalSupply12)), and 19 is smaller than the first argument, and (19+(0xf4240+totalSupply12)) is not smaller than (0xf4240+totalSupply12), and (19+(0xf4240+totalSupply12)) is greater than 0, and 1 does not equal to (current time+BLOCKHASH (the current block's number+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) MOD (19+(0xf4240+totalSupply12)), and 20 is not smaller than the first argument, and (the ether just received (i.e., msg.value)+the balance2 of caller) is not smaller than the balance2 of caller, and (the ether just received (i.e., msg.value)+totalSupply7) is not smaller than totalSupply7, and (the ether just received (i.e., msg.value)+totalSupply2) is not smaller than totalSupply2:\n  - the state variable totalSupply2 will be updated to (the ether just received (i.e., msg.value)+totalSupply2).\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 50519 tokens. Please reduce the length of the messages."
}