{
	"address": "0x6bfd14b85d863408fc2df06cc4f9808d36930fa3",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity version of the contract:\n\n```Solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    uint256 private _totalSupply;\n    mapping (address => uint256) private _balanceOf;\n    string private _name;\n    string private _symbol;\n    uint256 private _decimals;\n    uint256 private _iNITIAL_SUPPLY;\n    address private _owner;\n\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n    event Buy(address indexed buyer, uint256 amount, uint256 value);\n\n    constructor(string memory name, string memory symbol, uint256 decimals, uint256 initialSupply, address owner) {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n        _iNITIAL_SUPPLY = initialSupply;\n        _owner = owner;\n        _totalSupply = initialSupply;\n        _balanceOf[owner] = initialSupply;\n    }\n\n    function name() public view returns (string memory) { \n        return _name;\n    }\n\n    function totalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n\n    function INITIAL_SUPPLY() public view returns (uint256) { \n        return _iNITIAL_SUPPLY;\n    }\n\n    function decimals() public view returns (uint256) { \n        return _decimals;\n    }\n\n    function balanceOf(address account) public view returns (uint256) { \n        return _balanceOf[account];\n    }\n\n    function owner() public view returns (address) { \n        return _owner;\n    }\n\n    function symbol() public view returns (string memory) { \n        return _symbol;\n    }\n\n    function transfer(address to, uint256 value) public returns(bool) { \n        require(_balanceOf[msg.sender] >= value, \"Insufficient balance\");\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value, \"\");\n        return true;\n    }\n\n    function transfer(address to, uint256 value, bytes memory data) public returns(bool) { \n        require(_balanceOf[msg.sender] >= value, \"Insufficient balance\");\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value, data);\n        return true;\n    }\n    \n    function buy() public payable {\n        uint256 amount = msg.value / 10000;\n        require(_balanceOf[_owner] >= amount, \"Insufficient tokens in contract\");\n        _balanceOf[_owner] -= amount;\n        _balanceOf[msg.sender] += amount;\n        emit Transfer(_owner, msg.sender, amount, \"\");\n        emit Buy(msg.sender, amount, msg.value);\n    }\n}\n```\nPlease note that the `_SafeSub` and `_SafeAdd` functions are replaced by the built-in `-=`, `+=`, and `require` statements in Solidity to check for underflows and overflows. Also, the `__function_selector__` is not needed because function calls are directly handled by the Ethereum Virtual Machine (EVM) in Solidity.",
				"role": "assistant"
			}
		}
	],
	"created": 1701469057,
	"id": "chatcmpl-8R67FjE0LhzzOHqomKK4ZCAhLyFSx",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.13 06:27 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nuint256[] _name; // STORAGE[0x2]\nuint256[] _symbol; // STORAGE[0x3]\nuint256 _decimals; // STORAGE[0x4]\nuint256 _iNITIAL_SUPPLY; // STORAGE[0x5]\nuint160 _owner; // STORAGE[0x6] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256, bytes);\nBuy(address, uint256, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction INITIAL_SUPPLY() public nonPayable { \n    return _iNITIAL_SUPPLY;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = _SafeSub(varg1, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v1;\n    if (varg0.code.size > 0) {\n        v2 = new array[](0);\n        v3 = v4 = 0;\n        while (v3 < 0) {\n            MEM[v2.data + v3] = MEM[32 + MEM[64] + v3];\n            v3 += 32;\n        }\n        v5 = v6 = v2.data;\n        if (0) {\n            MEM[v2.data] = ~0x0 & MEM[v2.data];\n        }\n        require(varg0.code.size);\n        v7 = varg0.tokenFallback(msg.sender, varg1, v2).gas(msg.gas - 710);\n        require(v7);\n    }\n    v8 = v9 = v9.data;\n    v10 = v11 = 0;\n    v12 = v13 = 32 + MEM[64];\n    while (v10 >= 32) {\n        MEM[v8] = MEM[v12];\n        v10 = v10 + ~31;\n        v8 += 32;\n        v12 += 32;\n    }\n    MEM[v8] = MEM[v8] & 256 ** (32 - v10) - 1 | MEM[v12] & ~(256 ** (32 - v10) - 1);\n    emit Transfer(msg.sender, varg0, keccak256(MEM[(v9.data) len 0]), varg1);\n}\n\nfunction transfer(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = _SafeSub(varg1, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v1;\n    v2 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v2;\n    if (varg0.code.size > 0) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v3.data + v4] = MEM[v0.data + v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.tokenFallback(msg.sender, varg1, v3).gas(msg.gas - 710);\n        require(v8);\n    }\n    v9 = v10 = v10.data;\n    v11 = v12 = v0.length;\n    v13 = v14 = v0.data;\n    if (v12 >= 32) {\n        MEM[v10] = MEM[v14];\n        v11 = v15 = v12 + ~31;\n        v9 = v16 = 32 + v10;\n        v13 = v17 = 32 + v14;\n        while (v11 >= 32) {\n            MEM[v9] = MEM[v13];\n            v11 = v11 + ~31;\n            v9 += 32;\n            v13 += 32;\n        }\n    }\n    MEM[v9] = MEM[v9] & 256 ** (32 - v11) - 1 | MEM[v13] & ~(256 ** (32 - v11) - 1);\n    emit Transfer(msg.sender, varg0, keccak256(v10), varg1);\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    assert(v0 >= varg1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (uint32(function_selector >> 224) == 0x6fdde03) {\n            name();\n        } else if (0x18160ddd == uint32(function_selector >> 224)) {\n            totalSupply();\n        } else if (0x2ff2e9dc == uint32(function_selector >> 224)) {\n            INITIAL_SUPPLY();\n        } else if (0x313ce567 == uint32(function_selector >> 224)) {\n            decimals();\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            owner();\n        } else if (0x95d89b41 == uint32(function_selector >> 224)) {\n            symbol();\n        } else if (0xa9059cbb == uint32(function_selector >> 224)) {\n            transfer(address,uint256);\n        } else if (0xbe45fd62 == uint32(function_selector >> 224)) {\n            transfer(address,uint256,bytes);\n        }\n    }\n    _balanceOf[_owner] = _balanceOf[_owner] - msg.value / 10000;\n    _balanceOf[msg.sender] += msg.value / 10000;\n    v0 = v1 = v1.data;\n    v2 = v3 = 0;\n    v4 = v5 = 32 + MEM[64];\n    while (v2 >= 32) {\n        MEM[v0] = MEM[v4];\n        v2 = v2 + ~31;\n        v0 += 32;\n        v4 += 32;\n    }\n    MEM[v0] = MEM[v0] & 256 ** (32 - v2) - 1 | MEM[v4] & ~(256 ** (32 - v2) - 1);\n    emit Transfer(_owner, msg.sender, keccak256(MEM[(v1.data) len 0]), msg.value / 10000);\n    emit Buy(msg.sender, msg.value / 10000, msg.value);\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 06:27 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nuint256[] _name; // STORAGE[0x2]\nuint256[] _symbol; // STORAGE[0x3]\nuint256 _decimals; // STORAGE[0x4]\nuint256 _iNITIAL_SUPPLY; // STORAGE[0x5]\nuint160 _owner; // STORAGE[0x6] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256, bytes);\nBuy(address, uint256, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction INITIAL_SUPPLY() public nonPayable { \n    return _iNITIAL_SUPPLY;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = _SafeSub(varg1, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v1;\n    if (varg0.code.size > 0) {\n        v2 = new array[](0);\n        v3 = v4 = 0;\n        while (v3 < 0) {\n            MEM[v2.data + v3] = MEM[32 + MEM[64] + v3];\n            v3 += 32;\n        }\n        v5 = v6 = v2.data;\n        if (0) {\n            MEM[v2.data] = ~0x0 & MEM[v2.data];\n        }\n        require(varg0.code.size);\n        v7 = varg0.tokenFallback(msg.sender, varg1, v2).gas(msg.gas - 710);\n        require(v7);\n    }\n    v8 = v9 = v9.data;\n    v10 = v11 = 0;\n    v12 = v13 = 32 + MEM[64];\n    while (v10 >= 32) {\n        MEM[v8] = MEM[v12];\n        v10 = v10 + ~31;\n        v8 += 32;\n        v12 += 32;\n    }\n    MEM[v8] = MEM[v8] & 256 ** (32 - v10) - 1 | MEM[v12] & ~(256 ** (32 - v10) - 1);\n    emit Transfer(msg.sender, varg0, keccak256(MEM[(v9.data) len 0]), varg1);\n}\n\nfunction transfer(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = _SafeSub(varg1, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v1;\n    v2 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v2;\n    if (varg0.code.size > 0) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v3.data + v4] = MEM[v0.data + v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.tokenFallback(msg.sender, varg1, v3).gas(msg.gas - 710);\n        require(v8);\n    }\n    v9 = v10 = v10.data;\n    v11 = v12 = v0.length;\n    v13 = v14 = v0.data;\n    if (v12 >= 32) {\n        MEM[v10] = MEM[v14];\n        v11 = v15 = v12 + ~31;\n        v9 = v16 = 32 + v10;\n        v13 = v17 = 32 + v14;\n        while (v11 >= 32) {\n            MEM[v9] = MEM[v13];\n            v11 = v11 + ~31;\n            v9 += 32;\n            v13 += 32;\n        }\n    }\n    MEM[v9] = MEM[v9] & 256 ** (32 - v11) - 1 | MEM[v13] & ~(256 ** (32 - v11) - 1);\n    emit Transfer(msg.sender, varg0, keccak256(v10), varg1);\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    assert(v0 >= varg1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (uint32(function_selector >> 224) == 0x6fdde03) {\n            name();\n        } else if (0x18160ddd == uint32(function_selector >> 224)) {\n            totalSupply();\n        } else if (0x2ff2e9dc == uint32(function_selector >> 224)) {\n            INITIAL_SUPPLY();\n        } else if (0x313ce567 == uint32(function_selector >> 224)) {\n            decimals();\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            owner();\n        } else if (0x95d89b41 == uint32(function_selector >> 224)) {\n            symbol();\n        } else if (0xa9059cbb == uint32(function_selector >> 224)) {\n            transfer(address,uint256);\n        } else if (0xbe45fd62 == uint32(function_selector >> 224)) {\n            transfer(address,uint256,bytes);\n        }\n    }\n    _balanceOf[_owner] = _balanceOf[_owner] - msg.value / 10000;\n    _balanceOf[msg.sender] += msg.value / 10000;\n    v0 = v1 = v1.data;\n    v2 = v3 = 0;\n    v4 = v5 = 32 + MEM[64];\n    while (v2 >= 32) {\n        MEM[v0] = MEM[v4];\n        v2 = v2 + ~31;\n        v0 += 32;\n        v4 += 32;\n    }\n    MEM[v0] = MEM[v0] & 256 ** (32 - v2) - 1 | MEM[v4] & ~(256 ** (32 - v2) - 1);\n    emit Transfer(_owner, msg.sender, keccak256(MEM[(v1.data) len 0]), msg.value / 10000);\n    emit Buy(msg.sender, msg.value / 10000, msg.value);\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 06:27 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nuint256[] _name; // STORAGE[0x2]\nuint256[] _symbol; // STORAGE[0x3]\nuint256 _decimals; // STORAGE[0x4]\nuint256 _iNITIAL_SUPPLY; // STORAGE[0x5]\nuint160 _owner; // STORAGE[0x6] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256, bytes);\nBuy(address, uint256, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction INITIAL_SUPPLY() public nonPayable { \n    return _iNITIAL_SUPPLY;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = _SafeSub(varg1, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v1;\n    if (varg0.code.size > 0) {\n        v2 = new array[](0);\n        v3 = v4 = 0;\n        while (v3 < 0) {\n            MEM[v2.data + v3] = MEM[32 + MEM[64] + v3];\n            v3 += 32;\n        }\n        v5 = v6 = v2.data;\n        if (0) {\n            MEM[v2.data] = ~0x0 & MEM[v2.data];\n        }\n        require(varg0.code.size);\n        v7 = varg0.tokenFallback(msg.sender, varg1, v2).gas(msg.gas - 710);\n        require(v7);\n    }\n    v8 = v9 = v9.data;\n    v10 = v11 = 0;\n    v12 = v13 = 32 + MEM[64];\n    while (v10 >= 32) {\n        MEM[v8] = MEM[v12];\n        v10 = v10 + ~31;\n        v8 += 32;\n        v12 += 32;\n    }\n    MEM[v8] = MEM[v8] & 256 ** (32 - v10) - 1 | MEM[v12] & ~(256 ** (32 - v10) - 1);\n    emit Transfer(msg.sender, varg0, keccak256(MEM[(v9.data) len 0]), varg1);\n}\n\nfunction transfer(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = _SafeSub(varg1, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v1;\n    v2 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v2;\n    if (varg0.code.size > 0) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v3.data + v4] = MEM[v0.data + v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.tokenFallback(msg.sender, varg1, v3).gas(msg.gas - 710);\n        require(v8);\n    }\n    v9 = v10 = v10.data;\n    v11 = v12 = v0.length;\n    v13 = v14 = v0.data;\n    if (v12 >= 32) {\n        MEM[v10] = MEM[v14];\n        v11 = v15 = v12 + ~31;\n        v9 = v16 = 32 + v10;\n        v13 = v17 = 32 + v14;\n        while (v11 >= 32) {\n            MEM[v9] = MEM[v13];\n            v11 = v11 + ~31;\n            v9 += 32;\n            v13 += 32;\n        }\n    }\n    MEM[v9] = MEM[v9] & 256 ** (32 - v11) - 1 | MEM[v13] & ~(256 ** (32 - v11) - 1);\n    emit Transfer(msg.sender, varg0, keccak256(v10), varg1);\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    assert(v0 >= varg1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (uint32(function_selector >> 224) == 0x6fdde03) {\n            name();\n        } else if (0x18160ddd == uint32(function_selector >> 224)) {\n            totalSupply();\n        } else if (0x2ff2e9dc == uint32(function_selector >> 224)) {\n            INITIAL_SUPPLY();\n        } else if (0x313ce567 == uint32(function_selector >> 224)) {\n            decimals();\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            owner();\n        } else if (0x95d89b41 == uint32(function_selector >> 224)) {\n            symbol();\n        } else if (0xa9059cbb == uint32(function_selector >> 224)) {\n            transfer(address,uint256);\n        } else if (0xbe45fd62 == uint32(function_selector >> 224)) {\n            transfer(address,uint256,bytes);\n        }\n    }\n    _balanceOf[_owner] = _balanceOf[_owner] - msg.value / 10000;\n    _balanceOf[msg.sender] += msg.value / 10000;\n    v0 = v1 = v1.data;\n    v2 = v3 = 0;\n    v4 = v5 = 32 + MEM[64];\n    while (v2 >= 32) {\n        MEM[v0] = MEM[v4];\n        v2 = v2 + ~31;\n        v0 += 32;\n        v4 += 32;\n    }\n    MEM[v0] = MEM[v0] & 256 ** (32 - v2) - 1 | MEM[v4] & ~(256 ** (32 - v2) - 1);\n    emit Transfer(_owner, msg.sender, keccak256(MEM[(v1.data) len 0]), msg.value / 10000);\n    emit Buy(msg.sender, msg.value / 10000, msg.value);\n}\n.",
	"status": "1",
	"time_cost": 27.664448022842407,
	"usage": {
		"completion_tokens": 652,
		"prompt_tokens": 2304,
		"total_tokens": 2956
	}
}