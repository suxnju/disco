{
	"address": "0x5b03686f4e484d8e0dc372628d35d49f9b30f7fe",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2022.11.26 21:50 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 _sellPrice; // STORAGE[0x7]\nuint256 _buy; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0x9]\nuint256 _owner; // STORAGE[0x0] bytes 0 to 19\nuint256 _decimals; // STORAGE[0x3] bytes 0 to 0\n\n// Events\nBurn(address, uint256);\nTransfer(address, address, uint256);\nFrozenFunds(address, bool);\n\nfunction () public payable { \n    revert();\n}\n\nfunction setPrices(uint256 varg0, uint256 varg1) public nonPayable { \n    require(_owner == msg.sender);\n    _sellPrice = varg0;\n    _buy = varg1;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        v4[v5] = v0[v5];\n        v5 += 32;\n    }\n    v7 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0xb8f(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(_owner == msg.sender);\n    _balanceOf[varg0] += varg1;\n    _totalSupply += varg1;\n    emit Transfer(0, address(this), varg1);\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction buyPrice() public nonPayable { \n    return _buy;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        v4[v5] = v0[v5];\n        v5 += 32;\n    }\n    v7 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    assert(_buy);\n    0xb8f(msg.value / _buy, msg.sender, this);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0xb8f(varg1, varg0, msg.sender);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[](varg2.length);\n    CALLDATACOPY(v0.data, varg2 + 36, varg2.length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            v3[v4] = v0[v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = 1;\n    }\n    return v1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require((address(this)).balance >= varg0 * _sellPrice);\n    0xb8f(varg0, this, msg.sender);\n    v0 = msg.sender.call().value(varg0 * _sellPrice).gas(!(varg0 * _sellPrice) * 2300);\n    require(v0);\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(_owner == msg.sender);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    _owner = varg0;\n}\n\nfunction 0xb8f(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg2);\n    require(!(0xff & _frozenAccount[v2]));\n    v3 = address(varg1);\n    require(!(0xff & _frozenAccount[v3]));\n    v4 = address(varg2);\n    _balanceOf[v4] = _balanceOf[v4] - varg0;\n    v5 = address(varg1);\n    _balanceOf[v5] += varg0;\n    emit Transfer(v4, v5, varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        v0 = uint32(function_selector >> 224);\n        if (v0 == 0x5fefda7) {\n            setPrices(uint256,uint256);\n        } else if (0x6fdde03 == v0) {\n            name();\n        } else if (0x95ea7b3 == v0) {\n            approve(address,uint256);\n        } else if (0x18160ddd == v0) {\n            totalSupply();\n        } else if (0x23b872dd == v0) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == v0) {\n            decimals();\n        } else if (0x42966c68 == v0) {\n            burn(uint256);\n        } else if (0x4b750334 == v0) {\n            sellPrice();\n        } else if (0x70a08231 == v0) {\n            balanceOf(address);\n        } else if (0x79c65068 == v0) {\n            mintToken(address,uint256);\n        } else if (0x79cc6790 == v0) {\n            burnFrom(address,uint256);\n        } else if (0x8620410b == v0) {\n            buyPrice();\n        } else if (0x8da5cb5b == v0) {\n            owner();\n        } else if (0x95d89b41 == v0) {\n            symbol();\n        } else if (0xa6f2ae3a == v0) {\n            buy();\n        } else if (0xa9059cbb == v0) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == v0) {\n            frozenAccount(address);\n        } else if (0xcae9ca51 == v0) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xdd62ed3e == v0) {\n            allowance(address,address);\n        } else if (0xe4849b32 == v0) {\n            sell(uint256);\n        } else if (0xe724529c == v0) {\n            freezeAccount(address,bool);\n        } else if (0xf2fde38b == v0) {\n            transferOwnership(address);\n        }\n    }\n    ();\n}\n",
	"language": "Solidity",
	"status": "Connection error."
}