{
	"address": "0x6c424c25e9f1fff9642cb5b7750b0db7312c29ad",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity code generated from the decompiled code:\n\n```solidity\npragma solidity ^0.4.0;\n\ncontract Contract {\n    mapping (bytes32 => uint256) storage;\n\n    function supportsInterface(uint256 arg0) public returns (uint256 r0) {\n        bytes32 temp0 = keccak256(arg0, 0x03);\n        return storage[temp0] & ((0x01 << 0xa0) - 0x01);\n    }\n    \n    function func_02AB(uint256 arg0, uint256 arg1) public returns (uint256 arg0) {\n        bytes32 temp0 = keccak256(arg0, 0x06);\n        return storage[temp0] & ((0x01 << 0xa0) - 0x01);\n    }\n    \n    function getApproved(uint256 arg0, uint256 arg1) public returns (uint256 r0) {\n        bytes32 temp0 = keccak256(arg0, 0x02);\n        return storage[temp0] & ((0x01 << 0xa0) - 0x01);\n    }\n    \n    function approve(uint256 arg0, uint256 arg1) public {\n        bytes32 temp0 = keccak256(arg0, 0x02);\n        bytes32 temp1 = keccak256(arg1, 0x02);\n        storage[temp0] = (arg1 & ((0x01 << 0xa0) - 0x01)) | (storage[temp0] & ~((0x01 << 0xa0) - 0x01));\n        storage[temp1] = arg0;\n    }\n    \n    function updateWhitelist(uint256 arg0, uint256 arg1) public {\n        bytes32 temp0 = keccak256(arg0, 0x0c);\n        storage[temp0] = arg1;\n    }\n    \n    function withdrawBid(uint256 arg0, uint256 arg1) public {\n        bytes32 temp0 = keccak256(arg0, 0x02);\n        uint256 temp1 = storage[temp0 + 0x01];\n        address temp2 = address(storage[temp0] & ((0x01 << 0xa0) - 0x01));\n        require(temp2.call.gas(!temp1 * 0x08fc).value(temp1)());\n    }\n    \n    function tokenOfOwnerByIndex(uint256 arg0, uint256 arg1) public returns (uint256 r0) {\n        bytes32 temp0 = keccak256(arg0, 0x05);\n        return storage[keccak256(temp0, arg1)];\n    }\n    \n    function func_07DB(uint256 arg0, uint256 arg1) public {\n        bytes32 temp0 = keccak256(arg0, 0x13);\n        storage[temp0] = arg1;\n    }\n    \n    function getControlToken(uint256 arg0) public returns (uint256 r0) {\n        bytes32 temp0 = keccak256(arg0, 0x0e);\n        return storage[temp0 + 0x01];\n    }\n    \n    function func_0B56(uint256 arg0) public returns (uint256 arg0) {\n        bytes32 temp0 = keccak256(arg0, 0x12);\n        return storage[temp0] & ((0x01 << 0xa0) - 0x01);\n    }\n    \n    function setApprovalForAll(uint256 arg0, bool arg1) public {\n        bytes32 temp0 = keccak256(msg.sender, 0x04);\n        bytes32 temp1 = keccak256(arg0, temp0);\n        storage[temp1] = arg1;\n    }\n    \n    function buyPrices(uint256 arg0) public returns (uint256 r0) {\n        bytes32 temp0 = keccak256(arg0, 0x0f);\n        return storage[temp0];\n    }\n    \n    function uniqueTokenCreators(uint256 arg0, uint256 arg1) public returns (uint256 r0) {\n        bytes32 temp0 = keccak256(arg0, 0x0d);\n        return storage[keccak256(temp0, arg1)] & ((0x01 << 0xa0) - 0x01);\n    }\n    \n    function tokenURI(uint256 arg0) public returns (string r0) {\n        bytes32 temp0 = keccak256(arg0, 0x0b);\n        return string(storage[temp0]);\n    }\n    \n    function func_23FB() public returns (uint256 r0) {\n        return storage[0x13];\n    }\n    \n    function artistSecondSalePercentage() public returns (uint256 r0) {\n        return storage[0x15];\n    }\n    \n    function func_24D6() public returns (uint256 r0) {\n        return storage[0x14];\n    }\n    \n    function platformAddress() public returns (address r0) {\n        return address(storage[0x17] & ((0x01 << 0xa0) - 0x01));\n    }\n    \n    function isApprovedForAll(uint256 arg0, uint256 arg1) public returns (bool r0) {\n        bytes32 temp0 = keccak256(arg0, 0x04);\n        bytes32 temp1 = keccak256(arg1, temp0);\n        return storage[temp1] & 0xff;\n    }\n}\n```\n\nPlease note that this is a rough translation and may not be entirely accurate. The decompiled code did not provide enough information to determine the exact function signatures or the data types of the variables. It is also possible that some features of the original contract, such as events or function modifiers, could not be recovered from the bytecode.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472618,
	"id": "chatcmpl-8MutegufmH6b5BfHVrB5gWZz1URAG",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x755db7b3 > var0) {\n            if (0x2b1fd58a > var0) {\n                if (0x0d392cd9 > var0) {\n                    if (var0 == 0x01ffc9a7) {\n                        // Dispatch table entry for supportsInterface(bytes4)\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0274;\n                        var var2 = 0x04;\n                        var var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = supportsInterface(var2, var3);\n                    \n                    label_0274:\n                        var temp0 = memory[0x40:0x60];\n                        memory[temp0:temp0 + 0x20] = !!var1;\n                        var temp1 = memory[0x40:0x60];\n                        return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n                    } else if (var0 == 0x041bb6ff) {\n                        // Dispatch table entry for 0x041bb6ff (unknown)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0274;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = func_02AB(var2, var3);\n                        goto label_0274;\n                    } else if (var0 == 0x06fdde03) {\n                        // Dispatch table entry for name()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x02d0;\n                        var1 = name();\n                    \n                    label_02D0:\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = 0x20;\n                        var temp3 = var1;\n                        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n                        var2 = temp2;\n                        var3 = var2;\n                        var var4 = var3 + 0x40;\n                        var var5 = temp3 + 0x20;\n                        var var6 = memory[temp3:temp3 + 0x20];\n                        var var7 = var6;\n                        var var8 = var4;\n                        var var9 = var5;\n                        var var10 = 0x00;\n                    \n                        if (var10 >= var7) {\n                        label_030A:\n                            var temp4 = var6;\n                            var4 = temp4 + var4;\n                            var5 = temp4 & 0x1f;\n                        \n                            if (!var5) {\n                                var temp5 = memory[0x40:0x60];\n                                return memory[temp5:temp5 + var4 - temp5];\n                            } else {\n                                var temp6 = var5;\n                                var temp7 = var4 - temp6;\n                                memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                                var temp8 = memory[0x40:0x60];\n                                return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                            }\n                        } else {\n                        label_02FB:\n                            var temp9 = var10;\n                            memory[temp9 + var8:temp9 + var8 + 0x20] = memory[temp9 + var9:temp9 + var9 + 0x20];\n                            var10 = temp9 + 0x20;\n                        \n                            if (var10 >= var7) { goto label_030A; }\n                            else { goto label_02FB; }\n                        }\n                    } else if (var0 == 0x081812fc) {\n                        // Dispatch table entry for getApproved(uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x036f;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = getApproved(var2, var3);\n                    \n                    label_036F:\n                        var temp10 = memory[0x40:0x60];\n                        memory[temp10:temp10 + 0x20] = var1 & (0x01 << 0xa0) - 0x01;\n                        var temp11 = memory[0x40:0x60];\n                        return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n                    } else if (var0 == 0x095ea7b3) {\n                        // Dispatch table entry for approve(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x03c4;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                    \n                        approve(var2, var3);\n                        stop();\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x0d392cd9) {\n                    // Dispatch table entry for updateWhitelist(address,bool)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    updateWhitelist(var2, var3);\n                    stop();\n                } else if (var0 == 0x0eaaf4c8) {\n                    // Dispatch table entry for withdrawBid(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    withdrawBid(var2, var3);\n                    stop();\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0440;\n                    var1 = totalSupply();\n                \n                label_0440:\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = var1;\n                    var temp13 = memory[0x40:0x60];\n                    return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n                } else if (var0 == 0x1e9b0f52) {\n                    // Dispatch table entry for 0x1e9b0f52 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0xc0) { revert(memory[0x00:0x00]); }\n                \n                    var temp14 = var2;\n                    var2 = msg.data[temp14:temp14 + 0x20];\n                    var4 = temp14;\n                    var3 = var4 + var3;\n                    var5 = var4 + 0x40;\n                    var6 = msg.data[var4 + 0x20:var4 + 0x20 + 0x20];\n                \n                    if (var6 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp15 = var4 + var6;\n                    var6 = temp15;\n                \n                    if (var6 + 0x20 > var3) { revert(memory[0x00:0x00]); }\n                \n                    var temp16 = var6;\n                    var temp17 = msg.data[temp16:temp16 + 0x20];\n                    var6 = temp17;\n                    var temp18 = var5;\n                    var5 = temp16 + 0x20;\n                    var7 = temp18;\n                \n                    if ((var6 > 0x01 << 0x20) | (var5 + var6 > var3)) { revert(memory[0x00:0x00]); }\n                \n                    var temp19 = var7;\n                    var temp20 = var6;\n                    var temp21 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp21 + (temp20 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    memory[temp21:temp21 + 0x20] = temp20;\n                    var temp22 = temp21 + 0x20;\n                    memory[temp22:temp22 + temp20] = msg.data[var5:var5 + temp20];\n                    memory[temp22 + temp20:temp22 + temp20 + 0x20] = 0x00;\n                    var temp23 = var3;\n                    var3 = temp21;\n                    var temp24 = var4;\n                    var4 = temp23;\n                    var5 = temp24;\n                    var6 = temp19 + 0x20;\n                    var7 = msg.data[temp19:temp19 + 0x20];\n                \n                    if (var7 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp25 = var5 + var7;\n                    var7 = temp25;\n                \n                    if (var7 + 0x20 > var4) { revert(memory[0x00:0x00]); }\n                \n                    var temp26 = var7;\n                    var temp27 = msg.data[temp26:temp26 + 0x20];\n                    var7 = temp27;\n                    var8 = var6;\n                    var6 = temp26 + 0x20;\n                \n                    if ((var7 > 0x01 << 0x20) | (var6 + var7 * 0x20 > var4)) { revert(memory[0x00:0x00]); }\n                \n                    var temp28 = var8;\n                    var temp29 = var7;\n                    var temp30 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp30 + temp29 * 0x20 + 0x20;\n                    memory[temp30:temp30 + 0x20] = temp29;\n                    var temp31 = temp30 + 0x20;\n                    var temp32 = temp29 * 0x20;\n                    memory[temp31:temp31 + temp32] = msg.data[var6:var6 + temp32];\n                    memory[temp31 + temp32:temp31 + temp32 + 0x20] = 0x00;\n                    var temp33 = var4;\n                    var4 = temp30;\n                    var temp34 = var5;\n                    var5 = temp33;\n                    var6 = temp34;\n                    var7 = temp28 + 0x20;\n                    var8 = msg.data[temp28:temp28 + 0x20];\n                \n                    if (var8 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp35 = var6 + var8;\n                    var8 = temp35;\n                \n                    if (var8 + 0x20 > var5) { revert(memory[0x00:0x00]); }\n                \n                    var temp36 = var8;\n                    var temp37 = msg.data[temp36:temp36 + 0x20];\n                    var8 = temp37;\n                    var9 = var7;\n                    var7 = temp36 + 0x20;\n                \n                    if ((var8 > 0x01 << 0x20) | (var7 + var8 * 0x20 > var5)) { revert(memory[0x00:0x00]); }\n                \n                    var temp38 = var9;\n                    var temp39 = var8;\n                    var temp40 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp40 + temp39 * 0x20 + 0x20;\n                    memory[temp40:temp40 + 0x20] = temp39;\n                    var temp41 = temp40 + 0x20;\n                    var temp42 = temp39 * 0x20;\n                    memory[temp41:temp41 + temp42] = msg.data[var7:var7 + temp42];\n                    memory[temp41 + temp42:temp41 + temp42 + 0x20] = 0x00;\n                    var temp43 = var5;\n                    var5 = temp40;\n                    var temp44 = var6;\n                    var6 = temp43;\n                    var7 = temp44;\n                    var8 = temp38 + 0x20;\n                    var9 = msg.data[temp38:temp38 + 0x20];\n                \n                    if (var9 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp45 = var7 + var9;\n                    var9 = temp45;\n                \n                    if (var9 + 0x20 > var6) { revert(memory[0x00:0x00]); }\n                \n                    var temp46 = var9;\n                    var temp47 = msg.data[temp46:temp46 + 0x20];\n                    var9 = temp47;\n                    var10 = var8;\n                    var8 = temp46 + 0x20;\n                \n                    if ((var9 > 0x01 << 0x20) | (var8 + var9 * 0x20 > var6)) { revert(memory[0x00:0x00]); }\n                \n                    var temp48 = var10;\n                    var temp49 = var9;\n                    var temp50 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp50 + temp49 * 0x20 + 0x20;\n                    memory[temp50:temp50 + 0x20] = temp49;\n                    var temp51 = temp50 + 0x20;\n                    var temp52 = temp49 * 0x20;\n                    memory[temp51:temp51 + temp52] = msg.data[var8:var8 + temp52];\n                    memory[temp51 + temp52:temp51 + temp52 + 0x20] = 0x00;\n                    var temp53 = var6;\n                    var6 = temp50;\n                    var temp54 = var7;\n                    var7 = temp53;\n                    var8 = temp54;\n                    var9 = temp48 + 0x20;\n                    var10 = msg.data[temp48:temp48 + 0x20];\n                \n                    if (var10 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp55 = var8 + var10;\n                    var10 = temp55;\n                \n                    if (var10 + 0x20 > var7) { revert(memory[0x00:0x00]); }\n                \n                    var temp56 = var10;\n                    var temp57 = msg.data[temp56:temp56 + 0x20];\n                    var10 = temp57;\n                    var var11 = var9;\n                    var9 = temp56 + 0x20;\n                \n                    if ((var10 > 0x01 << 0x20) | (var9 + var10 * 0x20 > var7)) { revert(memory[0x00:0x00]); }\n                \n                    var temp58 = var10;\n                    var temp59 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp59 + temp58 * 0x20 + 0x20;\n                    memory[temp59:temp59 + 0x20] = temp58;\n                    var temp60 = temp59 + 0x20;\n                    var temp61 = temp58 * 0x20;\n                    memory[temp60:temp60 + temp61] = msg.data[var9:var9 + temp61];\n                    memory[temp60 + temp61:temp60 + temp61 + 0x20] = 0x00;\n                    var7 = temp59;\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x0e;\n                \n                    if (storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xff) {\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x0e;\n                    \n                        if (!(storage[keccak256(memory[0x00:0x40]) + 0x01] / 0x0100 & 0xff)) {\n                            memory[0x00:0x20] = var2;\n                            memory[0x20:0x40] = 0x0d;\n                            var9 = keccak256(memory[0x00:0x40]);\n                            var8 = msg.sender;\n                            var10 = 0x00;\n                        \n                            if (!storage[var9]) { assert(); }\n                        \n                            memory[0x00:0x20] = var9;\n                        \n                            if (storage[keccak256(memory[0x00:0x20]) + var10] & (0x01 << 0xa0) - 0x01 == var8) {\n                                var8 = memory[var4:var4 + 0x20] == memory[var5:var5 + 0x20];\n                            \n                                if (!var8) {\n                                    if (var8) {\n                                    label_13F2:\n                                        var8 = 0x13fc;\n                                        var9 = msg.sender;\n                                        var10 = var2;\n                                    \n                                    label_268F:\n                                        var11 = 0x265d;\n                                        var var12 = var9;\n                                        var var13 = var10;\n                                        var temp62 = memory[0x40:0x60];\n                                        var var14 = temp62;\n                                        memory[0x40:0x60] = var14 + 0x20;\n                                        memory[var14:var14 + 0x20] = 0x00;\n                                        func_2B8C(var12, var13, var14);\n                                        // Error: Could not resolve jump destination!\n                                    } else {\n                                    label_13AE:\n                                        var temp63 = memory[0x40:0x60];\n                                        memory[temp63:temp63 + 0x20] = 0x461bcd << 0xe5;\n                                        memory[temp63 + 0x04:temp63 + 0x04 + 0x20] = 0x20;\n                                        memory[temp63 + 0x24:temp63 + 0x24 + 0x20] = 0x15;\n                                        memory[temp63 + 0x44:temp63 + 0x44 + 0x20] = 0x0acc2d8eacae640c2e4e4c2f240dad2e6dac2e8c6d << 0x5b;\n                                        var temp64 = memory[0x40:0x60];\n                                        revert(memory[temp64:temp64 + temp63 - temp64 + 0x64]);\n                                    }\n                                } else if (memory[var5:var5 + 0x20] == memory[var6:var6 + 0x20]) { goto label_13F2; }\n                                else { goto label_13AE; }\n                            } else {\n                                var temp65 = memory[0x40:0x60];\n                                memory[temp65:temp65 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp65 + 0x04:temp65 + 0x04 + 0x20] = 0x20;\n                                memory[temp65 + 0x24:temp65 + 0x24 + 0x20] = 0x1c;\n                                memory[temp65 + 0x44:temp65 + 0x44 + 0x20] = 0x4d75737420626520636f6e74726f6c20746f6b656e2061727469737400000000;\n                                var temp66 = memory[0x40:0x60];\n                                revert(memory[temp66:temp66 + temp65 - temp66 + 0x64]);\n                            }\n                        } else {\n                            var temp67 = memory[0x40:0x60];\n                            memory[temp67:temp67 + 0x20] = 0x461bcd << 0xe5;\n                            memory[temp67 + 0x04:temp67 + 0x04 + 0x20] = 0x20;\n                            memory[temp67 + 0x24:temp67 + 0x24 + 0x20] = 0x0d;\n                            memory[temp67 + 0x44:temp67 + 0x44 + 0x20] = 0x0416c726561647920736574757 << 0x9c;\n                            var temp68 = memory[0x40:0x60];\n                            revert(memory[temp68:temp68 + temp67 - temp68 + 0x64]);\n                        }\n                    } else {\n                        var temp69 = memory[0x40:0x60];\n                        memory[temp69:temp69 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp69 + 0x04:temp69 + 0x04 + 0x20] = 0x20;\n                        memory[temp69 + 0x24:temp69 + 0x24 + 0x20] = 0x16;\n                        memory[temp69 + 0x44:temp69 + 0x44 + 0x20] = 0x139bc818dbdb9d1c9bdb081d1bdad95b88199bdd5b99 << 0x52;\n                        var temp70 = memory[0x40:0x60];\n                        revert(memory[temp70:temp70 + temp69 - temp70 + 0x64]);\n                    }\n                } else if (var0 == 0x23b872dd) {\n                    // Dispatch table entry for transferFrom(address,address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    var temp71 = (0x01 << 0xa0) - 0x01;\n                    var temp72 = var2;\n                    var2 = temp71 & msg.data[temp72:temp72 + 0x20];\n                    var3 = temp71 & msg.data[temp72 + 0x20:temp72 + 0x20 + 0x20];\n                    var4 = msg.data[temp72 + 0x40:temp72 + 0x40 + 0x20];\n                    var5 = 0x16de;\n                    var6 = msg.sender;\n                    var7 = var4;\n                    var5 = safeTransferFrom(var6, var7);\n                \n                    if (!var5) { revert(memory[0x00:0x00]); }\n                \n                    var5 = 0x16f2;\n                    var6 = var2;\n                    var7 = var3;\n                    var8 = var4;\n                \n                label_2781:\n                    var9 = 0x278c;\n                    var10 = var6;\n                    var11 = var7;\n                    var12 = var8;\n                    var13 = 0x2bbe;\n                    var14 = var10;\n                    var var15 = var11;\n                    var var16 = var12;\n                    var var17 = var14 & (0x01 << 0xa0) - 0x01;\n                    var var18 = 0x2cff;\n                    var var19 = var16;\n                    var18 = func_1993(var19);\n                \n                    if (var18 & (0x01 << 0xa0) - 0x01 != var17) {\n                        var temp74 = memory[0x40:0x60];\n                        memory[temp74:temp74 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp74 + 0x04:temp74 + 0x04 + 0x20] = 0x20;\n                        memory[temp74 + 0x24:temp74 + 0x24 + 0x20] = 0x09;\n                        memory[temp74 + 0x44:temp74 + 0x44 + 0x20] = 0x3737ba1037bbb732b9 << 0xb9;\n                        var temp75 = memory[0x40:0x60];\n                        revert(memory[temp75:temp75 + temp74 - temp75 + 0x64]);\n                    } else if (var15 & (0x01 << 0xa0) - 0x01) {\n                        var17 = 0x2d62;\n                        var18 = var16;\n                        func_3153(var18);\n                        memory[0x00:0x20] = var14 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var17 = 0x2d83;\n                        var18 = keccak256(memory[0x00:0x40]);\n                        var19 = 0x31a1;\n                        var var20 = storage[var18];\n                        var var21 = 0x01;\n                        var var22 = 0x00;\n                        var var23 = 0x2b2c;\n                        var var24 = var20;\n                        var var25 = var21;\n                        var temp73 = memory[0x40:0x60];\n                        var var26 = temp73;\n                        memory[0x40:0x60] = var26 + 0x40;\n                        memory[var26:var26 + 0x20] = 0x1e;\n                        memory[var26 + 0x20:var26 + 0x20 + 0x20] = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n                        var23 = func_2FD5(var24, var25, var26);\n                    \n                    label_2B2C:\n                        var19 = var23;\n                        // Error: Could not resolve jump destination!\n                    } else { revert(memory[0x00:0x00]); }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0x462399cd > var0) {\n                if (var0 == 0x2b1fd58a) {\n                    // Dispatch table entry for acceptBid(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = msg.data[var2:var2 + 0x20];\n                    var3 = 0x1701;\n                    var4 = msg.sender;\n                    var5 = var2;\n                    var3 = safeTransferFrom(var4, var5);\n                \n                    if (!var3) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x10;\n                \n                    if (!(storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xff)) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x10;\n                    var temp76 = keccak256(memory[0x00:0x40]);\n                    var3 = 0x1751;\n                    var5 = storage[temp76 + 0x01];\n                    var4 = var2;\n                    var6 = storage[temp76] & (0x01 << 0xa0) - 0x01;\n                \n                label_279F:\n                    memory[0x00:0x20] = var4;\n                    memory[0x20:0x40] = 0x11;\n                \n                    if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) {\n                        var7 = 0x00;\n                        memory[var7:var7 + 0x20] = var4;\n                        memory[0x20:0x40] = 0x11;\n                        var temp77 = keccak256(memory[var7:var7 + 0x40]);\n                        storage[temp77] = (storage[temp77] & ~0xff) | 0x01;\n                        var8 = 0x2945;\n                        var9 = 0x64;\n                        var10 = 0x27d2;\n                        var11 = var5;\n                        var12 = storage[0x13];\n                        var10 = func_2B33(var11, var12);\n                    \n                    label_27D2:\n                        var temp78 = var9;\n                        var9 = var10;\n                        var10 = temp78;\n                        var11 = 0x00;\n                        var12 = 0x2b2c;\n                        var13 = var9;\n                        var14 = var10;\n                        var temp79 = memory[0x40:0x60];\n                        var15 = temp79;\n                        memory[0x40:0x60] = var15 + 0x40;\n                        memory[var15:var15 + 0x20] = 0x1a;\n                        memory[var15 + 0x20:var15 + 0x20 + 0x20] = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n                        var12 = func_2F33(var13, var14, var15);\n                        goto label_2B2C;\n                    } else {\n                        var7 = 0x00;\n                        var8 = 0x27de;\n                        var9 = 0x64;\n                        var10 = 0x27d2;\n                        var11 = var5;\n                        var12 = storage[0x14];\n                        var10 = func_2B33(var11, var12);\n                        goto label_27D2;\n                    }\n                } else if (var0 == 0x2f745c59) {\n                    // Dispatch table entry for tokenOfOwnerByIndex(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0440;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = tokenOfOwnerByIndex(var2, var3);\n                    goto label_0440;\n                } else if (var0 == 0x41afca00) {\n                    // Dispatch table entry for 0x41afca00 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    func_07DB(var2, var3);\n                    stop();\n                } else if (var0 == 0x42842e0e) {\n                    // Dispatch table entry for safeTransferFrom(address,address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    var temp80 = (0x01 << 0xa0) - 0x01;\n                    var temp81 = var2;\n                    var2 = temp80 & msg.data[temp81:temp81 + 0x20];\n                    var3 = temp80 & msg.data[temp81 + 0x20:temp81 + 0x20 + 0x20];\n                    var4 = msg.data[temp81 + 0x40:temp81 + 0x40 + 0x20];\n                    var5 = 0x16f2;\n                    var6 = var2;\n                    var7 = var3;\n                    var8 = var4;\n                    var temp82 = memory[0x40:0x60];\n                    var9 = temp82;\n                    memory[0x40:0x60] = var9 + 0x20;\n                    memory[var9:var9 + 0x20] = 0x00;\n                \n                label_23DD:\n                    var10 = 0x23e7;\n                    var11 = msg.sender;\n                    var12 = var8;\n                    var10 = safeTransferFrom(var11, var12);\n                \n                    if (!var10) { revert(memory[0x00:0x00]); }\n                \n                    var10 = 0x230c;\n                    var11 = var6;\n                    var12 = var7;\n                    var13 = var8;\n                    goto label_2781;\n                } else if (var0 == 0x454a2ab3) {\n                    // Dispatch table entry for bid(uint256)\n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    bid(var2, var3);\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x462399cd) {\n                // Dispatch table entry for tokenDidHaveFirstSale(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0274;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = tokenDidHaveFirstSale(var2, var3);\n                goto label_0274;\n            } else if (var0 == 0x4f6ccce7) {\n                // Dispatch table entry for tokenByIndex(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = tokenByIndex(var2, var3);\n                goto label_0440;\n            } else if (var0 == 0x556d8628) {\n                // Dispatch table entry for expectedTokenSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = expectedTokenSupply();\n                goto label_0440;\n            } else if (var0 == 0x6352211e) {\n                // Dispatch table entry for ownerOf(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x036f;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = ownerOf(var2, var3);\n                goto label_036F;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = msg.data[var2:var2 + 0x20] & (0x01 << 0xa0) - 0x01;\n                var3 = 0x00;\n            \n                if (!(var2 & (0x01 << 0xa0) - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x03;\n                var4 = 0x1786;\n                var5 = keccak256(memory[0x00:0x40]);\n                var4 = balanceOf(var5);\n                var1 = var4;\n                // Error: Could not resolve jump destination!\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xb88d4fde > var0) {\n            if (0x98207051 > var0) {\n                if (var0 == 0x755db7b3) {\n                    // Dispatch table entry for useControlToken(uint256,uint256[],int256[])\n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    useControlToken(var2, var3);\n                    stop();\n                } else if (var0 == 0x8cb6ddcb) {\n                    // Dispatch table entry for 0x8cb6ddcb (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    func_0A5E(var2, var3);\n                    stop();\n                } else if (var0 == 0x8f9f193f) {\n                    // Dispatch table entry for updatePlatformAddress(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    updatePlatformAddress(var2, var3);\n                    stop();\n                } else if (var0 == 0x95d89b41) {\n                    // Dispatch table entry for symbol()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02d0;\n                    var1 = symbol();\n                    goto label_02D0;\n                } else if (var0 == 0x96bc50b0) {\n                    // Dispatch table entry for getControlToken(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0ae3;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = getControlToken(var2, var3);\n                    var temp83 = memory[0x40:0x60];\n                    memory[temp83:temp83 + 0x20] = 0x20;\n                    var temp84 = var1;\n                    memory[temp83 + 0x20:temp83 + 0x20 + 0x20] = memory[temp84:temp84 + 0x20];\n                    var2 = temp83;\n                    var3 = var2;\n                    var4 = var3 + 0x40;\n                    var5 = temp84 + 0x20;\n                    var6 = memory[temp84:temp84 + 0x20] * 0x20;\n                    var7 = var6;\n                    var8 = var4;\n                    var9 = var5;\n                    var10 = 0x00;\n                \n                    if (var10 >= var7) {\n                    label_0B1F:\n                        var temp85 = memory[0x40:0x60];\n                        return memory[temp85:temp85 + (var6 + var4) - temp85];\n                    } else {\n                    label_0B10:\n                        var temp86 = var10;\n                        memory[temp86 + var8:temp86 + var8 + 0x20] = memory[temp86 + var9:temp86 + var9 + 0x20];\n                        var10 = temp86 + 0x20;\n                    \n                        if (var10 >= var7) { goto label_0B1F; }\n                        else { goto label_0B10; }\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x98207051) {\n                // Dispatch table entry for 0x98207051 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x036f;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = func_0B56(var2, var3);\n                goto label_036F;\n            } else if (var0 == 0x98c8103e) {\n                // Dispatch table entry for mintArtwork(uint256,string,address[])\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var temp87 = var2;\n                var2 = msg.data[temp87:temp87 + 0x20];\n                var3 = temp87 + var3;\n                var4 = temp87;\n                var5 = var4 + 0x40;\n                var6 = msg.data[var4 + 0x20:var4 + 0x20 + 0x20];\n            \n                if (var6 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp88 = var4 + var6;\n                var6 = temp88;\n            \n                if (var6 + 0x20 > var3) { revert(memory[0x00:0x00]); }\n            \n                var temp89 = var6;\n                var temp90 = msg.data[temp89:temp89 + 0x20];\n                var6 = temp90;\n                var temp91 = var5;\n                var5 = temp89 + 0x20;\n                var7 = temp91;\n            \n                if ((var6 > 0x01 << 0x20) | (var5 + var6 > var3)) { revert(memory[0x00:0x00]); }\n            \n                var temp92 = var7;\n                var temp93 = var6;\n                var temp94 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp94 + (temp93 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp94:temp94 + 0x20] = temp93;\n                var temp95 = temp94 + 0x20;\n                memory[temp95:temp95 + temp93] = msg.data[var5:var5 + temp93];\n                memory[temp95 + temp93:temp95 + temp93 + 0x20] = 0x00;\n                var temp96 = var3;\n                var3 = temp94;\n                var temp97 = var4;\n                var4 = temp96;\n                var5 = temp97;\n                var6 = temp92 + 0x20;\n                var7 = msg.data[temp92:temp92 + 0x20];\n            \n                if (var7 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp98 = var5 + var7;\n                var7 = temp98;\n            \n                if (var7 + 0x20 > var4) { revert(memory[0x00:0x00]); }\n            \n                var temp99 = var7;\n                var temp100 = msg.data[temp99:temp99 + 0x20];\n                var7 = temp100;\n                var temp101 = var6;\n                var6 = temp99 + 0x20;\n                var8 = temp101;\n            \n                if ((var7 > 0x01 << 0x20) | (var6 + var7 * 0x20 > var4)) { revert(memory[0x00:0x00]); }\n            \n                var temp102 = var7;\n                var temp103 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp103 + temp102 * 0x20 + 0x20;\n                memory[temp103:temp103 + 0x20] = temp102;\n                var temp104 = temp103 + 0x20;\n                var temp105 = temp102 * 0x20;\n                memory[temp104:temp104 + temp105] = msg.data[var6:var6 + temp105];\n                memory[temp104 + temp105:temp104 + temp105 + 0x20] = 0x00;\n                var4 = temp103;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0c;\n            \n                if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != 0x01) { revert(memory[0x00:0x00]); }\n            \n                if (var2 == storage[0x16]) {\n                    var5 = 0x20c9;\n                    var6 = msg.sender;\n                    var7 = var2;\n                    goto label_268F;\n                } else {\n                    var temp106 = memory[0x40:0x60];\n                    memory[temp106:temp106 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp106 + 0x04:temp106 + 0x04 + 0x20] = 0x20;\n                    memory[temp106 + 0x24:temp106 + 0x24 + 0x20] = 0x1d;\n                    memory[temp106 + 0x44:temp106 + 0x44 + 0x20] = 0x4578706563746564546f6b656e537570706c7920646966666572656e74000000;\n                    var temp107 = memory[0x40:0x60];\n                    revert(memory[temp107:temp107 + temp106 - temp107 + 0x64]);\n                }\n            } else if (var0 == 0xa22cb465) {\n                // Dispatch table entry for setApprovalForAll(address,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                setApprovalForAll(var2, var3);\n                stop();\n            } else if (var0 == 0xa90d6de3) {\n                // Dispatch table entry for buyPrices(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = buyPrices(var2, var3);\n                goto label_0440;\n            } else if (var0 == 0xa94141a1) {\n                // Dispatch table entry for uniqueTokenCreators(uint256,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x036f;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var2 = uniqueTokenCreators(var2, var3);\n                goto label_036F;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xd66767ab > var0) {\n            if (var0 == 0xb88d4fde) {\n                // Dispatch table entry for safeTransferFrom(address,address,uint256,bytes)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n            \n                var temp108 = (0x01 << 0xa0) - 0x01;\n                var temp109 = var2;\n                var2 = temp108 & msg.data[temp109:temp109 + 0x20];\n                var temp110 = var3;\n                var3 = temp108 & msg.data[temp109 + 0x20:temp109 + 0x20 + 0x20];\n                var4 = msg.data[temp109 + 0x40:temp109 + 0x40 + 0x20];\n                var5 = temp109 + temp110;\n                var6 = temp109;\n                var7 = var6 + 0x80;\n                var8 = msg.data[var6 + 0x60:var6 + 0x60 + 0x20];\n            \n                if (var8 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp111 = var6 + var8;\n                var8 = temp111;\n            \n                if (var8 + 0x20 > var5) { revert(memory[0x00:0x00]); }\n            \n                var temp112 = var8;\n                var temp113 = msg.data[temp112:temp112 + 0x20];\n                var8 = temp113;\n                var temp114 = var7;\n                var7 = temp112 + 0x20;\n                var9 = temp114;\n            \n                if ((var8 > 0x01 << 0x20) | (var7 + var8 > var5)) { revert(memory[0x00:0x00]); }\n            \n                var temp115 = var8;\n                var temp116 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp116 + (temp115 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp116:temp116 + 0x20] = temp115;\n                var temp117 = temp116 + 0x20;\n                memory[temp117:temp117 + temp115] = msg.data[var7:var7 + temp115];\n                memory[temp117 + temp115:temp117 + temp115 + 0x20] = 0x00;\n                var5 = temp116;\n                goto label_23DD;\n            } else if (var0 == 0xb8c18015) {\n                // Dispatch table entry for 0xb8c18015 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = func_23FB();\n                goto label_0440;\n            } else if (var0 == 0xbab2d111) {\n                // Dispatch table entry for artistSecondSalePercentage()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = artistSecondSalePercentage();\n                goto label_0440;\n            } else if (var0 == 0xc87b56dd) {\n                // Dispatch table entry for tokenURI(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d0;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = tokenURI(var2, var3);\n                goto label_02D0;\n            } else if (var0 == 0xcf8589b9) {\n                // Dispatch table entry for pendingBids(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0e84;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2, var3, var4 = pendingBids(var2);\n                var temp118 = memory[0x40:0x60];\n                memory[temp118:temp118 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                memory[temp118 + 0x20:temp118 + 0x20 + 0x20] = var3;\n                memory[temp118 + 0x40:temp118 + 0x40 + 0x20] = !!var4;\n                var temp119 = memory[0x40:0x60];\n                return memory[temp119:temp119 + temp118 - temp119 + 0x60];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xd66767ab) {\n            // Dispatch table entry for 0xd66767ab (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0440;\n            var2 = func_24D6();\n            goto label_0440;\n        } else if (var0 == 0xd91c070c) {\n            // Dispatch table entry for makeBuyPrice(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03c4;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            makeBuyPrice(var2, var3);\n            stop();\n        } else if (var0 == 0xdbe55e56) {\n            // Dispatch table entry for platformAddress()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x036f;\n            var2 = platformAddress();\n            goto label_036F;\n        } else if (var0 == 0xe66c7f35) {\n            // Dispatch table entry for 0xe66c7f35 (unknown)\n            var1 = 0x03c4;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2 = msg.data[var2:var2 + 0x20];\n            var3 = 0x2559;\n            var4 = msg.sender;\n            var5 = var2;\n            var3 = safeTransferFrom(var4, var5);\n        \n            if (var3) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x0f;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (!var3) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value < var3) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x10;\n        \n            if (!(storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xff)) {\n            label_2652:\n                var4 = 0x265d;\n                var5 = var2;\n                var6 = var3;\n                var7 = msg.sender;\n                goto label_279F;\n            } else {\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x10;\n                var temp120 = keccak256(memory[0x00:0x40]);\n                var temp121 = storage[temp120 + 0x01];\n                var temp122 = memory[0x40:0x60];\n                var temp123;\n                temp123, memory[temp122:temp122 + 0x00] = address(storage[temp120] & (0x01 << 0xa0) - 0x01).call.gas(!temp121 * 0x08fc).value(temp121)(memory[temp122:temp122 + 0x00]);\n                var4 = !temp123;\n            \n                if (!var4) {\n                    var temp124 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp124 + 0x60;\n                    memory[temp124:temp124 + 0x20] = 0x00;\n                    var temp125 = temp124 + 0x20;\n                    memory[temp125:temp125 + 0x20] = 0x00;\n                    var temp126 = temp124 + 0x40;\n                    memory[temp126:temp126 + 0x20] = 0x00;\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x10;\n                    var temp127 = keccak256(memory[0x00:0x40]);\n                    storage[temp127] = (memory[temp124:temp124 + 0x20] & (0x01 << 0xa0) - 0x01) | (storage[temp127] & ~((0x01 << 0xa0) - 0x01));\n                    storage[temp127 + 0x01] = memory[temp125:temp125 + 0x20];\n                    var temp128 = temp127 + 0x02;\n                    storage[temp128] = !!memory[temp126:temp126 + 0x20] | (storage[temp128] & ~0xff);\n                    goto label_2652;\n                } else {\n                    var temp129 = returndata.length;\n                    memory[0x00:0x00 + temp129] = returndata[0x00:0x00 + temp129];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            }\n        } else if (var0 == 0xe985e9c5) {\n            // Dispatch table entry for isApprovedForAll(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0274;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = isApprovedForAll(var2, var3);\n            goto label_0274;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function supportsInterface(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & ~((0x01 << 0xe0) - 0x01);\n        memory[0x00:0x20] = arg0 & ~((0x01 << 0xe0) - 0x01);\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_02AB(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getApproved(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_102B(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function approve(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x1051;\n        var var2 = arg1;\n        var1 = func_1993(var2);\n        var0 = var1;\n    \n        if (arg0 & (0x01 << 0xa0) - 0x01 == var0 & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var1 = var0 & (0x01 << 0xa0) - 0x01 == msg.sender;\n    \n        if (var1) {\n        label_108E:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n            var temp1 = arg1;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = (0x01 << 0xa0) - 0x01;\n            var temp4 = temp3 & arg0;\n            storage[temp2] = temp4 | (storage[temp2] & ~((0x01 << 0xa0) - 0x01));\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-1] & (0x01 << 0xa0) - 0x01, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2]]);\n            return;\n        } else {\n            var1 = 0x108e;\n            var2 = var0;\n            var var3 = msg.sender;\n            var1 = func_2661(var2, var3);\n            goto label_108E;\n        }\n    }\n    \n    function updateWhitelist(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = !!msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n    \n        if (msg.sender != storage[0x17] & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x0c;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = !!arg1 | (storage[temp1] & ~0xff);\n    }\n    \n    function withdrawBid(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x10;\n        arg1 = storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xff;\n    \n        if (arg1) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x10;\n        \n            if (msg.sender == storage[keccak256(memory[0x00:0x40])] & (0x01 << 0xa0) - 0x01) { goto label_1175; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (arg1) {\n        label_1175:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x10;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = storage[temp0 + 0x01];\n            var temp2 = memory[0x40:0x60];\n            var temp3;\n            temp3, memory[temp2:temp2 + 0x00] = address(storage[temp0] & (0x01 << 0xa0) - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + 0x00]);\n            arg1 = !temp3;\n        \n            if (!arg1) {\n                var temp4 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp4 + 0x60;\n                memory[temp4:temp4 + 0x20] = 0x00;\n                var temp5 = temp4 + 0x20;\n                memory[temp5:temp5 + 0x20] = 0x00;\n                var temp6 = temp4 + 0x40;\n                memory[temp6:temp6 + 0x20] = 0x00;\n                var temp7 = arg0;\n                memory[0x00:0x20] = temp7;\n                memory[0x20:0x40] = 0x10;\n                var temp8 = keccak256(memory[0x00:0x40]);\n                storage[temp8] = (memory[temp4:temp4 + 0x20] & (0x01 << 0xa0) - 0x01) | (storage[temp8] & ~((0x01 << 0xa0) - 0x01));\n                storage[temp8 + 0x01] = memory[temp5:temp5 + 0x20];\n                var temp9 = temp8 + 0x02;\n                storage[temp9] = !!memory[temp6:temp6 + 0x20] | (storage[temp9] & ~0xff);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = temp7;\n                var temp11 = memory[0x40:0x60];\n                log(memory[temp11:temp11 + temp10 - temp11 + 0x20], [0x99319fa1a5fca42d549d4d49989116496775f906f62e0e2ff2ea3c3aacdefa27]);\n                return;\n            } else {\n                var temp12 = returndata.length;\n                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function tokenOfOwnerByIndex(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var var1 = keccak256(memory[var0:var0 + 0x40]);\n        var var2 = arg1;\n    \n        if (var2 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var1;\n        return storage[keccak256(memory[0x00:0x20]) + var2];\n    }\n    \n    function func_07DB(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x12;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (arg0 & (0x01 << 0xa0) - 0x01) | (storage[temp0] & ~((0x01 << 0xa0) - 0x01));\n    }\n    \n    function bid(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x17e0;\n        var var0 = msg.sender;\n        var var1 = arg0;\n        arg1 = safeTransferFrom(var0, var1);\n    \n        if (arg1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x10;\n    \n        if (!(storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xff)) {\n        label_18B6:\n            var temp0 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp0 + 0x60;\n            var temp1 = msg.sender;\n            memory[temp0:temp0 + 0x20] = temp1;\n            var temp2 = msg.value;\n            var temp3 = temp0 + 0x20;\n            memory[temp3:temp3 + 0x20] = temp2;\n            var temp4 = temp0 + 0x40;\n            memory[temp4:temp4 + 0x20] = 0x01;\n            var temp5 = arg0;\n            memory[0x00:0x20] = temp5;\n            memory[0x20:0x40] = 0x10;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            storage[temp6] = (memory[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01) | (storage[temp6] & ~((0x01 << 0xa0) - 0x01));\n            storage[temp6 + 0x01] = memory[temp3:temp3 + 0x20];\n            var temp7 = temp6 + 0x02;\n            storage[temp7] = !!memory[temp4:temp4 + 0x20] | (storage[temp7] & ~0xff);\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = temp5;\n            memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp2;\n            memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = temp1;\n            var temp9 = memory[0x40:0x60];\n            log(memory[temp9:temp9 + temp8 - temp9 + 0x60], [0xcbf61548a249040d379a7f7a4486a18d78824bce978077f4943fb55e111af1c1]);\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x10;\n        \n            if (msg.value > storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x10;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                var temp11 = storage[temp10 + 0x01];\n                var temp12 = memory[0x40:0x60];\n                var temp13;\n                temp13, memory[temp12:temp12 + 0x00] = address(storage[temp10] & (0x01 << 0xa0) - 0x01).call.gas(!temp11 * 0x08fc).value(temp11)(memory[temp12:temp12 + 0x00]);\n                arg1 = !temp13;\n            \n                if (!arg1) { goto label_18B6; }\n            \n                var temp14 = returndata.length;\n                memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = 0x461bcd << 0xe5;\n                memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n                memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x1e;\n                memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x426964206d757374206265203e207468616e2063757272656e74206269640000;\n                var temp16 = memory[0x40:0x60];\n                revert(memory[temp16:temp16 + temp15 - temp16 + 0x64]);\n            }\n        }\n    }\n    \n    function tokenDidHaveFirstSale(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x11;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function tokenByIndex(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x00;\n        var var0 = 0x07;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1];\n    }\n    \n    function ownerOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_1993(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function useControlToken(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = temp0 + arg1;\n        var var0 = temp0;\n        var var1 = var0 + 0x40;\n        var var2 = msg.data[var0 + 0x20:var0 + 0x20 + 0x20];\n    \n        if (var2 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = var0 + var2;\n        var2 = temp1;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var2;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var2 = temp3;\n        var temp4 = var1;\n        var1 = temp2 + 0x20;\n        var var3 = temp4;\n    \n        if ((var2 > 0x01 << 0x20) | (var1 + var2 * 0x20 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var3;\n        var temp6 = var2;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + temp6 * 0x20 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = temp7 + 0x20;\n        var temp9 = temp6 * 0x20;\n        memory[temp8:temp8 + temp9] = msg.data[var1:var1 + temp9];\n        memory[temp8 + temp9:temp8 + temp9 + 0x20] = 0x00;\n        var temp10 = arg1;\n        arg1 = temp7;\n        var temp11 = var0;\n        var0 = temp10;\n        var1 = temp11;\n        var2 = temp5 + 0x20;\n        var3 = msg.data[temp5:temp5 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var1 + var3;\n        var3 = temp12;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var3;\n        var temp14 = msg.data[temp13:temp13 + 0x20];\n        var3 = temp14;\n        var var4 = var2;\n        var2 = temp13 + 0x20;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 * 0x20 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp15 = var3;\n        var temp16 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp16 + temp15 * 0x20 + 0x20;\n        memory[temp16:temp16 + 0x20] = temp15;\n        var temp17 = temp16 + 0x20;\n        var temp18 = temp15 * 0x20;\n        memory[temp17:temp17 + temp18] = msg.data[var2:var2 + temp18];\n        memory[temp17 + temp18:temp17 + temp18 + 0x20] = 0x00;\n        var0 = temp16;\n        var1 = 0x19f5;\n        var2 = msg.sender;\n        var3 = arg0;\n        var1 = safeTransferFrom(var2, var3);\n    \n        if (var1) {\n        label_1A28:\n        \n            if (var1) {\n                var1 = 0x60;\n                var temp19 = memory[var0:var0 + 0x20];\n                var temp20 = memory[0x40:0x60];\n                var3 = temp19;\n                var2 = temp20;\n                memory[var2:var2 + 0x20] = var3;\n                memory[0x40:0x60] = var2 + var3 * 0x20 + 0x20;\n            \n                if (!var3) {\n                    var1 = var2;\n                    var2 = 0x00;\n                \n                    if (var2 >= memory[arg1:arg1 + 0x20]) {\n                    label_1C21:\n                    \n                        if (!msg.value) {\n                        label_1C63:\n                            var2 = 0x1864c0e277c81ec1608d84e54d6f6c849f227acc0da19d9169fb0094d962f1c9;\n                            var3 = arg0;\n                            var4 = msg.value;\n                            var temp21 = arg1;\n                            var var5 = temp21;\n                            var var6 = var1;\n                            var var7 = var0;\n                            var temp22 = memory[0x40:0x60];\n                            var var8 = temp22;\n                            memory[var8:var8 + 0x20] = var3;\n                            var temp23 = var8 + 0x20;\n                            memory[temp23:temp23 + 0x20] = var4;\n                            var temp24 = temp23 + 0x20;\n                            var var9 = temp24;\n                            var var10 = var9 + 0x20;\n                            var var11 = var10 + 0x20;\n                            var temp25 = var11 + 0x20;\n                            memory[var9:var9 + 0x20] = temp25 - var8;\n                            memory[temp25:temp25 + 0x20] = memory[var5:var5 + 0x20];\n                            var var12 = temp25 + 0x20;\n                            var var13 = var5 + 0x20;\n                            var var14 = memory[var5:var5 + 0x20] * 0x20;\n                            var var15 = var14;\n                            var var16 = var12;\n                            var var17 = var13;\n                            var var18 = 0x00;\n                        \n                            if (var18 >= var15) {\n                            label_1CDD:\n                                var temp26 = var14 + var12;\n                                memory[var10:var10 + 0x20] = temp26 - var8;\n                                var temp27 = var6;\n                                memory[temp26:temp26 + 0x20] = memory[temp27:temp27 + 0x20];\n                                var12 = temp26 + 0x20;\n                                var13 = temp27 + 0x20;\n                                var14 = memory[temp27:temp27 + 0x20] * 0x20;\n                                var15 = var14;\n                                var16 = var12;\n                                var17 = var13;\n                                var18 = 0x00;\n                            \n                                if (var18 >= var15) {\n                                label_1D1C:\n                                    var temp28 = var14 + var12;\n                                    memory[var11:var11 + 0x20] = temp28 - var8;\n                                    var temp29 = var7;\n                                    memory[temp28:temp28 + 0x20] = memory[temp29:temp29 + 0x20];\n                                    var12 = temp28 + 0x20;\n                                    var13 = temp29 + 0x20;\n                                    var14 = memory[temp29:temp29 + 0x20] * 0x20;\n                                    var15 = var14;\n                                    var16 = var12;\n                                    var17 = var13;\n                                    var18 = 0x00;\n                                \n                                    if (var18 >= var15) {\n                                    label_1D5B:\n                                        var temp30 = memory[0x40:0x60];\n                                        log(memory[temp30:temp30 + (var14 + var12) - temp30], [stack[-17]]);\n                                        return;\n                                    } else {\n                                    label_1D4C:\n                                        var temp31 = var18;\n                                        memory[temp31 + var16:temp31 + var16 + 0x20] = memory[temp31 + var17:temp31 + var17 + 0x20];\n                                        var18 = temp31 + 0x20;\n                                    \n                                        if (var18 >= var15) { goto label_1D5B; }\n                                        else { goto label_1D4C; }\n                                    }\n                                } else {\n                                label_1D0D:\n                                    var temp32 = var18;\n                                    memory[temp32 + var16:temp32 + var16 + 0x20] = memory[temp32 + var17:temp32 + var17 + 0x20];\n                                    var18 = temp32 + 0x20;\n                                \n                                    if (var18 >= var15) { goto label_1D1C; }\n                                    else { goto label_1D0D; }\n                                }\n                            } else {\n                            label_1CCE:\n                                var temp33 = var18;\n                                memory[temp33 + var16:temp33 + var16 + 0x20] = memory[temp33 + var17:temp33 + var17 + 0x20];\n                                var18 = temp33 + 0x20;\n                            \n                                if (var18 >= var15) { goto label_1CDD; }\n                                else { goto label_1CCE; }\n                            }\n                        } else {\n                            var temp34 = memory[0x40:0x60];\n                            var temp35 = msg.value;\n                            var temp36;\n                            temp36, memory[temp34:temp34 + 0x00] = address(storage[0x17] & (0x01 << 0xa0) - 0x01).call.gas(!temp35 * 0x08fc).value(temp35)(memory[temp34:temp34 + 0x00]);\n                            var2 = !temp36;\n                        \n                            if (!var2) { goto label_1C63; }\n                        \n                            var temp37 = returndata.length;\n                            memory[0x00:0x00 + temp37] = returndata[0x00:0x00 + temp37];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                    label_1AB6:\n                        var3 = 0x00;\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x0e;\n                        var4 = keccak256(memory[0x00:0x40]) + 0x02;\n                        var5 = 0x00;\n                        var6 = arg1;\n                        var7 = var2;\n                    \n                        if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                    \n                        var temp38 = var5;\n                        memory[temp38:temp38 + 0x20] = memory[var7 * 0x20 + 0x20 + var6:var7 * 0x20 + 0x20 + var6 + 0x20];\n                        var temp39 = temp38 + 0x20;\n                        memory[temp39:temp39 + 0x20] = var4;\n                        var3 = keccak256(memory[0x00:0x00 + temp39 + 0x20]);\n                        var4 = storage[var3];\n                        var5 = var0;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        var temp40 = memory[var6 * 0x20 + 0x20 + var5:var6 * 0x20 + 0x20 + var5 + 0x20] i>= var4;\n                        var4 = temp40;\n                    \n                        if (!var4) {\n                        label_1B31:\n                        \n                            if (var4) {\n                                var4 = storage[var3 + 0x02];\n                                var5 = var0;\n                                var6 = var2;\n                            \n                                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                            \n                                if (memory[var6 * 0x20 + 0x20 + var5:var6 * 0x20 + 0x20 + var5 + 0x20] != var4) {\n                                    var4 = storage[var3 + 0x02];\n                                    var5 = var0;\n                                    var6 = var2;\n                                \n                                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                                \n                                    storage[var3 + 0x02] = memory[var6 * 0x20 + 0x20 + var5:var6 * 0x20 + 0x20 + var5 + 0x20];\n                                    var5 = var4;\n                                    var6 = var1;\n                                    var7 = var2;\n                                \n                                    if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                                \n                                    memory[var7 * 0x20 + var6 + 0x20:var7 * 0x20 + var6 + 0x20 + 0x20] = var5;\n                                    var2 = var2 + 0x01;\n                                \n                                    if (var2 >= memory[arg1:arg1 + 0x20]) { goto label_1C21; }\n                                    else { goto label_1AB6; }\n                                } else {\n                                    var temp41 = memory[0x40:0x60];\n                                    memory[temp41:temp41 + 0x20] = 0x461bcd << 0xe5;\n                                    memory[temp41 + 0x04:temp41 + 0x04 + 0x20] = 0x20;\n                                    memory[temp41 + 0x24:temp41 + 0x24 + 0x20] = 0x1a;\n                                    memory[temp41 + 0x44:temp41 + 0x44 + 0x20] = 0x4d7573742070726f7669646520646966666572656e742076616c000000000000;\n                                    var temp42 = memory[0x40:0x60];\n                                    revert(memory[temp42:temp42 + temp41 - temp42 + 0x64]);\n                                }\n                            } else {\n                                var temp43 = memory[0x40:0x60];\n                                memory[temp43:temp43 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp43 + 0x04:temp43 + 0x04 + 0x20] = 0x20;\n                                memory[temp43 + 0x24:temp43 + 0x24 + 0x20] = 0x0b;\n                                memory[temp43 + 0x44:temp43 + 0x44 + 0x20] = 0x125b9d985b1a59081d985b << 0xaa;\n                                var temp44 = memory[0x40:0x60];\n                                revert(memory[temp44:temp44 + temp43 - temp44 + 0x64]);\n                            }\n                        } else {\n                            var4 = storage[var3 + 0x01];\n                            var5 = var0;\n                            var6 = var2;\n                        \n                            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                        \n                            var4 = memory[var6 * 0x20 + 0x20 + var5:var6 * 0x20 + 0x20 + var5 + 0x20] i<= var4;\n                            goto label_1B31;\n                        }\n                    }\n                } else {\n                    var temp45 = var3 * 0x20;\n                    memory[var2 + 0x20:var2 + 0x20 + temp45] = code[code.length:code.length + temp45];\n                    var1 = var2;\n                    var2 = 0x00;\n                \n                    if (var2 >= memory[arg1:arg1 + 0x20]) { goto label_1C21; }\n                    else { goto label_1AB6; }\n                }\n            } else {\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = 0x461bcd << 0xe5;\n                memory[temp46 + 0x04:temp46 + 0x04 + 0x20] = 0x20;\n                memory[temp46 + 0x24:temp46 + 0x24 + 0x20] = 0x1a;\n                memory[temp46 + 0x44:temp46 + 0x44 + 0x20] = 0x4f776e6572206f72207065726d697373696f6e6564206f6e6c79000000000000;\n                var temp47 = memory[0x40:0x60];\n                revert(memory[temp47:temp47 + temp46 - temp47 + 0x64]);\n            }\n        } else {\n            var1 = msg.sender;\n            var2 = 0x12;\n            var3 = 0x00;\n            var4 = 0x1a09;\n            var5 = arg0;\n            var4 = func_1993(var5);\n            var temp48 = (0x01 << 0xa0) - 0x01;\n            var temp49 = var3;\n            memory[temp49:temp49 + 0x20] = temp48 & var4;\n            memory[temp49 + 0x20:temp49 + 0x20 + 0x20] = var2;\n            var1 = storage[keccak256(memory[0x00:0x00 + temp49 + 0x40])] & temp48 == var1;\n            goto label_1A28;\n        }\n    }\n    \n    function func_0A5E(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n    \n        if (msg.sender != storage[0x17] & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= 0x64) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x64;\n        var var2 = 0x1db0;\n        var var3 = arg1;\n        var var4 = var0;\n        var2 = func_2AD2(var3, var4);\n    \n        if (var2 >= var1) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        storage[0x13] = temp1;\n        var temp2 = arg1;\n        storage[0x14] = temp2;\n        var temp3 = var0;\n        storage[0x15] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp1;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp2;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x60], [0xd946966340b57e0fdcf288c7bb51c470709dcfcd5d883779d28cf85679f75814]);\n    }\n    \n    function updatePlatformAddress(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n    \n        if (msg.sender != storage[0x17] & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0 & (0x01 << 0xa0) - 0x01;\n        storage[0x17] = temp0 | (storage[0x17] & ~((0x01 << 0xa0) - 0x01));\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xb29030287f33baad1941013143d2e1bd5e66c87318f0bd99bc0fae51fe4b191f]);\n    }\n    \n    function getControlToken(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0e;\n        arg1 = 0x60;\n    \n        if (!(storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0e;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = 0x60;\n        var var3 = storage[var0];\n        var var2 = 0x1f1f;\n        var var4 = 0x03;\n        var2 = func_2B33(var3, var4);\n        var temp0 = memory[0x40:0x60];\n        var temp1 = var2;\n        var3 = temp1;\n        var2 = temp0;\n        memory[var2:var2 + 0x20] = var3;\n        memory[0x40:0x60] = var2 + var3 * 0x20 + 0x20;\n    \n        if (!var3) {\n            var1 = var2;\n            var2 = 0x00;\n            var3 = var2;\n        \n            if (var3 >= storage[var0]) {\n            label_2023:\n                return var1;\n            } else {\n            label_1F59:\n                memory[0x00:0x20] = var3;\n                memory[0x20:0x40] = var0 + 0x02;\n                var4 = storage[keccak256(memory[0x00:0x40])];\n                var var5 = var1;\n                var var6 = var2;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                var4 = 0x1f93;\n                var5 = var2;\n                var6 = 0x01;\n                var4 = func_2AD2(var5, var6);\n                var temp2 = var4;\n                var2 = temp2;\n                memory[0x00:0x20] = var3;\n                memory[0x20:0x40] = var0 + 0x02;\n                var4 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n                var5 = var1;\n                var6 = var2;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                var4 = 0x1fd6;\n                var5 = var2;\n                var6 = 0x01;\n                var4 = func_2AD2(var5, var6);\n                var temp3 = var4;\n                var2 = temp3;\n                memory[0x00:0x20] = var3;\n                memory[0x20:0x40] = var0 + 0x02;\n                var4 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                var5 = var1;\n                var6 = var2;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                var4 = 0x2019;\n                var5 = var2;\n                var6 = 0x01;\n                var4 = func_2AD2(var5, var6);\n                var2 = var4;\n                var3 = var3 + 0x01;\n            \n                if (var3 >= storage[var0]) { goto label_2023; }\n                else { goto label_1F59; }\n            }\n        } else {\n            var temp4 = var3 * 0x20;\n            memory[var2 + 0x20:var2 + 0x20 + temp4] = code[code.length:code.length + temp4];\n            var1 = var2;\n            var2 = 0x00;\n            var3 = var2;\n        \n            if (var3 >= storage[var0]) { goto label_2023; }\n            else { goto label_1F59; }\n        }\n    }\n    \n    function func_0B56(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x12;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & (0x01 << 0xa0) - 0x01;\n    }\n    \n    function setApprovalForAll(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = !!msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n    \n        if (msg.sender == arg0 & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x04;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = !!arg1;\n        storage[temp4] = temp5 | (storage[temp4] & ~0xff);\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, msg.sender, stack[-2] & (0x01 << 0xa0) - 0x01]);\n    }\n    \n    function buyPrices(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x0f;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function uniqueTokenCreators(var arg0, var arg1) returns (var arg0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = arg1;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1] & (0x01 << 0xa0) - 0x01;\n    }\n    \n    function tokenURI(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0b;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var var1 = temp0;\n        var temp1 = storage[var1];\n        var temp2 = memory[0x40:0x60];\n        var temp3 = (temp1 & !(temp1 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp3;\n        memory[0x40:0x60] = temp2 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp2:temp2 + 0x20] = var2;\n        arg1 = 0x60;\n        var var0 = temp2;\n        var var3 = var0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_249C:\n            return var0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_2493; }\n        \n        label_247F:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_247F; }\n        \n        label_2493:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_249C;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_249C;\n        }\n    }\n    \n    function pendingBids(var arg0) returns (var arg0, var r1, var r2) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x10;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & (0x01 << 0xa0) - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02] & 0xff;\n        return arg0, r1, r2;\n    }\n    \n    function makeBuyPrice(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x24e6;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        var0 = safeTransferFrom(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x0f;\n        var temp2 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp2;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp1;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x40], [0xd765eb1cf8aab1a01381fef8dcc9f755ef2d2233849716da96a90e32da84821a]);\n    }\n    \n    function isApprovedForAll(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20] & temp0;\n        r0 = func_2661(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x09];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x09;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_1020:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_1017; }\n        \n        label_1003:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_1003; }\n        \n        label_1017:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_1020;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_1020;\n        }\n    }\n    \n    function func_102B(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        return storage[keccak256(memory[0x00:0x40])] & (0x01 << 0xa0) - 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x07]; }\n    \n    function expectedTokenSupply() returns (var r0) { return storage[0x16]; }\n    \n    function func_1993(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])] & (0x01 << 0xa0) - 0x01;\n    \n        if (var1) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x0a];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x0a;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_1020:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_1017; }\n        \n        label_1003:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_1003; }\n        \n        label_1017:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_1020;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_1020;\n        }\n    }\n    \n    function func_23FB() returns (var r0) { return storage[0x13]; }\n    \n    function artistSecondSalePercentage() returns (var r0) { return storage[0x15]; }\n    \n    function func_24D6() returns (var r0) { return storage[0x14]; }\n    \n    function platformAddress() returns (var r0) { return storage[0x17] & (0x01 << 0xa0) - 0x01; }\n    \n    function func_2661(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function safeTransferFrom(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x272e;\n        var var3 = arg1;\n        var2 = func_1993(var3);\n        var1 = var2;\n        var2 = arg0 & (0x01 << 0xa0) - 0x01 == var1 & (0x01 << 0xa0) - 0x01;\n    \n        if (var2) {\n        label_2769:\n        \n            if (var2) {\n            label_2779:\n                return var2;\n            } else {\n                var2 = 0x2779;\n                var3 = var1;\n                var var4 = arg0;\n                var2 = func_2661(var3, var4);\n                goto label_2779;\n            }\n        } else {\n            var2 = arg0 & (0x01 << 0xa0) - 0x01;\n            var3 = 0x275e;\n            var4 = arg1;\n            var3 = func_102B(var4);\n            var2 = var3 & (0x01 << 0xa0) - 0x01 == var2;\n            goto label_2769;\n        }\n    }\n    \n    function balanceOf(var arg0) returns (var r0) { return storage[arg0]; }\n    \n    function func_2AD2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1b;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_2B33(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg0) { return 0x00; }\n    \n        var var1 = arg1 * arg0;\n        var var2 = arg1;\n        var var3 = arg0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = temp0 + 0x04;\n        var temp2 = temp1 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2 - temp1;\n        memory[temp2:temp2 + 0x20] = 0x21;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x21] = code[0x3267:0x3288];\n        var temp4 = memory[0x40:0x60];\n        revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n    }\n    \n    function func_2B8C(var arg0, var arg1, var arg2) {\n        var var0 = 0x16f2;\n        var var1 = arg0;\n        var var2 = arg1;\n        func_2CCF(var1, var2);\n    }\n    \n    function func_2B96(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        return !!(storage[keccak256(memory[0x00:0x40])] & (0x01 << 0xa0) - 0x01);\n    }\n    \n    function func_2CCF(var arg0, var arg1) {\n        var var0 = 0x2cd9;\n        var var1 = arg0;\n        var var2 = arg1;\n        func_302F(var1, var2);\n        var0 = 0x2ce3;\n        var1 = arg0;\n        var2 = arg1;\n        func_2EF5(var1, var2);\n        var0 = 0x265d;\n        var1 = arg1;\n        func_310F(var1);\n    }\n    \n    function func_2EF5(var arg0, var arg1) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = temp2;\n        memory[0x20:0x40] = 0x05;\n        storage[temp1] = temp2 + 0x01;\n        memory[0x00:0x20] = temp1;\n        storage[keccak256(memory[0x00:0x20]) + temp2] = temp0;\n    }\n    \n    function func_2F33(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1) {\n            var1 = 0x00;\n            var var2 = arg1;\n            var var3 = arg0;\n        \n            if (var2) { return var3 / var2; }\n            else { assert(); }\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = temp0 + 0x04;\n            var2 = temp1;\n            var3 = var2;\n            var temp2 = var3 + 0x20;\n            memory[var3:var3 + 0x20] = temp2 - var3;\n            var temp3 = var1;\n            memory[temp2:temp2 + 0x20] = memory[temp3:temp3 + 0x20];\n            var var4 = temp2 + 0x20;\n            var var6 = memory[temp3:temp3 + 0x20];\n            var var5 = temp3 + 0x20;\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n            var var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_2F84:\n                var temp4 = var6;\n                var4 = temp4 + var4;\n                var5 = temp4 & 0x1f;\n            \n                if (!var5) {\n                    var temp5 = memory[0x40:0x60];\n                    revert(memory[temp5:temp5 + var4 - temp5]);\n                } else {\n                    var temp6 = var5;\n                    var temp7 = var4 - temp6;\n                    memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                    var temp8 = memory[0x40:0x60];\n                    revert(memory[temp8:temp8 + (temp7 + 0x20) - temp8]);\n                }\n            } else {\n            label_2F75:\n                var temp9 = var10;\n                memory[temp9 + var8:temp9 + var8 + 0x20] = memory[temp9 + var9:temp9 + var9 + 0x20];\n                var10 = temp9 + 0x20;\n            \n                if (var10 >= var7) { goto label_2F84; }\n                else { goto label_2F75; }\n            }\n        }\n    }\n    \n    function func_2FD5(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        var temp1 = var1;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = memory[temp1:temp1 + 0x20];\n        var var2 = temp0 + 0x04;\n        var var3 = var2;\n        var var4 = temp0 + 0x44;\n        var var5 = temp1 + 0x20;\n        var var6 = memory[temp1:temp1 + 0x20];\n        var var7 = var6;\n        var var8 = var4;\n        var var9 = var5;\n        var var10 = 0x00;\n    \n        if (!var7) {\n        label_2F84:\n            var temp2 = var6;\n            var4 = temp2 + var4;\n            var5 = temp2 & 0x1f;\n        \n            if (!var5) {\n                var temp3 = memory[0x40:0x60];\n                revert(memory[temp3:temp3 + var4 - temp3]);\n            } else {\n                var temp4 = var5;\n                var temp5 = var4 - temp4;\n                memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                var temp6 = memory[0x40:0x60];\n                revert(memory[temp6:temp6 + (temp5 + 0x20) - temp6]);\n            }\n        } else {\n            var temp7 = var10;\n            memory[temp7 + var8:temp7 + var8 + 0x20] = memory[temp7 + var9:temp7 + var9 + 0x20];\n            var10 = temp7 + 0x20;\n        \n        label_2F6C:\n        \n            if (var10 >= var7) { goto label_2F84; }\n        \n            var temp8 = var10;\n            memory[temp8 + var8:temp8 + var8 + 0x20] = memory[temp8 + var9:temp8 + var9 + 0x20];\n            var10 = temp8 + 0x20;\n            goto label_2F6C;\n        }\n    }\n    \n    function func_302F(var arg0, var arg1) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x304b;\n        var var1 = arg1;\n        var0 = func_2B96(var1);\n    \n        if (!var0) {\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = 0x01;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = arg0 & (0x01 << 0xa0) - 0x01;\n            storage[temp0] = temp1 | (storage[temp0] & ~((0x01 << 0xa0) - 0x01));\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x03;\n            var1 = keccak256(memory[0x00:0x40]);\n            var0 = 0x30d3;\n            func_31A5(var1);\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, stack[-2] & (0x01 << 0xa0) - 0x01, stack[-1]]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x14;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x1d1bdad95b88185b1c9958591e481b5a5b9d1959 << 0x62;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        }\n    }\n    \n    function func_310F(var arg0) {\n        var temp0 = storage[0x07];\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        storage[0x07] = temp0 + 0x01;\n        memory[0x00:0x20] = 0x07;\n        storage[temp0 + 0xa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688] = temp1;\n    }\n    \n    function func_3153(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & (0x01 << 0xa0) - 0x01)) { return; }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~((0x01 << 0xa0) - 0x01);\n    }\n    \n    function func_31A5(var arg0) {\n        var temp0 = arg0;\n        storage[temp0] = storage[temp0] + 0x01;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x755db7b3 > var0) {\n            if (0x2b1fd58a > var0) {\n                if (0x0d392cd9 > var0) {\n                    if (var0 == 0x01ffc9a7) {\n                        // Dispatch table entry for supportsInterface(bytes4)\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0274;\n                        var var2 = 0x04;\n                        var var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = supportsInterface(var2, var3);\n                    \n                    label_0274:\n                        var temp0 = memory[0x40:0x60];\n                        memory[temp0:temp0 + 0x20] = !!var1;\n                        var temp1 = memory[0x40:0x60];\n                        return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n                    } else if (var0 == 0x041bb6ff) {\n                        // Dispatch table entry for 0x041bb6ff (unknown)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0274;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = func_02AB(var2, var3);\n                        goto label_0274;\n                    } else if (var0 == 0x06fdde03) {\n                        // Dispatch table entry for name()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x02d0;\n                        var1 = name();\n                    \n                    label_02D0:\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = 0x20;\n                        var temp3 = var1;\n                        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n                        var2 = temp2;\n                        var3 = var2;\n                        var var4 = var3 + 0x40;\n                        var var5 = temp3 + 0x20;\n                        var var6 = memory[temp3:temp3 + 0x20];\n                        var var7 = var6;\n                        var var8 = var4;\n                        var var9 = var5;\n                        var var10 = 0x00;\n                    \n                        if (var10 >= var7) {\n                        label_030A:\n                            var temp4 = var6;\n                            var4 = temp4 + var4;\n                            var5 = temp4 & 0x1f;\n                        \n                            if (!var5) {\n                                var temp5 = memory[0x40:0x60];\n                                return memory[temp5:temp5 + var4 - temp5];\n                            } else {\n                                var temp6 = var5;\n                                var temp7 = var4 - temp6;\n                                memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                                var temp8 = memory[0x40:0x60];\n                                return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                            }\n                        } else {\n                        label_02FB:\n                            var temp9 = var10;\n                            memory[temp9 + var8:temp9 + var8 + 0x20] = memory[temp9 + var9:temp9 + var9 + 0x20];\n                            var10 = temp9 + 0x20;\n                        \n                            if (var10 >= var7) { goto label_030A; }\n                            else { goto label_02FB; }\n                        }\n                    } else if (var0 == 0x081812fc) {\n                        // Dispatch table entry for getApproved(uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x036f;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = getApproved(var2, var3);\n                    \n                    label_036F:\n                        var temp10 = memory[0x40:0x60];\n                        memory[temp10:temp10 + 0x20] = var1 & (0x01 << 0xa0) - 0x01;\n                        var temp11 = memory[0x40:0x60];\n                        return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n                    } else if (var0 == 0x095ea7b3) {\n                        // Dispatch table entry for approve(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x03c4;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                    \n                        approve(var2, var3);\n                        stop();\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x0d392cd9) {\n                    // Dispatch table entry for updateWhitelist(address,bool)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    updateWhitelist(var2, var3);\n                    stop();\n                } else if (var0 == 0x0eaaf4c8) {\n                    // Dispatch table entry for withdrawBid(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    withdrawBid(var2, var3);\n                    stop();\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0440;\n                    var1 = totalSupply();\n                \n                label_0440:\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = var1;\n                    var temp13 = memory[0x40:0x60];\n                    return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n                } else if (var0 == 0x1e9b0f52) {\n                    // Dispatch table entry for 0x1e9b0f52 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0xc0) { revert(memory[0x00:0x00]); }\n                \n                    var temp14 = var2;\n                    var2 = msg.data[temp14:temp14 + 0x20];\n                    var4 = temp14;\n                    var3 = var4 + var3;\n                    var5 = var4 + 0x40;\n                    var6 = msg.data[var4 + 0x20:var4 + 0x20 + 0x20];\n                \n                    if (var6 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp15 = var4 + var6;\n                    var6 = temp15;\n                \n                    if (var6 + 0x20 > var3) { revert(memory[0x00:0x00]); }\n                \n                    var temp16 = var6;\n                    var temp17 = msg.data[temp16:temp16 + 0x20];\n                    var6 = temp17;\n                    var temp18 = var5;\n                    var5 = temp16 + 0x20;\n                    var7 = temp18;\n                \n                    if ((var6 > 0x01 << 0x20) | (var5 + var6 > var3)) { revert(memory[0x00:0x00]); }\n                \n                    var temp19 = var7;\n                    var temp20 = var6;\n                    var temp21 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp21 + (temp20 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    memory[temp21:temp21 + 0x20] = temp20;\n                    var temp22 = temp21 + 0x20;\n                    memory[temp22:temp22 + temp20] = msg.data[var5:var5 + temp20];\n                    memory[temp22 + temp20:temp22 + temp20 + 0x20] = 0x00;\n                    var temp23 = var3;\n                    var3 = temp21;\n                    var temp24 = var4;\n                    var4 = temp23;\n                    var5 = temp24;\n                    var6 = temp19 + 0x20;\n                    var7 = msg.data[temp19:temp19 + 0x20];\n                \n                    if (var7 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp25 = var5 + var7;\n                    var7 = temp25;\n                \n                    if (var7 + 0x20 > var4) { revert(memory[0x00:0x00]); }\n                \n                    var temp26 = var7;\n                    var temp27 = msg.data[temp26:temp26 + 0x20];\n                    var7 = temp27;\n                    var8 = var6;\n                    var6 = temp26 + 0x20;\n                \n                    if ((var7 > 0x01 << 0x20) | (var6 + var7 * 0x20 > var4)) { revert(memory[0x00:0x00]); }\n                \n                    var temp28 = var8;\n                    var temp29 = var7;\n                    var temp30 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp30 + temp29 * 0x20 + 0x20;\n                    memory[temp30:temp30 + 0x20] = temp29;\n                    var temp31 = temp30 + 0x20;\n                    var temp32 = temp29 * 0x20;\n                    memory[temp31:temp31 + temp32] = msg.data[var6:var6 + temp32];\n                    memory[temp31 + temp32:temp31 + temp32 + 0x20] = 0x00;\n                    var temp33 = var4;\n                    var4 = temp30;\n                    var temp34 = var5;\n                    var5 = temp33;\n                    var6 = temp34;\n                    var7 = temp28 + 0x20;\n                    var8 = msg.data[temp28:temp28 + 0x20];\n                \n                    if (var8 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp35 = var6 + var8;\n                    var8 = temp35;\n                \n                    if (var8 + 0x20 > var5) { revert(memory[0x00:0x00]); }\n                \n                    var temp36 = var8;\n                    var temp37 = msg.data[temp36:temp36 + 0x20];\n                    var8 = temp37;\n                    var9 = var7;\n                    var7 = temp36 + 0x20;\n                \n                    if ((var8 > 0x01 << 0x20) | (var7 + var8 * 0x20 > var5)) { revert(memory[0x00:0x00]); }\n                \n                    var temp38 = var9;\n                    var temp39 = var8;\n                    var temp40 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp40 + temp39 * 0x20 + 0x20;\n                    memory[temp40:temp40 + 0x20] = temp39;\n                    var temp41 = temp40 + 0x20;\n                    var temp42 = temp39 * 0x20;\n                    memory[temp41:temp41 + temp42] = msg.data[var7:var7 + temp42];\n                    memory[temp41 + temp42:temp41 + temp42 + 0x20] = 0x00;\n                    var temp43 = var5;\n                    var5 = temp40;\n                    var temp44 = var6;\n                    var6 = temp43;\n                    var7 = temp44;\n                    var8 = temp38 + 0x20;\n                    var9 = msg.data[temp38:temp38 + 0x20];\n                \n                    if (var9 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp45 = var7 + var9;\n                    var9 = temp45;\n                \n                    if (var9 + 0x20 > var6) { revert(memory[0x00:0x00]); }\n                \n                    var temp46 = var9;\n                    var temp47 = msg.data[temp46:temp46 + 0x20];\n                    var9 = temp47;\n                    var10 = var8;\n                    var8 = temp46 + 0x20;\n                \n                    if ((var9 > 0x01 << 0x20) | (var8 + var9 * 0x20 > var6)) { revert(memory[0x00:0x00]); }\n                \n                    var temp48 = var10;\n                    var temp49 = var9;\n                    var temp50 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp50 + temp49 * 0x20 + 0x20;\n                    memory[temp50:temp50 + 0x20] = temp49;\n                    var temp51 = temp50 + 0x20;\n                    var temp52 = temp49 * 0x20;\n                    memory[temp51:temp51 + temp52] = msg.data[var8:var8 + temp52];\n                    memory[temp51 + temp52:temp51 + temp52 + 0x20] = 0x00;\n                    var temp53 = var6;\n                    var6 = temp50;\n                    var temp54 = var7;\n                    var7 = temp53;\n                    var8 = temp54;\n                    var9 = temp48 + 0x20;\n                    var10 = msg.data[temp48:temp48 + 0x20];\n                \n                    if (var10 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp55 = var8 + var10;\n                    var10 = temp55;\n                \n                    if (var10 + 0x20 > var7) { revert(memory[0x00:0x00]); }\n                \n                    var temp56 = var10;\n                    var temp57 = msg.data[temp56:temp56 + 0x20];\n                    var10 = temp57;\n                    var var11 = var9;\n                    var9 = temp56 + 0x20;\n                \n                    if ((var10 > 0x01 << 0x20) | (var9 + var10 * 0x20 > var7)) { revert(memory[0x00:0x00]); }\n                \n                    var temp58 = var10;\n                    var temp59 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp59 + temp58 * 0x20 + 0x20;\n                    memory[temp59:temp59 + 0x20] = temp58;\n                    var temp60 = temp59 + 0x20;\n                    var temp61 = temp58 * 0x20;\n                    memory[temp60:temp60 + temp61] = msg.data[var9:var9 + temp61];\n                    memory[temp60 + temp61:temp60 + temp61 + 0x20] = 0x00;\n                    var7 = temp59;\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x0e;\n                \n                    if (storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xff) {\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x0e;\n                    \n                        if (!(storage[keccak256(memory[0x00:0x40]) + 0x01] / 0x0100 & 0xff)) {\n                            memory[0x00:0x20] = var2;\n                            memory[0x20:0x40] = 0x0d;\n                            var9 = keccak256(memory[0x00:0x40]);\n                            var8 = msg.sender;\n                            var10 = 0x00;\n                        \n                            if (!storage[var9]) { assert(); }\n                        \n                            memory[0x00:0x20] = var9;\n                        \n                            if (storage[keccak256(memory[0x00:0x20]) + var10] & (0x01 << 0xa0) - 0x01 == var8) {\n                                var8 = memory[var4:var4 + 0x20] == memory[var5:var5 + 0x20];\n                            \n                                if (!var8) {\n                                    if (var8) {\n                                    label_13F2:\n                                        var8 = 0x13fc;\n                                        var9 = msg.sender;\n                                        var10 = var2;\n                                    \n                                    label_268F:\n                                        var11 = 0x265d;\n                                        var var12 = var9;\n                                        var var13 = var10;\n                                        var temp62 = memory[0x40:0x60];\n                                        var var14 = temp62;\n                                        memory[0x40:0x60] = var14 + 0x20;\n                                        memory[var14:var14 + 0x20] = 0x00;\n                                        func_2B8C(var12, var13, var14);\n                                        // Error: Could not resolve jump destination!\n                                    } else {\n                                    label_13AE:\n                                        var temp63 = memory[0x40:0x60];\n                                        memory[temp63:temp63 + 0x20] = 0x461bcd << 0xe5;\n                                        memory[temp63 + 0x04:temp63 + 0x04 + 0x20] = 0x20;\n                                        memory[temp63 + 0x24:temp63 + 0x24 + 0x20] = 0x15;\n                                        memory[temp63 + 0x44:temp63 + 0x44 + 0x20] = 0x0acc2d8eacae640c2e4e4c2f240dad2e6dac2e8c6d << 0x5b;\n                                        var temp64 = memory[0x40:0x60];\n                                        revert(memory[temp64:temp64 + temp63 - temp64 + 0x64]);\n                                    }\n                                } else if (memory[var5:var5 + 0x20] == memory[var6:var6 + 0x20]) { goto label_13F2; }\n                                else { goto label_13AE; }\n                            } else {\n                                var temp65 = memory[0x40:0x60];\n                                memory[temp65:temp65 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp65 + 0x04:temp65 + 0x04 + 0x20] = 0x20;\n                                memory[temp65 + 0x24:temp65 + 0x24 + 0x20] = 0x1c;\n                                memory[temp65 + 0x44:temp65 + 0x44 + 0x20] = 0x4d75737420626520636f6e74726f6c20746f6b656e2061727469737400000000;\n                                var temp66 = memory[0x40:0x60];\n                                revert(memory[temp66:temp66 + temp65 - temp66 + 0x64]);\n                            }\n                        } else {\n                            var temp67 = memory[0x40:0x60];\n                            memory[temp67:temp67 + 0x20] = 0x461bcd << 0xe5;\n                            memory[temp67 + 0x04:temp67 + 0x04 + 0x20] = 0x20;\n                            memory[temp67 + 0x24:temp67 + 0x24 + 0x20] = 0x0d;\n                            memory[temp67 + 0x44:temp67 + 0x44 + 0x20] = 0x0416c726561647920736574757 << 0x9c;\n                            var temp68 = memory[0x40:0x60];\n                            revert(memory[temp68:temp68 + temp67 - temp68 + 0x64]);\n                        }\n                    } else {\n                        var temp69 = memory[0x40:0x60];\n                        memory[temp69:temp69 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp69 + 0x04:temp69 + 0x04 + 0x20] = 0x20;\n                        memory[temp69 + 0x24:temp69 + 0x24 + 0x20] = 0x16;\n                        memory[temp69 + 0x44:temp69 + 0x44 + 0x20] = 0x139bc818dbdb9d1c9bdb081d1bdad95b88199bdd5b99 << 0x52;\n                        var temp70 = memory[0x40:0x60];\n                        revert(memory[temp70:temp70 + temp69 - temp70 + 0x64]);\n                    }\n                } else if (var0 == 0x23b872dd) {\n                    // Dispatch table entry for transferFrom(address,address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    var temp71 = (0x01 << 0xa0) - 0x01;\n                    var temp72 = var2;\n                    var2 = temp71 & msg.data[temp72:temp72 + 0x20];\n                    var3 = temp71 & msg.data[temp72 + 0x20:temp72 + 0x20 + 0x20];\n                    var4 = msg.data[temp72 + 0x40:temp72 + 0x40 + 0x20];\n                    var5 = 0x16de;\n                    var6 = msg.sender;\n                    var7 = var4;\n                    var5 = safeTransferFrom(var6, var7);\n                \n                    if (!var5) { revert(memory[0x00:0x00]); }\n                \n                    var5 = 0x16f2;\n                    var6 = var2;\n                    var7 = var3;\n                    var8 = var4;\n                \n                label_2781:\n                    var9 = 0x278c;\n                    var10 = var6;\n                    var11 = var7;\n                    var12 = var8;\n                    var13 = 0x2bbe;\n                    var14 = var10;\n                    var var15 = var11;\n                    var var16 = var12;\n                    var var17 = var14 & (0x01 << 0xa0) - 0x01;\n                    var var18 = 0x2cff;\n                    var var19 = var16;\n                    var18 = func_1993(var19);\n                \n                    if (var18 & (0x01 << 0xa0) - 0x01 != var17) {\n                        var temp74 = memory[0x40:0x60];\n                        memory[temp74:temp74 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp74 + 0x04:temp74 + 0x04 + 0x20] = 0x20;\n                        memory[temp74 + 0x24:temp74 + 0x24 + 0x20] = 0x09;\n                        memory[temp74 + 0x44:temp74 + 0x44 + 0x20] = 0x3737ba1037bbb732b9 << 0xb9;\n                        var temp75 = memory[0x40:0x60];\n                        revert(memory[temp75:temp75 + temp74 - temp75 + 0x64]);\n                    } else if (var15 & (0x01 << 0xa0) - 0x01) {\n                        var17 = 0x2d62;\n                        var18 = var16;\n                        func_3153(var18);\n                        memory[0x00:0x20] = var14 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var17 = 0x2d83;\n                        var18 = keccak256(memory[0x00:0x40]);\n                        var19 = 0x31a1;\n                        var var20 = storage[var18];\n                        var var21 = 0x01;\n                        var var22 = 0x00;\n                        var var23 = 0x2b2c;\n                        var var24 = var20;\n                        var var25 = var21;\n                        var temp73 = memory[0x40:0x60];\n                        var var26 = temp73;\n                        memory[0x40:0x60] = var26 + 0x40;\n                        memory[var26:var26 + 0x20] = 0x1e;\n                        memory[var26 + 0x20:var26 + 0x20 + 0x20] = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n                        var23 = func_2FD5(var24, var25, var26);\n                    \n                    label_2B2C:\n                        var19 = var23;\n                        // Error: Could not resolve jump destination!\n                    } else { revert(memory[0x00:0x00]); }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0x462399cd > var0) {\n                if (var0 == 0x2b1fd58a) {\n                    // Dispatch table entry for acceptBid(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = msg.data[var2:var2 + 0x20];\n                    var3 = 0x1701;\n                    var4 = msg.sender;\n                    var5 = var2;\n                    var3 = safeTransferFrom(var4, var5);\n                \n                    if (!var3) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x10;\n                \n                    if (!(storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xff)) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x10;\n                    var temp76 = keccak256(memory[0x00:0x40]);\n                    var3 = 0x1751;\n                    var5 = storage[temp76 + 0x01];\n                    var4 = var2;\n                    var6 = storage[temp76] & (0x01 << 0xa0) - 0x01;\n                \n                label_279F:\n                    memory[0x00:0x20] = var4;\n                    memory[0x20:0x40] = 0x11;\n                \n                    if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) {\n                        var7 = 0x00;\n                        memory[var7:var7 + 0x20] = var4;\n                        memory[0x20:0x40] = 0x11;\n                        var temp77 = keccak256(memory[var7:var7 + 0x40]);\n                        storage[temp77] = (storage[temp77] & ~0xff) | 0x01;\n                        var8 = 0x2945;\n                        var9 = 0x64;\n                        var10 = 0x27d2;\n                        var11 = var5;\n                        var12 = storage[0x13];\n                        var10 = func_2B33(var11, var12);\n                    \n                    label_27D2:\n                        var temp78 = var9;\n                        var9 = var10;\n                        var10 = temp78;\n                        var11 = 0x00;\n                        var12 = 0x2b2c;\n                        var13 = var9;\n                        var14 = var10;\n                        var temp79 = memory[0x40:0x60];\n                        var15 = temp79;\n                        memory[0x40:0x60] = var15 + 0x40;\n                        memory[var15:var15 + 0x20] = 0x1a;\n                        memory[var15 + 0x20:var15 + 0x20 + 0x20] = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n                        var12 = func_2F33(var13, var14, var15);\n                        goto label_2B2C;\n                    } else {\n                        var7 = 0x00;\n                        var8 = 0x27de;\n                        var9 = 0x64;\n                        var10 = 0x27d2;\n                        var11 = var5;\n                        var12 = storage[0x14];\n                        var10 = func_2B33(var11, var12);\n                        goto label_27D2;\n                    }\n                } else if (var0 == 0x2f745c59) {\n                    // Dispatch table entry for tokenOfOwnerByIndex(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0440;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = tokenOfOwnerByIndex(var2, var3);\n                    goto label_0440;\n                } else if (var0 == 0x41afca00) {\n                    // Dispatch table entry for 0x41afca00 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    func_07DB(var2, var3);\n                    stop();\n                } else if (var0 == 0x42842e0e) {\n                    // Dispatch table entry for safeTransferFrom(address,address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    var temp80 = (0x01 << 0xa0) - 0x01;\n                    var temp81 = var2;\n                    var2 = temp80 & msg.data[temp81:temp81 + 0x20];\n                    var3 = temp80 & msg.data[temp81 + 0x20:temp81 + 0x20 + 0x20];\n                    var4 = msg.data[temp81 + 0x40:temp81 + 0x40 + 0x20];\n                    var5 = 0x16f2;\n                    var6 = var2;\n                    var7 = var3;\n                    var8 = var4;\n                    var temp82 = memory[0x40:0x60];\n                    var9 = temp82;\n                    memory[0x40:0x60] = var9 + 0x20;\n                    memory[var9:var9 + 0x20] = 0x00;\n                \n                label_23DD:\n                    var10 = 0x23e7;\n                    var11 = msg.sender;\n                    var12 = var8;\n                    var10 = safeTransferFrom(var11, var12);\n                \n                    if (!var10) { revert(memory[0x00:0x00]); }\n                \n                    var10 = 0x230c;\n                    var11 = var6;\n                    var12 = var7;\n                    var13 = var8;\n                    goto label_2781;\n                } else if (var0 == 0x454a2ab3) {\n                    // Dispatch table entry for bid(uint256)\n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    bid(var2, var3);\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x462399cd) {\n                // Dispatch table entry for tokenDidHaveFirstSale(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0274;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = tokenDidHaveFirstSale(var2, var3);\n                goto label_0274;\n            } else if (var0 == 0x4f6ccce7) {\n                // Dispatch table entry for tokenByIndex(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = tokenByIndex(var2, var3);\n                goto label_0440;\n            } else if (var0 == 0x556d8628) {\n                // Dispatch table entry for expectedTokenSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = expectedTokenSupply();\n                goto label_0440;\n            } else if (var0 == 0x6352211e) {\n                // Dispatch table entry for ownerOf(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x036f;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = ownerOf(var2, var3);\n                goto label_036F;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = msg.data[var2:var2 + 0x20] & (0x01 << 0xa0) - 0x01;\n                var3 = 0x00;\n            \n                if (!(var2 & (0x01 << 0xa0) - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x03;\n                var4 = 0x1786;\n                var5 = keccak256(memory[0x00:0x40]);\n                var4 = balanceOf(var5);\n                var1 = var4;\n                // Error: Could not resolve jump destination!\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xb88d4fde > var0) {\n            if (0x98207051 > var0) {\n                if (var0 == 0x755db7b3) {\n                    // Dispatch table entry for useControlToken(uint256,uint256[],int256[])\n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    useControlToken(var2, var3);\n                    stop();\n                } else if (var0 == 0x8cb6ddcb) {\n                    // Dispatch table entry for 0x8cb6ddcb (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    func_0A5E(var2, var3);\n                    stop();\n                } else if (var0 == 0x8f9f193f) {\n                    // Dispatch table entry for updatePlatformAddress(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    updatePlatformAddress(var2, var3);\n                    stop();\n                } else if (var0 == 0x95d89b41) {\n                    // Dispatch table entry for symbol()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02d0;\n                    var1 = symbol();\n                    goto label_02D0;\n                } else if (var0 == 0x96bc50b0) {\n                    // Dispatch table entry for getControlToken(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0ae3;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = getControlToken(var2, var3);\n                    var temp83 = memory[0x40:0x60];\n                    memory[temp83:temp83 + 0x20] = 0x20;\n                    var temp84 = var1;\n                    memory[temp83 + 0x20:temp83 + 0x20 + 0x20] = memory[temp84:temp84 + 0x20];\n                    var2 = temp83;\n                    var3 = var2;\n                    var4 = var3 + 0x40;\n                    var5 = temp84 + 0x20;\n                    var6 = memory[temp84:temp84 + 0x20] * 0x20;\n                    var7 = var6;\n                    var8 = var4;\n                    var9 = var5;\n                    var10 = 0x00;\n                \n                    if (var10 >= var7) {\n                    label_0B1F:\n                        var temp85 = memory[0x40:0x60];\n                        return memory[temp85:temp85 + (var6 + var4) - temp85];\n                    } else {\n                    label_0B10:\n                        var temp86 = var10;\n                        memory[temp86 + var8:temp86 + var8 + 0x20] = memory[temp86 + var9:temp86 + var9 + 0x20];\n                        var10 = temp86 + 0x20;\n                    \n                        if (var10 >= var7) { goto label_0B1F; }\n                        else { goto label_0B10; }\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x98207051) {\n                // Dispatch table entry for 0x98207051 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x036f;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = func_0B56(var2, var3);\n                goto label_036F;\n            } else if (var0 == 0x98c8103e) {\n                // Dispatch table entry for mintArtwork(uint256,string,address[])\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var temp87 = var2;\n                var2 = msg.data[temp87:temp87 + 0x20];\n                var3 = temp87 + var3;\n                var4 = temp87;\n                var5 = var4 + 0x40;\n                var6 = msg.data[var4 + 0x20:var4 + 0x20 + 0x20];\n            \n                if (var6 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp88 = var4 + var6;\n                var6 = temp88;\n            \n                if (var6 + 0x20 > var3) { revert(memory[0x00:0x00]); }\n            \n                var temp89 = var6;\n                var temp90 = msg.data[temp89:temp89 + 0x20];\n                var6 = temp90;\n                var temp91 = var5;\n                var5 = temp89 + 0x20;\n                var7 = temp91;\n            \n                if ((var6 > 0x01 << 0x20) | (var5 + var6 > var3)) { revert(memory[0x00:0x00]); }\n            \n                var temp92 = var7;\n                var temp93 = var6;\n                var temp94 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp94 + (temp93 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp94:temp94 + 0x20] = temp93;\n                var temp95 = temp94 + 0x20;\n                memory[temp95:temp95 + temp93] = msg.data[var5:var5 + temp93];\n                memory[temp95 + temp93:temp95 + temp93 + 0x20] = 0x00;\n                var temp96 = var3;\n                var3 = temp94;\n                var temp97 = var4;\n                var4 = temp96;\n                var5 = temp97;\n                var6 = temp92 + 0x20;\n                var7 = msg.data[temp92:temp92 + 0x20];\n            \n                if (var7 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp98 = var5 + var7;\n                var7 = temp98;\n            \n                if (var7 + 0x20 > var4) { revert(memory[0x00:0x00]); }\n            \n                var temp99 = var7;\n                var temp100 = msg.data[temp99:temp99 + 0x20];\n                var7 = temp100;\n                var temp101 = var6;\n                var6 = temp99 + 0x20;\n                var8 = temp101;\n            \n                if ((var7 > 0x01 << 0x20) | (var6 + var7 * 0x20 > var4)) { revert(memory[0x00:0x00]); }\n            \n                var temp102 = var7;\n                var temp103 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp103 + temp102 * 0x20 + 0x20;\n                memory[temp103:temp103 + 0x20] = temp102;\n                var temp104 = temp103 + 0x20;\n                var temp105 = temp102 * 0x20;\n                memory[temp104:temp104 + temp105] = msg.data[var6:var6 + temp105];\n                memory[temp104 + temp105:temp104 + temp105 + 0x20] = 0x00;\n                var4 = temp103;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0c;\n            \n                if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != 0x01) { revert(memory[0x00:0x00]); }\n            \n                if (var2 == storage[0x16]) {\n                    var5 = 0x20c9;\n                    var6 = msg.sender;\n                    var7 = var2;\n                    goto label_268F;\n                } else {\n                    var temp106 = memory[0x40:0x60];\n                    memory[temp106:temp106 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp106 + 0x04:temp106 + 0x04 + 0x20] = 0x20;\n                    memory[temp106 + 0x24:temp106 + 0x24 + 0x20] = 0x1d;\n                    memory[temp106 + 0x44:temp106 + 0x44 + 0x20] = 0x4578706563746564546f6b656e537570706c7920646966666572656e74000000;\n                    var temp107 = memory[0x40:0x60];\n                    revert(memory[temp107:temp107 + temp106 - temp107 + 0x64]);\n                }\n            } else if (var0 == 0xa22cb465) {\n                // Dispatch table entry for setApprovalForAll(address,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                setApprovalForAll(var2, var3);\n                stop();\n            } else if (var0 == 0xa90d6de3) {\n                // Dispatch table entry for buyPrices(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = buyPrices(var2, var3);\n                goto label_0440;\n            } else if (var0 == 0xa94141a1) {\n                // Dispatch table entry for uniqueTokenCreators(uint256,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x036f;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var2 = uniqueTokenCreators(var2, var3);\n                goto label_036F;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xd66767ab > var0) {\n            if (var0 == 0xb88d4fde) {\n                // Dispatch table entry for safeTransferFrom(address,address,uint256,bytes)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n            \n                var temp108 = (0x01 << 0xa0) - 0x01;\n                var temp109 = var2;\n                var2 = temp108 & msg.data[temp109:temp109 + 0x20];\n                var temp110 = var3;\n                var3 = temp108 & msg.data[temp109 + 0x20:temp109 + 0x20 + 0x20];\n                var4 = msg.data[temp109 + 0x40:temp109 + 0x40 + 0x20];\n                var5 = temp109 + temp110;\n                var6 = temp109;\n                var7 = var6 + 0x80;\n                var8 = msg.data[var6 + 0x60:var6 + 0x60 + 0x20];\n            \n                if (var8 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp111 = var6 + var8;\n                var8 = temp111;\n            \n                if (var8 + 0x20 > var5) { revert(memory[0x00:0x00]); }\n            \n                var temp112 = var8;\n                var temp113 = msg.data[temp112:temp112 + 0x20];\n                var8 = temp113;\n                var temp114 = var7;\n                var7 = temp112 + 0x20;\n                var9 = temp114;\n            \n                if ((var8 > 0x01 << 0x20) | (var7 + var8 > var5)) { revert(memory[0x00:0x00]); }\n            \n                var temp115 = var8;\n                var temp116 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp116 + (temp115 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp116:temp116 + 0x20] = temp115;\n                var temp117 = temp116 + 0x20;\n                memory[temp117:temp117 + temp115] = msg.data[var7:var7 + temp115];\n                memory[temp117 + temp115:temp117 + temp115 + 0x20] = 0x00;\n                var5 = temp116;\n                goto label_23DD;\n            } else if (var0 == 0xb8c18015) {\n                // Dispatch table entry for 0xb8c18015 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = func_23FB();\n                goto label_0440;\n            } else if (var0 == 0xbab2d111) {\n                // Dispatch table entry for artistSecondSalePercentage()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = artistSecondSalePercentage();\n                goto label_0440;\n            } else if (var0 == 0xc87b56dd) {\n                // Dispatch table entry for tokenURI(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d0;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = tokenURI(var2, var3);\n                goto label_02D0;\n            } else if (var0 == 0xcf8589b9) {\n                // Dispatch table entry for pendingBids(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0e84;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2, var3, var4 = pendingBids(var2);\n                var temp118 = memory[0x40:0x60];\n                memory[temp118:temp118 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                memory[temp118 + 0x20:temp118 + 0x20 + 0x20] = var3;\n                memory[temp118 + 0x40:temp118 + 0x40 + 0x20] = !!var4;\n                var temp119 = memory[0x40:0x60];\n                return memory[temp119:temp119 + temp118 - temp119 + 0x60];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xd66767ab) {\n            // Dispatch table entry for 0xd66767ab (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0440;\n            var2 = func_24D6();\n            goto label_0440;\n        } else if (var0 == 0xd91c070c) {\n            // Dispatch table entry for makeBuyPrice(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03c4;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            makeBuyPrice(var2, var3);\n            stop();\n        } else if (var0 == 0xdbe55e56) {\n            // Dispatch table entry for platformAddress()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x036f;\n            var2 = platformAddress();\n            goto label_036F;\n        } else if (var0 == 0xe66c7f35) {\n            // Dispatch table entry for 0xe66c7f35 (unknown)\n            var1 = 0x03c4;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2 = msg.data[var2:var2 + 0x20];\n            var3 = 0x2559;\n            var4 = msg.sender;\n            var5 = var2;\n            var3 = safeTransferFrom(var4, var5);\n        \n            if (var3) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x0f;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (!var3) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value < var3) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x10;\n        \n            if (!(storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xff)) {\n            label_2652:\n                var4 = 0x265d;\n                var5 = var2;\n                var6 = var3;\n                var7 = msg.sender;\n                goto label_279F;\n            } else {\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x10;\n                var temp120 = keccak256(memory[0x00:0x40]);\n                var temp121 = storage[temp120 + 0x01];\n                var temp122 = memory[0x40:0x60];\n                var temp123;\n                temp123, memory[temp122:temp122 + 0x00] = address(storage[temp120] & (0x01 << 0xa0) - 0x01).call.gas(!temp121 * 0x08fc).value(temp121)(memory[temp122:temp122 + 0x00]);\n                var4 = !temp123;\n            \n                if (!var4) {\n                    var temp124 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp124 + 0x60;\n                    memory[temp124:temp124 + 0x20] = 0x00;\n                    var temp125 = temp124 + 0x20;\n                    memory[temp125:temp125 + 0x20] = 0x00;\n                    var temp126 = temp124 + 0x40;\n                    memory[temp126:temp126 + 0x20] = 0x00;\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x10;\n                    var temp127 = keccak256(memory[0x00:0x40]);\n                    storage[temp127] = (memory[temp124:temp124 + 0x20] & (0x01 << 0xa0) - 0x01) | (storage[temp127] & ~((0x01 << 0xa0) - 0x01));\n                    storage[temp127 + 0x01] = memory[temp125:temp125 + 0x20];\n                    var temp128 = temp127 + 0x02;\n                    storage[temp128] = !!memory[temp126:temp126 + 0x20] | (storage[temp128] & ~0xff);\n                    goto label_2652;\n                } else {\n                    var temp129 = returndata.length;\n                    memory[0x00:0x00 + temp129] = returndata[0x00:0x00 + temp129];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            }\n        } else if (var0 == 0xe985e9c5) {\n            // Dispatch table entry for isApprovedForAll(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0274;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = isApprovedForAll(var2, var3);\n            goto label_0274;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function supportsInterface(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & ~((0x01 << 0xe0) - 0x01);\n        memory[0x00:0x20] = arg0 & ~((0x01 << 0xe0) - 0x01);\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_02AB(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getApproved(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_102B(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function approve(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x1051;\n        var var2 = arg1;\n        var1 = func_1993(var2);\n        var0 = var1;\n    \n        if (arg0 & (0x01 << 0xa0) - 0x01 == var0 & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var1 = var0 & (0x01 << 0xa0) - 0x01 == msg.sender;\n    \n        if (var1) {\n        label_108E:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n            var temp1 = arg1;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = (0x01 << 0xa0) - 0x01;\n            var temp4 = temp3 & arg0;\n            storage[temp2] = temp4 | (storage[temp2] & ~((0x01 << 0xa0) - 0x01));\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-1] & (0x01 << 0xa0) - 0x01, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2]]);\n            return;\n        } else {\n            var1 = 0x108e;\n            var2 = var0;\n            var var3 = msg.sender;\n            var1 = func_2661(var2, var3);\n            goto label_108E;\n        }\n    }\n    \n    function updateWhitelist(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = !!msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n    \n        if (msg.sender != storage[0x17] & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x0c;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = !!arg1 | (storage[temp1] & ~0xff);\n    }\n    \n    function withdrawBid(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x10;\n        arg1 = storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xff;\n    \n        if (arg1) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x10;\n        \n            if (msg.sender == storage[keccak256(memory[0x00:0x40])] & (0x01 << 0xa0) - 0x01) { goto label_1175; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (arg1) {\n        label_1175:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x10;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = storage[temp0 + 0x01];\n            var temp2 = memory[0x40:0x60];\n            var temp3;\n            temp3, memory[temp2:temp2 + 0x00] = address(storage[temp0] & (0x01 << 0xa0) - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + 0x00]);\n            arg1 = !temp3;\n        \n            if (!arg1) {\n                var temp4 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp4 + 0x60;\n                memory[temp4:temp4 + 0x20] = 0x00;\n                var temp5 = temp4 + 0x20;\n                memory[temp5:temp5 + 0x20] = 0x00;\n                var temp6 = temp4 + 0x40;\n                memory[temp6:temp6 + 0x20] = 0x00;\n                var temp7 = arg0;\n                memory[0x00:0x20] = temp7;\n                memory[0x20:0x40] = 0x10;\n                var temp8 = keccak256(memory[0x00:0x40]);\n                storage[temp8] = (memory[temp4:temp4 + 0x20] & (0x01 << 0xa0) - 0x01) | (storage[temp8] & ~((0x01 << 0xa0) - 0x01));\n                storage[temp8 + 0x01] = memory[temp5:temp5 + 0x20];\n                var temp9 = temp8 + 0x02;\n                storage[temp9] = !!memory[temp6:temp6 + 0x20] | (storage[temp9] & ~0xff);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = temp7;\n                var temp11 = memory[0x40:0x60];\n                log(memory[temp11:temp11 + temp10 - temp11 + 0x20], [0x99319fa1a5fca42d549d4d49989116496775f906f62e0e2ff2ea3c3aacdefa27]);\n                return;\n            } else {\n                var temp12 = returndata.length;\n                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function tokenOfOwnerByIndex(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var var1 = keccak256(memory[var0:var0 + 0x40]);\n        var var2 = arg1;\n    \n        if (var2 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var1;\n        return storage[keccak256(memory[0x00:0x20]) + var2];\n    }\n    \n    function func_07DB(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x12;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (arg0 & (0x01 << 0xa0) - 0x01) | (storage[temp0] & ~((0x01 << 0xa0) - 0x01));\n    }\n    \n    function bid(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x17e0;\n        var var0 = msg.sender;\n        var var1 = arg0;\n        arg1 = safeTransferFrom(var0, var1);\n    \n        if (arg1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x10;\n    \n        if (!(storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xff)) {\n        label_18B6:\n            var temp0 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp0 + 0x60;\n            var temp1 = msg.sender;\n            memory[temp0:temp0 + 0x20] = temp1;\n            var temp2 = msg.value;\n            var temp3 = temp0 + 0x20;\n            memory[temp3:temp3 + 0x20] = temp2;\n            var temp4 = temp0 + 0x40;\n            memory[temp4:temp4 + 0x20] = 0x01;\n            var temp5 = arg0;\n            memory[0x00:0x20] = temp5;\n            memory[0x20:0x40] = 0x10;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            storage[temp6] = (memory[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01) | (storage[temp6] & ~((0x01 << 0xa0) - 0x01));\n            storage[temp6 + 0x01] = memory[temp3:temp3 + 0x20];\n            var temp7 = temp6 + 0x02;\n            storage[temp7] = !!memory[temp4:temp4 + 0x20] | (storage[temp7] & ~0xff);\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = temp5;\n            memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp2;\n            memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = temp1;\n            var temp9 = memory[0x40:0x60];\n            log(memory[temp9:temp9 + temp8 - temp9 + 0x60], [0xcbf61548a249040d379a7f7a4486a18d78824bce978077f4943fb55e111af1c1]);\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x10;\n        \n            if (msg.value > storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x10;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                var temp11 = storage[temp10 + 0x01];\n                var temp12 = memory[0x40:0x60];\n                var temp13;\n                temp13, memory[temp12:temp12 + 0x00] = address(storage[temp10] & (0x01 << 0xa0) - 0x01).call.gas(!temp11 * 0x08fc).value(temp11)(memory[temp12:temp12 + 0x00]);\n                arg1 = !temp13;\n            \n                if (!arg1) { goto label_18B6; }\n            \n                var temp14 = returndata.length;\n                memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = 0x461bcd << 0xe5;\n                memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n                memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x1e;\n                memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x426964206d757374206265203e207468616e2063757272656e74206269640000;\n                var temp16 = memory[0x40:0x60];\n                revert(memory[temp16:temp16 + temp15 - temp16 + 0x64]);\n            }\n        }\n    }\n    \n    function tokenDidHaveFirstSale(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x11;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function tokenByIndex(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x00;\n        var var0 = 0x07;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1];\n    }\n    \n    function ownerOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_1993(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function useControlToken(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = temp0 + arg1;\n        var var0 = temp0;\n        var var1 = var0 + 0x40;\n        var var2 = msg.data[var0 + 0x20:var0 + 0x20 + 0x20];\n    \n        if (var2 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = var0 + var2;\n        var2 = temp1;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var2;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var2 = temp3;\n        var temp4 = var1;\n        var1 = temp2 + 0x20;\n        var var3 = temp4;\n    \n        if ((var2 > 0x01 << 0x20) | (var1 + var2 * 0x20 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var3;\n        var temp6 = var2;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + temp6 * 0x20 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = temp7 + 0x20;\n        var temp9 = temp6 * 0x20;\n        memory[temp8:temp8 + temp9] = msg.data[var1:var1 + temp9];\n        memory[temp8 + temp9:temp8 + temp9 + 0x20] = 0x00;\n        var temp10 = arg1;\n        arg1 = temp7;\n        var temp11 = var0;\n        var0 = temp10;\n        var1 = temp11;\n        var2 = temp5 + 0x20;\n        var3 = msg.data[temp5:temp5 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var1 + var3;\n        var3 = temp12;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var3;\n        var temp14 = msg.data[temp13:temp13 + 0x20];\n        var3 = temp14;\n        var var4 = var2;\n        var2 = temp13 + 0x20;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 * 0x20 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp15 = var3;\n        var temp16 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp16 + temp15 * 0x20 + 0x20;\n        memory[temp16:temp16 + 0x20] = temp15;\n        var temp17 = temp16 + 0x20;\n        var temp18 = temp15 * 0x20;\n        memory[temp17:temp17 + temp18] = msg.data[var2:var2 + temp18];\n        memory[temp17 + temp18:temp17 + temp18 + 0x20] = 0x00;\n        var0 = temp16;\n        var1 = 0x19f5;\n        var2 = msg.sender;\n        var3 = arg0;\n        var1 = safeTransferFrom(var2, var3);\n    \n        if (var1) {\n        label_1A28:\n        \n            if (var1) {\n                var1 = 0x60;\n                var temp19 = memory[var0:var0 + 0x20];\n                var temp20 = memory[0x40:0x60];\n                var3 = temp19;\n                var2 = temp20;\n                memory[var2:var2 + 0x20] = var3;\n                memory[0x40:0x60] = var2 + var3 * 0x20 + 0x20;\n            \n                if (!var3) {\n                    var1 = var2;\n                    var2 = 0x00;\n                \n                    if (var2 >= memory[arg1:arg1 + 0x20]) {\n                    label_1C21:\n                    \n                        if (!msg.value) {\n                        label_1C63:\n                            var2 = 0x1864c0e277c81ec1608d84e54d6f6c849f227acc0da19d9169fb0094d962f1c9;\n                            var3 = arg0;\n                            var4 = msg.value;\n                            var temp21 = arg1;\n                            var var5 = temp21;\n                            var var6 = var1;\n                            var var7 = var0;\n                            var temp22 = memory[0x40:0x60];\n                            var var8 = temp22;\n                            memory[var8:var8 + 0x20] = var3;\n                            var temp23 = var8 + 0x20;\n                            memory[temp23:temp23 + 0x20] = var4;\n                            var temp24 = temp23 + 0x20;\n                            var var9 = temp24;\n                            var var10 = var9 + 0x20;\n                            var var11 = var10 + 0x20;\n                            var temp25 = var11 + 0x20;\n                            memory[var9:var9 + 0x20] = temp25 - var8;\n                            memory[temp25:temp25 + 0x20] = memory[var5:var5 + 0x20];\n                            var var12 = temp25 + 0x20;\n                            var var13 = var5 + 0x20;\n                            var var14 = memory[var5:var5 + 0x20] * 0x20;\n                            var var15 = var14;\n                            var var16 = var12;\n                            var var17 = var13;\n                            var var18 = 0x00;\n                        \n                            if (var18 >= var15) {\n                            label_1CDD:\n                                var temp26 = var14 + var12;\n                                memory[var10:var10 + 0x20] = temp26 - var8;\n                                var temp27 = var6;\n                                memory[temp26:temp26 + 0x20] = memory[temp27:temp27 + 0x20];\n                                var12 = temp26 + 0x20;\n                                var13 = temp27 + 0x20;\n                                var14 = memory[temp27:temp27 + 0x20] * 0x20;\n                                var15 = var14;\n                                var16 = var12;\n                                var17 = var13;\n                                var18 = 0x00;\n                            \n                                if (var18 >= var15) {\n                                label_1D1C:\n                                    var temp28 = var14 + var12;\n                                    memory[var11:var11 + 0x20] = temp28 - var8;\n                                    var temp29 = var7;\n                                    memory[temp28:temp28 + 0x20] = memory[temp29:temp29 + 0x20];\n                                    var12 = temp28 + 0x20;\n                                    var13 = temp29 + 0x20;\n                                    var14 = memory[temp29:temp29 + 0x20] * 0x20;\n                                    var15 = var14;\n                                    var16 = var12;\n                                    var17 = var13;\n                                    var18 = 0x00;\n                                \n                                    if (var18 >= var15) {\n                                    label_1D5B:\n                                        var temp30 = memory[0x40:0x60];\n                                        log(memory[temp30:temp30 + (var14 + var12) - temp30], [stack[-17]]);\n                                        return;\n                                    } else {\n                                    label_1D4C:\n                                        var temp31 = var18;\n                                        memory[temp31 + var16:temp31 + var16 + 0x20] = memory[temp31 + var17:temp31 + var17 + 0x20];\n                                        var18 = temp31 + 0x20;\n                                    \n                                        if (var18 >= var15) { goto label_1D5B; }\n                                        else { goto label_1D4C; }\n                                    }\n                                } else {\n                                label_1D0D:\n                                    var temp32 = var18;\n                                    memory[temp32 + var16:temp32 + var16 + 0x20] = memory[temp32 + var17:temp32 + var17 + 0x20];\n                                    var18 = temp32 + 0x20;\n                                \n                                    if (var18 >= var15) { goto label_1D1C; }\n                                    else { goto label_1D0D; }\n                                }\n                            } else {\n                            label_1CCE:\n                                var temp33 = var18;\n                                memory[temp33 + var16:temp33 + var16 + 0x20] = memory[temp33 + var17:temp33 + var17 + 0x20];\n                                var18 = temp33 + 0x20;\n                            \n                                if (var18 >= var15) { goto label_1CDD; }\n                                else { goto label_1CCE; }\n                            }\n                        } else {\n                            var temp34 = memory[0x40:0x60];\n                            var temp35 = msg.value;\n                            var temp36;\n                            temp36, memory[temp34:temp34 + 0x00] = address(storage[0x17] & (0x01 << 0xa0) - 0x01).call.gas(!temp35 * 0x08fc).value(temp35)(memory[temp34:temp34 + 0x00]);\n                            var2 = !temp36;\n                        \n                            if (!var2) { goto label_1C63; }\n                        \n                            var temp37 = returndata.length;\n                            memory[0x00:0x00 + temp37] = returndata[0x00:0x00 + temp37];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                    label_1AB6:\n                        var3 = 0x00;\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x0e;\n                        var4 = keccak256(memory[0x00:0x40]) + 0x02;\n                        var5 = 0x00;\n                        var6 = arg1;\n                        var7 = var2;\n                    \n                        if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                    \n                        var temp38 = var5;\n                        memory[temp38:temp38 + 0x20] = memory[var7 * 0x20 + 0x20 + var6:var7 * 0x20 + 0x20 + var6 + 0x20];\n                        var temp39 = temp38 + 0x20;\n                        memory[temp39:temp39 + 0x20] = var4;\n                        var3 = keccak256(memory[0x00:0x00 + temp39 + 0x20]);\n                        var4 = storage[var3];\n                        var5 = var0;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        var temp40 = memory[var6 * 0x20 + 0x20 + var5:var6 * 0x20 + 0x20 + var5 + 0x20] i>= var4;\n                        var4 = temp40;\n                    \n                        if (!var4) {\n                        label_1B31:\n                        \n                            if (var4) {\n                                var4 = storage[var3 + 0x02];\n                                var5 = var0;\n                                var6 = var2;\n                            \n                                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                            \n                                if (memory[var6 * 0x20 + 0x20 + var5:var6 * 0x20 + 0x20 + var5 + 0x20] != var4) {\n                                    var4 = storage[var3 + 0x02];\n                                    var5 = var0;\n                                    var6 = var2;\n                                \n                                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                                \n                                    storage[var3 + 0x02] = memory[var6 * 0x20 + 0x20 + var5:var6 * 0x20 + 0x20 + var5 + 0x20];\n                                    var5 = var4;\n                                    var6 = var1;\n                                    var7 = var2;\n                                \n                                    if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                                \n                                    memory[var7 * 0x20 + var6 + 0x20:var7 * 0x20 + var6 + 0x20 + 0x20] = var5;\n                                    var2 = var2 + 0x01;\n                                \n                                    if (var2 >= memory[arg1:arg1 + 0x20]) { goto label_1C21; }\n                                    else { goto label_1AB6; }\n                                } else {\n                                    var temp41 = memory[0x40:0x60];\n                                    memory[temp41:temp41 + 0x20] = 0x461bcd << 0xe5;\n                                    memory[temp41 + 0x04:temp41 + 0x04 + 0x20] = 0x20;\n                                    memory[temp41 + 0x24:temp41 + 0x24 + 0x20] = 0x1a;\n                                    memory[temp41 + 0x44:temp41 + 0x44 + 0x20] = 0x4d7573742070726f7669646520646966666572656e742076616c000000000000;\n                                    var temp42 = memory[0x40:0x60];\n                                    revert(memory[temp42:temp42 + temp41 - temp42 + 0x64]);\n                                }\n                            } else {\n                                var temp43 = memory[0x40:0x60];\n                                memory[temp43:temp43 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp43 + 0x04:temp43 + 0x04 + 0x20] = 0x20;\n                                memory[temp43 + 0x24:temp43 + 0x24 + 0x20] = 0x0b;\n                                memory[temp43 + 0x44:temp43 + 0x44 + 0x20] = 0x125b9d985b1a59081d985b << 0xaa;\n                                var temp44 = memory[0x40:0x60];\n                                revert(memory[temp44:temp44 + temp43 - temp44 + 0x64]);\n                            }\n                        } else {\n                            var4 = storage[var3 + 0x01];\n                            var5 = var0;\n                            var6 = var2;\n                        \n                            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                        \n                            var4 = memory[var6 * 0x20 + 0x20 + var5:var6 * 0x20 + 0x20 + var5 + 0x20] i<= var4;\n                            goto label_1B31;\n                        }\n                    }\n                } else {\n                    var temp45 = var3 * 0x20;\n                    memory[var2 + 0x20:var2 + 0x20 + temp45] = code[code.length:code.length + temp45];\n                    var1 = var2;\n                    var2 = 0x00;\n                \n                    if (var2 >= memory[arg1:arg1 + 0x20]) { goto label_1C21; }\n                    else { goto label_1AB6; }\n                }\n            } else {\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = 0x461bcd << 0xe5;\n                memory[temp46 + 0x04:temp46 + 0x04 + 0x20] = 0x20;\n                memory[temp46 + 0x24:temp46 + 0x24 + 0x20] = 0x1a;\n                memory[temp46 + 0x44:temp46 + 0x44 + 0x20] = 0x4f776e6572206f72207065726d697373696f6e6564206f6e6c79000000000000;\n                var temp47 = memory[0x40:0x60];\n                revert(memory[temp47:temp47 + temp46 - temp47 + 0x64]);\n            }\n        } else {\n            var1 = msg.sender;\n            var2 = 0x12;\n            var3 = 0x00;\n            var4 = 0x1a09;\n            var5 = arg0;\n            var4 = func_1993(var5);\n            var temp48 = (0x01 << 0xa0) - 0x01;\n            var temp49 = var3;\n            memory[temp49:temp49 + 0x20] = temp48 & var4;\n            memory[temp49 + 0x20:temp49 + 0x20 + 0x20] = var2;\n            var1 = storage[keccak256(memory[0x00:0x00 + temp49 + 0x40])] & temp48 == var1;\n            goto label_1A28;\n        }\n    }\n    \n    function func_0A5E(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n    \n        if (msg.sender != storage[0x17] & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= 0x64) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x64;\n        var var2 = 0x1db0;\n        var var3 = arg1;\n        var var4 = var0;\n        var2 = func_2AD2(var3, var4);\n    \n        if (var2 >= var1) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        storage[0x13] = temp1;\n        var temp2 = arg1;\n        storage[0x14] = temp2;\n        var temp3 = var0;\n        storage[0x15] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp1;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp2;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x60], [0xd946966340b57e0fdcf288c7bb51c470709dcfcd5d883779d28cf85679f75814]);\n    }\n    \n    function updatePlatformAddress(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n    \n        if (msg.sender != storage[0x17] & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0 & (0x01 << 0xa0) - 0x01;\n        storage[0x17] = temp0 | (storage[0x17] & ~((0x01 << 0xa0) - 0x01));\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xb29030287f33baad1941013143d2e1bd5e66c87318f0bd99bc0fae51fe4b191f]);\n    }\n    \n    function getControlToken(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0e;\n        arg1 = 0x60;\n    \n        if (!(storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0e;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = 0x60;\n        var var3 = storage[var0];\n        var var2 = 0x1f1f;\n        var var4 = 0x03;\n        var2 = func_2B33(var3, var4);\n        var temp0 = memory[0x40:0x60];\n        var temp1 = var2;\n        var3 = temp1;\n        var2 = temp0;\n        memory[var2:var2 + 0x20] = var3;\n        memory[0x40:0x60] = var2 + var3 * 0x20 + 0x20;\n    \n        if (!var3) {\n            var1 = var2;\n            var2 = 0x00;\n            var3 = var2;\n        \n            if (var3 >= storage[var0]) {\n            label_2023:\n                return var1;\n            } else {\n            label_1F59:\n                memory[0x00:0x20] = var3;\n                memory[0x20:0x40] = var0 + 0x02;\n                var4 = storage[keccak256(memory[0x00:0x40])];\n                var var5 = var1;\n                var var6 = var2;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                var4 = 0x1f93;\n                var5 = var2;\n                var6 = 0x01;\n                var4 = func_2AD2(var5, var6);\n                var temp2 = var4;\n                var2 = temp2;\n                memory[0x00:0x20] = var3;\n                memory[0x20:0x40] = var0 + 0x02;\n                var4 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n                var5 = var1;\n                var6 = var2;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                var4 = 0x1fd6;\n                var5 = var2;\n                var6 = 0x01;\n                var4 = func_2AD2(var5, var6);\n                var temp3 = var4;\n                var2 = temp3;\n                memory[0x00:0x20] = var3;\n                memory[0x20:0x40] = var0 + 0x02;\n                var4 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                var5 = var1;\n                var6 = var2;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                var4 = 0x2019;\n                var5 = var2;\n                var6 = 0x01;\n                var4 = func_2AD2(var5, var6);\n                var2 = var4;\n                var3 = var3 + 0x01;\n            \n                if (var3 >= storage[var0]) { goto label_2023; }\n                else { goto label_1F59; }\n            }\n        } else {\n            var temp4 = var3 * 0x20;\n            memory[var2 + 0x20:var2 + 0x20 + temp4] = code[code.length:code.length + temp4];\n            var1 = var2;\n            var2 = 0x00;\n            var3 = var2;\n        \n            if (var3 >= storage[var0]) { goto label_2023; }\n            else { goto label_1F59; }\n        }\n    }\n    \n    function func_0B56(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x12;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & (0x01 << 0xa0) - 0x01;\n    }\n    \n    function setApprovalForAll(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = !!msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n    \n        if (msg.sender == arg0 & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x04;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = !!arg1;\n        storage[temp4] = temp5 | (storage[temp4] & ~0xff);\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, msg.sender, stack[-2] & (0x01 << 0xa0) - 0x01]);\n    }\n    \n    function buyPrices(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x0f;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function uniqueTokenCreators(var arg0, var arg1) returns (var arg0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = arg1;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1] & (0x01 << 0xa0) - 0x01;\n    }\n    \n    function tokenURI(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0b;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var var1 = temp0;\n        var temp1 = storage[var1];\n        var temp2 = memory[0x40:0x60];\n        var temp3 = (temp1 & !(temp1 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp3;\n        memory[0x40:0x60] = temp2 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp2:temp2 + 0x20] = var2;\n        arg1 = 0x60;\n        var var0 = temp2;\n        var var3 = var0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_249C:\n            return var0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_2493; }\n        \n        label_247F:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_247F; }\n        \n        label_2493:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_249C;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_249C;\n        }\n    }\n    \n    function pendingBids(var arg0) returns (var arg0, var r1, var r2) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x10;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & (0x01 << 0xa0) - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02] & 0xff;\n        return arg0, r1, r2;\n    }\n    \n    function makeBuyPrice(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x24e6;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        var0 = safeTransferFrom(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x0f;\n        var temp2 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp2;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp1;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x40], [0xd765eb1cf8aab1a01381fef8dcc9f755ef2d2233849716da96a90e32da84821a]);\n    }\n    \n    function isApprovedForAll(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20] & temp0;\n        r0 = func_2661(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x09];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x09;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_1020:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_1017; }\n        \n        label_1003:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_1003; }\n        \n        label_1017:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_1020;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_1020;\n        }\n    }\n    \n    function func_102B(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        return storage[keccak256(memory[0x00:0x40])] & (0x01 << 0xa0) - 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x07]; }\n    \n    function expectedTokenSupply() returns (var r0) { return storage[0x16]; }\n    \n    function func_1993(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])] & (0x01 << 0xa0) - 0x01;\n    \n        if (var1) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x0a];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x0a;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_1020:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_1017; }\n        \n        label_1003:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_1003; }\n        \n        label_1017:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_1020;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_1020;\n        }\n    }\n    \n    function func_23FB() returns (var r0) { return storage[0x13]; }\n    \n    function artistSecondSalePercentage() returns (var r0) { return storage[0x15]; }\n    \n    function func_24D6() returns (var r0) { return storage[0x14]; }\n    \n    function platformAddress() returns (var r0) { return storage[0x17] & (0x01 << 0xa0) - 0x01; }\n    \n    function func_2661(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function safeTransferFrom(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x272e;\n        var var3 = arg1;\n        var2 = func_1993(var3);\n        var1 = var2;\n        var2 = arg0 & (0x01 << 0xa0) - 0x01 == var1 & (0x01 << 0xa0) - 0x01;\n    \n        if (var2) {\n        label_2769:\n        \n            if (var2) {\n            label_2779:\n                return var2;\n            } else {\n                var2 = 0x2779;\n                var3 = var1;\n                var var4 = arg0;\n                var2 = func_2661(var3, var4);\n                goto label_2779;\n            }\n        } else {\n            var2 = arg0 & (0x01 << 0xa0) - 0x01;\n            var3 = 0x275e;\n            var4 = arg1;\n            var3 = func_102B(var4);\n            var2 = var3 & (0x01 << 0xa0) - 0x01 == var2;\n            goto label_2769;\n        }\n    }\n    \n    function balanceOf(var arg0) returns (var r0) { return storage[arg0]; }\n    \n    function func_2AD2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1b;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_2B33(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg0) { return 0x00; }\n    \n        var var1 = arg1 * arg0;\n        var var2 = arg1;\n        var var3 = arg0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = temp0 + 0x04;\n        var temp2 = temp1 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2 - temp1;\n        memory[temp2:temp2 + 0x20] = 0x21;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x21] = code[0x3267:0x3288];\n        var temp4 = memory[0x40:0x60];\n        revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n    }\n    \n    function func_2B8C(var arg0, var arg1, var arg2) {\n        var var0 = 0x16f2;\n        var var1 = arg0;\n        var var2 = arg1;\n        func_2CCF(var1, var2);\n    }\n    \n    function func_2B96(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        return !!(storage[keccak256(memory[0x00:0x40])] & (0x01 << 0xa0) - 0x01);\n    }\n    \n    function func_2CCF(var arg0, var arg1) {\n        var var0 = 0x2cd9;\n        var var1 = arg0;\n        var var2 = arg1;\n        func_302F(var1, var2);\n        var0 = 0x2ce3;\n        var1 = arg0;\n        var2 = arg1;\n        func_2EF5(var1, var2);\n        var0 = 0x265d;\n        var1 = arg1;\n        func_310F(var1);\n    }\n    \n    function func_2EF5(var arg0, var arg1) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = temp2;\n        memory[0x20:0x40] = 0x05;\n        storage[temp1] = temp2 + 0x01;\n        memory[0x00:0x20] = temp1;\n        storage[keccak256(memory[0x00:0x20]) + temp2] = temp0;\n    }\n    \n    function func_2F33(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1) {\n            var1 = 0x00;\n            var var2 = arg1;\n            var var3 = arg0;\n        \n            if (var2) { return var3 / var2; }\n            else { assert(); }\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = temp0 + 0x04;\n            var2 = temp1;\n            var3 = var2;\n            var temp2 = var3 + 0x20;\n            memory[var3:var3 + 0x20] = temp2 - var3;\n            var temp3 = var1;\n            memory[temp2:temp2 + 0x20] = memory[temp3:temp3 + 0x20];\n            var var4 = temp2 + 0x20;\n            var var6 = memory[temp3:temp3 + 0x20];\n            var var5 = temp3 + 0x20;\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n            var var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_2F84:\n                var temp4 = var6;\n                var4 = temp4 + var4;\n                var5 = temp4 & 0x1f;\n            \n                if (!var5) {\n                    var temp5 = memory[0x40:0x60];\n                    revert(memory[temp5:temp5 + var4 - temp5]);\n                } else {\n                    var temp6 = var5;\n                    var temp7 = var4 - temp6;\n                    memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                    var temp8 = memory[0x40:0x60];\n                    revert(memory[temp8:temp8 + (temp7 + 0x20) - temp8]);\n                }\n            } else {\n            label_2F75:\n                var temp9 = var10;\n                memory[temp9 + var8:temp9 + var8 + 0x20] = memory[temp9 + var9:temp9 + var9 + 0x20];\n                var10 = temp9 + 0x20;\n            \n                if (var10 >= var7) { goto label_2F84; }\n                else { goto label_2F75; }\n            }\n        }\n    }\n    \n    function func_2FD5(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        var temp1 = var1;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = memory[temp1:temp1 + 0x20];\n        var var2 = temp0 + 0x04;\n        var var3 = var2;\n        var var4 = temp0 + 0x44;\n        var var5 = temp1 + 0x20;\n        var var6 = memory[temp1:temp1 + 0x20];\n        var var7 = var6;\n        var var8 = var4;\n        var var9 = var5;\n        var var10 = 0x00;\n    \n        if (!var7) {\n        label_2F84:\n            var temp2 = var6;\n            var4 = temp2 + var4;\n            var5 = temp2 & 0x1f;\n        \n            if (!var5) {\n                var temp3 = memory[0x40:0x60];\n                revert(memory[temp3:temp3 + var4 - temp3]);\n            } else {\n                var temp4 = var5;\n                var temp5 = var4 - temp4;\n                memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                var temp6 = memory[0x40:0x60];\n                revert(memory[temp6:temp6 + (temp5 + 0x20) - temp6]);\n            }\n        } else {\n            var temp7 = var10;\n            memory[temp7 + var8:temp7 + var8 + 0x20] = memory[temp7 + var9:temp7 + var9 + 0x20];\n            var10 = temp7 + 0x20;\n        \n        label_2F6C:\n        \n            if (var10 >= var7) { goto label_2F84; }\n        \n            var temp8 = var10;\n            memory[temp8 + var8:temp8 + var8 + 0x20] = memory[temp8 + var9:temp8 + var9 + 0x20];\n            var10 = temp8 + 0x20;\n            goto label_2F6C;\n        }\n    }\n    \n    function func_302F(var arg0, var arg1) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x304b;\n        var var1 = arg1;\n        var0 = func_2B96(var1);\n    \n        if (!var0) {\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = 0x01;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = arg0 & (0x01 << 0xa0) - 0x01;\n            storage[temp0] = temp1 | (storage[temp0] & ~((0x01 << 0xa0) - 0x01));\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x03;\n            var1 = keccak256(memory[0x00:0x40]);\n            var0 = 0x30d3;\n            func_31A5(var1);\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, stack[-2] & (0x01 << 0xa0) - 0x01, stack[-1]]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x14;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x1d1bdad95b88185b1c9958591e481b5a5b9d1959 << 0x62;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        }\n    }\n    \n    function func_310F(var arg0) {\n        var temp0 = storage[0x07];\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        storage[0x07] = temp0 + 0x01;\n        memory[0x00:0x20] = 0x07;\n        storage[temp0 + 0xa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688] = temp1;\n    }\n    \n    function func_3153(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & (0x01 << 0xa0) - 0x01)) { return; }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~((0x01 << 0xa0) - 0x01);\n    }\n    \n    function func_31A5(var arg0) {\n        var temp0 = arg0;\n        storage[temp0] = storage[temp0] + 0x01;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x755db7b3 > var0) {\n            if (0x2b1fd58a > var0) {\n                if (0x0d392cd9 > var0) {\n                    if (var0 == 0x01ffc9a7) {\n                        // Dispatch table entry for supportsInterface(bytes4)\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0274;\n                        var var2 = 0x04;\n                        var var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = supportsInterface(var2, var3);\n                    \n                    label_0274:\n                        var temp0 = memory[0x40:0x60];\n                        memory[temp0:temp0 + 0x20] = !!var1;\n                        var temp1 = memory[0x40:0x60];\n                        return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n                    } else if (var0 == 0x041bb6ff) {\n                        // Dispatch table entry for 0x041bb6ff (unknown)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0274;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = func_02AB(var2, var3);\n                        goto label_0274;\n                    } else if (var0 == 0x06fdde03) {\n                        // Dispatch table entry for name()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x02d0;\n                        var1 = name();\n                    \n                    label_02D0:\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = 0x20;\n                        var temp3 = var1;\n                        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n                        var2 = temp2;\n                        var3 = var2;\n                        var var4 = var3 + 0x40;\n                        var var5 = temp3 + 0x20;\n                        var var6 = memory[temp3:temp3 + 0x20];\n                        var var7 = var6;\n                        var var8 = var4;\n                        var var9 = var5;\n                        var var10 = 0x00;\n                    \n                        if (var10 >= var7) {\n                        label_030A:\n                            var temp4 = var6;\n                            var4 = temp4 + var4;\n                            var5 = temp4 & 0x1f;\n                        \n                            if (!var5) {\n                                var temp5 = memory[0x40:0x60];\n                                return memory[temp5:temp5 + var4 - temp5];\n                            } else {\n                                var temp6 = var5;\n                                var temp7 = var4 - temp6;\n                                memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                                var temp8 = memory[0x40:0x60];\n                                return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                            }\n                        } else {\n                        label_02FB:\n                            var temp9 = var10;\n                            memory[temp9 + var8:temp9 + var8 + 0x20] = memory[temp9 + var9:temp9 + var9 + 0x20];\n                            var10 = temp9 + 0x20;\n                        \n                            if (var10 >= var7) { goto label_030A; }\n                            else { goto label_02FB; }\n                        }\n                    } else if (var0 == 0x081812fc) {\n                        // Dispatch table entry for getApproved(uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x036f;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = getApproved(var2, var3);\n                    \n                    label_036F:\n                        var temp10 = memory[0x40:0x60];\n                        memory[temp10:temp10 + 0x20] = var1 & (0x01 << 0xa0) - 0x01;\n                        var temp11 = memory[0x40:0x60];\n                        return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n                    } else if (var0 == 0x095ea7b3) {\n                        // Dispatch table entry for approve(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x03c4;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                    \n                        approve(var2, var3);\n                        stop();\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x0d392cd9) {\n                    // Dispatch table entry for updateWhitelist(address,bool)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    updateWhitelist(var2, var3);\n                    stop();\n                } else if (var0 == 0x0eaaf4c8) {\n                    // Dispatch table entry for withdrawBid(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    withdrawBid(var2, var3);\n                    stop();\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0440;\n                    var1 = totalSupply();\n                \n                label_0440:\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = var1;\n                    var temp13 = memory[0x40:0x60];\n                    return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n                } else if (var0 == 0x1e9b0f52) {\n                    // Dispatch table entry for 0x1e9b0f52 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0xc0) { revert(memory[0x00:0x00]); }\n                \n                    var temp14 = var2;\n                    var2 = msg.data[temp14:temp14 + 0x20];\n                    var4 = temp14;\n                    var3 = var4 + var3;\n                    var5 = var4 + 0x40;\n                    var6 = msg.data[var4 + 0x20:var4 + 0x20 + 0x20];\n                \n                    if (var6 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp15 = var4 + var6;\n                    var6 = temp15;\n                \n                    if (var6 + 0x20 > var3) { revert(memory[0x00:0x00]); }\n                \n                    var temp16 = var6;\n                    var temp17 = msg.data[temp16:temp16 + 0x20];\n                    var6 = temp17;\n                    var temp18 = var5;\n                    var5 = temp16 + 0x20;\n                    var7 = temp18;\n                \n                    if ((var6 > 0x01 << 0x20) | (var5 + var6 > var3)) { revert(memory[0x00:0x00]); }\n                \n                    var temp19 = var7;\n                    var temp20 = var6;\n                    var temp21 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp21 + (temp20 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    memory[temp21:temp21 + 0x20] = temp20;\n                    var temp22 = temp21 + 0x20;\n                    memory[temp22:temp22 + temp20] = msg.data[var5:var5 + temp20];\n                    memory[temp22 + temp20:temp22 + temp20 + 0x20] = 0x00;\n                    var temp23 = var3;\n                    var3 = temp21;\n                    var temp24 = var4;\n                    var4 = temp23;\n                    var5 = temp24;\n                    var6 = temp19 + 0x20;\n                    var7 = msg.data[temp19:temp19 + 0x20];\n                \n                    if (var7 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp25 = var5 + var7;\n                    var7 = temp25;\n                \n                    if (var7 + 0x20 > var4) { revert(memory[0x00:0x00]); }\n                \n                    var temp26 = var7;\n                    var temp27 = msg.data[temp26:temp26 + 0x20];\n                    var7 = temp27;\n                    var8 = var6;\n                    var6 = temp26 + 0x20;\n                \n                    if ((var7 > 0x01 << 0x20) | (var6 + var7 * 0x20 > var4)) { revert(memory[0x00:0x00]); }\n                \n                    var temp28 = var8;\n                    var temp29 = var7;\n                    var temp30 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp30 + temp29 * 0x20 + 0x20;\n                    memory[temp30:temp30 + 0x20] = temp29;\n                    var temp31 = temp30 + 0x20;\n                    var temp32 = temp29 * 0x20;\n                    memory[temp31:temp31 + temp32] = msg.data[var6:var6 + temp32];\n                    memory[temp31 + temp32:temp31 + temp32 + 0x20] = 0x00;\n                    var temp33 = var4;\n                    var4 = temp30;\n                    var temp34 = var5;\n                    var5 = temp33;\n                    var6 = temp34;\n                    var7 = temp28 + 0x20;\n                    var8 = msg.data[temp28:temp28 + 0x20];\n                \n                    if (var8 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp35 = var6 + var8;\n                    var8 = temp35;\n                \n                    if (var8 + 0x20 > var5) { revert(memory[0x00:0x00]); }\n                \n                    var temp36 = var8;\n                    var temp37 = msg.data[temp36:temp36 + 0x20];\n                    var8 = temp37;\n                    var9 = var7;\n                    var7 = temp36 + 0x20;\n                \n                    if ((var8 > 0x01 << 0x20) | (var7 + var8 * 0x20 > var5)) { revert(memory[0x00:0x00]); }\n                \n                    var temp38 = var9;\n                    var temp39 = var8;\n                    var temp40 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp40 + temp39 * 0x20 + 0x20;\n                    memory[temp40:temp40 + 0x20] = temp39;\n                    var temp41 = temp40 + 0x20;\n                    var temp42 = temp39 * 0x20;\n                    memory[temp41:temp41 + temp42] = msg.data[var7:var7 + temp42];\n                    memory[temp41 + temp42:temp41 + temp42 + 0x20] = 0x00;\n                    var temp43 = var5;\n                    var5 = temp40;\n                    var temp44 = var6;\n                    var6 = temp43;\n                    var7 = temp44;\n                    var8 = temp38 + 0x20;\n                    var9 = msg.data[temp38:temp38 + 0x20];\n                \n                    if (var9 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp45 = var7 + var9;\n                    var9 = temp45;\n                \n                    if (var9 + 0x20 > var6) { revert(memory[0x00:0x00]); }\n                \n                    var temp46 = var9;\n                    var temp47 = msg.data[temp46:temp46 + 0x20];\n                    var9 = temp47;\n                    var10 = var8;\n                    var8 = temp46 + 0x20;\n                \n                    if ((var9 > 0x01 << 0x20) | (var8 + var9 * 0x20 > var6)) { revert(memory[0x00:0x00]); }\n                \n                    var temp48 = var10;\n                    var temp49 = var9;\n                    var temp50 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp50 + temp49 * 0x20 + 0x20;\n                    memory[temp50:temp50 + 0x20] = temp49;\n                    var temp51 = temp50 + 0x20;\n                    var temp52 = temp49 * 0x20;\n                    memory[temp51:temp51 + temp52] = msg.data[var8:var8 + temp52];\n                    memory[temp51 + temp52:temp51 + temp52 + 0x20] = 0x00;\n                    var temp53 = var6;\n                    var6 = temp50;\n                    var temp54 = var7;\n                    var7 = temp53;\n                    var8 = temp54;\n                    var9 = temp48 + 0x20;\n                    var10 = msg.data[temp48:temp48 + 0x20];\n                \n                    if (var10 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp55 = var8 + var10;\n                    var10 = temp55;\n                \n                    if (var10 + 0x20 > var7) { revert(memory[0x00:0x00]); }\n                \n                    var temp56 = var10;\n                    var temp57 = msg.data[temp56:temp56 + 0x20];\n                    var10 = temp57;\n                    var var11 = var9;\n                    var9 = temp56 + 0x20;\n                \n                    if ((var10 > 0x01 << 0x20) | (var9 + var10 * 0x20 > var7)) { revert(memory[0x00:0x00]); }\n                \n                    var temp58 = var10;\n                    var temp59 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp59 + temp58 * 0x20 + 0x20;\n                    memory[temp59:temp59 + 0x20] = temp58;\n                    var temp60 = temp59 + 0x20;\n                    var temp61 = temp58 * 0x20;\n                    memory[temp60:temp60 + temp61] = msg.data[var9:var9 + temp61];\n                    memory[temp60 + temp61:temp60 + temp61 + 0x20] = 0x00;\n                    var7 = temp59;\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x0e;\n                \n                    if (storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xff) {\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x0e;\n                    \n                        if (!(storage[keccak256(memory[0x00:0x40]) + 0x01] / 0x0100 & 0xff)) {\n                            memory[0x00:0x20] = var2;\n                            memory[0x20:0x40] = 0x0d;\n                            var9 = keccak256(memory[0x00:0x40]);\n                            var8 = msg.sender;\n                            var10 = 0x00;\n                        \n                            if (!storage[var9]) { assert(); }\n                        \n                            memory[0x00:0x20] = var9;\n                        \n                            if (storage[keccak256(memory[0x00:0x20]) + var10] & (0x01 << 0xa0) - 0x01 == var8) {\n                                var8 = memory[var4:var4 + 0x20] == memory[var5:var5 + 0x20];\n                            \n                                if (!var8) {\n                                    if (var8) {\n                                    label_13F2:\n                                        var8 = 0x13fc;\n                                        var9 = msg.sender;\n                                        var10 = var2;\n                                    \n                                    label_268F:\n                                        var11 = 0x265d;\n                                        var var12 = var9;\n                                        var var13 = var10;\n                                        var temp62 = memory[0x40:0x60];\n                                        var var14 = temp62;\n                                        memory[0x40:0x60] = var14 + 0x20;\n                                        memory[var14:var14 + 0x20] = 0x00;\n                                        func_2B8C(var12, var13, var14);\n                                        // Error: Could not resolve jump destination!\n                                    } else {\n                                    label_13AE:\n                                        var temp63 = memory[0x40:0x60];\n                                        memory[temp63:temp63 + 0x20] = 0x461bcd << 0xe5;\n                                        memory[temp63 + 0x04:temp63 + 0x04 + 0x20] = 0x20;\n                                        memory[temp63 + 0x24:temp63 + 0x24 + 0x20] = 0x15;\n                                        memory[temp63 + 0x44:temp63 + 0x44 + 0x20] = 0x0acc2d8eacae640c2e4e4c2f240dad2e6dac2e8c6d << 0x5b;\n                                        var temp64 = memory[0x40:0x60];\n                                        revert(memory[temp64:temp64 + temp63 - temp64 + 0x64]);\n                                    }\n                                } else if (memory[var5:var5 + 0x20] == memory[var6:var6 + 0x20]) { goto label_13F2; }\n                                else { goto label_13AE; }\n                            } else {\n                                var temp65 = memory[0x40:0x60];\n                                memory[temp65:temp65 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp65 + 0x04:temp65 + 0x04 + 0x20] = 0x20;\n                                memory[temp65 + 0x24:temp65 + 0x24 + 0x20] = 0x1c;\n                                memory[temp65 + 0x44:temp65 + 0x44 + 0x20] = 0x4d75737420626520636f6e74726f6c20746f6b656e2061727469737400000000;\n                                var temp66 = memory[0x40:0x60];\n                                revert(memory[temp66:temp66 + temp65 - temp66 + 0x64]);\n                            }\n                        } else {\n                            var temp67 = memory[0x40:0x60];\n                            memory[temp67:temp67 + 0x20] = 0x461bcd << 0xe5;\n                            memory[temp67 + 0x04:temp67 + 0x04 + 0x20] = 0x20;\n                            memory[temp67 + 0x24:temp67 + 0x24 + 0x20] = 0x0d;\n                            memory[temp67 + 0x44:temp67 + 0x44 + 0x20] = 0x0416c726561647920736574757 << 0x9c;\n                            var temp68 = memory[0x40:0x60];\n                            revert(memory[temp68:temp68 + temp67 - temp68 + 0x64]);\n                        }\n                    } else {\n                        var temp69 = memory[0x40:0x60];\n                        memory[temp69:temp69 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp69 + 0x04:temp69 + 0x04 + 0x20] = 0x20;\n                        memory[temp69 + 0x24:temp69 + 0x24 + 0x20] = 0x16;\n                        memory[temp69 + 0x44:temp69 + 0x44 + 0x20] = 0x139bc818dbdb9d1c9bdb081d1bdad95b88199bdd5b99 << 0x52;\n                        var temp70 = memory[0x40:0x60];\n                        revert(memory[temp70:temp70 + temp69 - temp70 + 0x64]);\n                    }\n                } else if (var0 == 0x23b872dd) {\n                    // Dispatch table entry for transferFrom(address,address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    var temp71 = (0x01 << 0xa0) - 0x01;\n                    var temp72 = var2;\n                    var2 = temp71 & msg.data[temp72:temp72 + 0x20];\n                    var3 = temp71 & msg.data[temp72 + 0x20:temp72 + 0x20 + 0x20];\n                    var4 = msg.data[temp72 + 0x40:temp72 + 0x40 + 0x20];\n                    var5 = 0x16de;\n                    var6 = msg.sender;\n                    var7 = var4;\n                    var5 = safeTransferFrom(var6, var7);\n                \n                    if (!var5) { revert(memory[0x00:0x00]); }\n                \n                    var5 = 0x16f2;\n                    var6 = var2;\n                    var7 = var3;\n                    var8 = var4;\n                \n                label_2781:\n                    var9 = 0x278c;\n                    var10 = var6;\n                    var11 = var7;\n                    var12 = var8;\n                    var13 = 0x2bbe;\n                    var14 = var10;\n                    var var15 = var11;\n                    var var16 = var12;\n                    var var17 = var14 & (0x01 << 0xa0) - 0x01;\n                    var var18 = 0x2cff;\n                    var var19 = var16;\n                    var18 = func_1993(var19);\n                \n                    if (var18 & (0x01 << 0xa0) - 0x01 != var17) {\n                        var temp74 = memory[0x40:0x60];\n                        memory[temp74:temp74 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp74 + 0x04:temp74 + 0x04 + 0x20] = 0x20;\n                        memory[temp74 + 0x24:temp74 + 0x24 + 0x20] = 0x09;\n                        memory[temp74 + 0x44:temp74 + 0x44 + 0x20] = 0x3737ba1037bbb732b9 << 0xb9;\n                        var temp75 = memory[0x40:0x60];\n                        revert(memory[temp75:temp75 + temp74 - temp75 + 0x64]);\n                    } else if (var15 & (0x01 << 0xa0) - 0x01) {\n                        var17 = 0x2d62;\n                        var18 = var16;\n                        func_3153(var18);\n                        memory[0x00:0x20] = var14 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var17 = 0x2d83;\n                        var18 = keccak256(memory[0x00:0x40]);\n                        var19 = 0x31a1;\n                        var var20 = storage[var18];\n                        var var21 = 0x01;\n                        var var22 = 0x00;\n                        var var23 = 0x2b2c;\n                        var var24 = var20;\n                        var var25 = var21;\n                        var temp73 = memory[0x40:0x60];\n                        var var26 = temp73;\n                        memory[0x40:0x60] = var26 + 0x40;\n                        memory[var26:var26 + 0x20] = 0x1e;\n                        memory[var26 + 0x20:var26 + 0x20 + 0x20] = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n                        var23 = func_2FD5(var24, var25, var26);\n                    \n                    label_2B2C:\n                        var19 = var23;\n                        // Error: Could not resolve jump destination!\n                    } else { revert(memory[0x00:0x00]); }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0x462399cd > var0) {\n                if (var0 == 0x2b1fd58a) {\n                    // Dispatch table entry for acceptBid(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = msg.data[var2:var2 + 0x20];\n                    var3 = 0x1701;\n                    var4 = msg.sender;\n                    var5 = var2;\n                    var3 = safeTransferFrom(var4, var5);\n                \n                    if (!var3) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x10;\n                \n                    if (!(storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xff)) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x10;\n                    var temp76 = keccak256(memory[0x00:0x40]);\n                    var3 = 0x1751;\n                    var5 = storage[temp76 + 0x01];\n                    var4 = var2;\n                    var6 = storage[temp76] & (0x01 << 0xa0) - 0x01;\n                \n                label_279F:\n                    memory[0x00:0x20] = var4;\n                    memory[0x20:0x40] = 0x11;\n                \n                    if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) {\n                        var7 = 0x00;\n                        memory[var7:var7 + 0x20] = var4;\n                        memory[0x20:0x40] = 0x11;\n                        var temp77 = keccak256(memory[var7:var7 + 0x40]);\n                        storage[temp77] = (storage[temp77] & ~0xff) | 0x01;\n                        var8 = 0x2945;\n                        var9 = 0x64;\n                        var10 = 0x27d2;\n                        var11 = var5;\n                        var12 = storage[0x13];\n                        var10 = func_2B33(var11, var12);\n                    \n                    label_27D2:\n                        var temp78 = var9;\n                        var9 = var10;\n                        var10 = temp78;\n                        var11 = 0x00;\n                        var12 = 0x2b2c;\n                        var13 = var9;\n                        var14 = var10;\n                        var temp79 = memory[0x40:0x60];\n                        var15 = temp79;\n                        memory[0x40:0x60] = var15 + 0x40;\n                        memory[var15:var15 + 0x20] = 0x1a;\n                        memory[var15 + 0x20:var15 + 0x20 + 0x20] = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n                        var12 = func_2F33(var13, var14, var15);\n                        goto label_2B2C;\n                    } else {\n                        var7 = 0x00;\n                        var8 = 0x27de;\n                        var9 = 0x64;\n                        var10 = 0x27d2;\n                        var11 = var5;\n                        var12 = storage[0x14];\n                        var10 = func_2B33(var11, var12);\n                        goto label_27D2;\n                    }\n                } else if (var0 == 0x2f745c59) {\n                    // Dispatch table entry for tokenOfOwnerByIndex(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0440;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = tokenOfOwnerByIndex(var2, var3);\n                    goto label_0440;\n                } else if (var0 == 0x41afca00) {\n                    // Dispatch table entry for 0x41afca00 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    func_07DB(var2, var3);\n                    stop();\n                } else if (var0 == 0x42842e0e) {\n                    // Dispatch table entry for safeTransferFrom(address,address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    var temp80 = (0x01 << 0xa0) - 0x01;\n                    var temp81 = var2;\n                    var2 = temp80 & msg.data[temp81:temp81 + 0x20];\n                    var3 = temp80 & msg.data[temp81 + 0x20:temp81 + 0x20 + 0x20];\n                    var4 = msg.data[temp81 + 0x40:temp81 + 0x40 + 0x20];\n                    var5 = 0x16f2;\n                    var6 = var2;\n                    var7 = var3;\n                    var8 = var4;\n                    var temp82 = memory[0x40:0x60];\n                    var9 = temp82;\n                    memory[0x40:0x60] = var9 + 0x20;\n                    memory[var9:var9 + 0x20] = 0x00;\n                \n                label_23DD:\n                    var10 = 0x23e7;\n                    var11 = msg.sender;\n                    var12 = var8;\n                    var10 = safeTransferFrom(var11, var12);\n                \n                    if (!var10) { revert(memory[0x00:0x00]); }\n                \n                    var10 = 0x230c;\n                    var11 = var6;\n                    var12 = var7;\n                    var13 = var8;\n                    goto label_2781;\n                } else if (var0 == 0x454a2ab3) {\n                    // Dispatch table entry for bid(uint256)\n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    bid(var2, var3);\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x462399cd) {\n                // Dispatch table entry for tokenDidHaveFirstSale(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0274;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = tokenDidHaveFirstSale(var2, var3);\n                goto label_0274;\n            } else if (var0 == 0x4f6ccce7) {\n                // Dispatch table entry for tokenByIndex(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = tokenByIndex(var2, var3);\n                goto label_0440;\n            } else if (var0 == 0x556d8628) {\n                // Dispatch table entry for expectedTokenSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = expectedTokenSupply();\n                goto label_0440;\n            } else if (var0 == 0x6352211e) {\n                // Dispatch table entry for ownerOf(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x036f;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = ownerOf(var2, var3);\n                goto label_036F;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = msg.data[var2:var2 + 0x20] & (0x01 << 0xa0) - 0x01;\n                var3 = 0x00;\n            \n                if (!(var2 & (0x01 << 0xa0) - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x03;\n                var4 = 0x1786;\n                var5 = keccak256(memory[0x00:0x40]);\n                var4 = balanceOf(var5);\n                var1 = var4;\n                // Error: Could not resolve jump destination!\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xb88d4fde > var0) {\n            if (0x98207051 > var0) {\n                if (var0 == 0x755db7b3) {\n                    // Dispatch table entry for useControlToken(uint256,uint256[],int256[])\n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    useControlToken(var2, var3);\n                    stop();\n                } else if (var0 == 0x8cb6ddcb) {\n                    // Dispatch table entry for 0x8cb6ddcb (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    func_0A5E(var2, var3);\n                    stop();\n                } else if (var0 == 0x8f9f193f) {\n                    // Dispatch table entry for updatePlatformAddress(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03c4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    updatePlatformAddress(var2, var3);\n                    stop();\n                } else if (var0 == 0x95d89b41) {\n                    // Dispatch table entry for symbol()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02d0;\n                    var1 = symbol();\n                    goto label_02D0;\n                } else if (var0 == 0x96bc50b0) {\n                    // Dispatch table entry for getControlToken(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0ae3;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = getControlToken(var2, var3);\n                    var temp83 = memory[0x40:0x60];\n                    memory[temp83:temp83 + 0x20] = 0x20;\n                    var temp84 = var1;\n                    memory[temp83 + 0x20:temp83 + 0x20 + 0x20] = memory[temp84:temp84 + 0x20];\n                    var2 = temp83;\n                    var3 = var2;\n                    var4 = var3 + 0x40;\n                    var5 = temp84 + 0x20;\n                    var6 = memory[temp84:temp84 + 0x20] * 0x20;\n                    var7 = var6;\n                    var8 = var4;\n                    var9 = var5;\n                    var10 = 0x00;\n                \n                    if (var10 >= var7) {\n                    label_0B1F:\n                        var temp85 = memory[0x40:0x60];\n                        return memory[temp85:temp85 + (var6 + var4) - temp85];\n                    } else {\n                    label_0B10:\n                        var temp86 = var10;\n                        memory[temp86 + var8:temp86 + var8 + 0x20] = memory[temp86 + var9:temp86 + var9 + 0x20];\n                        var10 = temp86 + 0x20;\n                    \n                        if (var10 >= var7) { goto label_0B1F; }\n                        else { goto label_0B10; }\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x98207051) {\n                // Dispatch table entry for 0x98207051 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x036f;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = func_0B56(var2, var3);\n                goto label_036F;\n            } else if (var0 == 0x98c8103e) {\n                // Dispatch table entry for mintArtwork(uint256,string,address[])\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var temp87 = var2;\n                var2 = msg.data[temp87:temp87 + 0x20];\n                var3 = temp87 + var3;\n                var4 = temp87;\n                var5 = var4 + 0x40;\n                var6 = msg.data[var4 + 0x20:var4 + 0x20 + 0x20];\n            \n                if (var6 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp88 = var4 + var6;\n                var6 = temp88;\n            \n                if (var6 + 0x20 > var3) { revert(memory[0x00:0x00]); }\n            \n                var temp89 = var6;\n                var temp90 = msg.data[temp89:temp89 + 0x20];\n                var6 = temp90;\n                var temp91 = var5;\n                var5 = temp89 + 0x20;\n                var7 = temp91;\n            \n                if ((var6 > 0x01 << 0x20) | (var5 + var6 > var3)) { revert(memory[0x00:0x00]); }\n            \n                var temp92 = var7;\n                var temp93 = var6;\n                var temp94 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp94 + (temp93 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp94:temp94 + 0x20] = temp93;\n                var temp95 = temp94 + 0x20;\n                memory[temp95:temp95 + temp93] = msg.data[var5:var5 + temp93];\n                memory[temp95 + temp93:temp95 + temp93 + 0x20] = 0x00;\n                var temp96 = var3;\n                var3 = temp94;\n                var temp97 = var4;\n                var4 = temp96;\n                var5 = temp97;\n                var6 = temp92 + 0x20;\n                var7 = msg.data[temp92:temp92 + 0x20];\n            \n                if (var7 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp98 = var5 + var7;\n                var7 = temp98;\n            \n                if (var7 + 0x20 > var4) { revert(memory[0x00:0x00]); }\n            \n                var temp99 = var7;\n                var temp100 = msg.data[temp99:temp99 + 0x20];\n                var7 = temp100;\n                var temp101 = var6;\n                var6 = temp99 + 0x20;\n                var8 = temp101;\n            \n                if ((var7 > 0x01 << 0x20) | (var6 + var7 * 0x20 > var4)) { revert(memory[0x00:0x00]); }\n            \n                var temp102 = var7;\n                var temp103 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp103 + temp102 * 0x20 + 0x20;\n                memory[temp103:temp103 + 0x20] = temp102;\n                var temp104 = temp103 + 0x20;\n                var temp105 = temp102 * 0x20;\n                memory[temp104:temp104 + temp105] = msg.data[var6:var6 + temp105];\n                memory[temp104 + temp105:temp104 + temp105 + 0x20] = 0x00;\n                var4 = temp103;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0c;\n            \n                if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != 0x01) { revert(memory[0x00:0x00]); }\n            \n                if (var2 == storage[0x16]) {\n                    var5 = 0x20c9;\n                    var6 = msg.sender;\n                    var7 = var2;\n                    goto label_268F;\n                } else {\n                    var temp106 = memory[0x40:0x60];\n                    memory[temp106:temp106 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp106 + 0x04:temp106 + 0x04 + 0x20] = 0x20;\n                    memory[temp106 + 0x24:temp106 + 0x24 + 0x20] = 0x1d;\n                    memory[temp106 + 0x44:temp106 + 0x44 + 0x20] = 0x4578706563746564546f6b656e537570706c7920646966666572656e74000000;\n                    var temp107 = memory[0x40:0x60];\n                    revert(memory[temp107:temp107 + temp106 - temp107 + 0x64]);\n                }\n            } else if (var0 == 0xa22cb465) {\n                // Dispatch table entry for setApprovalForAll(address,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                setApprovalForAll(var2, var3);\n                stop();\n            } else if (var0 == 0xa90d6de3) {\n                // Dispatch table entry for buyPrices(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = buyPrices(var2, var3);\n                goto label_0440;\n            } else if (var0 == 0xa94141a1) {\n                // Dispatch table entry for uniqueTokenCreators(uint256,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x036f;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var2 = uniqueTokenCreators(var2, var3);\n                goto label_036F;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xd66767ab > var0) {\n            if (var0 == 0xb88d4fde) {\n                // Dispatch table entry for safeTransferFrom(address,address,uint256,bytes)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n            \n                var temp108 = (0x01 << 0xa0) - 0x01;\n                var temp109 = var2;\n                var2 = temp108 & msg.data[temp109:temp109 + 0x20];\n                var temp110 = var3;\n                var3 = temp108 & msg.data[temp109 + 0x20:temp109 + 0x20 + 0x20];\n                var4 = msg.data[temp109 + 0x40:temp109 + 0x40 + 0x20];\n                var5 = temp109 + temp110;\n                var6 = temp109;\n                var7 = var6 + 0x80;\n                var8 = msg.data[var6 + 0x60:var6 + 0x60 + 0x20];\n            \n                if (var8 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp111 = var6 + var8;\n                var8 = temp111;\n            \n                if (var8 + 0x20 > var5) { revert(memory[0x00:0x00]); }\n            \n                var temp112 = var8;\n                var temp113 = msg.data[temp112:temp112 + 0x20];\n                var8 = temp113;\n                var temp114 = var7;\n                var7 = temp112 + 0x20;\n                var9 = temp114;\n            \n                if ((var8 > 0x01 << 0x20) | (var7 + var8 > var5)) { revert(memory[0x00:0x00]); }\n            \n                var temp115 = var8;\n                var temp116 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp116 + (temp115 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp116:temp116 + 0x20] = temp115;\n                var temp117 = temp116 + 0x20;\n                memory[temp117:temp117 + temp115] = msg.data[var7:var7 + temp115];\n                memory[temp117 + temp115:temp117 + temp115 + 0x20] = 0x00;\n                var5 = temp116;\n                goto label_23DD;\n            } else if (var0 == 0xb8c18015) {\n                // Dispatch table entry for 0xb8c18015 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = func_23FB();\n                goto label_0440;\n            } else if (var0 == 0xbab2d111) {\n                // Dispatch table entry for artistSecondSalePercentage()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0440;\n                var2 = artistSecondSalePercentage();\n                goto label_0440;\n            } else if (var0 == 0xc87b56dd) {\n                // Dispatch table entry for tokenURI(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d0;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = tokenURI(var2, var3);\n                goto label_02D0;\n            } else if (var0 == 0xcf8589b9) {\n                // Dispatch table entry for pendingBids(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0e84;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2, var3, var4 = pendingBids(var2);\n                var temp118 = memory[0x40:0x60];\n                memory[temp118:temp118 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                memory[temp118 + 0x20:temp118 + 0x20 + 0x20] = var3;\n                memory[temp118 + 0x40:temp118 + 0x40 + 0x20] = !!var4;\n                var temp119 = memory[0x40:0x60];\n                return memory[temp119:temp119 + temp118 - temp119 + 0x60];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xd66767ab) {\n            // Dispatch table entry for 0xd66767ab (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0440;\n            var2 = func_24D6();\n            goto label_0440;\n        } else if (var0 == 0xd91c070c) {\n            // Dispatch table entry for makeBuyPrice(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03c4;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            makeBuyPrice(var2, var3);\n            stop();\n        } else if (var0 == 0xdbe55e56) {\n            // Dispatch table entry for platformAddress()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x036f;\n            var2 = platformAddress();\n            goto label_036F;\n        } else if (var0 == 0xe66c7f35) {\n            // Dispatch table entry for 0xe66c7f35 (unknown)\n            var1 = 0x03c4;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2 = msg.data[var2:var2 + 0x20];\n            var3 = 0x2559;\n            var4 = msg.sender;\n            var5 = var2;\n            var3 = safeTransferFrom(var4, var5);\n        \n            if (var3) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x0f;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (!var3) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value < var3) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x10;\n        \n            if (!(storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xff)) {\n            label_2652:\n                var4 = 0x265d;\n                var5 = var2;\n                var6 = var3;\n                var7 = msg.sender;\n                goto label_279F;\n            } else {\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x10;\n                var temp120 = keccak256(memory[0x00:0x40]);\n                var temp121 = storage[temp120 + 0x01];\n                var temp122 = memory[0x40:0x60];\n                var temp123;\n                temp123, memory[temp122:temp122 + 0x00] = address(storage[temp120] & (0x01 << 0xa0) - 0x01).call.gas(!temp121 * 0x08fc).value(temp121)(memory[temp122:temp122 + 0x00]);\n                var4 = !temp123;\n            \n                if (!var4) {\n                    var temp124 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp124 + 0x60;\n                    memory[temp124:temp124 + 0x20] = 0x00;\n                    var temp125 = temp124 + 0x20;\n                    memory[temp125:temp125 + 0x20] = 0x00;\n                    var temp126 = temp124 + 0x40;\n                    memory[temp126:temp126 + 0x20] = 0x00;\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x10;\n                    var temp127 = keccak256(memory[0x00:0x40]);\n                    storage[temp127] = (memory[temp124:temp124 + 0x20] & (0x01 << 0xa0) - 0x01) | (storage[temp127] & ~((0x01 << 0xa0) - 0x01));\n                    storage[temp127 + 0x01] = memory[temp125:temp125 + 0x20];\n                    var temp128 = temp127 + 0x02;\n                    storage[temp128] = !!memory[temp126:temp126 + 0x20] | (storage[temp128] & ~0xff);\n                    goto label_2652;\n                } else {\n                    var temp129 = returndata.length;\n                    memory[0x00:0x00 + temp129] = returndata[0x00:0x00 + temp129];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            }\n        } else if (var0 == 0xe985e9c5) {\n            // Dispatch table entry for isApprovedForAll(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0274;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = isApprovedForAll(var2, var3);\n            goto label_0274;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function supportsInterface(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & ~((0x01 << 0xe0) - 0x01);\n        memory[0x00:0x20] = arg0 & ~((0x01 << 0xe0) - 0x01);\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_02AB(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getApproved(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_102B(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function approve(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x1051;\n        var var2 = arg1;\n        var1 = func_1993(var2);\n        var0 = var1;\n    \n        if (arg0 & (0x01 << 0xa0) - 0x01 == var0 & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var1 = var0 & (0x01 << 0xa0) - 0x01 == msg.sender;\n    \n        if (var1) {\n        label_108E:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n            var temp1 = arg1;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = (0x01 << 0xa0) - 0x01;\n            var temp4 = temp3 & arg0;\n            storage[temp2] = temp4 | (storage[temp2] & ~((0x01 << 0xa0) - 0x01));\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-1] & (0x01 << 0xa0) - 0x01, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2]]);\n            return;\n        } else {\n            var1 = 0x108e;\n            var2 = var0;\n            var var3 = msg.sender;\n            var1 = func_2661(var2, var3);\n            goto label_108E;\n        }\n    }\n    \n    function updateWhitelist(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = !!msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n    \n        if (msg.sender != storage[0x17] & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x0c;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = !!arg1 | (storage[temp1] & ~0xff);\n    }\n    \n    function withdrawBid(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x10;\n        arg1 = storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xff;\n    \n        if (arg1) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x10;\n        \n            if (msg.sender == storage[keccak256(memory[0x00:0x40])] & (0x01 << 0xa0) - 0x01) { goto label_1175; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (arg1) {\n        label_1175:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x10;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = storage[temp0 + 0x01];\n            var temp2 = memory[0x40:0x60];\n            var temp3;\n            temp3, memory[temp2:temp2 + 0x00] = address(storage[temp0] & (0x01 << 0xa0) - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + 0x00]);\n            arg1 = !temp3;\n        \n            if (!arg1) {\n                var temp4 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp4 + 0x60;\n                memory[temp4:temp4 + 0x20] = 0x00;\n                var temp5 = temp4 + 0x20;\n                memory[temp5:temp5 + 0x20] = 0x00;\n                var temp6 = temp4 + 0x40;\n                memory[temp6:temp6 + 0x20] = 0x00;\n                var temp7 = arg0;\n                memory[0x00:0x20] = temp7;\n                memory[0x20:0x40] = 0x10;\n                var temp8 = keccak256(memory[0x00:0x40]);\n                storage[temp8] = (memory[temp4:temp4 + 0x20] & (0x01 << 0xa0) - 0x01) | (storage[temp8] & ~((0x01 << 0xa0) - 0x01));\n                storage[temp8 + 0x01] = memory[temp5:temp5 + 0x20];\n                var temp9 = temp8 + 0x02;\n                storage[temp9] = !!memory[temp6:temp6 + 0x20] | (storage[temp9] & ~0xff);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = temp7;\n                var temp11 = memory[0x40:0x60];\n                log(memory[temp11:temp11 + temp10 - temp11 + 0x20], [0x99319fa1a5fca42d549d4d49989116496775f906f62e0e2ff2ea3c3aacdefa27]);\n                return;\n            } else {\n                var temp12 = returndata.length;\n                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function tokenOfOwnerByIndex(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var var1 = keccak256(memory[var0:var0 + 0x40]);\n        var var2 = arg1;\n    \n        if (var2 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var1;\n        return storage[keccak256(memory[0x00:0x20]) + var2];\n    }\n    \n    function func_07DB(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x12;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (arg0 & (0x01 << 0xa0) - 0x01) | (storage[temp0] & ~((0x01 << 0xa0) - 0x01));\n    }\n    \n    function bid(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x17e0;\n        var var0 = msg.sender;\n        var var1 = arg0;\n        arg1 = safeTransferFrom(var0, var1);\n    \n        if (arg1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x10;\n    \n        if (!(storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xff)) {\n        label_18B6:\n            var temp0 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp0 + 0x60;\n            var temp1 = msg.sender;\n            memory[temp0:temp0 + 0x20] = temp1;\n            var temp2 = msg.value;\n            var temp3 = temp0 + 0x20;\n            memory[temp3:temp3 + 0x20] = temp2;\n            var temp4 = temp0 + 0x40;\n            memory[temp4:temp4 + 0x20] = 0x01;\n            var temp5 = arg0;\n            memory[0x00:0x20] = temp5;\n            memory[0x20:0x40] = 0x10;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            storage[temp6] = (memory[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01) | (storage[temp6] & ~((0x01 << 0xa0) - 0x01));\n            storage[temp6 + 0x01] = memory[temp3:temp3 + 0x20];\n            var temp7 = temp6 + 0x02;\n            storage[temp7] = !!memory[temp4:temp4 + 0x20] | (storage[temp7] & ~0xff);\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = temp5;\n            memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp2;\n            memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = temp1;\n            var temp9 = memory[0x40:0x60];\n            log(memory[temp9:temp9 + temp8 - temp9 + 0x60], [0xcbf61548a249040d379a7f7a4486a18d78824bce978077f4943fb55e111af1c1]);\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x10;\n        \n            if (msg.value > storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x10;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                var temp11 = storage[temp10 + 0x01];\n                var temp12 = memory[0x40:0x60];\n                var temp13;\n                temp13, memory[temp12:temp12 + 0x00] = address(storage[temp10] & (0x01 << 0xa0) - 0x01).call.gas(!temp11 * 0x08fc).value(temp11)(memory[temp12:temp12 + 0x00]);\n                arg1 = !temp13;\n            \n                if (!arg1) { goto label_18B6; }\n            \n                var temp14 = returndata.length;\n                memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = 0x461bcd << 0xe5;\n                memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n                memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x1e;\n                memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x426964206d757374206265203e207468616e2063757272656e74206269640000;\n                var temp16 = memory[0x40:0x60];\n                revert(memory[temp16:temp16 + temp15 - temp16 + 0x64]);\n            }\n        }\n    }\n    \n    function tokenDidHaveFirstSale(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x11;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function tokenByIndex(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x00;\n        var var0 = 0x07;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1];\n    }\n    \n    function ownerOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_1993(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function useControlToken(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = temp0 + arg1;\n        var var0 = temp0;\n        var var1 = var0 + 0x40;\n        var var2 = msg.data[var0 + 0x20:var0 + 0x20 + 0x20];\n    \n        if (var2 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = var0 + var2;\n        var2 = temp1;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var2;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var2 = temp3;\n        var temp4 = var1;\n        var1 = temp2 + 0x20;\n        var var3 = temp4;\n    \n        if ((var2 > 0x01 << 0x20) | (var1 + var2 * 0x20 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var3;\n        var temp6 = var2;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + temp6 * 0x20 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = temp7 + 0x20;\n        var temp9 = temp6 * 0x20;\n        memory[temp8:temp8 + temp9] = msg.data[var1:var1 + temp9];\n        memory[temp8 + temp9:temp8 + temp9 + 0x20] = 0x00;\n        var temp10 = arg1;\n        arg1 = temp7;\n        var temp11 = var0;\n        var0 = temp10;\n        var1 = temp11;\n        var2 = temp5 + 0x20;\n        var3 = msg.data[temp5:temp5 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var1 + var3;\n        var3 = temp12;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var3;\n        var temp14 = msg.data[temp13:temp13 + 0x20];\n        var3 = temp14;\n        var var4 = var2;\n        var2 = temp13 + 0x20;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 * 0x20 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp15 = var3;\n        var temp16 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp16 + temp15 * 0x20 + 0x20;\n        memory[temp16:temp16 + 0x20] = temp15;\n        var temp17 = temp16 + 0x20;\n        var temp18 = temp15 * 0x20;\n        memory[temp17:temp17 + temp18] = msg.data[var2:var2 + temp18];\n        memory[temp17 + temp18:temp17 + temp18 + 0x20] = 0x00;\n        var0 = temp16;\n        var1 = 0x19f5;\n        var2 = msg.sender;\n        var3 = arg0;\n        var1 = safeTransferFrom(var2, var3);\n    \n        if (var1) {\n        label_1A28:\n        \n            if (var1) {\n                var1 = 0x60;\n                var temp19 = memory[var0:var0 + 0x20];\n                var temp20 = memory[0x40:0x60];\n                var3 = temp19;\n                var2 = temp20;\n                memory[var2:var2 + 0x20] = var3;\n                memory[0x40:0x60] = var2 + var3 * 0x20 + 0x20;\n            \n                if (!var3) {\n                    var1 = var2;\n                    var2 = 0x00;\n                \n                    if (var2 >= memory[arg1:arg1 + 0x20]) {\n                    label_1C21:\n                    \n                        if (!msg.value) {\n                        label_1C63:\n                            var2 = 0x1864c0e277c81ec1608d84e54d6f6c849f227acc0da19d9169fb0094d962f1c9;\n                            var3 = arg0;\n                            var4 = msg.value;\n                            var temp21 = arg1;\n                            var var5 = temp21;\n                            var var6 = var1;\n                            var var7 = var0;\n                            var temp22 = memory[0x40:0x60];\n                            var var8 = temp22;\n                            memory[var8:var8 + 0x20] = var3;\n                            var temp23 = var8 + 0x20;\n                            memory[temp23:temp23 + 0x20] = var4;\n                            var temp24 = temp23 + 0x20;\n                            var var9 = temp24;\n                            var var10 = var9 + 0x20;\n                            var var11 = var10 + 0x20;\n                            var temp25 = var11 + 0x20;\n                            memory[var9:var9 + 0x20] = temp25 - var8;\n                            memory[temp25:temp25 + 0x20] = memory[var5:var5 + 0x20];\n                            var var12 = temp25 + 0x20;\n                            var var13 = var5 + 0x20;\n                            var var14 = memory[var5:var5 + 0x20] * 0x20;\n                            var var15 = var14;\n                            var var16 = var12;\n                            var var17 = var13;\n                            var var18 = 0x00;\n                        \n                            if (var18 >= var15) {\n                            label_1CDD:\n                                var temp26 = var14 + var12;\n                                memory[var10:var10 + 0x20] = temp26 - var8;\n                                var temp27 = var6;\n                                memory[temp26:temp26 + 0x20] = memory[temp27:temp27 + 0x20];\n                                var12 = temp26 + 0x20;\n                                var13 = temp27 + 0x20;\n                                var14 = memory[temp27:temp27 + 0x20] * 0x20;\n                                var15 = var14;\n                                var16 = var12;\n                                var17 = var13;\n                                var18 = 0x00;\n                            \n                                if (var18 >= var15) {\n                                label_1D1C:\n                                    var temp28 = var14 + var12;\n                                    memory[var11:var11 + 0x20] = temp28 - var8;\n                                    var temp29 = var7;\n                                    memory[temp28:temp28 + 0x20] = memory[temp29:temp29 + 0x20];\n                                    var12 = temp28 + 0x20;\n                                    var13 = temp29 + 0x20;\n                                    var14 = memory[temp29:temp29 + 0x20] * 0x20;\n                                    var15 = var14;\n                                    var16 = var12;\n                                    var17 = var13;\n                                    var18 = 0x00;\n                                \n                                    if (var18 >= var15) {\n                                    label_1D5B:\n                                        var temp30 = memory[0x40:0x60];\n                                        log(memory[temp30:temp30 + (var14 + var12) - temp30], [stack[-17]]);\n                                        return;\n                                    } else {\n                                    label_1D4C:\n                                        var temp31 = var18;\n                                        memory[temp31 + var16:temp31 + var16 + 0x20] = memory[temp31 + var17:temp31 + var17 + 0x20];\n                                        var18 = temp31 + 0x20;\n                                    \n                                        if (var18 >= var15) { goto label_1D5B; }\n                                        else { goto label_1D4C; }\n                                    }\n                                } else {\n                                label_1D0D:\n                                    var temp32 = var18;\n                                    memory[temp32 + var16:temp32 + var16 + 0x20] = memory[temp32 + var17:temp32 + var17 + 0x20];\n                                    var18 = temp32 + 0x20;\n                                \n                                    if (var18 >= var15) { goto label_1D1C; }\n                                    else { goto label_1D0D; }\n                                }\n                            } else {\n                            label_1CCE:\n                                var temp33 = var18;\n                                memory[temp33 + var16:temp33 + var16 + 0x20] = memory[temp33 + var17:temp33 + var17 + 0x20];\n                                var18 = temp33 + 0x20;\n                            \n                                if (var18 >= var15) { goto label_1CDD; }\n                                else { goto label_1CCE; }\n                            }\n                        } else {\n                            var temp34 = memory[0x40:0x60];\n                            var temp35 = msg.value;\n                            var temp36;\n                            temp36, memory[temp34:temp34 + 0x00] = address(storage[0x17] & (0x01 << 0xa0) - 0x01).call.gas(!temp35 * 0x08fc).value(temp35)(memory[temp34:temp34 + 0x00]);\n                            var2 = !temp36;\n                        \n                            if (!var2) { goto label_1C63; }\n                        \n                            var temp37 = returndata.length;\n                            memory[0x00:0x00 + temp37] = returndata[0x00:0x00 + temp37];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                    label_1AB6:\n                        var3 = 0x00;\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x0e;\n                        var4 = keccak256(memory[0x00:0x40]) + 0x02;\n                        var5 = 0x00;\n                        var6 = arg1;\n                        var7 = var2;\n                    \n                        if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                    \n                        var temp38 = var5;\n                        memory[temp38:temp38 + 0x20] = memory[var7 * 0x20 + 0x20 + var6:var7 * 0x20 + 0x20 + var6 + 0x20];\n                        var temp39 = temp38 + 0x20;\n                        memory[temp39:temp39 + 0x20] = var4;\n                        var3 = keccak256(memory[0x00:0x00 + temp39 + 0x20]);\n                        var4 = storage[var3];\n                        var5 = var0;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        var temp40 = memory[var6 * 0x20 + 0x20 + var5:var6 * 0x20 + 0x20 + var5 + 0x20] i>= var4;\n                        var4 = temp40;\n                    \n                        if (!var4) {\n                        label_1B31:\n                        \n                            if (var4) {\n                                var4 = storage[var3 + 0x02];\n                                var5 = var0;\n                                var6 = var2;\n                            \n                                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                            \n                                if (memory[var6 * 0x20 + 0x20 + var5:var6 * 0x20 + 0x20 + var5 + 0x20] != var4) {\n                                    var4 = storage[var3 + 0x02];\n                                    var5 = var0;\n                                    var6 = var2;\n                                \n                                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                                \n                                    storage[var3 + 0x02] = memory[var6 * 0x20 + 0x20 + var5:var6 * 0x20 + 0x20 + var5 + 0x20];\n                                    var5 = var4;\n                                    var6 = var1;\n                                    var7 = var2;\n                                \n                                    if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                                \n                                    memory[var7 * 0x20 + var6 + 0x20:var7 * 0x20 + var6 + 0x20 + 0x20] = var5;\n                                    var2 = var2 + 0x01;\n                                \n                                    if (var2 >= memory[arg1:arg1 + 0x20]) { goto label_1C21; }\n                                    else { goto label_1AB6; }\n                                } else {\n                                    var temp41 = memory[0x40:0x60];\n                                    memory[temp41:temp41 + 0x20] = 0x461bcd << 0xe5;\n                                    memory[temp41 + 0x04:temp41 + 0x04 + 0x20] = 0x20;\n                                    memory[temp41 + 0x24:temp41 + 0x24 + 0x20] = 0x1a;\n                                    memory[temp41 + 0x44:temp41 + 0x44 + 0x20] = 0x4d7573742070726f7669646520646966666572656e742076616c000000000000;\n                                    var temp42 = memory[0x40:0x60];\n                                    revert(memory[temp42:temp42 + temp41 - temp42 + 0x64]);\n                                }\n                            } else {\n                                var temp43 = memory[0x40:0x60];\n                                memory[temp43:temp43 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp43 + 0x04:temp43 + 0x04 + 0x20] = 0x20;\n                                memory[temp43 + 0x24:temp43 + 0x24 + 0x20] = 0x0b;\n                                memory[temp43 + 0x44:temp43 + 0x44 + 0x20] = 0x125b9d985b1a59081d985b << 0xaa;\n                                var temp44 = memory[0x40:0x60];\n                                revert(memory[temp44:temp44 + temp43 - temp44 + 0x64]);\n                            }\n                        } else {\n                            var4 = storage[var3 + 0x01];\n                            var5 = var0;\n                            var6 = var2;\n                        \n                            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                        \n                            var4 = memory[var6 * 0x20 + 0x20 + var5:var6 * 0x20 + 0x20 + var5 + 0x20] i<= var4;\n                            goto label_1B31;\n                        }\n                    }\n                } else {\n                    var temp45 = var3 * 0x20;\n                    memory[var2 + 0x20:var2 + 0x20 + temp45] = code[code.length:code.length + temp45];\n                    var1 = var2;\n                    var2 = 0x00;\n                \n                    if (var2 >= memory[arg1:arg1 + 0x20]) { goto label_1C21; }\n                    else { goto label_1AB6; }\n                }\n            } else {\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = 0x461bcd << 0xe5;\n                memory[temp46 + 0x04:temp46 + 0x04 + 0x20] = 0x20;\n                memory[temp46 + 0x24:temp46 + 0x24 + 0x20] = 0x1a;\n                memory[temp46 + 0x44:temp46 + 0x44 + 0x20] = 0x4f776e6572206f72207065726d697373696f6e6564206f6e6c79000000000000;\n                var temp47 = memory[0x40:0x60];\n                revert(memory[temp47:temp47 + temp46 - temp47 + 0x64]);\n            }\n        } else {\n            var1 = msg.sender;\n            var2 = 0x12;\n            var3 = 0x00;\n            var4 = 0x1a09;\n            var5 = arg0;\n            var4 = func_1993(var5);\n            var temp48 = (0x01 << 0xa0) - 0x01;\n            var temp49 = var3;\n            memory[temp49:temp49 + 0x20] = temp48 & var4;\n            memory[temp49 + 0x20:temp49 + 0x20 + 0x20] = var2;\n            var1 = storage[keccak256(memory[0x00:0x00 + temp49 + 0x40])] & temp48 == var1;\n            goto label_1A28;\n        }\n    }\n    \n    function func_0A5E(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n    \n        if (msg.sender != storage[0x17] & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= 0x64) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x64;\n        var var2 = 0x1db0;\n        var var3 = arg1;\n        var var4 = var0;\n        var2 = func_2AD2(var3, var4);\n    \n        if (var2 >= var1) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        storage[0x13] = temp1;\n        var temp2 = arg1;\n        storage[0x14] = temp2;\n        var temp3 = var0;\n        storage[0x15] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp1;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp2;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x60], [0xd946966340b57e0fdcf288c7bb51c470709dcfcd5d883779d28cf85679f75814]);\n    }\n    \n    function updatePlatformAddress(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n    \n        if (msg.sender != storage[0x17] & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0 & (0x01 << 0xa0) - 0x01;\n        storage[0x17] = temp0 | (storage[0x17] & ~((0x01 << 0xa0) - 0x01));\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xb29030287f33baad1941013143d2e1bd5e66c87318f0bd99bc0fae51fe4b191f]);\n    }\n    \n    function getControlToken(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0e;\n        arg1 = 0x60;\n    \n        if (!(storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0e;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = 0x60;\n        var var3 = storage[var0];\n        var var2 = 0x1f1f;\n        var var4 = 0x03;\n        var2 = func_2B33(var3, var4);\n        var temp0 = memory[0x40:0x60];\n        var temp1 = var2;\n        var3 = temp1;\n        var2 = temp0;\n        memory[var2:var2 + 0x20] = var3;\n        memory[0x40:0x60] = var2 + var3 * 0x20 + 0x20;\n    \n        if (!var3) {\n            var1 = var2;\n            var2 = 0x00;\n            var3 = var2;\n        \n            if (var3 >= storage[var0]) {\n            label_2023:\n                return var1;\n            } else {\n            label_1F59:\n                memory[0x00:0x20] = var3;\n                memory[0x20:0x40] = var0 + 0x02;\n                var4 = storage[keccak256(memory[0x00:0x40])];\n                var var5 = var1;\n                var var6 = var2;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                var4 = 0x1f93;\n                var5 = var2;\n                var6 = 0x01;\n                var4 = func_2AD2(var5, var6);\n                var temp2 = var4;\n                var2 = temp2;\n                memory[0x00:0x20] = var3;\n                memory[0x20:0x40] = var0 + 0x02;\n                var4 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n                var5 = var1;\n                var6 = var2;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                var4 = 0x1fd6;\n                var5 = var2;\n                var6 = 0x01;\n                var4 = func_2AD2(var5, var6);\n                var temp3 = var4;\n                var2 = temp3;\n                memory[0x00:0x20] = var3;\n                memory[0x20:0x40] = var0 + 0x02;\n                var4 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                var5 = var1;\n                var6 = var2;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                var4 = 0x2019;\n                var5 = var2;\n                var6 = 0x01;\n                var4 = func_2AD2(var5, var6);\n                var2 = var4;\n                var3 = var3 + 0x01;\n            \n                if (var3 >= storage[var0]) { goto label_2023; }\n                else { goto label_1F59; }\n            }\n        } else {\n            var temp4 = var3 * 0x20;\n            memory[var2 + 0x20:var2 + 0x20 + temp4] = code[code.length:code.length + temp4];\n            var1 = var2;\n            var2 = 0x00;\n            var3 = var2;\n        \n            if (var3 >= storage[var0]) { goto label_2023; }\n            else { goto label_1F59; }\n        }\n    }\n    \n    function func_0B56(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x12;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & (0x01 << 0xa0) - 0x01;\n    }\n    \n    function setApprovalForAll(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = !!msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n    \n        if (msg.sender == arg0 & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x04;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = !!arg1;\n        storage[temp4] = temp5 | (storage[temp4] & ~0xff);\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, msg.sender, stack[-2] & (0x01 << 0xa0) - 0x01]);\n    }\n    \n    function buyPrices(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x0f;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function uniqueTokenCreators(var arg0, var arg1) returns (var arg0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = arg1;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1] & (0x01 << 0xa0) - 0x01;\n    }\n    \n    function tokenURI(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0b;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var var1 = temp0;\n        var temp1 = storage[var1];\n        var temp2 = memory[0x40:0x60];\n        var temp3 = (temp1 & !(temp1 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp3;\n        memory[0x40:0x60] = temp2 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp2:temp2 + 0x20] = var2;\n        arg1 = 0x60;\n        var var0 = temp2;\n        var var3 = var0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_249C:\n            return var0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_2493; }\n        \n        label_247F:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_247F; }\n        \n        label_2493:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_249C;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_249C;\n        }\n    }\n    \n    function pendingBids(var arg0) returns (var arg0, var r1, var r2) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x10;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & (0x01 << 0xa0) - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02] & 0xff;\n        return arg0, r1, r2;\n    }\n    \n    function makeBuyPrice(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x24e6;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        var0 = safeTransferFrom(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x0f;\n        var temp2 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp2;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp1;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x40], [0xd765eb1cf8aab1a01381fef8dcc9f755ef2d2233849716da96a90e32da84821a]);\n    }\n    \n    function isApprovedForAll(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20] & temp0;\n        r0 = func_2661(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x09];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x09;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_1020:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_1017; }\n        \n        label_1003:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_1003; }\n        \n        label_1017:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_1020;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_1020;\n        }\n    }\n    \n    function func_102B(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        return storage[keccak256(memory[0x00:0x40])] & (0x01 << 0xa0) - 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x07]; }\n    \n    function expectedTokenSupply() returns (var r0) { return storage[0x16]; }\n    \n    function func_1993(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])] & (0x01 << 0xa0) - 0x01;\n    \n        if (var1) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x0a];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x0a;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_1020:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_1017; }\n        \n        label_1003:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_1003; }\n        \n        label_1017:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_1020;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_1020;\n        }\n    }\n    \n    function func_23FB() returns (var r0) { return storage[0x13]; }\n    \n    function artistSecondSalePercentage() returns (var r0) { return storage[0x15]; }\n    \n    function func_24D6() returns (var r0) { return storage[0x14]; }\n    \n    function platformAddress() returns (var r0) { return storage[0x17] & (0x01 << 0xa0) - 0x01; }\n    \n    function func_2661(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function safeTransferFrom(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x272e;\n        var var3 = arg1;\n        var2 = func_1993(var3);\n        var1 = var2;\n        var2 = arg0 & (0x01 << 0xa0) - 0x01 == var1 & (0x01 << 0xa0) - 0x01;\n    \n        if (var2) {\n        label_2769:\n        \n            if (var2) {\n            label_2779:\n                return var2;\n            } else {\n                var2 = 0x2779;\n                var3 = var1;\n                var var4 = arg0;\n                var2 = func_2661(var3, var4);\n                goto label_2779;\n            }\n        } else {\n            var2 = arg0 & (0x01 << 0xa0) - 0x01;\n            var3 = 0x275e;\n            var4 = arg1;\n            var3 = func_102B(var4);\n            var2 = var3 & (0x01 << 0xa0) - 0x01 == var2;\n            goto label_2769;\n        }\n    }\n    \n    function balanceOf(var arg0) returns (var r0) { return storage[arg0]; }\n    \n    function func_2AD2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1b;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_2B33(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg0) { return 0x00; }\n    \n        var var1 = arg1 * arg0;\n        var var2 = arg1;\n        var var3 = arg0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = temp0 + 0x04;\n        var temp2 = temp1 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2 - temp1;\n        memory[temp2:temp2 + 0x20] = 0x21;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x21] = code[0x3267:0x3288];\n        var temp4 = memory[0x40:0x60];\n        revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n    }\n    \n    function func_2B8C(var arg0, var arg1, var arg2) {\n        var var0 = 0x16f2;\n        var var1 = arg0;\n        var var2 = arg1;\n        func_2CCF(var1, var2);\n    }\n    \n    function func_2B96(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        return !!(storage[keccak256(memory[0x00:0x40])] & (0x01 << 0xa0) - 0x01);\n    }\n    \n    function func_2CCF(var arg0, var arg1) {\n        var var0 = 0x2cd9;\n        var var1 = arg0;\n        var var2 = arg1;\n        func_302F(var1, var2);\n        var0 = 0x2ce3;\n        var1 = arg0;\n        var2 = arg1;\n        func_2EF5(var1, var2);\n        var0 = 0x265d;\n        var1 = arg1;\n        func_310F(var1);\n    }\n    \n    function func_2EF5(var arg0, var arg1) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = temp2;\n        memory[0x20:0x40] = 0x05;\n        storage[temp1] = temp2 + 0x01;\n        memory[0x00:0x20] = temp1;\n        storage[keccak256(memory[0x00:0x20]) + temp2] = temp0;\n    }\n    \n    function func_2F33(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1) {\n            var1 = 0x00;\n            var var2 = arg1;\n            var var3 = arg0;\n        \n            if (var2) { return var3 / var2; }\n            else { assert(); }\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = temp0 + 0x04;\n            var2 = temp1;\n            var3 = var2;\n            var temp2 = var3 + 0x20;\n            memory[var3:var3 + 0x20] = temp2 - var3;\n            var temp3 = var1;\n            memory[temp2:temp2 + 0x20] = memory[temp3:temp3 + 0x20];\n            var var4 = temp2 + 0x20;\n            var var6 = memory[temp3:temp3 + 0x20];\n            var var5 = temp3 + 0x20;\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n            var var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_2F84:\n                var temp4 = var6;\n                var4 = temp4 + var4;\n                var5 = temp4 & 0x1f;\n            \n                if (!var5) {\n                    var temp5 = memory[0x40:0x60];\n                    revert(memory[temp5:temp5 + var4 - temp5]);\n                } else {\n                    var temp6 = var5;\n                    var temp7 = var4 - temp6;\n                    memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                    var temp8 = memory[0x40:0x60];\n                    revert(memory[temp8:temp8 + (temp7 + 0x20) - temp8]);\n                }\n            } else {\n            label_2F75:\n                var temp9 = var10;\n                memory[temp9 + var8:temp9 + var8 + 0x20] = memory[temp9 + var9:temp9 + var9 + 0x20];\n                var10 = temp9 + 0x20;\n            \n                if (var10 >= var7) { goto label_2F84; }\n                else { goto label_2F75; }\n            }\n        }\n    }\n    \n    function func_2FD5(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        var temp1 = var1;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = memory[temp1:temp1 + 0x20];\n        var var2 = temp0 + 0x04;\n        var var3 = var2;\n        var var4 = temp0 + 0x44;\n        var var5 = temp1 + 0x20;\n        var var6 = memory[temp1:temp1 + 0x20];\n        var var7 = var6;\n        var var8 = var4;\n        var var9 = var5;\n        var var10 = 0x00;\n    \n        if (!var7) {\n        label_2F84:\n            var temp2 = var6;\n            var4 = temp2 + var4;\n            var5 = temp2 & 0x1f;\n        \n            if (!var5) {\n                var temp3 = memory[0x40:0x60];\n                revert(memory[temp3:temp3 + var4 - temp3]);\n            } else {\n                var temp4 = var5;\n                var temp5 = var4 - temp4;\n                memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                var temp6 = memory[0x40:0x60];\n                revert(memory[temp6:temp6 + (temp5 + 0x20) - temp6]);\n            }\n        } else {\n            var temp7 = var10;\n            memory[temp7 + var8:temp7 + var8 + 0x20] = memory[temp7 + var9:temp7 + var9 + 0x20];\n            var10 = temp7 + 0x20;\n        \n        label_2F6C:\n        \n            if (var10 >= var7) { goto label_2F84; }\n        \n            var temp8 = var10;\n            memory[temp8 + var8:temp8 + var8 + 0x20] = memory[temp8 + var9:temp8 + var9 + 0x20];\n            var10 = temp8 + 0x20;\n            goto label_2F6C;\n        }\n    }\n    \n    function func_302F(var arg0, var arg1) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x304b;\n        var var1 = arg1;\n        var0 = func_2B96(var1);\n    \n        if (!var0) {\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = 0x01;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = arg0 & (0x01 << 0xa0) - 0x01;\n            storage[temp0] = temp1 | (storage[temp0] & ~((0x01 << 0xa0) - 0x01));\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x03;\n            var1 = keccak256(memory[0x00:0x40]);\n            var0 = 0x30d3;\n            func_31A5(var1);\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, stack[-2] & (0x01 << 0xa0) - 0x01, stack[-1]]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x14;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x1d1bdad95b88185b1c9958591e481b5a5b9d1959 << 0x62;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        }\n    }\n    \n    function func_310F(var arg0) {\n        var temp0 = storage[0x07];\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        storage[0x07] = temp0 + 0x01;\n        memory[0x00:0x20] = 0x07;\n        storage[temp0 + 0xa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688] = temp1;\n    }\n    \n    function func_3153(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & (0x01 << 0xa0) - 0x01)) { return; }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~((0x01 << 0xa0) - 0x01);\n    }\n    \n    function func_31A5(var arg0) {\n        var temp0 = arg0;\n        storage[temp0] = storage[temp0] + 0x01;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 103.24308252334595,
	"usage": {
		"completion_tokens": 1201,
		"prompt_tokens": 30874,
		"total_tokens": 32075
	}
}