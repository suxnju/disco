{
	"address": "0x155a00d0d74f2efab70bec1b7bcc07ddbaf3e164",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the decompiled code, here's the equivalent Solidity contract code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Ownership {\n    address private _isOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _isOwner = msg.sender;\n        emit OwnershipTransferred(address(0), _isOwner);\n    }\n\n    modifier onlyOwner() {\n        require(_isOwner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_isOwner, newOwner);\n        _isOwner = newOwner;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_isOwner, address(0));\n        _isOwner = address(0);\n    }\n\n    function owner() public view returns (address) {\n        return _isOwner;\n    }\n\n    function isOwner() public view returns (bool) {\n        return msg.sender == _isOwner;\n    }\n\n    function balance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function send(address to, uint256 amount) public onlyOwner {\n        require(to != address(0), \"Send to the zero address\");\n        (bool success, ) = to.call{value: amount}(\"\");\n        require(success, \"Failed to send Ether\");\n    }\n\n    fallback() external payable { }\n}\n```\n\nThis contract makes use of a common pattern in Ethereum smart contracts called \"Ownable\". It designates an owner of the contract and only allows the owner to perform certain actions such as transferring ownership or sending funds.",
				"role": "assistant"
			}
		}
	],
	"created": 1701465133,
	"id": "chatcmpl-8R55xcoxqeaBWFjcLmbl5hIgwGIrM",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 16:25 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _isOwner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _isOwner, 'Ownable: caller is not the owner');\n    require(varg0, 'Ownable: new owner is the zero address');\n    emit OwnershipTransferred(_isOwner, varg0);\n    _isOwner = varg0;\n}\n\nfunction fallback() public payable { \n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _isOwner, 'Ownable: caller is not the owner');\n    emit OwnershipTransferred(_isOwner, 0);\n    _isOwner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _isOwner;\n}\n\nfunction isOwner() public nonPayable { \n    return msg.sender == _isOwner;\n}\n\nfunction balance() public nonPayable { \n    return this.balance;\n}\n\nfunction send(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _isOwner, 'Ownable: caller is not the owner');\n    v0 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v0); // checks call status, propagates error data on error\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x715018a6 == function_selector >> 224) {\n            renounceOwnership();\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x8f32d59b == function_selector >> 224) {\n            isOwner();\n        } else if (0xb69ef8a8 == function_selector >> 224) {\n            balance();\n        } else if (0xd0679d34 == function_selector >> 224) {\n            send(address,uint256);\n        } else if (0xf2fde38b == function_selector >> 224) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 16:25 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _isOwner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _isOwner, 'Ownable: caller is not the owner');\n    require(varg0, 'Ownable: new owner is the zero address');\n    emit OwnershipTransferred(_isOwner, varg0);\n    _isOwner = varg0;\n}\n\nfunction fallback() public payable { \n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _isOwner, 'Ownable: caller is not the owner');\n    emit OwnershipTransferred(_isOwner, 0);\n    _isOwner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _isOwner;\n}\n\nfunction isOwner() public nonPayable { \n    return msg.sender == _isOwner;\n}\n\nfunction balance() public nonPayable { \n    return this.balance;\n}\n\nfunction send(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _isOwner, 'Ownable: caller is not the owner');\n    v0 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v0); // checks call status, propagates error data on error\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x715018a6 == function_selector >> 224) {\n            renounceOwnership();\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x8f32d59b == function_selector >> 224) {\n            isOwner();\n        } else if (0xb69ef8a8 == function_selector >> 224) {\n            balance();\n        } else if (0xd0679d34 == function_selector >> 224) {\n            send(address,uint256);\n        } else if (0xf2fde38b == function_selector >> 224) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 16:25 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _isOwner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _isOwner, 'Ownable: caller is not the owner');\n    require(varg0, 'Ownable: new owner is the zero address');\n    emit OwnershipTransferred(_isOwner, varg0);\n    _isOwner = varg0;\n}\n\nfunction fallback() public payable { \n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _isOwner, 'Ownable: caller is not the owner');\n    emit OwnershipTransferred(_isOwner, 0);\n    _isOwner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _isOwner;\n}\n\nfunction isOwner() public nonPayable { \n    return msg.sender == _isOwner;\n}\n\nfunction balance() public nonPayable { \n    return this.balance;\n}\n\nfunction send(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _isOwner, 'Ownable: caller is not the owner');\n    v0 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v0); // checks call status, propagates error data on error\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x715018a6 == function_selector >> 224) {\n            renounceOwnership();\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x8f32d59b == function_selector >> 224) {\n            isOwner();\n        } else if (0xb69ef8a8 == function_selector >> 224) {\n            balance();\n        } else if (0xd0679d34 == function_selector >> 224) {\n            send(address,uint256);\n        } else if (0xf2fde38b == function_selector >> 224) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 20.447828769683838,
	"usage": {
		"completion_tokens": 370,
		"prompt_tokens": 618,
		"total_tokens": 988
	}
}