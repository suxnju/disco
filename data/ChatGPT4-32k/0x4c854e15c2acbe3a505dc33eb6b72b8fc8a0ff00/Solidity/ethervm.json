{
	"address": "0x4c854e15c2acbe3a505dc33eb6b72b8fc8a0ff00",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The above code is a decompiled code from an EVM bytecode. It cannot be directly converted into a Solidity code since it lacks high-level language constructs such as loops, conditional statements, and function declarations. The code seems to be working with some sort of a key-value store and performs various checks and operations on it. However, to write a similar contract in Solidity, information about the contract's functionality, the purpose of its functions, and how they interact with each other would be required. \n\nBelow is an example of how a similar contract might look in Solidity, based on some assumptions:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    mapping(address => uint256) public balances;\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setBalance(address _address, uint256 _balance) public {\n        require(msg.sender == owner, \"Only the contract owner can set balances\");\n        balances[_address] = _balance;\n    }\n\n    function getBalance(address _address) public view returns (uint256) {\n        return balances[_address];\n    }\n}\n```\n\nIn the example above, we're creating a simple contract where an `owner` (the one who deploys the contract) can set balances for any address. Any address can retrieve its balance by calling `getBalance`.\n\nPlease note that this is a very simplified version and may not have the same functionality as the original contract - it's just to illustrate how such a contract might be constructed in Solidity.",
				"role": "assistant"
			}
		}
	],
	"created": 1700470707,
	"id": "chatcmpl-8MuOpJBcFL8JlEiaDtwOl9NOc462K",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (0x8da5cb5b > var0) {\n                if (0x432b357c > var0) {\n                    if (var0 == 0x23de29) {\n                        // Dispatch table entry for tokensReceived(address,address,address,uint256,bytes,bytes)\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0117;\n                        var var2 = 0x0112;\n                        var var3 = msg.data.length;\n                        var var4 = 0x04;\n                        var var5;\n                        var var6;\n                        var var7;\n                        var var8;\n                        var var9;\n                        var2, var3, var4, var5, var6, var7, var8, var9 = func_0F7F(var3, var4);\n                        func_0112(var2, var3, var4, var5, var6, var7, var8, var9);\n                        stop();\n                    } else if (var0 == 0x0ba234d6) {\n                        // Dispatch table entry for cancelRecovery()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0117;\n                        cancelRecovery();\n                        stop();\n                    } else if (var0 == 0x249cb3fa) {\n                        // Dispatch table entry for canImplementInterfaceForAddress(bytes32,address)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x014e;\n                        var2 = 0x0149;\n                        var3 = msg.data.length;\n                        var4 = 0x04;\n                        var2, var3 = func_106B(var3, var4);\n                        var1 = func_0149(var2, var3);\n                    \n                    label_014E:\n                        var temp0 = var1;\n                        var1 = 0x015b;\n                        var2 = temp0;\n                        var3 = memory[0x40:0x60];\n                        var1 = func_1160(var2, var3);\n                    \n                    label_015B:\n                        var temp1 = memory[0x40:0x60];\n                        return memory[temp1:temp1 + var1 - temp1];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x432b357c) {\n                    // Dispatch table entry for 0x432b357c (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0184;\n                    var2 = 0x017f;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_0F02(var3, var4);\n                    var3 = 0x00;\n                    var4 = 0x03ca;\n                    var5 = 0x01;\n                    var6 = var2;\n                    var4 = func_0A3D(var5, var6);\n                    var1 = var4;\n                    // Error: Could not resolve jump destination!\n                } else if (var0 == 0x6d6a5349) {\n                    // Dispatch table entry for addRecoveryAddress(address,uint16)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0117;\n                    var2 = 0x01ac;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2, var3 = func_102D(var3, var4);\n                    func_01AC(var2, var3);\n                    stop();\n                } else if (var0 == 0x7e3bfa1d) {\n                    // Dispatch table entry for removeRecoveryAddress(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0117;\n                    var2 = 0x01cc;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_0F02(var3, var4);\n                    func_01CC(var2);\n                    stop();\n                } else if (var0 == 0x8a295c37) {\n                    // Dispatch table entry for 0x8a295c37 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x014e;\n                    var2 = func_0574();\n                    goto label_014E;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0xb61d27f6 > var0) {\n                if (var0 == 0x8da5cb5b) {\n                    // Dispatch table entry for owner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01fb;\n                    var2 = func_057A();\n                \n                label_01FB:\n                    var temp2 = var2;\n                    var2 = 0x015b;\n                    var3 = temp2;\n                    var4 = memory[0x40:0x60];\n                    var2 = func_10F0(var3, var4);\n                    goto label_015B;\n                } else if (var0 == 0x923689e4) {\n                    // Dispatch table entry for startRecovery()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0117;\n                    startRecovery();\n                    stop();\n                } else if (var0 == 0x994b68b5) {\n                    // Dispatch table entry for 0x994b68b5 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0232;\n                    var1 = func_06BA();\n                    var temp3 = var1;\n                    var1 = 0x015b;\n                    var2 = temp3;\n                    var3 = memory[0x40:0x60];\n                    var1 = func_1104(var2, var3);\n                    goto label_015B;\n                } else if (var0 == 0xb52f65e7) {\n                    // Dispatch table entry for 0xb52f65e7 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01fb;\n                    var2 = func_06CB();\n                    goto label_01FB;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0xb61d27f6) {\n                // Dispatch table entry for execute(address,uint256,bytes)\n                var1 = 0x0267;\n                var2 = 0x0262;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4, var5 = func_0F25(var3, var4);\n                var1 = func_0262(var2, var3, var4, var5);\n                var temp4 = var1;\n                var1 = 0x015b;\n                var2 = temp4;\n                var3 = memory[0x40:0x60];\n                var1 = func_1169(var2, var3);\n                goto label_015B;\n            } else if (var0 == 0xc7423803) {\n                // Dispatch table entry for finishRecovery()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0117;\n                finishRecovery();\n                stop();\n            } else if (var0 == 0xf1f3c7f8) {\n                // Dispatch table entry for 0xf1f3c7f8 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0117;\n            \n                if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n                    var3 = temp7 + 0x04;\n                    var2 = 0x02e5;\n                    var2 = func_1639(var3);\n                    goto label_02E5;\n                } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n                    var2 = storage[0x03] & (0x01 << 0xa0) - 0x01;\n                    var3 = 0x091a;\n                    cancelRecovery();\n                    var3 = 0x0923;\n                    var4 = var2;\n                    func_04B3(var4);\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n                    var2 = 0x02e5;\n                    var3 = temp5 + 0x04;\n                    var2 = func_13A1(var3);\n                \n                label_02E5:\n                    var temp6 = memory[0x40:0x60];\n                    revert(memory[temp6:temp6 + var2 - temp6]);\n                }\n            } else if (var0 == 0xf9899326) {\n                // Dispatch table entry for deploy(uint256,bytes,uint256)\n                var1 = 0x01fb;\n                var2 = 0x02ac;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4, var5 = func_108F(var3, var4);\n                var1 = func_02AC(var2, var3, var4, var5);\n                goto label_01FB;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (msg.data.length) { revert(memory[0x00:0x00]); }\n        else { stop(); }\n    }\n    \n    function func_0112(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7) {}\n    \n    function func_0149(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = address(this) == arg1 & (0x01 << 0xa0) - 0x01;\n    \n        if (!var1) {\n            if (!var1) {\n            label_03C6:\n                return 0x00;\n            } else {\n            label_03A0:\n                return 0xa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b4;\n            }\n        } else if (arg0 != 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b) { goto label_03C6; }\n        else { goto label_03A0; }\n    }\n    \n    function func_01AC(var arg0, var arg1) {\n        if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp4 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_1639(var1);\n            goto label_02E5;\n        } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp3 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_1547(var1);\n            goto label_02E5;\n        } else if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x046e;\n            var var1 = 0x01;\n            var var2 = arg0;\n            var var3 = arg1;\n            func_0AA1(var1, var2, var3);\n            var0 = arg0 & (0x01 << 0xa0) - 0x01;\n            var1 = 0xca4ba7fe9344a8a1e34b14f051473d2b4b02dd480025f14df8f6fa70c7950cab;\n            var2 = 0x04a7;\n            var3 = arg1;\n            var var4 = memory[0x40:0x60];\n            var2 = func_180D(var3, var4);\n            var temp0 = memory[0x40:0x60];\n            log(memory[temp0:temp0 + var2 - temp0], [stack[-2], stack[-3]]);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp1 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_167D(var1);\n        \n        label_02E5:\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + var0 - temp2]);\n        }\n    }\n    \n    function func_01CC(var arg0) {\n        func_04B3(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0262(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x60;\n    \n        if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            var2 = temp9 + 0x04;\n            var1 = 0x02e5;\n            var1 = func_1639(var2);\n            goto label_02E5;\n        } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd << 0xe5;\n            var1 = 0x02e5;\n            var2 = temp8 + 0x04;\n            var1 = func_1547(var2);\n            goto label_02E5;\n        } else if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            var1 = 0x02e5;\n            var2 = temp7 + 0x04;\n            var1 = func_15A4(var2);\n            goto label_02E5;\n        } else if (address(this).balance >= arg1) {\n            var var1 = 0x00;\n            var var2 = 0x60;\n            var var3 = arg0 & (0x01 << 0xa0) - 0x01;\n            var var4 = arg1;\n            var var5 = 0x0795;\n            var var6 = arg2;\n            var var8 = memory[0x40:0x60];\n            var var7 = arg3;\n            var5 = func_10E0(var6, var7, var8);\n            var temp0 = memory[0x40:0x60];\n            var temp1;\n            temp1, memory[temp0:temp0 + 0x00] = address(var3).call.gas(msg.gas).value(var4)(memory[temp0:temp0 + var5 - temp0]);\n            var4 = returndata.length;\n            var5 = var4;\n        \n            if (var5 == 0x00) {\n                var2 = 0x60;\n                var1 = var3;\n            \n                if (var1) {\n                label_07F9:\n                    return var2;\n                } else {\n                label_07E2:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n                    var4 = temp2 + 0x04;\n                    var3 = 0x02e5;\n                    var3 = func_17D6(var4);\n                \n                label_02E5:\n                    var temp3 = memory[0x40:0x60];\n                    revert(memory[temp3:temp3 + var3 - temp3]);\n                }\n            } else {\n                var temp4 = memory[0x40:0x60];\n                var4 = temp4;\n                memory[0x40:0x60] = var4 + (returndata.length + 0x3f & ~0x1f);\n                memory[var4:var4 + 0x20] = returndata.length;\n                var temp5 = returndata.length;\n                memory[var4 + 0x20:var4 + 0x20 + temp5] = returndata[0x00:0x00 + temp5];\n                var2 = var4;\n                var1 = var3;\n            \n                if (var1) { goto label_07F9; }\n                else { goto label_07E2; }\n            }\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd << 0xe5;\n            var2 = temp6 + 0x04;\n            var1 = 0x02e5;\n            var1 = func_11BC(var2);\n            goto label_02E5;\n        }\n    }\n    \n    function func_02AC(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[var0] & (0x01 << 0xa0) - 0x01) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            var2 = temp9 + 0x04;\n            var1 = 0x02e5;\n            var1 = func_1639(var2);\n            goto label_02E5;\n        } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd << 0xe5;\n            var1 = 0x02e5;\n            var2 = temp8 + 0x04;\n            var1 = func_1547(var2);\n            goto label_02E5;\n        } else if (address(this).balance < arg0) {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            var2 = temp7 + 0x04;\n            var1 = 0x02e5;\n            var1 = func_13FE(var2);\n            goto label_02E5;\n        } else if (arg2) {\n            var temp0 = arg2;\n            var temp1 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp0;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + temp0] = msg.data[arg1:arg1 + temp0];\n            memory[temp2 + temp0:temp2 + temp0 + 0x20] = 0x00;\n            var var1 = temp1;\n            var temp3 = new(memory[var1 + 0x20:var1 + 0x20 + memory[var1:var1 + 0x20]]).value(arg0).salt(arg3)();\n            var var2 = temp3;\n        \n            if (var2 & (0x01 << 0xa0) - 0x01) { return var2; }\n        \n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n            var var4 = temp4 + 0x04;\n            var var3 = 0x02e5;\n            var3 = func_123F(var4);\n        \n        label_02E5:\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + var3 - temp5]);\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd << 0xe5;\n            var1 = 0x02e5;\n            var2 = temp6 + 0x04;\n            var1 = func_171C(var2);\n            goto label_02E5;\n        }\n    }\n    \n    function cancelRecovery() {\n        if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp2 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_1639(var1);\n            goto label_02E5;\n        } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n            var var0 = storage[0x03] & (0x01 << 0xa0) - 0x01;\n            var var1 = 0x032a;\n            func_0A25();\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8154b6c5e1fc90d44b49808ef93f9739148d0821411890f8cd684385e24b9f1e, stack[-1] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x02e5;\n            var1 = temp0 + 0x04;\n            var0 = func_13A1(var1);\n        \n        label_02E5:\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_04B3(var arg0) {\n        if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp3 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_1639(var1);\n            goto label_02E5;\n        } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp2 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_1547(var1);\n            goto label_02E5;\n        } else if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x053d;\n            var var1 = 0x01;\n            var var2 = arg0;\n            func_0C4F(var1, var2);\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x250546491931526473f4670f0964714a4f7272548fa2040f447d653f5cffbbb7, stack[-1] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x02e5;\n            var1 = temp0 + 0x04;\n            var0 = func_167D(var1);\n        \n        label_02E5:\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_0574() returns (var r0) { return storage[0x04]; }\n    \n    function func_057A() returns (var r0) { return storage[0x00] & (0x01 << 0xa0) - 0x01; }\n    \n    function startRecovery() {\n        var var0 = 0x059a;\n        var var1 = 0x01;\n        var var2 = msg.sender;\n        var0 = func_0DBC(var1, var2);\n    \n        if (var0) {\n            var0 = 0x00;\n            var1 = 0x05c9;\n            var2 = 0x01;\n            var var3 = msg.sender;\n            var1 = func_0A3D(var2, var3);\n            var0 = var1;\n            var1 = !!(storage[0x03] & (0x01 << 0xa0) - 0x01);\n        \n            if (!(storage[0x03] & (0x01 << 0xa0) - 0x01)) {\n            label_0664:\n                var temp0 = msg.sender;\n                storage[0x03] = temp0 | (storage[0x03] & ~((0x01 << 0xa0) - 0x01));\n                storage[0x04] = ((var0 & 0xffff) * 0x015180 & 0xffffff) + block.timestamp;\n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xcd4e9df2b0a742bc5628c20baf55859f839c034aa76a32f600d6b085c4de4829, msg.sender]);\n                return;\n            } else {\n                var2 = 0x00;\n                var3 = 0x0601;\n                var var4 = 0x01;\n                var var5 = storage[0x03] & (0x01 << 0xa0) - 0x01;\n                var3 = func_0A3D(var4, var5);\n                var2 = var3;\n            \n                if (var0 & 0xffff < var2 & 0xffff) {\n                    log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8154b6c5e1fc90d44b49808ef93f9739148d0821411890f8cd684385e24b9f1e, storage[0x03] & (0x01 << 0xa0) - 0x01]);\n                    goto label_0664;\n                } else {\n                    var temp1 = memory[0x40:0x60];\n                    memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n                    var3 = 0x02e5;\n                    var4 = temp1 + 0x04;\n                    var3 = func_14C4(var4);\n                \n                label_02E5:\n                    var temp2 = memory[0x40:0x60];\n                    revert(memory[temp2:temp2 + var3 - temp2]);\n                }\n            }\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x02e5;\n            var1 = temp3 + 0x04;\n            var0 = func_1467(var1);\n            goto label_02E5;\n        }\n    }\n    \n    function func_06BA() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x06c6;\n        var var2 = 0x01;\n        return func_0DDA(var2);\n    }\n    \n    function func_06CB() returns (var r0) { return storage[0x03] & (0x01 << 0xa0) - 0x01; }\n    \n    function finishRecovery() {\n        if (!(storage[0x03] & (0x01 << 0xa0) - 0x01)) {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x02e5;\n            var1 = temp5 + 0x04;\n            var0 = func_13A1(var1);\n            goto label_02E5;\n        } else if (block.timestamp >= storage[0x04]) {\n            var temp0 = storage[0x00];\n            var temp1 = (0x01 << 0xa0) - 0x01;\n            storage[0x00] = (temp1 & storage[0x03]) | (temp0 & ~((0x01 << 0xa0) - 0x01));\n            var var0 = temp0 & temp1;\n            var var1 = 0x0877;\n            func_0A25();\n            var temp2 = (0x01 << 0xa0) - 0x01;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x18fd514351dc50d192b7e41b5a6478575c793d38f756ec15acc7b1796597ef19, stack[-1] & (0x01 << 0xa0) - 0x01, storage[0x00] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp3 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_12D1(var1);\n        \n        label_02E5:\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + var0 - temp4]);\n        }\n    }\n    \n    function func_0A25() {\n        storage[0x03] = storage[0x03] & ~((0x01 << 0xa0) - 0x01);\n        storage[0x04] = ~0x00;\n    }\n    \n    function func_0A3D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = arg0;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n    \n        if (var1) {\n            var var2 = arg0 + 0x01;\n            var var3 = var1;\n        \n            if (var3 >= storage[var2]) { assert(); }\n        \n            memory[0x00:0x20] = var2;\n            return storage[keccak256(memory[0x00:0x20]) + var3] / (0x01 << 0xa0) & 0xffff;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var3 = temp0 + 0x04;\n            var2 = 0x02e5;\n            var2 = func_129C(var3);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var2 - temp1]);\n        }\n    }\n    \n    function func_0AA1(var arg0, var arg1, var arg2) {\n        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = arg0;\n        var var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var0) {\n            var var1 = arg2;\n            var var2 = arg0 + 0x01;\n            var var3 = var0;\n        \n            if (var3 >= storage[var2]) { assert(); }\n        \n            memory[0x00:0x20] = var2;\n            var temp0 = keccak256(memory[0x00:0x20]) + var3;\n            storage[temp0] = (var1 & 0xffff) * 0x0100 ** 0x14 | (storage[temp0] & ~(0xffff * 0x0100 ** 0x14));\n            var1 = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x00:0x20] = var1;\n            var temp1 = arg0;\n            memory[0x20:0x40] = temp1;\n            var2 = temp1 + 0x01;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var3 >= storage[var2]) { assert(); }\n        \n        label_0BB5:\n            memory[0x00:0x20] = var2;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var3] & (0x01 << 0xa0) - 0x01 == var1) {\n                memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                var temp2 = arg0;\n                memory[0x20:0x40] = temp2;\n                var2 = temp2 + 0x01;\n                var1 = arg2 & 0xffff;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n            \n                if (storage[keccak256(memory[0x00:0x20]) + var3] / (0x01 << 0xa0) & 0xffff == var1) { return; }\n            \n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n                var2 = temp3 + 0x04;\n                var1 = 0x02e5;\n                var1 = func_1344(var2);\n            \n            label_02E5:\n                var temp4 = memory[0x40:0x60];\n                revert(memory[temp4:temp4 + var1 - temp4]);\n            } else {\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n                var1 = 0x02e5;\n                var2 = temp5 + 0x04;\n                var1 = func_16BF(var2);\n                goto label_02E5;\n            }\n        } else {\n            var1 = 0x0ac7;\n            var1 = func_0EA4();\n            var temp6 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp6 + 0x40;\n            var temp7 = (0x01 << 0xa0) - 0x01;\n            var temp8 = arg1 & temp7;\n            memory[temp6:temp6 + 0x20] = temp8;\n            var temp9 = temp6 + 0x20;\n            memory[temp9:temp9 + 0x20] = arg2 & 0xffff;\n            var temp10 = arg0;\n            var temp11 = temp10 + 0x01;\n            var temp12 = storage[temp11];\n            storage[temp11] = temp12 + 0x01;\n            memory[0x00:0x20] = temp11;\n            var temp13 = temp12 + keccak256(memory[0x00:0x20]);\n            storage[temp13] = (((storage[temp13] & ~((0x01 << 0xa0) - 0x01)) | (temp7 & memory[temp6:temp6 + 0x20])) & ~(0xffff << 0xa0)) | (memory[temp9:temp9 + 0x20] & 0xffff) * (0x01 << 0xa0);\n            memory[0x00:0x20] = temp8;\n            memory[0x20:0x40] = temp10;\n            storage[keccak256(memory[0x00:0x40])] = storage[temp11] + ~0x00;\n            var1 = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x00:0x20] = var1;\n            var temp14 = arg0;\n            memory[0x20:0x40] = temp14;\n            var2 = temp14 + 0x01;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var3 < storage[var2]) { goto label_0BB5; }\n            else { assert(); }\n        }\n    }\n    \n    function func_0C4F(var arg0, var arg1) {\n        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = arg0;\n        var var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (!var0) { return; }\n    \n        var var1 = storage[arg0 + 0x01] + ~0x00;\n    \n        if (var1 == var0) {\n        label_0D0C:\n            var var2 = arg0 + 0x01;\n            var var3 = storage[var2];\n        \n            if (!var3) { assert(); }\n        \n            var temp0 = var2;\n            memory[0x00:0x20] = temp0;\n            var temp1 = var3;\n            var temp2 = ~0x00;\n            var temp3 = temp2 + temp1 + keccak256(memory[0x00:0x20]);\n            storage[temp3] = storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffffffff;\n            storage[temp0] = temp1 + temp2;\n            memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = arg0;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            var2 = var0 == var1;\n        \n            if (var2) {\n            label_0D9C:\n            \n                if (var2) { return; }\n            \n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n                var2 = 0x02e5;\n                var3 = temp4 + 0x04;\n                var2 = func_1779(var3);\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + var2 - temp5]);\n            } else {\n                var2 = arg1 & (0x01 << 0xa0) - 0x01;\n                var3 = arg0 + 0x01;\n                var var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var2 = storage[keccak256(memory[0x00:0x20]) + var4] & (0x01 << 0xa0) - 0x01 != var2;\n                goto label_0D9C;\n            }\n        } else {\n            var2 = 0x00;\n            var3 = arg0 + 0x01;\n            var4 = var1;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n            var2 = keccak256(memory[0x00:0x20]) + var4;\n            var3 = var2;\n            var4 = arg0 + 0x01;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp6 = var3;\n            var temp7 = var5 + keccak256(memory[0x00:0x20]);\n            var temp8 = (0x01 << 0xa0) - 0x01;\n            var temp9 = (temp8 & storage[temp6]) | (storage[temp7] & ~((0x01 << 0xa0) - 0x01));\n            storage[temp7] = temp9;\n            storage[temp7] = (temp9 & ~(0xffff << 0xa0)) | (storage[temp6] / (0x01 << 0xa0) & 0xffff) * (0x01 << 0xa0);\n            memory[0x00:0x20] = temp8 & storage[var2];\n            memory[0x20:0x40] = arg0;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            goto label_0D0C;\n        }\n    }\n    \n    function func_0DBC(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = arg0;\n        return !!storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0DDA(var arg0) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var temp0 = storage[arg0 + 0x01] - 0x01;\n        var temp1 = memory[0x40:0x60];\n        var var3 = temp0;\n        var var2 = temp1;\n        memory[var2:var2 + 0x20] = var3;\n        memory[0x40:0x60] = var2 + var3 * 0x20 + 0x20;\n    \n        if (!var3) {\n        label_0E21:\n            var1 = var2;\n            var2 = 0x01;\n        \n            if (var2 >= storage[arg0 + 0x01]) {\n            label_0E9D:\n                return var1;\n            } else {\n            label_0E34:\n                var3 = arg0 + 0x01;\n                var var4 = var2;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp2 = keccak256(memory[0x00:0x20]);\n                var temp3 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp3 + 0x40;\n                var temp4 = storage[var4 + temp2];\n                memory[temp3:temp3 + 0x20] = temp4 & (0x01 << 0xa0) - 0x01;\n                var3 = temp3;\n                memory[var3 + 0x20:var3 + 0x20 + 0x20] = temp4 / (0x01 << 0xa0) & 0xffff;\n                var4 = var1;\n                var var5 = var2 + ~0x00;\n            \n                if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n            \n                memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20] = var3;\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[arg0 + 0x01]) { goto label_0E9D; }\n                else { goto label_0E34; }\n            }\n        } else {\n            var4 = var2 + 0x20;\n            var5 = 0x0e0e;\n            var5 = func_0EA4();\n        \n        label_0E0E:\n            var temp5 = var4;\n            memory[temp5:temp5 + 0x20] = var5;\n            var4 = temp5 + 0x20;\n            var3 = var3 - 0x01;\n        \n            if (var3) {\n                var5 = 0x0e0e;\n                var5 = func_0EA4();\n                goto label_0E0E;\n            } else {\n                var3 = var4;\n                goto label_0E21;\n            }\n        }\n    }\n    \n    function func_0EA4() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_0EBB(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 + 0x1f i< arg0) {\n            var1 = msg.data[arg1:arg1 + 0x20];\n        \n            if (var1 <= 0xffffffffffffffff) {\n                var temp0 = arg1;\n                var0 = temp0 + 0x20;\n            \n                if (temp0 + var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n            \n                arg0 = var1;\n                r0 = var0;\n                return r0, arg0;\n            } else {\n                var temp1 = var0;\n                revert(memory[temp1:temp1 + temp1]);\n            }\n        } else {\n            var temp2 = var0;\n            revert(memory[temp2:temp2 + temp2]);\n        }\n    }\n    \n    function func_0F02(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = msg.data[arg1:arg1 + 0x20];\n            var var2 = 0x0f1e;\n            var var3 = var1;\n            func_181C(var3);\n            return var1;\n        } else {\n            var temp0 = var0;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_0F25(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3) {\n        r3 = 0x00;\n        var var1 = r3;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var4 = msg.data[arg1:arg1 + 0x20];\n            var var5 = 0x0f45;\n            var var6 = var4;\n            func_181C(var6);\n            r3 = var4;\n            var temp0 = arg1;\n            var1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n            var4 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        \n            if (var4 <= 0xffffffffffffffff) {\n                var5 = 0x0f73;\n                var6 = arg0;\n                var var7 = arg1 + var4;\n                var5, var6 = func_0EBB(var6, var7);\n                var temp1 = r3;\n                r3 = var6;\n                r0 = temp1;\n                arg0 = var1;\n                arg1 = var5;\n                return r0, arg0, arg1, r3;\n            } else {\n                var temp2 = var2;\n                revert(memory[temp2:temp2 + temp2]);\n            }\n        } else {\n            var temp3 = var1;\n            revert(memory[temp3:temp3 + temp3]);\n        }\n    }\n    \n    function func_0F7F(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3, var r4, var r5, var r6, var r7) {\n        r3 = 0x00;\n        r4 = r3;\n        r5 = 0x00;\n        r6 = r5;\n        r7 = 0x00;\n        var var5 = r7;\n        var var6 = 0x00;\n        var var7 = var6;\n    \n        if (arg0 - arg1 i>= 0xc0) {\n            var var8 = msg.data[arg1:arg1 + 0x20];\n            var var9 = 0x0fa5;\n            var var10 = var8;\n            func_181C(var10);\n            r3 = var8;\n            var8 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n            var9 = 0x0fb5;\n            var10 = var8;\n            func_181C(var10);\n            r4 = var8;\n            var8 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n            var9 = 0x0fc5;\n            var10 = var8;\n            func_181C(var10);\n            r5 = var8;\n            var temp0 = arg1;\n            r6 = msg.data[temp0 + 0x60:temp0 + 0x60 + 0x20];\n            var8 = msg.data[temp0 + 0x80:temp0 + 0x80 + 0x20];\n            var9 = 0xffffffffffffffff;\n        \n            if (var8 <= var9) {\n                var10 = 0x0ff4;\n                var var11 = arg0;\n                var var12 = arg1 + var8;\n                var10, var11 = func_0EBB(var11, var12);\n                r7 = var10;\n                var5 = var11;\n                var8 = msg.data[arg1 + 0xa0:arg1 + 0xa0 + 0x20];\n            \n                if (var8 <= var9) {\n                    var9 = 0x1019;\n                    var10 = arg0;\n                    var11 = arg1 + var8;\n                    var9, var10 = func_0EBB(var10, var11);\n                    r0 = r3;\n                    arg0 = r4;\n                    arg1 = r5;\n                    r3 = r6;\n                    var temp1 = r7;\n                    r7 = var10;\n                    r4 = temp1;\n                    r5 = var5;\n                    r6 = var9;\n                    return r0, arg0, arg1, r3, r4, r5, r6, r7;\n                } else {\n                    var temp2 = var6;\n                    revert(memory[temp2:temp2 + temp2]);\n                }\n            } else {\n                var temp3 = r7;\n                revert(memory[temp3:temp3 + temp3]);\n            }\n        } else {\n            var temp4 = r7;\n            revert(memory[temp4:temp4 + temp4]);\n        }\n    }\n    \n    function func_102D(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = msg.data[arg1:arg1 + 0x20];\n            var var3 = 0x104a;\n            var var4 = var2;\n            func_181C(var4);\n            var0 = var2;\n            var temp0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n            var2 = temp0;\n        \n            if (var2 == var2 & 0xffff) {\n                arg0 = var2;\n                r0 = var0;\n                return r0, arg0;\n            } else {\n                var temp1 = var1;\n                revert(memory[temp1:temp1 + temp1]);\n            }\n        } else {\n            var temp2 = var0;\n            revert(memory[temp2:temp2 + temp2]);\n        }\n    }\n    \n    function func_106B(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var temp0 = arg1;\n            var0 = msg.data[temp0:temp0 + 0x20];\n            var var2 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n            var var3 = 0x1060;\n            var var4 = var2;\n            func_181C(var4);\n            arg0 = var2;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var temp1 = var0;\n            revert(memory[temp1:temp1 + temp1]);\n        }\n    }\n    \n    function func_108F(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3) {\n        r3 = 0x00;\n        var var1 = r3;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var temp0 = arg1;\n            r3 = msg.data[temp0:temp0 + 0x20];\n            var var4 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        \n            if (var4 <= 0xffffffffffffffff) {\n                var var5 = 0x10cd;\n                var var6 = arg0;\n                var var7 = arg1 + var4;\n                var5, var6 = func_0EBB(var6, var7);\n                r0 = r3;\n                arg0 = var5;\n                var temp1 = arg1;\n                arg1 = var6;\n                r3 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n                return r0, arg0, arg1, r3;\n            } else {\n                var temp2 = var1;\n                revert(memory[temp2:temp2 + temp2]);\n            }\n        } else {\n            var temp3 = r3;\n            revert(memory[temp3:temp3 + temp3]);\n        }\n    }\n    \n    function func_10E0(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg2;\n        memory[temp1:temp1 + temp0] = msg.data[arg0:arg0 + temp0];\n        memory[temp0 + temp1:temp0 + temp1 + 0x20] = 0x00;\n        return temp0 + temp1;\n    }\n    \n    function func_10F0(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        return temp0 + 0x20;\n    }\n    \n    function func_1104(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        var temp1 = arg0;\n        var temp2 = memory[temp1:temp1 + 0x20];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp2;\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var var2 = 0x40;\n        var var4 = temp2;\n        var var3 = temp0 + var2;\n        var var5 = var1 + temp1;\n        var var6 = var0;\n    \n        if (var6 >= var4) {\n        label_1153:\n            return var3;\n        } else {\n        label_112A:\n            var temp3 = var5;\n            var temp4 = memory[temp3:temp3 + 0x20];\n            var temp5 = var3;\n            memory[temp5:temp5 + 0x20] = memory[temp4:temp4 + 0x20] & (0x01 << 0xa0) - 0x01;\n            var temp6 = var1;\n            memory[temp5 + temp6:temp5 + temp6 + 0x20] = memory[temp6 + temp4:temp6 + temp4 + 0x20] & 0xffff;\n            var3 = var2 + temp5;\n            var5 = temp6 + temp3;\n            var6 = var6 + 0x01;\n        \n            if (var6 >= var4) { goto label_1153; }\n            else { goto label_112A; }\n        }\n    }\n    \n    function func_1160(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0;\n        return temp0 + 0x20;\n    }\n    \n    function func_1169(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = var0;\n    \n        if (var3 >= var2) {\n        label_1195:\n        \n            if (var3 <= var2) { return (var2 + 0x1f & ~0x1f) + arg1 + 0x40; }\n        \n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = var0;\n            return (temp2 + 0x1f & ~0x1f) + temp3 + 0x40;\n        } else {\n        label_1182:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_1195; }\n            else { goto label_1182; }\n        }\n    }\n    \n    function func_11BC(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x4f;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x57616c6c657420646f6573206e6f74206861766520656e6f7567682066756e64;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x7320617661696c61626c6520746f206578656375746520746865206465736972;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x6564207472616e73616374696f6e2e0000000000000000000000000000000000;\n        return temp0 + 0xa0;\n    }\n    \n    function func_123F(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x39;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x436f6e7472616374206372656174696f6e2072657475726e6564206164647265;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x737320302c20696e6469636174696e67206661696c7572652e00000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_129C(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x20;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x50726f7669646564206b657920776173206e6f7420696e20746865206d61702e;\n        return temp0 + 0x60;\n    }\n    \n    function func_12D1(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x4d;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x596f75206d757374207761697420756e74696c20746865207265636f76657279;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x2064656c6179206973206f766572206265666f72652066696e697368696e6720;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x3a3432903932b1b7bb32b93c97 << 0x99;\n        return temp0 + 0xa0;\n    }\n    \n    function func_1344(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x39;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x56616c756520617420696e736572746564206c6f636174696f6e20646f657320;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x6e6f74206d6174636820696e7365727465642076616c75652e00000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_13A1(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x31;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x54686973206d6574686f642063616e206f6e6c792062652063616c6c65642064;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x7572696e672061207265636f766572792e000000000000000000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_13FE(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x43;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x57616c6c657420646f6573206e6f74206861766520656e6f7567682066756e64;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x7320617661696c61626c6520746f206465706c6f792074686520636f6e747261;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x31ba17 << 0xe9;\n        return temp0 + 0xa0;\n    }\n    \n    function func_1467(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x38;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x43616c6c6572206973206e6f7420726567697374657265642061732061207265;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x636f766572657220666f7220746869732077616c6c65742e0000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_14C4(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x4f;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x5265636f7665727920697320616c726561647920756e6465722077617920616e;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x64206e6577207265636f766572657220646f65736e2774206861766520612068;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x6967686572207072696f726974792e0000000000000000000000000000000000;\n        return temp0 + 0xa0;\n    }\n    \n    function func_1547(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x2f;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x54686973206d6574686f642063616e6e6f742062652063616c6c656420647572;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x696e672061207265636f766572792e0000000000000000000000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_15A4(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x69;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x5472616e73616374696f6e20657865637574696f6e206d75737420636f6e7461;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x696e20612064657374696e6174696f6e2e2020496620796f75206d65616e7420;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x746f206465706c6f79206120636f6e74726163742c20757365206465706c6f79;\n        memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20] = 0x1034b739ba32b0b217 << 0xb9;\n        return temp0 + 0xc0;\n    }\n    \n    function func_1639(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x24;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4f6e6c7920746865206f776e6572206d61792063616c6c2074686973206d6574;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x3437b217 << 0xe1;\n        return temp0 + 0x80;\n    }\n    \n    function func_167D(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x22;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x5265636f766572792061646472657373206d75737420626520737570706c6965;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x3217 << 0xf1;\n        return temp0 + 0x80;\n    }\n    \n    function func_16BF(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x35;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4b657920617420696e736572746564206c6f636174696f6e20646f6573206e6f;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x74206d6174636820696e736572746564206b65792e0000000000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_171C(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x34;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x436f6e7472616374206465706c6f796d656e74206d75737420636f6e7461696e;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x2062797465636f646520746f206465706c6f792e000000000000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_1779(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x38;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x52656d6f766564206b6579207374696c6c2065786973747320696e2074686520;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x6172726179206174206f726967696e616c20696e6465782e0000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_17D6(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x1a;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x436f6e747261637420657865637574696f6e206661696c65642e000000000000;\n        return temp0 + 0x60;\n    }\n    \n    function func_180D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0 & 0xffff;\n        return temp0 + 0x20;\n    }\n    \n    function func_181C(var arg0) {\n        var temp0 = arg0;\n    \n        if (temp0 == temp0 & (0x01 << 0xa0) - 0x01) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (0x8da5cb5b > var0) {\n                if (0x432b357c > var0) {\n                    if (var0 == 0x23de29) {\n                        // Dispatch table entry for tokensReceived(address,address,address,uint256,bytes,bytes)\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0117;\n                        var var2 = 0x0112;\n                        var var3 = msg.data.length;\n                        var var4 = 0x04;\n                        var var5;\n                        var var6;\n                        var var7;\n                        var var8;\n                        var var9;\n                        var2, var3, var4, var5, var6, var7, var8, var9 = func_0F7F(var3, var4);\n                        func_0112(var2, var3, var4, var5, var6, var7, var8, var9);\n                        stop();\n                    } else if (var0 == 0x0ba234d6) {\n                        // Dispatch table entry for cancelRecovery()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0117;\n                        cancelRecovery();\n                        stop();\n                    } else if (var0 == 0x249cb3fa) {\n                        // Dispatch table entry for canImplementInterfaceForAddress(bytes32,address)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x014e;\n                        var2 = 0x0149;\n                        var3 = msg.data.length;\n                        var4 = 0x04;\n                        var2, var3 = func_106B(var3, var4);\n                        var1 = func_0149(var2, var3);\n                    \n                    label_014E:\n                        var temp0 = var1;\n                        var1 = 0x015b;\n                        var2 = temp0;\n                        var3 = memory[0x40:0x60];\n                        var1 = func_1160(var2, var3);\n                    \n                    label_015B:\n                        var temp1 = memory[0x40:0x60];\n                        return memory[temp1:temp1 + var1 - temp1];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x432b357c) {\n                    // Dispatch table entry for 0x432b357c (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0184;\n                    var2 = 0x017f;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_0F02(var3, var4);\n                    var3 = 0x00;\n                    var4 = 0x03ca;\n                    var5 = 0x01;\n                    var6 = var2;\n                    var4 = func_0A3D(var5, var6);\n                    var1 = var4;\n                    // Error: Could not resolve jump destination!\n                } else if (var0 == 0x6d6a5349) {\n                    // Dispatch table entry for addRecoveryAddress(address,uint16)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0117;\n                    var2 = 0x01ac;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2, var3 = func_102D(var3, var4);\n                    func_01AC(var2, var3);\n                    stop();\n                } else if (var0 == 0x7e3bfa1d) {\n                    // Dispatch table entry for removeRecoveryAddress(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0117;\n                    var2 = 0x01cc;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_0F02(var3, var4);\n                    func_01CC(var2);\n                    stop();\n                } else if (var0 == 0x8a295c37) {\n                    // Dispatch table entry for 0x8a295c37 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x014e;\n                    var2 = func_0574();\n                    goto label_014E;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0xb61d27f6 > var0) {\n                if (var0 == 0x8da5cb5b) {\n                    // Dispatch table entry for owner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01fb;\n                    var2 = func_057A();\n                \n                label_01FB:\n                    var temp2 = var2;\n                    var2 = 0x015b;\n                    var3 = temp2;\n                    var4 = memory[0x40:0x60];\n                    var2 = func_10F0(var3, var4);\n                    goto label_015B;\n                } else if (var0 == 0x923689e4) {\n                    // Dispatch table entry for startRecovery()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0117;\n                    startRecovery();\n                    stop();\n                } else if (var0 == 0x994b68b5) {\n                    // Dispatch table entry for 0x994b68b5 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0232;\n                    var1 = func_06BA();\n                    var temp3 = var1;\n                    var1 = 0x015b;\n                    var2 = temp3;\n                    var3 = memory[0x40:0x60];\n                    var1 = func_1104(var2, var3);\n                    goto label_015B;\n                } else if (var0 == 0xb52f65e7) {\n                    // Dispatch table entry for 0xb52f65e7 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01fb;\n                    var2 = func_06CB();\n                    goto label_01FB;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0xb61d27f6) {\n                // Dispatch table entry for execute(address,uint256,bytes)\n                var1 = 0x0267;\n                var2 = 0x0262;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4, var5 = func_0F25(var3, var4);\n                var1 = func_0262(var2, var3, var4, var5);\n                var temp4 = var1;\n                var1 = 0x015b;\n                var2 = temp4;\n                var3 = memory[0x40:0x60];\n                var1 = func_1169(var2, var3);\n                goto label_015B;\n            } else if (var0 == 0xc7423803) {\n                // Dispatch table entry for finishRecovery()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0117;\n                finishRecovery();\n                stop();\n            } else if (var0 == 0xf1f3c7f8) {\n                // Dispatch table entry for 0xf1f3c7f8 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0117;\n            \n                if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n                    var3 = temp7 + 0x04;\n                    var2 = 0x02e5;\n                    var2 = func_1639(var3);\n                    goto label_02E5;\n                } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n                    var2 = storage[0x03] & (0x01 << 0xa0) - 0x01;\n                    var3 = 0x091a;\n                    cancelRecovery();\n                    var3 = 0x0923;\n                    var4 = var2;\n                    func_04B3(var4);\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n                    var2 = 0x02e5;\n                    var3 = temp5 + 0x04;\n                    var2 = func_13A1(var3);\n                \n                label_02E5:\n                    var temp6 = memory[0x40:0x60];\n                    revert(memory[temp6:temp6 + var2 - temp6]);\n                }\n            } else if (var0 == 0xf9899326) {\n                // Dispatch table entry for deploy(uint256,bytes,uint256)\n                var1 = 0x01fb;\n                var2 = 0x02ac;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4, var5 = func_108F(var3, var4);\n                var1 = func_02AC(var2, var3, var4, var5);\n                goto label_01FB;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (msg.data.length) { revert(memory[0x00:0x00]); }\n        else { stop(); }\n    }\n    \n    function func_0112(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7) {}\n    \n    function func_0149(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = address(this) == arg1 & (0x01 << 0xa0) - 0x01;\n    \n        if (!var1) {\n            if (!var1) {\n            label_03C6:\n                return 0x00;\n            } else {\n            label_03A0:\n                return 0xa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b4;\n            }\n        } else if (arg0 != 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b) { goto label_03C6; }\n        else { goto label_03A0; }\n    }\n    \n    function func_01AC(var arg0, var arg1) {\n        if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp4 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_1639(var1);\n            goto label_02E5;\n        } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp3 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_1547(var1);\n            goto label_02E5;\n        } else if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x046e;\n            var var1 = 0x01;\n            var var2 = arg0;\n            var var3 = arg1;\n            func_0AA1(var1, var2, var3);\n            var0 = arg0 & (0x01 << 0xa0) - 0x01;\n            var1 = 0xca4ba7fe9344a8a1e34b14f051473d2b4b02dd480025f14df8f6fa70c7950cab;\n            var2 = 0x04a7;\n            var3 = arg1;\n            var var4 = memory[0x40:0x60];\n            var2 = func_180D(var3, var4);\n            var temp0 = memory[0x40:0x60];\n            log(memory[temp0:temp0 + var2 - temp0], [stack[-2], stack[-3]]);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp1 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_167D(var1);\n        \n        label_02E5:\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + var0 - temp2]);\n        }\n    }\n    \n    function func_01CC(var arg0) {\n        func_04B3(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0262(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x60;\n    \n        if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            var2 = temp9 + 0x04;\n            var1 = 0x02e5;\n            var1 = func_1639(var2);\n            goto label_02E5;\n        } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd << 0xe5;\n            var1 = 0x02e5;\n            var2 = temp8 + 0x04;\n            var1 = func_1547(var2);\n            goto label_02E5;\n        } else if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            var1 = 0x02e5;\n            var2 = temp7 + 0x04;\n            var1 = func_15A4(var2);\n            goto label_02E5;\n        } else if (address(this).balance >= arg1) {\n            var var1 = 0x00;\n            var var2 = 0x60;\n            var var3 = arg0 & (0x01 << 0xa0) - 0x01;\n            var var4 = arg1;\n            var var5 = 0x0795;\n            var var6 = arg2;\n            var var8 = memory[0x40:0x60];\n            var var7 = arg3;\n            var5 = func_10E0(var6, var7, var8);\n            var temp0 = memory[0x40:0x60];\n            var temp1;\n            temp1, memory[temp0:temp0 + 0x00] = address(var3).call.gas(msg.gas).value(var4)(memory[temp0:temp0 + var5 - temp0]);\n            var4 = returndata.length;\n            var5 = var4;\n        \n            if (var5 == 0x00) {\n                var2 = 0x60;\n                var1 = var3;\n            \n                if (var1) {\n                label_07F9:\n                    return var2;\n                } else {\n                label_07E2:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n                    var4 = temp2 + 0x04;\n                    var3 = 0x02e5;\n                    var3 = func_17D6(var4);\n                \n                label_02E5:\n                    var temp3 = memory[0x40:0x60];\n                    revert(memory[temp3:temp3 + var3 - temp3]);\n                }\n            } else {\n                var temp4 = memory[0x40:0x60];\n                var4 = temp4;\n                memory[0x40:0x60] = var4 + (returndata.length + 0x3f & ~0x1f);\n                memory[var4:var4 + 0x20] = returndata.length;\n                var temp5 = returndata.length;\n                memory[var4 + 0x20:var4 + 0x20 + temp5] = returndata[0x00:0x00 + temp5];\n                var2 = var4;\n                var1 = var3;\n            \n                if (var1) { goto label_07F9; }\n                else { goto label_07E2; }\n            }\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd << 0xe5;\n            var2 = temp6 + 0x04;\n            var1 = 0x02e5;\n            var1 = func_11BC(var2);\n            goto label_02E5;\n        }\n    }\n    \n    function func_02AC(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[var0] & (0x01 << 0xa0) - 0x01) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            var2 = temp9 + 0x04;\n            var1 = 0x02e5;\n            var1 = func_1639(var2);\n            goto label_02E5;\n        } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd << 0xe5;\n            var1 = 0x02e5;\n            var2 = temp8 + 0x04;\n            var1 = func_1547(var2);\n            goto label_02E5;\n        } else if (address(this).balance < arg0) {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            var2 = temp7 + 0x04;\n            var1 = 0x02e5;\n            var1 = func_13FE(var2);\n            goto label_02E5;\n        } else if (arg2) {\n            var temp0 = arg2;\n            var temp1 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp0;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + temp0] = msg.data[arg1:arg1 + temp0];\n            memory[temp2 + temp0:temp2 + temp0 + 0x20] = 0x00;\n            var var1 = temp1;\n            var temp3 = new(memory[var1 + 0x20:var1 + 0x20 + memory[var1:var1 + 0x20]]).value(arg0).salt(arg3)();\n            var var2 = temp3;\n        \n            if (var2 & (0x01 << 0xa0) - 0x01) { return var2; }\n        \n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n            var var4 = temp4 + 0x04;\n            var var3 = 0x02e5;\n            var3 = func_123F(var4);\n        \n        label_02E5:\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + var3 - temp5]);\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd << 0xe5;\n            var1 = 0x02e5;\n            var2 = temp6 + 0x04;\n            var1 = func_171C(var2);\n            goto label_02E5;\n        }\n    }\n    \n    function cancelRecovery() {\n        if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp2 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_1639(var1);\n            goto label_02E5;\n        } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n            var var0 = storage[0x03] & (0x01 << 0xa0) - 0x01;\n            var var1 = 0x032a;\n            func_0A25();\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8154b6c5e1fc90d44b49808ef93f9739148d0821411890f8cd684385e24b9f1e, stack[-1] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x02e5;\n            var1 = temp0 + 0x04;\n            var0 = func_13A1(var1);\n        \n        label_02E5:\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_04B3(var arg0) {\n        if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp3 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_1639(var1);\n            goto label_02E5;\n        } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp2 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_1547(var1);\n            goto label_02E5;\n        } else if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x053d;\n            var var1 = 0x01;\n            var var2 = arg0;\n            func_0C4F(var1, var2);\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x250546491931526473f4670f0964714a4f7272548fa2040f447d653f5cffbbb7, stack[-1] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x02e5;\n            var1 = temp0 + 0x04;\n            var0 = func_167D(var1);\n        \n        label_02E5:\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_0574() returns (var r0) { return storage[0x04]; }\n    \n    function func_057A() returns (var r0) { return storage[0x00] & (0x01 << 0xa0) - 0x01; }\n    \n    function startRecovery() {\n        var var0 = 0x059a;\n        var var1 = 0x01;\n        var var2 = msg.sender;\n        var0 = func_0DBC(var1, var2);\n    \n        if (var0) {\n            var0 = 0x00;\n            var1 = 0x05c9;\n            var2 = 0x01;\n            var var3 = msg.sender;\n            var1 = func_0A3D(var2, var3);\n            var0 = var1;\n            var1 = !!(storage[0x03] & (0x01 << 0xa0) - 0x01);\n        \n            if (!(storage[0x03] & (0x01 << 0xa0) - 0x01)) {\n            label_0664:\n                var temp0 = msg.sender;\n                storage[0x03] = temp0 | (storage[0x03] & ~((0x01 << 0xa0) - 0x01));\n                storage[0x04] = ((var0 & 0xffff) * 0x015180 & 0xffffff) + block.timestamp;\n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xcd4e9df2b0a742bc5628c20baf55859f839c034aa76a32f600d6b085c4de4829, msg.sender]);\n                return;\n            } else {\n                var2 = 0x00;\n                var3 = 0x0601;\n                var var4 = 0x01;\n                var var5 = storage[0x03] & (0x01 << 0xa0) - 0x01;\n                var3 = func_0A3D(var4, var5);\n                var2 = var3;\n            \n                if (var0 & 0xffff < var2 & 0xffff) {\n                    log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8154b6c5e1fc90d44b49808ef93f9739148d0821411890f8cd684385e24b9f1e, storage[0x03] & (0x01 << 0xa0) - 0x01]);\n                    goto label_0664;\n                } else {\n                    var temp1 = memory[0x40:0x60];\n                    memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n                    var3 = 0x02e5;\n                    var4 = temp1 + 0x04;\n                    var3 = func_14C4(var4);\n                \n                label_02E5:\n                    var temp2 = memory[0x40:0x60];\n                    revert(memory[temp2:temp2 + var3 - temp2]);\n                }\n            }\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x02e5;\n            var1 = temp3 + 0x04;\n            var0 = func_1467(var1);\n            goto label_02E5;\n        }\n    }\n    \n    function func_06BA() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x06c6;\n        var var2 = 0x01;\n        return func_0DDA(var2);\n    }\n    \n    function func_06CB() returns (var r0) { return storage[0x03] & (0x01 << 0xa0) - 0x01; }\n    \n    function finishRecovery() {\n        if (!(storage[0x03] & (0x01 << 0xa0) - 0x01)) {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x02e5;\n            var1 = temp5 + 0x04;\n            var0 = func_13A1(var1);\n            goto label_02E5;\n        } else if (block.timestamp >= storage[0x04]) {\n            var temp0 = storage[0x00];\n            var temp1 = (0x01 << 0xa0) - 0x01;\n            storage[0x00] = (temp1 & storage[0x03]) | (temp0 & ~((0x01 << 0xa0) - 0x01));\n            var var0 = temp0 & temp1;\n            var var1 = 0x0877;\n            func_0A25();\n            var temp2 = (0x01 << 0xa0) - 0x01;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x18fd514351dc50d192b7e41b5a6478575c793d38f756ec15acc7b1796597ef19, stack[-1] & (0x01 << 0xa0) - 0x01, storage[0x00] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp3 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_12D1(var1);\n        \n        label_02E5:\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + var0 - temp4]);\n        }\n    }\n    \n    function func_0A25() {\n        storage[0x03] = storage[0x03] & ~((0x01 << 0xa0) - 0x01);\n        storage[0x04] = ~0x00;\n    }\n    \n    function func_0A3D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = arg0;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n    \n        if (var1) {\n            var var2 = arg0 + 0x01;\n            var var3 = var1;\n        \n            if (var3 >= storage[var2]) { assert(); }\n        \n            memory[0x00:0x20] = var2;\n            return storage[keccak256(memory[0x00:0x20]) + var3] / (0x01 << 0xa0) & 0xffff;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var3 = temp0 + 0x04;\n            var2 = 0x02e5;\n            var2 = func_129C(var3);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var2 - temp1]);\n        }\n    }\n    \n    function func_0AA1(var arg0, var arg1, var arg2) {\n        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = arg0;\n        var var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var0) {\n            var var1 = arg2;\n            var var2 = arg0 + 0x01;\n            var var3 = var0;\n        \n            if (var3 >= storage[var2]) { assert(); }\n        \n            memory[0x00:0x20] = var2;\n            var temp0 = keccak256(memory[0x00:0x20]) + var3;\n            storage[temp0] = (var1 & 0xffff) * 0x0100 ** 0x14 | (storage[temp0] & ~(0xffff * 0x0100 ** 0x14));\n            var1 = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x00:0x20] = var1;\n            var temp1 = arg0;\n            memory[0x20:0x40] = temp1;\n            var2 = temp1 + 0x01;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var3 >= storage[var2]) { assert(); }\n        \n        label_0BB5:\n            memory[0x00:0x20] = var2;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var3] & (0x01 << 0xa0) - 0x01 == var1) {\n                memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                var temp2 = arg0;\n                memory[0x20:0x40] = temp2;\n                var2 = temp2 + 0x01;\n                var1 = arg2 & 0xffff;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n            \n                if (storage[keccak256(memory[0x00:0x20]) + var3] / (0x01 << 0xa0) & 0xffff == var1) { return; }\n            \n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n                var2 = temp3 + 0x04;\n                var1 = 0x02e5;\n                var1 = func_1344(var2);\n            \n            label_02E5:\n                var temp4 = memory[0x40:0x60];\n                revert(memory[temp4:temp4 + var1 - temp4]);\n            } else {\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n                var1 = 0x02e5;\n                var2 = temp5 + 0x04;\n                var1 = func_16BF(var2);\n                goto label_02E5;\n            }\n        } else {\n            var1 = 0x0ac7;\n            var1 = func_0EA4();\n            var temp6 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp6 + 0x40;\n            var temp7 = (0x01 << 0xa0) - 0x01;\n            var temp8 = arg1 & temp7;\n            memory[temp6:temp6 + 0x20] = temp8;\n            var temp9 = temp6 + 0x20;\n            memory[temp9:temp9 + 0x20] = arg2 & 0xffff;\n            var temp10 = arg0;\n            var temp11 = temp10 + 0x01;\n            var temp12 = storage[temp11];\n            storage[temp11] = temp12 + 0x01;\n            memory[0x00:0x20] = temp11;\n            var temp13 = temp12 + keccak256(memory[0x00:0x20]);\n            storage[temp13] = (((storage[temp13] & ~((0x01 << 0xa0) - 0x01)) | (temp7 & memory[temp6:temp6 + 0x20])) & ~(0xffff << 0xa0)) | (memory[temp9:temp9 + 0x20] & 0xffff) * (0x01 << 0xa0);\n            memory[0x00:0x20] = temp8;\n            memory[0x20:0x40] = temp10;\n            storage[keccak256(memory[0x00:0x40])] = storage[temp11] + ~0x00;\n            var1 = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x00:0x20] = var1;\n            var temp14 = arg0;\n            memory[0x20:0x40] = temp14;\n            var2 = temp14 + 0x01;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var3 < storage[var2]) { goto label_0BB5; }\n            else { assert(); }\n        }\n    }\n    \n    function func_0C4F(var arg0, var arg1) {\n        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = arg0;\n        var var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (!var0) { return; }\n    \n        var var1 = storage[arg0 + 0x01] + ~0x00;\n    \n        if (var1 == var0) {\n        label_0D0C:\n            var var2 = arg0 + 0x01;\n            var var3 = storage[var2];\n        \n            if (!var3) { assert(); }\n        \n            var temp0 = var2;\n            memory[0x00:0x20] = temp0;\n            var temp1 = var3;\n            var temp2 = ~0x00;\n            var temp3 = temp2 + temp1 + keccak256(memory[0x00:0x20]);\n            storage[temp3] = storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffffffff;\n            storage[temp0] = temp1 + temp2;\n            memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = arg0;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            var2 = var0 == var1;\n        \n            if (var2) {\n            label_0D9C:\n            \n                if (var2) { return; }\n            \n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n                var2 = 0x02e5;\n                var3 = temp4 + 0x04;\n                var2 = func_1779(var3);\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + var2 - temp5]);\n            } else {\n                var2 = arg1 & (0x01 << 0xa0) - 0x01;\n                var3 = arg0 + 0x01;\n                var var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var2 = storage[keccak256(memory[0x00:0x20]) + var4] & (0x01 << 0xa0) - 0x01 != var2;\n                goto label_0D9C;\n            }\n        } else {\n            var2 = 0x00;\n            var3 = arg0 + 0x01;\n            var4 = var1;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n            var2 = keccak256(memory[0x00:0x20]) + var4;\n            var3 = var2;\n            var4 = arg0 + 0x01;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp6 = var3;\n            var temp7 = var5 + keccak256(memory[0x00:0x20]);\n            var temp8 = (0x01 << 0xa0) - 0x01;\n            var temp9 = (temp8 & storage[temp6]) | (storage[temp7] & ~((0x01 << 0xa0) - 0x01));\n            storage[temp7] = temp9;\n            storage[temp7] = (temp9 & ~(0xffff << 0xa0)) | (storage[temp6] / (0x01 << 0xa0) & 0xffff) * (0x01 << 0xa0);\n            memory[0x00:0x20] = temp8 & storage[var2];\n            memory[0x20:0x40] = arg0;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            goto label_0D0C;\n        }\n    }\n    \n    function func_0DBC(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = arg0;\n        return !!storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0DDA(var arg0) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var temp0 = storage[arg0 + 0x01] - 0x01;\n        var temp1 = memory[0x40:0x60];\n        var var3 = temp0;\n        var var2 = temp1;\n        memory[var2:var2 + 0x20] = var3;\n        memory[0x40:0x60] = var2 + var3 * 0x20 + 0x20;\n    \n        if (!var3) {\n        label_0E21:\n            var1 = var2;\n            var2 = 0x01;\n        \n            if (var2 >= storage[arg0 + 0x01]) {\n            label_0E9D:\n                return var1;\n            } else {\n            label_0E34:\n                var3 = arg0 + 0x01;\n                var var4 = var2;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp2 = keccak256(memory[0x00:0x20]);\n                var temp3 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp3 + 0x40;\n                var temp4 = storage[var4 + temp2];\n                memory[temp3:temp3 + 0x20] = temp4 & (0x01 << 0xa0) - 0x01;\n                var3 = temp3;\n                memory[var3 + 0x20:var3 + 0x20 + 0x20] = temp4 / (0x01 << 0xa0) & 0xffff;\n                var4 = var1;\n                var var5 = var2 + ~0x00;\n            \n                if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n            \n                memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20] = var3;\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[arg0 + 0x01]) { goto label_0E9D; }\n                else { goto label_0E34; }\n            }\n        } else {\n            var4 = var2 + 0x20;\n            var5 = 0x0e0e;\n            var5 = func_0EA4();\n        \n        label_0E0E:\n            var temp5 = var4;\n            memory[temp5:temp5 + 0x20] = var5;\n            var4 = temp5 + 0x20;\n            var3 = var3 - 0x01;\n        \n            if (var3) {\n                var5 = 0x0e0e;\n                var5 = func_0EA4();\n                goto label_0E0E;\n            } else {\n                var3 = var4;\n                goto label_0E21;\n            }\n        }\n    }\n    \n    function func_0EA4() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_0EBB(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 + 0x1f i< arg0) {\n            var1 = msg.data[arg1:arg1 + 0x20];\n        \n            if (var1 <= 0xffffffffffffffff) {\n                var temp0 = arg1;\n                var0 = temp0 + 0x20;\n            \n                if (temp0 + var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n            \n                arg0 = var1;\n                r0 = var0;\n                return r0, arg0;\n            } else {\n                var temp1 = var0;\n                revert(memory[temp1:temp1 + temp1]);\n            }\n        } else {\n            var temp2 = var0;\n            revert(memory[temp2:temp2 + temp2]);\n        }\n    }\n    \n    function func_0F02(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = msg.data[arg1:arg1 + 0x20];\n            var var2 = 0x0f1e;\n            var var3 = var1;\n            func_181C(var3);\n            return var1;\n        } else {\n            var temp0 = var0;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_0F25(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3) {\n        r3 = 0x00;\n        var var1 = r3;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var4 = msg.data[arg1:arg1 + 0x20];\n            var var5 = 0x0f45;\n            var var6 = var4;\n            func_181C(var6);\n            r3 = var4;\n            var temp0 = arg1;\n            var1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n            var4 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        \n            if (var4 <= 0xffffffffffffffff) {\n                var5 = 0x0f73;\n                var6 = arg0;\n                var var7 = arg1 + var4;\n                var5, var6 = func_0EBB(var6, var7);\n                var temp1 = r3;\n                r3 = var6;\n                r0 = temp1;\n                arg0 = var1;\n                arg1 = var5;\n                return r0, arg0, arg1, r3;\n            } else {\n                var temp2 = var2;\n                revert(memory[temp2:temp2 + temp2]);\n            }\n        } else {\n            var temp3 = var1;\n            revert(memory[temp3:temp3 + temp3]);\n        }\n    }\n    \n    function func_0F7F(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3, var r4, var r5, var r6, var r7) {\n        r3 = 0x00;\n        r4 = r3;\n        r5 = 0x00;\n        r6 = r5;\n        r7 = 0x00;\n        var var5 = r7;\n        var var6 = 0x00;\n        var var7 = var6;\n    \n        if (arg0 - arg1 i>= 0xc0) {\n            var var8 = msg.data[arg1:arg1 + 0x20];\n            var var9 = 0x0fa5;\n            var var10 = var8;\n            func_181C(var10);\n            r3 = var8;\n            var8 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n            var9 = 0x0fb5;\n            var10 = var8;\n            func_181C(var10);\n            r4 = var8;\n            var8 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n            var9 = 0x0fc5;\n            var10 = var8;\n            func_181C(var10);\n            r5 = var8;\n            var temp0 = arg1;\n            r6 = msg.data[temp0 + 0x60:temp0 + 0x60 + 0x20];\n            var8 = msg.data[temp0 + 0x80:temp0 + 0x80 + 0x20];\n            var9 = 0xffffffffffffffff;\n        \n            if (var8 <= var9) {\n                var10 = 0x0ff4;\n                var var11 = arg0;\n                var var12 = arg1 + var8;\n                var10, var11 = func_0EBB(var11, var12);\n                r7 = var10;\n                var5 = var11;\n                var8 = msg.data[arg1 + 0xa0:arg1 + 0xa0 + 0x20];\n            \n                if (var8 <= var9) {\n                    var9 = 0x1019;\n                    var10 = arg0;\n                    var11 = arg1 + var8;\n                    var9, var10 = func_0EBB(var10, var11);\n                    r0 = r3;\n                    arg0 = r4;\n                    arg1 = r5;\n                    r3 = r6;\n                    var temp1 = r7;\n                    r7 = var10;\n                    r4 = temp1;\n                    r5 = var5;\n                    r6 = var9;\n                    return r0, arg0, arg1, r3, r4, r5, r6, r7;\n                } else {\n                    var temp2 = var6;\n                    revert(memory[temp2:temp2 + temp2]);\n                }\n            } else {\n                var temp3 = r7;\n                revert(memory[temp3:temp3 + temp3]);\n            }\n        } else {\n            var temp4 = r7;\n            revert(memory[temp4:temp4 + temp4]);\n        }\n    }\n    \n    function func_102D(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = msg.data[arg1:arg1 + 0x20];\n            var var3 = 0x104a;\n            var var4 = var2;\n            func_181C(var4);\n            var0 = var2;\n            var temp0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n            var2 = temp0;\n        \n            if (var2 == var2 & 0xffff) {\n                arg0 = var2;\n                r0 = var0;\n                return r0, arg0;\n            } else {\n                var temp1 = var1;\n                revert(memory[temp1:temp1 + temp1]);\n            }\n        } else {\n            var temp2 = var0;\n            revert(memory[temp2:temp2 + temp2]);\n        }\n    }\n    \n    function func_106B(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var temp0 = arg1;\n            var0 = msg.data[temp0:temp0 + 0x20];\n            var var2 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n            var var3 = 0x1060;\n            var var4 = var2;\n            func_181C(var4);\n            arg0 = var2;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var temp1 = var0;\n            revert(memory[temp1:temp1 + temp1]);\n        }\n    }\n    \n    function func_108F(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3) {\n        r3 = 0x00;\n        var var1 = r3;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var temp0 = arg1;\n            r3 = msg.data[temp0:temp0 + 0x20];\n            var var4 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        \n            if (var4 <= 0xffffffffffffffff) {\n                var var5 = 0x10cd;\n                var var6 = arg0;\n                var var7 = arg1 + var4;\n                var5, var6 = func_0EBB(var6, var7);\n                r0 = r3;\n                arg0 = var5;\n                var temp1 = arg1;\n                arg1 = var6;\n                r3 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n                return r0, arg0, arg1, r3;\n            } else {\n                var temp2 = var1;\n                revert(memory[temp2:temp2 + temp2]);\n            }\n        } else {\n            var temp3 = r3;\n            revert(memory[temp3:temp3 + temp3]);\n        }\n    }\n    \n    function func_10E0(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg2;\n        memory[temp1:temp1 + temp0] = msg.data[arg0:arg0 + temp0];\n        memory[temp0 + temp1:temp0 + temp1 + 0x20] = 0x00;\n        return temp0 + temp1;\n    }\n    \n    function func_10F0(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        return temp0 + 0x20;\n    }\n    \n    function func_1104(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        var temp1 = arg0;\n        var temp2 = memory[temp1:temp1 + 0x20];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp2;\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var var2 = 0x40;\n        var var4 = temp2;\n        var var3 = temp0 + var2;\n        var var5 = var1 + temp1;\n        var var6 = var0;\n    \n        if (var6 >= var4) {\n        label_1153:\n            return var3;\n        } else {\n        label_112A:\n            var temp3 = var5;\n            var temp4 = memory[temp3:temp3 + 0x20];\n            var temp5 = var3;\n            memory[temp5:temp5 + 0x20] = memory[temp4:temp4 + 0x20] & (0x01 << 0xa0) - 0x01;\n            var temp6 = var1;\n            memory[temp5 + temp6:temp5 + temp6 + 0x20] = memory[temp6 + temp4:temp6 + temp4 + 0x20] & 0xffff;\n            var3 = var2 + temp5;\n            var5 = temp6 + temp3;\n            var6 = var6 + 0x01;\n        \n            if (var6 >= var4) { goto label_1153; }\n            else { goto label_112A; }\n        }\n    }\n    \n    function func_1160(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0;\n        return temp0 + 0x20;\n    }\n    \n    function func_1169(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = var0;\n    \n        if (var3 >= var2) {\n        label_1195:\n        \n            if (var3 <= var2) { return (var2 + 0x1f & ~0x1f) + arg1 + 0x40; }\n        \n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = var0;\n            return (temp2 + 0x1f & ~0x1f) + temp3 + 0x40;\n        } else {\n        label_1182:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_1195; }\n            else { goto label_1182; }\n        }\n    }\n    \n    function func_11BC(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x4f;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x57616c6c657420646f6573206e6f74206861766520656e6f7567682066756e64;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x7320617661696c61626c6520746f206578656375746520746865206465736972;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x6564207472616e73616374696f6e2e0000000000000000000000000000000000;\n        return temp0 + 0xa0;\n    }\n    \n    function func_123F(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x39;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x436f6e7472616374206372656174696f6e2072657475726e6564206164647265;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x737320302c20696e6469636174696e67206661696c7572652e00000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_129C(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x20;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x50726f7669646564206b657920776173206e6f7420696e20746865206d61702e;\n        return temp0 + 0x60;\n    }\n    \n    function func_12D1(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x4d;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x596f75206d757374207761697420756e74696c20746865207265636f76657279;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x2064656c6179206973206f766572206265666f72652066696e697368696e6720;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x3a3432903932b1b7bb32b93c97 << 0x99;\n        return temp0 + 0xa0;\n    }\n    \n    function func_1344(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x39;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x56616c756520617420696e736572746564206c6f636174696f6e20646f657320;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x6e6f74206d6174636820696e7365727465642076616c75652e00000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_13A1(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x31;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x54686973206d6574686f642063616e206f6e6c792062652063616c6c65642064;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x7572696e672061207265636f766572792e000000000000000000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_13FE(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x43;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x57616c6c657420646f6573206e6f74206861766520656e6f7567682066756e64;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x7320617661696c61626c6520746f206465706c6f792074686520636f6e747261;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x31ba17 << 0xe9;\n        return temp0 + 0xa0;\n    }\n    \n    function func_1467(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x38;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x43616c6c6572206973206e6f7420726567697374657265642061732061207265;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x636f766572657220666f7220746869732077616c6c65742e0000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_14C4(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x4f;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x5265636f7665727920697320616c726561647920756e6465722077617920616e;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x64206e6577207265636f766572657220646f65736e2774206861766520612068;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x6967686572207072696f726974792e0000000000000000000000000000000000;\n        return temp0 + 0xa0;\n    }\n    \n    function func_1547(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x2f;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x54686973206d6574686f642063616e6e6f742062652063616c6c656420647572;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x696e672061207265636f766572792e0000000000000000000000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_15A4(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x69;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x5472616e73616374696f6e20657865637574696f6e206d75737420636f6e7461;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x696e20612064657374696e6174696f6e2e2020496620796f75206d65616e7420;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x746f206465706c6f79206120636f6e74726163742c20757365206465706c6f79;\n        memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20] = 0x1034b739ba32b0b217 << 0xb9;\n        return temp0 + 0xc0;\n    }\n    \n    function func_1639(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x24;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4f6e6c7920746865206f776e6572206d61792063616c6c2074686973206d6574;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x3437b217 << 0xe1;\n        return temp0 + 0x80;\n    }\n    \n    function func_167D(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x22;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x5265636f766572792061646472657373206d75737420626520737570706c6965;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x3217 << 0xf1;\n        return temp0 + 0x80;\n    }\n    \n    function func_16BF(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x35;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4b657920617420696e736572746564206c6f636174696f6e20646f6573206e6f;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x74206d6174636820696e736572746564206b65792e0000000000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_171C(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x34;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x436f6e7472616374206465706c6f796d656e74206d75737420636f6e7461696e;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x2062797465636f646520746f206465706c6f792e000000000000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_1779(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x38;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x52656d6f766564206b6579207374696c6c2065786973747320696e2074686520;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x6172726179206174206f726967696e616c20696e6465782e0000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_17D6(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x1a;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x436f6e747261637420657865637574696f6e206661696c65642e000000000000;\n        return temp0 + 0x60;\n    }\n    \n    function func_180D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0 & 0xffff;\n        return temp0 + 0x20;\n    }\n    \n    function func_181C(var arg0) {\n        var temp0 = arg0;\n    \n        if (temp0 == temp0 & (0x01 << 0xa0) - 0x01) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (0x8da5cb5b > var0) {\n                if (0x432b357c > var0) {\n                    if (var0 == 0x23de29) {\n                        // Dispatch table entry for tokensReceived(address,address,address,uint256,bytes,bytes)\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0117;\n                        var var2 = 0x0112;\n                        var var3 = msg.data.length;\n                        var var4 = 0x04;\n                        var var5;\n                        var var6;\n                        var var7;\n                        var var8;\n                        var var9;\n                        var2, var3, var4, var5, var6, var7, var8, var9 = func_0F7F(var3, var4);\n                        func_0112(var2, var3, var4, var5, var6, var7, var8, var9);\n                        stop();\n                    } else if (var0 == 0x0ba234d6) {\n                        // Dispatch table entry for cancelRecovery()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0117;\n                        cancelRecovery();\n                        stop();\n                    } else if (var0 == 0x249cb3fa) {\n                        // Dispatch table entry for canImplementInterfaceForAddress(bytes32,address)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x014e;\n                        var2 = 0x0149;\n                        var3 = msg.data.length;\n                        var4 = 0x04;\n                        var2, var3 = func_106B(var3, var4);\n                        var1 = func_0149(var2, var3);\n                    \n                    label_014E:\n                        var temp0 = var1;\n                        var1 = 0x015b;\n                        var2 = temp0;\n                        var3 = memory[0x40:0x60];\n                        var1 = func_1160(var2, var3);\n                    \n                    label_015B:\n                        var temp1 = memory[0x40:0x60];\n                        return memory[temp1:temp1 + var1 - temp1];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x432b357c) {\n                    // Dispatch table entry for 0x432b357c (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0184;\n                    var2 = 0x017f;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_0F02(var3, var4);\n                    var3 = 0x00;\n                    var4 = 0x03ca;\n                    var5 = 0x01;\n                    var6 = var2;\n                    var4 = func_0A3D(var5, var6);\n                    var1 = var4;\n                    // Error: Could not resolve jump destination!\n                } else if (var0 == 0x6d6a5349) {\n                    // Dispatch table entry for addRecoveryAddress(address,uint16)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0117;\n                    var2 = 0x01ac;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2, var3 = func_102D(var3, var4);\n                    func_01AC(var2, var3);\n                    stop();\n                } else if (var0 == 0x7e3bfa1d) {\n                    // Dispatch table entry for removeRecoveryAddress(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0117;\n                    var2 = 0x01cc;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_0F02(var3, var4);\n                    func_01CC(var2);\n                    stop();\n                } else if (var0 == 0x8a295c37) {\n                    // Dispatch table entry for 0x8a295c37 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x014e;\n                    var2 = func_0574();\n                    goto label_014E;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0xb61d27f6 > var0) {\n                if (var0 == 0x8da5cb5b) {\n                    // Dispatch table entry for owner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01fb;\n                    var2 = func_057A();\n                \n                label_01FB:\n                    var temp2 = var2;\n                    var2 = 0x015b;\n                    var3 = temp2;\n                    var4 = memory[0x40:0x60];\n                    var2 = func_10F0(var3, var4);\n                    goto label_015B;\n                } else if (var0 == 0x923689e4) {\n                    // Dispatch table entry for startRecovery()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0117;\n                    startRecovery();\n                    stop();\n                } else if (var0 == 0x994b68b5) {\n                    // Dispatch table entry for 0x994b68b5 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0232;\n                    var1 = func_06BA();\n                    var temp3 = var1;\n                    var1 = 0x015b;\n                    var2 = temp3;\n                    var3 = memory[0x40:0x60];\n                    var1 = func_1104(var2, var3);\n                    goto label_015B;\n                } else if (var0 == 0xb52f65e7) {\n                    // Dispatch table entry for 0xb52f65e7 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01fb;\n                    var2 = func_06CB();\n                    goto label_01FB;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0xb61d27f6) {\n                // Dispatch table entry for execute(address,uint256,bytes)\n                var1 = 0x0267;\n                var2 = 0x0262;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4, var5 = func_0F25(var3, var4);\n                var1 = func_0262(var2, var3, var4, var5);\n                var temp4 = var1;\n                var1 = 0x015b;\n                var2 = temp4;\n                var3 = memory[0x40:0x60];\n                var1 = func_1169(var2, var3);\n                goto label_015B;\n            } else if (var0 == 0xc7423803) {\n                // Dispatch table entry for finishRecovery()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0117;\n                finishRecovery();\n                stop();\n            } else if (var0 == 0xf1f3c7f8) {\n                // Dispatch table entry for 0xf1f3c7f8 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0117;\n            \n                if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n                    var3 = temp7 + 0x04;\n                    var2 = 0x02e5;\n                    var2 = func_1639(var3);\n                    goto label_02E5;\n                } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n                    var2 = storage[0x03] & (0x01 << 0xa0) - 0x01;\n                    var3 = 0x091a;\n                    cancelRecovery();\n                    var3 = 0x0923;\n                    var4 = var2;\n                    func_04B3(var4);\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n                    var2 = 0x02e5;\n                    var3 = temp5 + 0x04;\n                    var2 = func_13A1(var3);\n                \n                label_02E5:\n                    var temp6 = memory[0x40:0x60];\n                    revert(memory[temp6:temp6 + var2 - temp6]);\n                }\n            } else if (var0 == 0xf9899326) {\n                // Dispatch table entry for deploy(uint256,bytes,uint256)\n                var1 = 0x01fb;\n                var2 = 0x02ac;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4, var5 = func_108F(var3, var4);\n                var1 = func_02AC(var2, var3, var4, var5);\n                goto label_01FB;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (msg.data.length) { revert(memory[0x00:0x00]); }\n        else { stop(); }\n    }\n    \n    function func_0112(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7) {}\n    \n    function func_0149(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = address(this) == arg1 & (0x01 << 0xa0) - 0x01;\n    \n        if (!var1) {\n            if (!var1) {\n            label_03C6:\n                return 0x00;\n            } else {\n            label_03A0:\n                return 0xa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b4;\n            }\n        } else if (arg0 != 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b) { goto label_03C6; }\n        else { goto label_03A0; }\n    }\n    \n    function func_01AC(var arg0, var arg1) {\n        if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp4 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_1639(var1);\n            goto label_02E5;\n        } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp3 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_1547(var1);\n            goto label_02E5;\n        } else if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x046e;\n            var var1 = 0x01;\n            var var2 = arg0;\n            var var3 = arg1;\n            func_0AA1(var1, var2, var3);\n            var0 = arg0 & (0x01 << 0xa0) - 0x01;\n            var1 = 0xca4ba7fe9344a8a1e34b14f051473d2b4b02dd480025f14df8f6fa70c7950cab;\n            var2 = 0x04a7;\n            var3 = arg1;\n            var var4 = memory[0x40:0x60];\n            var2 = func_180D(var3, var4);\n            var temp0 = memory[0x40:0x60];\n            log(memory[temp0:temp0 + var2 - temp0], [stack[-2], stack[-3]]);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp1 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_167D(var1);\n        \n        label_02E5:\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + var0 - temp2]);\n        }\n    }\n    \n    function func_01CC(var arg0) {\n        func_04B3(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0262(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x60;\n    \n        if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            var2 = temp9 + 0x04;\n            var1 = 0x02e5;\n            var1 = func_1639(var2);\n            goto label_02E5;\n        } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd << 0xe5;\n            var1 = 0x02e5;\n            var2 = temp8 + 0x04;\n            var1 = func_1547(var2);\n            goto label_02E5;\n        } else if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            var1 = 0x02e5;\n            var2 = temp7 + 0x04;\n            var1 = func_15A4(var2);\n            goto label_02E5;\n        } else if (address(this).balance >= arg1) {\n            var var1 = 0x00;\n            var var2 = 0x60;\n            var var3 = arg0 & (0x01 << 0xa0) - 0x01;\n            var var4 = arg1;\n            var var5 = 0x0795;\n            var var6 = arg2;\n            var var8 = memory[0x40:0x60];\n            var var7 = arg3;\n            var5 = func_10E0(var6, var7, var8);\n            var temp0 = memory[0x40:0x60];\n            var temp1;\n            temp1, memory[temp0:temp0 + 0x00] = address(var3).call.gas(msg.gas).value(var4)(memory[temp0:temp0 + var5 - temp0]);\n            var4 = returndata.length;\n            var5 = var4;\n        \n            if (var5 == 0x00) {\n                var2 = 0x60;\n                var1 = var3;\n            \n                if (var1) {\n                label_07F9:\n                    return var2;\n                } else {\n                label_07E2:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n                    var4 = temp2 + 0x04;\n                    var3 = 0x02e5;\n                    var3 = func_17D6(var4);\n                \n                label_02E5:\n                    var temp3 = memory[0x40:0x60];\n                    revert(memory[temp3:temp3 + var3 - temp3]);\n                }\n            } else {\n                var temp4 = memory[0x40:0x60];\n                var4 = temp4;\n                memory[0x40:0x60] = var4 + (returndata.length + 0x3f & ~0x1f);\n                memory[var4:var4 + 0x20] = returndata.length;\n                var temp5 = returndata.length;\n                memory[var4 + 0x20:var4 + 0x20 + temp5] = returndata[0x00:0x00 + temp5];\n                var2 = var4;\n                var1 = var3;\n            \n                if (var1) { goto label_07F9; }\n                else { goto label_07E2; }\n            }\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd << 0xe5;\n            var2 = temp6 + 0x04;\n            var1 = 0x02e5;\n            var1 = func_11BC(var2);\n            goto label_02E5;\n        }\n    }\n    \n    function func_02AC(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[var0] & (0x01 << 0xa0) - 0x01) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            var2 = temp9 + 0x04;\n            var1 = 0x02e5;\n            var1 = func_1639(var2);\n            goto label_02E5;\n        } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd << 0xe5;\n            var1 = 0x02e5;\n            var2 = temp8 + 0x04;\n            var1 = func_1547(var2);\n            goto label_02E5;\n        } else if (address(this).balance < arg0) {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            var2 = temp7 + 0x04;\n            var1 = 0x02e5;\n            var1 = func_13FE(var2);\n            goto label_02E5;\n        } else if (arg2) {\n            var temp0 = arg2;\n            var temp1 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp0;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + temp0] = msg.data[arg1:arg1 + temp0];\n            memory[temp2 + temp0:temp2 + temp0 + 0x20] = 0x00;\n            var var1 = temp1;\n            var temp3 = new(memory[var1 + 0x20:var1 + 0x20 + memory[var1:var1 + 0x20]]).value(arg0).salt(arg3)();\n            var var2 = temp3;\n        \n            if (var2 & (0x01 << 0xa0) - 0x01) { return var2; }\n        \n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n            var var4 = temp4 + 0x04;\n            var var3 = 0x02e5;\n            var3 = func_123F(var4);\n        \n        label_02E5:\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + var3 - temp5]);\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd << 0xe5;\n            var1 = 0x02e5;\n            var2 = temp6 + 0x04;\n            var1 = func_171C(var2);\n            goto label_02E5;\n        }\n    }\n    \n    function cancelRecovery() {\n        if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp2 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_1639(var1);\n            goto label_02E5;\n        } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n            var var0 = storage[0x03] & (0x01 << 0xa0) - 0x01;\n            var var1 = 0x032a;\n            func_0A25();\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8154b6c5e1fc90d44b49808ef93f9739148d0821411890f8cd684385e24b9f1e, stack[-1] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x02e5;\n            var1 = temp0 + 0x04;\n            var0 = func_13A1(var1);\n        \n        label_02E5:\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_04B3(var arg0) {\n        if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp3 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_1639(var1);\n            goto label_02E5;\n        } else if (storage[0x03] & (0x01 << 0xa0) - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp2 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_1547(var1);\n            goto label_02E5;\n        } else if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x053d;\n            var var1 = 0x01;\n            var var2 = arg0;\n            func_0C4F(var1, var2);\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x250546491931526473f4670f0964714a4f7272548fa2040f447d653f5cffbbb7, stack[-1] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x02e5;\n            var1 = temp0 + 0x04;\n            var0 = func_167D(var1);\n        \n        label_02E5:\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_0574() returns (var r0) { return storage[0x04]; }\n    \n    function func_057A() returns (var r0) { return storage[0x00] & (0x01 << 0xa0) - 0x01; }\n    \n    function startRecovery() {\n        var var0 = 0x059a;\n        var var1 = 0x01;\n        var var2 = msg.sender;\n        var0 = func_0DBC(var1, var2);\n    \n        if (var0) {\n            var0 = 0x00;\n            var1 = 0x05c9;\n            var2 = 0x01;\n            var var3 = msg.sender;\n            var1 = func_0A3D(var2, var3);\n            var0 = var1;\n            var1 = !!(storage[0x03] & (0x01 << 0xa0) - 0x01);\n        \n            if (!(storage[0x03] & (0x01 << 0xa0) - 0x01)) {\n            label_0664:\n                var temp0 = msg.sender;\n                storage[0x03] = temp0 | (storage[0x03] & ~((0x01 << 0xa0) - 0x01));\n                storage[0x04] = ((var0 & 0xffff) * 0x015180 & 0xffffff) + block.timestamp;\n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xcd4e9df2b0a742bc5628c20baf55859f839c034aa76a32f600d6b085c4de4829, msg.sender]);\n                return;\n            } else {\n                var2 = 0x00;\n                var3 = 0x0601;\n                var var4 = 0x01;\n                var var5 = storage[0x03] & (0x01 << 0xa0) - 0x01;\n                var3 = func_0A3D(var4, var5);\n                var2 = var3;\n            \n                if (var0 & 0xffff < var2 & 0xffff) {\n                    log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8154b6c5e1fc90d44b49808ef93f9739148d0821411890f8cd684385e24b9f1e, storage[0x03] & (0x01 << 0xa0) - 0x01]);\n                    goto label_0664;\n                } else {\n                    var temp1 = memory[0x40:0x60];\n                    memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n                    var3 = 0x02e5;\n                    var4 = temp1 + 0x04;\n                    var3 = func_14C4(var4);\n                \n                label_02E5:\n                    var temp2 = memory[0x40:0x60];\n                    revert(memory[temp2:temp2 + var3 - temp2]);\n                }\n            }\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x02e5;\n            var1 = temp3 + 0x04;\n            var0 = func_1467(var1);\n            goto label_02E5;\n        }\n    }\n    \n    function func_06BA() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x06c6;\n        var var2 = 0x01;\n        return func_0DDA(var2);\n    }\n    \n    function func_06CB() returns (var r0) { return storage[0x03] & (0x01 << 0xa0) - 0x01; }\n    \n    function finishRecovery() {\n        if (!(storage[0x03] & (0x01 << 0xa0) - 0x01)) {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x02e5;\n            var1 = temp5 + 0x04;\n            var0 = func_13A1(var1);\n            goto label_02E5;\n        } else if (block.timestamp >= storage[0x04]) {\n            var temp0 = storage[0x00];\n            var temp1 = (0x01 << 0xa0) - 0x01;\n            storage[0x00] = (temp1 & storage[0x03]) | (temp0 & ~((0x01 << 0xa0) - 0x01));\n            var var0 = temp0 & temp1;\n            var var1 = 0x0877;\n            func_0A25();\n            var temp2 = (0x01 << 0xa0) - 0x01;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x18fd514351dc50d192b7e41b5a6478575c793d38f756ec15acc7b1796597ef19, stack[-1] & (0x01 << 0xa0) - 0x01, storage[0x00] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp3 + 0x04;\n            var0 = 0x02e5;\n            var0 = func_12D1(var1);\n        \n        label_02E5:\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + var0 - temp4]);\n        }\n    }\n    \n    function func_0A25() {\n        storage[0x03] = storage[0x03] & ~((0x01 << 0xa0) - 0x01);\n        storage[0x04] = ~0x00;\n    }\n    \n    function func_0A3D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = arg0;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n    \n        if (var1) {\n            var var2 = arg0 + 0x01;\n            var var3 = var1;\n        \n            if (var3 >= storage[var2]) { assert(); }\n        \n            memory[0x00:0x20] = var2;\n            return storage[keccak256(memory[0x00:0x20]) + var3] / (0x01 << 0xa0) & 0xffff;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var3 = temp0 + 0x04;\n            var2 = 0x02e5;\n            var2 = func_129C(var3);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var2 - temp1]);\n        }\n    }\n    \n    function func_0AA1(var arg0, var arg1, var arg2) {\n        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = arg0;\n        var var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var0) {\n            var var1 = arg2;\n            var var2 = arg0 + 0x01;\n            var var3 = var0;\n        \n            if (var3 >= storage[var2]) { assert(); }\n        \n            memory[0x00:0x20] = var2;\n            var temp0 = keccak256(memory[0x00:0x20]) + var3;\n            storage[temp0] = (var1 & 0xffff) * 0x0100 ** 0x14 | (storage[temp0] & ~(0xffff * 0x0100 ** 0x14));\n            var1 = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x00:0x20] = var1;\n            var temp1 = arg0;\n            memory[0x20:0x40] = temp1;\n            var2 = temp1 + 0x01;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var3 >= storage[var2]) { assert(); }\n        \n        label_0BB5:\n            memory[0x00:0x20] = var2;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var3] & (0x01 << 0xa0) - 0x01 == var1) {\n                memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                var temp2 = arg0;\n                memory[0x20:0x40] = temp2;\n                var2 = temp2 + 0x01;\n                var1 = arg2 & 0xffff;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n            \n                if (storage[keccak256(memory[0x00:0x20]) + var3] / (0x01 << 0xa0) & 0xffff == var1) { return; }\n            \n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n                var2 = temp3 + 0x04;\n                var1 = 0x02e5;\n                var1 = func_1344(var2);\n            \n            label_02E5:\n                var temp4 = memory[0x40:0x60];\n                revert(memory[temp4:temp4 + var1 - temp4]);\n            } else {\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n                var1 = 0x02e5;\n                var2 = temp5 + 0x04;\n                var1 = func_16BF(var2);\n                goto label_02E5;\n            }\n        } else {\n            var1 = 0x0ac7;\n            var1 = func_0EA4();\n            var temp6 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp6 + 0x40;\n            var temp7 = (0x01 << 0xa0) - 0x01;\n            var temp8 = arg1 & temp7;\n            memory[temp6:temp6 + 0x20] = temp8;\n            var temp9 = temp6 + 0x20;\n            memory[temp9:temp9 + 0x20] = arg2 & 0xffff;\n            var temp10 = arg0;\n            var temp11 = temp10 + 0x01;\n            var temp12 = storage[temp11];\n            storage[temp11] = temp12 + 0x01;\n            memory[0x00:0x20] = temp11;\n            var temp13 = temp12 + keccak256(memory[0x00:0x20]);\n            storage[temp13] = (((storage[temp13] & ~((0x01 << 0xa0) - 0x01)) | (temp7 & memory[temp6:temp6 + 0x20])) & ~(0xffff << 0xa0)) | (memory[temp9:temp9 + 0x20] & 0xffff) * (0x01 << 0xa0);\n            memory[0x00:0x20] = temp8;\n            memory[0x20:0x40] = temp10;\n            storage[keccak256(memory[0x00:0x40])] = storage[temp11] + ~0x00;\n            var1 = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x00:0x20] = var1;\n            var temp14 = arg0;\n            memory[0x20:0x40] = temp14;\n            var2 = temp14 + 0x01;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var3 < storage[var2]) { goto label_0BB5; }\n            else { assert(); }\n        }\n    }\n    \n    function func_0C4F(var arg0, var arg1) {\n        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = arg0;\n        var var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (!var0) { return; }\n    \n        var var1 = storage[arg0 + 0x01] + ~0x00;\n    \n        if (var1 == var0) {\n        label_0D0C:\n            var var2 = arg0 + 0x01;\n            var var3 = storage[var2];\n        \n            if (!var3) { assert(); }\n        \n            var temp0 = var2;\n            memory[0x00:0x20] = temp0;\n            var temp1 = var3;\n            var temp2 = ~0x00;\n            var temp3 = temp2 + temp1 + keccak256(memory[0x00:0x20]);\n            storage[temp3] = storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffffffff;\n            storage[temp0] = temp1 + temp2;\n            memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = arg0;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            var2 = var0 == var1;\n        \n            if (var2) {\n            label_0D9C:\n            \n                if (var2) { return; }\n            \n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n                var2 = 0x02e5;\n                var3 = temp4 + 0x04;\n                var2 = func_1779(var3);\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + var2 - temp5]);\n            } else {\n                var2 = arg1 & (0x01 << 0xa0) - 0x01;\n                var3 = arg0 + 0x01;\n                var var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var2 = storage[keccak256(memory[0x00:0x20]) + var4] & (0x01 << 0xa0) - 0x01 != var2;\n                goto label_0D9C;\n            }\n        } else {\n            var2 = 0x00;\n            var3 = arg0 + 0x01;\n            var4 = var1;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n            var2 = keccak256(memory[0x00:0x20]) + var4;\n            var3 = var2;\n            var4 = arg0 + 0x01;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp6 = var3;\n            var temp7 = var5 + keccak256(memory[0x00:0x20]);\n            var temp8 = (0x01 << 0xa0) - 0x01;\n            var temp9 = (temp8 & storage[temp6]) | (storage[temp7] & ~((0x01 << 0xa0) - 0x01));\n            storage[temp7] = temp9;\n            storage[temp7] = (temp9 & ~(0xffff << 0xa0)) | (storage[temp6] / (0x01 << 0xa0) & 0xffff) * (0x01 << 0xa0);\n            memory[0x00:0x20] = temp8 & storage[var2];\n            memory[0x20:0x40] = arg0;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            goto label_0D0C;\n        }\n    }\n    \n    function func_0DBC(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = arg0;\n        return !!storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0DDA(var arg0) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var temp0 = storage[arg0 + 0x01] - 0x01;\n        var temp1 = memory[0x40:0x60];\n        var var3 = temp0;\n        var var2 = temp1;\n        memory[var2:var2 + 0x20] = var3;\n        memory[0x40:0x60] = var2 + var3 * 0x20 + 0x20;\n    \n        if (!var3) {\n        label_0E21:\n            var1 = var2;\n            var2 = 0x01;\n        \n            if (var2 >= storage[arg0 + 0x01]) {\n            label_0E9D:\n                return var1;\n            } else {\n            label_0E34:\n                var3 = arg0 + 0x01;\n                var var4 = var2;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp2 = keccak256(memory[0x00:0x20]);\n                var temp3 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp3 + 0x40;\n                var temp4 = storage[var4 + temp2];\n                memory[temp3:temp3 + 0x20] = temp4 & (0x01 << 0xa0) - 0x01;\n                var3 = temp3;\n                memory[var3 + 0x20:var3 + 0x20 + 0x20] = temp4 / (0x01 << 0xa0) & 0xffff;\n                var4 = var1;\n                var var5 = var2 + ~0x00;\n            \n                if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n            \n                memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20] = var3;\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[arg0 + 0x01]) { goto label_0E9D; }\n                else { goto label_0E34; }\n            }\n        } else {\n            var4 = var2 + 0x20;\n            var5 = 0x0e0e;\n            var5 = func_0EA4();\n        \n        label_0E0E:\n            var temp5 = var4;\n            memory[temp5:temp5 + 0x20] = var5;\n            var4 = temp5 + 0x20;\n            var3 = var3 - 0x01;\n        \n            if (var3) {\n                var5 = 0x0e0e;\n                var5 = func_0EA4();\n                goto label_0E0E;\n            } else {\n                var3 = var4;\n                goto label_0E21;\n            }\n        }\n    }\n    \n    function func_0EA4() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_0EBB(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 + 0x1f i< arg0) {\n            var1 = msg.data[arg1:arg1 + 0x20];\n        \n            if (var1 <= 0xffffffffffffffff) {\n                var temp0 = arg1;\n                var0 = temp0 + 0x20;\n            \n                if (temp0 + var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n            \n                arg0 = var1;\n                r0 = var0;\n                return r0, arg0;\n            } else {\n                var temp1 = var0;\n                revert(memory[temp1:temp1 + temp1]);\n            }\n        } else {\n            var temp2 = var0;\n            revert(memory[temp2:temp2 + temp2]);\n        }\n    }\n    \n    function func_0F02(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = msg.data[arg1:arg1 + 0x20];\n            var var2 = 0x0f1e;\n            var var3 = var1;\n            func_181C(var3);\n            return var1;\n        } else {\n            var temp0 = var0;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_0F25(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3) {\n        r3 = 0x00;\n        var var1 = r3;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var4 = msg.data[arg1:arg1 + 0x20];\n            var var5 = 0x0f45;\n            var var6 = var4;\n            func_181C(var6);\n            r3 = var4;\n            var temp0 = arg1;\n            var1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n            var4 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        \n            if (var4 <= 0xffffffffffffffff) {\n                var5 = 0x0f73;\n                var6 = arg0;\n                var var7 = arg1 + var4;\n                var5, var6 = func_0EBB(var6, var7);\n                var temp1 = r3;\n                r3 = var6;\n                r0 = temp1;\n                arg0 = var1;\n                arg1 = var5;\n                return r0, arg0, arg1, r3;\n            } else {\n                var temp2 = var2;\n                revert(memory[temp2:temp2 + temp2]);\n            }\n        } else {\n            var temp3 = var1;\n            revert(memory[temp3:temp3 + temp3]);\n        }\n    }\n    \n    function func_0F7F(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3, var r4, var r5, var r6, var r7) {\n        r3 = 0x00;\n        r4 = r3;\n        r5 = 0x00;\n        r6 = r5;\n        r7 = 0x00;\n        var var5 = r7;\n        var var6 = 0x00;\n        var var7 = var6;\n    \n        if (arg0 - arg1 i>= 0xc0) {\n            var var8 = msg.data[arg1:arg1 + 0x20];\n            var var9 = 0x0fa5;\n            var var10 = var8;\n            func_181C(var10);\n            r3 = var8;\n            var8 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n            var9 = 0x0fb5;\n            var10 = var8;\n            func_181C(var10);\n            r4 = var8;\n            var8 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n            var9 = 0x0fc5;\n            var10 = var8;\n            func_181C(var10);\n            r5 = var8;\n            var temp0 = arg1;\n            r6 = msg.data[temp0 + 0x60:temp0 + 0x60 + 0x20];\n            var8 = msg.data[temp0 + 0x80:temp0 + 0x80 + 0x20];\n            var9 = 0xffffffffffffffff;\n        \n            if (var8 <= var9) {\n                var10 = 0x0ff4;\n                var var11 = arg0;\n                var var12 = arg1 + var8;\n                var10, var11 = func_0EBB(var11, var12);\n                r7 = var10;\n                var5 = var11;\n                var8 = msg.data[arg1 + 0xa0:arg1 + 0xa0 + 0x20];\n            \n                if (var8 <= var9) {\n                    var9 = 0x1019;\n                    var10 = arg0;\n                    var11 = arg1 + var8;\n                    var9, var10 = func_0EBB(var10, var11);\n                    r0 = r3;\n                    arg0 = r4;\n                    arg1 = r5;\n                    r3 = r6;\n                    var temp1 = r7;\n                    r7 = var10;\n                    r4 = temp1;\n                    r5 = var5;\n                    r6 = var9;\n                    return r0, arg0, arg1, r3, r4, r5, r6, r7;\n                } else {\n                    var temp2 = var6;\n                    revert(memory[temp2:temp2 + temp2]);\n                }\n            } else {\n                var temp3 = r7;\n                revert(memory[temp3:temp3 + temp3]);\n            }\n        } else {\n            var temp4 = r7;\n            revert(memory[temp4:temp4 + temp4]);\n        }\n    }\n    \n    function func_102D(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = msg.data[arg1:arg1 + 0x20];\n            var var3 = 0x104a;\n            var var4 = var2;\n            func_181C(var4);\n            var0 = var2;\n            var temp0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n            var2 = temp0;\n        \n            if (var2 == var2 & 0xffff) {\n                arg0 = var2;\n                r0 = var0;\n                return r0, arg0;\n            } else {\n                var temp1 = var1;\n                revert(memory[temp1:temp1 + temp1]);\n            }\n        } else {\n            var temp2 = var0;\n            revert(memory[temp2:temp2 + temp2]);\n        }\n    }\n    \n    function func_106B(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var temp0 = arg1;\n            var0 = msg.data[temp0:temp0 + 0x20];\n            var var2 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n            var var3 = 0x1060;\n            var var4 = var2;\n            func_181C(var4);\n            arg0 = var2;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var temp1 = var0;\n            revert(memory[temp1:temp1 + temp1]);\n        }\n    }\n    \n    function func_108F(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3) {\n        r3 = 0x00;\n        var var1 = r3;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var temp0 = arg1;\n            r3 = msg.data[temp0:temp0 + 0x20];\n            var var4 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        \n            if (var4 <= 0xffffffffffffffff) {\n                var var5 = 0x10cd;\n                var var6 = arg0;\n                var var7 = arg1 + var4;\n                var5, var6 = func_0EBB(var6, var7);\n                r0 = r3;\n                arg0 = var5;\n                var temp1 = arg1;\n                arg1 = var6;\n                r3 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n                return r0, arg0, arg1, r3;\n            } else {\n                var temp2 = var1;\n                revert(memory[temp2:temp2 + temp2]);\n            }\n        } else {\n            var temp3 = r3;\n            revert(memory[temp3:temp3 + temp3]);\n        }\n    }\n    \n    function func_10E0(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg2;\n        memory[temp1:temp1 + temp0] = msg.data[arg0:arg0 + temp0];\n        memory[temp0 + temp1:temp0 + temp1 + 0x20] = 0x00;\n        return temp0 + temp1;\n    }\n    \n    function func_10F0(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        return temp0 + 0x20;\n    }\n    \n    function func_1104(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        var temp1 = arg0;\n        var temp2 = memory[temp1:temp1 + 0x20];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp2;\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var var2 = 0x40;\n        var var4 = temp2;\n        var var3 = temp0 + var2;\n        var var5 = var1 + temp1;\n        var var6 = var0;\n    \n        if (var6 >= var4) {\n        label_1153:\n            return var3;\n        } else {\n        label_112A:\n            var temp3 = var5;\n            var temp4 = memory[temp3:temp3 + 0x20];\n            var temp5 = var3;\n            memory[temp5:temp5 + 0x20] = memory[temp4:temp4 + 0x20] & (0x01 << 0xa0) - 0x01;\n            var temp6 = var1;\n            memory[temp5 + temp6:temp5 + temp6 + 0x20] = memory[temp6 + temp4:temp6 + temp4 + 0x20] & 0xffff;\n            var3 = var2 + temp5;\n            var5 = temp6 + temp3;\n            var6 = var6 + 0x01;\n        \n            if (var6 >= var4) { goto label_1153; }\n            else { goto label_112A; }\n        }\n    }\n    \n    function func_1160(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0;\n        return temp0 + 0x20;\n    }\n    \n    function func_1169(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = var0;\n    \n        if (var3 >= var2) {\n        label_1195:\n        \n            if (var3 <= var2) { return (var2 + 0x1f & ~0x1f) + arg1 + 0x40; }\n        \n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = var0;\n            return (temp2 + 0x1f & ~0x1f) + temp3 + 0x40;\n        } else {\n        label_1182:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_1195; }\n            else { goto label_1182; }\n        }\n    }\n    \n    function func_11BC(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x4f;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x57616c6c657420646f6573206e6f74206861766520656e6f7567682066756e64;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x7320617661696c61626c6520746f206578656375746520746865206465736972;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x6564207472616e73616374696f6e2e0000000000000000000000000000000000;\n        return temp0 + 0xa0;\n    }\n    \n    function func_123F(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x39;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x436f6e7472616374206372656174696f6e2072657475726e6564206164647265;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x737320302c20696e6469636174696e67206661696c7572652e00000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_129C(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x20;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x50726f7669646564206b657920776173206e6f7420696e20746865206d61702e;\n        return temp0 + 0x60;\n    }\n    \n    function func_12D1(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x4d;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x596f75206d757374207761697420756e74696c20746865207265636f76657279;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x2064656c6179206973206f766572206265666f72652066696e697368696e6720;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x3a3432903932b1b7bb32b93c97 << 0x99;\n        return temp0 + 0xa0;\n    }\n    \n    function func_1344(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x39;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x56616c756520617420696e736572746564206c6f636174696f6e20646f657320;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x6e6f74206d6174636820696e7365727465642076616c75652e00000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_13A1(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x31;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x54686973206d6574686f642063616e206f6e6c792062652063616c6c65642064;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x7572696e672061207265636f766572792e000000000000000000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_13FE(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x43;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x57616c6c657420646f6573206e6f74206861766520656e6f7567682066756e64;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x7320617661696c61626c6520746f206465706c6f792074686520636f6e747261;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x31ba17 << 0xe9;\n        return temp0 + 0xa0;\n    }\n    \n    function func_1467(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x38;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x43616c6c6572206973206e6f7420726567697374657265642061732061207265;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x636f766572657220666f7220746869732077616c6c65742e0000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_14C4(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x4f;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x5265636f7665727920697320616c726561647920756e6465722077617920616e;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x64206e6577207265636f766572657220646f65736e2774206861766520612068;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x6967686572207072696f726974792e0000000000000000000000000000000000;\n        return temp0 + 0xa0;\n    }\n    \n    function func_1547(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x2f;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x54686973206d6574686f642063616e6e6f742062652063616c6c656420647572;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x696e672061207265636f766572792e0000000000000000000000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_15A4(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x69;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x5472616e73616374696f6e20657865637574696f6e206d75737420636f6e7461;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x696e20612064657374696e6174696f6e2e2020496620796f75206d65616e7420;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x746f206465706c6f79206120636f6e74726163742c20757365206465706c6f79;\n        memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20] = 0x1034b739ba32b0b217 << 0xb9;\n        return temp0 + 0xc0;\n    }\n    \n    function func_1639(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x24;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4f6e6c7920746865206f776e6572206d61792063616c6c2074686973206d6574;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x3437b217 << 0xe1;\n        return temp0 + 0x80;\n    }\n    \n    function func_167D(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x22;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x5265636f766572792061646472657373206d75737420626520737570706c6965;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x3217 << 0xf1;\n        return temp0 + 0x80;\n    }\n    \n    function func_16BF(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x35;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4b657920617420696e736572746564206c6f636174696f6e20646f6573206e6f;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x74206d6174636820696e736572746564206b65792e0000000000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_171C(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x34;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x436f6e7472616374206465706c6f796d656e74206d75737420636f6e7461696e;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x2062797465636f646520746f206465706c6f792e000000000000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_1779(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x38;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x52656d6f766564206b6579207374696c6c2065786973747320696e2074686520;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x6172726179206174206f726967696e616c20696e6465782e0000000000000000;\n        return temp0 + 0x80;\n    }\n    \n    function func_17D6(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x1a;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x436f6e747261637420657865637574696f6e206661696c65642e000000000000;\n        return temp0 + 0x60;\n    }\n    \n    function func_180D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0 & 0xffff;\n        return temp0 + 0x20;\n    }\n    \n    function func_181C(var arg0) {\n        var temp0 = arg0;\n    \n        if (temp0 == temp0 & (0x01 << 0xa0) - 0x01) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 25.83461046218872,
	"usage": {
		"completion_tokens": 316,
		"prompt_tokens": 17842,
		"total_tokens": 18158
	}
}