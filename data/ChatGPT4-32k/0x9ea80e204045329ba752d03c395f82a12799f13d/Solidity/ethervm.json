{
	"address": "0x9ea80e204045329ba752d03c395f82a12799f13d",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code based on the provided decompiled code:\n\n```solidity\npragma solidity ^0.4.25;\n\ncontract Contract {\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 _totalSupply;\n    address public owner;\n    uint256 public exchangeRate;\n    bool public ICOOpen;\n    uint256 public fundingEnd;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalMigrated;\n    address public migrationAgent;\n    uint256 public tokenCreationCap;\n    uint256 public tokenCreationMin;\n    bool public funding;\n    uint256 public amountOfTotalParticipants;\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function migrate(uint256 _value) public;\n    function finalize() public;\n    function refund() public;\n    function setMigrationAgent(address _agent) public;\n    function TimeLeftBeforeCrowdsale() public view returns (uint256);\n    function getAmountofTotalParticipants() public view returns (uint256);\n    function getExchangeRate() public view returns (uint256);\n    function getAmountSoldAfterPowerDay() public view returns (uint256);\n    function EtherBalanceOf(address _owner) public view returns (uint256);\n    function totalSupply() public view returns (uint256);\n    function fundingStart() public view returns (uint256);\n}\n```\nPlease note that the recompiled code might not work exactly as the original code because of the complexity of the original code and possible missing parts of the code.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474427,
	"id": "chatcmpl-8MvMpQV4GmJvfGOUzG6FjI92PfUcM",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n    label_0000:\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_014E:\n            var var0 = 0x0242;\n            var var1 = 0x00;\n        \n            if (storage[0x03] & 0xff) {\n                func_0166(var1);\n                stop();\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x01afebac) {\n                // Dispatch table entry for ICOopen()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0251;\n                    var1 = ICOopen();\n                \n                label_0251:\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = !!var1;\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n                }\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0272;\n                    var var2 = name();\n                \n                label_0272:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = 0x20;\n                    var temp3 = var2;\n                    memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n                    var var3 = temp2;\n                    var var4 = var3;\n                    var var5 = var4 + 0x40;\n                    var var6 = temp3 + 0x20;\n                    var var7 = memory[temp3:temp3 + 0x20];\n                    var var8 = var7;\n                    var var9 = var5;\n                    var var10 = var6;\n                \n                    if (!var8) {\n                    label_02B8:\n                        var temp4 = var7;\n                        var5 = temp4 + var5;\n                        var6 = temp4 & 0x1f;\n                    \n                        if (!var6) {\n                            var temp5 = memory[0x40:0x60];\n                            return memory[temp5:temp5 + var5 - temp5];\n                        } else {\n                            var temp6 = var6;\n                            var temp7 = var5 - temp6;\n                            memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                            var temp8 = memory[0x40:0x60];\n                            return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                        }\n                    } else {\n                    label_0298:\n                        memory[var9:var9 + 0x20] = memory[var10:var10 + 0x20];\n                    \n                        if (var8 <= 0x20) { goto label_02B8; }\n                    \n                        var8 = var8 + ~0x1f;\n                        var9 = var9 + 0x20;\n                        var10 = var10 + 0x20;\n                        goto label_0298;\n                    }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0251;\n                    var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                    var3 = msg.data[0x24:0x44];\n                    var1 = approve(var2, var3);\n                    goto label_0251;\n                }\n            } else if (var0 == 0x13e7323e) {\n                // Dispatch table entry for fundingEnd()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = fundingEnd();\n                \n                label_032F:\n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = var2;\n                    var temp10 = memory[0x40:0x60];\n                    return memory[temp10:temp10 + temp9 - temp10 + 0x20];\n                }\n            } else if (var0 == 0x14c0bc27) {\n                // Dispatch table entry for EtherBalanceOf(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                    var1 = EtherBalanceOf(var2);\n                    goto label_032F;\n                }\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = totalSupply();\n                    goto label_032F;\n                }\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0251;\n                    var temp11 = 0x02 ** 0xa0 - 0x01;\n                    var2 = temp11 & msg.data[0x04:0x24];\n                    var3 = msg.data[0x24:0x44] & temp11;\n                    var4 = msg.data[0x44:0x64];\n                    var1 = transferFrom(var2, var3, var4);\n                    goto label_0251;\n                }\n            } else if (var0 == 0x2af0ac71) {\n                // Dispatch table entry for getAmountSoldAfterPowerDay()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = getAmountSoldAfterPowerDay();\n                    goto label_032F;\n                }\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x03ed;\n                    var2 = decimals();\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = var2 & 0xff;\n                    var temp13 = memory[0x40:0x60];\n                    return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n                }\n            } else if (var0 == 0x454b0608) {\n                // Dispatch table entry for migrate(uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0242;\n                    var2 = msg.data[0x04:0x24];\n                    migrate(var2);\n                    stop();\n                }\n            } else if (var0 == 0x4bb278f3) {\n                // Dispatch table entry for finalize()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0242;\n                    finalize();\n                    stop();\n                }\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0242;\n                    refund();\n                    stop();\n                }\n            } else if (var0 == 0x6f7920fd) {\n                // Dispatch table entry for tokenCreationCap()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = tokenCreationCap();\n                    goto label_032F;\n                }\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                    var1 = balanceOf(var2);\n                    goto label_032F;\n                }\n            } else if (var0 == 0x75e2ff65) {\n                // Dispatch table entry for setMigrationAgent(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0242;\n                    var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                    setMigrationAgent(var2);\n                    stop();\n                }\n            } else if (var0 == 0x8328dbcd) {\n                // Dispatch table entry for migrationAgent()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x04a5;\n                    var2 = migrationAgent();\n                \n                label_04A5:\n                    var temp14 = memory[0x40:0x60];\n                    memory[temp14:temp14 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                    var temp15 = memory[0x40:0x60];\n                    return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n                }\n            } else if (var0 == 0x8aef91f5) {\n                // Dispatch table entry for TimeLeftBeforeCrowdsale()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = TimeLeftBeforeCrowdsale();\n                    goto label_032F;\n                }\n            } else if (var0 == 0x95a0f5eb) {\n                // Dispatch table entry for totalMigrated()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = totalMigrated();\n                    goto label_032F;\n                }\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0272;\n                    var2 = symbol();\n                    goto label_0272;\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0251;\n                    var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                    var3 = msg.data[0x24:0x44];\n                    var1 = transfer(var2, var3);\n                    goto label_0251;\n                }\n            } else if (var0 == 0xbcde18f1) {\n                // Dispatch table entry for fundingStart()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = fundingStart();\n                    goto label_032F;\n                }\n            } else if (var0 == 0xc039daf6) {\n                // Dispatch table entry for tokenCreationMin()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = tokenCreationMin();\n                    goto label_032F;\n                }\n            } else if (var0 == 0xcb4c86b7) {\n                // Dispatch table entry for funding()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0251;\n                    var2 = funding();\n                    goto label_0251;\n                }\n            } else if (var0 == 0xdc132be8) {\n                // Dispatch table entry for getAmountofTotalParticipants()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = getAmountofTotalParticipants();\n                    goto label_032F;\n                }\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var temp16 = 0x02 ** 0xa0 - 0x01;\n                    var2 = temp16 & msg.data[0x04:0x24];\n                    var3 = msg.data[0x24:0x44] & temp16;\n                    var1 = allowance(var2, var3);\n                    goto label_032F;\n                }\n            } else if (var0 == 0xde824f93) {\n                // Dispatch table entry for TimeLeft()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = TimeLeft();\n                    goto label_032F;\n                }\n            } else if (var0 == 0xe6aa216c) {\n                // Dispatch table entry for getExchangeRate()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = getExchangeRate();\n                    goto label_032F;\n                }\n            } else if (var0 == 0xee97f7f3) {\n                // Dispatch table entry for master()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x04a5;\n                    var2 = master();\n                    goto label_04A5;\n                }\n            } else { goto label_014E; }\n        }\n    }\n    \n    function func_0166(var arg0) {\n        if (block.timestamp < storage[0x01]) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (block.timestamp > storage[0x02]) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (msg.value) {\n            var var0 = 0x033b2e3c9fd0803ce8000000 - storage[0x04];\n            var var1 = 0x01a9;\n            var1 = getExchangeRate();\n        \n            if (msg.value * var1 <= var0) {\n                var0 = 0x01be;\n                var0 = getExchangeRate();\n                storage[0x04] = msg.value * var0 + storage[0x04];\n                arg0 = msg.value * var0;\n                var0 = 0x01d6;\n                var0 = getExchangeRate();\n            \n                if (var0 == 0x3a98) {\n                    var temp0 = msg.sender;\n                    memory[0x00:0x20] = temp0;\n                    memory[0x20:0x40] = 0x06;\n                    var temp1 = keccak256(memory[0x00:0x40]);\n                    var temp2 = arg0;\n                    storage[temp1] = temp2 + storage[temp1];\n                    memory[0x20:0x40] = 0x08;\n                    var temp3 = keccak256(memory[0x00:0x40]);\n                    storage[temp3] = msg.value + storage[temp3];\n                    storage[0x0b] = storage[0x0b] + 0x01;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = temp2;\n                    var temp5 = memory[0x40:0x60];\n                    var temp6 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x0f36:0x0f56];\n                    var temp7 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp6;\n                    log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [memory[0x00:0x20], 0x00, msg.sender]);\n                    return;\n                } else {\n                    var temp8 = arg0;\n                    storage[0x05] = temp8 + storage[0x05];\n                    var temp9 = msg.sender;\n                    memory[0x00:0x20] = temp9;\n                    memory[0x20:0x40] = 0x06;\n                    var temp10 = keccak256(memory[0x00:0x40]);\n                    storage[temp10] = temp8 + storage[temp10];\n                    memory[0x20:0x40] = 0x08;\n                    var temp11 = keccak256(memory[0x00:0x40]);\n                    storage[temp11] = msg.value + storage[temp11];\n                    storage[0x0b] = storage[0x0b] + 0x01;\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = temp8;\n                    var temp13 = memory[0x40:0x60];\n                    var temp14 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x0f36:0x0f56];\n                    var temp15 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp14;\n                    log(memory[temp13:temp13 + temp12 - temp13 + 0x20], [memory[0x00:0x20], 0x00, msg.sender]);\n                    return;\n                }\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function getExchangeRate() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (storage[0x01] + 0x015180 > block.timestamp) { return 0x3a98; }\n    \n        var1 = 0x64 - storage[0x05] / 0x989680 / 0x0de0b6b3a7640000;\n    \n        if (var1 >= 0x46) { return (var1 * 0x2710) / 0x64; }\n        else { return (0x46 * 0x2710) / 0x64; }\n    }\n    \n    function ICOopen() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] & 0xff)) {\n            var0 = 0x00;\n            goto label_0780;\n        } else if (block.timestamp < storage[0x01]) {\n            var0 = 0x00;\n            goto label_0780;\n        } else if (block.timestamp > storage[0x02]) {\n            var0 = 0x00;\n            goto label_0780;\n        } else if (0x033b2e3c9fd0803ce8000000 > storage[0x04]) {\n            var0 = 0x01;\n        \n        label_0780:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0780;\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x0c;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4c616e63657220546f6b656e0000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] & 0xff)) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x00;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function fundingEnd() returns (var r0) { return storage[0x02]; }\n    \n    function EtherBalanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x04]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] & 0xff)) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x06;\n            var var1 = storage[keccak256(memory[0x00:0x40])] < arg2;\n        \n            if (storage[keccak256(memory[0x00:0x40])] < arg2) {\n                var temp13 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg0 & temp13;\n                memory[0x20:0x40] = 0x00;\n                var temp14 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = temp13 & msg.sender;\n                memory[0x20:0x40] = temp14;\n                var1 = storage[keccak256(memory[0x00:0x40])] >= arg2;\n            \n                if (!var1) { goto label_08CF; }\n                else { goto label_08CA; }\n            } else if (!var1) {\n            label_08CF:\n            \n                if (!var1) {\n                label_08F4:\n                \n                    if (!var1) {\n                    label_096E:\n                        return 0x00;\n                    } else {\n                    label_08FA:\n                        var temp0 = 0x02 ** 0xa0 - 0x01;\n                        var temp1 = arg0 & temp0;\n                        memory[0x00:0x20] = temp1;\n                        memory[0x20:0x40] = 0x06;\n                        var temp2 = keccak256(memory[0x00:0x40]);\n                        var temp3 = arg2;\n                        storage[temp2] = storage[temp2] - temp3;\n                        memory[0x20:0x40] = 0x00;\n                        var temp4 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = temp0 & msg.sender;\n                        memory[0x20:0x40] = temp4;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        storage[temp5] = storage[temp5] - temp3;\n                        var temp6 = arg1 & temp0;\n                        memory[0x00:0x20] = temp6;\n                        memory[0x20:0x40] = 0x06;\n                        var temp7 = keccak256(memory[0x00:0x40]);\n                        storage[temp7] = temp3 + storage[temp7];\n                        var temp8 = memory[0x40:0x60];\n                        memory[temp8:temp8 + 0x20] = temp3;\n                        var temp9 = memory[0x40:0x60];\n                        var temp10 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x0f36:0x0f56];\n                        var temp11 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp10;\n                        log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [memory[0x00:0x20], stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                        return 0x01;\n                    }\n                } else {\n                label_08D6:\n                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x06;\n                    var temp12 = storage[keccak256(memory[0x00:0x40])];\n                \n                    if (temp12 + arg2 <= temp12) { goto label_096E; }\n                    else { goto label_08FA; }\n                }\n            } else {\n            label_08CA:\n                var1 = arg2 > 0x00;\n            \n                if (!var1) { goto label_08F4; }\n                else { goto label_08D6; }\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function getAmountSoldAfterPowerDay() returns (var r0) { return storage[0x05]; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function migrate(var arg0) {\n        if (storage[0x03] & 0xff) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (!(storage[0x09] & 0x02 ** 0xa0 - 0x01)) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (arg0) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n        \n            if (arg0 <= storage[keccak256(memory[0x00:0x40])]) {\n                var temp0 = 0x02 ** 0xa0 - 0x01;\n                var temp1 = temp0 & msg.sender;\n                memory[0x00:0x20] = temp1;\n                memory[0x20:0x40] = 0x06;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                var temp3 = arg0;\n                storage[temp2] = storage[temp2] - temp3;\n                storage[0x04] = storage[0x04] - temp3;\n                storage[0x0a] = temp3 + storage[0x0a];\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x7a3130e300000000000000000000000000000000000000000000000000000000;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = temp1;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = temp3;\n                var var0 = temp0 & storage[0x09];\n                var var4 = memory[0x40:0x60];\n                var var1 = 0x7a3130e3;\n                var var2 = temp4 + 0x44;\n                var var3 = 0x00;\n                var var5 = temp4 - var4 + 0x44;\n                var var6 = var4;\n                var var7 = var3;\n                var var8 = var0;\n            \n                if (!address(var8).code.length) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp5;\n                    temp5, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x32).value(var7)(memory[var6:var6 + var5]);\n                \n                    if (!temp5) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = arg0;\n                        var temp7 = memory[0x40:0x60];\n                        var temp8 = 0x02 ** 0xa0 - 0x01;\n                        log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x18df02dcc52b9c494f391df09661519c0069bd8540141946280399408205ca1a, msg.sender, storage[0x09] & 0x02 ** 0xa0 - 0x01]);\n                        return;\n                    }\n                }\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function finalize() {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[0x03] & 0xff) {\n            var var2 = block.timestamp <= storage[0x02];\n        \n            if (!var2) {\n                var2 = storage[0x04] < 0x7c13bc4b2c133c56000000;\n            \n                if (!var2) { goto label_0B18; }\n                else { goto label_0AFA; }\n            } else if (!var2) {\n            label_0B18:\n            \n                if (!var2) {\n                label_0B22:\n                    var temp0 = storage[0x03] & ~0xff;\n                    storage[0x03] = temp0;\n                    var temp1 = storage[0x04];\n                    var temp2 = (temp1 * 0x0c) / 0x58;\n                    storage[0x04] = temp2 + temp1;\n                    var temp3 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp3 & temp0 / 0x0100;\n                    memory[0x20:0x40] = 0x06;\n                    var temp4 = keccak256(memory[0x00:0x40]);\n                    storage[temp4] = temp2 + storage[temp4];\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = temp2;\n                    var temp6 = memory[0x40:0x60];\n                    var0 = 0x0c;\n                    var1 = temp2;\n                    var temp7 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x0f36:0x0f56];\n                    var temp8 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp7;\n                    log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [memory[0x00:0x20], 0x00, storage[0x03] / 0x0100 & 0x02 ** 0xa0 - 0x01]);\n                    var temp9 = memory[0x40:0x60];\n                    var temp10 = 0x02 ** 0xa0 - 0x01;\n                    var temp11 = address(address(this) & temp10).balance;\n                    var temp12;\n                    temp12, memory[temp9:temp9 + 0x00] = address(temp10 & storage[0x03] / 0x0100).call.gas(!temp11 * 0x08fc).value(temp11)(memory[temp9:temp9 + 0x00]);\n                \n                    if (temp12) { return; }\n                \n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                label_0B1E:\n                    main();\n                    // Error: Could not resolve method call return address!\n                }\n            } else {\n            label_0AFA:\n            \n                if (storage[0x04] + 0x010f0cf064dd59200000 >= 0x033b2e3c9fd0803ce8000000) { goto label_0B22; }\n                else { goto label_0B1E; }\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function refund() {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(storage[0x03] & 0xff)) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (block.timestamp <= storage[0x02]) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (storage[0x04] < 0x7c13bc4b2c133c56000000) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n            var temp0 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x20:0x40] = 0x08;\n            var0 = temp0;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var0) {\n                var temp1 = msg.sender;\n                memory[0x00:0x20] = temp1;\n                memory[0x20:0x40] = 0x06;\n                storage[keccak256(memory[0x00:0x40])] = 0x00;\n                memory[0x20:0x40] = 0x08;\n                storage[keccak256(memory[0x00:0x40])] = 0x00;\n                storage[0x04] = storage[0x04] - var0;\n                var temp2 = memory[0x40:0x60];\n                var temp3 = var1;\n                memory[temp2:temp2 + 0x20] = temp3;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + temp2 - temp4 + 0x20], [0xbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d, msg.sender]);\n                var temp5 = memory[0x40:0x60];\n                var temp6;\n                temp6, memory[temp5:temp5 + 0x00] = address(msg.sender).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp5:temp5 + 0x00]);\n            \n                if (temp6) { return; }\n            \n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function tokenCreationCap() returns (var r0) { return 0x033b2e3c9fd0803ce8000000; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function setMigrationAgent(var arg0) {\n        if (storage[0x03] & 0xff) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (!(storage[0x09] & 0x02 ** 0xa0 - 0x01)) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[0x03] / 0x0100 & temp0 == temp0 & msg.sender) {\n                storage[0x09] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x09] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                return;\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function migrationAgent() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function TimeLeftBeforeCrowdsale() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x01] <= block.timestamp) {\n            var0 = 0x00;\n        \n        label_0780:\n            return var0;\n        } else {\n            var0 = storage[0x01] - block.timestamp;\n            goto label_0780;\n        }\n    }\n    \n    function totalMigrated() returns (var r0) { return storage[0x0a]; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4c4e430000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(storage[0x03] & 0xff)) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = var1 >= arg1;\n        \n            if (var1 >= arg1) {\n                if (!var2) {\n                label_0EA1:\n                    return 0x00;\n                } else {\n                label_0E36:\n                    var temp0 = 0x02 ** 0xa0 - 0x01;\n                    var temp1 = temp0 & msg.sender;\n                    memory[0x00:0x20] = temp1;\n                    memory[0x20:0x40] = 0x06;\n                    var temp2 = arg1;\n                    var temp3 = var1 - temp2;\n                    var1 = temp3;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var temp4 = arg0 & temp0;\n                    memory[0x00:0x20] = temp4;\n                    var temp5 = keccak256(memory[0x00:0x40]);\n                    storage[temp5] = temp2 + storage[temp5];\n                    memory[0x00:0x20] = temp1;\n                    memory[0x20:0x40] = 0x07;\n                    storage[keccak256(memory[0x00:0x40])] = block.timestamp;\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = temp2;\n                    var temp7 = memory[0x40:0x60];\n                    var temp8 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x0f36:0x0f56];\n                    var temp9 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp8;\n                    log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n                    return 0x01;\n                }\n            } else if (arg1 <= 0x00) { goto label_0EA1; }\n            else { goto label_0E36; }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function fundingStart() returns (var r0) { return storage[0x01]; }\n    \n    function tokenCreationMin() returns (var r0) { return 0x7c13bc4b2c133c56000000; }\n    \n    function funding() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function getAmountofTotalParticipants() returns (var r0) { return storage[0x0b]; }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x00;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function TimeLeft() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x02] <= block.timestamp) {\n            var0 = 0x00;\n        \n        label_0780:\n            return var0;\n        } else {\n            var0 = storage[0x02] - block.timestamp;\n            goto label_0780;\n        }\n    }\n    \n    function master() returns (var r0) { return storage[0x03] / 0x0100 & 0x02 ** 0xa0 - 0x01; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n    label_0000:\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_014E:\n            var var0 = 0x0242;\n            var var1 = 0x00;\n        \n            if (storage[0x03] & 0xff) {\n                func_0166(var1);\n                stop();\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x01afebac) {\n                // Dispatch table entry for ICOopen()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0251;\n                    var1 = ICOopen();\n                \n                label_0251:\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = !!var1;\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n                }\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0272;\n                    var var2 = name();\n                \n                label_0272:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = 0x20;\n                    var temp3 = var2;\n                    memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n                    var var3 = temp2;\n                    var var4 = var3;\n                    var var5 = var4 + 0x40;\n                    var var6 = temp3 + 0x20;\n                    var var7 = memory[temp3:temp3 + 0x20];\n                    var var8 = var7;\n                    var var9 = var5;\n                    var var10 = var6;\n                \n                    if (!var8) {\n                    label_02B8:\n                        var temp4 = var7;\n                        var5 = temp4 + var5;\n                        var6 = temp4 & 0x1f;\n                    \n                        if (!var6) {\n                            var temp5 = memory[0x40:0x60];\n                            return memory[temp5:temp5 + var5 - temp5];\n                        } else {\n                            var temp6 = var6;\n                            var temp7 = var5 - temp6;\n                            memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                            var temp8 = memory[0x40:0x60];\n                            return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                        }\n                    } else {\n                    label_0298:\n                        memory[var9:var9 + 0x20] = memory[var10:var10 + 0x20];\n                    \n                        if (var8 <= 0x20) { goto label_02B8; }\n                    \n                        var8 = var8 + ~0x1f;\n                        var9 = var9 + 0x20;\n                        var10 = var10 + 0x20;\n                        goto label_0298;\n                    }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0251;\n                    var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                    var3 = msg.data[0x24:0x44];\n                    var1 = approve(var2, var3);\n                    goto label_0251;\n                }\n            } else if (var0 == 0x13e7323e) {\n                // Dispatch table entry for fundingEnd()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = fundingEnd();\n                \n                label_032F:\n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = var2;\n                    var temp10 = memory[0x40:0x60];\n                    return memory[temp10:temp10 + temp9 - temp10 + 0x20];\n                }\n            } else if (var0 == 0x14c0bc27) {\n                // Dispatch table entry for EtherBalanceOf(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                    var1 = EtherBalanceOf(var2);\n                    goto label_032F;\n                }\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = totalSupply();\n                    goto label_032F;\n                }\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0251;\n                    var temp11 = 0x02 ** 0xa0 - 0x01;\n                    var2 = temp11 & msg.data[0x04:0x24];\n                    var3 = msg.data[0x24:0x44] & temp11;\n                    var4 = msg.data[0x44:0x64];\n                    var1 = transferFrom(var2, var3, var4);\n                    goto label_0251;\n                }\n            } else if (var0 == 0x2af0ac71) {\n                // Dispatch table entry for getAmountSoldAfterPowerDay()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = getAmountSoldAfterPowerDay();\n                    goto label_032F;\n                }\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x03ed;\n                    var2 = decimals();\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = var2 & 0xff;\n                    var temp13 = memory[0x40:0x60];\n                    return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n                }\n            } else if (var0 == 0x454b0608) {\n                // Dispatch table entry for migrate(uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0242;\n                    var2 = msg.data[0x04:0x24];\n                    migrate(var2);\n                    stop();\n                }\n            } else if (var0 == 0x4bb278f3) {\n                // Dispatch table entry for finalize()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0242;\n                    finalize();\n                    stop();\n                }\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0242;\n                    refund();\n                    stop();\n                }\n            } else if (var0 == 0x6f7920fd) {\n                // Dispatch table entry for tokenCreationCap()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = tokenCreationCap();\n                    goto label_032F;\n                }\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                    var1 = balanceOf(var2);\n                    goto label_032F;\n                }\n            } else if (var0 == 0x75e2ff65) {\n                // Dispatch table entry for setMigrationAgent(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0242;\n                    var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                    setMigrationAgent(var2);\n                    stop();\n                }\n            } else if (var0 == 0x8328dbcd) {\n                // Dispatch table entry for migrationAgent()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x04a5;\n                    var2 = migrationAgent();\n                \n                label_04A5:\n                    var temp14 = memory[0x40:0x60];\n                    memory[temp14:temp14 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                    var temp15 = memory[0x40:0x60];\n                    return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n                }\n            } else if (var0 == 0x8aef91f5) {\n                // Dispatch table entry for TimeLeftBeforeCrowdsale()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = TimeLeftBeforeCrowdsale();\n                    goto label_032F;\n                }\n            } else if (var0 == 0x95a0f5eb) {\n                // Dispatch table entry for totalMigrated()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = totalMigrated();\n                    goto label_032F;\n                }\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0272;\n                    var2 = symbol();\n                    goto label_0272;\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0251;\n                    var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                    var3 = msg.data[0x24:0x44];\n                    var1 = transfer(var2, var3);\n                    goto label_0251;\n                }\n            } else if (var0 == 0xbcde18f1) {\n                // Dispatch table entry for fundingStart()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = fundingStart();\n                    goto label_032F;\n                }\n            } else if (var0 == 0xc039daf6) {\n                // Dispatch table entry for tokenCreationMin()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = tokenCreationMin();\n                    goto label_032F;\n                }\n            } else if (var0 == 0xcb4c86b7) {\n                // Dispatch table entry for funding()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0251;\n                    var2 = funding();\n                    goto label_0251;\n                }\n            } else if (var0 == 0xdc132be8) {\n                // Dispatch table entry for getAmountofTotalParticipants()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = getAmountofTotalParticipants();\n                    goto label_032F;\n                }\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var temp16 = 0x02 ** 0xa0 - 0x01;\n                    var2 = temp16 & msg.data[0x04:0x24];\n                    var3 = msg.data[0x24:0x44] & temp16;\n                    var1 = allowance(var2, var3);\n                    goto label_032F;\n                }\n            } else if (var0 == 0xde824f93) {\n                // Dispatch table entry for TimeLeft()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = TimeLeft();\n                    goto label_032F;\n                }\n            } else if (var0 == 0xe6aa216c) {\n                // Dispatch table entry for getExchangeRate()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = getExchangeRate();\n                    goto label_032F;\n                }\n            } else if (var0 == 0xee97f7f3) {\n                // Dispatch table entry for master()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x04a5;\n                    var2 = master();\n                    goto label_04A5;\n                }\n            } else { goto label_014E; }\n        }\n    }\n    \n    function func_0166(var arg0) {\n        if (block.timestamp < storage[0x01]) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (block.timestamp > storage[0x02]) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (msg.value) {\n            var var0 = 0x033b2e3c9fd0803ce8000000 - storage[0x04];\n            var var1 = 0x01a9;\n            var1 = getExchangeRate();\n        \n            if (msg.value * var1 <= var0) {\n                var0 = 0x01be;\n                var0 = getExchangeRate();\n                storage[0x04] = msg.value * var0 + storage[0x04];\n                arg0 = msg.value * var0;\n                var0 = 0x01d6;\n                var0 = getExchangeRate();\n            \n                if (var0 == 0x3a98) {\n                    var temp0 = msg.sender;\n                    memory[0x00:0x20] = temp0;\n                    memory[0x20:0x40] = 0x06;\n                    var temp1 = keccak256(memory[0x00:0x40]);\n                    var temp2 = arg0;\n                    storage[temp1] = temp2 + storage[temp1];\n                    memory[0x20:0x40] = 0x08;\n                    var temp3 = keccak256(memory[0x00:0x40]);\n                    storage[temp3] = msg.value + storage[temp3];\n                    storage[0x0b] = storage[0x0b] + 0x01;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = temp2;\n                    var temp5 = memory[0x40:0x60];\n                    var temp6 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x0f36:0x0f56];\n                    var temp7 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp6;\n                    log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [memory[0x00:0x20], 0x00, msg.sender]);\n                    return;\n                } else {\n                    var temp8 = arg0;\n                    storage[0x05] = temp8 + storage[0x05];\n                    var temp9 = msg.sender;\n                    memory[0x00:0x20] = temp9;\n                    memory[0x20:0x40] = 0x06;\n                    var temp10 = keccak256(memory[0x00:0x40]);\n                    storage[temp10] = temp8 + storage[temp10];\n                    memory[0x20:0x40] = 0x08;\n                    var temp11 = keccak256(memory[0x00:0x40]);\n                    storage[temp11] = msg.value + storage[temp11];\n                    storage[0x0b] = storage[0x0b] + 0x01;\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = temp8;\n                    var temp13 = memory[0x40:0x60];\n                    var temp14 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x0f36:0x0f56];\n                    var temp15 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp14;\n                    log(memory[temp13:temp13 + temp12 - temp13 + 0x20], [memory[0x00:0x20], 0x00, msg.sender]);\n                    return;\n                }\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function getExchangeRate() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (storage[0x01] + 0x015180 > block.timestamp) { return 0x3a98; }\n    \n        var1 = 0x64 - storage[0x05] / 0x989680 / 0x0de0b6b3a7640000;\n    \n        if (var1 >= 0x46) { return (var1 * 0x2710) / 0x64; }\n        else { return (0x46 * 0x2710) / 0x64; }\n    }\n    \n    function ICOopen() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] & 0xff)) {\n            var0 = 0x00;\n            goto label_0780;\n        } else if (block.timestamp < storage[0x01]) {\n            var0 = 0x00;\n            goto label_0780;\n        } else if (block.timestamp > storage[0x02]) {\n            var0 = 0x00;\n            goto label_0780;\n        } else if (0x033b2e3c9fd0803ce8000000 > storage[0x04]) {\n            var0 = 0x01;\n        \n        label_0780:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0780;\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x0c;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4c616e63657220546f6b656e0000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] & 0xff)) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x00;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function fundingEnd() returns (var r0) { return storage[0x02]; }\n    \n    function EtherBalanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x04]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] & 0xff)) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x06;\n            var var1 = storage[keccak256(memory[0x00:0x40])] < arg2;\n        \n            if (storage[keccak256(memory[0x00:0x40])] < arg2) {\n                var temp13 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg0 & temp13;\n                memory[0x20:0x40] = 0x00;\n                var temp14 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = temp13 & msg.sender;\n                memory[0x20:0x40] = temp14;\n                var1 = storage[keccak256(memory[0x00:0x40])] >= arg2;\n            \n                if (!var1) { goto label_08CF; }\n                else { goto label_08CA; }\n            } else if (!var1) {\n            label_08CF:\n            \n                if (!var1) {\n                label_08F4:\n                \n                    if (!var1) {\n                    label_096E:\n                        return 0x00;\n                    } else {\n                    label_08FA:\n                        var temp0 = 0x02 ** 0xa0 - 0x01;\n                        var temp1 = arg0 & temp0;\n                        memory[0x00:0x20] = temp1;\n                        memory[0x20:0x40] = 0x06;\n                        var temp2 = keccak256(memory[0x00:0x40]);\n                        var temp3 = arg2;\n                        storage[temp2] = storage[temp2] - temp3;\n                        memory[0x20:0x40] = 0x00;\n                        var temp4 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = temp0 & msg.sender;\n                        memory[0x20:0x40] = temp4;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        storage[temp5] = storage[temp5] - temp3;\n                        var temp6 = arg1 & temp0;\n                        memory[0x00:0x20] = temp6;\n                        memory[0x20:0x40] = 0x06;\n                        var temp7 = keccak256(memory[0x00:0x40]);\n                        storage[temp7] = temp3 + storage[temp7];\n                        var temp8 = memory[0x40:0x60];\n                        memory[temp8:temp8 + 0x20] = temp3;\n                        var temp9 = memory[0x40:0x60];\n                        var temp10 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x0f36:0x0f56];\n                        var temp11 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp10;\n                        log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [memory[0x00:0x20], stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                        return 0x01;\n                    }\n                } else {\n                label_08D6:\n                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x06;\n                    var temp12 = storage[keccak256(memory[0x00:0x40])];\n                \n                    if (temp12 + arg2 <= temp12) { goto label_096E; }\n                    else { goto label_08FA; }\n                }\n            } else {\n            label_08CA:\n                var1 = arg2 > 0x00;\n            \n                if (!var1) { goto label_08F4; }\n                else { goto label_08D6; }\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function getAmountSoldAfterPowerDay() returns (var r0) { return storage[0x05]; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function migrate(var arg0) {\n        if (storage[0x03] & 0xff) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (!(storage[0x09] & 0x02 ** 0xa0 - 0x01)) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (arg0) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n        \n            if (arg0 <= storage[keccak256(memory[0x00:0x40])]) {\n                var temp0 = 0x02 ** 0xa0 - 0x01;\n                var temp1 = temp0 & msg.sender;\n                memory[0x00:0x20] = temp1;\n                memory[0x20:0x40] = 0x06;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                var temp3 = arg0;\n                storage[temp2] = storage[temp2] - temp3;\n                storage[0x04] = storage[0x04] - temp3;\n                storage[0x0a] = temp3 + storage[0x0a];\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x7a3130e300000000000000000000000000000000000000000000000000000000;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = temp1;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = temp3;\n                var var0 = temp0 & storage[0x09];\n                var var4 = memory[0x40:0x60];\n                var var1 = 0x7a3130e3;\n                var var2 = temp4 + 0x44;\n                var var3 = 0x00;\n                var var5 = temp4 - var4 + 0x44;\n                var var6 = var4;\n                var var7 = var3;\n                var var8 = var0;\n            \n                if (!address(var8).code.length) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp5;\n                    temp5, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x32).value(var7)(memory[var6:var6 + var5]);\n                \n                    if (!temp5) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = arg0;\n                        var temp7 = memory[0x40:0x60];\n                        var temp8 = 0x02 ** 0xa0 - 0x01;\n                        log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x18df02dcc52b9c494f391df09661519c0069bd8540141946280399408205ca1a, msg.sender, storage[0x09] & 0x02 ** 0xa0 - 0x01]);\n                        return;\n                    }\n                }\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function finalize() {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[0x03] & 0xff) {\n            var var2 = block.timestamp <= storage[0x02];\n        \n            if (!var2) {\n                var2 = storage[0x04] < 0x7c13bc4b2c133c56000000;\n            \n                if (!var2) { goto label_0B18; }\n                else { goto label_0AFA; }\n            } else if (!var2) {\n            label_0B18:\n            \n                if (!var2) {\n                label_0B22:\n                    var temp0 = storage[0x03] & ~0xff;\n                    storage[0x03] = temp0;\n                    var temp1 = storage[0x04];\n                    var temp2 = (temp1 * 0x0c) / 0x58;\n                    storage[0x04] = temp2 + temp1;\n                    var temp3 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp3 & temp0 / 0x0100;\n                    memory[0x20:0x40] = 0x06;\n                    var temp4 = keccak256(memory[0x00:0x40]);\n                    storage[temp4] = temp2 + storage[temp4];\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = temp2;\n                    var temp6 = memory[0x40:0x60];\n                    var0 = 0x0c;\n                    var1 = temp2;\n                    var temp7 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x0f36:0x0f56];\n                    var temp8 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp7;\n                    log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [memory[0x00:0x20], 0x00, storage[0x03] / 0x0100 & 0x02 ** 0xa0 - 0x01]);\n                    var temp9 = memory[0x40:0x60];\n                    var temp10 = 0x02 ** 0xa0 - 0x01;\n                    var temp11 = address(address(this) & temp10).balance;\n                    var temp12;\n                    temp12, memory[temp9:temp9 + 0x00] = address(temp10 & storage[0x03] / 0x0100).call.gas(!temp11 * 0x08fc).value(temp11)(memory[temp9:temp9 + 0x00]);\n                \n                    if (temp12) { return; }\n                \n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                label_0B1E:\n                    main();\n                    // Error: Could not resolve method call return address!\n                }\n            } else {\n            label_0AFA:\n            \n                if (storage[0x04] + 0x010f0cf064dd59200000 >= 0x033b2e3c9fd0803ce8000000) { goto label_0B22; }\n                else { goto label_0B1E; }\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function refund() {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(storage[0x03] & 0xff)) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (block.timestamp <= storage[0x02]) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (storage[0x04] < 0x7c13bc4b2c133c56000000) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n            var temp0 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x20:0x40] = 0x08;\n            var0 = temp0;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var0) {\n                var temp1 = msg.sender;\n                memory[0x00:0x20] = temp1;\n                memory[0x20:0x40] = 0x06;\n                storage[keccak256(memory[0x00:0x40])] = 0x00;\n                memory[0x20:0x40] = 0x08;\n                storage[keccak256(memory[0x00:0x40])] = 0x00;\n                storage[0x04] = storage[0x04] - var0;\n                var temp2 = memory[0x40:0x60];\n                var temp3 = var1;\n                memory[temp2:temp2 + 0x20] = temp3;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + temp2 - temp4 + 0x20], [0xbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d, msg.sender]);\n                var temp5 = memory[0x40:0x60];\n                var temp6;\n                temp6, memory[temp5:temp5 + 0x00] = address(msg.sender).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp5:temp5 + 0x00]);\n            \n                if (temp6) { return; }\n            \n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function tokenCreationCap() returns (var r0) { return 0x033b2e3c9fd0803ce8000000; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function setMigrationAgent(var arg0) {\n        if (storage[0x03] & 0xff) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (!(storage[0x09] & 0x02 ** 0xa0 - 0x01)) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[0x03] / 0x0100 & temp0 == temp0 & msg.sender) {\n                storage[0x09] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x09] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                return;\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function migrationAgent() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function TimeLeftBeforeCrowdsale() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x01] <= block.timestamp) {\n            var0 = 0x00;\n        \n        label_0780:\n            return var0;\n        } else {\n            var0 = storage[0x01] - block.timestamp;\n            goto label_0780;\n        }\n    }\n    \n    function totalMigrated() returns (var r0) { return storage[0x0a]; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4c4e430000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(storage[0x03] & 0xff)) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = var1 >= arg1;\n        \n            if (var1 >= arg1) {\n                if (!var2) {\n                label_0EA1:\n                    return 0x00;\n                } else {\n                label_0E36:\n                    var temp0 = 0x02 ** 0xa0 - 0x01;\n                    var temp1 = temp0 & msg.sender;\n                    memory[0x00:0x20] = temp1;\n                    memory[0x20:0x40] = 0x06;\n                    var temp2 = arg1;\n                    var temp3 = var1 - temp2;\n                    var1 = temp3;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var temp4 = arg0 & temp0;\n                    memory[0x00:0x20] = temp4;\n                    var temp5 = keccak256(memory[0x00:0x40]);\n                    storage[temp5] = temp2 + storage[temp5];\n                    memory[0x00:0x20] = temp1;\n                    memory[0x20:0x40] = 0x07;\n                    storage[keccak256(memory[0x00:0x40])] = block.timestamp;\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = temp2;\n                    var temp7 = memory[0x40:0x60];\n                    var temp8 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x0f36:0x0f56];\n                    var temp9 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp8;\n                    log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n                    return 0x01;\n                }\n            } else if (arg1 <= 0x00) { goto label_0EA1; }\n            else { goto label_0E36; }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function fundingStart() returns (var r0) { return storage[0x01]; }\n    \n    function tokenCreationMin() returns (var r0) { return 0x7c13bc4b2c133c56000000; }\n    \n    function funding() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function getAmountofTotalParticipants() returns (var r0) { return storage[0x0b]; }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x00;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function TimeLeft() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x02] <= block.timestamp) {\n            var0 = 0x00;\n        \n        label_0780:\n            return var0;\n        } else {\n            var0 = storage[0x02] - block.timestamp;\n            goto label_0780;\n        }\n    }\n    \n    function master() returns (var r0) { return storage[0x03] / 0x0100 & 0x02 ** 0xa0 - 0x01; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n    label_0000:\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_014E:\n            var var0 = 0x0242;\n            var var1 = 0x00;\n        \n            if (storage[0x03] & 0xff) {\n                func_0166(var1);\n                stop();\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x01afebac) {\n                // Dispatch table entry for ICOopen()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0251;\n                    var1 = ICOopen();\n                \n                label_0251:\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = !!var1;\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n                }\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0272;\n                    var var2 = name();\n                \n                label_0272:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = 0x20;\n                    var temp3 = var2;\n                    memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n                    var var3 = temp2;\n                    var var4 = var3;\n                    var var5 = var4 + 0x40;\n                    var var6 = temp3 + 0x20;\n                    var var7 = memory[temp3:temp3 + 0x20];\n                    var var8 = var7;\n                    var var9 = var5;\n                    var var10 = var6;\n                \n                    if (!var8) {\n                    label_02B8:\n                        var temp4 = var7;\n                        var5 = temp4 + var5;\n                        var6 = temp4 & 0x1f;\n                    \n                        if (!var6) {\n                            var temp5 = memory[0x40:0x60];\n                            return memory[temp5:temp5 + var5 - temp5];\n                        } else {\n                            var temp6 = var6;\n                            var temp7 = var5 - temp6;\n                            memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                            var temp8 = memory[0x40:0x60];\n                            return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                        }\n                    } else {\n                    label_0298:\n                        memory[var9:var9 + 0x20] = memory[var10:var10 + 0x20];\n                    \n                        if (var8 <= 0x20) { goto label_02B8; }\n                    \n                        var8 = var8 + ~0x1f;\n                        var9 = var9 + 0x20;\n                        var10 = var10 + 0x20;\n                        goto label_0298;\n                    }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0251;\n                    var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                    var3 = msg.data[0x24:0x44];\n                    var1 = approve(var2, var3);\n                    goto label_0251;\n                }\n            } else if (var0 == 0x13e7323e) {\n                // Dispatch table entry for fundingEnd()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = fundingEnd();\n                \n                label_032F:\n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = var2;\n                    var temp10 = memory[0x40:0x60];\n                    return memory[temp10:temp10 + temp9 - temp10 + 0x20];\n                }\n            } else if (var0 == 0x14c0bc27) {\n                // Dispatch table entry for EtherBalanceOf(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                    var1 = EtherBalanceOf(var2);\n                    goto label_032F;\n                }\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = totalSupply();\n                    goto label_032F;\n                }\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0251;\n                    var temp11 = 0x02 ** 0xa0 - 0x01;\n                    var2 = temp11 & msg.data[0x04:0x24];\n                    var3 = msg.data[0x24:0x44] & temp11;\n                    var4 = msg.data[0x44:0x64];\n                    var1 = transferFrom(var2, var3, var4);\n                    goto label_0251;\n                }\n            } else if (var0 == 0x2af0ac71) {\n                // Dispatch table entry for getAmountSoldAfterPowerDay()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = getAmountSoldAfterPowerDay();\n                    goto label_032F;\n                }\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x03ed;\n                    var2 = decimals();\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = var2 & 0xff;\n                    var temp13 = memory[0x40:0x60];\n                    return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n                }\n            } else if (var0 == 0x454b0608) {\n                // Dispatch table entry for migrate(uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0242;\n                    var2 = msg.data[0x04:0x24];\n                    migrate(var2);\n                    stop();\n                }\n            } else if (var0 == 0x4bb278f3) {\n                // Dispatch table entry for finalize()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0242;\n                    finalize();\n                    stop();\n                }\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0242;\n                    refund();\n                    stop();\n                }\n            } else if (var0 == 0x6f7920fd) {\n                // Dispatch table entry for tokenCreationCap()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = tokenCreationCap();\n                    goto label_032F;\n                }\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                    var1 = balanceOf(var2);\n                    goto label_032F;\n                }\n            } else if (var0 == 0x75e2ff65) {\n                // Dispatch table entry for setMigrationAgent(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0242;\n                    var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                    setMigrationAgent(var2);\n                    stop();\n                }\n            } else if (var0 == 0x8328dbcd) {\n                // Dispatch table entry for migrationAgent()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x04a5;\n                    var2 = migrationAgent();\n                \n                label_04A5:\n                    var temp14 = memory[0x40:0x60];\n                    memory[temp14:temp14 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                    var temp15 = memory[0x40:0x60];\n                    return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n                }\n            } else if (var0 == 0x8aef91f5) {\n                // Dispatch table entry for TimeLeftBeforeCrowdsale()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = TimeLeftBeforeCrowdsale();\n                    goto label_032F;\n                }\n            } else if (var0 == 0x95a0f5eb) {\n                // Dispatch table entry for totalMigrated()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = totalMigrated();\n                    goto label_032F;\n                }\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0272;\n                    var2 = symbol();\n                    goto label_0272;\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0251;\n                    var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                    var3 = msg.data[0x24:0x44];\n                    var1 = transfer(var2, var3);\n                    goto label_0251;\n                }\n            } else if (var0 == 0xbcde18f1) {\n                // Dispatch table entry for fundingStart()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = fundingStart();\n                    goto label_032F;\n                }\n            } else if (var0 == 0xc039daf6) {\n                // Dispatch table entry for tokenCreationMin()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var2 = tokenCreationMin();\n                    goto label_032F;\n                }\n            } else if (var0 == 0xcb4c86b7) {\n                // Dispatch table entry for funding()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0251;\n                    var2 = funding();\n                    goto label_0251;\n                }\n            } else if (var0 == 0xdc132be8) {\n                // Dispatch table entry for getAmountofTotalParticipants()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = getAmountofTotalParticipants();\n                    goto label_032F;\n                }\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var temp16 = 0x02 ** 0xa0 - 0x01;\n                    var2 = temp16 & msg.data[0x04:0x24];\n                    var3 = msg.data[0x24:0x44] & temp16;\n                    var1 = allowance(var2, var3);\n                    goto label_032F;\n                }\n            } else if (var0 == 0xde824f93) {\n                // Dispatch table entry for TimeLeft()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = TimeLeft();\n                    goto label_032F;\n                }\n            } else if (var0 == 0xe6aa216c) {\n                // Dispatch table entry for getExchangeRate()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x032f;\n                    var1 = getExchangeRate();\n                    goto label_032F;\n                }\n            } else if (var0 == 0xee97f7f3) {\n                // Dispatch table entry for master()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x04a5;\n                    var2 = master();\n                    goto label_04A5;\n                }\n            } else { goto label_014E; }\n        }\n    }\n    \n    function func_0166(var arg0) {\n        if (block.timestamp < storage[0x01]) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (block.timestamp > storage[0x02]) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (msg.value) {\n            var var0 = 0x033b2e3c9fd0803ce8000000 - storage[0x04];\n            var var1 = 0x01a9;\n            var1 = getExchangeRate();\n        \n            if (msg.value * var1 <= var0) {\n                var0 = 0x01be;\n                var0 = getExchangeRate();\n                storage[0x04] = msg.value * var0 + storage[0x04];\n                arg0 = msg.value * var0;\n                var0 = 0x01d6;\n                var0 = getExchangeRate();\n            \n                if (var0 == 0x3a98) {\n                    var temp0 = msg.sender;\n                    memory[0x00:0x20] = temp0;\n                    memory[0x20:0x40] = 0x06;\n                    var temp1 = keccak256(memory[0x00:0x40]);\n                    var temp2 = arg0;\n                    storage[temp1] = temp2 + storage[temp1];\n                    memory[0x20:0x40] = 0x08;\n                    var temp3 = keccak256(memory[0x00:0x40]);\n                    storage[temp3] = msg.value + storage[temp3];\n                    storage[0x0b] = storage[0x0b] + 0x01;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = temp2;\n                    var temp5 = memory[0x40:0x60];\n                    var temp6 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x0f36:0x0f56];\n                    var temp7 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp6;\n                    log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [memory[0x00:0x20], 0x00, msg.sender]);\n                    return;\n                } else {\n                    var temp8 = arg0;\n                    storage[0x05] = temp8 + storage[0x05];\n                    var temp9 = msg.sender;\n                    memory[0x00:0x20] = temp9;\n                    memory[0x20:0x40] = 0x06;\n                    var temp10 = keccak256(memory[0x00:0x40]);\n                    storage[temp10] = temp8 + storage[temp10];\n                    memory[0x20:0x40] = 0x08;\n                    var temp11 = keccak256(memory[0x00:0x40]);\n                    storage[temp11] = msg.value + storage[temp11];\n                    storage[0x0b] = storage[0x0b] + 0x01;\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = temp8;\n                    var temp13 = memory[0x40:0x60];\n                    var temp14 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x0f36:0x0f56];\n                    var temp15 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp14;\n                    log(memory[temp13:temp13 + temp12 - temp13 + 0x20], [memory[0x00:0x20], 0x00, msg.sender]);\n                    return;\n                }\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function getExchangeRate() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (storage[0x01] + 0x015180 > block.timestamp) { return 0x3a98; }\n    \n        var1 = 0x64 - storage[0x05] / 0x989680 / 0x0de0b6b3a7640000;\n    \n        if (var1 >= 0x46) { return (var1 * 0x2710) / 0x64; }\n        else { return (0x46 * 0x2710) / 0x64; }\n    }\n    \n    function ICOopen() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] & 0xff)) {\n            var0 = 0x00;\n            goto label_0780;\n        } else if (block.timestamp < storage[0x01]) {\n            var0 = 0x00;\n            goto label_0780;\n        } else if (block.timestamp > storage[0x02]) {\n            var0 = 0x00;\n            goto label_0780;\n        } else if (0x033b2e3c9fd0803ce8000000 > storage[0x04]) {\n            var0 = 0x01;\n        \n        label_0780:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0780;\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x0c;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4c616e63657220546f6b656e0000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] & 0xff)) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x00;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function fundingEnd() returns (var r0) { return storage[0x02]; }\n    \n    function EtherBalanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x04]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] & 0xff)) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x06;\n            var var1 = storage[keccak256(memory[0x00:0x40])] < arg2;\n        \n            if (storage[keccak256(memory[0x00:0x40])] < arg2) {\n                var temp13 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg0 & temp13;\n                memory[0x20:0x40] = 0x00;\n                var temp14 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = temp13 & msg.sender;\n                memory[0x20:0x40] = temp14;\n                var1 = storage[keccak256(memory[0x00:0x40])] >= arg2;\n            \n                if (!var1) { goto label_08CF; }\n                else { goto label_08CA; }\n            } else if (!var1) {\n            label_08CF:\n            \n                if (!var1) {\n                label_08F4:\n                \n                    if (!var1) {\n                    label_096E:\n                        return 0x00;\n                    } else {\n                    label_08FA:\n                        var temp0 = 0x02 ** 0xa0 - 0x01;\n                        var temp1 = arg0 & temp0;\n                        memory[0x00:0x20] = temp1;\n                        memory[0x20:0x40] = 0x06;\n                        var temp2 = keccak256(memory[0x00:0x40]);\n                        var temp3 = arg2;\n                        storage[temp2] = storage[temp2] - temp3;\n                        memory[0x20:0x40] = 0x00;\n                        var temp4 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = temp0 & msg.sender;\n                        memory[0x20:0x40] = temp4;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        storage[temp5] = storage[temp5] - temp3;\n                        var temp6 = arg1 & temp0;\n                        memory[0x00:0x20] = temp6;\n                        memory[0x20:0x40] = 0x06;\n                        var temp7 = keccak256(memory[0x00:0x40]);\n                        storage[temp7] = temp3 + storage[temp7];\n                        var temp8 = memory[0x40:0x60];\n                        memory[temp8:temp8 + 0x20] = temp3;\n                        var temp9 = memory[0x40:0x60];\n                        var temp10 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x0f36:0x0f56];\n                        var temp11 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp10;\n                        log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [memory[0x00:0x20], stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                        return 0x01;\n                    }\n                } else {\n                label_08D6:\n                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x06;\n                    var temp12 = storage[keccak256(memory[0x00:0x40])];\n                \n                    if (temp12 + arg2 <= temp12) { goto label_096E; }\n                    else { goto label_08FA; }\n                }\n            } else {\n            label_08CA:\n                var1 = arg2 > 0x00;\n            \n                if (!var1) { goto label_08F4; }\n                else { goto label_08D6; }\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function getAmountSoldAfterPowerDay() returns (var r0) { return storage[0x05]; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function migrate(var arg0) {\n        if (storage[0x03] & 0xff) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (!(storage[0x09] & 0x02 ** 0xa0 - 0x01)) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (arg0) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n        \n            if (arg0 <= storage[keccak256(memory[0x00:0x40])]) {\n                var temp0 = 0x02 ** 0xa0 - 0x01;\n                var temp1 = temp0 & msg.sender;\n                memory[0x00:0x20] = temp1;\n                memory[0x20:0x40] = 0x06;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                var temp3 = arg0;\n                storage[temp2] = storage[temp2] - temp3;\n                storage[0x04] = storage[0x04] - temp3;\n                storage[0x0a] = temp3 + storage[0x0a];\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x7a3130e300000000000000000000000000000000000000000000000000000000;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = temp1;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = temp3;\n                var var0 = temp0 & storage[0x09];\n                var var4 = memory[0x40:0x60];\n                var var1 = 0x7a3130e3;\n                var var2 = temp4 + 0x44;\n                var var3 = 0x00;\n                var var5 = temp4 - var4 + 0x44;\n                var var6 = var4;\n                var var7 = var3;\n                var var8 = var0;\n            \n                if (!address(var8).code.length) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp5;\n                    temp5, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x32).value(var7)(memory[var6:var6 + var5]);\n                \n                    if (!temp5) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = arg0;\n                        var temp7 = memory[0x40:0x60];\n                        var temp8 = 0x02 ** 0xa0 - 0x01;\n                        log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x18df02dcc52b9c494f391df09661519c0069bd8540141946280399408205ca1a, msg.sender, storage[0x09] & 0x02 ** 0xa0 - 0x01]);\n                        return;\n                    }\n                }\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function finalize() {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[0x03] & 0xff) {\n            var var2 = block.timestamp <= storage[0x02];\n        \n            if (!var2) {\n                var2 = storage[0x04] < 0x7c13bc4b2c133c56000000;\n            \n                if (!var2) { goto label_0B18; }\n                else { goto label_0AFA; }\n            } else if (!var2) {\n            label_0B18:\n            \n                if (!var2) {\n                label_0B22:\n                    var temp0 = storage[0x03] & ~0xff;\n                    storage[0x03] = temp0;\n                    var temp1 = storage[0x04];\n                    var temp2 = (temp1 * 0x0c) / 0x58;\n                    storage[0x04] = temp2 + temp1;\n                    var temp3 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp3 & temp0 / 0x0100;\n                    memory[0x20:0x40] = 0x06;\n                    var temp4 = keccak256(memory[0x00:0x40]);\n                    storage[temp4] = temp2 + storage[temp4];\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = temp2;\n                    var temp6 = memory[0x40:0x60];\n                    var0 = 0x0c;\n                    var1 = temp2;\n                    var temp7 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x0f36:0x0f56];\n                    var temp8 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp7;\n                    log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [memory[0x00:0x20], 0x00, storage[0x03] / 0x0100 & 0x02 ** 0xa0 - 0x01]);\n                    var temp9 = memory[0x40:0x60];\n                    var temp10 = 0x02 ** 0xa0 - 0x01;\n                    var temp11 = address(address(this) & temp10).balance;\n                    var temp12;\n                    temp12, memory[temp9:temp9 + 0x00] = address(temp10 & storage[0x03] / 0x0100).call.gas(!temp11 * 0x08fc).value(temp11)(memory[temp9:temp9 + 0x00]);\n                \n                    if (temp12) { return; }\n                \n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                label_0B1E:\n                    main();\n                    // Error: Could not resolve method call return address!\n                }\n            } else {\n            label_0AFA:\n            \n                if (storage[0x04] + 0x010f0cf064dd59200000 >= 0x033b2e3c9fd0803ce8000000) { goto label_0B22; }\n                else { goto label_0B1E; }\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function refund() {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(storage[0x03] & 0xff)) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (block.timestamp <= storage[0x02]) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (storage[0x04] < 0x7c13bc4b2c133c56000000) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n            var temp0 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x20:0x40] = 0x08;\n            var0 = temp0;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var0) {\n                var temp1 = msg.sender;\n                memory[0x00:0x20] = temp1;\n                memory[0x20:0x40] = 0x06;\n                storage[keccak256(memory[0x00:0x40])] = 0x00;\n                memory[0x20:0x40] = 0x08;\n                storage[keccak256(memory[0x00:0x40])] = 0x00;\n                storage[0x04] = storage[0x04] - var0;\n                var temp2 = memory[0x40:0x60];\n                var temp3 = var1;\n                memory[temp2:temp2 + 0x20] = temp3;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + temp2 - temp4 + 0x20], [0xbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d, msg.sender]);\n                var temp5 = memory[0x40:0x60];\n                var temp6;\n                temp6, memory[temp5:temp5 + 0x00] = address(msg.sender).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp5:temp5 + 0x00]);\n            \n                if (temp6) { return; }\n            \n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function tokenCreationCap() returns (var r0) { return 0x033b2e3c9fd0803ce8000000; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function setMigrationAgent(var arg0) {\n        if (storage[0x03] & 0xff) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (!(storage[0x09] & 0x02 ** 0xa0 - 0x01)) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[0x03] / 0x0100 & temp0 == temp0 & msg.sender) {\n                storage[0x09] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x09] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                return;\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function migrationAgent() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function TimeLeftBeforeCrowdsale() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x01] <= block.timestamp) {\n            var0 = 0x00;\n        \n        label_0780:\n            return var0;\n        } else {\n            var0 = storage[0x01] - block.timestamp;\n            goto label_0780;\n        }\n    }\n    \n    function totalMigrated() returns (var r0) { return storage[0x0a]; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4c4e430000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(storage[0x03] & 0xff)) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = var1 >= arg1;\n        \n            if (var1 >= arg1) {\n                if (!var2) {\n                label_0EA1:\n                    return 0x00;\n                } else {\n                label_0E36:\n                    var temp0 = 0x02 ** 0xa0 - 0x01;\n                    var temp1 = temp0 & msg.sender;\n                    memory[0x00:0x20] = temp1;\n                    memory[0x20:0x40] = 0x06;\n                    var temp2 = arg1;\n                    var temp3 = var1 - temp2;\n                    var1 = temp3;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var temp4 = arg0 & temp0;\n                    memory[0x00:0x20] = temp4;\n                    var temp5 = keccak256(memory[0x00:0x40]);\n                    storage[temp5] = temp2 + storage[temp5];\n                    memory[0x00:0x20] = temp1;\n                    memory[0x20:0x40] = 0x07;\n                    storage[keccak256(memory[0x00:0x40])] = block.timestamp;\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = temp2;\n                    var temp7 = memory[0x40:0x60];\n                    var temp8 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x0f36:0x0f56];\n                    var temp9 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp8;\n                    log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n                    return 0x01;\n                }\n            } else if (arg1 <= 0x00) { goto label_0EA1; }\n            else { goto label_0E36; }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function fundingStart() returns (var r0) { return storage[0x01]; }\n    \n    function tokenCreationMin() returns (var r0) { return 0x7c13bc4b2c133c56000000; }\n    \n    function funding() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function getAmountofTotalParticipants() returns (var r0) { return storage[0x0b]; }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x00;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function TimeLeft() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x02] <= block.timestamp) {\n            var0 = 0x00;\n        \n        label_0780:\n            return var0;\n        } else {\n            var0 = storage[0x02] - block.timestamp;\n            goto label_0780;\n        }\n    }\n    \n    function master() returns (var r0) { return storage[0x03] / 0x0100 & 0x02 ** 0xa0 - 0x01; }\n}\n\n.",
	"status": "1",
	"time_cost": 34.95618963241577,
	"usage": {
		"completion_tokens": 408,
		"prompt_tokens": 10256,
		"total_tokens": 10664
	}
}