{
	"address": "0x925b8c327d0065827977d08f8009dba33ad9f450",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The following is a Solidity contract that corresponds to the decompiled code provided.\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ncontract Token {\n    uint256 public _totalSupply;\n    uint256 public _blnpereth;\n    uint256 public _bounty;\n    mapping (address => uint256) public _balances;\n    mapping (address => mapping (address => uint256)) public _allowances;\n    uint8 public _sale;\n    uint8 public _referral;\n    address public _supplier;\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function name() public pure returns (string memory) { \n        // Assume \"Token\" as a name\n        return \"Token\";\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowances[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function setblnpereth(uint256 value) public {\n        require(msg.sender == _supplier, \"Only supplier can set value\");\n        _blnpereth = value;\n    }\n\n    function referral() public view returns (uint8) {\n        return _referral;\n    }\n\n    function totalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(block.timestamp < 0x59923980 || from != _supplier, \"Invalid transfer\");\n        require(_balances[from] >= value, \"Insufficient balance\");\n        require(_allowances[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(_balances[to] + value >= _balances[to], \"Overflow error\");\n        _balances[from] -= value;\n        _allowances[from][msg.sender] -= value;\n        _balances[to] += value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function balances(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function blnpereth() public view returns (uint256) { \n        return _blnpereth;\n    }\n\n    function decimals() public pure returns (uint8) { \n        return 18;\n    }\n\n    function supplier() public view returns (address) { \n        return _supplier;\n    }\n\n    function setbounty(uint256 value) public { \n        require(msg.sender == _supplier, \"Only supplier can set value\");\n        _bounty = value;\n    }\n\n    function claimSale() public {\n        // This function call is not clear from decompiled code\n    }\n\n    function sale() public view returns (uint8) { \n        return _sale;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(block.timestamp < 0x59923980 || msg.sender != _supplier, \"Invalid transfer\");\n        require(_balances[msg.sender] >= value, \"Insufficient balance\");\n        require(_balances[to] + value >= _balances[to], \"Overflow error\");\n        _balances[msg.sender] -= value;\n        _balances[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferSupply(address to) public { \n        require(msg.sender == _supplier, \"Only supplier can transfer supply\");\n        require(_balances[to] + _balances[_supplier] >= _balances[to], \"Overflow error\");\n        _balances[to] += _balances[_supplier];\n        _balances[_supplier] = 0;\n        emit Transfer(_supplier, to, _balances[_supplier]);\n        _supplier = to;\n    }\n\n    function triggerSale(bool status) public { \n        require(msg.sender == _supplier, \"Only supplier can trigger sale\");\n        _sale = status ? 1 : 0;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) { \n        return _allowances[owner][spender];\n    }\n\n    function symbol() public pure returns (string memory) {\n        // Assume \"TKN\" as a symbol\n        return \"TKN\";\n    }\n}\n```\n\nPlease note that some functions are not clear from the decompiled code, so they are left as placeholders. The `name` and `symbol` functions are assumed to return hardcoded string values \"Token\" and \"TKN\", respectively. The `decimals` function is assumed to return a hardcoded value of 18. The `claimSale` function is left as a placeholder, as its functionality is not clear from the decompiled code. The `referral` function is also left as a placeholder, as its functionality is not clear from the decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701462175,
	"id": "chatcmpl-8R4KF8J7tJQQyosOEtm5vHBDAsXkD",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.12 18:44 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nuint256 _blnpereth; // STORAGE[0x2]\nuint256 _bounty; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balances; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint8 _sale; // STORAGE[0x4] bytes 0 to 0\nuint8 _referral; // STORAGE[0x4] bytes 1 to 1\naddress _supplier; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction name() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (6) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction setblnpereth(uint256 varg0) public payable { \n    assert(!msg.value);\n    require(msg.sender == _supplier);\n    _blnpereth = varg0;\n}\n\nfunction referral() public payable { \n    assert(!msg.value);\n    return _referral;\n}\n\nfunction totalSupply() public payable { \n    assert(!msg.value);\n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    v0 = v1 = block.timestamp < 0x59923980;\n    if (v1) {\n        v0 = varg0 != _supplier;\n    }\n    require(!v0);\n    require(_balances[varg0] >= varg2);\n    require(_allowance[msg.sender] >= varg2);\n    require(_balances[varg1] + varg2 >= _balances[varg1]);\n    _balances[varg0] = _balances[varg0] - varg2;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    _allowance[varg1] = _allowance[varg1] + varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction balances(address varg0) public payable { \n    assert(!msg.value);\n    return _balances[varg0];\n}\n\nfunction blnpereth() public payable { \n    assert(!msg.value);\n    return _blnpereth;\n}\n\nfunction decimals() public payable { \n    assert(!msg.value);\n    return 18;\n}\n\nfunction supplier() public payable { \n    assert(!msg.value);\n    return _supplier;\n}\n\nfunction setbounty(uint256 varg0) public payable { \n    assert(!msg.value);\n    require(msg.sender == _supplier);\n    _bounty = varg0;\n}\n\nfunction claimSale() public payable { \n    assert(!msg.value);\n    v0 = 0x400be625f1308a56c19c38b1a21a50fce8c62617.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    assert(v0);\n}\n\nfunction sale() public payable { \n    assert(!msg.value);\n    return _sale;\n}\n\nfunction balanceOf(address varg0) public payable { \n    assert(!msg.value);\n    return _balances[varg0];\n}\n\nfunction referral(address varg0) public payable { \n    require(_sale == 1);\n    require(_referral == 1);\n    require(_balances[varg0] >= 0xc097ce7bc90715b34b9f1000000000);\n    require(_balances[_supplier] >= msg.value * _blnpereth / 100 * (100 + _bounty));\n    require(_balances[msg.sender] + msg.value * _blnpereth / 100 * (100 + _bounty) >= _balances[msg.sender]);\n    _balances[_supplier] = _balances[_supplier] - msg.value * _blnpereth / 100 * (100 + _bounty);\n    _balances[msg.sender] = _balances[msg.sender] + msg.value * _blnpereth / 100 * (100 + _bounty);\n    emit Transfer(_supplier, msg.sender, msg.value * _blnpereth / 100 * (100 + _bounty));\n    require(_balances[_supplier] >= msg.value * _blnpereth / 100 * _bounty);\n    require(_balances[varg0] + msg.value * _blnpereth / 100 * _bounty >= _balances[varg0]);\n    _balances[_supplier] = _balances[_supplier] - msg.value * _blnpereth / 100 * _bounty;\n    _balances[varg0] = _balances[varg0] + msg.value * _blnpereth / 100 * _bounty;\n    emit Transfer(_supplier, varg0, msg.value * _blnpereth / 100 * _bounty);\n}\n\nfunction bounty() public payable { \n    assert(!msg.value);\n    return _bounty;\n}\n\nfunction symbol() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (3) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    v0 = v1 = block.timestamp < 0x59923980;\n    if (v1) {\n        v0 = msg.sender != _supplier;\n    }\n    require(!v0);\n    require(_balances[msg.sender] >= varg1);\n    require(_balances[varg0] + varg1 >= _balances[varg0]);\n    _balances[msg.sender] = _balances[msg.sender] - varg1;\n    _balances[varg0] = _balances[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction transferSupply(address varg0) public payable { \n    assert(!msg.value);\n    require(msg.sender == _supplier);\n    require(_balances[varg0] + _balances[_supplier] >= _balances[varg0]);\n    _balances[varg0] = _balances[varg0] + _balances[_supplier];\n    _balances[_supplier] = _balances[_supplier] - _balances[_supplier];\n    emit Transfer(_supplier, varg0, _balances[_supplier]);\n    _supplier = varg0;\n}\n\nfunction triggerSale(bool varg0) public payable { \n    assert(!msg.value);\n    require(msg.sender == _supplier);\n    _sale = varg0;\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    assert(!msg.value);\n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x12892b7f == function_selector) {\n            setblnpereth(uint256);\n        } else if (0x1441a5a9 == function_selector) {\n            referral();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x27e235e3 == function_selector) {\n            balances(address);\n        } else if (0x2d9b4ab7 == function_selector) {\n            blnpereth();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x36da4468 == function_selector) {\n            supplier();\n        } else if (0x4198e94d == function_selector) {\n            setbounty(uint256);\n        } else if (0x454dfaaf == function_selector) {\n            claimSale();\n        } else if (0x6ad1fe02 == function_selector) {\n            sale();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7247959a == function_selector) {\n            referral(address);\n        } else if (0x943dfef1 == function_selector) {\n            bounty();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb43d4851 == function_selector) {\n            transferSupply(address);\n        } else if (0xd40224ec == function_selector) {\n            triggerSale(bool);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    require(_sale == 1);\n    require(_balances[_supplier] >= msg.value * _blnpereth);\n    require(_balances[msg.sender] + msg.value * _blnpereth >= _balances[msg.sender]);\n    _balances[_supplier] = _balances[_supplier] - msg.value * _blnpereth;\n    _balances[msg.sender] = _balances[msg.sender] + msg.value * _blnpereth;\n    emit Transfer(_supplier, msg.sender, msg.value * _blnpereth);\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.12 18:44 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nuint256 _blnpereth; // STORAGE[0x2]\nuint256 _bounty; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balances; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint8 _sale; // STORAGE[0x4] bytes 0 to 0\nuint8 _referral; // STORAGE[0x4] bytes 1 to 1\naddress _supplier; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction name() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (6) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction setblnpereth(uint256 varg0) public payable { \n    assert(!msg.value);\n    require(msg.sender == _supplier);\n    _blnpereth = varg0;\n}\n\nfunction referral() public payable { \n    assert(!msg.value);\n    return _referral;\n}\n\nfunction totalSupply() public payable { \n    assert(!msg.value);\n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    v0 = v1 = block.timestamp < 0x59923980;\n    if (v1) {\n        v0 = varg0 != _supplier;\n    }\n    require(!v0);\n    require(_balances[varg0] >= varg2);\n    require(_allowance[msg.sender] >= varg2);\n    require(_balances[varg1] + varg2 >= _balances[varg1]);\n    _balances[varg0] = _balances[varg0] - varg2;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    _allowance[varg1] = _allowance[varg1] + varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction balances(address varg0) public payable { \n    assert(!msg.value);\n    return _balances[varg0];\n}\n\nfunction blnpereth() public payable { \n    assert(!msg.value);\n    return _blnpereth;\n}\n\nfunction decimals() public payable { \n    assert(!msg.value);\n    return 18;\n}\n\nfunction supplier() public payable { \n    assert(!msg.value);\n    return _supplier;\n}\n\nfunction setbounty(uint256 varg0) public payable { \n    assert(!msg.value);\n    require(msg.sender == _supplier);\n    _bounty = varg0;\n}\n\nfunction claimSale() public payable { \n    assert(!msg.value);\n    v0 = 0x400be625f1308a56c19c38b1a21a50fce8c62617.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    assert(v0);\n}\n\nfunction sale() public payable { \n    assert(!msg.value);\n    return _sale;\n}\n\nfunction balanceOf(address varg0) public payable { \n    assert(!msg.value);\n    return _balances[varg0];\n}\n\nfunction referral(address varg0) public payable { \n    require(_sale == 1);\n    require(_referral == 1);\n    require(_balances[varg0] >= 0xc097ce7bc90715b34b9f1000000000);\n    require(_balances[_supplier] >= msg.value * _blnpereth / 100 * (100 + _bounty));\n    require(_balances[msg.sender] + msg.value * _blnpereth / 100 * (100 + _bounty) >= _balances[msg.sender]);\n    _balances[_supplier] = _balances[_supplier] - msg.value * _blnpereth / 100 * (100 + _bounty);\n    _balances[msg.sender] = _balances[msg.sender] + msg.value * _blnpereth / 100 * (100 + _bounty);\n    emit Transfer(_supplier, msg.sender, msg.value * _blnpereth / 100 * (100 + _bounty));\n    require(_balances[_supplier] >= msg.value * _blnpereth / 100 * _bounty);\n    require(_balances[varg0] + msg.value * _blnpereth / 100 * _bounty >= _balances[varg0]);\n    _balances[_supplier] = _balances[_supplier] - msg.value * _blnpereth / 100 * _bounty;\n    _balances[varg0] = _balances[varg0] + msg.value * _blnpereth / 100 * _bounty;\n    emit Transfer(_supplier, varg0, msg.value * _blnpereth / 100 * _bounty);\n}\n\nfunction bounty() public payable { \n    assert(!msg.value);\n    return _bounty;\n}\n\nfunction symbol() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (3) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    v0 = v1 = block.timestamp < 0x59923980;\n    if (v1) {\n        v0 = msg.sender != _supplier;\n    }\n    require(!v0);\n    require(_balances[msg.sender] >= varg1);\n    require(_balances[varg0] + varg1 >= _balances[varg0]);\n    _balances[msg.sender] = _balances[msg.sender] - varg1;\n    _balances[varg0] = _balances[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction transferSupply(address varg0) public payable { \n    assert(!msg.value);\n    require(msg.sender == _supplier);\n    require(_balances[varg0] + _balances[_supplier] >= _balances[varg0]);\n    _balances[varg0] = _balances[varg0] + _balances[_supplier];\n    _balances[_supplier] = _balances[_supplier] - _balances[_supplier];\n    emit Transfer(_supplier, varg0, _balances[_supplier]);\n    _supplier = varg0;\n}\n\nfunction triggerSale(bool varg0) public payable { \n    assert(!msg.value);\n    require(msg.sender == _supplier);\n    _sale = varg0;\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    assert(!msg.value);\n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x12892b7f == function_selector) {\n            setblnpereth(uint256);\n        } else if (0x1441a5a9 == function_selector) {\n            referral();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x27e235e3 == function_selector) {\n            balances(address);\n        } else if (0x2d9b4ab7 == function_selector) {\n            blnpereth();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x36da4468 == function_selector) {\n            supplier();\n        } else if (0x4198e94d == function_selector) {\n            setbounty(uint256);\n        } else if (0x454dfaaf == function_selector) {\n            claimSale();\n        } else if (0x6ad1fe02 == function_selector) {\n            sale();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7247959a == function_selector) {\n            referral(address);\n        } else if (0x943dfef1 == function_selector) {\n            bounty();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb43d4851 == function_selector) {\n            transferSupply(address);\n        } else if (0xd40224ec == function_selector) {\n            triggerSale(bool);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    require(_sale == 1);\n    require(_balances[_supplier] >= msg.value * _blnpereth);\n    require(_balances[msg.sender] + msg.value * _blnpereth >= _balances[msg.sender]);\n    _balances[_supplier] = _balances[_supplier] - msg.value * _blnpereth;\n    _balances[msg.sender] = _balances[msg.sender] + msg.value * _blnpereth;\n    emit Transfer(_supplier, msg.sender, msg.value * _blnpereth);\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.12 18:44 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nuint256 _blnpereth; // STORAGE[0x2]\nuint256 _bounty; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balances; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint8 _sale; // STORAGE[0x4] bytes 0 to 0\nuint8 _referral; // STORAGE[0x4] bytes 1 to 1\naddress _supplier; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction name() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (6) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction setblnpereth(uint256 varg0) public payable { \n    assert(!msg.value);\n    require(msg.sender == _supplier);\n    _blnpereth = varg0;\n}\n\nfunction referral() public payable { \n    assert(!msg.value);\n    return _referral;\n}\n\nfunction totalSupply() public payable { \n    assert(!msg.value);\n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    v0 = v1 = block.timestamp < 0x59923980;\n    if (v1) {\n        v0 = varg0 != _supplier;\n    }\n    require(!v0);\n    require(_balances[varg0] >= varg2);\n    require(_allowance[msg.sender] >= varg2);\n    require(_balances[varg1] + varg2 >= _balances[varg1]);\n    _balances[varg0] = _balances[varg0] - varg2;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    _allowance[varg1] = _allowance[varg1] + varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction balances(address varg0) public payable { \n    assert(!msg.value);\n    return _balances[varg0];\n}\n\nfunction blnpereth() public payable { \n    assert(!msg.value);\n    return _blnpereth;\n}\n\nfunction decimals() public payable { \n    assert(!msg.value);\n    return 18;\n}\n\nfunction supplier() public payable { \n    assert(!msg.value);\n    return _supplier;\n}\n\nfunction setbounty(uint256 varg0) public payable { \n    assert(!msg.value);\n    require(msg.sender == _supplier);\n    _bounty = varg0;\n}\n\nfunction claimSale() public payable { \n    assert(!msg.value);\n    v0 = 0x400be625f1308a56c19c38b1a21a50fce8c62617.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    assert(v0);\n}\n\nfunction sale() public payable { \n    assert(!msg.value);\n    return _sale;\n}\n\nfunction balanceOf(address varg0) public payable { \n    assert(!msg.value);\n    return _balances[varg0];\n}\n\nfunction referral(address varg0) public payable { \n    require(_sale == 1);\n    require(_referral == 1);\n    require(_balances[varg0] >= 0xc097ce7bc90715b34b9f1000000000);\n    require(_balances[_supplier] >= msg.value * _blnpereth / 100 * (100 + _bounty));\n    require(_balances[msg.sender] + msg.value * _blnpereth / 100 * (100 + _bounty) >= _balances[msg.sender]);\n    _balances[_supplier] = _balances[_supplier] - msg.value * _blnpereth / 100 * (100 + _bounty);\n    _balances[msg.sender] = _balances[msg.sender] + msg.value * _blnpereth / 100 * (100 + _bounty);\n    emit Transfer(_supplier, msg.sender, msg.value * _blnpereth / 100 * (100 + _bounty));\n    require(_balances[_supplier] >= msg.value * _blnpereth / 100 * _bounty);\n    require(_balances[varg0] + msg.value * _blnpereth / 100 * _bounty >= _balances[varg0]);\n    _balances[_supplier] = _balances[_supplier] - msg.value * _blnpereth / 100 * _bounty;\n    _balances[varg0] = _balances[varg0] + msg.value * _blnpereth / 100 * _bounty;\n    emit Transfer(_supplier, varg0, msg.value * _blnpereth / 100 * _bounty);\n}\n\nfunction bounty() public payable { \n    assert(!msg.value);\n    return _bounty;\n}\n\nfunction symbol() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (3) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    v0 = v1 = block.timestamp < 0x59923980;\n    if (v1) {\n        v0 = msg.sender != _supplier;\n    }\n    require(!v0);\n    require(_balances[msg.sender] >= varg1);\n    require(_balances[varg0] + varg1 >= _balances[varg0]);\n    _balances[msg.sender] = _balances[msg.sender] - varg1;\n    _balances[varg0] = _balances[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction transferSupply(address varg0) public payable { \n    assert(!msg.value);\n    require(msg.sender == _supplier);\n    require(_balances[varg0] + _balances[_supplier] >= _balances[varg0]);\n    _balances[varg0] = _balances[varg0] + _balances[_supplier];\n    _balances[_supplier] = _balances[_supplier] - _balances[_supplier];\n    emit Transfer(_supplier, varg0, _balances[_supplier]);\n    _supplier = varg0;\n}\n\nfunction triggerSale(bool varg0) public payable { \n    assert(!msg.value);\n    require(msg.sender == _supplier);\n    _sale = varg0;\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    assert(!msg.value);\n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x12892b7f == function_selector) {\n            setblnpereth(uint256);\n        } else if (0x1441a5a9 == function_selector) {\n            referral();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x27e235e3 == function_selector) {\n            balances(address);\n        } else if (0x2d9b4ab7 == function_selector) {\n            blnpereth();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x36da4468 == function_selector) {\n            supplier();\n        } else if (0x4198e94d == function_selector) {\n            setbounty(uint256);\n        } else if (0x454dfaaf == function_selector) {\n            claimSale();\n        } else if (0x6ad1fe02 == function_selector) {\n            sale();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7247959a == function_selector) {\n            referral(address);\n        } else if (0x943dfef1 == function_selector) {\n            bounty();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb43d4851 == function_selector) {\n            transferSupply(address);\n        } else if (0xd40224ec == function_selector) {\n            triggerSale(bool);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    require(_sale == 1);\n    require(_balances[_supplier] >= msg.value * _blnpereth);\n    require(_balances[msg.sender] + msg.value * _blnpereth >= _balances[msg.sender]);\n    _balances[_supplier] = _balances[_supplier] - msg.value * _blnpereth;\n    _balances[msg.sender] = _balances[msg.sender] + msg.value * _blnpereth;\n    emit Transfer(_supplier, msg.sender, msg.value * _blnpereth);\n}\n.",
	"status": "1",
	"time_cost": 51.1240348815918,
	"usage": {
		"completion_tokens": 1031,
		"prompt_tokens": 2471,
		"total_tokens": 3502
	}
}