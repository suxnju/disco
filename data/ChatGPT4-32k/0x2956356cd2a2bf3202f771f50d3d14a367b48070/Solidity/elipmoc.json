{
	"address": "0x2956356cd2a2bf3202f771f50d3d14a367b48070",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity version of your decompiled EVM bytecode will look something like this:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor(string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(_allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(_balanceOf[from] >= value, \"Insufficient balance\");\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        _allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function withdraw(uint256 value) public {\n        require(_balanceOf[msg.sender] >= value, \"Insufficient balance\");\n        _balanceOf[msg.sender] -= value;\n        _totalSupply -= value;\n        msg.sender.transfer(value);\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balanceOf[owner];\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(_balanceOf[msg.sender] >= value, \"Insufficient balance\");\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function deposit() public payable {\n        _balanceOf[msg.sender] += msg.value;\n        _totalSupply += msg.value;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n}\n```\n\nThis is a very basic ERC20 token contract. It should function as the original bytecode intended. The contract has functions for managing allowances, balances, and transfers. It also includes a constructor to set the token's name, symbol, and decimals. The contract allows for deposits and withdrawals. In the original bytecode, these functions were represented by hexadecimal function selectors.",
				"role": "assistant"
			}
		}
	],
	"created": 1701455426,
	"id": "chatcmpl-8R2ZO5wKs1hSpuCd9IONn2RKlNDh9",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 13:22 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public payable { \n    assert(!msg.value);\n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    v0 = v1 = _allowance[varg0] >= varg2;\n    if (v1) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg1] + varg2 >= _balanceOf[varg1];\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n        goto 0x93fB0x1dc;\n    } else {\n        _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        if (_allowance[msg.sender] < 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n            _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        }\n        emit Transfer(varg0, varg1, varg2);\n        v3 = v5 = 1;\n    }\n    return v3;\n}\n\nfunction withdraw(uint256 varg0) public payable { \n    assert(!msg.value);\n    v0 = _SafeSub(varg0, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeSub(varg0, _totalSupply);\n    _totalSupply = v1;\n    v2 = msg.sender.call().value(varg0).gas(!varg0 * 2300);\n    require(v2);\n}\n\nfunction decimals() public payable { \n    assert(!msg.value);\n    return 18;\n}\n\nfunction balanceOf(address varg0) public payable { \n    assert(!msg.value);\n    return _balanceOf[varg0];\n}\n\nfunction symbol() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (4) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = _balanceOf[varg0] + varg1 >= _balanceOf[varg0];\n    }\n    if (!v0) {\n        v2 = v3 = 0;\n        goto 0xc9eB0x381;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v2 = 1;\n    }\n    return v2;\n}\n\nfunction deposit() public payable { \n    0x443();\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    assert(!msg.value);\n    return _allowance[varg1];\n}\n\nfunction 0x443() private { \n    v0 = _SafeAdd(msg.value, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(msg.value, _totalSupply);\n    _totalSupply = v1;\n    return ;\n}\n\nfunction name() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (11) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 + varg0;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xd0e30db0 == function_selector) {\n            deposit();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    0x443();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 13:22 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public payable { \n    assert(!msg.value);\n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    v0 = v1 = _allowance[varg0] >= varg2;\n    if (v1) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg1] + varg2 >= _balanceOf[varg1];\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n        goto 0x93fB0x1dc;\n    } else {\n        _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        if (_allowance[msg.sender] < 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n            _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        }\n        emit Transfer(varg0, varg1, varg2);\n        v3 = v5 = 1;\n    }\n    return v3;\n}\n\nfunction withdraw(uint256 varg0) public payable { \n    assert(!msg.value);\n    v0 = _SafeSub(varg0, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeSub(varg0, _totalSupply);\n    _totalSupply = v1;\n    v2 = msg.sender.call().value(varg0).gas(!varg0 * 2300);\n    require(v2);\n}\n\nfunction decimals() public payable { \n    assert(!msg.value);\n    return 18;\n}\n\nfunction balanceOf(address varg0) public payable { \n    assert(!msg.value);\n    return _balanceOf[varg0];\n}\n\nfunction symbol() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (4) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = _balanceOf[varg0] + varg1 >= _balanceOf[varg0];\n    }\n    if (!v0) {\n        v2 = v3 = 0;\n        goto 0xc9eB0x381;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v2 = 1;\n    }\n    return v2;\n}\n\nfunction deposit() public payable { \n    0x443();\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    assert(!msg.value);\n    return _allowance[varg1];\n}\n\nfunction 0x443() private { \n    v0 = _SafeAdd(msg.value, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(msg.value, _totalSupply);\n    _totalSupply = v1;\n    return ;\n}\n\nfunction name() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (11) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 + varg0;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xd0e30db0 == function_selector) {\n            deposit();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    0x443();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 13:22 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public payable { \n    assert(!msg.value);\n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    v0 = v1 = _allowance[varg0] >= varg2;\n    if (v1) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg1] + varg2 >= _balanceOf[varg1];\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n        goto 0x93fB0x1dc;\n    } else {\n        _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        if (_allowance[msg.sender] < 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n            _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        }\n        emit Transfer(varg0, varg1, varg2);\n        v3 = v5 = 1;\n    }\n    return v3;\n}\n\nfunction withdraw(uint256 varg0) public payable { \n    assert(!msg.value);\n    v0 = _SafeSub(varg0, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeSub(varg0, _totalSupply);\n    _totalSupply = v1;\n    v2 = msg.sender.call().value(varg0).gas(!varg0 * 2300);\n    require(v2);\n}\n\nfunction decimals() public payable { \n    assert(!msg.value);\n    return 18;\n}\n\nfunction balanceOf(address varg0) public payable { \n    assert(!msg.value);\n    return _balanceOf[varg0];\n}\n\nfunction symbol() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (4) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = _balanceOf[varg0] + varg1 >= _balanceOf[varg0];\n    }\n    if (!v0) {\n        v2 = v3 = 0;\n        goto 0xc9eB0x381;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v2 = 1;\n    }\n    return v2;\n}\n\nfunction deposit() public payable { \n    0x443();\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    assert(!msg.value);\n    return _allowance[varg1];\n}\n\nfunction 0x443() private { \n    v0 = _SafeAdd(msg.value, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(msg.value, _totalSupply);\n    _totalSupply = v1;\n    return ;\n}\n\nfunction name() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (11) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 + varg0;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xd0e30db0 == function_selector) {\n            deposit();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    0x443();\n}\n.",
	"status": "1",
	"time_cost": 35.774123191833496,
	"usage": {
		"completion_tokens": 659,
		"prompt_tokens": 1644,
		"total_tokens": 2303
	}
}