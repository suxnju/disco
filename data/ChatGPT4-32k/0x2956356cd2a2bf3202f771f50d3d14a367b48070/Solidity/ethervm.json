{
	"address": "0x2956356cd2a2bf3202f771f50d3d14a367b48070",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's a Solidity implementation of the provided EVM Bytecode:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Token {\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowed;\n    uint256 private _totalSupply = 0;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() public pure returns (string memory) {\n        return \"Ether Token\";\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(_balances[msg.sender] >= value);\n        _balances[msg.sender] -= value;\n        _balances[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(value <= _balances[from]);\n        require(value <= _allowed[from][msg.sender]);\n        _balances[from] -= value;\n        _balances[to] += value;\n        _allowed[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function deposit() public payable {\n        _balances[msg.sender] += msg.value;\n        _totalSupply += msg.value;\n    }\n\n    function withdraw(uint256 value) public {\n        require(_balances[msg.sender] >= value);\n        _balances[msg.sender] -= value;\n        _totalSupply -= value;\n        msg.sender.transfer(value);\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"WETH\";\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n}\n```\n\nPlease note that the Solidity code above does not include the `func_00B9`, `func_0D2C`, and `func_0D4C` functions found in the EVM bytecode, as their purpose isn't clear from the decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471635,
	"id": "chatcmpl-8MudnMs8wlC3dnulbRX7PIQt9wN7e",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00AD:\n            var var0 = 0x00bc;\n            var var1 = 0x00b9;\n            deposit();\n            func_00B9();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00ce;\n                var var2 = name();\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                var var4 = var3;\n                var temp1 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp1 - var4;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var6 = temp2 + 0x20;\n                var var7 = memory[temp2:temp2 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n            \n                if (var8 == 0x00) {\n                label_011D:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_00F9:\n                    memory[var9:var9 + 0x20] = memory[var10:var10 + 0x20];\n                \n                    if (var8 <= 0x20) { goto label_011D; }\n                \n                    var9 = var9 + 0x20;\n                    var10 = var10 + 0x20;\n                    var8 = var8 - 0x20;\n                    goto label_00F9;\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01be;\n                var2 = totalSupply();\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0230;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = !!var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0268;\n                var2 = msg.data[0x04:0x24];\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x027a;\n                var2 = decimals();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0xff;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x02ca;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var1;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x02f0;\n                var2 = symbol();\n                var temp18 = memory[0x40:0x60];\n                var3 = temp18;\n                var4 = var3;\n                var temp19 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp19 - var4;\n                var temp20 = var2;\n                memory[temp19:temp19 + 0x20] = memory[temp20:temp20 + 0x20];\n                var5 = temp19 + 0x20;\n                var6 = temp20 + 0x20;\n                var7 = memory[temp20:temp20 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n            \n                if (var8 == 0x00) {\n                label_033F:\n                    var temp21 = var7;\n                    var5 = temp21 + var5;\n                    var6 = temp21 & 0x1f;\n                \n                    if (!var6) {\n                        var temp22 = memory[0x40:0x60];\n                        return memory[temp22:temp22 + var5 - temp22];\n                    } else {\n                        var temp23 = var6;\n                        var temp24 = var5 - temp23;\n                        memory[temp24:temp24 + 0x20] = ~(0x0100 ** (0x20 - temp23) - 0x01) & memory[temp24:temp24 + 0x20];\n                        var temp25 = memory[0x40:0x60];\n                        return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n                    }\n                } else {\n                label_031B:\n                    memory[var9:var9 + 0x20] = memory[var10:var10 + 0x20];\n                \n                    if (var8 <= 0x20) { goto label_033F; }\n                \n                    var9 = var9 + 0x20;\n                    var10 = var10 + 0x20;\n                    var8 = var8 - 0x20;\n                    goto label_031B;\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x03b6;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = !!var1;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x03d8;\n                deposit();\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x042d;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = allowance(var2, var3);\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = var1;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n            } else { goto label_00AD; }\n        }\n    }\n    \n    function func_00B9() {}\n    \n    function deposit() {\n        var var0 = 0x048c;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_0D2C(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x04db;\n        var1 = storage[0x02];\n        var2 = msg.value;\n        var0 = func_0D2C(var1, var2);\n        storage[0x02] = var0;\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x0b;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x457468657220546f6b656e000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var var2 = storage[keccak256(memory[0x00:0x40])] >= arg2;\n    \n        if (var2) {\n            var2 = var1 >= arg2;\n        \n            if (!var2) { goto label_0775; }\n            else { goto label_06F0; }\n        } else if (!var2) {\n        label_0775:\n        \n            if (!var2) {\n            label_0935:\n                var0 = 0x00;\n            \n            label_093F:\n                return var0;\n            } else {\n            label_077B:\n                var temp2 = arg2;\n                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] + temp2;\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                storage[temp4] = storage[temp4] - temp2;\n            \n                if (var1 >= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = arg2;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                    var0 = 0x01;\n                    goto label_093F;\n                } else {\n                    var temp7 = arg2;\n                    var temp8 = arg0;\n                    memory[0x00:0x20] = temp8 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x01;\n                    var temp9 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = temp9;\n                    var temp10 = keccak256(memory[0x00:0x40]);\n                    storage[temp10] = storage[temp10] - temp7;\n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = temp7;\n                    var temp12 = memory[0x40:0x60];\n                    log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                    var0 = 0x01;\n                    goto label_093F;\n                }\n            }\n        } else {\n        label_06F0:\n            var temp13 = arg1;\n            memory[0x00:0x20] = temp13 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var temp14 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp13 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n        \n            if (storage[keccak256(memory[0x00:0x40])] + arg2 < temp14) { goto label_0935; }\n            else { goto label_077B; }\n        }\n    }\n    \n    function withdraw(var arg0) {\n        var var0 = 0x0990;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_0D4C(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x09df;\n        var1 = storage[0x02];\n        var2 = arg0;\n        var0 = func_0D4C(var1, var2);\n        storage[0x02] = var0;\n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x04;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x5745544800000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])] >= arg1;\n    \n        if (var1) {\n            var temp6 = arg0;\n            memory[0x00:0x20] = temp6 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var temp7 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp6 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n        \n            if (storage[keccak256(memory[0x00:0x40])] + arg1 < temp7) { goto label_0C94; }\n            else { goto label_0B8D; }\n        } else if (!var1) {\n        label_0C94:\n            var0 = 0x00;\n        \n        label_0C9E:\n            return var0;\n        } else {\n        label_0B8D:\n            var temp0 = arg1;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = storage[temp1] - temp0;\n            var temp2 = arg0;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = storage[temp3] + temp0;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp0;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var0 = 0x01;\n            goto label_0C9E;\n        }\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0D2C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0D4C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00AD:\n            var var0 = 0x00bc;\n            var var1 = 0x00b9;\n            deposit();\n            func_00B9();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00ce;\n                var var2 = name();\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                var var4 = var3;\n                var temp1 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp1 - var4;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var6 = temp2 + 0x20;\n                var var7 = memory[temp2:temp2 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n            \n                if (var8 == 0x00) {\n                label_011D:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_00F9:\n                    memory[var9:var9 + 0x20] = memory[var10:var10 + 0x20];\n                \n                    if (var8 <= 0x20) { goto label_011D; }\n                \n                    var9 = var9 + 0x20;\n                    var10 = var10 + 0x20;\n                    var8 = var8 - 0x20;\n                    goto label_00F9;\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01be;\n                var2 = totalSupply();\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0230;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = !!var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0268;\n                var2 = msg.data[0x04:0x24];\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x027a;\n                var2 = decimals();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0xff;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x02ca;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var1;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x02f0;\n                var2 = symbol();\n                var temp18 = memory[0x40:0x60];\n                var3 = temp18;\n                var4 = var3;\n                var temp19 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp19 - var4;\n                var temp20 = var2;\n                memory[temp19:temp19 + 0x20] = memory[temp20:temp20 + 0x20];\n                var5 = temp19 + 0x20;\n                var6 = temp20 + 0x20;\n                var7 = memory[temp20:temp20 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n            \n                if (var8 == 0x00) {\n                label_033F:\n                    var temp21 = var7;\n                    var5 = temp21 + var5;\n                    var6 = temp21 & 0x1f;\n                \n                    if (!var6) {\n                        var temp22 = memory[0x40:0x60];\n                        return memory[temp22:temp22 + var5 - temp22];\n                    } else {\n                        var temp23 = var6;\n                        var temp24 = var5 - temp23;\n                        memory[temp24:temp24 + 0x20] = ~(0x0100 ** (0x20 - temp23) - 0x01) & memory[temp24:temp24 + 0x20];\n                        var temp25 = memory[0x40:0x60];\n                        return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n                    }\n                } else {\n                label_031B:\n                    memory[var9:var9 + 0x20] = memory[var10:var10 + 0x20];\n                \n                    if (var8 <= 0x20) { goto label_033F; }\n                \n                    var9 = var9 + 0x20;\n                    var10 = var10 + 0x20;\n                    var8 = var8 - 0x20;\n                    goto label_031B;\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x03b6;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = !!var1;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x03d8;\n                deposit();\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x042d;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = allowance(var2, var3);\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = var1;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n            } else { goto label_00AD; }\n        }\n    }\n    \n    function func_00B9() {}\n    \n    function deposit() {\n        var var0 = 0x048c;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_0D2C(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x04db;\n        var1 = storage[0x02];\n        var2 = msg.value;\n        var0 = func_0D2C(var1, var2);\n        storage[0x02] = var0;\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x0b;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x457468657220546f6b656e000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var var2 = storage[keccak256(memory[0x00:0x40])] >= arg2;\n    \n        if (var2) {\n            var2 = var1 >= arg2;\n        \n            if (!var2) { goto label_0775; }\n            else { goto label_06F0; }\n        } else if (!var2) {\n        label_0775:\n        \n            if (!var2) {\n            label_0935:\n                var0 = 0x00;\n            \n            label_093F:\n                return var0;\n            } else {\n            label_077B:\n                var temp2 = arg2;\n                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] + temp2;\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                storage[temp4] = storage[temp4] - temp2;\n            \n                if (var1 >= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = arg2;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                    var0 = 0x01;\n                    goto label_093F;\n                } else {\n                    var temp7 = arg2;\n                    var temp8 = arg0;\n                    memory[0x00:0x20] = temp8 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x01;\n                    var temp9 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = temp9;\n                    var temp10 = keccak256(memory[0x00:0x40]);\n                    storage[temp10] = storage[temp10] - temp7;\n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = temp7;\n                    var temp12 = memory[0x40:0x60];\n                    log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                    var0 = 0x01;\n                    goto label_093F;\n                }\n            }\n        } else {\n        label_06F0:\n            var temp13 = arg1;\n            memory[0x00:0x20] = temp13 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var temp14 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp13 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n        \n            if (storage[keccak256(memory[0x00:0x40])] + arg2 < temp14) { goto label_0935; }\n            else { goto label_077B; }\n        }\n    }\n    \n    function withdraw(var arg0) {\n        var var0 = 0x0990;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_0D4C(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x09df;\n        var1 = storage[0x02];\n        var2 = arg0;\n        var0 = func_0D4C(var1, var2);\n        storage[0x02] = var0;\n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x04;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x5745544800000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])] >= arg1;\n    \n        if (var1) {\n            var temp6 = arg0;\n            memory[0x00:0x20] = temp6 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var temp7 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp6 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n        \n            if (storage[keccak256(memory[0x00:0x40])] + arg1 < temp7) { goto label_0C94; }\n            else { goto label_0B8D; }\n        } else if (!var1) {\n        label_0C94:\n            var0 = 0x00;\n        \n        label_0C9E:\n            return var0;\n        } else {\n        label_0B8D:\n            var temp0 = arg1;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = storage[temp1] - temp0;\n            var temp2 = arg0;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = storage[temp3] + temp0;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp0;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var0 = 0x01;\n            goto label_0C9E;\n        }\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0D2C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0D4C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00AD:\n            var var0 = 0x00bc;\n            var var1 = 0x00b9;\n            deposit();\n            func_00B9();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00ce;\n                var var2 = name();\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                var var4 = var3;\n                var temp1 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp1 - var4;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var6 = temp2 + 0x20;\n                var var7 = memory[temp2:temp2 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n            \n                if (var8 == 0x00) {\n                label_011D:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_00F9:\n                    memory[var9:var9 + 0x20] = memory[var10:var10 + 0x20];\n                \n                    if (var8 <= 0x20) { goto label_011D; }\n                \n                    var9 = var9 + 0x20;\n                    var10 = var10 + 0x20;\n                    var8 = var8 - 0x20;\n                    goto label_00F9;\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01be;\n                var2 = totalSupply();\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0230;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = !!var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0268;\n                var2 = msg.data[0x04:0x24];\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x027a;\n                var2 = decimals();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0xff;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x02ca;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var1;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x02f0;\n                var2 = symbol();\n                var temp18 = memory[0x40:0x60];\n                var3 = temp18;\n                var4 = var3;\n                var temp19 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp19 - var4;\n                var temp20 = var2;\n                memory[temp19:temp19 + 0x20] = memory[temp20:temp20 + 0x20];\n                var5 = temp19 + 0x20;\n                var6 = temp20 + 0x20;\n                var7 = memory[temp20:temp20 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n            \n                if (var8 == 0x00) {\n                label_033F:\n                    var temp21 = var7;\n                    var5 = temp21 + var5;\n                    var6 = temp21 & 0x1f;\n                \n                    if (!var6) {\n                        var temp22 = memory[0x40:0x60];\n                        return memory[temp22:temp22 + var5 - temp22];\n                    } else {\n                        var temp23 = var6;\n                        var temp24 = var5 - temp23;\n                        memory[temp24:temp24 + 0x20] = ~(0x0100 ** (0x20 - temp23) - 0x01) & memory[temp24:temp24 + 0x20];\n                        var temp25 = memory[0x40:0x60];\n                        return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n                    }\n                } else {\n                label_031B:\n                    memory[var9:var9 + 0x20] = memory[var10:var10 + 0x20];\n                \n                    if (var8 <= 0x20) { goto label_033F; }\n                \n                    var9 = var9 + 0x20;\n                    var10 = var10 + 0x20;\n                    var8 = var8 - 0x20;\n                    goto label_031B;\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x03b6;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = !!var1;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x03d8;\n                deposit();\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x042d;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = allowance(var2, var3);\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = var1;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n            } else { goto label_00AD; }\n        }\n    }\n    \n    function func_00B9() {}\n    \n    function deposit() {\n        var var0 = 0x048c;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_0D2C(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x04db;\n        var1 = storage[0x02];\n        var2 = msg.value;\n        var0 = func_0D2C(var1, var2);\n        storage[0x02] = var0;\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x0b;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x457468657220546f6b656e000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var var2 = storage[keccak256(memory[0x00:0x40])] >= arg2;\n    \n        if (var2) {\n            var2 = var1 >= arg2;\n        \n            if (!var2) { goto label_0775; }\n            else { goto label_06F0; }\n        } else if (!var2) {\n        label_0775:\n        \n            if (!var2) {\n            label_0935:\n                var0 = 0x00;\n            \n            label_093F:\n                return var0;\n            } else {\n            label_077B:\n                var temp2 = arg2;\n                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] + temp2;\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                storage[temp4] = storage[temp4] - temp2;\n            \n                if (var1 >= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = arg2;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                    var0 = 0x01;\n                    goto label_093F;\n                } else {\n                    var temp7 = arg2;\n                    var temp8 = arg0;\n                    memory[0x00:0x20] = temp8 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x01;\n                    var temp9 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = temp9;\n                    var temp10 = keccak256(memory[0x00:0x40]);\n                    storage[temp10] = storage[temp10] - temp7;\n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = temp7;\n                    var temp12 = memory[0x40:0x60];\n                    log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                    var0 = 0x01;\n                    goto label_093F;\n                }\n            }\n        } else {\n        label_06F0:\n            var temp13 = arg1;\n            memory[0x00:0x20] = temp13 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var temp14 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp13 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n        \n            if (storage[keccak256(memory[0x00:0x40])] + arg2 < temp14) { goto label_0935; }\n            else { goto label_077B; }\n        }\n    }\n    \n    function withdraw(var arg0) {\n        var var0 = 0x0990;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_0D4C(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x09df;\n        var1 = storage[0x02];\n        var2 = arg0;\n        var0 = func_0D4C(var1, var2);\n        storage[0x02] = var0;\n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x04;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x5745544800000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])] >= arg1;\n    \n        if (var1) {\n            var temp6 = arg0;\n            memory[0x00:0x20] = temp6 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var temp7 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp6 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n        \n            if (storage[keccak256(memory[0x00:0x40])] + arg1 < temp7) { goto label_0C94; }\n            else { goto label_0B8D; }\n        } else if (!var1) {\n        label_0C94:\n            var0 = 0x00;\n        \n        label_0C9E:\n            return var0;\n        } else {\n        label_0B8D:\n            var temp0 = arg1;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = storage[temp1] - temp0;\n            var temp2 = arg0;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = storage[temp3] + temp0;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp0;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var0 = 0x01;\n            goto label_0C9E;\n        }\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0D2C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0D4C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 45.66451907157898,
	"usage": {
		"completion_tokens": 543,
		"prompt_tokens": 5621,
		"total_tokens": 6164
	}
}