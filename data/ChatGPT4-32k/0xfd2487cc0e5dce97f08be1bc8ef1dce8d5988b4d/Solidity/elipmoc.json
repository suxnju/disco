{
	"address": "0xfd2487cc0e5dce97f08be1bc8ef1dce8d5988b4d",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the decompiled code, the Solidity contract could look like this:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n\n    uint256 private _participants;\n    uint256 private _payoutIdx;\n    uint256 private _collectedFees;\n    uint256 private _balance;\n    address payable private _owner;\n\n    constructor() {\n        _owner = payable(msg.sender);\n    }\n\n    function collectedFees() public view returns (uint256) { \n        return _collectedFees;\n    }\n\n    function payoutIdx() public view returns (uint256) { \n        return _payoutIdx;\n    }\n\n    function balance() public view returns (uint256) { \n        return _balance;\n    }\n\n    function collectFees() public { \n        require(msg.sender == _owner, \"Only owner can collect fees\");\n        if (_collectedFees > 0) {\n            _owner.transfer(_collectedFees);\n            _collectedFees = 0;\n        }\n    }\n\n    function enter() public payable { \n        require(msg.value >= 1 ether, \"Minimum amount is 1 Ether\");\n        _participants++;\n        if (_participants > 0) {\n            _collectedFees += msg.value / 10;\n            _balance += msg.value;\n        }\n        if (_balance > _payoutIdx * 2) {\n            _payoutIdx++;\n        }\n    }\n\n    function setOwner(address payable newOwner) public { \n        require(msg.sender == _owner, \"Only owner can set new owner\");\n        _owner = newOwner;\n    }\n\n    function participants(uint256 index) public view returns (address, uint256) { \n        require(index < _participants, \"Index out of range\");\n        // The original contract seems to use a complex system for \n        // storing participant data, but it's not clear from this \n        // decompiled code. Here we'll just return some placeholder values.\n        return (address(0), 0);\n    }\n\n    function owner() public view returns (address) { \n        return _owner;\n    }\n}\n```\nThis is a basic re-creation based on the decompiled code. The \"enter\" function seems to be part of some kind of lottery or payout system, but without further context, it's hard to say exactly how it should work. The \"participants\" function also seems to interact with a complex data storage system, but again it's not clear from the decompiled code how this should work. The code above is simplified and may not fully replicate the functionality of the original contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1698040367,
	"id": "chatcmpl-8Ci9nNtRgUXJqS2i8Al1ygFUiQs2S",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.14 21:18 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _participants; // STORAGE[0x0]\nuint256 _payoutIdx; // STORAGE[0x1]\nuint256 _collectedFees; // STORAGE[0x2]\nuint256 _balance; // STORAGE[0x3]\nuint256 _owner; // STORAGE[0x4]\n\n\nfunction collectedFees() public payable { \n    return _collectedFees;\n}\n\nfunction payoutIdx() public payable { \n    return _payoutIdx;\n}\n\nfunction balance() public payable { \n    return _balance;\n}\n\nfunction collectFees() public payable { \n    if (msg.sender == address(_owner)) {\n        if (0 != _collectedFees) {\n            v0 = address(_owner).call().value(_collectedFees);\n            _collectedFees = 0;\n            goto 0x18c0x125;\n        }\n    }\n}\n\nfunction enter() public payable { \n    if (msg.value >= 0xde0b6b3a7640000) {\n        _participants = _participants + 1;\n        if (!_participants <= _participants + 1) {\n            v0 = (_participants + 1 << 1) + 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\n            while (0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1) > v0) {\n                STORAGE[v0] = ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[v0];\n                v0 += 1;\n                STORAGE[v0] = 0;\n            }\n        }\n        assert(_participants < _participants);\n        STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1)] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1)];\n        assert(_participants < _participants);\n        STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_participants << 1)] = msg.value;\n        if (_participants == 0) {\n            _collectedFees += msg.value;\n        } else {\n            _collectedFees += msg.value / 10;\n            _balance += msg.value;\n        }\n        assert(_payoutIdx < _participants);\n        if (_balance > STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] << 1) {\n            assert(_payoutIdx < _participants);\n            assert(_payoutIdx < _participants);\n            assert(_payoutIdx < _participants);\n            v1 = address(STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_payoutIdx << 1)]).call().value(STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] - STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] / 10 << 1);\n            assert(_payoutIdx < _participants);\n            _balance = _balance - (STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] << 1);\n            _payoutIdx += 1;\n        }\n    } else {\n        v2 = msg.sender.call().value(msg.value);\n    }\n}\n\nfunction setOwner(address varg0) public payable { \n    if (msg.sender == address(_owner)) {\n        _owner = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _owner;\n    }\n}\n\nfunction participants(uint256 varg0) public payable { \n    assert(varg0 < _participants);\n    return address(STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (varg0 << 1)]), STORAGE[(varg0 << 1) + 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564];\n}\n\nfunction owner() public payable { \n    return address(_owner);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector >> 224 == 0x13af4035) {\n            setOwner(address);\n        } else if (0x35c1d349 == function_selector >> 224) {\n            participants(uint256);\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x9003adfe == function_selector >> 224) {\n            collectedFees();\n        } else if (0xa60f3588 == function_selector >> 224) {\n            payoutIdx();\n        } else if (0xb69ef8a8 == function_selector >> 224) {\n            balance();\n        } else if (0xc8796572 == function_selector >> 224) {\n            collectFees();\n        } else if (0xe97dcb62 == function_selector >> 224) {\n            enter();\n        }\n    }\n    if (msg.value >= 0xde0b6b3a7640000) {\n        _participants = _participants + 1;\n        if (!_participants <= _participants + 1) {\n            v0 = v1 = (_participants + 1 << 1) + 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\n            while (0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1) > v0) {\n                STORAGE[v0] = ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[v0];\n                v0 += 1;\n                STORAGE[v0] = 0;\n            }\n        }\n        assert(_participants < _participants);\n        STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1)] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1)];\n        assert(_participants < _participants);\n        STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_participants << 1)] = msg.value;\n        if (_participants == 0) {\n            _collectedFees += msg.value;\n        } else {\n            _collectedFees += msg.value / 10;\n            _balance += msg.value;\n        }\n        assert(_payoutIdx < _participants);\n        if (_balance > STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] << 1) {\n            assert(_payoutIdx < _participants);\n            assert(_payoutIdx < _participants);\n            assert(_payoutIdx < _participants);\n            v2 = address(STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_payoutIdx << 1)]).call().value(STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] - STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] / 10 << 1);\n            assert(_payoutIdx < _participants);\n            _balance = _balance - (STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] << 1);\n            _payoutIdx += 1;\n        }\n    } else {\n        v3 = msg.sender.call().value(msg.value);\n    }\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.14 21:18 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _participants; // STORAGE[0x0]\nuint256 _payoutIdx; // STORAGE[0x1]\nuint256 _collectedFees; // STORAGE[0x2]\nuint256 _balance; // STORAGE[0x3]\nuint256 _owner; // STORAGE[0x4]\n\n\nfunction collectedFees() public payable { \n    return _collectedFees;\n}\n\nfunction payoutIdx() public payable { \n    return _payoutIdx;\n}\n\nfunction balance() public payable { \n    return _balance;\n}\n\nfunction collectFees() public payable { \n    if (msg.sender == address(_owner)) {\n        if (0 != _collectedFees) {\n            v0 = address(_owner).call().value(_collectedFees);\n            _collectedFees = 0;\n            goto 0x18c0x125;\n        }\n    }\n}\n\nfunction enter() public payable { \n    if (msg.value >= 0xde0b6b3a7640000) {\n        _participants = _participants + 1;\n        if (!_participants <= _participants + 1) {\n            v0 = (_participants + 1 << 1) + 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\n            while (0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1) > v0) {\n                STORAGE[v0] = ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[v0];\n                v0 += 1;\n                STORAGE[v0] = 0;\n            }\n        }\n        assert(_participants < _participants);\n        STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1)] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1)];\n        assert(_participants < _participants);\n        STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_participants << 1)] = msg.value;\n        if (_participants == 0) {\n            _collectedFees += msg.value;\n        } else {\n            _collectedFees += msg.value / 10;\n            _balance += msg.value;\n        }\n        assert(_payoutIdx < _participants);\n        if (_balance > STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] << 1) {\n            assert(_payoutIdx < _participants);\n            assert(_payoutIdx < _participants);\n            assert(_payoutIdx < _participants);\n            v1 = address(STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_payoutIdx << 1)]).call().value(STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] - STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] / 10 << 1);\n            assert(_payoutIdx < _participants);\n            _balance = _balance - (STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] << 1);\n            _payoutIdx += 1;\n        }\n    } else {\n        v2 = msg.sender.call().value(msg.value);\n    }\n}\n\nfunction setOwner(address varg0) public payable { \n    if (msg.sender == address(_owner)) {\n        _owner = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _owner;\n    }\n}\n\nfunction participants(uint256 varg0) public payable { \n    assert(varg0 < _participants);\n    return address(STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (varg0 << 1)]), STORAGE[(varg0 << 1) + 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564];\n}\n\nfunction owner() public payable { \n    return address(_owner);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector >> 224 == 0x13af4035) {\n            setOwner(address);\n        } else if (0x35c1d349 == function_selector >> 224) {\n            participants(uint256);\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x9003adfe == function_selector >> 224) {\n            collectedFees();\n        } else if (0xa60f3588 == function_selector >> 224) {\n            payoutIdx();\n        } else if (0xb69ef8a8 == function_selector >> 224) {\n            balance();\n        } else if (0xc8796572 == function_selector >> 224) {\n            collectFees();\n        } else if (0xe97dcb62 == function_selector >> 224) {\n            enter();\n        }\n    }\n    if (msg.value >= 0xde0b6b3a7640000) {\n        _participants = _participants + 1;\n        if (!_participants <= _participants + 1) {\n            v0 = v1 = (_participants + 1 << 1) + 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\n            while (0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1) > v0) {\n                STORAGE[v0] = ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[v0];\n                v0 += 1;\n                STORAGE[v0] = 0;\n            }\n        }\n        assert(_participants < _participants);\n        STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1)] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1)];\n        assert(_participants < _participants);\n        STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_participants << 1)] = msg.value;\n        if (_participants == 0) {\n            _collectedFees += msg.value;\n        } else {\n            _collectedFees += msg.value / 10;\n            _balance += msg.value;\n        }\n        assert(_payoutIdx < _participants);\n        if (_balance > STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] << 1) {\n            assert(_payoutIdx < _participants);\n            assert(_payoutIdx < _participants);\n            assert(_payoutIdx < _participants);\n            v2 = address(STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_payoutIdx << 1)]).call().value(STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] - STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] / 10 << 1);\n            assert(_payoutIdx < _participants);\n            _balance = _balance - (STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] << 1);\n            _payoutIdx += 1;\n        }\n    } else {\n        v3 = msg.sender.call().value(msg.value);\n    }\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.14 21:18 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _participants; // STORAGE[0x0]\nuint256 _payoutIdx; // STORAGE[0x1]\nuint256 _collectedFees; // STORAGE[0x2]\nuint256 _balance; // STORAGE[0x3]\nuint256 _owner; // STORAGE[0x4]\n\n\nfunction collectedFees() public payable { \n    return _collectedFees;\n}\n\nfunction payoutIdx() public payable { \n    return _payoutIdx;\n}\n\nfunction balance() public payable { \n    return _balance;\n}\n\nfunction collectFees() public payable { \n    if (msg.sender == address(_owner)) {\n        if (0 != _collectedFees) {\n            v0 = address(_owner).call().value(_collectedFees);\n            _collectedFees = 0;\n            goto 0x18c0x125;\n        }\n    }\n}\n\nfunction enter() public payable { \n    if (msg.value >= 0xde0b6b3a7640000) {\n        _participants = _participants + 1;\n        if (!_participants <= _participants + 1) {\n            v0 = (_participants + 1 << 1) + 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\n            while (0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1) > v0) {\n                STORAGE[v0] = ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[v0];\n                v0 += 1;\n                STORAGE[v0] = 0;\n            }\n        }\n        assert(_participants < _participants);\n        STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1)] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1)];\n        assert(_participants < _participants);\n        STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_participants << 1)] = msg.value;\n        if (_participants == 0) {\n            _collectedFees += msg.value;\n        } else {\n            _collectedFees += msg.value / 10;\n            _balance += msg.value;\n        }\n        assert(_payoutIdx < _participants);\n        if (_balance > STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] << 1) {\n            assert(_payoutIdx < _participants);\n            assert(_payoutIdx < _participants);\n            assert(_payoutIdx < _participants);\n            v1 = address(STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_payoutIdx << 1)]).call().value(STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] - STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] / 10 << 1);\n            assert(_payoutIdx < _participants);\n            _balance = _balance - (STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] << 1);\n            _payoutIdx += 1;\n        }\n    } else {\n        v2 = msg.sender.call().value(msg.value);\n    }\n}\n\nfunction setOwner(address varg0) public payable { \n    if (msg.sender == address(_owner)) {\n        _owner = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _owner;\n    }\n}\n\nfunction participants(uint256 varg0) public payable { \n    assert(varg0 < _participants);\n    return address(STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (varg0 << 1)]), STORAGE[(varg0 << 1) + 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564];\n}\n\nfunction owner() public payable { \n    return address(_owner);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector >> 224 == 0x13af4035) {\n            setOwner(address);\n        } else if (0x35c1d349 == function_selector >> 224) {\n            participants(uint256);\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x9003adfe == function_selector >> 224) {\n            collectedFees();\n        } else if (0xa60f3588 == function_selector >> 224) {\n            payoutIdx();\n        } else if (0xb69ef8a8 == function_selector >> 224) {\n            balance();\n        } else if (0xc8796572 == function_selector >> 224) {\n            collectFees();\n        } else if (0xe97dcb62 == function_selector >> 224) {\n            enter();\n        }\n    }\n    if (msg.value >= 0xde0b6b3a7640000) {\n        _participants = _participants + 1;\n        if (!_participants <= _participants + 1) {\n            v0 = v1 = (_participants + 1 << 1) + 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\n            while (0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1) > v0) {\n                STORAGE[v0] = ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[v0];\n                v0 += 1;\n                STORAGE[v0] = 0;\n            }\n        }\n        assert(_participants < _participants);\n        STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1)] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_participants << 1)];\n        assert(_participants < _participants);\n        STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_participants << 1)] = msg.value;\n        if (_participants == 0) {\n            _collectedFees += msg.value;\n        } else {\n            _collectedFees += msg.value / 10;\n            _balance += msg.value;\n        }\n        assert(_payoutIdx < _participants);\n        if (_balance > STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] << 1) {\n            assert(_payoutIdx < _participants);\n            assert(_payoutIdx < _participants);\n            assert(_payoutIdx < _participants);\n            v2 = address(STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 + (_payoutIdx << 1)]).call().value(STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] - STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] / 10 << 1);\n            assert(_payoutIdx < _participants);\n            _balance = _balance - (STORAGE[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564 + (_payoutIdx << 1)] << 1);\n            _payoutIdx += 1;\n        }\n    } else {\n        v3 = msg.sender.call().value(msg.value);\n    }\n}\n.",
	"status": "1",
	"time_cost": 25.15513849258423,
	"usage": {
		"completion_tokens": 540,
		"prompt_tokens": 2202,
		"total_tokens": 2742
	}
}