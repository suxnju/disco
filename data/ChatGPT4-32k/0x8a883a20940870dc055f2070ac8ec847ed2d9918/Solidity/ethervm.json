{
	"address": "0x8a883a20940870dc055f2070ac8ec847ed2d9918",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0187:\n            var var0 = 0x018f;\n            var0 = func_4073();\n            var var1 = 0x00;\n        \n            if (!!(storage[0x12] & 0xff) == 0x01) {\n                var var2 = msg.sender;\n                var var3 = address(var2).code.length;\n            \n                if (!var3) {\n                    var var4 = msg.value;\n                \n                    if (var4 < 0x3b9aca00) {\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                        memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x10;\n                        var temp7 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x4146:0x4166];\n                        var temp8 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp7;\n                        memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp8;\n                        var temp9 = memory[0x40:0x60];\n                        revert(memory[temp9:temp9 + temp6 - temp9 + 0x64]);\n                    } else if (var4 <= 0x152d02c7e14af6800000) {\n                        var var5 = 0x02ca;\n                        var var6 = var0;\n                        var5 = func_0886(var6);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x03;\n                        var temp0 = storage[keccak256(memory[0x00:0x40])];\n                        memory[0x00:0x20] = temp0;\n                        memory[0x20:0x40] = 0x05;\n                        var temp1 = var5;\n                        var0 = temp1;\n                        var1 = temp0;\n                        var5 = 0x02fb;\n                        var6 = var1;\n                        var var7 = storage[keccak256(memory[0x00:0x40]) + 0x05];\n                        var var8 = var0;\n                        func_0ADA(var6, var7, var8);\n                        stop();\n                    } else {\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n                        memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x0e;\n                        var temp3 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x40c6:0x40e6];\n                        var temp4 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp3;\n                        memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n                        var temp5 = memory[0x40:0x60];\n                        revert(memory[temp5:temp5 + temp2 - temp5 + 0x64]);\n                    }\n                } else {\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = 0x20;\n                    memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = 0x1f;\n                    var temp11 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x4126:0x4146];\n                    var temp12 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp11;\n                    memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = temp12;\n                    var temp13 = memory[0x40:0x60];\n                    revert(memory[temp13:temp13 + temp10 - temp13 + 0x64]);\n                }\n            } else {\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp14 + 0x04:temp14 + 0x04 + 0x20] = 0x20;\n                memory[temp14 + 0x24:temp14 + 0x24 + 0x20] = 0x11;\n                var temp15 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x4106:0x4126];\n                var temp16 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp15;\n                memory[temp14 + 0x44:temp14 + 0x44 + 0x20] = temp16;\n                var temp17 = memory[0x40:0x60];\n                revert(memory[temp17:temp17 + temp14 - temp17 + 0x64]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x015008b1) {\n                // Dispatch table entry for reLoadXaddr(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0326;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                reLoadXaddr(var2, var3);\n                stop();\n            } else if (var0 == 0x018a25e8) {\n                // Dispatch table entry for getBuyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033d;\n                var1 = getBuyPrice();\n            \n            label_033D:\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var1;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + temp18 - temp19 + 0x20];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0364;\n                var2 = name();\n            \n            label_0364:\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = 0x20;\n                var temp21 = var2;\n                memory[temp20 + 0x20:temp20 + 0x20 + 0x20] = memory[temp21:temp21 + 0x20];\n                var3 = temp20;\n                var4 = var3;\n                var5 = var4 + 0x40;\n                var6 = temp21 + 0x20;\n                var7 = memory[temp21:temp21 + 0x20];\n                var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_039E:\n                    var temp22 = var7;\n                    var5 = temp22 + var5;\n                    var6 = temp22 & 0x1f;\n                \n                    if (!var6) {\n                        var temp23 = memory[0x40:0x60];\n                        return memory[temp23:temp23 + var5 - temp23];\n                    } else {\n                        var temp24 = var6;\n                        var temp25 = var5 - temp24;\n                        memory[temp25:temp25 + 0x20] = ~(0x0100 ** (0x20 - temp24) - 0x01) & memory[temp25:temp25 + 0x20];\n                        var temp26 = memory[0x40:0x60];\n                        return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n                    }\n                } else {\n                label_038F:\n                    var temp27 = var11;\n                    memory[temp27 + var9:temp27 + var9 + 0x20] = memory[temp27 + var10:temp27 + var10 + 0x20];\n                    var11 = temp27 + 0x20;\n                \n                    if (var11 >= var8) { goto label_039E; }\n                    else { goto label_038F; }\n                }\n            } else if (var0 == 0x0f15f4c0) {\n                // Dispatch table entry for activate()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0326;\n                activate();\n                stop();\n            } else if (var0 == 0x10f01eba) {\n                // Dispatch table entry for pIDxAddr_(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033d;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = pIDxAddr_(var2);\n                goto label_033D;\n            } else if (var0 == 0x11a09ae7) {\n                // Dispatch table entry for airDropTracker_()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033d;\n                var2 = airDropTracker_();\n                goto label_033D;\n            } else if (var0 == 0x200373c9) {\n                // Dispatch table entry for fees_()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033d;\n                var2 = fees_();\n                goto label_033D;\n            } else if (var0 == 0x2660316e) {\n                // Dispatch table entry for plyrNames_(uint256,bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0454;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var2 = plyrNames_(var2, var3);\n            \n            label_0454:\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = !!var2;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + temp28 - temp29 + 0x20];\n            } else if (var0 == 0x2e19ebdc) {\n                // Dispatch table entry for pIDxName_(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033d;\n                var2 = msg.data[0x04:0x24];\n                var2 = pIDxName_(var2);\n                goto label_033D;\n            } else if (var0 == 0x37c30a98) {\n                // Dispatch table entry for round_()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0495;\n                var2, var3, var4, var5, var6, var7, var8, var9 = round_();\n                var temp30 = memory[0x40:0x60];\n                memory[temp30:temp30 + 0x20] = var2;\n                memory[temp30 + 0x20:temp30 + 0x20 + 0x20] = var3;\n                memory[temp30 + 0x40:temp30 + 0x40 + 0x20] = !!var4;\n                memory[temp30 + 0x60:temp30 + 0x60 + 0x20] = var5;\n                memory[temp30 + 0x80:temp30 + 0x80 + 0x20] = var6;\n                memory[temp30 + 0xa0:temp30 + 0xa0 + 0x20] = var7;\n                memory[temp30 + 0xc0:temp30 + 0xc0 + 0x20] = var8;\n                memory[temp30 + 0xe0:temp30 + 0xe0 + 0x20] = var9;\n                var temp31 = memory[0x40:0x60];\n                return memory[temp31:temp31 + temp30 - temp31 + 0x0100];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0326;\n                var2 = 0x00;\n                var3 = var2;\n                var4 = 0x00;\n                var5 = 0x104e;\n                var5 = func_4073();\n            \n                if (!!(storage[0x12] & 0xff) == 0x01) {\n                    var6 = msg.sender;\n                    var7 = address(var6).code.length;\n                \n                    if (!var7) {\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x03;\n                        var2 = block.timestamp;\n                        var3 = storage[keccak256(memory[0x00:0x40])];\n                        var8 = var2 > storage[0x09];\n                    \n                        if (var8) {\n                            var8 = !(storage[0x0a] & 0xff);\n                        \n                            if (!var8) { goto label_1119; }\n                            else { goto label_1113; }\n                        } else if (!var8) {\n                        label_1119:\n                        \n                            if (!var8) {\n                            label_12A4:\n                                var8 = 0x12ad;\n                                var9 = var3;\n                            \n                            label_2E30:\n                                var10 = 0x00;\n                                var11 = var10;\n                                var var12 = 0x2e3c;\n                                var var13 = var9;\n                                var var14 = 0x00;\n                                var var15 = 0x3ea0;\n                                var var16 = var13;\n                            \n                            label_37BA:\n                                var var17 = 0x00;\n                                memory[var17:var17 + 0x20] = var16;\n                                memory[0x20:0x40] = 0x06;\n                                var temp32 = keccak256(memory[var17:var17 + 0x40]);\n                                var var18 = 0x2c9c;\n                                var var19 = storage[temp32 + 0x02];\n                                var var20 = 0x0de0b6b3a7640000;\n                                var var22 = storage[0x0f];\n                                var var21 = 0x37f4;\n                                var var23 = storage[temp32 + 0x01];\n                                var21 = func_366B(var22, var23);\n                                var18 = func_37F4(var19, var20, var21);\n                            \n                            label_2C9C:\n                                var15 = var18;\n                                // Error: Could not resolve jump destination!\n                            } else {\n                            label_111F:\n                                storage[0x0a] = (storage[0x0a] & ~0xff) | 0x01;\n                                var8 = 0x1134;\n                                var9 = var5;\n                                var8 = func_2A07(var9);\n                                var5 = var8;\n                                var8 = 0x113f;\n                                var9 = var3;\n                                goto label_2E30;\n                            }\n                        } else {\n                        label_1113:\n                        \n                            if (!storage[0x08]) { goto label_12A4; }\n                            else { goto label_111F; }\n                        }\n                    } else {\n                        var temp33 = memory[0x40:0x60];\n                        memory[temp33:temp33 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp33 + 0x04:temp33 + 0x04 + 0x20] = 0x20;\n                        memory[temp33 + 0x24:temp33 + 0x24 + 0x20] = 0x1f;\n                        var temp34 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x4126:0x4146];\n                        var temp35 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp34;\n                        memory[temp33 + 0x44:temp33 + 0x44 + 0x20] = temp35;\n                        var temp36 = memory[0x40:0x60];\n                        revert(memory[temp36:temp36 + temp33 - temp36 + 0x64]);\n                    }\n                } else {\n                    var temp37 = memory[0x40:0x60];\n                    memory[temp37:temp37 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp37 + 0x04:temp37 + 0x04 + 0x20] = 0x20;\n                    memory[temp37 + 0x24:temp37 + 0x24 + 0x20] = 0x11;\n                    var temp38 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x4106:0x4126];\n                    var temp39 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp38;\n                    memory[temp37 + 0x44:temp37 + 0x44 + 0x20] = temp39;\n                    var temp40 = memory[0x40:0x60];\n                    revert(memory[temp40:temp40 + temp37 - temp40 + 0x64]);\n                }\n            } else if (var0 == 0x3ddd4698) {\n                // Dispatch table entry for registerNameXaddr(string,address,bool)\n                var temp41 = memory[0x40:0x60];\n                var temp42 = msg.data[0x04:0x24];\n                var temp43 = msg.data[temp42 + 0x04:temp42 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp41 + (temp43 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp41:temp41 + 0x20] = temp43;\n                var1 = 0x0326;\n                memory[temp41 + 0x20:temp41 + 0x20 + temp43] = msg.data[temp42 + 0x24:temp42 + 0x24 + temp43];\n                var2 = temp41;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var4 = !!msg.data[0x44:0x64];\n                registerNameXaddr(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x409dba83) {\n                // Dispatch table entry for calcKeysReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033d;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x00;\n                var4 = block.timestamp;\n                var5 = var4 > storage[var3] + storage[0x0b];\n            \n                if (!var5) {\n                label_152F:\n                \n                    if (!var5) {\n                        var5 = 0x1547;\n                        var6 = var2;\n                    \n                    label_35E7:\n                        var7 = 0x00;\n                        var8 = 0x09502f90;\n                        var9 = 0x365b;\n                        var10 = 0x03b2a1d15167e7c5699bfde00000;\n                        var11 = 0x19b2;\n                        var12 = 0x3656;\n                        var13 = 0x0dac7055469777a6122ee4310dd6c14410500f2904840000000000;\n                        var14 = 0x2e6e;\n                        var15 = 0x01027e72f1f1281308800000;\n                        var16 = 0x364a;\n                        var17 = var6;\n                        var18 = 0x0de0b6b3a7640000;\n                        var16 = func_366B(var17, var18);\n                        var14 = func_364A(var15, var16);\n                        var12 = func_2E6E(var13, var14);\n                        var11 = func_3656(var12);\n                        var9 = func_19B2(var10, var11);\n                    \n                        if (!var8) { assert(); }\n                    \n                        var5 = var9 / var8;\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        var5 = 0x1547;\n                        var6 = storage[0x0d];\n                        var7 = var2;\n                        var8 = 0x00;\n                        var9 = 0x2e29;\n                        var10 = 0x35d4;\n                        var11 = var6;\n                        goto label_35E7;\n                    }\n                } else {\n                    var5 = var4 <= storage[0x09];\n                \n                    if (var5) { goto label_152F; }\n                \n                    var5 = var4 > storage[0x09];\n                \n                    if (!var5) { goto label_152F; }\n                \n                    var5 = !storage[0x08];\n                    goto label_152F;\n                }\n            } else if (var0 == 0x438d359e) {\n                // Dispatch table entry for buyXname(bytes32)\n                var1 = 0x0326;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x1565;\n                var3 = func_4073();\n                var4 = 0x00;\n                var5 = var4;\n            \n                if (!!(storage[0x12] & 0xff) == 0x01) {\n                    var6 = msg.sender;\n                    var7 = address(var6).code.length;\n                \n                    if (!var7) {\n                        var8 = msg.value;\n                    \n                        if (var8 < 0x3b9aca00) {\n                            var temp49 = memory[0x40:0x60];\n                            memory[temp49:temp49 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                            memory[temp49 + 0x04:temp49 + 0x04 + 0x20] = 0x20;\n                            memory[temp49 + 0x24:temp49 + 0x24 + 0x20] = 0x10;\n                            var temp50 = memory[0x00:0x20];\n                            memory[0x00:0x20] = code[0x4146:0x4166];\n                            var temp51 = memory[0x00:0x20];\n                            memory[0x00:0x20] = temp50;\n                            memory[temp49 + 0x44:temp49 + 0x44 + 0x20] = temp51;\n                            var temp52 = memory[0x40:0x60];\n                            revert(memory[temp52:temp52 + temp49 - temp52 + 0x64]);\n                        } else if (var8 <= 0x152d02c7e14af6800000) {\n                            var9 = 0x16a2;\n                            var10 = var3;\n                            var9 = func_0886(var10);\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = 0x03;\n                            var3 = var9;\n                            var4 = storage[keccak256(memory[0x00:0x40])];\n                            var9 = !var2;\n                        \n                            if (!var9) {\n                                memory[0x00:0x20] = var4;\n                                memory[0x20:0x40] = 0x05;\n                            \n                                if (var2 != storage[keccak256(memory[0x00:0x40]) + 0x01]) { goto label_16F3; }\n                                else { goto label_16DA; }\n                            } else if (!var9) {\n                            label_16F3:\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x04;\n                                var temp44 = storage[keccak256(memory[0x00:0x40])];\n                                memory[0x00:0x20] = var4;\n                                memory[0x20:0x40] = 0x05;\n                                var5 = temp44;\n                            \n                                if (var5 == storage[keccak256(memory[0x00:0x40]) + 0x05]) {\n                                label_1731:\n                                    var9 = 0x173c;\n                                    var10 = var4;\n                                    var11 = var5;\n                                    var12 = var3;\n                                    func_0ADA(var10, var11, var12);\n                                \n                                label_173C:\n                                    // Error: Could not resolve jump destination!\n                                } else {\n                                    memory[0x00:0x20] = var4;\n                                    memory[0x20:0x40] = 0x05;\n                                    storage[keccak256(memory[0x00:0x40]) + 0x05] = var5;\n                                    goto label_1731;\n                                }\n                            } else {\n                            label_16DA:\n                                memory[0x00:0x20] = var4;\n                                memory[0x20:0x40] = 0x05;\n                                var5 = storage[keccak256(memory[0x00:0x40]) + 0x05];\n                                goto label_1731;\n                            }\n                        } else {\n                            var temp45 = memory[0x40:0x60];\n                            memory[temp45:temp45 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                            memory[temp45 + 0x04:temp45 + 0x04 + 0x20] = 0x20;\n                            memory[temp45 + 0x24:temp45 + 0x24 + 0x20] = 0x0e;\n                            var temp46 = memory[0x00:0x20];\n                            memory[0x00:0x20] = code[0x40c6:0x40e6];\n                            var temp47 = memory[0x00:0x20];\n                            memory[0x00:0x20] = temp46;\n                            memory[temp45 + 0x44:temp45 + 0x44 + 0x20] = temp47;\n                            var temp48 = memory[0x40:0x60];\n                            revert(memory[temp48:temp48 + temp45 - temp48 + 0x64]);\n                        }\n                    } else {\n                        var temp53 = memory[0x40:0x60];\n                        memory[temp53:temp53 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp53 + 0x04:temp53 + 0x04 + 0x20] = 0x20;\n                        memory[temp53 + 0x24:temp53 + 0x24 + 0x20] = 0x1f;\n                        var temp54 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x4126:0x4146];\n                        var temp55 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp54;\n                        memory[temp53 + 0x44:temp53 + 0x44 + 0x20] = temp55;\n                        var temp56 = memory[0x40:0x60];\n                        revert(memory[temp56:temp56 + temp53 - temp56 + 0x64]);\n                    }\n                } else {\n                    var temp57 = memory[0x40:0x60];\n                    memory[temp57:temp57 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp57 + 0x04:temp57 + 0x04 + 0x20] = 0x20;\n                    memory[temp57 + 0x24:temp57 + 0x24 + 0x20] = 0x11;\n                    var temp58 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x4106:0x4126];\n                    var temp59 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp58;\n                    memory[temp57 + 0x44:temp57 + 0x44 + 0x20] = temp59;\n                    var temp60 = memory[0x40:0x60];\n                    revert(memory[temp60:temp60 + temp57 - temp60 + 0x64]);\n                }\n            } else if (var0 == 0x49cc635d) {\n                // Dispatch table entry for receivePlayerInfo(uint256,address,bytes32,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0326;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                receivePlayerInfo(var2, var3, var4, var5);\n                stop();\n            } else if (var0 == 0x58d162da) {\n                // Dispatch table entry for potSplit_()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033d;\n                var2 = potSplit_();\n                goto label_033D;\n            } else if (var0 == 0x63066434) {\n                // Dispatch table entry for getPlayerVaults(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05c1;\n                var2 = msg.data[0x04:0x24];\n                var1, var2, var3 = getPlayerVaults(var2);\n            \n            label_05C1:\n                var temp61 = memory[0x40:0x60];\n                memory[temp61:temp61 + 0x20] = var1;\n                memory[temp61 + 0x20:temp61 + 0x20 + 0x20] = var2;\n                memory[temp61 + 0x40:temp61 + 0x40 + 0x20] = var3;\n                var temp62 = memory[0x40:0x60];\n                return memory[temp62:temp62 + temp61 - temp62 + 0x60];\n            } else if (var0 == 0x685ffd83) {\n                // Dispatch table entry for registerNameXname(string,bytes32,bool)\n                var temp63 = memory[0x40:0x60];\n                var temp64 = msg.data[0x04:0x24];\n                var temp65 = msg.data[temp64 + 0x04:temp64 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp63 + (temp65 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp63:temp63 + 0x20] = temp65;\n                var1 = 0x0326;\n                memory[temp63 + 0x20:temp63 + 0x20 + temp65] = msg.data[temp64 + 0x24:temp64 + 0x24 + temp65];\n                var2 = temp63;\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                registerNameXname(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x747dff42) {\n                // Dispatch table entry for getCurrentRoundInfo()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0647;\n                var1, var2, var3, var4, var5, var6, var7, var8 = getCurrentRoundInfo();\n                var temp66 = memory[0x40:0x60];\n                memory[temp66:temp66 + 0x20] = var1;\n                memory[temp66 + 0x20:temp66 + 0x20 + 0x20] = var2;\n                memory[temp66 + 0x40:temp66 + 0x40 + 0x20] = var3;\n                memory[temp66 + 0x60:temp66 + 0x60 + 0x20] = var4;\n                memory[temp66 + 0x80:temp66 + 0x80 + 0x20] = var5;\n                memory[temp66 + 0xa0:temp66 + 0xa0 + 0x20] = var6 & 0x02 ** 0xa0 - 0x01;\n                memory[temp66 + 0xc0:temp66 + 0xc0 + 0x20] = var7;\n                memory[temp66 + 0xe0:temp66 + 0xe0 + 0x20] = var8;\n                var temp67 = memory[0x40:0x60];\n                return memory[temp67:temp67 + temp66 - temp67 + 0x0100];\n            } else if (var0 == 0x8f7140ea) {\n                // Dispatch table entry for receivePlayerNameList(uint256,bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0326;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                receivePlayerNameList(var2, var3);\n                stop();\n            } else if (var0 == 0x8f8a5832) {\n                // Dispatch table entry for reLoadXid(uint256,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0326;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                reLoadXid(var2, var3);\n                stop();\n            } else if (var0 == 0x921dec21) {\n                // Dispatch table entry for registerNameXID(string,uint256,bool)\n                var temp68 = memory[0x40:0x60];\n                var temp69 = msg.data[0x04:0x24];\n                var temp70 = msg.data[temp69 + 0x04:temp69 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp68 + (temp70 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp68:temp68 + 0x20] = temp70;\n                var1 = 0x0326;\n                memory[temp68 + 0x20:temp68 + 0x20 + temp70] = msg.data[temp69 + 0x24:temp69 + 0x24 + temp70];\n                var2 = temp68;\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                registerNameXID(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x93204075) {\n                // Dispatch table entry for plyrRnds_(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05c1;\n                var2 = msg.data[0x04:0x24];\n                var2, var3, var4 = plyrRnds_(var2);\n                goto label_05C1;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0364;\n                var2 = symbol();\n                goto label_0364;\n            } else if (var0 == 0xaeeed0db) {\n                // Dispatch table entry for buyXaddr(address)\n                var1 = 0x0326;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x1edd;\n                var3 = func_4073();\n                var4 = 0x00;\n                var5 = var4;\n            \n                if (!!(storage[0x12] & 0xff) == 0x01) {\n                    var6 = msg.sender;\n                    var7 = address(var6).code.length;\n                \n                    if (!var7) {\n                        var8 = msg.value;\n                    \n                        if (var8 < 0x3b9aca00) {\n                            var temp76 = memory[0x40:0x60];\n                            memory[temp76:temp76 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                            memory[temp76 + 0x04:temp76 + 0x04 + 0x20] = 0x20;\n                            memory[temp76 + 0x24:temp76 + 0x24 + 0x20] = 0x10;\n                            var temp77 = memory[0x00:0x20];\n                            memory[0x00:0x20] = code[0x4146:0x4166];\n                            var temp78 = memory[0x00:0x20];\n                            memory[0x00:0x20] = temp77;\n                            memory[temp76 + 0x44:temp76 + 0x44 + 0x20] = temp78;\n                            var temp79 = memory[0x40:0x60];\n                            revert(memory[temp79:temp79 + temp76 - temp79 + 0x64]);\n                        } else if (var8 <= 0x152d02c7e14af6800000) {\n                            var9 = 0x201a;\n                            var10 = var3;\n                            var9 = func_0886(var10);\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = 0x03;\n                            var3 = var9;\n                            var4 = storage[keccak256(memory[0x00:0x40])];\n                            var9 = !(var2 & 0x02 ** 0xa0 - 0x01);\n                        \n                            if (var9) {\n                                if (!var9) {\n                                label_206C:\n                                    memory[0x00:0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x03;\n                                    var temp71 = storage[keccak256(memory[0x00:0x40])];\n                                    memory[0x00:0x20] = var4;\n                                    memory[0x20:0x40] = 0x05;\n                                    var5 = temp71;\n                                \n                                    if (var5 == storage[keccak256(memory[0x00:0x40]) + 0x05]) { goto label_1731; }\n                                \n                                    memory[0x00:0x20] = var4;\n                                    memory[0x20:0x40] = 0x05;\n                                    storage[keccak256(memory[0x00:0x40]) + 0x05] = var5;\n                                    var9 = 0x173c;\n                                    var10 = var4;\n                                    var11 = var5;\n                                    var12 = var3;\n                                    func_0ADA(var10, var11, var12);\n                                    goto label_173C;\n                                } else {\n                                label_2053:\n                                    memory[0x00:0x20] = var4;\n                                    memory[0x20:0x40] = 0x05;\n                                    var5 = storage[keccak256(memory[0x00:0x40]) + 0x05];\n                                    goto label_1731;\n                                }\n                            } else if (msg.sender != var2 & 0x02 ** 0xa0 - 0x01) { goto label_206C; }\n                            else { goto label_2053; }\n                        } else {\n                            var temp72 = memory[0x40:0x60];\n                            memory[temp72:temp72 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                            memory[temp72 + 0x04:temp72 + 0x04 + 0x20] = 0x20;\n                            memory[temp72 + 0x24:temp72 + 0x24 + 0x20] = 0x0e;\n                            var temp73 = memory[0x00:0x20];\n                            memory[0x00:0x20] = code[0x40c6:0x40e6];\n                            var temp74 = memory[0x00:0x20];\n                            memory[0x00:0x20] = temp73;\n                            memory[temp72 + 0x44:temp72 + 0x44 + 0x20] = temp74;\n                            var temp75 = memory[0x40:0x60];\n                            revert(memory[temp75:temp75 + temp72 - temp75 + 0x64]);\n                        }\n                    } else {\n                        var temp80 = memory[0x40:0x60];\n                        memory[temp80:temp80 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp80 + 0x04:temp80 + 0x04 + 0x20] = 0x20;\n                        memory[temp80 + 0x24:temp80 + 0x24 + 0x20] = 0x1f;\n                        var temp81 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x4126:0x4146];\n                        var temp82 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp81;\n                        memory[temp80 + 0x44:temp80 + 0x44 + 0x20] = temp82;\n                        var temp83 = memory[0x40:0x60];\n                        revert(memory[temp83:temp83 + temp80 - temp83 + 0x64]);\n                    }\n                } else {\n                    var temp84 = memory[0x40:0x60];\n                    memory[temp84:temp84 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp84 + 0x04:temp84 + 0x04 + 0x20] = 0x20;\n                    memory[temp84 + 0x24:temp84 + 0x24 + 0x20] = 0x11;\n                    var temp85 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x4106:0x4126];\n                    var temp86 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp85;\n                    memory[temp84 + 0x44:temp84 + 0x44 + 0x20] = temp86;\n                    var temp87 = memory[0x40:0x60];\n                    revert(memory[temp87:temp87 + temp84 - temp87 + 0x64]);\n                }\n            } else if (var0 == 0xc7e284b8) {\n                // Dispatch table entry for getTimeLeft()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033d;\n                var1 = getTimeLeft();\n                goto label_033D;\n            } else if (var0 == 0xcd133c8f) {\n                // Dispatch table entry for buyXid(uint256)\n                var1 = 0x0326;\n                var2 = msg.data[0x04:0x24];\n                buyXid(var2);\n                stop();\n            } else if (var0 == 0xcf808000) {\n                // Dispatch table entry for iWantXKeys(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033d;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x00;\n                var4 = block.timestamp;\n                var5 = var4 > storage[var3] + storage[0x0b];\n            \n                if (!var5) {\n                label_22FB:\n                \n                    if (!var5) {\n                        var5 = 0x1547;\n                        var6 = var2;\n                    \n                    label_380A:\n                        var7 = 0x00;\n                        var8 = 0x381d;\n                        var9 = 0x0de0b6b3a7640000;\n                        var10 = 0x00;\n                        var11 = 0x2c9c;\n                        var12 = var9;\n                        var13 = var12;\n                        var11 = func_366B(var12, var13);\n                        goto label_2C9C;\n                    } else {\n                        var5 = 0x1547;\n                        var6 = var2;\n                        var7 = 0x0e92;\n                        var8 = storage[0x0c];\n                        var9 = var6;\n                        var7 = func_2C41(var8, var9);\n                        var temp88 = var6;\n                        var6 = var7;\n                        var7 = temp88;\n                        var8 = 0x00;\n                        var9 = 0x2e29;\n                        var10 = 0x2e20;\n                        var11 = 0x2e1b;\n                        var12 = var6;\n                        var13 = var7;\n                        var11 = func_375A(var12, var13);\n                        goto label_380A;\n                    }\n                } else {\n                    var5 = var4 <= storage[0x09];\n                \n                    if (var5) { goto label_22FB; }\n                \n                    var5 = var4 > storage[0x09];\n                \n                    if (!var5) { goto label_22FB; }\n                \n                    var5 = !storage[0x08];\n                    goto label_22FB;\n                }\n            } else if (var0 == 0xd53b2679) {\n                // Dispatch table entry for activated_()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0454;\n                var2 = activated_();\n                goto label_0454;\n            } else if (var0 == 0xd87574e0) {\n                // Dispatch table entry for airDropPot_()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033d;\n                var2 = airDropPot_();\n                goto label_033D;\n            } else if (var0 == 0xde7874f3) {\n                // Dispatch table entry for plyr_(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07d5;\n                var2 = msg.data[0x04:0x24];\n                var2, var3, var4, var5, var6, var7 = plyr_(var2);\n                var temp89 = memory[0x40:0x60];\n                memory[temp89:temp89 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp89 + 0x20:temp89 + 0x20 + 0x20] = var3;\n                memory[temp89 + 0x40:temp89 + 0x40 + 0x20] = var4;\n                memory[temp89 + 0x60:temp89 + 0x60 + 0x20] = var5;\n                memory[temp89 + 0x80:temp89 + 0x80 + 0x20] = var6;\n                memory[temp89 + 0xa0:temp89 + 0xa0 + 0x20] = var7;\n                var temp90 = memory[0x40:0x60];\n                return memory[temp90:temp90 + temp89 - temp90 + 0xc0];\n            } else if (var0 == 0xee0b5d8b) {\n                // Dispatch table entry for getPlayerInfoByAddress(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0833;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x00;\n                var4 = var3;\n                var5 = 0x00;\n                var6 = var5;\n                var7 = 0x00;\n                var8 = var7;\n                var9 = 0x00;\n                memory[0x00:0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n                var temp91 = storage[keccak256(memory[0x00:0x40])];\n                memory[0x00:0x20] = temp91;\n                memory[0x20:0x40] = 0x05;\n                var temp92 = keccak256(memory[0x00:0x40]);\n                memory[0x20:0x40] = 0x06;\n                var12 = storage[temp92 + 0x01];\n                var temp93 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n                memory[0x20:0x40] = 0x05;\n                var10 = temp91;\n                var11 = var10;\n                var14 = storage[temp92 + 0x02];\n                var13 = temp93;\n                var15 = 0x23cb;\n                var16 = 0x19be;\n                var17 = var11;\n                goto label_37BA;\n            } else if (var0 == 0xfb9073eb) {\n                // Dispatch table entry for reLoadXname(bytes32,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0326;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                reLoadXname(var2, var3);\n                stop();\n            } else { goto label_0187; }\n        }\n    }\n    \n    function func_0886(var arg0) returns (var r0) {\n        var var0 = 0x088e;\n        var0 = func_4073();\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (var1) {\n        label_0AD1:\n            return arg0;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0xe56556a9 * 0x02 ** 0xe0;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n            var temp1 = memory[0x40:0x60];\n            var temp2 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x40e6:0x4106];\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp2;\n            var var4 = temp3;\n            var var5 = 0xe56556a9;\n            var var6 = temp0 + 0x24;\n            var var7 = 0x20;\n            var var8 = temp1;\n            var var9 = temp0 - var8 + 0x24;\n            var var10 = var8;\n            var var11 = 0x00;\n            var var12 = var4;\n            var var13 = !address(var12).code.length;\n        \n            if (var13) { revert(memory[0x00:0x00]); }\n        \n            var temp4;\n            temp4, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n            var7 = !temp4;\n        \n            if (!var7) {\n                var4 = memory[0x40:0x60];\n                var5 = returndata.length;\n            \n                if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp5 = memory[var4:var4 + 0x20];\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = 0x20b8decb * 0x02 ** 0xe2;\n                memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = temp5;\n                var temp7 = memory[0x40:0x60];\n                var1 = temp5;\n                var temp8 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x40e6:0x4106];\n                var temp9 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp8;\n                var4 = temp9;\n                var5 = 0x82e37b2c;\n                var6 = temp6 + 0x24;\n                var7 = 0x20;\n                var8 = temp7;\n                var9 = temp6 - var8 + 0x24;\n                var10 = var8;\n                var11 = 0x00;\n                var12 = var4;\n                var13 = !address(var12).code.length;\n            \n                if (var13) { revert(memory[0x00:0x00]); }\n            \n                var temp10;\n                temp10, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n                var7 = !temp10;\n            \n                if (!var7) {\n                    var4 = memory[0x40:0x60];\n                    var5 = returndata.length;\n                \n                    if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp11 = memory[var4:var4 + 0x20];\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = 0xe3c08adf * 0x02 ** 0xe0;\n                    memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = var1;\n                    var temp13 = memory[0x40:0x60];\n                    var2 = temp11;\n                    var temp14 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x40e6:0x4106];\n                    var temp15 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp14;\n                    var4 = temp15;\n                    var5 = 0xe3c08adf;\n                    var6 = temp12 + 0x24;\n                    var7 = 0x20;\n                    var8 = temp13;\n                    var9 = temp12 - var8 + 0x24;\n                    var10 = var8;\n                    var11 = 0x00;\n                    var12 = var4;\n                    var13 = !address(var12).code.length;\n                \n                    if (var13) { revert(memory[0x00:0x00]); }\n                \n                    var temp16;\n                    temp16, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n                    var7 = !temp16;\n                \n                    if (!var7) {\n                        var4 = memory[0x40:0x60];\n                        var5 = returndata.length;\n                    \n                        if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var temp17 = memory[var4:var4 + 0x20];\n                        var temp18 = msg.sender;\n                        memory[0x00:0x20] = temp18;\n                        memory[0x20:0x40] = 0x03;\n                        var temp19 = var1;\n                        storage[keccak256(memory[0x00:0x40])] = temp19;\n                        memory[0x00:0x20] = temp19;\n                        memory[0x20:0x40] = 0x05;\n                        var temp20 = keccak256(memory[0x00:0x40]);\n                        storage[temp20] = temp18 | (storage[temp20] & ~(0x02 ** 0xa0 - 0x01));\n                        var3 = temp17;\n                    \n                        if (!var2) {\n                            var4 = !!var3;\n                        \n                            if (!var3) {\n                            label_0AAE:\n                            \n                                if (!var4) {\n                                label_0AC9:\n                                    var temp21 = arg0;\n                                    memory[temp21:temp21 + 0x20] = memory[temp21:temp21 + 0x20] + 0x01;\n                                    goto label_0AD1;\n                                } else {\n                                label_0AB4:\n                                    memory[0x00:0x20] = var1;\n                                    memory[0x20:0x40] = 0x05;\n                                    storage[keccak256(memory[0x00:0x40]) + 0x05] = var3;\n                                    var temp22 = arg0;\n                                    memory[temp22:temp22 + 0x20] = memory[temp22:temp22 + 0x20] + 0x01;\n                                    goto label_0AD1;\n                                }\n                            } else {\n                            label_0AA9:\n                            \n                                if (var3 == var1) { goto label_0AC9; }\n                                else { goto label_0AB4; }\n                            }\n                        } else {\n                            var temp23 = var2;\n                            memory[0x00:0x20] = temp23;\n                            memory[0x20:0x40] = 0x04;\n                            var temp24 = var1;\n                            storage[keccak256(memory[0x00:0x40])] = temp24;\n                            memory[0x00:0x20] = temp24;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40]) + 0x01] = temp23;\n                            memory[0x20:0x40] = 0x07;\n                            var temp25 = keccak256(memory[0x00:0x40]);\n                            memory[0x00:0x20] = temp23;\n                            memory[0x20:0x40] = temp25;\n                            var temp26 = keccak256(memory[0x00:0x40]);\n                            storage[temp26] = (storage[temp26] & ~0xff) | 0x01;\n                            var4 = !!var3;\n                        \n                            if (!var3) { goto label_0AAE; }\n                            else { goto label_0AA9; }\n                        }\n                    } else {\n                        var temp27 = returndata.length;\n                        memory[0x00:0x00 + temp27] = returndata[0x00:0x00 + temp27];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp28 = returndata.length;\n                    memory[0x00:0x00 + temp28] = returndata[0x00:0x00 + temp28];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp29 = returndata.length;\n                memory[0x00:0x00 + temp29] = returndata[0x00:0x00 + temp29];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        }\n    }\n    \n    function func_0ADA(var arg0, var arg1, var arg2) {\n        var var0 = block.timestamp;\n        var var1 = var0 > storage[0x00] + storage[0x0b];\n    \n        if (!var1) {\n        label_0B09:\n        \n            if (!var1) {\n                var1 = var0 > storage[0x09];\n            \n                if (!var1) {\n                    if (!var1) {\n                    label_0C18:\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x05;\n                        var1 = 0x0c3a;\n                        var var2 = storage[keccak256(memory[0x00:0x40]) + 0x03];\n                        var var3 = msg.value;\n                        var1 = func_2C41(var2, var3);\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x05;\n                        storage[keccak256(memory[0x00:0x40]) + 0x03] = var1;\n                    \n                    label_0C4D:\n                        return;\n                    } else {\n                    label_0B39:\n                        storage[0x0a] = (storage[0x0a] & ~0xff) | 0x01;\n                        var1 = 0x0b4e;\n                        var2 = arg2;\n                        var1 = func_2A07(var2);\n                        var temp0 = var1;\n                        memory[temp0:temp0 + 0x20] = var0 * 0x0de0b6b3a7640000 + memory[temp0:temp0 + 0x20];\n                        var temp1 = temp0 + 0x20;\n                        var temp2 = arg0;\n                        memory[temp1:temp1 + 0x20] = temp2 + memory[temp1:temp1 + 0x20];\n                        memory[0x00:0x20] = temp2;\n                        memory[0x20:0x40] = 0x05;\n                        var temp3 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n                        var temp4 = memory[temp0:temp0 + 0x20];\n                        var temp5 = memory[temp1:temp1 + 0x20];\n                        var temp6 = memory[temp0 + 0x40:temp0 + 0x40 + 0x20];\n                        var temp7 = memory[temp0 + 0x60:temp0 + 0x60 + 0x20];\n                        var temp8 = memory[temp0 + 0x80:temp0 + 0x80 + 0x20];\n                        var temp9 = memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20];\n                        var temp10 = memory[temp0 + 0xc0:temp0 + 0xc0 + 0x20];\n                        var temp11 = memory[0x40:0x60];\n                        memory[temp11:temp11 + 0x20] = msg.sender;\n                        memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = temp3;\n                        memory[temp11 + 0x40:temp11 + 0x40 + 0x20] = msg.value;\n                        memory[temp11 + 0x60:temp11 + 0x60 + 0x20] = temp4;\n                        memory[temp11 + 0x80:temp11 + 0x80 + 0x20] = temp5;\n                        memory[temp11 + 0xa0:temp11 + 0xa0 + 0x20] = temp6 & 0x02 ** 0xa0 - 0x01;\n                        memory[temp11 + 0xc0:temp11 + 0xc0 + 0x20] = temp7;\n                        memory[temp11 + 0xe0:temp11 + 0xe0 + 0x20] = temp8;\n                        memory[temp11 + 0x0100:temp11 + 0x0100 + 0x20] = temp9;\n                        memory[temp11 + 0x0120:temp11 + 0x0120 + 0x20] = temp10;\n                        var temp12 = memory[0x40:0x60];\n                        arg2 = temp0;\n                        log(memory[temp12:temp12 + temp11 - temp12 + 0x0140], [0x5905265be09e3f6f7813c1dce4febfad76d4b3a46288aa344d2531532c3519c9]);\n                        goto label_0C18;\n                    }\n                } else if (storage[0x0a] & 0xff) { goto label_0C18; }\n                else { goto label_0B39; }\n            } else {\n                var1 = 0x0b1a;\n                var2 = arg0;\n                var3 = msg.value;\n                var var4 = arg1;\n                var var5 = arg2;\n                func_25D2(var2, var3, var4, var5);\n                goto label_0C4D;\n            }\n        } else {\n            var1 = var0 <= storage[0x09];\n        \n            if (var1) { goto label_0B09; }\n        \n            var1 = var0 > storage[0x09];\n        \n            if (!var1) { goto label_0B09; }\n        \n            var1 = !storage[0x08];\n            goto label_0B09;\n        }\n    }\n    \n    function reLoadXaddr(var arg0, var arg1) {\n        var var0 = 0x0c5b;\n        var0 = func_4073();\n        var var1 = 0x00;\n        var var2 = var1;\n    \n        if (!!(storage[0x12] & 0xff) == 0x01) {\n            var var3 = msg.sender;\n            var var4 = address(var3).code.length;\n        \n            if (!var4) {\n                var var5 = arg1;\n            \n                if (var5 < 0x3b9aca00) {\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n                    memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x10;\n                    var temp6 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x4146:0x4166];\n                    var temp7 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp6;\n                    memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = temp7;\n                    var temp8 = memory[0x40:0x60];\n                    revert(memory[temp8:temp8 + temp5 - temp8 + 0x64]);\n                } else if (var5 <= 0x152d02c7e14af6800000) {\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x03;\n                    var1 = storage[keccak256(memory[0x00:0x40])];\n                    var var6 = !(arg0 & 0x02 ** 0xa0 - 0x01);\n                \n                    if (var6) {\n                        if (!var6) {\n                        label_0DDE:\n                            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x03;\n                            var temp0 = storage[keccak256(memory[0x00:0x40])];\n                            memory[0x00:0x20] = var1;\n                            memory[0x20:0x40] = 0x05;\n                            var2 = temp0;\n                        \n                            if (var2 == storage[keccak256(memory[0x00:0x40]) + 0x05]) {\n                            label_0E26:\n                                var6 = 0x0e32;\n                                var var7 = var1;\n                                var var8 = var2;\n                                var var9 = arg1;\n                                var var10 = var0;\n                                func_2CA2(var7, var8, var9, var10);\n                                return;\n                            } else {\n                                memory[0x00:0x20] = var1;\n                                memory[0x20:0x40] = 0x05;\n                                storage[keccak256(memory[0x00:0x40]) + 0x05] = var2;\n                                goto label_0E26;\n                            }\n                        } else {\n                        label_0DC5:\n                            memory[0x00:0x20] = var1;\n                            memory[0x20:0x40] = 0x05;\n                            var2 = storage[keccak256(memory[0x00:0x40]) + 0x05];\n                            goto label_0E26;\n                        }\n                    } else if (msg.sender != arg0 & 0x02 ** 0xa0 - 0x01) { goto label_0DDE; }\n                    else { goto label_0DC5; }\n                } else {\n                    var temp1 = memory[0x40:0x60];\n                    memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n                    memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x0e;\n                    var temp2 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x40c6:0x40e6];\n                    var temp3 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp2;\n                    memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = temp3;\n                    var temp4 = memory[0x40:0x60];\n                    revert(memory[temp4:temp4 + temp1 - temp4 + 0x64]);\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x1f;\n                var temp10 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x4126:0x4146];\n                var temp11 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp10;\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = temp11;\n                var temp12 = memory[0x40:0x60];\n                revert(memory[temp12:temp12 + temp9 - temp12 + 0x64]);\n            }\n        } else {\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x11;\n            var temp14 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x4106:0x4126];\n            var temp15 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp14;\n            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = temp15;\n            var temp16 = memory[0x40:0x60];\n            revert(memory[temp16:temp16 + temp13 - temp16 + 0x64]);\n        }\n    }\n    \n    function getBuyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = block.timestamp;\n        var var2 = var1 > storage[var0] + storage[0x0b];\n    \n        if (!var2) {\n        label_0E6C:\n        \n            if (!var2) { return 0x44364c5bb000; }\n        \n            var2 = 0x0e9e;\n            var var3 = 0x0de0b6b3a7640000;\n            var var4 = 0x0e92;\n            var var5 = storage[0x0c];\n            var var6 = var3;\n            var4 = func_2C41(var5, var6);\n            var temp0 = var3;\n            var3 = var4;\n            var4 = temp0;\n            var5 = 0x00;\n            var6 = 0x2e29;\n            var var7 = 0x2e20;\n            var var8 = 0x2e1b;\n            var var9 = var3;\n            var var10 = var4;\n            var8 = func_375A(var9, var10);\n            var9 = 0x00;\n            var10 = 0x381d;\n            var var11 = 0x0de0b6b3a7640000;\n            var var12 = 0x00;\n            var var13 = 0x2c9c;\n            var var14 = var11;\n            var var15 = var14;\n            var13 = func_366B(var14, var15);\n            var10 = var13;\n            // Error: Could not resolve jump destination!\n        } else {\n            var2 = var1 <= storage[0x09];\n        \n            if (var2) { goto label_0E6C; }\n        \n            var2 = var1 > storage[0x09];\n        \n            if (!var2) { goto label_0E6C; }\n        \n            var2 = !storage[0x08];\n            goto label_0E6C;\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x10;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x5261745363616d20526f756e6420233100000000000000000000000000000000;\n        return r0;\n    }\n    \n    function activate() {\n        if (msg.sender != 0xc14f8469d4bb31c8e69fae9c16e262f45edc3635) {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x17;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x6f6e6c79206f776e65722063616e206163746976617465000000000000000000;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n        } else if (!(storage[0x12] & 0xff)) {\n            storage[0x12] = (storage[0x12] & ~0xff) | 0x01;\n            var temp0 = block.timestamp;\n            storage[0x0b] = temp0 - storage[0x00];\n            storage[0x09] = temp0 + 0x0e10;\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x19;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x7261747363616d20616c72656164792061637469766174656400000000000000;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function pIDxAddr_(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function airDropTracker_() returns (var r0) { return storage[0x02]; }\n    \n    function fees_() returns (var r0) { return storage[0x10]; }\n    \n    function plyrNames_(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function pIDxName_(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function round_() returns (var r0, var r1, var r2, var r3, var r4, var r5, var r6, var r7) {\n        r0 = storage[0x08];\n        r1 = storage[0x09];\n        r3 = storage[0x0b];\n        r4 = storage[0x0c];\n        r5 = storage[0x0d];\n        r6 = storage[0x0e];\n        r7 = storage[0x0f];\n        r2 = storage[0x0a] & 0xff;\n        return r0, r1, r2, r3, r4, r5, r6, r7;\n    }\n    \n    function registerNameXaddr(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = msg.sender;\n        var var7 = address(var6).code.length;\n    \n        if (!var7) {\n            var var8 = 0x13b9;\n            var var9 = arg0;\n            var8 = func_2EAB(var9);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0xaa4d490b * 0x02 ** 0xe0;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = var8;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = !!arg2;\n            var temp1 = memory[0x40:0x60];\n            var0 = var8;\n            var1 = msg.sender;\n            var2 = msg.value;\n            var temp2 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x40e6:0x4106];\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp2;\n            var8 = temp3;\n            var9 = 0xaa4d490b;\n            var var12 = 0x40;\n            var var10 = var2;\n            var var11 = temp0 + 0x84;\n            var var13 = temp1;\n            var var14 = temp0 - var13 + 0x84;\n            var var15 = var13;\n            var var16 = var10;\n            var var17 = var8;\n            var var18 = !address(var17).code.length;\n        \n            if (var18) { revert(memory[0x00:0x00]); }\n        \n            var temp4;\n            temp4, memory[var13:var13 + var12] = address(var17).call.gas(msg.gas).value(var16)(memory[var15:var15 + var14]);\n            var12 = !temp4;\n        \n            if (!var12) {\n                var8 = memory[0x40:0x60];\n                var9 = returndata.length;\n            \n                if (var9 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var temp5 = var8;\n                var temp6 = memory[temp5:temp5 + 0x20];\n                var temp7 = memory[temp5 + 0x20:temp5 + 0x20 + 0x20];\n                var temp8 = 0x02 ** 0xa0 - 0x01;\n                var temp9 = var1 & temp8;\n                memory[0x00:0x20] = temp9;\n                memory[0x20:0x40] = 0x03;\n                var temp10 = storage[keccak256(memory[0x00:0x40])];\n                memory[0x00:0x20] = temp7;\n                memory[0x20:0x40] = 0x05;\n                var temp11 = keccak256(memory[0x00:0x40]);\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = !!temp6;\n                memory[temp12 + 0x20:temp12 + 0x20 + 0x20] = temp7;\n                memory[temp12 + 0x40:temp12 + 0x40 + 0x20] = temp8 & storage[temp11];\n                memory[temp12 + 0x60:temp12 + 0x60 + 0x20] = storage[temp11 + 0x01];\n                memory[temp12 + 0x80:temp12 + 0x80 + 0x20] = var2;\n                memory[temp12 + 0xa0:temp12 + 0xa0 + 0x20] = block.timestamp;\n                var temp13 = memory[0x40:0x60];\n                log(memory[temp13:temp13 + temp12 - temp13 + 0xc0], [0xdd6176433ff5026bbce96b068584b7bbe3514227e72df9c630b749ae87e64442, storage[keccak256(memory[0x00:0x40])], stack[-9] & 0x02 ** 0xa0 - 0x01, stack[-10]]);\n                return;\n            } else {\n                var temp14 = returndata.length;\n                memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n            memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x1f;\n            var temp16 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x4126:0x4146];\n            var temp17 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp16;\n            memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = temp17;\n            var temp18 = memory[0x40:0x60];\n            revert(memory[temp18:temp18 + temp15 - temp18 + 0x64]);\n        }\n    }\n    \n    function receivePlayerInfo(var arg0, var arg1, var arg2, var arg3) {\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x40e6:0x4106];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n    \n        if (temp1 == msg.sender) {\n            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n        \n            if (arg0 == storage[keccak256(memory[0x00:0x40])]) {\n                memory[0x00:0x20] = arg2;\n                memory[0x20:0x40] = 0x04;\n            \n                if (arg0 == storage[keccak256(memory[0x00:0x40])]) {\n                label_181B:\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x05;\n                    var temp2 = 0x02 ** 0xa0 - 0x01;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] & temp2 == temp2 & arg1) {\n                    label_1864:\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x05;\n                    \n                        if (arg2 == storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                        label_1891:\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x05;\n                        \n                            if (arg3 == storage[keccak256(memory[0x00:0x40]) + 0x05]) {\n                            label_18C0:\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x07;\n                                var temp3 = keccak256(memory[0x00:0x40]);\n                                memory[0x00:0x20] = arg2;\n                                memory[0x20:0x40] = temp3;\n                            \n                                if (storage[keccak256(memory[0x00:0x40])] & 0xff) {\n                                label_0C4D:\n                                    return;\n                                } else {\n                                label_18E4:\n                                    memory[0x00:0x20] = arg0;\n                                    memory[0x20:0x40] = 0x07;\n                                    var temp4 = keccak256(memory[0x00:0x40]);\n                                    memory[0x00:0x20] = arg2;\n                                    memory[0x20:0x40] = temp4;\n                                    var temp5 = keccak256(memory[0x00:0x40]);\n                                    storage[temp5] = (storage[temp5] & ~0xff) | 0x01;\n                                    return;\n                                }\n                            } else {\n                            label_18AB:\n                                var temp6 = arg0;\n                                memory[0x00:0x20] = temp6;\n                                memory[0x20:0x40] = 0x05;\n                                storage[keccak256(memory[0x00:0x40]) + 0x05] = arg3;\n                                memory[0x00:0x20] = temp6;\n                                memory[0x20:0x40] = 0x07;\n                                var temp7 = keccak256(memory[0x00:0x40]);\n                                memory[0x00:0x20] = arg2;\n                                memory[0x20:0x40] = temp7;\n                            \n                                if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_0C4D; }\n                                else { goto label_18E4; }\n                            }\n                        } else {\n                        label_187D:\n                            var temp8 = arg0;\n                            memory[0x00:0x20] = temp8;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40]) + 0x01] = arg2;\n                            memory[0x00:0x20] = temp8;\n                            memory[0x20:0x40] = 0x05;\n                        \n                            if (arg3 == storage[keccak256(memory[0x00:0x40]) + 0x05]) { goto label_18C0; }\n                            else { goto label_18AB; }\n                        }\n                    } else {\n                    label_183D:\n                        var temp9 = arg0;\n                        memory[0x00:0x20] = temp9;\n                        memory[0x20:0x40] = 0x05;\n                        var temp10 = keccak256(memory[0x00:0x40]);\n                        storage[temp10] = (arg1 & 0x02 ** 0xa0 - 0x01) | (storage[temp10] & ~(0x02 ** 0xa0 - 0x01));\n                        memory[0x00:0x20] = temp9;\n                        memory[0x20:0x40] = 0x05;\n                    \n                        if (arg2 == storage[keccak256(memory[0x00:0x40]) + 0x01]) { goto label_1891; }\n                        else { goto label_187D; }\n                    }\n                } else {\n                label_180A:\n                    memory[0x00:0x20] = arg2;\n                    memory[0x20:0x40] = 0x04;\n                    var temp11 = arg0;\n                    storage[keccak256(memory[0x00:0x40])] = temp11;\n                    memory[0x00:0x20] = temp11;\n                    memory[0x20:0x40] = 0x05;\n                    var temp12 = 0x02 ** 0xa0 - 0x01;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] & temp12 == temp12 & arg1) { goto label_1864; }\n                    else { goto label_183D; }\n                }\n            } else {\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n                var temp13 = arg0;\n                storage[keccak256(memory[0x00:0x40])] = temp13;\n                memory[0x00:0x20] = arg2;\n                memory[0x20:0x40] = 0x04;\n            \n                if (temp13 == storage[keccak256(memory[0x00:0x40])]) { goto label_181B; }\n                else { goto label_180A; }\n            }\n        } else {\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp14 + 0x04:temp14 + 0x04 + 0x20] = 0x20;\n            memory[temp14 + 0x24:temp14 + 0x24 + 0x20] = 0x23;\n            memory[temp14 + 0x44:temp14 + 0x44 + 0x20] = 0x6f6e6c7920526174426f6f6b2063616e2063616c6c20746869732066756e6374;\n            memory[temp14 + 0x64:temp14 + 0x64 + 0x20] = 0x34b7b7 * 0x02 ** 0xe9;\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + temp14 - temp15 + 0x84]);\n        }\n    }\n    \n    function potSplit_() returns (var r0) { return storage[0x11]; }\n    \n    function getPlayerVaults(var arg0) returns (var r0, var arg0, var r2) {\n        r2 = 0x00;\n        var var1 = r2;\n        var var2 = 0x00;\n        var var3 = block.timestamp > storage[0x09];\n    \n        if (var3) {\n            var3 = !(storage[0x0a] & 0xff);\n        \n            if (!var3) { goto label_193C; }\n            else { goto label_1936; }\n        } else if (!var3) {\n        label_193C:\n        \n            if (!var3) {\n            label_1A2D:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x05;\n                var3 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                var var4 = 0x19dc;\n                var var5 = 0x19be;\n                var var6 = arg0;\n                var var7 = 0x00;\n                memory[var7:var7 + 0x20] = var6;\n                memory[0x20:0x40] = 0x06;\n                var temp0 = keccak256(memory[var7:var7 + 0x40]);\n                var var8 = 0x2c9c;\n                var var9 = storage[temp0 + 0x02];\n                var var10 = 0x0de0b6b3a7640000;\n                var var12 = storage[0x0f];\n                var var11 = 0x37f4;\n                var var13 = storage[temp0 + 0x01];\n                var11 = func_366B(var12, var13);\n                var8 = func_37F4(var9, var10, var11);\n                var5 = var8;\n                // Error: Could not resolve jump destination!\n            } else {\n            label_1942:\n            \n                if (arg0 != storage[0x08]) {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x05;\n                    var temp1 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                    memory[0x20:0x40] = 0x06;\n                    var3 = temp1;\n                    var4 = 0x19dc;\n                    var6 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                    var5 = 0x19be;\n                    var7 = 0x19b2;\n                    var8 = arg0;\n                    var7 = func_36E2(var8);\n                    var5 = func_19B2(var6, var7);\n                    var4 = func_19BE(arg0, var5);\n                \n                label_19DC:\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x05;\n                    r2 = var3;\n                    var1 = var4;\n                    var2 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                    var temp2 = r2;\n                    r2 = var2;\n                    r0 = temp2;\n                    arg0 = var1;\n                    return r0, arg0, r2;\n                } else {\n                    var3 = 0x198f;\n                    var4 = 0x64;\n                    var5 = 0x1966;\n                    var6 = storage[0x0e];\n                    var7 = 0x30;\n                    var5 = func_366B(var6, var7);\n                    var3 = func_1966(arg0, var4, var5);\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x06;\n                    var4 = 0x19dc;\n                    var6 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                    var5 = 0x19be;\n                    var7 = 0x19b2;\n                    var8 = arg0;\n                    var7 = func_36E2(var8);\n                    var5 = func_19B2(var6, var7);\n                    var4 = func_19BE(arg0, var5);\n                    goto label_19DC;\n                }\n            }\n        } else {\n        label_1936:\n        \n            if (!storage[0x08]) { goto label_1A2D; }\n            else { goto label_1942; }\n        }\n    }\n    \n    function func_1966(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = arg1;\n        arg1 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n        arg2 = arg2 / temp0;\n        r0 = func_2C41(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_19B2(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_375A(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_19BE(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = arg1;\n        arg1 = storage[keccak256(memory[0x00:0x40]) + 0x03];\n        var var0 = temp0;\n        r0 = func_2C41(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function registerNameXname(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = msg.sender;\n        var var7 = address(var6).code.length;\n    \n        if (!var7) {\n            var var8 = 0x1aa9;\n            var var9 = arg0;\n            var8 = func_2EAB(var9);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x745ea0c1 * 0x02 ** 0xe0;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = var8;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = arg1;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = !!arg2;\n            var temp1 = memory[0x40:0x60];\n            var0 = var8;\n            var1 = msg.sender;\n            var2 = msg.value;\n            var temp2 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x40e6:0x4106];\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp2;\n            var8 = temp3;\n            var var12 = 0x40;\n            var9 = 0x745ea0c1;\n            var var10 = var2;\n            var var11 = temp0 + 0x84;\n            var var13 = temp1;\n            var var14 = temp0 - var13 + 0x84;\n            var var15 = var13;\n            var var16 = var10;\n            var var17 = var8;\n            var var18 = !address(var17).code.length;\n        \n            if (var18) { revert(memory[0x00:0x00]); }\n        \n            var temp4;\n            temp4, memory[var13:var13 + var12] = address(var17).call.gas(msg.gas).value(var16)(memory[var15:var15 + var14]);\n            var12 = !temp4;\n        \n            if (!var12) {\n                var8 = memory[0x40:0x60];\n                var9 = returndata.length;\n            \n                if (var9 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var temp5 = var8;\n                var temp6 = memory[temp5:temp5 + 0x20];\n                var temp7 = memory[temp5 + 0x20:temp5 + 0x20 + 0x20];\n                var temp8 = 0x02 ** 0xa0 - 0x01;\n                var temp9 = var1 & temp8;\n                memory[0x00:0x20] = temp9;\n                memory[0x20:0x40] = 0x03;\n                var temp10 = storage[keccak256(memory[0x00:0x40])];\n                memory[0x00:0x20] = temp7;\n                memory[0x20:0x40] = 0x05;\n                var temp11 = keccak256(memory[0x00:0x40]);\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = !!temp6;\n                memory[temp12 + 0x20:temp12 + 0x20 + 0x20] = temp7;\n                memory[temp12 + 0x40:temp12 + 0x40 + 0x20] = temp8 & storage[temp11];\n                memory[temp12 + 0x60:temp12 + 0x60 + 0x20] = storage[temp11 + 0x01];\n                memory[temp12 + 0x80:temp12 + 0x80 + 0x20] = var2;\n                memory[temp12 + 0xa0:temp12 + 0xa0 + 0x20] = block.timestamp;\n                var temp13 = memory[0x40:0x60];\n                log(memory[temp13:temp13 + temp12 - temp13 + 0xc0], [0xdd6176433ff5026bbce96b068584b7bbe3514227e72df9c630b749ae87e64442, storage[keccak256(memory[0x00:0x40])], stack[-9] & 0x02 ** 0xa0 - 0x01, stack[-10]]);\n                return;\n            } else {\n                var temp14 = returndata.length;\n                memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n            memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x1f;\n            var temp16 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x4126:0x4146];\n            var temp17 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp16;\n            memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = temp17;\n            var temp18 = memory[0x40:0x60];\n            revert(memory[temp18:temp18 + temp15 - temp18 + 0x64]);\n        }\n    }\n    \n    function getCurrentRoundInfo() returns (var r0, var r1, var r2, var r3, var r4, var r5, var r6, var r7) {\n        memory[0x00:0x20] = storage[0x08];\n        memory[0x20:0x40] = 0x05;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        r7 = storage[0x01] * 0x03e8 + storage[0x02];\n        r6 = storage[temp0 + 0x01];\n        r5 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r4 = storage[0x08];\n        r3 = storage[0x0e];\n        r2 = storage[0x0b];\n        r1 = storage[0x09];\n        r0 = storage[0x0c];\n        return r0, r1, r2, r3, r4, r5, r6, r7;\n    }\n    \n    function receivePlayerNameList(var arg0, var arg1) {\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x40e6:0x4106];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n    \n        if (temp1 == msg.sender) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x07;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = temp2;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { return; }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x07;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = temp3;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n            return;\n        } else {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n            memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x23;\n            memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = 0x6f6e6c7920526174426f6f6b2063616e2063616c6c20746869732066756e6374;\n            memory[temp5 + 0x64:temp5 + 0x64 + 0x20] = 0x34b7b7 * 0x02 ** 0xe9;\n            var temp6 = memory[0x40:0x60];\n            revert(memory[temp6:temp6 + temp5 - temp6 + 0x84]);\n        }\n    }\n    \n    function reLoadXid(var arg0, var arg1) {\n        var var0 = 0x1c26;\n        var0 = func_4073();\n        var var1 = 0x00;\n    \n        if (!!(storage[0x12] & 0xff) == 0x01) {\n            var var2 = msg.sender;\n            var var3 = address(var2).code.length;\n        \n            if (!var3) {\n                var var4 = arg1;\n            \n                if (var4 < 0x3b9aca00) {\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                    memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x10;\n                    var temp5 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x4146:0x4166];\n                    var temp6 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp5;\n                    memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = temp6;\n                    var temp7 = memory[0x40:0x60];\n                    revert(memory[temp7:temp7 + temp4 - temp7 + 0x64]);\n                } else if (var4 <= 0x152d02c7e14af6800000) {\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x03;\n                    var1 = storage[keccak256(memory[0x00:0x40])];\n                    var var5 = !arg0;\n                \n                    if (var5) {\n                        if (!var5) {\n                        label_1D95:\n                            memory[0x00:0x20] = var1;\n                            memory[0x20:0x40] = 0x05;\n                        \n                            if (arg0 == storage[keccak256(memory[0x00:0x40]) + 0x05]) {\n                            label_1DC4:\n                                var5 = 0x173c;\n                                var var6 = var1;\n                                var var7 = arg0;\n                                var var8 = arg1;\n                                var var9 = var0;\n                                func_2CA2(var6, var7, var8, var9);\n                            \n                            label_173C:\n                                return;\n                            } else {\n                                memory[0x00:0x20] = var1;\n                                memory[0x20:0x40] = 0x05;\n                                storage[keccak256(memory[0x00:0x40]) + 0x05] = arg0;\n                                var5 = 0x173c;\n                                var6 = var1;\n                                var7 = arg0;\n                                var8 = arg1;\n                                var9 = var0;\n                                func_2CA2(var6, var7, var8, var9);\n                                goto label_173C;\n                            }\n                        } else {\n                        label_1D7C:\n                            memory[0x00:0x20] = var1;\n                            memory[0x20:0x40] = 0x05;\n                            arg0 = storage[keccak256(memory[0x00:0x40]) + 0x05];\n                            goto label_1DC4;\n                        }\n                    } else if (arg0 != var1) { goto label_1D95; }\n                    else { goto label_1D7C; }\n                } else {\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                    memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x0e;\n                    var temp1 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x40c6:0x40e6];\n                    var temp2 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp1;\n                    memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp2;\n                    var temp3 = memory[0x40:0x60];\n                    revert(memory[temp3:temp3 + temp0 - temp3 + 0x64]);\n                }\n            } else {\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n                memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x1f;\n                var temp9 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x4126:0x4146];\n                var temp10 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp9;\n                memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = temp10;\n                var temp11 = memory[0x40:0x60];\n                revert(memory[temp11:temp11 + temp8 - temp11 + 0x64]);\n            }\n        } else {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n            memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x11;\n            var temp13 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x4106:0x4126];\n            var temp14 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp13;\n            memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = temp14;\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + temp12 - temp15 + 0x64]);\n        }\n    }\n    \n    function registerNameXID(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = msg.sender;\n        var var7 = address(var6).code.length;\n    \n        if (!var7) {\n            var var8 = 0x1e27;\n            var var9 = arg0;\n            var8 = func_2EAB(var9);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0xc0942dfd * 0x02 ** 0xe0;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = var8;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = arg1;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = !!arg2;\n            var temp1 = memory[0x40:0x60];\n            var0 = var8;\n            var1 = msg.sender;\n            var2 = msg.value;\n            var temp2 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x40e6:0x4106];\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp2;\n            var8 = temp3;\n            var9 = 0xc0942dfd;\n            var var12 = 0x40;\n            var var10 = var2;\n            var var11 = temp0 + 0x84;\n            var var13 = temp1;\n            var var14 = temp0 - var13 + 0x84;\n            var var15 = var13;\n            var var16 = var10;\n            var var17 = var8;\n            var var18 = !address(var17).code.length;\n        \n            if (var18) { revert(memory[0x00:0x00]); }\n        \n            var temp4;\n            temp4, memory[var13:var13 + var12] = address(var17).call.gas(msg.gas).value(var16)(memory[var15:var15 + var14]);\n            var12 = !temp4;\n        \n            if (!var12) {\n                var8 = memory[0x40:0x60];\n                var9 = returndata.length;\n            \n                if (var9 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var temp5 = var8;\n                var temp6 = memory[temp5:temp5 + 0x20];\n                var temp7 = memory[temp5 + 0x20:temp5 + 0x20 + 0x20];\n                var temp8 = 0x02 ** 0xa0 - 0x01;\n                var temp9 = var1 & temp8;\n                memory[0x00:0x20] = temp9;\n                memory[0x20:0x40] = 0x03;\n                var temp10 = storage[keccak256(memory[0x00:0x40])];\n                memory[0x00:0x20] = temp7;\n                memory[0x20:0x40] = 0x05;\n                var temp11 = keccak256(memory[0x00:0x40]);\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = !!temp6;\n                memory[temp12 + 0x20:temp12 + 0x20 + 0x20] = temp7;\n                memory[temp12 + 0x40:temp12 + 0x40 + 0x20] = temp8 & storage[temp11];\n                memory[temp12 + 0x60:temp12 + 0x60 + 0x20] = storage[temp11 + 0x01];\n                memory[temp12 + 0x80:temp12 + 0x80 + 0x20] = var2;\n                memory[temp12 + 0xa0:temp12 + 0xa0 + 0x20] = block.timestamp;\n                var temp13 = memory[0x40:0x60];\n                log(memory[temp13:temp13 + temp12 - temp13 + 0xc0], [0xdd6176433ff5026bbce96b068584b7bbe3514227e72df9c630b749ae87e64442, storage[keccak256(memory[0x00:0x40])], stack[-9] & 0x02 ** 0xa0 - 0x01, stack[-10]]);\n                return;\n            } else {\n                var temp14 = returndata.length;\n                memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n            memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x1f;\n            var temp16 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x4126:0x4146];\n            var temp17 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp16;\n            memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = temp17;\n            var temp18 = memory[0x40:0x60];\n            revert(memory[temp18:temp18 + temp15 - temp18 + 0x64]);\n        }\n    }\n    \n    function plyrRnds_(var arg0) returns (var arg0, var r1, var r2) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        r2 = storage[temp0 + 0x02];\n        r1 = storage[temp0 + 0x01];\n        return arg0, r1, r2;\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x525331 * 0x02 ** 0xe8;\n        return r0;\n    }\n    \n    function getTimeLeft() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = block.timestamp;\n    \n        if (var1 >= storage[0x09]) {\n            var0 = 0x00;\n        \n        label_0EAF:\n            return var0;\n        } else if (var1 <= storage[0x0b] + storage[0x00]) {\n            var var2 = 0x0e9e;\n            var var3 = storage[0x00] + storage[0x0b];\n            var var4 = var1;\n            var2 = func_375A(var3, var4);\n        \n        label_0E9E:\n            var0 = var2;\n            goto label_0EAF;\n        } else {\n            var2 = 0x0e9e;\n            var3 = storage[0x09];\n            var4 = var1;\n            var2 = func_375A(var3, var4);\n            goto label_0E9E;\n        }\n    }\n    \n    function buyXid(var arg0) {\n        var var0 = 0x2116;\n        var0 = func_4073();\n        var var1 = 0x00;\n    \n        if (!!(storage[0x12] & 0xff) == 0x01) {\n            var var2 = msg.sender;\n            var var3 = address(var2).code.length;\n        \n            if (!var3) {\n                var var4 = msg.value;\n            \n                if (var4 < 0x3b9aca00) {\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                    memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x10;\n                    var temp5 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x4146:0x4166];\n                    var temp6 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp5;\n                    memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = temp6;\n                    var temp7 = memory[0x40:0x60];\n                    revert(memory[temp7:temp7 + temp4 - temp7 + 0x64]);\n                } else if (var4 <= 0x152d02c7e14af6800000) {\n                    var var5 = 0x2251;\n                    var var6 = var0;\n                    var5 = func_0886(var6);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x03;\n                    var0 = var5;\n                    var1 = storage[keccak256(memory[0x00:0x40])];\n                    var5 = !arg0;\n                \n                    if (var5) {\n                        if (!var5) {\n                        label_2291:\n                            memory[0x00:0x20] = var1;\n                            memory[0x20:0x40] = 0x05;\n                        \n                            if (arg0 == storage[keccak256(memory[0x00:0x40]) + 0x05]) {\n                            label_22C0:\n                                var5 = 0x135a;\n                                var6 = var1;\n                                var var7 = arg0;\n                                var var8 = var0;\n                                func_0ADA(var6, var7, var8);\n                            \n                            label_135A:\n                                return;\n                            } else {\n                                memory[0x00:0x20] = var1;\n                                memory[0x20:0x40] = 0x05;\n                                storage[keccak256(memory[0x00:0x40]) + 0x05] = arg0;\n                                var5 = 0x135a;\n                                var6 = var1;\n                                var7 = arg0;\n                                var8 = var0;\n                                func_0ADA(var6, var7, var8);\n                                goto label_135A;\n                            }\n                        } else {\n                        label_2278:\n                            memory[0x00:0x20] = var1;\n                            memory[0x20:0x40] = 0x05;\n                            arg0 = storage[keccak256(memory[0x00:0x40]) + 0x05];\n                            goto label_22C0;\n                        }\n                    } else if (arg0 != var1) { goto label_2291; }\n                    else { goto label_2278; }\n                } else {\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                    memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x0e;\n                    var temp1 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x40c6:0x40e6];\n                    var temp2 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp1;\n                    memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp2;\n                    var temp3 = memory[0x40:0x60];\n                    revert(memory[temp3:temp3 + temp0 - temp3 + 0x64]);\n                }\n            } else {\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n                memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x1f;\n                var temp9 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x4126:0x4146];\n                var temp10 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp9;\n                memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = temp10;\n                var temp11 = memory[0x40:0x60];\n                revert(memory[temp11:temp11 + temp8 - temp11 + 0x64]);\n            }\n        } else {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n            memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x11;\n            var temp13 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x4106:0x4126];\n            var temp14 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp13;\n            memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = temp14;\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + temp12 - temp15 + 0x64]);\n        }\n    }\n    \n    function activated_() returns (var r0) { return storage[0x12] & 0xff; }\n    \n    function airDropPot_() returns (var r0) { return storage[0x01]; }\n    \n    function plyr_(var arg0) returns (var arg0, var r1, var r2, var r3, var r4, var r5) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r3 = storage[temp0 + 0x03];\n        r1 = storage[temp0 + 0x01];\n        r4 = storage[temp0 + 0x04];\n        r2 = storage[temp0 + 0x02];\n        r5 = storage[temp0 + 0x05];\n        return arg0, r1, r2, r3, r4, r5;\n    }\n    \n    function reLoadXname(var arg0, var arg1) {\n        var var0 = 0x2407;\n        var0 = func_4073();\n        var var1 = 0x00;\n        var var2 = var1;\n    \n        if (!!(storage[0x12] & 0xff) == 0x01) {\n            var var3 = msg.sender;\n            var var4 = address(var3).code.length;\n        \n            if (!var4) {\n                var var5 = arg1;\n            \n                if (var5 < 0x3b9aca00) {\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n                    memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x10;\n                    var temp6 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x4146:0x4166];\n                    var temp7 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp6;\n                    memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = temp7;\n                    var temp8 = memory[0x40:0x60];\n                    revert(memory[temp8:temp8 + temp5 - temp8 + 0x64]);\n                } else if (var5 <= 0x152d02c7e14af6800000) {\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x03;\n                    var1 = storage[keccak256(memory[0x00:0x40])];\n                    var var6 = !arg0;\n                \n                    if (!var6) {\n                        memory[0x00:0x20] = var1;\n                        memory[0x20:0x40] = 0x05;\n                    \n                        if (arg0 != storage[keccak256(memory[0x00:0x40]) + 0x01]) { goto label_2589; }\n                        else { goto label_2570; }\n                    } else if (!var6) {\n                    label_2589:\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x04;\n                        var temp0 = storage[keccak256(memory[0x00:0x40])];\n                        memory[0x00:0x20] = var1;\n                        memory[0x20:0x40] = 0x05;\n                        var2 = temp0;\n                    \n                        if (var2 == storage[keccak256(memory[0x00:0x40]) + 0x05]) {\n                        label_0E26:\n                            var6 = 0x0e32;\n                            var var7 = var1;\n                            var var8 = var2;\n                            var var9 = arg1;\n                            var var10 = var0;\n                            func_2CA2(var7, var8, var9, var10);\n                        \n                        label_0E32:\n                            return;\n                        } else {\n                            memory[0x00:0x20] = var1;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40]) + 0x05] = var2;\n                            var6 = 0x0e32;\n                            var7 = var1;\n                            var8 = var2;\n                            var9 = arg1;\n                            var10 = var0;\n                            func_2CA2(var7, var8, var9, var10);\n                            goto label_0E32;\n                        }\n                    } else {\n                    label_2570:\n                        memory[0x00:0x20] = var1;\n                        memory[0x20:0x40] = 0x05;\n                        var2 = storage[keccak256(memory[0x00:0x40]) + 0x05];\n                        goto label_0E26;\n                    }\n                } else {\n                    var temp1 = memory[0x40:0x60];\n                    memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n                    memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x0e;\n                    var temp2 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x40c6:0x40e6];\n                    var temp3 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp2;\n                    memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = temp3;\n                    var temp4 = memory[0x40:0x60];\n                    revert(memory[temp4:temp4 + temp1 - temp4 + 0x64]);\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x1f;\n                var temp10 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x4126:0x4146];\n                var temp11 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp10;\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = temp11;\n                var temp12 = memory[0x40:0x60];\n                revert(memory[temp12:temp12 + temp9 - temp12 + 0x64]);\n            }\n        } else {\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x11;\n            var temp14 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x4106:0x4126];\n            var temp15 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp14;\n            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = temp15;\n            var temp16 = memory[0x40:0x60];\n            revert(memory[temp16:temp16 + temp13 - temp16 + 0x64]);\n        }\n    }\n    \n    function func_25D2(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x06;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (storage[keccak256(memory[var3:var3 + 0x40]) + 0x01]) {\n        label_25FD:\n            var var4 = 0x056bc75e2d63100000 > storage[0x0d];\n        \n            if (!var4) {\n            label_263D:\n            \n                if (!var4) {\n                label_26B9:\n                \n                    if (arg1 <= 0x3b9aca00) { return; }\n                \n                    var4 = 0x26d8;\n                    var var5 = storage[0x0d];\n                    var var6 = arg1;\n                    var var7 = 0x00;\n                    var var8 = 0x2e29;\n                    var var9 = 0x35d4;\n                    var var10 = var5;\n                    var var11 = 0x00;\n                    var var12 = 0x09502f90;\n                    var var13 = 0x365b;\n                    var var14 = 0x03b2a1d15167e7c5699bfde00000;\n                    var var15 = 0x19b2;\n                    var var16 = 0x3656;\n                    var var17 = 0x0dac7055469777a6122ee4310dd6c14410500f2904840000000000;\n                    var var18 = 0x2e6e;\n                    var var19 = 0x01027e72f1f1281308800000;\n                    var var20 = 0x364a;\n                    var var21 = var10;\n                    var var22 = 0x0de0b6b3a7640000;\n                    var20 = func_366B(var21, var22);\n                    var18 = func_364A(var19, var20);\n                    var16 = func_2E6E(var17, var18);\n                    var15 = func_3656(var16);\n                    var13 = func_19B2(var14, var15);\n                \n                    if (!var12) { assert(); }\n                \n                    var9 = var13 / var12;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x06;\n                    var4 = 0x266a;\n                    var5 = 0x8ac7230489e80000;\n                    var6 = storage[keccak256(memory[0x00:0x40])];\n                    var4 = func_375A(var5, var6);\n                    var temp0 = var4;\n                    var0 = temp0;\n                    var4 = 0x267c;\n                    var5 = arg1;\n                    var6 = var0;\n                    var4 = func_375A(var5, var6);\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x05;\n                    var temp1 = var4;\n                    var1 = temp1;\n                    var5 = storage[keccak256(memory[0x00:0x40]) + 0x03];\n                    var4 = 0x26a1;\n                    var6 = var1;\n                    var4 = func_2C41(var5, var6);\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x05;\n                    storage[keccak256(memory[0x00:0x40]) + 0x03] = var4;\n                    arg1 = var0;\n                    var0 = arg1;\n                    var3 = var3;\n                    goto label_26B9;\n                }\n            } else {\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x06;\n                var4 = 0x8ac7230489e80000;\n                var5 = 0x263b;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = arg1;\n                var5 = func_2C41(var6, var7);\n                var4 = var5 > var4;\n                goto label_263D;\n            }\n        } else {\n            var4 = 0x25fa;\n            var5 = arg0;\n            var6 = arg3;\n            var4 = func_3877(var5, var6);\n            arg3 = var4;\n            goto label_25FD;\n        }\n    }\n    \n    function func_2A07(var arg0) returns (var r0) {\n        var var0 = 0x2a0f;\n        var0 = func_4073();\n        var var1 = storage[0x08];\n        var var2 = storage[0x0e] + storage[0x01];\n        var var3 = 0x00;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = var6;\n        var var8 = 0x64;\n        var var9 = 0x2a32;\n        var var10 = var2;\n        var var11 = 0x2d;\n        var9 = func_366B(var10, var11);\n    \n        if (!var8) { assert(); }\n    \n        var3 = var9 / var8;\n        var4 = var2 / 0x0a;\n        var8 = 0x64;\n        var9 = 0x2a5b;\n        var10 = var2;\n        var11 = storage[0x11];\n        var9 = func_366B(var10, var11);\n    \n        if (!var8) { assert(); }\n    \n        var temp0 = var8;\n        var8 = storage[0x0c];\n        var temp1 = var9 / temp0;\n        var5 = temp1;\n        var9 = 0x2a84;\n        var10 = var5;\n        var11 = 0x0de0b6b3a7640000;\n        var9 = func_366B(var10, var11);\n    \n        if (!var8) { assert(); }\n    \n        var temp2 = var9 / var8;\n        var6 = temp2;\n        var8 = 0x2acc;\n        var9 = 0x0de0b6b3a7640000;\n        var10 = 0x2ab4;\n        var11 = var6;\n        var var12 = storage[0x0c];\n        var10 = func_366B(var11, var12);\n        var8 = func_2AB4(var5, var9, var10);\n        var7 = var8;\n    \n        if (var7 <= 0x00) {\n        label_2AFC:\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x05;\n            var8 = 0x2b1f;\n            var10 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n            var9 = var3;\n            var8 = func_2C41(var9, var10);\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40]) + 0x02] = var8;\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x6465706f7369742829 * 0x02 ** 0xb8;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = (keccak256(memory[temp4:temp4 + temp3 - temp4 + 0x09]) / 0x02 ** 0xe0 & 0xffffffff) * 0x02 ** 0xe0;\n            var temp5 = memory[0x40:0x60];\n            var temp6;\n            temp6, memory[temp5:temp5 + 0x00] = address(0x5edbe4c6275be3b42a02fd77674d0a6e490e9aa0).call.gas(msg.gas).value(var4)(memory[temp5:temp5 + temp4 - temp5 + 0x04]);\n        \n            if (temp6) {\n            label_2BB7:\n                var8 = 0x2bcb;\n                var10 = storage[0x0f];\n                var9 = var6;\n                var8 = func_2C41(var9, var10);\n                storage[0x0f] = var8;\n                var temp7 = arg0;\n                memory[temp7:temp7 + 0x20] = storage[0x09] * 0x0f4240 + memory[temp7:temp7 + 0x20];\n                var temp8 = temp7 + 0x20;\n                var temp9 = var1;\n                memory[temp8:temp8 + 0x20] = temp9 * 0x52b7d2dcc80cd2e4000000 + memory[temp8:temp8 + 0x20];\n                memory[0x00:0x20] = temp9;\n                memory[0x20:0x40] = 0x05;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = storage[temp10] & 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp9;\n                memory[0x20:0x40] = 0x05;\n                memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = storage[temp10 + 0x01];\n                memory[temp7 + 0x80:temp7 + 0x80 + 0x20] = var3;\n                memory[temp7 + 0xc0:temp7 + 0xc0 + 0x20] = var5;\n                memory[temp7 + 0xa0:temp7 + 0xa0 + 0x20] = 0x00;\n                return temp7;\n            } else {\n                var8 = 0x2bb0;\n                var9 = var5;\n                var10 = var4;\n                var8 = func_2C41(var9, var10);\n                var5 = var8;\n                var4 = 0x00;\n                goto label_2BB7;\n            }\n        } else {\n            var8 = 0x2ae7;\n            var9 = var5;\n            var10 = var7;\n            var8 = func_375A(var9, var10);\n            var5 = var8;\n            var8 = 0x2af9;\n            var9 = var4;\n            var10 = var7;\n            var8 = func_2C41(var9, var10);\n            var4 = var8;\n            goto label_2AFC;\n        }\n    }\n    \n    function func_2AB4(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg1;\n        arg1 = arg0;\n        arg2 = arg2 / temp0;\n        r0 = func_375A(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2C41(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 + temp0;\n    \n        if (var0 >= temp0) { return var0; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x13;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d61746820616464206661696c656400000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_2CA2(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = block.timestamp;\n        var var1 = var0 > storage[0x00] + storage[0x0b];\n    \n        if (!var1) {\n        label_2CD1:\n        \n            if (!var1) {\n                var1 = var0 > storage[0x09];\n            \n                if (!var1) {\n                    if (!var1) {\n                    label_2DFC:\n                        return;\n                    } else {\n                    label_2D20:\n                        storage[0x0a] = (storage[0x0a] & ~0xff) | 0x01;\n                        var1 = 0x2d35;\n                        var var2 = arg3;\n                        var1 = func_2A07(var2);\n                        var temp0 = var1;\n                        memory[temp0:temp0 + 0x20] = var0 * 0x0de0b6b3a7640000 + memory[temp0:temp0 + 0x20];\n                        var temp1 = temp0 + 0x20;\n                        var temp2 = arg0;\n                        memory[temp1:temp1 + 0x20] = temp2 + memory[temp1:temp1 + 0x20];\n                        memory[0x00:0x20] = temp2;\n                        memory[0x20:0x40] = 0x05;\n                        var temp3 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n                        var temp4 = memory[temp0:temp0 + 0x20];\n                        var temp5 = memory[temp1:temp1 + 0x20];\n                        var temp6 = memory[temp0 + 0x40:temp0 + 0x40 + 0x20];\n                        var temp7 = memory[temp0 + 0x60:temp0 + 0x60 + 0x20];\n                        var temp8 = memory[temp0 + 0x80:temp0 + 0x80 + 0x20];\n                        var temp9 = memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20];\n                        var temp10 = memory[temp0 + 0xc0:temp0 + 0xc0 + 0x20];\n                        var temp11 = memory[0x40:0x60];\n                        memory[temp11:temp11 + 0x20] = msg.sender;\n                        memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = temp3;\n                        memory[temp11 + 0x40:temp11 + 0x40 + 0x20] = temp4;\n                        memory[temp11 + 0x60:temp11 + 0x60 + 0x20] = temp5;\n                        memory[temp11 + 0x80:temp11 + 0x80 + 0x20] = temp6 & 0x02 ** 0xa0 - 0x01;\n                        memory[temp11 + 0xa0:temp11 + 0xa0 + 0x20] = temp7;\n                        memory[temp11 + 0xc0:temp11 + 0xc0 + 0x20] = temp8;\n                        memory[temp11 + 0xe0:temp11 + 0xe0 + 0x20] = temp9;\n                        memory[temp11 + 0x0100:temp11 + 0x0100 + 0x20] = temp10;\n                        var temp12 = memory[0x40:0x60];\n                        arg3 = temp0;\n                        log(memory[temp12:temp12 + temp11 - temp12 + 0x0120], [0x603a740c9291cc914e0c8d16b355cdb091aefd5d9bbdf4f95371ce756f5e8a40]);\n                        goto label_2DFC;\n                    }\n                } else if (storage[0x0a] & 0xff) { goto label_2DFC; }\n                else { goto label_2D20; }\n            } else {\n                var1 = 0x2ce3;\n                var2 = arg2;\n                var var3 = 0x19b2;\n                var var4 = arg0;\n                var var5 = 0x00;\n                var var6 = var5;\n                var var7 = 0x2e3c;\n                var var8 = var4;\n                var var9 = 0x00;\n                var var10 = 0x3ea0;\n                var var11 = var8;\n                var var12 = 0x00;\n                memory[var12:var12 + 0x20] = var11;\n                memory[0x20:0x40] = 0x06;\n                var temp13 = keccak256(memory[var12:var12 + 0x40]);\n                var var13 = 0x2c9c;\n                var var14 = storage[temp13 + 0x02];\n                var var15 = 0x0de0b6b3a7640000;\n                var var17 = storage[0x0f];\n                var var16 = 0x37f4;\n                var var18 = storage[temp13 + 0x01];\n                var16 = func_366B(var17, var18);\n                var13 = func_37F4(var14, var15, var16);\n                var10 = var13;\n                // Error: Could not resolve jump destination!\n            }\n        } else {\n            var1 = var0 <= storage[0x09];\n        \n            if (var1) { goto label_2CD1; }\n        \n            var1 = var0 > storage[0x09];\n        \n            if (!var1) { goto label_2CD1; }\n        \n            var1 = !storage[0x08];\n            goto label_2CD1;\n        }\n    }\n    \n    function func_2E6E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_2C41(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2EAB(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = memory[arg0:arg0 + 0x20];\n        var var1 = arg0;\n        var var3 = var0;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var2 <= 0x20;\n    \n        if (var2 <= 0x20) {\n            if (var6) {\n            label_2F42:\n                var6 = var1;\n                var var7 = 0x00;\n            \n                if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n            \n                var temp0 = memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) != 0x02 ** 0xf8 * 0x20;\n                var6 = temp0;\n            \n                if (!var6) {\n                label_2FB8:\n                \n                    if (var6) {\n                        var6 = var1;\n                        var7 = 0x00;\n                    \n                        if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                    \n                        if (memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) != 0x02 ** 0xf8 * 0x30) {\n                        label_3171:\n                            var4 = 0x00;\n                        \n                            if (var4 >= var2) {\n                            label_355E:\n                            \n                                if (!!var3 == 0x01) { return memory[var1 + 0x20:var1 + 0x20 + 0x20]; }\n                            \n                                var temp1 = memory[0x40:0x60];\n                                memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n                                memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1d;\n                                memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x737472696e672063616e6e6f74206265206f6e6c79206e756d62657273000000;\n                                var temp2 = memory[0x40:0x60];\n                                revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n                            } else {\n                            label_317F:\n                                var6 = 0x02 ** 0xfe;\n                                var7 = var1;\n                                var var8 = var4;\n                            \n                                if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                            \n                                var temp3 = memory[var7 + 0x20 + var8:var7 + 0x20 + var8 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) > var6;\n                                var6 = temp3;\n                            \n                                if (!var6) {\n                                label_31ED:\n                                \n                                    if (!var6) {\n                                        var6 = var1;\n                                        var7 = var4;\n                                    \n                                        if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                                    \n                                        var6 = memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) == 0x02 ** 0xf8 * 0x20;\n                                    \n                                        if (var6) {\n                                        label_3306:\n                                        \n                                            if (var6) {\n                                            label_337E:\n                                            \n                                                if (var6) {\n                                                    var6 = var1;\n                                                    var7 = var4;\n                                                \n                                                    if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                                                \n                                                    if (memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) != 0x02 ** 0xf8 * 0x20) {\n                                                    label_34CF:\n                                                        var6 = !var3;\n                                                    \n                                                        if (!var6) {\n                                                        label_3549:\n                                                        \n                                                            if (!var6) {\n                                                            label_3553:\n                                                                var5 = var5;\n                                                                var4 = var4 + 0x01;\n                                                            \n                                                            label_3176:\n                                                            \n                                                                if (var4 >= var2) { goto label_355E; }\n                                                                else { goto label_317F; }\n                                                            } else {\n                                                                var3 = 0x01;\n                                                                var4 = var4 + 0x01;\n                                                                var5 = var5;\n                                                                goto label_3176;\n                                                            }\n                                                        } else {\n                                                            var6 = 0x03 * 0x02 ** 0xfc;\n                                                            var7 = var1;\n                                                            var8 = var4;\n                                                        \n                                                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                                                        \n                                                            var6 = memory[var7 + 0x20 + var8:var7 + 0x20 + var8 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) < var6;\n                                                        \n                                                            if (var6) { goto label_3549; }\n                                                        \n                                                            var6 = 0x39 * 0x02 ** 0xf8;\n                                                            var7 = var1;\n                                                            var8 = var4;\n                                                        \n                                                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                                                        \n                                                            var6 = memory[var7 + 0x20 + var8:var7 + 0x20 + var8 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) > var6;\n                                                            goto label_3549;\n                                                        }\n                                                    } else {\n                                                        var6 = var1;\n                                                        var7 = var4 + 0x01;\n                                                    \n                                                        if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                                                    \n                                                        if (memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) != 0x02 ** 0xf8 * 0x20) { goto label_34CF; }\n                                                    \n                                                        var temp4 = memory[0x40:0x60];\n                                                        memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                                        memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                                                        memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x28;\n                                                        memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x737472696e672063616e6e6f7420636f6e7461696e20636f6e73656375746976;\n                                                        memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x6520737061636573000000000000000000000000000000000000000000000000;\n                                                        var temp5 = memory[0x40:0x60];\n                                                        revert(memory[temp5:temp5 + temp4 - temp5 + 0x84]);\n                                                    }\n                                                } else {\n                                                    var temp6 = memory[0x40:0x60];\n                                                    memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                                    memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                                                    memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x22;\n                                                    memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x737472696e6720636f6e7461696e7320696e76616c6964206368617261637465;\n                                                    memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x7273 * 0x02 ** 0xf0;\n                                                    var temp7 = memory[0x40:0x60];\n                                                    revert(memory[temp7:temp7 + temp6 - temp7 + 0x84]);\n                                                }\n                                            } else {\n                                                var6 = 0x2f * 0x02 ** 0xf8;\n                                                var7 = var1;\n                                                var8 = var4;\n                                            \n                                                if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                                            \n                                                var temp8 = memory[var7 + 0x20 + var8:var7 + 0x20 + var8 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) > var6;\n                                                var6 = temp8;\n                                            \n                                                if (!var6) { goto label_337E; }\n                                            \n                                                var6 = 0x1d * 0x02 ** 0xf9;\n                                                var7 = var1;\n                                                var8 = var4;\n                                            \n                                                if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                                            \n                                                var6 = memory[var7 + 0x20 + var8:var7 + 0x20 + var8 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) < var6;\n                                                goto label_337E;\n                                            }\n                                        } else {\n                                            var6 = 0x03 * 0x02 ** 0xfd;\n                                            var7 = var1;\n                                            var8 = var4;\n                                        \n                                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                                        \n                                            var temp9 = memory[var7 + 0x20 + var8:var7 + 0x20 + var8 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) > var6;\n                                            var6 = temp9;\n                                        \n                                            if (!var6) { goto label_3306; }\n                                        \n                                            var6 = 0x7b * 0x02 ** 0xf8;\n                                            var7 = var1;\n                                            var8 = var4;\n                                        \n                                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                                        \n                                            var6 = memory[var7 + 0x20 + var8:var7 + 0x20 + var8 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) < var6;\n                                            goto label_3306;\n                                        }\n                                    } else {\n                                        var6 = var1;\n                                        var7 = var4;\n                                    \n                                        if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                                    \n                                        var6 = ((memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8) / 0x02 ** 0xf8 + 0x20) * 0x02 ** 0xf8;\n                                        var7 = var1;\n                                        var8 = var4;\n                                    \n                                        if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                                    \n                                        memory[var7 + 0x20 + var8:var7 + 0x20 + var8 + 0x01] = byte(var6 & ~(0x02 ** 0xf8 - 0x01), 0x00);\n                                    \n                                        if (var3) { goto label_3553; }\n                                    \n                                        var3 = 0x01;\n                                        goto label_3553;\n                                    }\n                                } else {\n                                    var6 = 0x5b * 0x02 ** 0xf8;\n                                    var7 = var1;\n                                    var8 = var4;\n                                \n                                    if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                                \n                                    var6 = memory[var7 + 0x20 + var8:var7 + 0x20 + var8 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) < var6;\n                                    goto label_31ED;\n                                }\n                            }\n                        } else {\n                            var6 = var1;\n                            var7 = 0x01;\n                        \n                            if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                        \n                            if (memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) != 0x02 ** 0xf8 * 0x78) {\n                                var6 = var1;\n                                var7 = 0x01;\n                            \n                                if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                            \n                                if (memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) != 0x02 ** 0xf8 * 0x58) { goto label_3171; }\n                            \n                                var temp10 = memory[0x40:0x60];\n                                memory[temp10:temp10 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = 0x20;\n                                memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = 0x1b;\n                                memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = 0x737472696e672063616e6e6f7420737461727420776974682030580000000000;\n                                var temp11 = memory[0x40:0x60];\n                                revert(memory[temp11:temp11 + temp10 - temp11 + 0x64]);\n                            } else {\n                                var temp12 = memory[0x40:0x60];\n                                memory[temp12:temp12 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n                                memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x1b;\n                                memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = 0x737472696e672063616e6e6f7420737461727420776974682030780000000000;\n                                var temp13 = memory[0x40:0x60];\n                                revert(memory[temp13:temp13 + temp12 - temp13 + 0x64]);\n                            }\n                        }\n                    } else {\n                        var temp14 = memory[0x40:0x60];\n                        memory[temp14:temp14 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp14 + 0x04:temp14 + 0x04 + 0x20] = 0x20;\n                        memory[temp14 + 0x24:temp14 + 0x24 + 0x20] = 0x25;\n                        memory[temp14 + 0x44:temp14 + 0x44 + 0x20] = 0x737472696e672063616e6e6f74207374617274206f7220656e64207769746820;\n                        memory[temp14 + 0x64:temp14 + 0x64 + 0x20] = 0x7370616365 * 0x02 ** 0xd8;\n                        var temp15 = memory[0x40:0x60];\n                        revert(memory[temp15:temp15 + temp14 - temp15 + 0x84]);\n                    }\n                } else {\n                    var6 = var1;\n                    var7 = var2 - 0x01;\n                \n                    if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                \n                    var6 = memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) != 0x02 ** 0xf8 * 0x20;\n                    goto label_2FB8;\n                }\n            } else {\n            label_2ECD:\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = 0x20;\n                memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x2a;\n                memory[temp16 + 0x44:temp16 + 0x44 + 0x20] = 0x737472696e67206d757374206265206265747765656e203120616e6420333220;\n                memory[temp16 + 0x64:temp16 + 0x64 + 0x20] = 0x6368617261637465727300000000000000000000000000000000000000000000;\n                var temp17 = memory[0x40:0x60];\n                revert(memory[temp17:temp17 + temp16 - temp17 + 0x84]);\n            }\n        } else if (var2 > 0x00) { goto label_2F42; }\n        else { goto label_2ECD; }\n    }\n    \n    function func_364A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_366B(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_3656(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = 0x3f26;\n        var var4 = arg0;\n        var var5 = 0x01;\n        var3 = func_2C41(var4, var5);\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_1557:\n            return var0;\n        } else {\n        label_3F3F:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = 0x3f58;\n            var4 = var0;\n            var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = func_3F51(var1, var4, var5);\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_1557; }\n            else { goto label_3F3F; }\n        }\n    }\n    \n    function func_366B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) {\n            var temp0 = arg0;\n            var0 = arg1 * temp0;\n            var var1 = arg1;\n            var var2 = temp0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            if (var3 / var2 == var1) {\n            label_2C9C:\n                return var0;\n            } else {\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n                memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x13;\n                memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d617468206d756c206661696c656400000000000000000000000000;\n                var temp2 = memory[0x40:0x60];\n                revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_2C9C;\n        }\n    }\n    \n    function func_36E2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x06;\n        var var1 = 0x0de0b6b3a7640000;\n        var var2 = 0x365b;\n        var var5 = storage[0x0c];\n        var var3 = storage[keccak256(memory[var0:var0 + 0x40]) + 0x01];\n        var var4 = 0x364a;\n        var var6 = 0x3740;\n        var var7 = var1;\n        var var8 = 0x64;\n        var var9 = 0x372a;\n        var var10 = storage[0x0e];\n        var var11 = storage[0x11];\n        var9 = func_366B(var10, var11);\n        var6 = func_372A(var7, var8, var9);\n        var4 = func_3740(var5, var6);\n        var2 = func_364A(var3, var4);\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function func_372A(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg0;\n        arg0 = arg2 / arg1;\n        arg1 = temp0;\n        r0 = func_366B(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_3740(var arg0, var arg1) returns (var r0) {\n        if (!arg0) { assert(); }\n    \n        var temp0 = arg0;\n        arg0 = storage[0x0f];\n        arg1 = arg1 / temp0;\n        r0 = func_2C41(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_375A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x13;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x536166654d61746820737562206661696c656400000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n    }\n    \n    function func_37F4(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg0;\n        arg0 = arg2 / arg1;\n        arg1 = temp0;\n        r0 = func_375A(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_3877(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x387f;\n        var0 = func_4073();\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = memory[temp0:temp0 + 0x20] + 0x0a;\n        return temp0;\n    }\n    \n    function func_3F51(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        arg2 = arg0;\n        r0 = func_2C41(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_4073() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0100;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x00;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = 0x02 ** 0xa0 - 0x01 & 0x00;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = ~0x00 & 0x00;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x00;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = 0x00;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = 0x00;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 43470 tokens. Please reduce the length of the messages."
}