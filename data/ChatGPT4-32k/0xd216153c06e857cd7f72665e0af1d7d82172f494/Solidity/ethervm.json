{
	"address": "0xd216153c06e857cd7f72665e0af1d7d82172f494",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x70a08231 > var0) {\n            if (0x2d0335ab > var0) {\n                if (var0 == 0xf714ce) {\n                    // Dispatch table entry for withdraw(uint256,address)\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0146;\n                    var var2 = 0x04;\n                    var var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    withdraw(var2, var3);\n                    stop();\n                } else if (var0 == 0x1166073a) {\n                    // Dispatch table entry for registerRelay(uint256,string)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0146;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    registerRelay(var2, var3);\n                    stop();\n                } else if (var0 == 0x2b601747) {\n                    // Dispatch table entry for canRelay(address,address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x03f5;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x0140) { revert(memory[0x00:0x00]); }\n                \n                    var1, var2 = canRelay(var2, var3);\n                    var temp0 = memory[0x40:0x60];\n                    var3 = temp0;\n                    memory[var3:var3 + 0x20] = var1;\n                    var temp1 = var3 + 0x20;\n                    var var4 = temp1;\n                    var temp2 = var4 + 0x20;\n                    memory[var4:var4 + 0x20] = temp2 - var3;\n                    var temp3 = var2;\n                    memory[temp2:temp2 + 0x20] = memory[temp3:temp3 + 0x20];\n                    var var5 = temp2 + 0x20;\n                    var var7 = memory[temp3:temp3 + 0x20];\n                    var var6 = temp3 + 0x20;\n                    var var8 = var7;\n                    var var9 = var5;\n                    var var10 = var6;\n                    var var11 = 0x00;\n                \n                    if (var11 >= var8) {\n                    label_0438:\n                        var temp4 = var7;\n                        var5 = temp4 + var5;\n                        var6 = temp4 & 0x1f;\n                    \n                        if (!var6) {\n                            var temp5 = memory[0x40:0x60];\n                            return memory[temp5:temp5 + var5 - temp5];\n                        } else {\n                            var temp6 = var6;\n                            var temp7 = var5 - temp6;\n                            memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                            var temp8 = memory[0x40:0x60];\n                            return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                        }\n                    } else {\n                    label_0429:\n                        var temp9 = var11;\n                        memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                        var11 = temp9 + 0x20;\n                    \n                        if (var11 >= var8) { goto label_0438; }\n                        else { goto label_0429; }\n                    }\n                } else if (var0 == 0x2ca70eba) {\n                    // Dispatch table entry for recipientCallsAtomic(address,bytes,uint256,uint256,uint256,uint256,bytes)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0565;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0xe0) { revert(memory[0x00:0x00]); }\n                \n                    var1 = recipientCallsAtomic(var2, var3);\n                    var2 = memory[0x40:0x60];\n                    var3 = var2;\n                    var4 = var1;\n                \n                    if (var4 > 0x04) { assert(); }\n                \n                    var temp10 = var3;\n                    memory[temp10:temp10 + 0x20] = var4 & 0xff;\n                    var temp11 = memory[0x40:0x60];\n                    return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x2d0335ab) {\n                // Dispatch table entry for getNonce(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05bc;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = getNonce(var2, var3);\n            \n            label_05BC:\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n            } else if (var0 == 0x39002432) {\n                // Dispatch table entry for penalizeIllegalTransaction(bytes,bytes)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0146;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var temp14 = var2;\n                var2 = temp14 + var3;\n                var3 = temp14;\n                var4 = var3 + 0x20;\n                var5 = msg.data[var3:var3 + 0x20];\n            \n                if (var5 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp15 = var3 + var5;\n                var5 = temp15;\n            \n                if (var5 + 0x20 > var2) { revert(memory[0x00:0x00]); }\n            \n                var temp16 = var5;\n                var temp17 = msg.data[temp16:temp16 + 0x20];\n                var5 = temp17;\n                var temp18 = var4;\n                var4 = temp16 + 0x20;\n                var6 = temp18;\n            \n                if ((var5 > 0x01 << 0x20) | (var4 + var5 > var2)) { revert(memory[0x00:0x00]); }\n            \n                var temp19 = var6;\n                var temp20 = var5;\n                var temp21 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp21 + (temp20 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp21:temp21 + 0x20] = temp20;\n                var temp22 = temp21 + 0x20;\n                memory[temp22:temp22 + temp20] = msg.data[var4:var4 + temp20];\n                memory[temp22 + temp20:temp22 + temp20 + 0x20] = 0x00;\n                var temp23 = var2;\n                var2 = temp21;\n                var temp24 = var3;\n                var3 = temp23;\n                var4 = temp24;\n                var5 = temp19 + 0x20;\n                var6 = msg.data[temp19:temp19 + 0x20];\n            \n                if (var6 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp25 = var4 + var6;\n                var6 = temp25;\n            \n                if (var6 + 0x20 > var3) { revert(memory[0x00:0x00]); }\n            \n                var temp26 = var6;\n                var temp27 = msg.data[temp26:temp26 + 0x20];\n                var6 = temp27;\n                var7 = var5;\n                var5 = temp26 + 0x20;\n            \n                if ((var6 > 0x01 << 0x20) | (var5 + var6 > var3)) { revert(memory[0x00:0x00]); }\n            \n                var temp28 = var6;\n                var temp29 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp29 + (temp28 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp29:temp29 + 0x20] = temp28;\n                var temp30 = temp29 + 0x20;\n                memory[temp30:temp30 + temp28] = msg.data[var5:var5 + temp28];\n                memory[temp30 + temp28:temp30 + temp28 + 0x20] = 0x00;\n                var3 = temp29;\n                var4 = 0x1abe;\n                var4 = func_39BF();\n                var5 = 0x1ac7;\n                var6 = var2;\n            \n            label_3054:\n                var7 = 0x305c;\n                var7 = func_39BF();\n                var8 = 0x3065;\n                var9 = var6;\n                var10 = 0x00;\n                var11 = var10;\n                var var12 = 0x00;\n                var var13 = var12;\n                var var14 = 0x00;\n                var var15 = 0x60;\n                var var16 = var15;\n                var var17 = 0x344f;\n                var var18 = 0x344a;\n                var var19 = var9;\n                var18 = func_3563(var19);\n                var17 = func_344A(var18);\n                var temp31 = var17;\n                var16 = temp31;\n                var17 = 0x346e;\n                var18 = var16;\n                var19 = 0x00;\n            \n                if (var19 >= memory[var18:var18 + 0x20]) { assert(); }\n            \n                var17 = func_3461(var18, var19);\n                var18 = 0x347e;\n                var19 = var16;\n                var var20 = 0x01;\n            \n                if (var20 >= memory[var19:var19 + 0x20]) { assert(); }\n            \n                var18 = func_3461(var19, var20);\n                var19 = 0x348e;\n                var20 = var16;\n                var var21 = 0x02;\n            \n                if (var21 >= memory[var20:var20 + 0x20]) { assert(); }\n            \n                var19 = func_3461(var20, var21);\n                var20 = 0x34ab;\n                var21 = var16;\n                var var22 = 0x03;\n            \n                if (var22 >= memory[var21:var21 + 0x20]) { assert(); }\n            \n                var21 = memory[var22 * 0x20 + 0x20 + var21:var22 * 0x20 + 0x20 + var21 + 0x20];\n                var22 = 0x00;\n            \n                if (memory[var21:var21 + 0x20] <= 0x15) {\n                    var var23 = 0x23b8;\n                    var var24 = var21;\n                    var23 = func_36AD(var24);\n                \n                label_23B8:\n                    var20 = var23;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var temp32 = memory[0x40:0x60];\n                    memory[temp32:temp32 + 0x20] = 0x461bcd << 0xe5;\n                    var temp33 = temp32 + 0x04;\n                    var temp34 = temp33 + 0x20;\n                    memory[temp33:temp33 + 0x20] = temp34 - temp33;\n                    memory[temp34:temp34 + 0x20] = 0x3a;\n                    var temp35 = temp34 + 0x20;\n                    memory[temp35:temp35 + 0x3a] = code[0x3a40:0x3a7a];\n                    var temp36 = memory[0x40:0x60];\n                    revert(memory[temp36:temp36 + (temp35 + 0x40) - temp36]);\n                }\n            } else if (var0 == 0x405cec67) {\n                // Dispatch table entry for relayCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0146;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x0120) { revert(memory[0x00:0x00]); }\n            \n                relayCall(var2, var3);\n                stop();\n            } else if (var0 == 0x54fd4d50) {\n                // Dispatch table entry for version()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0906;\n                var2 = version();\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = 0x20;\n                var temp38 = var2;\n                memory[temp37 + 0x20:temp37 + 0x20 + 0x20] = memory[temp38:temp38 + 0x20];\n                var3 = temp37;\n                var4 = var3;\n                var5 = var4 + 0x40;\n                var7 = memory[temp38:temp38 + 0x20];\n                var6 = temp38 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0940:\n                    var temp39 = var7;\n                    var5 = temp39 + var5;\n                    var6 = temp39 & 0x1f;\n                \n                    if (!var6) {\n                        var temp40 = memory[0x40:0x60];\n                        return memory[temp40:temp40 + var5 - temp40];\n                    } else {\n                        var temp41 = var6;\n                        var temp42 = var5 - temp41;\n                        memory[temp42:temp42 + 0x20] = ~(0x0100 ** (0x20 - temp41) - 0x01) & memory[temp42:temp42 + 0x20];\n                        var temp43 = memory[0x40:0x60];\n                        return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n                    }\n                } else {\n                label_0931:\n                    var temp44 = var11;\n                    memory[temp44 + var9:temp44 + var9 + 0x20] = memory[temp44 + var10:temp44 + var10 + 0x20];\n                    var11 = temp44 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0940; }\n                    else { goto label_0931; }\n                }\n            } else if (var0 == 0x6a7d84a4) {\n                // Dispatch table entry for requiredGas(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05bc;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = requiredGas(var2, var3);\n                goto label_05BC;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xa8cd9572 > var0) {\n            if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05bc;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = balanceOf(var2, var3);\n                goto label_05BC;\n            } else if (var0 == 0x85f4498b) {\n                // Dispatch table entry for canUnstake(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a0b;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = canUnstake(var2, var3);\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = !!var1;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + temp45 - temp46 + 0x20];\n            } else if (var0 == 0x8d851460) {\n                // Dispatch table entry for getRelay(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a52;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1, var2, var3, var4, var5 = getRelay(var2);\n                var temp47 = memory[0x40:0x60];\n                var6 = temp47;\n                memory[var6:var6 + 0x20] = var1;\n                var temp48 = var6 + 0x20;\n                memory[temp48:temp48 + 0x20] = var2;\n                var temp49 = temp48 + 0x20;\n                memory[temp49:temp49 + 0x20] = var3;\n                var temp50 = temp49 + 0x20;\n                memory[temp50:temp50 + 0x20] = var4 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                var7 = temp50 + 0x20;\n                var8 = var5;\n            \n                if (var8 > 0x03) { assert(); }\n            \n                var temp51 = var7;\n                memory[temp51:temp51 + 0x20] = var8 & 0xff;\n                var temp52 = memory[0x40:0x60];\n                return memory[temp52:temp52 + (temp51 + 0x20) - temp52];\n            } else if (var0 == 0xa863f8f9) {\n                // Dispatch table entry for maxPossibleCharge(uint256,uint256,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05bc;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = maxPossibleCharge(var2, var3);\n                goto label_05BC;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xa8cd9572) {\n            // Dispatch table entry for penalizeRepeatedNonce(bytes,bytes,bytes,bytes)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0146;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n        \n            var temp53 = var2;\n            var temp54 = temp53 + var3;\n            var3 = temp53;\n            var2 = temp54;\n            var4 = var3 + 0x20;\n            var5 = msg.data[var3:var3 + 0x20];\n        \n            if (var5 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp55 = var3 + var5;\n            var5 = temp55;\n        \n            if (var5 + 0x20 > var2) { revert(memory[0x00:0x00]); }\n        \n            var temp56 = var5;\n            var temp57 = msg.data[temp56:temp56 + 0x20];\n            var5 = temp57;\n            var6 = var4;\n            var4 = temp56 + 0x20;\n        \n            if ((var5 > 0x01 << 0x20) | (var4 + var5 > var2)) { revert(memory[0x00:0x00]); }\n        \n            var temp58 = var6;\n            var temp59 = var5;\n            var temp60 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp60 + (temp59 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp60:temp60 + 0x20] = temp59;\n            var temp61 = temp60 + 0x20;\n            memory[temp61:temp61 + temp59] = msg.data[var4:var4 + temp59];\n            memory[temp61 + temp59:temp61 + temp59 + 0x20] = 0x00;\n            var temp62 = var2;\n            var2 = temp60;\n            var temp63 = var3;\n            var3 = temp62;\n            var4 = temp63;\n            var5 = temp58 + 0x20;\n            var6 = msg.data[temp58:temp58 + 0x20];\n        \n            if (var6 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp64 = var4 + var6;\n            var6 = temp64;\n        \n            if (var6 + 0x20 > var3) { revert(memory[0x00:0x00]); }\n        \n            var temp65 = var6;\n            var temp66 = msg.data[temp65:temp65 + 0x20];\n            var6 = temp66;\n            var7 = var5;\n            var5 = temp65 + 0x20;\n        \n            if ((var6 > 0x01 << 0x20) | (var5 + var6 > var3)) { revert(memory[0x00:0x00]); }\n        \n            var temp67 = var7;\n            var temp68 = var6;\n            var temp69 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp69 + (temp68 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp69:temp69 + 0x20] = temp68;\n            var temp70 = temp69 + 0x20;\n            memory[temp70:temp70 + temp68] = msg.data[var5:var5 + temp68];\n            memory[temp70 + temp68:temp70 + temp68 + 0x20] = 0x00;\n            var temp71 = var3;\n            var3 = temp69;\n            var temp72 = var4;\n            var4 = temp71;\n            var5 = temp72;\n            var6 = temp67 + 0x20;\n            var7 = msg.data[temp67:temp67 + 0x20];\n        \n            if (var7 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp73 = var5 + var7;\n            var7 = temp73;\n        \n            if (var7 + 0x20 > var4) { revert(memory[0x00:0x00]); }\n        \n            var temp74 = var7;\n            var temp75 = msg.data[temp74:temp74 + 0x20];\n            var7 = temp75;\n            var temp76 = var6;\n            var6 = temp74 + 0x20;\n            var8 = temp76;\n        \n            if ((var7 > 0x01 << 0x20) | (var6 + var7 > var4)) { revert(memory[0x00:0x00]); }\n        \n            var temp77 = var8;\n            var temp78 = var7;\n            var temp79 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp79 + (temp78 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp79:temp79 + 0x20] = temp78;\n            var temp80 = temp79 + 0x20;\n            memory[temp80:temp80 + temp78] = msg.data[var6:var6 + temp78];\n            memory[temp80 + temp78:temp80 + temp78 + 0x20] = 0x00;\n            var temp81 = var4;\n            var4 = temp79;\n            var temp82 = var5;\n            var5 = temp81;\n            var6 = temp82;\n            var7 = temp77 + 0x20;\n            var8 = msg.data[temp77:temp77 + 0x20];\n        \n            if (var8 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp83 = var6 + var8;\n            var8 = temp83;\n        \n            if (var8 + 0x20 > var5) { revert(memory[0x00:0x00]); }\n        \n            var temp84 = var8;\n            var temp85 = msg.data[temp84:temp84 + 0x20];\n            var8 = temp85;\n            var9 = var7;\n            var7 = temp84 + 0x20;\n        \n            if ((var8 > 0x01 << 0x20) | (var7 + var8 > var5)) { revert(memory[0x00:0x00]); }\n        \n            var temp86 = var8;\n            var temp87 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp87 + (temp86 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp87:temp87 + 0x20] = temp86;\n            var temp88 = temp87 + 0x20;\n            memory[temp88:temp88 + temp86] = msg.data[var7:var7 + temp86];\n            memory[temp88 + temp86:temp88 + temp86 + 0x20] = 0x00;\n            var5 = temp87;\n            var6 = 0x00;\n            var7 = 0x2457;\n            var8 = var3;\n            var temp89 = var2;\n            var9 = temp89;\n            var10 = memory[0x40:0x60] + 0x20;\n            var11 = var10;\n            var13 = memory[var9:var9 + 0x20];\n            var12 = var9 + 0x20;\n            var14 = var13;\n            var15 = var11;\n            var16 = var12;\n        \n            if (var14 < 0x20) {\n                var7 = func_1BAE(var8, var9, var10, var11, var12, var13, var14, var15, var16);\n            \n            label_2457:\n                var6 = var7;\n                var7 = 0x00;\n                var8 = 0x2491;\n                var9 = var5;\n                var temp90 = var4;\n                var10 = temp90;\n                var11 = memory[0x40:0x60] + 0x20;\n                var12 = var11;\n                var14 = memory[var10:var10 + 0x20];\n                var13 = var10 + 0x20;\n                var15 = var14;\n                var16 = var12;\n                var17 = var13;\n            \n                if (var15 < 0x20) {\n                    var8 = func_1BAE(var9, var10, var11, var12, var13, var14, var15, var16, var17);\n                    var7 = var8;\n                \n                    if (var6 & (0x01 << 0xa0) - 0x01 == var7 & (0x01 << 0xa0) - 0x01) {\n                        var8 = 0x24f4;\n                        var8 = func_39BF();\n                        var9 = 0x24fd;\n                        var10 = var2;\n                        goto label_3054;\n                    } else {\n                        var temp91 = memory[0x40:0x60];\n                        memory[temp91:temp91 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp91 + 0x04:temp91 + 0x04 + 0x20] = 0x20;\n                        memory[temp91 + 0x24:temp91 + 0x24 + 0x20] = 0x10;\n                        memory[temp91 + 0x44:temp91 + 0x44 + 0x20] = 0x2234b33332b932b73a1039b4b3b732b9 << 0x81;\n                        var temp92 = memory[0x40:0x60];\n                        revert(memory[temp92:temp92 + temp91 - temp92 + 0x64]);\n                    }\n                } else {\n                    var temp93 = var17;\n                    var temp94 = var16;\n                    memory[temp94:temp94 + 0x20] = memory[temp93:temp93 + 0x20];\n                    var15 = var15 + ~0x1f;\n                    var16 = temp94 + 0x20;\n                    var17 = temp93 + 0x20;\n                \n                label_1B8F:\n                \n                    if (var15 < 0x20) {\n                        var8 = func_1BAE(var9, var10, var11, var12, var13, var14, var15, var16, var17);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp95 = var17;\n                        var temp96 = var16;\n                        memory[temp96:temp96 + 0x20] = memory[temp95:temp95 + 0x20];\n                        var15 = var15 + ~0x1f;\n                        var16 = temp96 + 0x20;\n                        var17 = temp95 + 0x20;\n                        goto label_1B8F;\n                    }\n                }\n            } else {\n                var7 = func_2441(var8, var9, var10, var11, var12, var13, var14, var15, var16);\n                goto label_2457;\n            }\n        } else if (var0 == 0xaa67c919) {\n            // Dispatch table entry for depositFor(address)\n            var1 = 0x0146;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            depositFor(var2, var3);\n            stop();\n        } else if (var0 == 0xadc9772e) {\n            // Dispatch table entry for stake(address,uint256)\n            var1 = 0x0146;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            stake(var2, var3);\n            stop();\n        } else if (var0 == 0xc3e712f2) {\n            // Dispatch table entry for removeRelayByOwner(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0146;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            removeRelayByOwner(var2, var3);\n            stop();\n        } else if (var0 == 0xf2888dbb) {\n            // Dispatch table entry for unstake(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0146;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            unstake(var2, var3);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function withdraw(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x02;\n    \n        if (arg0 <= storage[keccak256(memory[0x00:0x40])]) {\n            var temp1 = (0x01 << 0xa0) - 0x01;\n            memory[0x00:0x20] = var0 & temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0;\n            storage[temp2] = storage[temp2] - temp3;\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x00] = address(arg1 & temp1).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp4:temp4 + 0x00]);\n            var var1 = !temp5;\n        \n            if (!var1) {\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = arg0;\n                var temp7 = memory[0x40:0x60];\n                log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb, stack[-2] & (0x01 << 0xa0) - 0x01, stack[-3] & (0x01 << 0xa0) - 0x01]);\n                return;\n            } else {\n                var temp8 = returndata.length;\n                memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x12;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x696e73756666696369656e742066756e6473 << 0x70;\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n        }\n    }\n    \n    function registerRelay(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = temp0 + arg1;\n        var var0 = temp0;\n        var var1 = var0 + 0x40;\n        var var2 = msg.data[var0 + 0x20:var0 + 0x20 + 0x20];\n    \n        if (var2 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = var0 + var2;\n        var2 = temp1;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var2;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var2 = temp3;\n        var temp4 = var1;\n        var1 = temp2 + 0x20;\n        var var3 = temp4;\n    \n        if ((var2 > 0x01 << 0x20) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2;\n        var temp6 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp6 + (temp5 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + temp5] = msg.data[var1:var1 + temp5];\n        memory[temp7 + temp5:temp7 + temp5 + 0x20] = 0x00;\n        arg1 = temp6;\n        var0 = msg.sender;\n    \n        if (var0 == tx.origin) {\n            var1 = 0x01;\n            memory[0x00:0x20] = var0 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = 0x01;\n            var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] / (0x01 << 0xa0) & 0xff;\n        \n            if (var2 > 0x03) { assert(); }\n        \n            var1 = var2 == var1;\n        \n            if (var1) {\n            label_0F79:\n            \n                if (!var1) {\n                    var temp26 = memory[0x40:0x60];\n                    memory[temp26:temp26 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp26 + 0x04:temp26 + 0x04 + 0x20] = 0x20;\n                    memory[temp26 + 0x24:temp26 + 0x24 + 0x20] = 0x15;\n                    memory[temp26 + 0x44:temp26 + 0x44 + 0x20] = 0x77726f6e6720737461746520666f72207374616b65 << 0x58;\n                    var temp27 = memory[0x40:0x60];\n                    revert(memory[temp27:temp27 + temp26 - temp27 + 0x64]);\n                } else if (address(var0 & (0x01 << 0xa0) - 0x01).balance >= 0x016345785d8a0000) {\n                    var1 = 0x02;\n                    memory[0x00:0x20] = var0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] / (0x01 << 0xa0) & 0xff;\n                \n                    if (var2 > 0x03) { assert(); }\n                \n                    if (var2 == var1) {\n                        var temp8 = (0x01 << 0xa0) - 0x01;\n                        var2 = var0 & temp8;\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x01;\n                        var temp9 = keccak256(memory[0x00:0x40]);\n                        var temp10 = memory[0x40:0x60];\n                        memory[temp10:temp10 + 0x20] = arg0;\n                        memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = storage[temp9];\n                        memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = storage[temp9 + 0x01];\n                        memory[temp10 + 0x60:temp10 + 0x60 + 0x20] = 0x80;\n                        var temp11 = arg1;\n                        memory[temp10 + 0x80:temp10 + 0x80 + 0x20] = memory[temp11:temp11 + 0x20];\n                        var1 = temp8 & storage[temp9 + 0x03];\n                        var var9 = temp10 + 0x60;\n                        var3 = 0x85b3ae3aae9d3fcb31142fbd8c3b4722d57825b8edd6e1366e69204afa5a0dfa;\n                        var var4 = arg0;\n                        var var5 = storage[temp9];\n                        var var6 = storage[temp9 + 0x01];\n                        var var7 = temp11;\n                        var var8 = temp10;\n                        var var10 = var8 + 0xa0;\n                        var var11 = var7 + 0x20;\n                        var var12 = memory[var7:var7 + 0x20];\n                        var var13 = var12;\n                        var var14 = var10;\n                        var var15 = var11;\n                        var var16 = 0x00;\n                    \n                        if (var16 >= var13) {\n                        label_1136:\n                            var temp12 = var12;\n                            var10 = temp12 + var10;\n                            var11 = temp12 & 0x1f;\n                        \n                            if (!var11) {\n                                var temp13 = memory[0x40:0x60];\n                                log(memory[temp13:temp13 + var10 - temp13], [stack[-9], stack[-10], stack[-11]]);\n                                return;\n                            } else {\n                                var temp14 = var11;\n                                var temp15 = var10 - temp14;\n                                memory[temp15:temp15 + 0x20] = ~(0x0100 ** (0x20 - temp14) - 0x01) & memory[temp15:temp15 + 0x20];\n                                var temp16 = memory[0x40:0x60];\n                                log(memory[temp16:temp16 + (temp15 + 0x20) - temp16], [stack[-9], stack[-10], stack[-11]]);\n                                return;\n                            }\n                        } else {\n                        label_1127:\n                            var temp17 = var16;\n                            memory[temp17 + var14:temp17 + var14 + 0x20] = memory[temp17 + var15:temp17 + var15 + 0x20];\n                            var16 = temp17 + 0x20;\n                        \n                            if (var16 >= var13) { goto label_1136; }\n                            else { goto label_1127; }\n                        }\n                    } else {\n                        var temp18 = var0;\n                        memory[0x00:0x20] = temp18 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x01;\n                        var temp19 = keccak256(memory[0x00:0x40]) + 0x03;\n                        storage[temp19] = (storage[temp19] & ~(0xff << 0xa0)) | (0x01 << 0xa1);\n                        var temp20 = (0x01 << 0xa0) - 0x01;\n                        var2 = temp18 & temp20;\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x01;\n                        var temp21 = keccak256(memory[0x00:0x40]);\n                        var temp22 = memory[0x40:0x60];\n                        memory[temp22:temp22 + 0x20] = arg0;\n                        memory[temp22 + 0x20:temp22 + 0x20 + 0x20] = storage[temp21];\n                        memory[temp22 + 0x40:temp22 + 0x40 + 0x20] = storage[temp21 + 0x01];\n                        memory[temp22 + 0x60:temp22 + 0x60 + 0x20] = 0x80;\n                        var temp23 = arg1;\n                        memory[temp22 + 0x80:temp22 + 0x80 + 0x20] = memory[temp23:temp23 + 0x20];\n                        var9 = temp22 + 0x60;\n                        var1 = temp20 & storage[temp21 + 0x03];\n                        var3 = 0x85b3ae3aae9d3fcb31142fbd8c3b4722d57825b8edd6e1366e69204afa5a0dfa;\n                        var4 = arg0;\n                        var5 = storage[temp21];\n                        var6 = storage[temp21 + 0x01];\n                        var7 = temp23;\n                        var8 = temp22;\n                        var10 = var8 + 0xa0;\n                        var11 = var7 + 0x20;\n                        var12 = memory[var7:var7 + 0x20];\n                        var13 = var12;\n                        var14 = var10;\n                        var16 = 0x00;\n                        var15 = var11;\n                    \n                        if (var16 >= var13) { goto label_1136; }\n                        else { goto label_1127; }\n                    }\n                } else {\n                    var temp24 = memory[0x40:0x60];\n                    memory[temp24:temp24 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp24 + 0x04:temp24 + 0x04 + 0x20] = 0x20;\n                    memory[temp24 + 0x24:temp24 + 0x24 + 0x20] = 0x1a;\n                    memory[temp24 + 0x44:temp24 + 0x44 + 0x20] = 0x62616c616e6365206c6f776572207468616e206d696e696d756d000000000000;\n                    var temp25 = memory[0x40:0x60];\n                    revert(memory[temp25:temp25 + temp24 - temp25 + 0x64]);\n                }\n            } else {\n                var1 = 0x02;\n                memory[0x00:0x20] = var0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x01;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] / (0x01 << 0xa0) & 0xff;\n            \n                if (var2 > 0x03) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0F79;\n            }\n        } else {\n            var temp28 = memory[0x40:0x60];\n            memory[temp28:temp28 + 0x20] = 0x461bcd << 0xe5;\n            var temp29 = temp28 + 0x04;\n            var temp30 = temp29 + 0x20;\n            memory[temp29:temp29 + 0x20] = temp30 - temp29;\n            memory[temp30:temp30 + 0x20] = 0x23;\n            var temp31 = temp30 + 0x20;\n            memory[temp31:temp31 + 0x23] = code[0x3ac5:0x3ae8];\n            var temp32 = memory[0x40:0x60];\n            revert(memory[temp32:temp32 + (temp31 + 0x40) - temp32]);\n        }\n    }\n    \n    function canRelay(var arg0, var arg1) returns (var r0, var arg0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        var temp2 = arg1;\n        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var0 = temp0 & msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n        var var2 = temp1;\n        var var1 = var2 + temp2;\n        var var3 = var2 + 0x80;\n        var var4 = msg.data[var2 + 0x60:var2 + 0x60 + 0x20];\n    \n        if (var4 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var2 + var4;\n        var4 = temp3;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = var4;\n        var temp5 = msg.data[temp4:temp4 + 0x20];\n        var4 = temp5;\n        var var5 = var3;\n        var3 = temp4 + 0x20;\n    \n        if ((var4 > 0x01 << 0x20) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var5;\n        var temp7 = var4;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var3:var3 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = var1;\n        var1 = temp8;\n        var temp11 = var2;\n        var2 = msg.data[temp6:temp6 + 0x20];\n        var3 = msg.data[temp6 + 0x20:temp6 + 0x20 + 0x20];\n        var4 = msg.data[temp6 + 0x40:temp6 + 0x40 + 0x20];\n        var5 = msg.data[temp6 + 0x60:temp6 + 0x60 + 0x20];\n        var var6 = temp10;\n        var var7 = temp11;\n        var var8 = temp6 + 0xa0;\n        var var9 = msg.data[temp6 + 0x80:temp6 + 0x80 + 0x20];\n    \n        if (var9 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var7 + var9;\n        var9 = temp12;\n    \n        if (var9 + 0x20 > var6) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var9;\n        var temp14 = msg.data[temp13:temp13 + 0x20];\n        var9 = temp14;\n        var var10 = var8;\n        var8 = temp13 + 0x20;\n    \n        if ((var9 > 0x01 << 0x20) | (var8 + var9 > var6)) { revert(memory[0x00:0x00]); }\n    \n        var temp15 = var10;\n        var temp16 = var9;\n        var temp17 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp17:temp17 + 0x20] = temp16;\n        var temp18 = temp17 + 0x20;\n        memory[temp18:temp18 + temp16] = msg.data[var8:var8 + temp16];\n        memory[temp18 + temp16:temp18 + temp16 + 0x20] = 0x00;\n        var temp19 = var6;\n        var6 = temp17;\n        var temp20 = var7;\n        var7 = temp19;\n        var8 = temp20;\n        var9 = temp15 + 0x20;\n        var10 = msg.data[temp15:temp15 + 0x20];\n    \n        if (var10 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp21 = var8 + var10;\n        var10 = temp21;\n    \n        if (var10 + 0x20 > var7) { revert(memory[0x00:0x00]); }\n    \n        var temp22 = var10;\n        var temp23 = msg.data[temp22:temp22 + 0x20];\n        var10 = temp23;\n        var var11 = var9;\n        var9 = temp22 + 0x20;\n    \n        if ((var10 > 0x01 << 0x20) | (var9 + var10 > var7)) { revert(memory[0x00:0x00]); }\n    \n        var temp24 = var10;\n        var temp25 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp25 + (temp24 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp25:temp25 + 0x20] = temp24;\n        var temp26 = temp25 + 0x20;\n        memory[temp26:temp26 + temp24] = msg.data[var9:var9 + temp24];\n        memory[temp26 + temp24:temp26 + temp24 + 0x20] = 0x00;\n        var7 = temp25;\n        r0, arg0 = func_1178(arg0, arg1, var0, var1, var2, var3, var4, var5, var6, var7);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function recipientCallsAtomic(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var var0 = temp0;\n        arg1 = var0 + arg1;\n        var var1 = var0 + 0x40;\n        var var2 = msg.data[var0 + 0x20:var0 + 0x20 + 0x20];\n    \n        if (var2 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = var0 + var2;\n        var2 = temp1;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var2;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var2 = temp3;\n        var temp4 = var1;\n        var1 = temp2 + 0x20;\n        var var3 = temp4;\n    \n        if ((var2 > 0x01 << 0x20) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var3;\n        var temp6 = arg1;\n        arg1 = var1;\n        var temp7 = var0;\n        var0 = var2;\n        var1 = msg.data[temp5:temp5 + 0x20];\n        var2 = msg.data[temp5 + 0x20:temp5 + 0x20 + 0x20];\n        var var5 = temp6;\n        var3 = msg.data[temp5 + 0x40:temp5 + 0x40 + 0x20];\n        var var6 = temp7;\n        var var4 = msg.data[temp5 + 0x60:temp5 + 0x60 + 0x20];\n        var var7 = temp5 + 0xa0;\n        var var8 = msg.data[temp5 + 0x80:temp5 + 0x80 + 0x20];\n    \n        if (var8 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = var6 + var8;\n        var8 = temp8;\n    \n        if (var8 + 0x20 > var5) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = var8;\n        var temp10 = msg.data[temp9:temp9 + 0x20];\n        var8 = temp10;\n        var temp11 = var7;\n        var7 = temp9 + 0x20;\n        var var9 = temp11;\n    \n        if ((var8 > 0x01 << 0x20) | (var7 + var8 > var5)) { revert(memory[0x00:0x00]); }\n    \n        var5 = var7;\n        var6 = var8;\n        var7 = 0x00;\n        var8 = 0x168e;\n        var8 = func_3998();\n        memory[var8:var8 + 0x20] = msg.gas;\n    \n        if (address(this) == msg.sender) {\n            var temp12 = arg0;\n            memory[0x00:0x20] = temp12 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = 0x02;\n            memory[var8 + 0x20:var8 + 0x20 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n            var temp13 = memory[0x40:0x60];\n            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x20;\n            var temp14 = var6;\n            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = temp14;\n            var temp15 = temp13 + 0x64;\n            memory[temp15:temp15 + temp14] = msg.data[var5:var5 + temp14];\n            memory[temp15 + temp14:temp15 + temp14 + 0x20] = 0x00;\n            var temp16 = temp15 + (temp14 + 0x1f & ~0x1f);\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = temp16 - temp17 - 0x20;\n            memory[0x40:0x60] = temp16;\n            var temp18 = temp17 + 0x20;\n            memory[temp18:temp18 + 0x20] = (memory[temp18:temp18 + 0x20] & (0x01 << 0xe0) - 0x01) | (~((0x01 << 0xe0) - 0x01) & (0x80274db7 << 0xe0));\n            var9 = temp17;\n            var var10 = 0x00;\n            var var11 = 0x60;\n            var var12 = temp12 & (0x01 << 0xa0) - 0x01;\n            var var13 = 0x0186a0;\n            var var14 = var9;\n            var var15 = memory[0x40:0x60];\n            var var16 = var15;\n            var var18 = memory[var14:var14 + 0x20];\n            var var17 = var14 + 0x20;\n            var var19 = var18;\n            var var20 = var16;\n            var var21 = var17;\n        \n            if (var19 < 0x20) {\n            label_17AE:\n                var temp19 = 0x0100 ** (0x20 - var19) - 0x01;\n                var temp20 = var20;\n                memory[temp20:temp20 + 0x20] = (memory[var21:var21 + 0x20] & ~temp19) | (memory[temp20:temp20 + 0x20] & temp19);\n                var temp21 = memory[0x40:0x60];\n                var temp22;\n                temp22, memory[temp21:temp21 + 0x00] = address(var12).call.gas(var13)(memory[temp21:temp21 + (var18 + var16) - temp21]);\n                var13 = returndata.length;\n                var14 = var13;\n            \n                if (var14 == 0x00) {\n                    var11 = 0x60;\n                    var10 = var12;\n                \n                    if (var10) {\n                    label_182A:\n                        var temp23 = var11;\n                        var12 = temp23 + 0x20;\n                        var13 = memory[temp23:temp23 + 0x20];\n                    \n                        if (var13 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        memory[var8 + 0x40:var8 + 0x40 + 0x20] = memory[var12:var12 + 0x20];\n                        var temp24 = memory[0x40:0x60];\n                        var temp25 = var0;\n                        memory[temp24:temp24 + temp25] = msg.data[arg1:arg1 + temp25];\n                        var temp26 = memory[0x40:0x60];\n                        var temp27;\n                        temp27, memory[temp26:temp26 + 0x00] = address(arg0 & (0x01 << 0xa0) - 0x01).call.gas(var3)(memory[temp26:temp26 + (temp24 + temp25) - temp26]);\n                        var10 = returndata.length;\n                        var11 = var10;\n                    \n                        if (var11 == 0x00) {\n                            var temp28 = !!var9;\n                            var temp29 = var8;\n                            var9 = 0x60;\n                            memory[temp29 + var9:temp29 + var9 + 0x20] = temp28;\n                            var10 = 0x00;\n                            var11 = 0x18db;\n                            var12 = 0x18d4;\n                            var13 = (var4 + memory[temp29:temp29 + 0x20]) - msg.gas;\n                            var14 = 0x01;\n                            var12 = func_3026(var13, var14);\n                            var11 = func_18D4(var1, var2, var12);\n                        \n                        label_18DB:\n                            var temp30 = var6;\n                            var temp31 = var8;\n                            var temp32 = memory[temp31 + 0x40:temp31 + 0x40 + 0x20];\n                            var temp33 = memory[0x40:0x60] + 0x24;\n                            var temp34 = temp33 + 0x20;\n                            memory[temp34:temp34 + 0x20] = !!memory[temp31 + 0x60:temp31 + 0x60 + 0x20];\n                            var temp35 = temp34 + 0x20;\n                            memory[temp35:temp35 + 0x20] = var11;\n                            var temp36 = temp35 + 0x20;\n                            memory[temp36:temp36 + 0x20] = temp32;\n                            var temp37 = temp36 + 0x20;\n                            memory[temp33:temp33 + 0x20] = temp37 - temp33;\n                            memory[temp37:temp37 + 0x20] = temp30;\n                            var temp38 = temp37 + 0x20;\n                            memory[temp38:temp38 + temp30] = msg.data[var5:var5 + temp30];\n                            memory[temp38 + temp30:temp38 + temp30 + 0x20] = 0x00;\n                            var temp39 = temp38 + (temp30 + 0x1f & ~0x1f);\n                            var temp40 = memory[0x40:0x60];\n                            memory[temp40:temp40 + 0x20] = temp39 - temp40 - 0x20;\n                            memory[0x40:0x60] = temp39;\n                            var temp41 = temp40 + 0x20;\n                            memory[temp41:temp41 + 0x20] = (memory[temp41:temp41 + 0x20] & (0x01 << 0xe0) - 0x01) | (~((0x01 << 0xe0) - 0x01) & (0xe06e0e22 << 0xe0));\n                            var9 = temp40;\n                            var10 = 0x00;\n                            var11 = arg0 & (0x01 << 0xa0) - 0x01;\n                            var12 = 0x0186a0;\n                            var13 = var9;\n                            var14 = memory[0x40:0x60];\n                            var15 = var14;\n                            var17 = memory[var13:var13 + 0x20];\n                            var16 = var13 + 0x20;\n                            var18 = var17;\n                            var19 = var15;\n                            var20 = var16;\n                        \n                            if (var18 < 0x20) {\n                            label_19C8:\n                                var temp42 = 0x0100 ** (0x20 - var18) - 0x01;\n                                var temp43 = var19;\n                                memory[temp43:temp43 + 0x20] = (memory[var20:var20 + 0x20] & ~temp42) | (memory[temp43:temp43 + 0x20] & temp42);\n                                var temp44 = memory[0x40:0x60];\n                                var temp45;\n                                temp45, memory[temp44:temp44 + 0x00] = address(var11).call.gas(var12)(memory[temp44:temp44 + (var17 + var15) - temp44]);\n                                var12 = returndata.length;\n                                var13 = var12;\n                            \n                                if (var13 == 0x00) {\n                                    var10 = var11;\n                                \n                                    if (var10) {\n                                    label_1A43:\n                                        var temp46 = memory[var8 + 0x20:var8 + 0x20 + 0x20];\n                                        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                                        memory[0x20:0x40] = 0x02;\n                                    \n                                        if (storage[keccak256(memory[0x00:0x40])] < temp46) {\n                                            var9 = 0x1a75;\n                                            var10 = 0x04;\n                                        \n                                        label_2FEA:\n                                            var11 = 0x60;\n                                            var12 = var10;\n                                            var13 = memory[0x40:0x60] + 0x20;\n                                            var14 = var13;\n                                            var15 = var12;\n                                        \n                                            if (var15 > 0x04) { assert(); }\n                                        \n                                            var temp47 = var14;\n                                            memory[temp47:temp47 + 0x20] = var15 & 0xff;\n                                            var temp48 = temp47 + 0x20;\n                                            var temp49 = memory[0x40:0x60];\n                                            memory[temp49:temp49 + 0x20] = temp48 - temp49 - 0x20;\n                                            memory[0x40:0x60] = temp48;\n                                            var11 = temp49;\n                                            var12 = memory[var11:var11 + 0x20];\n                                            var13 = var11 + 0x20;\n                                            revert(memory[var13:var13 + var12]);\n                                        } else if (memory[var8 + 0x60:var8 + 0x60 + 0x20]) { return 0x00; }\n                                        else { return 0x01; }\n                                    } else {\n                                    label_1A3A:\n                                        var11 = 0x1a43;\n                                        var12 = 0x03;\n                                        goto label_2FEA;\n                                    }\n                                } else {\n                                    var temp50 = memory[0x40:0x60];\n                                    var12 = temp50;\n                                    memory[0x40:0x60] = var12 + (returndata.length + 0x3f & ~0x1f);\n                                    memory[var12:var12 + 0x20] = returndata.length;\n                                    var temp51 = returndata.length;\n                                    memory[var12 + 0x20:var12 + 0x20 + temp51] = returndata[0x00:0x00 + temp51];\n                                    var10 = var11;\n                                \n                                    if (var10) { goto label_1A43; }\n                                    else { goto label_1A3A; }\n                                }\n                            } else {\n                            label_19B2:\n                                var temp52 = var20;\n                                var temp53 = var19;\n                                memory[temp53:temp53 + 0x20] = memory[temp52:temp52 + 0x20];\n                                var18 = var18 + ~0x1f;\n                                var19 = temp53 + 0x20;\n                                var20 = temp52 + 0x20;\n                            \n                                if (var18 < 0x20) { goto label_19C8; }\n                                else { goto label_19B2; }\n                            }\n                        } else {\n                            var temp54 = memory[0x40:0x60];\n                            var10 = temp54;\n                            memory[0x40:0x60] = var10 + (returndata.length + 0x3f & ~0x1f);\n                            memory[var10:var10 + 0x20] = returndata.length;\n                            var temp55 = returndata.length;\n                            memory[var10 + 0x20:var10 + 0x20 + temp55] = returndata[0x00:0x00 + temp55];\n                            var temp56 = !!var9;\n                            var temp57 = var8;\n                            var9 = 0x60;\n                            memory[temp57 + var9:temp57 + var9 + 0x20] = temp56;\n                            var10 = 0x00;\n                            var11 = 0x18db;\n                            var12 = 0x18d4;\n                            var13 = (var4 + memory[temp57:temp57 + 0x20]) - msg.gas;\n                            var14 = 0x01;\n                            var12 = func_3026(var13, var14);\n                            var11 = func_18D4(var1, var2, var12);\n                            goto label_18DB;\n                        }\n                    } else {\n                    label_1821:\n                        var12 = 0x182a;\n                        var13 = 0x02;\n                        goto label_2FEA;\n                    }\n                } else {\n                    var temp58 = memory[0x40:0x60];\n                    var13 = temp58;\n                    memory[0x40:0x60] = var13 + (returndata.length + 0x3f & ~0x1f);\n                    memory[var13:var13 + 0x20] = returndata.length;\n                    var temp59 = returndata.length;\n                    memory[var13 + 0x20:var13 + 0x20 + temp59] = returndata[0x00:0x00 + temp59];\n                    var11 = var13;\n                    var10 = var12;\n                \n                    if (var10) { goto label_182A; }\n                    else { goto label_1821; }\n                }\n            } else {\n            label_1798:\n                var temp60 = var21;\n                var temp61 = var20;\n                memory[temp61:temp61 + 0x20] = memory[temp60:temp60 + 0x20];\n                var19 = var19 + ~0x1f;\n                var20 = temp61 + 0x20;\n                var21 = temp60 + 0x20;\n            \n                if (var19 < 0x20) { goto label_17AE; }\n                else { goto label_1798; }\n            }\n        } else {\n            var temp62 = memory[0x40:0x60];\n            memory[temp62:temp62 + 0x20] = 0x461bcd << 0xe5;\n            var temp63 = temp62 + 0x04;\n            var temp64 = temp63 + 0x20;\n            memory[temp63:temp63 + 0x20] = temp64 - temp63;\n            memory[temp64:temp64 + 0x20] = 0x27;\n            var temp65 = temp64 + 0x20;\n            memory[temp65:temp65 + 0x27] = code[0x3a19:0x3a40];\n            var temp66 = memory[0x40:0x60];\n            revert(memory[temp66:temp66 + (temp65 + 0x40) - temp66]);\n        }\n    }\n    \n    function getNonce(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function relayCall(var arg0, var arg1) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        var temp2 = arg1;\n        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var1 = temp1;\n        var var0 = var1 + temp2;\n        var var2 = var1 + 0x60;\n        var var3 = msg.data[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1 + var3;\n        var3 = temp3;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = var3;\n        var temp5 = msg.data[temp4:temp4 + 0x20];\n        var3 = temp5;\n        var temp6 = var2;\n        var2 = temp4 + 0x20;\n        var var4 = temp6;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp7 = var4;\n        var temp8 = var3;\n        var temp9 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp9 + (temp8 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp9:temp9 + 0x20] = temp8;\n        var temp10 = temp9 + 0x20;\n        memory[temp10:temp10 + temp8] = msg.data[var2:var2 + temp8];\n        memory[temp10 + temp8:temp10 + temp8 + 0x20] = 0x00;\n        var temp11 = var0;\n        var0 = temp9;\n        var temp12 = var1;\n        var1 = msg.data[temp7:temp7 + 0x20];\n        var2 = msg.data[temp7 + 0x20:temp7 + 0x20 + 0x20];\n        var3 = msg.data[temp7 + 0x40:temp7 + 0x40 + 0x20];\n        var4 = msg.data[temp7 + 0x60:temp7 + 0x60 + 0x20];\n        var var5 = temp11;\n        var var6 = temp12;\n        var var7 = temp7 + 0xa0;\n        var var8 = msg.data[temp7 + 0x80:temp7 + 0x80 + 0x20];\n    \n        if (var8 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var6 + var8;\n        var8 = temp13;\n    \n        if (var8 + 0x20 > var5) { revert(memory[0x00:0x00]); }\n    \n        var temp14 = var8;\n        var temp15 = msg.data[temp14:temp14 + 0x20];\n        var8 = temp15;\n        var var9 = var7;\n        var7 = temp14 + 0x20;\n    \n        if ((var8 > 0x01 << 0x20) | (var7 + var8 > var5)) { revert(memory[0x00:0x00]); }\n    \n        var temp16 = var9;\n        var temp17 = var8;\n        var temp18 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp18 + (temp17 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp18:temp18 + 0x20] = temp17;\n        var temp19 = temp18 + 0x20;\n        memory[temp19:temp19 + temp17] = msg.data[var7:var7 + temp17];\n        memory[temp19 + temp17:temp19 + temp17 + 0x20] = 0x00;\n        var temp20 = var5;\n        var5 = temp18;\n        var temp21 = var6;\n        var6 = temp20;\n        var7 = temp21;\n        var8 = temp16 + 0x20;\n        var9 = msg.data[temp16:temp16 + 0x20];\n    \n        if (var9 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp22 = var7 + var9;\n        var9 = temp22;\n    \n        if (var9 + 0x20 > var6) { revert(memory[0x00:0x00]); }\n    \n        var temp23 = var9;\n        var temp24 = msg.data[temp23:temp23 + 0x20];\n        var9 = temp24;\n        var var10 = var8;\n        var8 = temp23 + 0x20;\n    \n        if ((var9 > 0x01 << 0x20) | (var8 + var9 > var6)) { revert(memory[0x00:0x00]); }\n    \n        var temp25 = var9;\n        var temp26 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp26 + (temp25 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp26:temp26 + 0x20] = temp25;\n        var temp27 = temp26 + 0x20;\n        memory[temp27:temp27 + temp25] = msg.data[var8:var8 + temp25];\n        memory[temp27 + temp25:temp27 + temp25 + 0x20] = 0x00;\n        var6 = temp26;\n        var7 = msg.gas;\n        var8 = 0x02;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var9 = storage[keccak256(memory[0x00:0x40]) + 0x03] / (0x01 << 0xa0) & 0xff;\n    \n        if (var9 > 0x03) { assert(); }\n    \n        if (var9 != var8) {\n            var temp90 = memory[0x40:0x60];\n            memory[temp90:temp90 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp90 + 0x04:temp90 + 0x04 + 0x20] = 0x20;\n            memory[temp90 + 0x24:temp90 + 0x24 + 0x20] = 0x0d;\n            memory[temp90 + 0x44:temp90 + 0x44 + 0x20] = 0x556e6b6e6f776e2072656c6179 << 0x98;\n            var temp91 = memory[0x40:0x60];\n            revert(memory[temp91:temp91 + temp90 - temp91 + 0x64]);\n        } else if (var2 <= tx.gasprice) {\n            var8 = 0x1cd7;\n            var9 = 0x1ccf;\n            var10 = var3;\n            var9 = func_2350(var10);\n            var8 = func_1CCF(var9);\n        \n            if (var7 >= var8) {\n                memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var8 = storage[keccak256(memory[0x00:0x40])];\n                var9 = 0x1d46;\n                var10 = var3;\n                var var11 = var2;\n                var var12 = var1;\n                var9 = func_2402(var10, var11, var12);\n            \n                if (var9 <= var8) {\n                    var8 = 0x00;\n                    var9 = 0x1da6;\n                    var10 = var0;\n                    var11 = 0x00;\n                    var9 = func_337A(var10, var11);\n                    var8 = var9;\n                    var9 = 0x60;\n                    var10 = 0x00;\n                    var11 = 0x1dbe;\n                    var12 = msg.sender;\n                    var var13 = arg0;\n                    var var14 = arg1;\n                    var var15 = var0;\n                    var var16 = var1;\n                    var var17 = var2;\n                    var var18 = var3;\n                    var var19 = var4;\n                    var var20 = var5;\n                    var var21 = var6;\n                    var11, var12 = func_1178(var12, var13, var14, var15, var16, var17, var18, var19, var20, var21);\n                    var9 = var12;\n                    var10 = var11;\n                \n                    if (!var10) {\n                        var10 = 0x00;\n                        memory[var10:var10 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = var10;\n                        var temp28 = keccak256(memory[var10:var10 + 0x40]);\n                        storage[temp28] = storage[temp28] + 0x01;\n                        var11 = var7 - msg.gas;\n                        var12 = 0x60;\n                        var temp29 = var0;\n                        var13 = temp29;\n                        var14 = arg0;\n                        var15 = memory[0x40:0x60] + 0x20;\n                        var16 = var15;\n                        var17 = var13 + 0x20;\n                        var18 = memory[var13:var13 + 0x20];\n                        var19 = var18;\n                        var20 = var16;\n                        var21 = var17;\n                    \n                        if (var19 < 0x20) {\n                        label_1E9E:\n                            var temp30 = 0x0100 ** (0x20 - var19) - 0x01;\n                            var temp31 = var20;\n                            memory[temp31:temp31 + 0x20] = (memory[var21:var21 + 0x20] & ~temp30) | (memory[temp31:temp31 + 0x20] & temp30);\n                            var temp32 = var18 + var16;\n                            memory[temp32:temp32 + 0x20] = (var14 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01) << 0x60;\n                            var temp33 = temp32 + 0x14;\n                            var temp34 = memory[0x40:0x60];\n                            memory[temp34:temp34 + 0x20] = temp33 - temp34 - 0x20;\n                            memory[0x40:0x60] = temp33;\n                            var12 = temp34;\n                            var13 = 0x60;\n                            var14 = 0x2ca70eba << 0xe0;\n                            var15 = arg1;\n                            var16 = var12;\n                            var17 = var1;\n                            var18 = var2;\n                            var19 = var3;\n                            var20 = var11;\n                            var21 = var9;\n                            var temp35 = memory[0x40:0x60] + 0x24;\n                            var var22 = temp35;\n                            memory[var22:var22 + 0x20] = var15 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                            var temp36 = var22 + 0x20;\n                            var var23 = temp36;\n                            var temp37 = var23 + 0x20;\n                            memory[temp37:temp37 + 0x20] = var17;\n                            var temp38 = temp37 + 0x20;\n                            memory[temp38:temp38 + 0x20] = var18;\n                            var temp39 = temp38 + 0x20;\n                            memory[temp39:temp39 + 0x20] = var19;\n                            var temp40 = temp39 + 0x20;\n                            memory[temp40:temp40 + 0x20] = var20;\n                            var var24 = temp40 + 0x20;\n                            var temp41 = var24 + 0x20;\n                            memory[var23:var23 + 0x20] = temp41 - var22;\n                            memory[temp41:temp41 + 0x20] = memory[var16:var16 + 0x20];\n                            var var25 = temp41 + 0x20;\n                            var var26 = var16 + 0x20;\n                            var var27 = memory[var16:var16 + 0x20];\n                            var var28 = var27;\n                            var var29 = var25;\n                            var var30 = var26;\n                            var var31 = 0x00;\n                        \n                            if (var31 >= var28) {\n                            label_1F75:\n                                var temp42 = var27;\n                                var25 = temp42 + var25;\n                                var26 = temp42 & 0x1f;\n                            \n                                if (!var26) {\n                                    var temp43 = var25;\n                                    memory[var24:var24 + 0x20] = temp43 - var22;\n                                    var temp44 = var21;\n                                    memory[temp43:temp43 + 0x20] = memory[temp44:temp44 + 0x20];\n                                    var25 = temp43 + 0x20;\n                                    var26 = temp44 + 0x20;\n                                    var27 = memory[temp44:temp44 + 0x20];\n                                    var28 = var27;\n                                    var29 = var25;\n                                    var30 = var26;\n                                    var31 = 0x00;\n                                \n                                    if (var31 >= var28) {\n                                    label_1FD5:\n                                        var temp45 = var27;\n                                        var25 = temp45 + var25;\n                                        var26 = temp45 & 0x1f;\n                                    \n                                        if (!var26) {\n                                            var temp46 = var25;\n                                            var temp47 = memory[0x40:0x60];\n                                            memory[temp47:temp47 + 0x20] = temp46 - temp47 - 0x20;\n                                            memory[0x40:0x60] = temp46;\n                                            var temp48 = temp47 + 0x20;\n                                            memory[temp48:temp48 + 0x20] = (memory[temp48:temp48 + 0x20] & (0x01 << 0xe0) - 0x01) | (var14 & ~((0x01 << 0xe0) - 0x01));\n                                            var13 = temp47;\n                                            var14 = 0x60;\n                                            var15 = address(this);\n                                            var16 = var13;\n                                            var17 = memory[0x40:0x60];\n                                            var18 = var17;\n                                            var19 = var16 + 0x20;\n                                            var20 = memory[var16:var16 + 0x20];\n                                            var21 = var20;\n                                            var22 = var18;\n                                            var23 = var19;\n                                        \n                                            if (var21 < 0x20) {\n                                            label_207F:\n                                                var temp49 = 0x0100 ** (0x20 - var21) - 0x01;\n                                                var temp50 = var22;\n                                                memory[temp50:temp50 + 0x20] = (memory[var23:var23 + 0x20] & ~temp49) | (memory[temp50:temp50 + 0x20] & temp49);\n                                                var temp51 = memory[0x40:0x60];\n                                                var temp52;\n                                                temp52, memory[temp51:temp51 + 0x00] = address(var15).call.gas(msg.gas)(memory[temp51:temp51 + (var20 + var18) - temp51]);\n                                                var16 = returndata.length;\n                                                var17 = var16;\n                                            \n                                                if (var17 == 0x00) {\n                                                    var14 = 0x60;\n                                                    var15 = var14 + 0x20;\n                                                    var16 = memory[var14:var14 + 0x20];\n                                                \n                                                    if (var16 < 0x20) { revert(memory[0x00:0x00]); }\n                                                \n                                                label_20FF:\n                                                    var10 = memory[var15:var15 + 0x20];\n                                                    var11 = 0x00;\n                                                    var12 = 0x2123;\n                                                    var13 = 0x211c;\n                                                    var14 = var7 - msg.gas;\n                                                    var15 = 0x00;\n                                                    var13 = func_3026(var14, var15);\n                                                    var12 = func_211C(var1, var2, var13);\n                                                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                                                    memory[0x20:0x40] = 0x02;\n                                                    var11 = var12;\n                                                \n                                                    if (var11 <= storage[keccak256(memory[0x00:0x40])]) {\n                                                        var temp53 = var11;\n                                                        var temp54 = arg1;\n                                                        memory[0x00:0x20] = temp54 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                                                        memory[0x20:0x40] = 0x02;\n                                                        var temp55 = keccak256(memory[0x00:0x40]);\n                                                        storage[temp55] = storage[temp55] - temp53;\n                                                        memory[0x00:0x20] = msg.sender;\n                                                        memory[0x20:0x40] = 0x01;\n                                                        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x03] & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                                                        memory[0x20:0x40] = 0x02;\n                                                        var temp56 = keccak256(memory[0x00:0x40]);\n                                                        storage[temp56] = storage[temp56] + temp53;\n                                                        var12 = temp54 & (0x01 << 0xa0) - 0x01;\n                                                        var13 = arg0 & (0x01 << 0xa0) - 0x01;\n                                                        var14 = msg.sender;\n                                                        var15 = 0xab74390d395916d9e0006298d47938a5def5d367054dcca78fa6ec84381f3f22;\n                                                        var16 = var8;\n                                                        var17 = var10;\n                                                        var18 = temp53;\n                                                        var temp57 = memory[0x40:0x60];\n                                                        var19 = temp57;\n                                                        memory[var19:var19 + 0x20] = var16 & ~((0x01 << 0xe0) - 0x01) & ~((0x01 << 0xe0) - 0x01);\n                                                        var20 = var19 + 0x20;\n                                                        var21 = var17;\n                                                    \n                                                        if (var21 > 0x04) { assert(); }\n                                                    \n                                                        var temp58 = var20;\n                                                        memory[temp58:temp58 + 0x20] = var21 & 0xff;\n                                                        var temp59 = temp58 + 0x20;\n                                                        memory[temp59:temp59 + 0x20] = var18;\n                                                        var temp60 = memory[0x40:0x60];\n                                                        log(memory[temp60:temp60 + (temp59 + 0x20) - temp60], [stack[-7], stack[-8], stack[-9], stack[-10]]);\n                                                    \n                                                    label_22B7:\n                                                        return;\n                                                    } else {\n                                                        var temp61 = memory[0x40:0x60];\n                                                        memory[temp61:temp61 + 0x20] = 0x461bcd << 0xe5;\n                                                        memory[temp61 + 0x04:temp61 + 0x04 + 0x20] = 0x20;\n                                                        memory[temp61 + 0x24:temp61 + 0x24 + 0x20] = 0x13;\n                                                        memory[temp61 + 0x44:temp61 + 0x44 + 0x20] = 0x53686f756c64206e6f74206765742068657265 << 0x68;\n                                                        var temp62 = memory[0x40:0x60];\n                                                        revert(memory[temp62:temp62 + temp61 - temp62 + 0x64]);\n                                                    }\n                                                } else {\n                                                    var temp63 = memory[0x40:0x60];\n                                                    var16 = temp63;\n                                                    memory[0x40:0x60] = var16 + (returndata.length + 0x3f & ~0x1f);\n                                                    memory[var16:var16 + 0x20] = returndata.length;\n                                                    var temp64 = returndata.length;\n                                                    memory[var16 + 0x20:var16 + 0x20 + temp64] = returndata[0x00:0x00 + temp64];\n                                                    var temp65 = var16;\n                                                    var14 = temp65;\n                                                    var15 = var14 + 0x20;\n                                                    var16 = memory[var14:var14 + 0x20];\n                                                \n                                                    if (var16 >= 0x20) { goto label_20FF; }\n                                                    else { revert(memory[0x00:0x00]); }\n                                                }\n                                            } else {\n                                            label_2069:\n                                                var temp66 = var23;\n                                                var temp67 = var22;\n                                                memory[temp67:temp67 + 0x20] = memory[temp66:temp66 + 0x20];\n                                                var21 = var21 + ~0x1f;\n                                                var22 = temp67 + 0x20;\n                                                var23 = temp66 + 0x20;\n                                            \n                                                if (var21 < 0x20) { goto label_207F; }\n                                                else { goto label_2069; }\n                                            }\n                                        } else {\n                                            var temp68 = var26;\n                                            var temp69 = var25 - temp68;\n                                            memory[temp69:temp69 + 0x20] = ~(0x0100 ** (0x20 - temp68) - 0x01) & memory[temp69:temp69 + 0x20];\n                                            var temp70 = temp69 + 0x20;\n                                            var temp71 = memory[0x40:0x60];\n                                            memory[temp71:temp71 + 0x20] = temp70 - temp71 - 0x20;\n                                            memory[0x40:0x60] = temp70;\n                                            var temp72 = temp71 + 0x20;\n                                            memory[temp72:temp72 + 0x20] = (memory[temp72:temp72 + 0x20] & (0x01 << 0xe0) - 0x01) | (var14 & ~((0x01 << 0xe0) - 0x01));\n                                            var13 = temp71;\n                                            var14 = 0x60;\n                                            var15 = address(this);\n                                            var16 = var13;\n                                            var17 = memory[0x40:0x60];\n                                            var18 = var17;\n                                            var20 = memory[var16:var16 + 0x20];\n                                            var19 = var16 + 0x20;\n                                            var21 = var20;\n                                            var22 = var18;\n                                            var23 = var19;\n                                        \n                                            if (var21 < 0x20) { goto label_207F; }\n                                            else { goto label_2069; }\n                                        }\n                                    } else {\n                                    label_1FC6:\n                                        var temp73 = var31;\n                                        memory[temp73 + var29:temp73 + var29 + 0x20] = memory[temp73 + var30:temp73 + var30 + 0x20];\n                                        var31 = temp73 + 0x20;\n                                    \n                                        if (var31 >= var28) { goto label_1FD5; }\n                                        else { goto label_1FC6; }\n                                    }\n                                } else {\n                                    var temp74 = var26;\n                                    var temp75 = var25 - temp74;\n                                    memory[temp75:temp75 + 0x20] = ~(0x0100 ** (0x20 - temp74) - 0x01) & memory[temp75:temp75 + 0x20];\n                                    var temp76 = temp75 + 0x20;\n                                    memory[var24:var24 + 0x20] = temp76 - var22;\n                                    var temp77 = var21;\n                                    memory[temp76:temp76 + 0x20] = memory[temp77:temp77 + 0x20];\n                                    var25 = temp76 + 0x20;\n                                    var27 = memory[temp77:temp77 + 0x20];\n                                    var26 = temp77 + 0x20;\n                                    var28 = var27;\n                                    var29 = var25;\n                                    var30 = var26;\n                                    var31 = 0x00;\n                                \n                                    if (var31 >= var28) { goto label_1FD5; }\n                                    else { goto label_1FC6; }\n                                }\n                            } else {\n                            label_1F66:\n                                var temp78 = var31;\n                                memory[temp78 + var29:temp78 + var29 + 0x20] = memory[temp78 + var30:temp78 + var30 + 0x20];\n                                var31 = temp78 + 0x20;\n                            \n                                if (var31 >= var28) { goto label_1F75; }\n                                else { goto label_1F66; }\n                            }\n                        } else {\n                        label_1E88:\n                            var temp79 = var21;\n                            var temp80 = var20;\n                            memory[temp80:temp80 + 0x20] = memory[temp79:temp79 + 0x20];\n                            var19 = var19 + ~0x1f;\n                            var20 = temp80 + 0x20;\n                            var21 = temp79 + 0x20;\n                        \n                            if (var19 < 0x20) { goto label_1E9E; }\n                            else { goto label_1E88; }\n                        }\n                    } else {\n                        var temp81 = memory[0x40:0x60];\n                        memory[temp81:temp81 + 0x20] = var8 & ~((0x01 << 0xe0) - 0x01) & ~((0x01 << 0xe0) - 0x01);\n                        var temp82 = temp81 + 0x20;\n                        memory[temp82:temp82 + 0x20] = var10;\n                        var temp83 = memory[0x40:0x60];\n                        log(memory[temp83:temp83 + (temp82 + 0x20) - temp83], [0xafb5afd6d1c2e8ffbfb480e674a169f493ece0b22658d4f4484e7334f0241e22, msg.sender, stack[-13] & (0x01 << 0xa0) - 0x01, stack[-12] & (0x01 << 0xa0) - 0x01]);\n                        goto label_22B7;\n                    }\n                } else {\n                    var temp84 = memory[0x40:0x60];\n                    memory[temp84:temp84 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp84 + 0x04:temp84 + 0x04 + 0x20] = 0x20;\n                    memory[temp84 + 0x24:temp84 + 0x24 + 0x20] = 0x19;\n                    memory[temp84 + 0x44:temp84 + 0x44 + 0x20] = 0x526563697069656e742062616c616e636520746f6f206c6f7700000000000000;\n                    var temp85 = memory[0x40:0x60];\n                    revert(memory[temp85:temp85 + temp84 - temp85 + 0x64]);\n                }\n            } else {\n                var temp86 = memory[0x40:0x60];\n                memory[temp86:temp86 + 0x20] = 0x461bcd << 0xe5;\n                memory[temp86 + 0x04:temp86 + 0x04 + 0x20] = 0x20;\n                memory[temp86 + 0x24:temp86 + 0x24 + 0x20] = 0x14;\n                memory[temp86 + 0x44:temp86 + 0x44 + 0x20] = 0x4e6f7420656e6f756768206761736c6566742829 << 0x60;\n                var temp87 = memory[0x40:0x60];\n                revert(memory[temp87:temp87 + temp86 - temp87 + 0x64]);\n            }\n        } else {\n            var temp88 = memory[0x40:0x60];\n            memory[temp88:temp88 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp88 + 0x04:temp88 + 0x04 + 0x20] = 0x20;\n            memory[temp88 + 0x24:temp88 + 0x24 + 0x20] = 0x11;\n            memory[temp88 + 0x44:temp88 + 0x44 + 0x20] = 0x496e76616c696420676173207072696365 << 0x78;\n            var temp89 = memory[0x40:0x60];\n            revert(memory[temp89:temp89 + temp88 - temp89 + 0x64]);\n        }\n    }\n    \n    function requiredGas(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_2350(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x02;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function canUnstake(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        r0 = func_2373(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getRelay(var arg0) returns (var r0, var arg0, var r2, var r3, var r4) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1 + 0x03];\n        r0 = storage[temp1];\n        arg0 = storage[temp1 + 0x01];\n        r2 = storage[temp1 + 0x02];\n        r3 = temp2 & temp0;\n        r4 = temp2 / (0x01 << 0xa0) & 0xff;\n        return r0, arg0, r2, r3, r4;\n    }\n    \n    function maxPossibleCharge(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        r0 = func_2402(arg0, arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function depositFor(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.value;\n    \n        if (arg1 <= 0x1bc16d674ec80000) {\n            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var var0 = 0x2784;\n            var var1 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = arg1;\n            var0 = func_33D2(var1, var2);\n            var temp0 = arg0 & (0x01 << 0xa0) - 0x01;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x02;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = arg1;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0x8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a7, stack[-3] & (0x01 << 0xa0) - 0x01, msg.sender]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x0f;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x6465706f73697420746f6f20626967 << 0x88;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n        }\n    }\n    \n    function stake(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[0x00:0x40]) + 0x03] / (0x01 << 0xa0) & 0xff;\n    \n        if (var1 > 0x03) { assert(); }\n    \n        if (var1 != var0) {\n            var0 = 0x01;\n            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = 0x01;\n            var1 = storage[keccak256(memory[0x00:0x40]) + 0x03] / (0x01 << 0xa0) & 0xff;\n        \n            if (var1 > 0x03) { assert(); }\n        \n            var0 = var1 == var0;\n        \n            if (var0) {\n            label_291F:\n            \n                if (!var0) {\n                    var temp1 = memory[0x40:0x60];\n                    memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n                    memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x15;\n                    memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x77726f6e6720737461746520666f72207374616b65 << 0x58;\n                    var temp2 = memory[0x40:0x60];\n                    revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n                } else {\n                    var temp3 = (0x01 << 0xa0) - 0x01;\n                    memory[0x00:0x20] = temp3 & arg0;\n                    memory[0x20:0x40] = 0x01;\n                \n                    if (msg.sender == storage[keccak256(memory[0x00:0x40]) + 0x03] & temp3) {\n                    label_29CB:\n                        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x01;\n                        var temp4 = keccak256(memory[0x00:0x40]);\n                        var temp5 = msg.value + storage[temp4];\n                        storage[temp4] = temp5;\n                        var0 = msg.value;\n                    \n                        if (0x0de0b6b3a7640000 > temp5) {\n                            var temp17 = memory[0x40:0x60];\n                            memory[temp17:temp17 + 0x20] = 0x461bcd << 0xe5;\n                            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n                            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x18;\n                            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x7374616b65206c6f776572207468616e206d696e696d756d0000000000000000;\n                            var temp18 = memory[0x40:0x60];\n                            revert(memory[temp18:temp18 + temp17 - temp18 + 0x64]);\n                        } else if (arg1 < 0x093a80) {\n                            var temp15 = memory[0x40:0x60];\n                            memory[temp15:temp15 + 0x20] = 0x461bcd << 0xe5;\n                            memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n                            memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x18;\n                            memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x64656c6179206c6f776572207468616e206d696e696d756d0000000000000000;\n                            var temp16 = memory[0x40:0x60];\n                            revert(memory[temp16:temp16 + temp15 - temp16 + 0x64]);\n                        } else if (arg1 <= 0x6ebe00) {\n                            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                            memory[0x20:0x40] = 0x01;\n                        \n                            if (arg1 >= storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                                var temp6 = arg0 & (0x01 << 0xa0) - 0x01;\n                                memory[0x00:0x20] = temp6;\n                                memory[0x20:0x40] = 0x01;\n                                var temp7 = keccak256(memory[0x00:0x40]);\n                                var temp8 = arg1;\n                                storage[temp7 + 0x01] = temp8;\n                                var temp9 = memory[0x40:0x60];\n                                memory[temp9:temp9 + 0x20] = storage[temp7];\n                                memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = temp8;\n                                var temp10 = memory[0x40:0x60];\n                                log(memory[temp10:temp10 + temp9 - temp10 + 0x40], [0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90, stack[-3] & (0x01 << 0xa0) - 0x01]);\n                                return;\n                            } else {\n                                var temp11 = memory[0x40:0x60];\n                                memory[temp11:temp11 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n                                memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x20;\n                                memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = 0x756e7374616b6544656c61792063616e6e6f7420626520646563726561736564;\n                                var temp12 = memory[0x40:0x60];\n                                revert(memory[temp12:temp12 + temp11 - temp12 + 0x64]);\n                            }\n                        } else {\n                            var temp13 = memory[0x40:0x60];\n                            memory[temp13:temp13 + 0x20] = 0x461bcd << 0xe5;\n                            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n                            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x19;\n                            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x64656c617920686967686572207468616e206d6178696d756d00000000000000;\n                            var temp14 = memory[0x40:0x60];\n                            revert(memory[temp14:temp14 + temp13 - temp14 + 0x64]);\n                        }\n                    } else {\n                        var temp19 = memory[0x40:0x60];\n                        memory[temp19:temp19 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp19 + 0x04:temp19 + 0x04 + 0x20] = 0x20;\n                        memory[temp19 + 0x24:temp19 + 0x24 + 0x20] = 0x09;\n                        memory[temp19 + 0x44:temp19 + 0x44 + 0x20] = 0x3737ba1037bbb732b9 << 0xb9;\n                        var temp20 = memory[0x40:0x60];\n                        revert(memory[temp20:temp20 + temp19 - temp20 + 0x64]);\n                    }\n                }\n            } else {\n                var0 = 0x02;\n                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x01;\n                var1 = storage[keccak256(memory[0x00:0x40]) + 0x03] / (0x01 << 0xa0) & 0xff;\n            \n                if (var1 > 0x03) { assert(); }\n            \n                var0 = var1 == var0;\n                goto label_291F;\n            }\n        } else if (arg0 & (0x01 << 0xa0) - 0x01 != msg.sender) {\n            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = 0x01;\n            var temp21 = keccak256(memory[0x00:0x40]) + 0x03;\n            storage[temp21] = ((msg.sender | (storage[temp21] & ~((0x01 << 0xa0) - 0x01))) & ~(0xff << 0xa0)) | (0x01 << 0xa0);\n            goto label_29CB;\n        } else {\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp22 + 0x04:temp22 + 0x04 + 0x20] = 0x20;\n            memory[temp22 + 0x24:temp22 + 0x24 + 0x20] = 0x1d;\n            memory[temp22 + 0x44:temp22 + 0x44 + 0x20] = 0x72656c61792063616e6e6f74207374616b6520666f7220697473656c66000000;\n            var temp23 = memory[0x40:0x60];\n            revert(memory[temp23:temp23 + temp22 - temp23 + 0x64]);\n        }\n    }\n    \n    function removeRelayByOwner(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x01;\n    \n        if (msg.sender == storage[keccak256(memory[0x00:0x40]) + 0x03] & temp0) {\n            arg1 = 0x01;\n            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = 0x01;\n            var var0 = storage[keccak256(memory[0x00:0x40]) + 0x03] / (0x01 << 0xa0) & 0xff;\n        \n            if (var0 > 0x03) { assert(); }\n        \n            arg1 = var0 == arg1;\n        \n            if (arg1) {\n            label_2C9A:\n            \n                if (arg1) {\n                    var temp1 = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x00:0x20] = temp1;\n                    memory[0x20:0x40] = 0x01;\n                    var temp2 = keccak256(memory[0x00:0x40]);\n                    var temp3 = block.timestamp + storage[temp2 + 0x01];\n                    storage[temp2 + 0x02] = temp3;\n                    var temp4 = temp2 + 0x03;\n                    storage[temp4] = (storage[temp4] & ~(0xff << 0xa0)) | (0x03 << 0xa0);\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = temp3;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x5490afc1d818789c8b3d5d63bce3d2a3327d0bba4efb5a7751f783dc977d7d11, stack[-1] & (0x01 << 0xa0) - 0x01]);\n                    return;\n                } else {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                    memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x0f;\n                    memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x185b1c9958591e481c995b5bdd9959 << 0x8a;\n                    var temp8 = memory[0x40:0x60];\n                    revert(memory[temp8:temp8 + temp7 - temp8 + 0x64]);\n                }\n            } else {\n                arg1 = 0x02;\n                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x01;\n                var0 = storage[keccak256(memory[0x00:0x40]) + 0x03] / (0x01 << 0xa0) & 0xff;\n            \n                if (var0 > 0x03) { assert(); }\n            \n                arg1 = var0 == arg1;\n                goto label_2C9A;\n            }\n        } else {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x09;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x3737ba1037bbb732b9 << 0xb9;\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n        }\n    }\n    \n    function unstake(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x2d5a;\n        var var0 = arg0;\n        arg1 = func_2373(var0);\n    \n        if (arg1) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            memory[0x00:0x20] = temp0 & arg0;\n            memory[0x20:0x40] = 0x01;\n        \n            if (msg.sender == storage[keccak256(memory[0x00:0x40]) + 0x03] & temp0) {\n                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x01;\n                var temp1 = keccak256(memory[0x00:0x40]);\n                var temp2 = storage[temp1];\n                storage[temp1] = 0x00;\n                var0 = temp2;\n                storage[temp1 + 0x01] = 0x00;\n                storage[temp1 + 0x02] = 0x00;\n                var temp3 = temp1 + 0x03;\n                storage[temp3] = storage[temp3] & ~((0x01 << 0xa8) - 0x01);\n                var temp4 = memory[0x40:0x60];\n                arg1 = msg.sender;\n                var temp5;\n                temp5, memory[temp4:temp4 + 0x00] = address(arg1).call.gas(!var0 * 0x08fc).value(var0)(memory[temp4:temp4 + 0x00]);\n                var var1 = !temp5;\n            \n                if (!var1) {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = var0;\n                    var temp7 = memory[0x40:0x60];\n                    log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75, stack[-4] & (0x01 << 0xa0) - 0x01]);\n                    return;\n                } else {\n                    var temp8 = returndata.length;\n                    memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x09;\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x3737ba1037bbb732b9 << 0xb9;\n                var temp10 = memory[0x40:0x60];\n                revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n            }\n        } else {\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n            memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x11;\n            memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = 0x18d85b955b9cdd185ad94819985a5b1959 << 0x7a;\n            var temp12 = memory[0x40:0x60];\n            revert(memory[temp12:temp12 + temp11 - temp12 + 0x64]);\n        }\n    }\n    \n    function func_1178(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x60;\n        var var2 = var1;\n        var var3 = arg1;\n        var var4 = arg2;\n        var temp0 = arg3;\n        var var5 = temp0;\n        var var6 = arg4;\n        var var7 = arg5;\n        var var8 = arg6;\n        var var9 = arg7;\n        var var10 = address(this);\n        var temp1 = memory[0x40:0x60] + 0x20;\n        var var11 = temp1;\n        memory[var11:var11 + 0x20] = 0x39363c1d << 0xe1;\n        var temp2 = var11 + 0x04;\n        memory[temp2:temp2 + 0x20] = (var3 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01) << 0x60;\n        var temp3 = temp2 + 0x14;\n        memory[temp3:temp3 + 0x20] = (var4 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01) << 0x60;\n        var var12 = temp3 + 0x14;\n        var var13 = var5 + 0x20;\n        var var14 = memory[var5:var5 + 0x20];\n        var var15 = var14;\n        var var16 = var12;\n        var var17 = var13;\n    \n        if (var15 < 0x20) {\n        label_11FC:\n            var temp4 = 0x0100 ** (0x20 - var15) - 0x01;\n            var temp5 = var16;\n            memory[temp5:temp5 + 0x20] = (memory[var17:var17 + 0x20] & ~temp4) | (memory[temp5:temp5 + 0x20] & temp4);\n            var temp6 = var14 + var12;\n            memory[temp6:temp6 + 0x20] = var6;\n            var temp7 = temp6 + 0x20;\n            memory[temp7:temp7 + 0x20] = var7;\n            var temp8 = temp7 + 0x20;\n            memory[temp8:temp8 + 0x20] = var8;\n            var temp9 = temp8 + 0x20;\n            memory[temp9:temp9 + 0x20] = var9;\n            var temp10 = temp9 + 0x20;\n            memory[temp10:temp10 + 0x20] = (var10 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01) << 0x60;\n            var temp11 = temp10 + 0x14;\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = temp11 - temp12 - 0x20;\n            memory[0x40:0x60] = temp11;\n            var2 = temp12;\n            var3 = 0x00;\n            var4 = var2;\n            var5 = arg0;\n            var6 = memory[0x40:0x60] + 0x20;\n            var7 = var6;\n            var9 = memory[var4:var4 + 0x20];\n            var8 = var4 + 0x20;\n            var10 = var9;\n            var11 = var7;\n            var12 = var8;\n        \n            if (var10 < 0x20) {\n            label_12A2:\n                var temp13 = 0x0100 ** (0x20 - var10) - 0x01;\n                var temp14 = var11;\n                memory[temp14:temp14 + 0x20] = (memory[var12:var12 + 0x20] & ~temp13) | (memory[temp14:temp14 + 0x20] & temp13);\n                var temp15 = var9 + var7;\n                memory[temp15:temp15 + 0x20] = (var5 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01) << 0x60;\n                var temp16 = temp15 + 0x14;\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = temp16 - temp17 - 0x20;\n                memory[0x40:0x60] = temp16;\n                var3 = keccak256(memory[temp17 + 0x20:temp17 + 0x20 + memory[temp17:temp17 + 0x20]]);\n                var4 = arg1 & (0x01 << 0xa0) - 0x01;\n                var5 = 0x131e;\n                var6 = arg8;\n                var7 = 0x1312;\n                var8 = var3;\n                var7 = func_2EAB(var8);\n                var5 = func_1312(var6, var7);\n            \n                if (var5 & (0x01 << 0xa0) - 0x01 == var4) {\n                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                \n                    if (arg7 == storage[keccak256(memory[0x00:0x40])]) {\n                        var2 = 0x00;\n                        var3 = 0x1390;\n                        var4 = arg6;\n                        var5 = arg5;\n                        var6 = arg4;\n                        var3 = func_2402(var4, var5, var6);\n                        var temp18 = var3;\n                        var2 = temp18;\n                        var3 = 0x60;\n                        var4 = 0x83947ea0 << 0xe0;\n                        var5 = arg0;\n                        var6 = arg1;\n                        var temp19 = arg3;\n                        var7 = temp19;\n                        var8 = arg4;\n                        var9 = arg5;\n                        var10 = arg6;\n                        var11 = arg7;\n                        var12 = arg9;\n                        var13 = var2;\n                        var temp20 = memory[0x40:0x60] + 0x24;\n                        var14 = temp20;\n                        memory[var14:var14 + 0x20] = var5 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                        var temp21 = var14 + 0x20;\n                        memory[temp21:temp21 + 0x20] = var6 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                        var temp22 = temp21 + 0x20;\n                        var15 = temp22;\n                        var temp23 = var15 + 0x20;\n                        memory[temp23:temp23 + 0x20] = var8;\n                        var temp24 = temp23 + 0x20;\n                        memory[temp24:temp24 + 0x20] = var9;\n                        var temp25 = temp24 + 0x20;\n                        memory[temp25:temp25 + 0x20] = var10;\n                        var temp26 = temp25 + 0x20;\n                        memory[temp26:temp26 + 0x20] = var11;\n                        var16 = temp26 + 0x20;\n                        var temp27 = var16 + 0x20;\n                        memory[temp27:temp27 + 0x20] = var13;\n                        var temp28 = temp27 + 0x20;\n                        memory[var15:var15 + 0x20] = temp28 - var14;\n                        memory[temp28:temp28 + 0x20] = memory[var7:var7 + 0x20];\n                        var17 = temp28 + 0x20;\n                        var var19 = memory[var7:var7 + 0x20];\n                        var var18 = var7 + 0x20;\n                        var var20 = var19;\n                        var var21 = var17;\n                        var var22 = var18;\n                        var var23 = 0x00;\n                    \n                        if (var23 >= var20) {\n                        label_1443:\n                            var temp29 = var19;\n                            var17 = temp29 + var17;\n                            var18 = temp29 & 0x1f;\n                        \n                            if (!var18) {\n                                var temp30 = var17;\n                                memory[var16:var16 + 0x20] = temp30 - var14;\n                                var temp31 = var12;\n                                memory[temp30:temp30 + 0x20] = memory[temp31:temp31 + 0x20];\n                                var17 = temp30 + 0x20;\n                                var18 = temp31 + 0x20;\n                                var19 = memory[temp31:temp31 + 0x20];\n                                var20 = var19;\n                                var21 = var17;\n                                var22 = var18;\n                                var23 = 0x00;\n                            \n                                if (var23 >= var20) {\n                                label_14A3:\n                                    var temp32 = var19;\n                                    var17 = temp32 + var17;\n                                    var18 = temp32 & 0x1f;\n                                \n                                    if (!var18) {\n                                        var temp33 = var17;\n                                        var temp34 = memory[0x40:0x60];\n                                        memory[temp34:temp34 + 0x20] = temp33 - temp34 - 0x20;\n                                        memory[0x40:0x60] = temp33;\n                                        var temp35 = temp34 + 0x20;\n                                        memory[temp35:temp35 + 0x20] = (memory[temp35:temp35 + 0x20] & (0x01 << 0xe0) - 0x01) | (var4 & ~((0x01 << 0xe0) - 0x01));\n                                        var3 = temp34;\n                                        var4 = 0x00;\n                                        var5 = 0x60;\n                                        var6 = arg2 & (0x01 << 0xa0) - 0x01;\n                                        var7 = 0xc350;\n                                        var8 = var3;\n                                        var9 = memory[0x40:0x60];\n                                        var10 = var9;\n                                        var11 = var8 + 0x20;\n                                        var12 = memory[var8:var8 + 0x20];\n                                        var13 = var12;\n                                        var14 = var10;\n                                        var15 = var11;\n                                    \n                                        if (var13 < 0x20) {\n                                        label_1554:\n                                            var temp36 = 0x0100 ** (0x20 - var13) - 0x01;\n                                            var temp37 = var14;\n                                            memory[temp37:temp37 + 0x20] = (memory[var15:var15 + 0x20] & ~temp36) | (memory[temp37:temp37 + 0x20] & temp36);\n                                            var temp38 = memory[0x40:0x60];\n                                            var temp39;\n                                            temp39, memory[temp38:temp38 + 0x00] = address(var6).staticcall.gas(var7)(memory[temp38:temp38 + (var12 + var10) - temp38]);\n                                            var7 = returndata.length;\n                                            var8 = var7;\n                                        \n                                            if (var8 == 0x00) {\n                                                var5 = 0x60;\n                                                var4 = var6;\n                                            \n                                                if (var4) {\n                                                label_15E4:\n                                                    var temp40 = var5;\n                                                    var6 = temp40 + 0x20;\n                                                    var7 = memory[temp40:temp40 + 0x20];\n                                                \n                                                    if (var7 < 0x40) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp41 = var6;\n                                                    var9 = temp41 + 0x20;\n                                                    var6 = memory[temp41:temp41 + 0x20];\n                                                    var7 = temp41 + var7;\n                                                    var10 = memory[var9:var9 + 0x20];\n                                                    var8 = temp41;\n                                                \n                                                    if (var10 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp42 = var8 + var10;\n                                                    var10 = temp42;\n                                                    var11 = var10 + 0x20;\n                                                \n                                                    if (var11 > var7) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp43 = memory[var10:var10 + 0x20];\n                                                    var12 = temp43;\n                                                \n                                                    if ((var7 < var12 + var11) | (var12 > 0x01 << 0x20)) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var0 = var6;\n                                                    var1 = var10;\n                                                    var6 = !var0;\n                                                \n                                                    if (var6) {\n                                                        if (!var6) {\n                                                        label_166E:\n                                                            var6 = 0x04;\n                                                            var temp44 = memory[0x40:0x60];\n                                                            memory[0x40:0x60] = temp44 + 0x20;\n                                                            memory[temp44:temp44 + 0x20] = 0x00;\n                                                            var1 = temp44;\n                                                            var0 = var6;\n                                                        \n                                                        label_1675:\n                                                            arg0 = var1;\n                                                            r0 = var0;\n                                                            return r0, arg0;\n                                                        } else {\n                                                        label_1665:\n                                                            goto label_1675;\n                                                        }\n                                                    } else if (var0 <= 0x0a) { goto label_166E; }\n                                                    else { goto label_1665; }\n                                                } else {\n                                                label_15C5:\n                                                    var temp45 = memory[0x40:0x60];\n                                                    memory[0x40:0x60] = temp45 + 0x20;\n                                                    memory[temp45:temp45 + 0x20] = 0x00;\n                                                    var1 = temp45;\n                                                    var0 = 0x03;\n                                                    goto label_1675;\n                                                }\n                                            } else {\n                                                var temp46 = memory[0x40:0x60];\n                                                var7 = temp46;\n                                                memory[0x40:0x60] = var7 + (returndata.length + 0x3f & ~0x1f);\n                                                memory[var7:var7 + 0x20] = returndata.length;\n                                                var temp47 = returndata.length;\n                                                memory[var7 + 0x20:var7 + 0x20 + temp47] = returndata[0x00:0x00 + temp47];\n                                                var5 = var7;\n                                                var4 = var6;\n                                            \n                                                if (var4) { goto label_15E4; }\n                                                else { goto label_15C5; }\n                                            }\n                                        } else {\n                                        label_153E:\n                                            var temp48 = var15;\n                                            var temp49 = var14;\n                                            memory[temp49:temp49 + 0x20] = memory[temp48:temp48 + 0x20];\n                                            var13 = var13 + ~0x1f;\n                                            var14 = temp49 + 0x20;\n                                            var15 = temp48 + 0x20;\n                                        \n                                            if (var13 < 0x20) { goto label_1554; }\n                                            else { goto label_153E; }\n                                        }\n                                    } else {\n                                        var temp50 = var18;\n                                        var temp51 = var17 - temp50;\n                                        memory[temp51:temp51 + 0x20] = ~(0x0100 ** (0x20 - temp50) - 0x01) & memory[temp51:temp51 + 0x20];\n                                        var temp52 = temp51 + 0x20;\n                                        var temp53 = memory[0x40:0x60];\n                                        memory[temp53:temp53 + 0x20] = temp52 - temp53 - 0x20;\n                                        memory[0x40:0x60] = temp52;\n                                        var temp54 = temp53 + 0x20;\n                                        memory[temp54:temp54 + 0x20] = (memory[temp54:temp54 + 0x20] & (0x01 << 0xe0) - 0x01) | (var4 & ~((0x01 << 0xe0) - 0x01));\n                                        var3 = temp53;\n                                        var4 = 0x00;\n                                        var5 = 0x60;\n                                        var6 = arg2 & (0x01 << 0xa0) - 0x01;\n                                        var7 = 0xc350;\n                                        var8 = var3;\n                                        var9 = memory[0x40:0x60];\n                                        var10 = var9;\n                                        var12 = memory[var8:var8 + 0x20];\n                                        var11 = var8 + 0x20;\n                                        var13 = var12;\n                                        var14 = var10;\n                                        var15 = var11;\n                                    \n                                        if (var13 < 0x20) { goto label_1554; }\n                                        else { goto label_153E; }\n                                    }\n                                } else {\n                                label_1494:\n                                    var temp55 = var23;\n                                    memory[temp55 + var21:temp55 + var21 + 0x20] = memory[temp55 + var22:temp55 + var22 + 0x20];\n                                    var23 = temp55 + 0x20;\n                                \n                                    if (var23 >= var20) { goto label_14A3; }\n                                    else { goto label_1494; }\n                                }\n                            } else {\n                                var temp56 = var18;\n                                var temp57 = var17 - temp56;\n                                memory[temp57:temp57 + 0x20] = ~(0x0100 ** (0x20 - temp56) - 0x01) & memory[temp57:temp57 + 0x20];\n                                var temp58 = temp57 + 0x20;\n                                memory[var16:var16 + 0x20] = temp58 - var14;\n                                var temp59 = var12;\n                                memory[temp58:temp58 + 0x20] = memory[temp59:temp59 + 0x20];\n                                var17 = temp58 + 0x20;\n                                var19 = memory[temp59:temp59 + 0x20];\n                                var18 = temp59 + 0x20;\n                                var20 = var19;\n                                var21 = var17;\n                                var22 = var18;\n                                var23 = 0x00;\n                            \n                                if (var23 >= var20) { goto label_14A3; }\n                                else { goto label_1494; }\n                            }\n                        } else {\n                        label_1434:\n                            var temp60 = var23;\n                            memory[temp60 + var21:temp60 + var21 + 0x20] = memory[temp60 + var22:temp60 + var22 + 0x20];\n                            var23 = temp60 + 0x20;\n                        \n                            if (var23 >= var20) { goto label_1443; }\n                            else { goto label_1434; }\n                        }\n                    } else {\n                        var temp61 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp61 + 0x20;\n                        memory[temp61:temp61 + 0x20] = 0x00;\n                        var0 = 0x02;\n                        var1 = temp61;\n                        goto label_1675;\n                    }\n                } else {\n                    var temp62 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp62 + 0x20;\n                    memory[temp62:temp62 + 0x20] = 0x00;\n                    var1 = temp62;\n                    var0 = 0x01;\n                    goto label_1675;\n                }\n            } else {\n            label_128C:\n                var temp63 = var12;\n                var temp64 = var11;\n                memory[temp64:temp64 + 0x20] = memory[temp63:temp63 + 0x20];\n                var10 = var10 + ~0x1f;\n                var11 = temp64 + 0x20;\n                var12 = temp63 + 0x20;\n            \n                if (var10 < 0x20) { goto label_12A2; }\n                else { goto label_128C; }\n            }\n        } else {\n        label_11E6:\n            var temp65 = var17;\n            var temp66 = var16;\n            memory[temp66:temp66 + 0x20] = memory[temp65:temp65 + 0x20];\n            var15 = var15 + ~0x1f;\n            var16 = temp66 + 0x20;\n            var17 = temp65 + 0x20;\n        \n            if (var15 < 0x20) { goto label_11FC; }\n            else { goto label_11E6; }\n        }\n    }\n    \n    function func_1312(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n    \n        if (memory[arg1:arg1 + 0x20] == 0x41) {\n            var temp1 = arg1;\n            var var1 = memory[temp1 + 0x20:temp1 + 0x20 + 0x20];\n            var var2 = memory[temp1 + 0x40:temp1 + 0x40 + 0x20];\n            var var3 = byte(memory[temp1 + 0x60:temp1 + 0x60 + 0x20], 0x00);\n        \n            if (var2 <= 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0) {\n                var var4 = var3 & 0xff != 0x1b;\n            \n                if (!var4) {\n                    if (!var4) {\n                    label_2F7E:\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = 0x00;\n                        var temp3 = temp2 + 0x20;\n                        memory[0x40:0x60] = temp3;\n                        memory[temp3:temp3 + 0x20] = arg0;\n                        memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = var3 & 0xff;\n                        memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = var1;\n                        memory[temp2 + 0x80:temp2 + 0x80 + 0x20] = var2;\n                        var temp4 = memory[0x40:0x60];\n                        var4 = 0x01;\n                        var var5 = temp2 + 0xa0;\n                        var temp5;\n                        temp5, memory[temp4 + ~0x1f:temp4 + ~0x1f + 0x20] = address(var4).staticcall.gas(msg.gas)(memory[temp4:temp4 + temp2 - temp4 + 0xa0]);\n                        var var6 = !temp5;\n                    \n                        if (!var6) { return memory[memory[0x40:0x60] + ~0x1f:memory[0x40:0x60] + ~0x1f + 0x20]; }\n                    \n                        var temp6 = returndata.length;\n                        memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    } else {\n                    label_2F73:\n                        var0 = 0x00;\n                    \n                    label_23B8:\n                        return var0;\n                    }\n                } else if (var3 & 0xff == 0x1c) { goto label_2F7E; }\n                else { goto label_2F73; }\n            } else {\n                var0 = 0x00;\n                goto label_23B8;\n            }\n        } else {\n            var0 = 0x00;\n            goto label_23B8;\n        }\n    }\n    \n    function func_18D4(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = arg1;\n        var var1 = arg0;\n        return (arg2 * var0 * (var1 + 0x64)) / 0x64;\n    }\n    \n    function func_1BAE(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) returns (var r0) {\n        var temp0 = 0x0100 ** (0x20 - arg6) - 0x01;\n        var temp1 = arg7;\n        memory[temp1:temp1 + 0x20] = (memory[arg8:arg8 + 0x20] & ~temp0) | (memory[temp1:temp1 + 0x20] & temp0);\n        var temp2 = arg5 + arg3;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp2 - temp3 - 0x20;\n        memory[0x40:0x60] = temp2;\n        var temp4 = arg0;\n        arg0 = keccak256(memory[temp3 + 0x20:temp3 + 0x20 + memory[temp3:temp3 + 0x20]]);\n        arg1 = temp4;\n        arg2 = 0x00;\n    \n        if (memory[arg1:arg1 + 0x20] == 0x41) {\n            var temp5 = arg1;\n            arg3 = memory[temp5 + 0x20:temp5 + 0x20 + 0x20];\n            arg4 = memory[temp5 + 0x40:temp5 + 0x40 + 0x20];\n            arg5 = byte(memory[temp5 + 0x60:temp5 + 0x60 + 0x20], 0x00);\n        \n            if (arg4 <= 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0) {\n                arg6 = arg5 & 0xff != 0x1b;\n            \n                if (!arg6) {\n                    if (!arg6) {\n                    label_2F7E:\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = 0x00;\n                        var temp7 = temp6 + 0x20;\n                        memory[0x40:0x60] = temp7;\n                        memory[temp7:temp7 + 0x20] = arg0;\n                        memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = arg5 & 0xff;\n                        memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = arg3;\n                        memory[temp6 + 0x80:temp6 + 0x80 + 0x20] = arg4;\n                        var temp8 = memory[0x40:0x60];\n                        arg6 = 0x01;\n                        arg7 = temp6 + 0xa0;\n                        var temp9;\n                        temp9, memory[temp8 + ~0x1f:temp8 + ~0x1f + 0x20] = address(arg6).staticcall.gas(msg.gas)(memory[temp8:temp8 + temp6 - temp8 + 0xa0]);\n                        arg8 = !temp9;\n                    \n                        if (!arg8) { return memory[memory[0x40:0x60] + ~0x1f:memory[0x40:0x60] + ~0x1f + 0x20]; }\n                    \n                        var temp10 = returndata.length;\n                        memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    } else {\n                    label_2F73:\n                        arg2 = 0x00;\n                    \n                    label_23B8:\n                        return arg2;\n                    }\n                } else if (arg5 & 0xff == 0x1c) { goto label_2F7E; }\n                else { goto label_2F73; }\n            } else {\n                arg2 = 0x00;\n                goto label_23B8;\n            }\n        } else {\n            arg2 = 0x00;\n            goto label_23B8;\n        }\n    }\n    \n    function func_1CCF(var arg0) returns (var r0) {\n        var var0 = 0xbc4c;\n        var var1 = 0x00;\n    \n        if (var0 <= arg0) { return arg0 - var0; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1e;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n    }\n    \n    function func_211C(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = arg1;\n        var var1 = arg0;\n        return (arg2 * var0 * (var1 + 0x64)) / 0x64;\n    }\n    \n    function version() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x03;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_2348:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_233F; }\n        \n        label_232B:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_232B; }\n        \n        label_233F:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_2348;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_2348;\n        }\n    }\n    \n    function func_2350(var arg0) returns (var r0) { return arg0 + 0x06137c; }\n    \n    function func_2373(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var var1 = !!storage[keccak256(memory[var0:var0 + 0x40]) + 0x02];\n    \n        if (!storage[keccak256(memory[var0:var0 + 0x40]) + 0x02]) { return var1; }\n    \n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return block.timestamp >= storage[keccak256(memory[0x00:0x40]) + 0x02];\n    }\n    \n    function func_2402(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x2417;\n        var var2 = 0x2410;\n        var var3 = arg0;\n        var2 = func_2350(var3);\n        return func_2410(arg1, arg2, var2);\n    }\n    \n    function func_2410(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = arg0;\n        var var1 = arg1;\n        return (arg2 * var0 * (var1 + 0x64)) / 0x64;\n    }\n    \n    function func_2441(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) returns (var r0) {\n        var temp0 = arg8;\n        var temp1 = arg7;\n        memory[temp1:temp1 + 0x20] = memory[temp0:temp0 + 0x20];\n        arg6 = arg6 + ~0x1f;\n        arg7 = temp1 + 0x20;\n        arg8 = temp0 + 0x20;\n    \n    label_1B8F:\n    \n        if (arg6 < 0x20) {\n            r0 = func_1BAE(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);\n            // Error: Could not resolve method call return address!\n        } else {\n            var temp2 = arg8;\n            var temp3 = arg7;\n            memory[temp3:temp3 + 0x20] = memory[temp2:temp2 + 0x20];\n            arg6 = arg6 + ~0x1f;\n            arg7 = temp3 + 0x20;\n            arg8 = temp2 + 0x20;\n            goto label_1B8F;\n        }\n    }\n    \n    function func_2EAB(var arg0) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n        memory[temp0 + 0x3c:temp0 + 0x3c + 0x20] = arg0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0 - temp1 + 0x3c;\n        memory[0x40:0x60] = temp0 + 0x5c;\n        return keccak256(memory[temp1 + 0x20:temp1 + 0x20 + memory[temp1:temp1 + 0x20]]);\n    }\n    \n    function func_3026(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1) { return arg0 + 0x019a28 + 0xbc4c; }\n    \n        var var1 = 0x00;\n        return arg0 + var1 + 0xbc4c;\n    }\n    \n    function func_337A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (memory[arg0:arg0 + 0x20] >= arg1 + 0x04) { return memory[arg1 + arg0 + 0x20:arg1 + arg0 + 0x20 + 0x20] & ~((0x01 << 0xe0) - 0x01); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = temp0 + 0x04;\n        var temp2 = temp1 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2 - temp1;\n        memory[temp2:temp2 + 0x20] = 0x25;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x25] = code[0x3aa0:0x3ac5];\n        var temp4 = memory[0x40:0x60];\n        revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n    }\n    \n    function func_33D2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1b;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_344A(var arg0) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x35b3;\n        var var2 = arg0;\n        var1 = func_37E5(var2);\n    \n        if (var1) {\n            var1 = 0x00;\n            var2 = 0x35ff;\n            var var3 = arg0;\n            var2 = func_3811(var3);\n            var temp0 = var2;\n            var1 = temp0;\n            var temp1 = memory[0x40:0x60];\n            var3 = var1;\n            var2 = temp1;\n            memory[var2:var2 + 0x20] = var3;\n            memory[0x40:0x60] = var2 + var3 * 0x20 + 0x20;\n        \n            if (!var3) {\n            label_363B:\n                var0 = var2;\n                var2 = 0x00;\n                var3 = 0x364d;\n                var var4 = memory[arg0 + 0x20:arg0 + 0x20 + 0x20];\n                var3 = func_385E(var4);\n                var2 = memory[arg0 + 0x20:arg0 + 0x20 + 0x20] + var3;\n                var3 = 0x00;\n                var4 = var3;\n            \n                if (var4 >= var1) {\n                label_36A4:\n                    return var0;\n                } else {\n                label_3662:\n                    var var5 = 0x366a;\n                    var var6 = var2;\n                    var5 = func_38C7(var6);\n                    var temp2 = var5;\n                    var3 = temp2;\n                    var temp3 = memory[0x40:0x60];\n                    var5 = temp3;\n                    memory[0x40:0x60] = var5 + 0x40;\n                    memory[var5:var5 + 0x20] = var3;\n                    memory[var5 + 0x20:var5 + 0x20 + 0x20] = var2;\n                    var6 = var0;\n                    var var7 = var4;\n                \n                    if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                \n                    memory[var7 * 0x20 + var6 + 0x20:var7 * 0x20 + var6 + 0x20 + 0x20] = var5;\n                    var2 = var3 + var2;\n                    var4 = var4 + 0x01;\n                \n                    if (var4 >= var1) { goto label_36A4; }\n                    else { goto label_3662; }\n                }\n            } else {\n                var4 = var2 + 0x20;\n                var5 = 0x3628;\n                var5 = func_39FE();\n            \n            label_3628:\n                var temp4 = var4;\n                memory[temp4:temp4 + 0x20] = var5;\n                var4 = temp4 + 0x20;\n                var3 = var3 - 0x01;\n            \n                if (var3) {\n                    var5 = 0x3628;\n                    var5 = func_39FE();\n                    goto label_3628;\n                } else {\n                    var3 = var4;\n                    goto label_363B;\n                }\n            }\n        } else {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n            memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x0d;\n            memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = 0x1a5cd31a5cdd0819985a5b1959 << 0x9a;\n            var temp6 = memory[0x40:0x60];\n            revert(memory[temp6:temp6 + temp5 - temp6 + 0x64]);\n        }\n    }\n    \n    function func_3461(var arg0, var arg1) returns (var r0) {\n        arg0 = memory[arg1 * 0x20 + 0x20 + arg0:arg1 * 0x20 + 0x20 + arg0 + 0x20];\n        r0 = func_36AD(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_3563(var arg0) returns (var r0) {\n        var var0 = 0x356b;\n        var0 = func_39FE();\n    \n        if (memory[arg0:arg0 + 0x20]) {\n            var temp0 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp0 + 0x40;\n            var temp1 = arg0;\n            memory[temp0:temp0 + 0x20] = memory[temp1:temp1 + 0x20];\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp1 + 0x20;\n            return temp0;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            var0 = temp2;\n            memory[0x40:0x60] = var0 + 0x40;\n            memory[var0:var0 + 0x20] = 0x00;\n            memory[var0 + 0x20:var0 + 0x20 + 0x20] = 0x00;\n            return var0;\n        }\n    }\n    \n    function func_36AD(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x36bd;\n        var var3 = memory[arg0 + 0x20:arg0 + 0x20 + 0x20];\n        var2 = func_385E(var3);\n        var temp0 = arg0;\n        var temp1 = var2;\n        return memory[temp1 + memory[temp0 + 0x20:temp0 + 0x20 + 0x20]:temp1 + memory[temp0 + 0x20:temp0 + 0x20 + 0x20] + 0x20] / 0x0100 ** (0x20 - (memory[temp0:temp0 + 0x20] - temp1));\n    }\n    \n    function func_37E5(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = byte(memory[memory[arg0 + 0x20:arg0 + 0x20 + 0x20]:memory[arg0 + 0x20:arg0 + 0x20 + 0x20] + 0x20], var0);\n        var var2 = memory[arg0 + 0x20:arg0 + 0x20 + 0x20];\n    \n        if (var1 >= 0xc0) { return 0x01; }\n        else { return 0x00; }\n    }\n    \n    function func_3811(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = 0x3827;\n        var var4 = memory[arg0 + 0x20:arg0 + 0x20 + 0x20];\n        var3 = func_385E(var4);\n        var temp0 = arg0;\n        var temp1 = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var temp2 = temp1 + var3;\n        var2 = temp2;\n        var3 = temp1 + memory[temp0:temp0 + 0x20];\n    \n        if (var2 >= var3) {\n        label_3855:\n            return var1;\n        } else {\n        label_383E:\n            var4 = 0x3846;\n            var var5 = var2;\n            var4 = func_38C7(var5);\n            var1 = var1 + 0x01;\n            var2 = var2 + var4;\n            var3 = var3;\n        \n            if (var2 >= var3) { goto label_3855; }\n            else { goto label_383E; }\n        }\n    }\n    \n    function func_385E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = byte(memory[arg0:arg0 + 0x20], var0);\n    \n        if (var1 >= 0x80) {\n            var var2 = var1 < 0xb8;\n        \n            if (var2) {\n            label_3893:\n            \n                if (var2) {\n                    var0 = 0x01;\n                    goto label_1AB1;\n                } else if (var1 >= 0xc0) {\n                    var0 = var1 + ~0xf5;\n                \n                label_1AB1:\n                    return var0;\n                } else {\n                    var0 = var1 + ~0xb5;\n                    goto label_1AB1;\n                }\n            } else {\n                var2 = var1 >= 0xc0;\n            \n                if (var1 >= 0xc0) { goto label_3893; }\n            \n                var2 = var1 < 0xf8;\n                goto label_3893;\n            }\n        } else {\n            var0 = 0x00;\n            goto label_1AB1;\n        }\n    }\n    \n    function func_38C7(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = byte(memory[arg0:arg0 + 0x20], var0);\n    \n        if (var1 < 0x80) {\n            var0 = 0x01;\n            goto label_1AB1;\n        } else if (var1 < 0xb8) {\n            var0 = var1 + ~0x7e;\n            goto label_1AB1;\n        } else if (var1 < 0xc0) {\n            var temp1 = var1 - 0xb7;\n            var temp2 = arg0 + 0x01;\n            arg0 = temp2;\n            return memory[arg0:arg0 + 0x20] / 0x0100 ** (0x20 - temp1) + temp1 + 0x01;\n        } else if (var1 >= 0xf8) {\n            var temp0 = var1;\n            return temp0 + memory[arg0 + 0x01:arg0 + 0x01 + 0x20] / 0x0100 ** (0x20 - temp0 + 0xf7) + ~0xf5;\n        } else {\n            var0 = var1 + ~0xbe;\n        \n        label_1AB1:\n            return var0;\n        }\n    }\n    \n    function func_3998() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x80;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x00;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x00;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_39BF() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xc0;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x00;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = 0x00;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = (0x01 << 0xa0) - 0x01 & 0x00;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x00;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = 0x60;\n        return temp0;\n    }\n    \n    function func_39FE() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 42073 tokens. Please reduce the length of the messages."
}