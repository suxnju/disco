{
	"address": "0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's a Solidity contract implementation for the given decompiled code:\n\n```solidity\npragma solidity ^0.5.8;\n\ncontract Contract {\n    mapping(address => uint256) public balances;\n    mapping(uint256 => address) public punkIndexToAddress;\n    mapping(uint256 => bool) public punkOfferedForSale;\n    mapping(uint256 => uint256) public punkBids;\n\n    function offerPunkForSale(uint256 punkIndex, uint256 minSalePriceInWei) public {\n        require(punkIndexToAddress[punkIndex] == msg.sender);\n        punkOfferedForSale[punkIndex] = true;\n    }\n\n    function withdrawBidForPunk(uint256 punkIndex) public {\n        require(punkIndexToAddress[punkIndex] == msg.sender);\n        punkBids[punkIndex] = 0;\n    }\n\n    function buyPunk(uint256 punkIndex) public payable {\n        require(punkOfferedForSale[punkIndex]);\n        require(msg.value >= punkBids[punkIndex]);\n        punkIndexToAddress[punkIndex] = msg.sender;\n        punkOfferedForSale[punkIndex] = false;\n    }\n\n    function balanceOf(address user) public view returns(uint256) {\n        return balances[user];\n    }\n\n    function punksRemainingToAssign() public view returns(uint256) {\n        return 10000 - balances[msg.sender];\n    }\n\n    function transferPunk(address to, uint256 punkIndex) public {\n        require(punkIndexToAddress[punkIndex] == msg.sender);\n        punkIndexToAddress[punkIndex] = to;\n    }\n\n    function enterBidForPunk(uint256 punkIndex) public payable {\n        require(punkOfferedForSale[punkIndex]);\n        punkBids[punkIndex] = msg.value;\n    }\n\n    function acceptBidForPunk(uint256 punkIndex, uint256 minPrice) public {\n        require(punkOfferedForSale[punkIndex]);\n        require(punkBids[punkIndex] >= minPrice);\n        punkOfferedForSale[punkIndex] = false;\n        punkIndexToAddress[punkIndex] = msg.sender;\n    }\n}\n```\n\nThe above contract is a simplified version of the CryptoPunks contract. It allows users to offer punks for sale, buy offered punks, accept bids for punks, enter bids for punks, and transfer punks to other addresses. Please note, the contract does not fully replicate the functionality of the original CryptoPunks contract and is merely a simplified representation based on the decompiled code provided. It lacks the necessary security checks and should not be used in a production environment without further modifications.",
				"role": "assistant"
			}
		}
	],
	"created": 1700470772,
	"id": "chatcmpl-8MuPsCQYJsHTzRFy9Ab1vHnVkBwZT",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) { assert(); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            if (msg.value) { assert(); }\n        \n            var var1 = 0x016e;\n            var var2 = name();\n        \n        label_016E:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x20;\n            var temp1 = var2;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n            var var3 = temp0;\n            var var4 = var3;\n            var var5 = var4 + 0x40;\n            var var6 = temp1 + 0x20;\n            var var7 = memory[temp1:temp1 + 0x20];\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n        \n            if (!var8) {\n            label_01B4:\n                var temp2 = var7;\n                var5 = temp2 + var5;\n                var6 = temp2 & 0x1f;\n            \n                if (!var6) {\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + var5 - temp3];\n                } else {\n                    var temp4 = var6;\n                    var temp5 = var5 - temp4;\n                    memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                    var temp6 = memory[0x40:0x60];\n                    return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                }\n            } else {\n            label_0194:\n                memory[var9:var9 + 0x20] = memory[var10:var10 + 0x20];\n            \n                if (var8 <= 0x20) { goto label_01B4; }\n            \n                var8 = var8 + ~0x1f;\n                var9 = var9 + 0x20;\n                var10 = var10 + 0x20;\n                goto label_0194;\n            }\n        } else if (var0 == 0x088f11f3) {\n            // Dispatch table entry for punksOfferedForSale(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0201;\n            var2 = msg.data[0x04:0x24];\n            var2, var3, var4, var5, var6 = punksOfferedForSale(var2);\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = !!var2;\n            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var3;\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = temp8 & var4;\n            memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = var5;\n            memory[temp7 + 0x80:temp7 + 0x80 + 0x20] = var6 & temp8;\n            var temp9 = memory[0x40:0x60];\n            return memory[temp9:temp9 + temp7 - temp9 + 0xa0];\n        } else if (var0 == 0x091dbfd2) {\n            // Dispatch table entry for enterBidForPunk(uint256)\n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            enterBidForPunk(var2);\n            stop();\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0257;\n            var2 = totalSupply();\n        \n        label_0257:\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = var2;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n        } else if (var0 == 0x23165b75) {\n            // Dispatch table entry for acceptBidForPunk(uint256,uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            acceptBidForPunk(var2, var3);\n            stop();\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0291;\n            var2 = decimals();\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var2 & 0xff;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x39c5dde6) {\n            // Dispatch table entry for setInitialOwners(address[],uint256[])\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var temp14 = msg.data[0x04:0x24] + 0x04;\n            var temp15 = msg.data[temp14:temp14 + 0x20];\n            var temp16 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp16 + temp15 * 0x20 + 0x20;\n            memory[temp16:temp16 + 0x20] = temp15;\n            var temp17 = temp15 * 0x20;\n            memory[temp16 + 0x20:temp16 + 0x20 + temp17] = msg.data[temp14 + 0x20:temp14 + 0x20 + temp17];\n            var temp18 = memory[0x40:0x60];\n            var temp19 = msg.data[0x24:0x44] + 0x04;\n            var temp20 = msg.data[temp19:temp19 + 0x20];\n            var temp21 = temp20 * 0x20;\n            memory[0x40:0x60] = temp21 + temp18 + 0x20;\n            memory[temp18:temp18 + 0x20] = temp20;\n            var2 = temp16;\n            memory[temp18 + 0x20:temp18 + 0x20 + temp21] = msg.data[temp19 + 0x20:temp19 + 0x20 + temp21];\n            var3 = temp18;\n            setInitialOwners(var2, var3);\n            stop();\n        } else if (var0 == 0x3ccfd60b) {\n            // Dispatch table entry for withdraw()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            withdraw();\n            stop();\n        } else if (var0 == 0x51605d80) {\n            // Dispatch table entry for imageHash()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x016e;\n            var2 = imageHash();\n            goto label_016E;\n        } else if (var0 == 0x52f29a25) {\n            // Dispatch table entry for nextPunkIndexToAssign()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0257;\n            var2 = nextPunkIndexToAssign();\n            goto label_0257;\n        } else if (var0 == 0x58178168) {\n            // Dispatch table entry for punkIndexToAddress(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x040b;\n            var2 = msg.data[0x04:0x24];\n            var2 = punkIndexToAddress(var2);\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp23 = memory[0x40:0x60];\n            return memory[temp23:temp23 + temp22 - temp23 + 0x20];\n        } else if (var0 == 0x5a3b7e42) {\n            // Dispatch table entry for standard()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x016e;\n            var2 = standard();\n            goto label_016E;\n        } else if (var0 == 0x6e743fa9) {\n            // Dispatch table entry for punkBids(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x04ca;\n            var2 = msg.data[0x04:0x24];\n            var2, var3, var4, var5 = punkBids(var2);\n            var temp24 = memory[0x40:0x60];\n            memory[temp24:temp24 + 0x20] = !!var2;\n            memory[temp24 + 0x20:temp24 + 0x20 + 0x20] = var3;\n            memory[temp24 + 0x40:temp24 + 0x40 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n            memory[temp24 + 0x60:temp24 + 0x60 + 0x20] = var5;\n            var temp25 = memory[0x40:0x60];\n            return memory[temp25:temp25 + temp24 - temp25 + 0x80];\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0257;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = balanceOf(var2);\n            goto label_0257;\n        } else if (var0 == 0x7ecedac9) {\n            // Dispatch table entry for allInitialOwnersAssigned()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            allInitialOwnersAssigned();\n            stop();\n        } else if (var0 == 0x8126c38a) {\n            // Dispatch table entry for allPunksAssigned()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x054a;\n            var2 = allPunksAssigned();\n            var temp26 = memory[0x40:0x60];\n            memory[temp26:temp26 + 0x20] = !!var2;\n            var temp27 = memory[0x40:0x60];\n            return memory[temp27:temp27 + temp26 - temp27 + 0x20];\n        } else if (var0 == 0x8264fe98) {\n            // Dispatch table entry for buyPunk(uint256)\n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            buyPunk(var2);\n            stop();\n        } else if (var0 == 0x8b72a2ec) {\n            // Dispatch table entry for transferPunk(address,uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            transferPunk(var2, var3);\n            stop();\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x016e;\n            var2 = symbol();\n            goto label_016E;\n        } else if (var0 == 0x979bc638) {\n            // Dispatch table entry for withdrawBidForPunk(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            withdrawBidForPunk(var2);\n            stop();\n        } else if (var0 == 0xa75a9049) {\n            // Dispatch table entry for setInitialOwner(address,uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            setInitialOwner(var2, var3);\n            stop();\n        } else if (var0 == 0xbf31196f) {\n            // Dispatch table entry for offerPunkForSaleToAddress(uint256,uint256,address)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64] & 0x02 ** 0xa0 - 0x01;\n            offerPunkForSaleToAddress(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xc0d6ce63) {\n            // Dispatch table entry for punksRemainingToAssign()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0257;\n            var2 = punksRemainingToAssign();\n            goto label_0257;\n        } else if (var0 == 0xc44193c3) {\n            // Dispatch table entry for offerPunkForSale(uint256,uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            offerPunkForSale(var2, var3);\n            stop();\n        } else if (var0 == 0xc81d1d5b) {\n            // Dispatch table entry for getPunk(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            getPunk(var2);\n            stop();\n        } else if (var0 == 0xf3f43703) {\n            // Dispatch table entry for pendingWithdrawals(address)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0257;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = pendingWithdrawals(var2);\n            goto label_0257;\n        } else if (var0 == 0xf6eeff1e) {\n            // Dispatch table entry for punkNoLongerForSale(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            punkNoLongerForSale(var2);\n            stop();\n        } else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x03;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_078E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0785; }\n        \n        label_0771:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0771; }\n        \n        label_0785:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_078E;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_078E;\n        }\n    }\n    \n    function punksOfferedForSale(var arg0) returns (var arg0, var r1, var r2, var r3, var r4) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xff;\n        r1 = storage[temp0 + 0x01];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        r2 = temp1 & storage[temp0 + 0x02];\n        r3 = storage[temp0 + 0x03];\n        r4 = temp1 & storage[temp0 + 0x04];\n        return arg0, r1, r2, r3, r4;\n    }\n    \n    function enterBidForPunk(var arg0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 == temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!msg.value) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0d;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (msg.value <= storage[var0 + 0x03]) { revert(memory[0x00:0x00]); }\n    \n        if (storage[var0 + 0x03] <= 0x00) {\n            var temp1 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp1 + 0x80;\n            memory[temp1:temp1 + 0x20] = 0x01;\n            var temp2 = temp1 + 0x20;\n            var temp3 = arg0;\n            memory[temp2:temp2 + 0x20] = temp3;\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            var temp5 = temp4 & msg.sender;\n            var temp6 = temp1 + 0x40;\n            memory[temp6:temp6 + 0x20] = temp5;\n            var temp7 = msg.value;\n            var temp8 = temp1 + 0x60;\n            memory[temp8:temp8 + 0x20] = temp7;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = 0x0d;\n            var temp9 = keccak256(memory[0x00:0x40]);\n            storage[temp9] = !!memory[temp1:temp1 + 0x20] | (storage[temp9] & ~0xff);\n            storage[temp9 + 0x01] = memory[temp2:temp2 + 0x20];\n            var temp10 = temp9 + 0x02;\n            storage[temp10] = (temp4 & memory[temp6:temp6 + 0x20]) | (storage[temp10] & ~(0x02 ** 0xa0 - 0x01));\n            storage[temp9 + 0x03] = memory[temp8:temp8 + 0x20];\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = temp7;\n            var temp12 = memory[0x40:0x60];\n            log(memory[temp12:temp12 + temp11 - temp12 + 0x20], [0x5b859394fabae0c1ba88baffe67e751ab5248d2e879028b8c8d6897b0519f56a, stack[-2], msg.sender]);\n            return;\n        } else {\n            var temp13 = var0;\n            memory[0x00:0x20] = storage[temp13 + 0x02] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var temp14 = keccak256(memory[0x00:0x40]);\n            storage[temp14] = storage[temp13 + 0x03] + storage[temp14];\n            var temp15 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp15 + 0x80;\n            memory[temp15:temp15 + 0x20] = 0x01;\n            var temp16 = temp15 + 0x20;\n            var temp17 = arg0;\n            memory[temp16:temp16 + 0x20] = temp17;\n            var temp18 = 0x02 ** 0xa0 - 0x01;\n            var temp19 = temp18 & msg.sender;\n            var temp20 = temp15 + 0x40;\n            memory[temp20:temp20 + 0x20] = temp19;\n            var temp21 = msg.value;\n            var temp22 = temp15 + 0x60;\n            memory[temp22:temp22 + 0x20] = temp21;\n            memory[0x00:0x20] = temp17;\n            memory[0x20:0x40] = 0x0d;\n            var temp23 = keccak256(memory[0x00:0x40]);\n            storage[temp23] = !!memory[temp15:temp15 + 0x20] | (storage[temp23] & ~0xff);\n            storage[temp23 + 0x01] = memory[temp16:temp16 + 0x20];\n            var temp24 = temp23 + 0x02;\n            storage[temp24] = (temp18 & memory[temp20:temp20 + 0x20]) | (storage[temp24] & ~(0x02 ** 0xa0 - 0x01));\n            storage[temp23 + 0x03] = memory[temp22:temp22 + 0x20];\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = temp21;\n            var temp26 = memory[0x40:0x60];\n            log(memory[temp26:temp26 + temp25 - temp26 + 0x20], [0x5b859394fabae0c1ba88baffe67e751ab5248d2e879028b8c8d6897b0519f56a, stack[-2], msg.sender]);\n            return;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x06]; }\n    \n    function acceptBidForPunk(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0d;\n        var0 = msg.sender;\n        var1 = keccak256(memory[0x00:0x40]);\n    \n        if (!storage[var1 + 0x03]) { revert(memory[0x00:0x00]); }\n    \n        if (storage[var1 + 0x03] < arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = var1;\n        var temp2 = temp1 + 0x02;\n        var temp3 = arg0;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0a;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        storage[temp4] = (temp5 & storage[temp2]) | (storage[temp4] & ~(0x02 ** 0xa0 - 0x01));\n        var temp6 = var0;\n        var temp7 = temp5 & temp6;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = 0x0b;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        storage[temp8] = storage[temp8] + ~0x00;\n        memory[0x00:0x20] = temp5 & storage[temp2];\n        var temp9 = keccak256(memory[0x00:0x40]);\n        storage[temp9] = storage[temp9] + 0x01;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + 0x20] = 0x01;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + temp10 - temp11 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & 0x02 ** 0xa0 - 0x01, storage[stack[-2] + 0x02] & 0x02 ** 0xa0 - 0x01]);\n        var temp12 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp12 + 0xa0;\n        memory[temp12:temp12 + 0x20] = !!0x00;\n        var temp13 = temp12 + 0x20;\n        memory[temp13:temp13 + 0x20] = temp3;\n        var temp14 = temp13 + 0x20;\n        memory[temp14:temp14 + 0x20] = storage[temp1 + 0x02] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp15 = temp14 + 0x20;\n        memory[temp15:temp15 + 0x20] = 0x00;\n        memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = 0x02 ** 0xa0 - 0x01 & 0x00;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0c;\n        var temp16 = keccak256(memory[0x00:0x40]);\n        var temp17 = temp16;\n        storage[temp17] = !!memory[temp12:temp12 + 0x20] | (storage[temp17] & ~0xff);\n        storage[temp16 + 0x01] = memory[temp12 + 0x20:temp12 + 0x20 + 0x20];\n        var temp18 = temp16 + 0x02;\n        storage[temp18] = (memory[temp12 + 0x40:temp12 + 0x40 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp18] & ~(0x02 ** 0xa0 - 0x01));\n        storage[temp16 + 0x03] = memory[temp12 + 0x60:temp12 + 0x60 + 0x20];\n        var temp19 = temp16 + 0x04;\n        storage[temp19] = (memory[temp12 + 0x80:temp12 + 0x80 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp19] & ~(0x02 ** 0xa0 - 0x01));\n        var temp20 = storage[temp1 + 0x03];\n        var temp21 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp21 + 0x80;\n        memory[temp21:temp21 + 0x20] = !!0x00;\n        var temp22 = temp21 + 0x20;\n        memory[temp22:temp22 + 0x20] = temp3;\n        var temp23 = temp22 + 0x20;\n        memory[temp23:temp23 + 0x20] = 0x02 ** 0xa0 - 0x01 & 0x00;\n        memory[temp23 + 0x20:temp23 + 0x20 + 0x20] = 0x00;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0d;\n        var temp24 = keccak256(memory[0x00:0x40]);\n        var temp25 = temp24;\n        storage[temp25] = !!memory[temp21:temp21 + 0x20] | (storage[temp25] & ~0xff);\n        storage[temp24 + 0x01] = memory[temp21 + 0x20:temp21 + 0x20 + 0x20];\n        var temp26 = temp24 + 0x02;\n        storage[temp26] = (memory[temp21 + 0x40:temp21 + 0x40 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp26] & ~(0x02 ** 0xa0 - 0x01));\n        storage[temp24 + 0x03] = memory[temp21 + 0x60:temp21 + 0x60 + 0x20];\n        memory[0x00:0x20] = temp6 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0e;\n        var temp27 = keccak256(memory[0x00:0x40]);\n        storage[temp27] = storage[temp27] + temp20;\n        var temp28 = memory[0x40:0x60];\n        memory[temp28:temp28 + 0x20] = storage[temp1 + 0x03];\n        var temp29 = memory[0x40:0x60];\n        log(memory[temp29:temp29 + (temp28 + 0x20) - temp29], [0x58e5d5a525e3b40bc15abaa38b5882678db1ee68befd2f60bafe3a7fd06db9e3, stack[-5], stack[-3] & 0x02 ** 0xa0 - 0x01, storage[stack[-2] + 0x02] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function setInitialOwners(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var0 = memory[arg0:arg0 + 0x20];\n        var1 = 0x00;\n    \n        if (var1 >= var0) {\n        label_0D39:\n            return;\n        } else {\n        label_0CF9:\n            var var2 = 0x0d30;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n        \n            func_0D09(arg1, var1, var3, var4);\n            var1 = var1 + 0x01;\n        \n            if (var1 >= var0) { goto label_0D39; }\n            else { goto label_0CF9; }\n        }\n    }\n    \n    function func_0D09(var arg0, var arg1, var arg2, var arg3) {\n        arg2 = memory[arg3 * 0x20 + arg2 + 0x20:arg3 * 0x20 + arg2 + 0x20 + 0x20];\n        arg3 = arg0;\n        var var0 = arg1;\n    \n        if (var0 >= memory[arg3:arg3 + 0x20]) { assert(); }\n    \n        arg3 = memory[var0 * 0x20 + arg3 + 0x20:var0 * 0x20 + arg3 + 0x20 + 0x20];\n        setInitialOwner(arg2, arg3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function withdraw() {\n        var var0 = 0x00;\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0e;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1];\n        storage[temp1] = 0x00;\n        var temp3 = memory[0x40:0x60];\n        var0 = temp2;\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp0).call.gas(!var0 * 0x08fc).value(var0)(memory[temp3:temp3 + 0x00]);\n    \n        if (temp4) { return; }\n        else { assert(); }\n    }\n    \n    function imageHash() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x00;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_078E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0785; }\n        \n        label_0771:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0771; }\n        \n        label_0785:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_078E;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_078E;\n        }\n    }\n    \n    function nextPunkIndexToAssign() returns (var r0) { return storage[0x07]; }\n    \n    function punkIndexToAddress(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function standard() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x02;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_078E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0785; }\n        \n        label_0771:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0771; }\n        \n        label_0785:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_078E;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_078E;\n        }\n    }\n    \n    function punkBids(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xff;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02] & 0x02 ** 0xa0 - 0x01;\n        r3 = storage[temp0 + 0x03];\n        return arg0, r1, r2, r3;\n    }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function allInitialOwnersAssigned() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x08] = (storage[0x08] & ~0xff) | 0x01;\n    }\n    \n    function allPunksAssigned() returns (var r0) { return storage[0x08] & 0xff; }\n    \n    function buyPunk(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0c;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (temp0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[var0] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = !!(storage[var0 + 0x04] & 0x02 ** 0xa0 - 0x01);\n    \n        if (storage[var0 + 0x04] & 0x02 ** 0xa0 - 0x01) {\n            var temp28 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[var0 + 0x04] & temp28 == temp28 & msg.sender) { goto label_0FD4; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (!var3) {\n        label_0FD4:\n        \n            if (msg.value < storage[var0 + 0x03]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0a;\n            var temp1 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & temp1 != temp1 & storage[var0 + 0x02]) { revert(memory[0x00:0x00]); }\n        \n            var temp2 = storage[var0 + 0x02];\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0a;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            var temp5 = temp4 & msg.sender;\n            storage[temp3] = temp5 | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n            var temp6 = temp2 & temp4;\n            memory[0x00:0x20] = temp6;\n            memory[0x20:0x40] = 0x0b;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            storage[temp7] = storage[temp7] + ~0x00;\n            memory[0x00:0x20] = temp5;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            storage[temp8] = storage[temp8] + 0x01;\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x01;\n            var temp10 = memory[0x40:0x60];\n            var1 = temp6;\n            log(memory[temp10:temp10 + temp9 - temp10 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[stack[-3] + 0x02] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n            var3 = 0x10aa;\n            var var4 = arg0;\n            punkNoLongerForSale(var4);\n            var temp11 = 0x02 ** 0xa0 - 0x01;\n            var temp12 = var1 & temp11;\n            memory[0x00:0x20] = temp12;\n            memory[0x20:0x40] = 0x0e;\n            var temp13 = keccak256(memory[0x00:0x40]);\n            var temp14 = msg.value;\n            storage[temp13] = temp14 + storage[temp13];\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = temp14;\n            var temp16 = memory[0x40:0x60];\n            var temp17 = arg0;\n            log(memory[temp16:temp16 + temp15 - temp16 + 0x20], [0x58e5d5a525e3b40bc15abaa38b5882678db1ee68befd2f60bafe3a7fd06db9e3, stack[-4], stack[-2] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n            memory[0x00:0x20] = temp17;\n            memory[0x20:0x40] = 0x0d;\n            var2 = keccak256(memory[0x00:0x40]);\n            var temp18 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[var2 + 0x02] & temp18 != temp18 & msg.sender) { return; }\n        \n            var temp19 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp19 & msg.sender;\n            memory[0x20:0x40] = 0x0e;\n            var temp20 = keccak256(memory[0x00:0x40]);\n            storage[temp20] = storage[var2 + 0x03] + storage[temp20];\n            var temp21 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp21 + 0x80;\n            memory[temp21:temp21 + 0x20] = 0x00;\n            var temp22 = temp21 + 0x20;\n            var temp23 = arg0;\n            memory[temp22:temp22 + 0x20] = temp23;\n            var temp24 = temp21 + 0x40;\n            memory[temp24:temp24 + 0x20] = 0x00;\n            var temp25 = temp21 + 0x60;\n            memory[temp25:temp25 + 0x20] = 0x00;\n            memory[0x00:0x20] = temp23;\n            memory[0x20:0x40] = 0x0d;\n            var temp26 = keccak256(memory[0x00:0x40]);\n            storage[temp26] = !!memory[temp21:temp21 + 0x20] | (storage[temp26] & ~0xff);\n            storage[temp26 + 0x01] = memory[temp22:temp22 + 0x20];\n            var temp27 = temp26 + 0x02;\n            storage[temp27] = (temp19 & memory[temp24:temp24 + 0x20]) | (storage[temp27] & ~(0x02 ** 0xa0 - 0x01));\n            storage[temp26 + 0x03] = memory[temp25:temp25 + 0x20];\n            return;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferPunk(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x0c;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) {\n        label_122C:\n            var temp1 = arg1;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x0a;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = 0x02 ** 0xa0 - 0x01;\n            var temp4 = arg0;\n            var temp5 = temp3 & temp4;\n            storage[temp2] = temp5 | (storage[temp2] & ~(0x02 ** 0xa0 - 0x01));\n            var temp6 = temp3 & msg.sender;\n            memory[0x00:0x20] = temp6;\n            memory[0x20:0x40] = 0x0b;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            storage[temp7] = storage[temp7] + ~0x00;\n            memory[0x00:0x20] = temp5;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            storage[temp8] = storage[temp8] + 0x01;\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x01;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + temp9 - temp10 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = temp1;\n            var temp12 = memory[0x40:0x60];\n            log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0x05af636b70da6819000c49f85b21fa82081c632069bb626f30932034099107d8, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x0d;\n            var0 = keccak256(memory[0x00:0x40]);\n            var temp13 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[var0 + 0x02] & temp13 != temp13 & temp4) { return; }\n        \n            var temp14 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp14 & arg0;\n            memory[0x20:0x40] = 0x0e;\n            var temp15 = keccak256(memory[0x00:0x40]);\n            storage[temp15] = storage[var0 + 0x03] + storage[temp15];\n            var temp16 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp16 + 0x80;\n            memory[temp16:temp16 + 0x20] = 0x00;\n            var temp17 = temp16 + 0x20;\n            var temp18 = arg1;\n            memory[temp17:temp17 + 0x20] = temp18;\n            var temp19 = temp16 + 0x40;\n            memory[temp19:temp19 + 0x20] = 0x00;\n            var temp20 = temp16 + 0x60;\n            memory[temp20:temp20 + 0x20] = 0x00;\n            memory[0x00:0x20] = temp18;\n            memory[0x20:0x40] = 0x0d;\n            var temp21 = keccak256(memory[0x00:0x40]);\n            storage[temp21] = !!memory[temp16:temp16 + 0x20] | (storage[temp21] & ~0xff);\n            storage[temp21 + 0x01] = memory[temp17:temp17 + 0x20];\n            var temp22 = temp21 + 0x02;\n            storage[temp22] = (temp14 & memory[temp19:temp19 + 0x20]) | (storage[temp22] & ~(0x02 ** 0xa0 - 0x01));\n            storage[temp21 + 0x03] = memory[temp20:temp20 + 0x20];\n            return;\n        } else {\n            var var1 = 0x122c;\n            var var2 = arg1;\n            punkNoLongerForSale(var2);\n            goto label_122C;\n        }\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x04;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_078E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0785; }\n        \n        label_0771:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0771; }\n        \n        label_0785:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_078E;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_078E;\n        }\n    }\n    \n    function withdrawBidForPunk(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 == temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0d;\n        var0 = keccak256(memory[0x00:0x40]);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0 + 0x02] & temp1 != temp1 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = storage[temp2 + 0x03];\n        var temp4 = memory[0x40:0x60];\n        var temp5 = arg0;\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0x6f30e1ee4d81dcc7a8a478577f65d2ed2edb120565960ac45fe7c50551c87932, stack[-3], msg.sender]);\n        var temp6 = storage[temp2 + 0x03];\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + 0x80;\n        memory[temp7:temp7 + 0x20] = 0x00;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp5;\n        var temp9 = temp7 + 0x40;\n        memory[temp9:temp9 + 0x20] = 0x00;\n        var temp10 = temp7 + 0x60;\n        memory[temp10:temp10 + 0x20] = 0x00;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = 0x0d;\n        var temp11 = keccak256(memory[0x00:0x40]);\n        storage[temp11] = !!memory[temp7:temp7 + 0x20] | (storage[temp11] & ~0xff);\n        storage[temp11 + 0x01] = memory[temp8:temp8 + 0x20];\n        var temp12 = temp11 + 0x02;\n        var temp13 = 0x02 ** 0xa0 - 0x01;\n        storage[temp12] = (temp13 & memory[temp9:temp9 + 0x20]) | (storage[temp12] & ~(0x02 ** 0xa0 - 0x01));\n        storage[temp11 + 0x03] = memory[temp10:temp10 + 0x20];\n        var temp14 = memory[0x40:0x60];\n        var1 = temp6;\n        var temp15;\n        temp15, memory[temp14:temp14 + 0x00] = address(msg.sender & temp13).call.gas(!var1 * 0x08fc).value(var1)(memory[temp14:temp14 + 0x00]);\n    \n        if (temp15) { return; }\n        else { assert(); }\n    }\n    \n    function setInitialOwner(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x08] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x0a;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp1 == temp1 & arg0) { return; }\n    \n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) {\n            storage[0x09] = storage[0x09] + ~0x00;\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x0a;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = arg0 & 0x02 ** 0xa0 - 0x01;\n            storage[temp3] = temp4 | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = 0x0b;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = storage[temp5] + 0x01;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp2;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = 0x0a;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0b;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            storage[temp8] = storage[temp8] + ~0x00;\n            var temp9 = arg1;\n            memory[0x00:0x20] = temp9;\n            memory[0x20:0x40] = 0x0a;\n            var temp10 = keccak256(memory[0x00:0x40]);\n            var temp11 = arg0 & 0x02 ** 0xa0 - 0x01;\n            storage[temp10] = temp11 | (storage[temp10] & ~(0x02 ** 0xa0 - 0x01));\n            memory[0x00:0x20] = temp11;\n            memory[0x20:0x40] = 0x0b;\n            var temp12 = keccak256(memory[0x00:0x40]);\n            storage[temp12] = storage[temp12] + 0x01;\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = temp9;\n            var temp14 = memory[0x40:0x60];\n            log(memory[temp14:temp14 + temp13 - temp14 + 0x20], [0x8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        }\n    }\n    \n    function offerPunkForSaleToAddress(var arg0, var arg1, var arg2) {\n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0xa0;\n        memory[temp1:temp1 + 0x20] = 0x01;\n        var temp2 = temp1 + 0x20;\n        var temp3 = arg0;\n        memory[temp2:temp2 + 0x20] = temp3;\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp1 + 0x40;\n        memory[temp5:temp5 + 0x20] = temp4 & msg.sender;\n        var temp6 = temp1 + 0x60;\n        var temp7 = arg1;\n        memory[temp6:temp6 + 0x20] = temp7;\n        var temp8 = temp4 & arg2;\n        var temp9 = temp1 + 0x80;\n        memory[temp9:temp9 + 0x20] = temp8;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0c;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        storage[temp10] = !!memory[temp1:temp1 + 0x20] | (storage[temp10] & ~0xff);\n        storage[temp10 + 0x01] = memory[temp2:temp2 + 0x20];\n        var temp11 = temp10 + 0x02;\n        var temp12 = ~(0x02 ** 0xa0 - 0x01);\n        storage[temp11] = (temp4 & memory[temp5:temp5 + 0x20]) | (temp12 & storage[temp11]);\n        storage[temp10 + 0x03] = memory[temp6:temp6 + 0x20];\n        var temp13 = temp10 + 0x04;\n        storage[temp13] = (memory[temp9:temp9 + 0x20] & temp4) | (temp12 & storage[temp13]);\n        var temp14 = memory[0x40:0x60];\n        memory[temp14:temp14 + 0x20] = temp7;\n        var temp15 = memory[0x40:0x60];\n        log(memory[temp15:temp15 + temp14 - temp15 + 0x20], [0x3c7b682d5da98001a9b8cbda6c647d2c63d698a4184fd1d55e2ce7b66f5d21eb, stack[-3], stack[-1] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function punksRemainingToAssign() returns (var r0) { return storage[0x09]; }\n    \n    function offerPunkForSale(var arg0, var arg1) {\n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0xa0;\n        memory[temp1:temp1 + 0x20] = 0x01;\n        var temp2 = temp1 + 0x20;\n        var temp3 = arg0;\n        memory[temp2:temp2 + 0x20] = temp3;\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp1 + 0x40;\n        memory[temp5:temp5 + 0x20] = temp4 & msg.sender;\n        var temp6 = temp1 + 0x60;\n        var temp7 = arg1;\n        memory[temp6:temp6 + 0x20] = temp7;\n        var temp8 = temp1 + 0x80;\n        memory[temp8:temp8 + 0x20] = 0x00;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0c;\n        var temp9 = keccak256(memory[0x00:0x40]);\n        storage[temp9] = !!memory[temp1:temp1 + 0x20] | (storage[temp9] & ~0xff);\n        storage[temp9 + 0x01] = memory[temp2:temp2 + 0x20];\n        var temp10 = temp9 + 0x02;\n        var temp11 = ~(0x02 ** 0xa0 - 0x01);\n        storage[temp10] = (temp4 & memory[temp5:temp5 + 0x20]) | (temp11 & storage[temp10]);\n        storage[temp9 + 0x03] = memory[temp6:temp6 + 0x20];\n        var temp12 = temp9 + 0x04;\n        storage[temp12] = (memory[temp8:temp8 + 0x20] & temp4) | (temp11 & storage[temp12]);\n        var temp13 = memory[0x40:0x60];\n        memory[temp13:temp13 + 0x20] = temp7;\n        var temp14 = memory[0x40:0x60];\n        log(memory[temp14:temp14 + temp13 - temp14 + 0x20], [0x3c7b682d5da98001a9b8cbda6c647d2c63d698a4184fd1d55e2ce7b66f5d21eb, stack[-2], 0x00]);\n    }\n    \n    function getPunk(var arg0) {\n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (!storage[0x09]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = msg.sender;\n        storage[temp1] = temp2 | (storage[temp1] & ~(0x02 ** 0xa0 - 0x01));\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x0b;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] + 0x01;\n        storage[0x09] = storage[0x09] + ~0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba, msg.sender]);\n    }\n    \n    function pendingWithdrawals(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0e;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function punkNoLongerForSale(var arg0) {\n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0xa0;\n        memory[temp1:temp1 + 0x20] = 0x00;\n        var temp2 = temp1 + 0x20;\n        var temp3 = arg0;\n        memory[temp2:temp2 + 0x20] = temp3;\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp1 + 0x40;\n        memory[temp5:temp5 + 0x20] = temp4 & msg.sender;\n        var temp6 = temp1 + 0x60;\n        memory[temp6:temp6 + 0x20] = 0x00;\n        var temp7 = temp1 + 0x80;\n        memory[temp7:temp7 + 0x20] = 0x00;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0c;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        storage[temp8] = (storage[temp8] & ~0xff) | !!memory[temp1:temp1 + 0x20];\n        storage[temp8 + 0x01] = memory[temp2:temp2 + 0x20];\n        var temp9 = temp8 + 0x02;\n        var temp10 = ~(0x02 ** 0xa0 - 0x01);\n        storage[temp9] = (temp10 & storage[temp9]) | (temp4 & memory[temp5:temp5 + 0x20]);\n        storage[temp8 + 0x03] = memory[temp6:temp6 + 0x20];\n        var temp11 = temp8 + 0x04;\n        storage[temp11] = (storage[temp11] & temp10) | (temp4 & memory[temp7:temp7 + 0x20]);\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xb0e0a660b4e50f26f0b7ce75c24655fc76cc66e3334a54ff410277229fa10bd4, stack[-1]]);\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) { assert(); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            if (msg.value) { assert(); }\n        \n            var var1 = 0x016e;\n            var var2 = name();\n        \n        label_016E:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x20;\n            var temp1 = var2;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n            var var3 = temp0;\n            var var4 = var3;\n            var var5 = var4 + 0x40;\n            var var6 = temp1 + 0x20;\n            var var7 = memory[temp1:temp1 + 0x20];\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n        \n            if (!var8) {\n            label_01B4:\n                var temp2 = var7;\n                var5 = temp2 + var5;\n                var6 = temp2 & 0x1f;\n            \n                if (!var6) {\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + var5 - temp3];\n                } else {\n                    var temp4 = var6;\n                    var temp5 = var5 - temp4;\n                    memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                    var temp6 = memory[0x40:0x60];\n                    return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                }\n            } else {\n            label_0194:\n                memory[var9:var9 + 0x20] = memory[var10:var10 + 0x20];\n            \n                if (var8 <= 0x20) { goto label_01B4; }\n            \n                var8 = var8 + ~0x1f;\n                var9 = var9 + 0x20;\n                var10 = var10 + 0x20;\n                goto label_0194;\n            }\n        } else if (var0 == 0x088f11f3) {\n            // Dispatch table entry for punksOfferedForSale(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0201;\n            var2 = msg.data[0x04:0x24];\n            var2, var3, var4, var5, var6 = punksOfferedForSale(var2);\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = !!var2;\n            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var3;\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = temp8 & var4;\n            memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = var5;\n            memory[temp7 + 0x80:temp7 + 0x80 + 0x20] = var6 & temp8;\n            var temp9 = memory[0x40:0x60];\n            return memory[temp9:temp9 + temp7 - temp9 + 0xa0];\n        } else if (var0 == 0x091dbfd2) {\n            // Dispatch table entry for enterBidForPunk(uint256)\n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            enterBidForPunk(var2);\n            stop();\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0257;\n            var2 = totalSupply();\n        \n        label_0257:\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = var2;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n        } else if (var0 == 0x23165b75) {\n            // Dispatch table entry for acceptBidForPunk(uint256,uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            acceptBidForPunk(var2, var3);\n            stop();\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0291;\n            var2 = decimals();\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var2 & 0xff;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x39c5dde6) {\n            // Dispatch table entry for setInitialOwners(address[],uint256[])\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var temp14 = msg.data[0x04:0x24] + 0x04;\n            var temp15 = msg.data[temp14:temp14 + 0x20];\n            var temp16 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp16 + temp15 * 0x20 + 0x20;\n            memory[temp16:temp16 + 0x20] = temp15;\n            var temp17 = temp15 * 0x20;\n            memory[temp16 + 0x20:temp16 + 0x20 + temp17] = msg.data[temp14 + 0x20:temp14 + 0x20 + temp17];\n            var temp18 = memory[0x40:0x60];\n            var temp19 = msg.data[0x24:0x44] + 0x04;\n            var temp20 = msg.data[temp19:temp19 + 0x20];\n            var temp21 = temp20 * 0x20;\n            memory[0x40:0x60] = temp21 + temp18 + 0x20;\n            memory[temp18:temp18 + 0x20] = temp20;\n            var2 = temp16;\n            memory[temp18 + 0x20:temp18 + 0x20 + temp21] = msg.data[temp19 + 0x20:temp19 + 0x20 + temp21];\n            var3 = temp18;\n            setInitialOwners(var2, var3);\n            stop();\n        } else if (var0 == 0x3ccfd60b) {\n            // Dispatch table entry for withdraw()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            withdraw();\n            stop();\n        } else if (var0 == 0x51605d80) {\n            // Dispatch table entry for imageHash()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x016e;\n            var2 = imageHash();\n            goto label_016E;\n        } else if (var0 == 0x52f29a25) {\n            // Dispatch table entry for nextPunkIndexToAssign()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0257;\n            var2 = nextPunkIndexToAssign();\n            goto label_0257;\n        } else if (var0 == 0x58178168) {\n            // Dispatch table entry for punkIndexToAddress(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x040b;\n            var2 = msg.data[0x04:0x24];\n            var2 = punkIndexToAddress(var2);\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp23 = memory[0x40:0x60];\n            return memory[temp23:temp23 + temp22 - temp23 + 0x20];\n        } else if (var0 == 0x5a3b7e42) {\n            // Dispatch table entry for standard()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x016e;\n            var2 = standard();\n            goto label_016E;\n        } else if (var0 == 0x6e743fa9) {\n            // Dispatch table entry for punkBids(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x04ca;\n            var2 = msg.data[0x04:0x24];\n            var2, var3, var4, var5 = punkBids(var2);\n            var temp24 = memory[0x40:0x60];\n            memory[temp24:temp24 + 0x20] = !!var2;\n            memory[temp24 + 0x20:temp24 + 0x20 + 0x20] = var3;\n            memory[temp24 + 0x40:temp24 + 0x40 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n            memory[temp24 + 0x60:temp24 + 0x60 + 0x20] = var5;\n            var temp25 = memory[0x40:0x60];\n            return memory[temp25:temp25 + temp24 - temp25 + 0x80];\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0257;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = balanceOf(var2);\n            goto label_0257;\n        } else if (var0 == 0x7ecedac9) {\n            // Dispatch table entry for allInitialOwnersAssigned()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            allInitialOwnersAssigned();\n            stop();\n        } else if (var0 == 0x8126c38a) {\n            // Dispatch table entry for allPunksAssigned()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x054a;\n            var2 = allPunksAssigned();\n            var temp26 = memory[0x40:0x60];\n            memory[temp26:temp26 + 0x20] = !!var2;\n            var temp27 = memory[0x40:0x60];\n            return memory[temp27:temp27 + temp26 - temp27 + 0x20];\n        } else if (var0 == 0x8264fe98) {\n            // Dispatch table entry for buyPunk(uint256)\n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            buyPunk(var2);\n            stop();\n        } else if (var0 == 0x8b72a2ec) {\n            // Dispatch table entry for transferPunk(address,uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            transferPunk(var2, var3);\n            stop();\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x016e;\n            var2 = symbol();\n            goto label_016E;\n        } else if (var0 == 0x979bc638) {\n            // Dispatch table entry for withdrawBidForPunk(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            withdrawBidForPunk(var2);\n            stop();\n        } else if (var0 == 0xa75a9049) {\n            // Dispatch table entry for setInitialOwner(address,uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            setInitialOwner(var2, var3);\n            stop();\n        } else if (var0 == 0xbf31196f) {\n            // Dispatch table entry for offerPunkForSaleToAddress(uint256,uint256,address)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64] & 0x02 ** 0xa0 - 0x01;\n            offerPunkForSaleToAddress(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xc0d6ce63) {\n            // Dispatch table entry for punksRemainingToAssign()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0257;\n            var2 = punksRemainingToAssign();\n            goto label_0257;\n        } else if (var0 == 0xc44193c3) {\n            // Dispatch table entry for offerPunkForSale(uint256,uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            offerPunkForSale(var2, var3);\n            stop();\n        } else if (var0 == 0xc81d1d5b) {\n            // Dispatch table entry for getPunk(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            getPunk(var2);\n            stop();\n        } else if (var0 == 0xf3f43703) {\n            // Dispatch table entry for pendingWithdrawals(address)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0257;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = pendingWithdrawals(var2);\n            goto label_0257;\n        } else if (var0 == 0xf6eeff1e) {\n            // Dispatch table entry for punkNoLongerForSale(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            punkNoLongerForSale(var2);\n            stop();\n        } else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x03;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_078E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0785; }\n        \n        label_0771:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0771; }\n        \n        label_0785:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_078E;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_078E;\n        }\n    }\n    \n    function punksOfferedForSale(var arg0) returns (var arg0, var r1, var r2, var r3, var r4) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xff;\n        r1 = storage[temp0 + 0x01];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        r2 = temp1 & storage[temp0 + 0x02];\n        r3 = storage[temp0 + 0x03];\n        r4 = temp1 & storage[temp0 + 0x04];\n        return arg0, r1, r2, r3, r4;\n    }\n    \n    function enterBidForPunk(var arg0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 == temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!msg.value) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0d;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (msg.value <= storage[var0 + 0x03]) { revert(memory[0x00:0x00]); }\n    \n        if (storage[var0 + 0x03] <= 0x00) {\n            var temp1 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp1 + 0x80;\n            memory[temp1:temp1 + 0x20] = 0x01;\n            var temp2 = temp1 + 0x20;\n            var temp3 = arg0;\n            memory[temp2:temp2 + 0x20] = temp3;\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            var temp5 = temp4 & msg.sender;\n            var temp6 = temp1 + 0x40;\n            memory[temp6:temp6 + 0x20] = temp5;\n            var temp7 = msg.value;\n            var temp8 = temp1 + 0x60;\n            memory[temp8:temp8 + 0x20] = temp7;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = 0x0d;\n            var temp9 = keccak256(memory[0x00:0x40]);\n            storage[temp9] = !!memory[temp1:temp1 + 0x20] | (storage[temp9] & ~0xff);\n            storage[temp9 + 0x01] = memory[temp2:temp2 + 0x20];\n            var temp10 = temp9 + 0x02;\n            storage[temp10] = (temp4 & memory[temp6:temp6 + 0x20]) | (storage[temp10] & ~(0x02 ** 0xa0 - 0x01));\n            storage[temp9 + 0x03] = memory[temp8:temp8 + 0x20];\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = temp7;\n            var temp12 = memory[0x40:0x60];\n            log(memory[temp12:temp12 + temp11 - temp12 + 0x20], [0x5b859394fabae0c1ba88baffe67e751ab5248d2e879028b8c8d6897b0519f56a, stack[-2], msg.sender]);\n            return;\n        } else {\n            var temp13 = var0;\n            memory[0x00:0x20] = storage[temp13 + 0x02] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var temp14 = keccak256(memory[0x00:0x40]);\n            storage[temp14] = storage[temp13 + 0x03] + storage[temp14];\n            var temp15 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp15 + 0x80;\n            memory[temp15:temp15 + 0x20] = 0x01;\n            var temp16 = temp15 + 0x20;\n            var temp17 = arg0;\n            memory[temp16:temp16 + 0x20] = temp17;\n            var temp18 = 0x02 ** 0xa0 - 0x01;\n            var temp19 = temp18 & msg.sender;\n            var temp20 = temp15 + 0x40;\n            memory[temp20:temp20 + 0x20] = temp19;\n            var temp21 = msg.value;\n            var temp22 = temp15 + 0x60;\n            memory[temp22:temp22 + 0x20] = temp21;\n            memory[0x00:0x20] = temp17;\n            memory[0x20:0x40] = 0x0d;\n            var temp23 = keccak256(memory[0x00:0x40]);\n            storage[temp23] = !!memory[temp15:temp15 + 0x20] | (storage[temp23] & ~0xff);\n            storage[temp23 + 0x01] = memory[temp16:temp16 + 0x20];\n            var temp24 = temp23 + 0x02;\n            storage[temp24] = (temp18 & memory[temp20:temp20 + 0x20]) | (storage[temp24] & ~(0x02 ** 0xa0 - 0x01));\n            storage[temp23 + 0x03] = memory[temp22:temp22 + 0x20];\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = temp21;\n            var temp26 = memory[0x40:0x60];\n            log(memory[temp26:temp26 + temp25 - temp26 + 0x20], [0x5b859394fabae0c1ba88baffe67e751ab5248d2e879028b8c8d6897b0519f56a, stack[-2], msg.sender]);\n            return;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x06]; }\n    \n    function acceptBidForPunk(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0d;\n        var0 = msg.sender;\n        var1 = keccak256(memory[0x00:0x40]);\n    \n        if (!storage[var1 + 0x03]) { revert(memory[0x00:0x00]); }\n    \n        if (storage[var1 + 0x03] < arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = var1;\n        var temp2 = temp1 + 0x02;\n        var temp3 = arg0;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0a;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        storage[temp4] = (temp5 & storage[temp2]) | (storage[temp4] & ~(0x02 ** 0xa0 - 0x01));\n        var temp6 = var0;\n        var temp7 = temp5 & temp6;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = 0x0b;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        storage[temp8] = storage[temp8] + ~0x00;\n        memory[0x00:0x20] = temp5 & storage[temp2];\n        var temp9 = keccak256(memory[0x00:0x40]);\n        storage[temp9] = storage[temp9] + 0x01;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + 0x20] = 0x01;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + temp10 - temp11 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & 0x02 ** 0xa0 - 0x01, storage[stack[-2] + 0x02] & 0x02 ** 0xa0 - 0x01]);\n        var temp12 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp12 + 0xa0;\n        memory[temp12:temp12 + 0x20] = !!0x00;\n        var temp13 = temp12 + 0x20;\n        memory[temp13:temp13 + 0x20] = temp3;\n        var temp14 = temp13 + 0x20;\n        memory[temp14:temp14 + 0x20] = storage[temp1 + 0x02] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp15 = temp14 + 0x20;\n        memory[temp15:temp15 + 0x20] = 0x00;\n        memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = 0x02 ** 0xa0 - 0x01 & 0x00;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0c;\n        var temp16 = keccak256(memory[0x00:0x40]);\n        var temp17 = temp16;\n        storage[temp17] = !!memory[temp12:temp12 + 0x20] | (storage[temp17] & ~0xff);\n        storage[temp16 + 0x01] = memory[temp12 + 0x20:temp12 + 0x20 + 0x20];\n        var temp18 = temp16 + 0x02;\n        storage[temp18] = (memory[temp12 + 0x40:temp12 + 0x40 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp18] & ~(0x02 ** 0xa0 - 0x01));\n        storage[temp16 + 0x03] = memory[temp12 + 0x60:temp12 + 0x60 + 0x20];\n        var temp19 = temp16 + 0x04;\n        storage[temp19] = (memory[temp12 + 0x80:temp12 + 0x80 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp19] & ~(0x02 ** 0xa0 - 0x01));\n        var temp20 = storage[temp1 + 0x03];\n        var temp21 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp21 + 0x80;\n        memory[temp21:temp21 + 0x20] = !!0x00;\n        var temp22 = temp21 + 0x20;\n        memory[temp22:temp22 + 0x20] = temp3;\n        var temp23 = temp22 + 0x20;\n        memory[temp23:temp23 + 0x20] = 0x02 ** 0xa0 - 0x01 & 0x00;\n        memory[temp23 + 0x20:temp23 + 0x20 + 0x20] = 0x00;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0d;\n        var temp24 = keccak256(memory[0x00:0x40]);\n        var temp25 = temp24;\n        storage[temp25] = !!memory[temp21:temp21 + 0x20] | (storage[temp25] & ~0xff);\n        storage[temp24 + 0x01] = memory[temp21 + 0x20:temp21 + 0x20 + 0x20];\n        var temp26 = temp24 + 0x02;\n        storage[temp26] = (memory[temp21 + 0x40:temp21 + 0x40 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp26] & ~(0x02 ** 0xa0 - 0x01));\n        storage[temp24 + 0x03] = memory[temp21 + 0x60:temp21 + 0x60 + 0x20];\n        memory[0x00:0x20] = temp6 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0e;\n        var temp27 = keccak256(memory[0x00:0x40]);\n        storage[temp27] = storage[temp27] + temp20;\n        var temp28 = memory[0x40:0x60];\n        memory[temp28:temp28 + 0x20] = storage[temp1 + 0x03];\n        var temp29 = memory[0x40:0x60];\n        log(memory[temp29:temp29 + (temp28 + 0x20) - temp29], [0x58e5d5a525e3b40bc15abaa38b5882678db1ee68befd2f60bafe3a7fd06db9e3, stack[-5], stack[-3] & 0x02 ** 0xa0 - 0x01, storage[stack[-2] + 0x02] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function setInitialOwners(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var0 = memory[arg0:arg0 + 0x20];\n        var1 = 0x00;\n    \n        if (var1 >= var0) {\n        label_0D39:\n            return;\n        } else {\n        label_0CF9:\n            var var2 = 0x0d30;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n        \n            func_0D09(arg1, var1, var3, var4);\n            var1 = var1 + 0x01;\n        \n            if (var1 >= var0) { goto label_0D39; }\n            else { goto label_0CF9; }\n        }\n    }\n    \n    function func_0D09(var arg0, var arg1, var arg2, var arg3) {\n        arg2 = memory[arg3 * 0x20 + arg2 + 0x20:arg3 * 0x20 + arg2 + 0x20 + 0x20];\n        arg3 = arg0;\n        var var0 = arg1;\n    \n        if (var0 >= memory[arg3:arg3 + 0x20]) { assert(); }\n    \n        arg3 = memory[var0 * 0x20 + arg3 + 0x20:var0 * 0x20 + arg3 + 0x20 + 0x20];\n        setInitialOwner(arg2, arg3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function withdraw() {\n        var var0 = 0x00;\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0e;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1];\n        storage[temp1] = 0x00;\n        var temp3 = memory[0x40:0x60];\n        var0 = temp2;\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp0).call.gas(!var0 * 0x08fc).value(var0)(memory[temp3:temp3 + 0x00]);\n    \n        if (temp4) { return; }\n        else { assert(); }\n    }\n    \n    function imageHash() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x00;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_078E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0785; }\n        \n        label_0771:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0771; }\n        \n        label_0785:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_078E;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_078E;\n        }\n    }\n    \n    function nextPunkIndexToAssign() returns (var r0) { return storage[0x07]; }\n    \n    function punkIndexToAddress(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function standard() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x02;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_078E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0785; }\n        \n        label_0771:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0771; }\n        \n        label_0785:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_078E;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_078E;\n        }\n    }\n    \n    function punkBids(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xff;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02] & 0x02 ** 0xa0 - 0x01;\n        r3 = storage[temp0 + 0x03];\n        return arg0, r1, r2, r3;\n    }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function allInitialOwnersAssigned() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x08] = (storage[0x08] & ~0xff) | 0x01;\n    }\n    \n    function allPunksAssigned() returns (var r0) { return storage[0x08] & 0xff; }\n    \n    function buyPunk(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0c;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (temp0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[var0] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = !!(storage[var0 + 0x04] & 0x02 ** 0xa0 - 0x01);\n    \n        if (storage[var0 + 0x04] & 0x02 ** 0xa0 - 0x01) {\n            var temp28 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[var0 + 0x04] & temp28 == temp28 & msg.sender) { goto label_0FD4; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (!var3) {\n        label_0FD4:\n        \n            if (msg.value < storage[var0 + 0x03]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0a;\n            var temp1 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & temp1 != temp1 & storage[var0 + 0x02]) { revert(memory[0x00:0x00]); }\n        \n            var temp2 = storage[var0 + 0x02];\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0a;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            var temp5 = temp4 & msg.sender;\n            storage[temp3] = temp5 | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n            var temp6 = temp2 & temp4;\n            memory[0x00:0x20] = temp6;\n            memory[0x20:0x40] = 0x0b;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            storage[temp7] = storage[temp7] + ~0x00;\n            memory[0x00:0x20] = temp5;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            storage[temp8] = storage[temp8] + 0x01;\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x01;\n            var temp10 = memory[0x40:0x60];\n            var1 = temp6;\n            log(memory[temp10:temp10 + temp9 - temp10 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[stack[-3] + 0x02] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n            var3 = 0x10aa;\n            var var4 = arg0;\n            punkNoLongerForSale(var4);\n            var temp11 = 0x02 ** 0xa0 - 0x01;\n            var temp12 = var1 & temp11;\n            memory[0x00:0x20] = temp12;\n            memory[0x20:0x40] = 0x0e;\n            var temp13 = keccak256(memory[0x00:0x40]);\n            var temp14 = msg.value;\n            storage[temp13] = temp14 + storage[temp13];\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = temp14;\n            var temp16 = memory[0x40:0x60];\n            var temp17 = arg0;\n            log(memory[temp16:temp16 + temp15 - temp16 + 0x20], [0x58e5d5a525e3b40bc15abaa38b5882678db1ee68befd2f60bafe3a7fd06db9e3, stack[-4], stack[-2] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n            memory[0x00:0x20] = temp17;\n            memory[0x20:0x40] = 0x0d;\n            var2 = keccak256(memory[0x00:0x40]);\n            var temp18 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[var2 + 0x02] & temp18 != temp18 & msg.sender) { return; }\n        \n            var temp19 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp19 & msg.sender;\n            memory[0x20:0x40] = 0x0e;\n            var temp20 = keccak256(memory[0x00:0x40]);\n            storage[temp20] = storage[var2 + 0x03] + storage[temp20];\n            var temp21 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp21 + 0x80;\n            memory[temp21:temp21 + 0x20] = 0x00;\n            var temp22 = temp21 + 0x20;\n            var temp23 = arg0;\n            memory[temp22:temp22 + 0x20] = temp23;\n            var temp24 = temp21 + 0x40;\n            memory[temp24:temp24 + 0x20] = 0x00;\n            var temp25 = temp21 + 0x60;\n            memory[temp25:temp25 + 0x20] = 0x00;\n            memory[0x00:0x20] = temp23;\n            memory[0x20:0x40] = 0x0d;\n            var temp26 = keccak256(memory[0x00:0x40]);\n            storage[temp26] = !!memory[temp21:temp21 + 0x20] | (storage[temp26] & ~0xff);\n            storage[temp26 + 0x01] = memory[temp22:temp22 + 0x20];\n            var temp27 = temp26 + 0x02;\n            storage[temp27] = (temp19 & memory[temp24:temp24 + 0x20]) | (storage[temp27] & ~(0x02 ** 0xa0 - 0x01));\n            storage[temp26 + 0x03] = memory[temp25:temp25 + 0x20];\n            return;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferPunk(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x0c;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) {\n        label_122C:\n            var temp1 = arg1;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x0a;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = 0x02 ** 0xa0 - 0x01;\n            var temp4 = arg0;\n            var temp5 = temp3 & temp4;\n            storage[temp2] = temp5 | (storage[temp2] & ~(0x02 ** 0xa0 - 0x01));\n            var temp6 = temp3 & msg.sender;\n            memory[0x00:0x20] = temp6;\n            memory[0x20:0x40] = 0x0b;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            storage[temp7] = storage[temp7] + ~0x00;\n            memory[0x00:0x20] = temp5;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            storage[temp8] = storage[temp8] + 0x01;\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x01;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + temp9 - temp10 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = temp1;\n            var temp12 = memory[0x40:0x60];\n            log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0x05af636b70da6819000c49f85b21fa82081c632069bb626f30932034099107d8, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x0d;\n            var0 = keccak256(memory[0x00:0x40]);\n            var temp13 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[var0 + 0x02] & temp13 != temp13 & temp4) { return; }\n        \n            var temp14 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp14 & arg0;\n            memory[0x20:0x40] = 0x0e;\n            var temp15 = keccak256(memory[0x00:0x40]);\n            storage[temp15] = storage[var0 + 0x03] + storage[temp15];\n            var temp16 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp16 + 0x80;\n            memory[temp16:temp16 + 0x20] = 0x00;\n            var temp17 = temp16 + 0x20;\n            var temp18 = arg1;\n            memory[temp17:temp17 + 0x20] = temp18;\n            var temp19 = temp16 + 0x40;\n            memory[temp19:temp19 + 0x20] = 0x00;\n            var temp20 = temp16 + 0x60;\n            memory[temp20:temp20 + 0x20] = 0x00;\n            memory[0x00:0x20] = temp18;\n            memory[0x20:0x40] = 0x0d;\n            var temp21 = keccak256(memory[0x00:0x40]);\n            storage[temp21] = !!memory[temp16:temp16 + 0x20] | (storage[temp21] & ~0xff);\n            storage[temp21 + 0x01] = memory[temp17:temp17 + 0x20];\n            var temp22 = temp21 + 0x02;\n            storage[temp22] = (temp14 & memory[temp19:temp19 + 0x20]) | (storage[temp22] & ~(0x02 ** 0xa0 - 0x01));\n            storage[temp21 + 0x03] = memory[temp20:temp20 + 0x20];\n            return;\n        } else {\n            var var1 = 0x122c;\n            var var2 = arg1;\n            punkNoLongerForSale(var2);\n            goto label_122C;\n        }\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x04;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_078E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0785; }\n        \n        label_0771:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0771; }\n        \n        label_0785:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_078E;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_078E;\n        }\n    }\n    \n    function withdrawBidForPunk(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 == temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0d;\n        var0 = keccak256(memory[0x00:0x40]);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0 + 0x02] & temp1 != temp1 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = storage[temp2 + 0x03];\n        var temp4 = memory[0x40:0x60];\n        var temp5 = arg0;\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0x6f30e1ee4d81dcc7a8a478577f65d2ed2edb120565960ac45fe7c50551c87932, stack[-3], msg.sender]);\n        var temp6 = storage[temp2 + 0x03];\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + 0x80;\n        memory[temp7:temp7 + 0x20] = 0x00;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp5;\n        var temp9 = temp7 + 0x40;\n        memory[temp9:temp9 + 0x20] = 0x00;\n        var temp10 = temp7 + 0x60;\n        memory[temp10:temp10 + 0x20] = 0x00;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = 0x0d;\n        var temp11 = keccak256(memory[0x00:0x40]);\n        storage[temp11] = !!memory[temp7:temp7 + 0x20] | (storage[temp11] & ~0xff);\n        storage[temp11 + 0x01] = memory[temp8:temp8 + 0x20];\n        var temp12 = temp11 + 0x02;\n        var temp13 = 0x02 ** 0xa0 - 0x01;\n        storage[temp12] = (temp13 & memory[temp9:temp9 + 0x20]) | (storage[temp12] & ~(0x02 ** 0xa0 - 0x01));\n        storage[temp11 + 0x03] = memory[temp10:temp10 + 0x20];\n        var temp14 = memory[0x40:0x60];\n        var1 = temp6;\n        var temp15;\n        temp15, memory[temp14:temp14 + 0x00] = address(msg.sender & temp13).call.gas(!var1 * 0x08fc).value(var1)(memory[temp14:temp14 + 0x00]);\n    \n        if (temp15) { return; }\n        else { assert(); }\n    }\n    \n    function setInitialOwner(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x08] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x0a;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp1 == temp1 & arg0) { return; }\n    \n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) {\n            storage[0x09] = storage[0x09] + ~0x00;\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x0a;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = arg0 & 0x02 ** 0xa0 - 0x01;\n            storage[temp3] = temp4 | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = 0x0b;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = storage[temp5] + 0x01;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp2;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = 0x0a;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0b;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            storage[temp8] = storage[temp8] + ~0x00;\n            var temp9 = arg1;\n            memory[0x00:0x20] = temp9;\n            memory[0x20:0x40] = 0x0a;\n            var temp10 = keccak256(memory[0x00:0x40]);\n            var temp11 = arg0 & 0x02 ** 0xa0 - 0x01;\n            storage[temp10] = temp11 | (storage[temp10] & ~(0x02 ** 0xa0 - 0x01));\n            memory[0x00:0x20] = temp11;\n            memory[0x20:0x40] = 0x0b;\n            var temp12 = keccak256(memory[0x00:0x40]);\n            storage[temp12] = storage[temp12] + 0x01;\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = temp9;\n            var temp14 = memory[0x40:0x60];\n            log(memory[temp14:temp14 + temp13 - temp14 + 0x20], [0x8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        }\n    }\n    \n    function offerPunkForSaleToAddress(var arg0, var arg1, var arg2) {\n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0xa0;\n        memory[temp1:temp1 + 0x20] = 0x01;\n        var temp2 = temp1 + 0x20;\n        var temp3 = arg0;\n        memory[temp2:temp2 + 0x20] = temp3;\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp1 + 0x40;\n        memory[temp5:temp5 + 0x20] = temp4 & msg.sender;\n        var temp6 = temp1 + 0x60;\n        var temp7 = arg1;\n        memory[temp6:temp6 + 0x20] = temp7;\n        var temp8 = temp4 & arg2;\n        var temp9 = temp1 + 0x80;\n        memory[temp9:temp9 + 0x20] = temp8;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0c;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        storage[temp10] = !!memory[temp1:temp1 + 0x20] | (storage[temp10] & ~0xff);\n        storage[temp10 + 0x01] = memory[temp2:temp2 + 0x20];\n        var temp11 = temp10 + 0x02;\n        var temp12 = ~(0x02 ** 0xa0 - 0x01);\n        storage[temp11] = (temp4 & memory[temp5:temp5 + 0x20]) | (temp12 & storage[temp11]);\n        storage[temp10 + 0x03] = memory[temp6:temp6 + 0x20];\n        var temp13 = temp10 + 0x04;\n        storage[temp13] = (memory[temp9:temp9 + 0x20] & temp4) | (temp12 & storage[temp13]);\n        var temp14 = memory[0x40:0x60];\n        memory[temp14:temp14 + 0x20] = temp7;\n        var temp15 = memory[0x40:0x60];\n        log(memory[temp15:temp15 + temp14 - temp15 + 0x20], [0x3c7b682d5da98001a9b8cbda6c647d2c63d698a4184fd1d55e2ce7b66f5d21eb, stack[-3], stack[-1] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function punksRemainingToAssign() returns (var r0) { return storage[0x09]; }\n    \n    function offerPunkForSale(var arg0, var arg1) {\n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0xa0;\n        memory[temp1:temp1 + 0x20] = 0x01;\n        var temp2 = temp1 + 0x20;\n        var temp3 = arg0;\n        memory[temp2:temp2 + 0x20] = temp3;\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp1 + 0x40;\n        memory[temp5:temp5 + 0x20] = temp4 & msg.sender;\n        var temp6 = temp1 + 0x60;\n        var temp7 = arg1;\n        memory[temp6:temp6 + 0x20] = temp7;\n        var temp8 = temp1 + 0x80;\n        memory[temp8:temp8 + 0x20] = 0x00;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0c;\n        var temp9 = keccak256(memory[0x00:0x40]);\n        storage[temp9] = !!memory[temp1:temp1 + 0x20] | (storage[temp9] & ~0xff);\n        storage[temp9 + 0x01] = memory[temp2:temp2 + 0x20];\n        var temp10 = temp9 + 0x02;\n        var temp11 = ~(0x02 ** 0xa0 - 0x01);\n        storage[temp10] = (temp4 & memory[temp5:temp5 + 0x20]) | (temp11 & storage[temp10]);\n        storage[temp9 + 0x03] = memory[temp6:temp6 + 0x20];\n        var temp12 = temp9 + 0x04;\n        storage[temp12] = (memory[temp8:temp8 + 0x20] & temp4) | (temp11 & storage[temp12]);\n        var temp13 = memory[0x40:0x60];\n        memory[temp13:temp13 + 0x20] = temp7;\n        var temp14 = memory[0x40:0x60];\n        log(memory[temp14:temp14 + temp13 - temp14 + 0x20], [0x3c7b682d5da98001a9b8cbda6c647d2c63d698a4184fd1d55e2ce7b66f5d21eb, stack[-2], 0x00]);\n    }\n    \n    function getPunk(var arg0) {\n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (!storage[0x09]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = msg.sender;\n        storage[temp1] = temp2 | (storage[temp1] & ~(0x02 ** 0xa0 - 0x01));\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x0b;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] + 0x01;\n        storage[0x09] = storage[0x09] + ~0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba, msg.sender]);\n    }\n    \n    function pendingWithdrawals(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0e;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function punkNoLongerForSale(var arg0) {\n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0xa0;\n        memory[temp1:temp1 + 0x20] = 0x00;\n        var temp2 = temp1 + 0x20;\n        var temp3 = arg0;\n        memory[temp2:temp2 + 0x20] = temp3;\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp1 + 0x40;\n        memory[temp5:temp5 + 0x20] = temp4 & msg.sender;\n        var temp6 = temp1 + 0x60;\n        memory[temp6:temp6 + 0x20] = 0x00;\n        var temp7 = temp1 + 0x80;\n        memory[temp7:temp7 + 0x20] = 0x00;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0c;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        storage[temp8] = (storage[temp8] & ~0xff) | !!memory[temp1:temp1 + 0x20];\n        storage[temp8 + 0x01] = memory[temp2:temp2 + 0x20];\n        var temp9 = temp8 + 0x02;\n        var temp10 = ~(0x02 ** 0xa0 - 0x01);\n        storage[temp9] = (temp10 & storage[temp9]) | (temp4 & memory[temp5:temp5 + 0x20]);\n        storage[temp8 + 0x03] = memory[temp6:temp6 + 0x20];\n        var temp11 = temp8 + 0x04;\n        storage[temp11] = (storage[temp11] & temp10) | (temp4 & memory[temp7:temp7 + 0x20]);\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xb0e0a660b4e50f26f0b7ce75c24655fc76cc66e3334a54ff410277229fa10bd4, stack[-1]]);\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) { assert(); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            if (msg.value) { assert(); }\n        \n            var var1 = 0x016e;\n            var var2 = name();\n        \n        label_016E:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x20;\n            var temp1 = var2;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n            var var3 = temp0;\n            var var4 = var3;\n            var var5 = var4 + 0x40;\n            var var6 = temp1 + 0x20;\n            var var7 = memory[temp1:temp1 + 0x20];\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n        \n            if (!var8) {\n            label_01B4:\n                var temp2 = var7;\n                var5 = temp2 + var5;\n                var6 = temp2 & 0x1f;\n            \n                if (!var6) {\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + var5 - temp3];\n                } else {\n                    var temp4 = var6;\n                    var temp5 = var5 - temp4;\n                    memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                    var temp6 = memory[0x40:0x60];\n                    return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                }\n            } else {\n            label_0194:\n                memory[var9:var9 + 0x20] = memory[var10:var10 + 0x20];\n            \n                if (var8 <= 0x20) { goto label_01B4; }\n            \n                var8 = var8 + ~0x1f;\n                var9 = var9 + 0x20;\n                var10 = var10 + 0x20;\n                goto label_0194;\n            }\n        } else if (var0 == 0x088f11f3) {\n            // Dispatch table entry for punksOfferedForSale(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0201;\n            var2 = msg.data[0x04:0x24];\n            var2, var3, var4, var5, var6 = punksOfferedForSale(var2);\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = !!var2;\n            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var3;\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = temp8 & var4;\n            memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = var5;\n            memory[temp7 + 0x80:temp7 + 0x80 + 0x20] = var6 & temp8;\n            var temp9 = memory[0x40:0x60];\n            return memory[temp9:temp9 + temp7 - temp9 + 0xa0];\n        } else if (var0 == 0x091dbfd2) {\n            // Dispatch table entry for enterBidForPunk(uint256)\n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            enterBidForPunk(var2);\n            stop();\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0257;\n            var2 = totalSupply();\n        \n        label_0257:\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = var2;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n        } else if (var0 == 0x23165b75) {\n            // Dispatch table entry for acceptBidForPunk(uint256,uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            acceptBidForPunk(var2, var3);\n            stop();\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0291;\n            var2 = decimals();\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var2 & 0xff;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x39c5dde6) {\n            // Dispatch table entry for setInitialOwners(address[],uint256[])\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var temp14 = msg.data[0x04:0x24] + 0x04;\n            var temp15 = msg.data[temp14:temp14 + 0x20];\n            var temp16 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp16 + temp15 * 0x20 + 0x20;\n            memory[temp16:temp16 + 0x20] = temp15;\n            var temp17 = temp15 * 0x20;\n            memory[temp16 + 0x20:temp16 + 0x20 + temp17] = msg.data[temp14 + 0x20:temp14 + 0x20 + temp17];\n            var temp18 = memory[0x40:0x60];\n            var temp19 = msg.data[0x24:0x44] + 0x04;\n            var temp20 = msg.data[temp19:temp19 + 0x20];\n            var temp21 = temp20 * 0x20;\n            memory[0x40:0x60] = temp21 + temp18 + 0x20;\n            memory[temp18:temp18 + 0x20] = temp20;\n            var2 = temp16;\n            memory[temp18 + 0x20:temp18 + 0x20 + temp21] = msg.data[temp19 + 0x20:temp19 + 0x20 + temp21];\n            var3 = temp18;\n            setInitialOwners(var2, var3);\n            stop();\n        } else if (var0 == 0x3ccfd60b) {\n            // Dispatch table entry for withdraw()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            withdraw();\n            stop();\n        } else if (var0 == 0x51605d80) {\n            // Dispatch table entry for imageHash()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x016e;\n            var2 = imageHash();\n            goto label_016E;\n        } else if (var0 == 0x52f29a25) {\n            // Dispatch table entry for nextPunkIndexToAssign()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0257;\n            var2 = nextPunkIndexToAssign();\n            goto label_0257;\n        } else if (var0 == 0x58178168) {\n            // Dispatch table entry for punkIndexToAddress(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x040b;\n            var2 = msg.data[0x04:0x24];\n            var2 = punkIndexToAddress(var2);\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp23 = memory[0x40:0x60];\n            return memory[temp23:temp23 + temp22 - temp23 + 0x20];\n        } else if (var0 == 0x5a3b7e42) {\n            // Dispatch table entry for standard()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x016e;\n            var2 = standard();\n            goto label_016E;\n        } else if (var0 == 0x6e743fa9) {\n            // Dispatch table entry for punkBids(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x04ca;\n            var2 = msg.data[0x04:0x24];\n            var2, var3, var4, var5 = punkBids(var2);\n            var temp24 = memory[0x40:0x60];\n            memory[temp24:temp24 + 0x20] = !!var2;\n            memory[temp24 + 0x20:temp24 + 0x20 + 0x20] = var3;\n            memory[temp24 + 0x40:temp24 + 0x40 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n            memory[temp24 + 0x60:temp24 + 0x60 + 0x20] = var5;\n            var temp25 = memory[0x40:0x60];\n            return memory[temp25:temp25 + temp24 - temp25 + 0x80];\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0257;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = balanceOf(var2);\n            goto label_0257;\n        } else if (var0 == 0x7ecedac9) {\n            // Dispatch table entry for allInitialOwnersAssigned()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            allInitialOwnersAssigned();\n            stop();\n        } else if (var0 == 0x8126c38a) {\n            // Dispatch table entry for allPunksAssigned()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x054a;\n            var2 = allPunksAssigned();\n            var temp26 = memory[0x40:0x60];\n            memory[temp26:temp26 + 0x20] = !!var2;\n            var temp27 = memory[0x40:0x60];\n            return memory[temp27:temp27 + temp26 - temp27 + 0x20];\n        } else if (var0 == 0x8264fe98) {\n            // Dispatch table entry for buyPunk(uint256)\n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            buyPunk(var2);\n            stop();\n        } else if (var0 == 0x8b72a2ec) {\n            // Dispatch table entry for transferPunk(address,uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            transferPunk(var2, var3);\n            stop();\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x016e;\n            var2 = symbol();\n            goto label_016E;\n        } else if (var0 == 0x979bc638) {\n            // Dispatch table entry for withdrawBidForPunk(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            withdrawBidForPunk(var2);\n            stop();\n        } else if (var0 == 0xa75a9049) {\n            // Dispatch table entry for setInitialOwner(address,uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            setInitialOwner(var2, var3);\n            stop();\n        } else if (var0 == 0xbf31196f) {\n            // Dispatch table entry for offerPunkForSaleToAddress(uint256,uint256,address)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64] & 0x02 ** 0xa0 - 0x01;\n            offerPunkForSaleToAddress(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xc0d6ce63) {\n            // Dispatch table entry for punksRemainingToAssign()\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0257;\n            var2 = punksRemainingToAssign();\n            goto label_0257;\n        } else if (var0 == 0xc44193c3) {\n            // Dispatch table entry for offerPunkForSale(uint256,uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            offerPunkForSale(var2, var3);\n            stop();\n        } else if (var0 == 0xc81d1d5b) {\n            // Dispatch table entry for getPunk(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            getPunk(var2);\n            stop();\n        } else if (var0 == 0xf3f43703) {\n            // Dispatch table entry for pendingWithdrawals(address)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0257;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = pendingWithdrawals(var2);\n            goto label_0257;\n        } else if (var0 == 0xf6eeff1e) {\n            // Dispatch table entry for punkNoLongerForSale(uint256)\n            if (msg.value) { assert(); }\n        \n            var1 = 0x0245;\n            var2 = msg.data[0x04:0x24];\n            punkNoLongerForSale(var2);\n            stop();\n        } else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x03;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_078E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0785; }\n        \n        label_0771:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0771; }\n        \n        label_0785:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_078E;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_078E;\n        }\n    }\n    \n    function punksOfferedForSale(var arg0) returns (var arg0, var r1, var r2, var r3, var r4) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xff;\n        r1 = storage[temp0 + 0x01];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        r2 = temp1 & storage[temp0 + 0x02];\n        r3 = storage[temp0 + 0x03];\n        r4 = temp1 & storage[temp0 + 0x04];\n        return arg0, r1, r2, r3, r4;\n    }\n    \n    function enterBidForPunk(var arg0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 == temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!msg.value) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0d;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (msg.value <= storage[var0 + 0x03]) { revert(memory[0x00:0x00]); }\n    \n        if (storage[var0 + 0x03] <= 0x00) {\n            var temp1 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp1 + 0x80;\n            memory[temp1:temp1 + 0x20] = 0x01;\n            var temp2 = temp1 + 0x20;\n            var temp3 = arg0;\n            memory[temp2:temp2 + 0x20] = temp3;\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            var temp5 = temp4 & msg.sender;\n            var temp6 = temp1 + 0x40;\n            memory[temp6:temp6 + 0x20] = temp5;\n            var temp7 = msg.value;\n            var temp8 = temp1 + 0x60;\n            memory[temp8:temp8 + 0x20] = temp7;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = 0x0d;\n            var temp9 = keccak256(memory[0x00:0x40]);\n            storage[temp9] = !!memory[temp1:temp1 + 0x20] | (storage[temp9] & ~0xff);\n            storage[temp9 + 0x01] = memory[temp2:temp2 + 0x20];\n            var temp10 = temp9 + 0x02;\n            storage[temp10] = (temp4 & memory[temp6:temp6 + 0x20]) | (storage[temp10] & ~(0x02 ** 0xa0 - 0x01));\n            storage[temp9 + 0x03] = memory[temp8:temp8 + 0x20];\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = temp7;\n            var temp12 = memory[0x40:0x60];\n            log(memory[temp12:temp12 + temp11 - temp12 + 0x20], [0x5b859394fabae0c1ba88baffe67e751ab5248d2e879028b8c8d6897b0519f56a, stack[-2], msg.sender]);\n            return;\n        } else {\n            var temp13 = var0;\n            memory[0x00:0x20] = storage[temp13 + 0x02] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var temp14 = keccak256(memory[0x00:0x40]);\n            storage[temp14] = storage[temp13 + 0x03] + storage[temp14];\n            var temp15 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp15 + 0x80;\n            memory[temp15:temp15 + 0x20] = 0x01;\n            var temp16 = temp15 + 0x20;\n            var temp17 = arg0;\n            memory[temp16:temp16 + 0x20] = temp17;\n            var temp18 = 0x02 ** 0xa0 - 0x01;\n            var temp19 = temp18 & msg.sender;\n            var temp20 = temp15 + 0x40;\n            memory[temp20:temp20 + 0x20] = temp19;\n            var temp21 = msg.value;\n            var temp22 = temp15 + 0x60;\n            memory[temp22:temp22 + 0x20] = temp21;\n            memory[0x00:0x20] = temp17;\n            memory[0x20:0x40] = 0x0d;\n            var temp23 = keccak256(memory[0x00:0x40]);\n            storage[temp23] = !!memory[temp15:temp15 + 0x20] | (storage[temp23] & ~0xff);\n            storage[temp23 + 0x01] = memory[temp16:temp16 + 0x20];\n            var temp24 = temp23 + 0x02;\n            storage[temp24] = (temp18 & memory[temp20:temp20 + 0x20]) | (storage[temp24] & ~(0x02 ** 0xa0 - 0x01));\n            storage[temp23 + 0x03] = memory[temp22:temp22 + 0x20];\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = temp21;\n            var temp26 = memory[0x40:0x60];\n            log(memory[temp26:temp26 + temp25 - temp26 + 0x20], [0x5b859394fabae0c1ba88baffe67e751ab5248d2e879028b8c8d6897b0519f56a, stack[-2], msg.sender]);\n            return;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x06]; }\n    \n    function acceptBidForPunk(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0d;\n        var0 = msg.sender;\n        var1 = keccak256(memory[0x00:0x40]);\n    \n        if (!storage[var1 + 0x03]) { revert(memory[0x00:0x00]); }\n    \n        if (storage[var1 + 0x03] < arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = var1;\n        var temp2 = temp1 + 0x02;\n        var temp3 = arg0;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0a;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        storage[temp4] = (temp5 & storage[temp2]) | (storage[temp4] & ~(0x02 ** 0xa0 - 0x01));\n        var temp6 = var0;\n        var temp7 = temp5 & temp6;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = 0x0b;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        storage[temp8] = storage[temp8] + ~0x00;\n        memory[0x00:0x20] = temp5 & storage[temp2];\n        var temp9 = keccak256(memory[0x00:0x40]);\n        storage[temp9] = storage[temp9] + 0x01;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + 0x20] = 0x01;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + temp10 - temp11 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & 0x02 ** 0xa0 - 0x01, storage[stack[-2] + 0x02] & 0x02 ** 0xa0 - 0x01]);\n        var temp12 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp12 + 0xa0;\n        memory[temp12:temp12 + 0x20] = !!0x00;\n        var temp13 = temp12 + 0x20;\n        memory[temp13:temp13 + 0x20] = temp3;\n        var temp14 = temp13 + 0x20;\n        memory[temp14:temp14 + 0x20] = storage[temp1 + 0x02] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp15 = temp14 + 0x20;\n        memory[temp15:temp15 + 0x20] = 0x00;\n        memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = 0x02 ** 0xa0 - 0x01 & 0x00;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0c;\n        var temp16 = keccak256(memory[0x00:0x40]);\n        var temp17 = temp16;\n        storage[temp17] = !!memory[temp12:temp12 + 0x20] | (storage[temp17] & ~0xff);\n        storage[temp16 + 0x01] = memory[temp12 + 0x20:temp12 + 0x20 + 0x20];\n        var temp18 = temp16 + 0x02;\n        storage[temp18] = (memory[temp12 + 0x40:temp12 + 0x40 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp18] & ~(0x02 ** 0xa0 - 0x01));\n        storage[temp16 + 0x03] = memory[temp12 + 0x60:temp12 + 0x60 + 0x20];\n        var temp19 = temp16 + 0x04;\n        storage[temp19] = (memory[temp12 + 0x80:temp12 + 0x80 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp19] & ~(0x02 ** 0xa0 - 0x01));\n        var temp20 = storage[temp1 + 0x03];\n        var temp21 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp21 + 0x80;\n        memory[temp21:temp21 + 0x20] = !!0x00;\n        var temp22 = temp21 + 0x20;\n        memory[temp22:temp22 + 0x20] = temp3;\n        var temp23 = temp22 + 0x20;\n        memory[temp23:temp23 + 0x20] = 0x02 ** 0xa0 - 0x01 & 0x00;\n        memory[temp23 + 0x20:temp23 + 0x20 + 0x20] = 0x00;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0d;\n        var temp24 = keccak256(memory[0x00:0x40]);\n        var temp25 = temp24;\n        storage[temp25] = !!memory[temp21:temp21 + 0x20] | (storage[temp25] & ~0xff);\n        storage[temp24 + 0x01] = memory[temp21 + 0x20:temp21 + 0x20 + 0x20];\n        var temp26 = temp24 + 0x02;\n        storage[temp26] = (memory[temp21 + 0x40:temp21 + 0x40 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp26] & ~(0x02 ** 0xa0 - 0x01));\n        storage[temp24 + 0x03] = memory[temp21 + 0x60:temp21 + 0x60 + 0x20];\n        memory[0x00:0x20] = temp6 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0e;\n        var temp27 = keccak256(memory[0x00:0x40]);\n        storage[temp27] = storage[temp27] + temp20;\n        var temp28 = memory[0x40:0x60];\n        memory[temp28:temp28 + 0x20] = storage[temp1 + 0x03];\n        var temp29 = memory[0x40:0x60];\n        log(memory[temp29:temp29 + (temp28 + 0x20) - temp29], [0x58e5d5a525e3b40bc15abaa38b5882678db1ee68befd2f60bafe3a7fd06db9e3, stack[-5], stack[-3] & 0x02 ** 0xa0 - 0x01, storage[stack[-2] + 0x02] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function setInitialOwners(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var0 = memory[arg0:arg0 + 0x20];\n        var1 = 0x00;\n    \n        if (var1 >= var0) {\n        label_0D39:\n            return;\n        } else {\n        label_0CF9:\n            var var2 = 0x0d30;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n        \n            func_0D09(arg1, var1, var3, var4);\n            var1 = var1 + 0x01;\n        \n            if (var1 >= var0) { goto label_0D39; }\n            else { goto label_0CF9; }\n        }\n    }\n    \n    function func_0D09(var arg0, var arg1, var arg2, var arg3) {\n        arg2 = memory[arg3 * 0x20 + arg2 + 0x20:arg3 * 0x20 + arg2 + 0x20 + 0x20];\n        arg3 = arg0;\n        var var0 = arg1;\n    \n        if (var0 >= memory[arg3:arg3 + 0x20]) { assert(); }\n    \n        arg3 = memory[var0 * 0x20 + arg3 + 0x20:var0 * 0x20 + arg3 + 0x20 + 0x20];\n        setInitialOwner(arg2, arg3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function withdraw() {\n        var var0 = 0x00;\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0e;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1];\n        storage[temp1] = 0x00;\n        var temp3 = memory[0x40:0x60];\n        var0 = temp2;\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp0).call.gas(!var0 * 0x08fc).value(var0)(memory[temp3:temp3 + 0x00]);\n    \n        if (temp4) { return; }\n        else { assert(); }\n    }\n    \n    function imageHash() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x00;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_078E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0785; }\n        \n        label_0771:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0771; }\n        \n        label_0785:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_078E;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_078E;\n        }\n    }\n    \n    function nextPunkIndexToAssign() returns (var r0) { return storage[0x07]; }\n    \n    function punkIndexToAddress(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function standard() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x02;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_078E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0785; }\n        \n        label_0771:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0771; }\n        \n        label_0785:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_078E;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_078E;\n        }\n    }\n    \n    function punkBids(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xff;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02] & 0x02 ** 0xa0 - 0x01;\n        r3 = storage[temp0 + 0x03];\n        return arg0, r1, r2, r3;\n    }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function allInitialOwnersAssigned() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x08] = (storage[0x08] & ~0xff) | 0x01;\n    }\n    \n    function allPunksAssigned() returns (var r0) { return storage[0x08] & 0xff; }\n    \n    function buyPunk(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0c;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (temp0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[var0] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = !!(storage[var0 + 0x04] & 0x02 ** 0xa0 - 0x01);\n    \n        if (storage[var0 + 0x04] & 0x02 ** 0xa0 - 0x01) {\n            var temp28 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[var0 + 0x04] & temp28 == temp28 & msg.sender) { goto label_0FD4; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (!var3) {\n        label_0FD4:\n        \n            if (msg.value < storage[var0 + 0x03]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0a;\n            var temp1 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & temp1 != temp1 & storage[var0 + 0x02]) { revert(memory[0x00:0x00]); }\n        \n            var temp2 = storage[var0 + 0x02];\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0a;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            var temp5 = temp4 & msg.sender;\n            storage[temp3] = temp5 | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n            var temp6 = temp2 & temp4;\n            memory[0x00:0x20] = temp6;\n            memory[0x20:0x40] = 0x0b;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            storage[temp7] = storage[temp7] + ~0x00;\n            memory[0x00:0x20] = temp5;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            storage[temp8] = storage[temp8] + 0x01;\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x01;\n            var temp10 = memory[0x40:0x60];\n            var1 = temp6;\n            log(memory[temp10:temp10 + temp9 - temp10 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[stack[-3] + 0x02] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n            var3 = 0x10aa;\n            var var4 = arg0;\n            punkNoLongerForSale(var4);\n            var temp11 = 0x02 ** 0xa0 - 0x01;\n            var temp12 = var1 & temp11;\n            memory[0x00:0x20] = temp12;\n            memory[0x20:0x40] = 0x0e;\n            var temp13 = keccak256(memory[0x00:0x40]);\n            var temp14 = msg.value;\n            storage[temp13] = temp14 + storage[temp13];\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = temp14;\n            var temp16 = memory[0x40:0x60];\n            var temp17 = arg0;\n            log(memory[temp16:temp16 + temp15 - temp16 + 0x20], [0x58e5d5a525e3b40bc15abaa38b5882678db1ee68befd2f60bafe3a7fd06db9e3, stack[-4], stack[-2] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n            memory[0x00:0x20] = temp17;\n            memory[0x20:0x40] = 0x0d;\n            var2 = keccak256(memory[0x00:0x40]);\n            var temp18 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[var2 + 0x02] & temp18 != temp18 & msg.sender) { return; }\n        \n            var temp19 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp19 & msg.sender;\n            memory[0x20:0x40] = 0x0e;\n            var temp20 = keccak256(memory[0x00:0x40]);\n            storage[temp20] = storage[var2 + 0x03] + storage[temp20];\n            var temp21 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp21 + 0x80;\n            memory[temp21:temp21 + 0x20] = 0x00;\n            var temp22 = temp21 + 0x20;\n            var temp23 = arg0;\n            memory[temp22:temp22 + 0x20] = temp23;\n            var temp24 = temp21 + 0x40;\n            memory[temp24:temp24 + 0x20] = 0x00;\n            var temp25 = temp21 + 0x60;\n            memory[temp25:temp25 + 0x20] = 0x00;\n            memory[0x00:0x20] = temp23;\n            memory[0x20:0x40] = 0x0d;\n            var temp26 = keccak256(memory[0x00:0x40]);\n            storage[temp26] = !!memory[temp21:temp21 + 0x20] | (storage[temp26] & ~0xff);\n            storage[temp26 + 0x01] = memory[temp22:temp22 + 0x20];\n            var temp27 = temp26 + 0x02;\n            storage[temp27] = (temp19 & memory[temp24:temp24 + 0x20]) | (storage[temp27] & ~(0x02 ** 0xa0 - 0x01));\n            storage[temp26 + 0x03] = memory[temp25:temp25 + 0x20];\n            return;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferPunk(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x0c;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) {\n        label_122C:\n            var temp1 = arg1;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x0a;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = 0x02 ** 0xa0 - 0x01;\n            var temp4 = arg0;\n            var temp5 = temp3 & temp4;\n            storage[temp2] = temp5 | (storage[temp2] & ~(0x02 ** 0xa0 - 0x01));\n            var temp6 = temp3 & msg.sender;\n            memory[0x00:0x20] = temp6;\n            memory[0x20:0x40] = 0x0b;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            storage[temp7] = storage[temp7] + ~0x00;\n            memory[0x00:0x20] = temp5;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            storage[temp8] = storage[temp8] + 0x01;\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x01;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + temp9 - temp10 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = temp1;\n            var temp12 = memory[0x40:0x60];\n            log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0x05af636b70da6819000c49f85b21fa82081c632069bb626f30932034099107d8, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x0d;\n            var0 = keccak256(memory[0x00:0x40]);\n            var temp13 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[var0 + 0x02] & temp13 != temp13 & temp4) { return; }\n        \n            var temp14 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp14 & arg0;\n            memory[0x20:0x40] = 0x0e;\n            var temp15 = keccak256(memory[0x00:0x40]);\n            storage[temp15] = storage[var0 + 0x03] + storage[temp15];\n            var temp16 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp16 + 0x80;\n            memory[temp16:temp16 + 0x20] = 0x00;\n            var temp17 = temp16 + 0x20;\n            var temp18 = arg1;\n            memory[temp17:temp17 + 0x20] = temp18;\n            var temp19 = temp16 + 0x40;\n            memory[temp19:temp19 + 0x20] = 0x00;\n            var temp20 = temp16 + 0x60;\n            memory[temp20:temp20 + 0x20] = 0x00;\n            memory[0x00:0x20] = temp18;\n            memory[0x20:0x40] = 0x0d;\n            var temp21 = keccak256(memory[0x00:0x40]);\n            storage[temp21] = !!memory[temp16:temp16 + 0x20] | (storage[temp21] & ~0xff);\n            storage[temp21 + 0x01] = memory[temp17:temp17 + 0x20];\n            var temp22 = temp21 + 0x02;\n            storage[temp22] = (temp14 & memory[temp19:temp19 + 0x20]) | (storage[temp22] & ~(0x02 ** 0xa0 - 0x01));\n            storage[temp21 + 0x03] = memory[temp20:temp20 + 0x20];\n            return;\n        } else {\n            var var1 = 0x122c;\n            var var2 = arg1;\n            punkNoLongerForSale(var2);\n            goto label_122C;\n        }\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x04;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_078E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0785; }\n        \n        label_0771:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0771; }\n        \n        label_0785:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_078E;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_078E;\n        }\n    }\n    \n    function withdrawBidForPunk(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 == temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0d;\n        var0 = keccak256(memory[0x00:0x40]);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0 + 0x02] & temp1 != temp1 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = storage[temp2 + 0x03];\n        var temp4 = memory[0x40:0x60];\n        var temp5 = arg0;\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0x6f30e1ee4d81dcc7a8a478577f65d2ed2edb120565960ac45fe7c50551c87932, stack[-3], msg.sender]);\n        var temp6 = storage[temp2 + 0x03];\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + 0x80;\n        memory[temp7:temp7 + 0x20] = 0x00;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp5;\n        var temp9 = temp7 + 0x40;\n        memory[temp9:temp9 + 0x20] = 0x00;\n        var temp10 = temp7 + 0x60;\n        memory[temp10:temp10 + 0x20] = 0x00;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = 0x0d;\n        var temp11 = keccak256(memory[0x00:0x40]);\n        storage[temp11] = !!memory[temp7:temp7 + 0x20] | (storage[temp11] & ~0xff);\n        storage[temp11 + 0x01] = memory[temp8:temp8 + 0x20];\n        var temp12 = temp11 + 0x02;\n        var temp13 = 0x02 ** 0xa0 - 0x01;\n        storage[temp12] = (temp13 & memory[temp9:temp9 + 0x20]) | (storage[temp12] & ~(0x02 ** 0xa0 - 0x01));\n        storage[temp11 + 0x03] = memory[temp10:temp10 + 0x20];\n        var temp14 = memory[0x40:0x60];\n        var1 = temp6;\n        var temp15;\n        temp15, memory[temp14:temp14 + 0x00] = address(msg.sender & temp13).call.gas(!var1 * 0x08fc).value(var1)(memory[temp14:temp14 + 0x00]);\n    \n        if (temp15) { return; }\n        else { assert(); }\n    }\n    \n    function setInitialOwner(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x08] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x0a;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp1 == temp1 & arg0) { return; }\n    \n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) {\n            storage[0x09] = storage[0x09] + ~0x00;\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x0a;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = arg0 & 0x02 ** 0xa0 - 0x01;\n            storage[temp3] = temp4 | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = 0x0b;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = storage[temp5] + 0x01;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp2;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = 0x0a;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0b;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            storage[temp8] = storage[temp8] + ~0x00;\n            var temp9 = arg1;\n            memory[0x00:0x20] = temp9;\n            memory[0x20:0x40] = 0x0a;\n            var temp10 = keccak256(memory[0x00:0x40]);\n            var temp11 = arg0 & 0x02 ** 0xa0 - 0x01;\n            storage[temp10] = temp11 | (storage[temp10] & ~(0x02 ** 0xa0 - 0x01));\n            memory[0x00:0x20] = temp11;\n            memory[0x20:0x40] = 0x0b;\n            var temp12 = keccak256(memory[0x00:0x40]);\n            storage[temp12] = storage[temp12] + 0x01;\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = temp9;\n            var temp14 = memory[0x40:0x60];\n            log(memory[temp14:temp14 + temp13 - temp14 + 0x20], [0x8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        }\n    }\n    \n    function offerPunkForSaleToAddress(var arg0, var arg1, var arg2) {\n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0xa0;\n        memory[temp1:temp1 + 0x20] = 0x01;\n        var temp2 = temp1 + 0x20;\n        var temp3 = arg0;\n        memory[temp2:temp2 + 0x20] = temp3;\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp1 + 0x40;\n        memory[temp5:temp5 + 0x20] = temp4 & msg.sender;\n        var temp6 = temp1 + 0x60;\n        var temp7 = arg1;\n        memory[temp6:temp6 + 0x20] = temp7;\n        var temp8 = temp4 & arg2;\n        var temp9 = temp1 + 0x80;\n        memory[temp9:temp9 + 0x20] = temp8;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0c;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        storage[temp10] = !!memory[temp1:temp1 + 0x20] | (storage[temp10] & ~0xff);\n        storage[temp10 + 0x01] = memory[temp2:temp2 + 0x20];\n        var temp11 = temp10 + 0x02;\n        var temp12 = ~(0x02 ** 0xa0 - 0x01);\n        storage[temp11] = (temp4 & memory[temp5:temp5 + 0x20]) | (temp12 & storage[temp11]);\n        storage[temp10 + 0x03] = memory[temp6:temp6 + 0x20];\n        var temp13 = temp10 + 0x04;\n        storage[temp13] = (memory[temp9:temp9 + 0x20] & temp4) | (temp12 & storage[temp13]);\n        var temp14 = memory[0x40:0x60];\n        memory[temp14:temp14 + 0x20] = temp7;\n        var temp15 = memory[0x40:0x60];\n        log(memory[temp15:temp15 + temp14 - temp15 + 0x20], [0x3c7b682d5da98001a9b8cbda6c647d2c63d698a4184fd1d55e2ce7b66f5d21eb, stack[-3], stack[-1] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function punksRemainingToAssign() returns (var r0) { return storage[0x09]; }\n    \n    function offerPunkForSale(var arg0, var arg1) {\n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0xa0;\n        memory[temp1:temp1 + 0x20] = 0x01;\n        var temp2 = temp1 + 0x20;\n        var temp3 = arg0;\n        memory[temp2:temp2 + 0x20] = temp3;\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp1 + 0x40;\n        memory[temp5:temp5 + 0x20] = temp4 & msg.sender;\n        var temp6 = temp1 + 0x60;\n        var temp7 = arg1;\n        memory[temp6:temp6 + 0x20] = temp7;\n        var temp8 = temp1 + 0x80;\n        memory[temp8:temp8 + 0x20] = 0x00;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0c;\n        var temp9 = keccak256(memory[0x00:0x40]);\n        storage[temp9] = !!memory[temp1:temp1 + 0x20] | (storage[temp9] & ~0xff);\n        storage[temp9 + 0x01] = memory[temp2:temp2 + 0x20];\n        var temp10 = temp9 + 0x02;\n        var temp11 = ~(0x02 ** 0xa0 - 0x01);\n        storage[temp10] = (temp4 & memory[temp5:temp5 + 0x20]) | (temp11 & storage[temp10]);\n        storage[temp9 + 0x03] = memory[temp6:temp6 + 0x20];\n        var temp12 = temp9 + 0x04;\n        storage[temp12] = (memory[temp8:temp8 + 0x20] & temp4) | (temp11 & storage[temp12]);\n        var temp13 = memory[0x40:0x60];\n        memory[temp13:temp13 + 0x20] = temp7;\n        var temp14 = memory[0x40:0x60];\n        log(memory[temp14:temp14 + temp13 - temp14 + 0x20], [0x3c7b682d5da98001a9b8cbda6c647d2c63d698a4184fd1d55e2ce7b66f5d21eb, stack[-2], 0x00]);\n    }\n    \n    function getPunk(var arg0) {\n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (!storage[0x09]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = msg.sender;\n        storage[temp1] = temp2 | (storage[temp1] & ~(0x02 ** 0xa0 - 0x01));\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x0b;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] + 0x01;\n        storage[0x09] = storage[0x09] + ~0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba, msg.sender]);\n    }\n    \n    function pendingWithdrawals(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0e;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function punkNoLongerForSale(var arg0) {\n        if (!(storage[0x08] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 >= 0x2710) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0xa0;\n        memory[temp1:temp1 + 0x20] = 0x00;\n        var temp2 = temp1 + 0x20;\n        var temp3 = arg0;\n        memory[temp2:temp2 + 0x20] = temp3;\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp1 + 0x40;\n        memory[temp5:temp5 + 0x20] = temp4 & msg.sender;\n        var temp6 = temp1 + 0x60;\n        memory[temp6:temp6 + 0x20] = 0x00;\n        var temp7 = temp1 + 0x80;\n        memory[temp7:temp7 + 0x20] = 0x00;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x0c;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        storage[temp8] = (storage[temp8] & ~0xff) | !!memory[temp1:temp1 + 0x20];\n        storage[temp8 + 0x01] = memory[temp2:temp2 + 0x20];\n        var temp9 = temp8 + 0x02;\n        var temp10 = ~(0x02 ** 0xa0 - 0x01);\n        storage[temp9] = (temp10 & storage[temp9]) | (temp4 & memory[temp5:temp5 + 0x20]);\n        storage[temp8 + 0x03] = memory[temp6:temp6 + 0x20];\n        var temp11 = temp8 + 0x04;\n        storage[temp11] = (storage[temp11] & temp10) | (temp4 & memory[temp7:temp7 + 0x20]);\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xb0e0a660b4e50f26f0b7ce75c24655fc76cc66e3334a54ff410277229fa10bd4, stack[-1]]);\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 44.62369990348816,
	"usage": {
		"completion_tokens": 549,
		"prompt_tokens": 18516,
		"total_tokens": 19065
	}
}