{
	"address": "0xfd326f36bfabe2e195e54c3edab3a094a20758b8",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity code representation of the given EVM bytecode. Please note that due to the decompilation process, the recovered Solidity code might not be a perfect match to the original code. Some high-level constructs could be lost during the compilation to bytecode, and these constructs can't be perfectly recovered by the decompilation process. Also, the code might contain some pseudo-code parts that describe the logic of the contract.\n\n```solidity\npragma solidity >=0.4.22 <0.7.0;\n\ncontract DecompiledContract {\n\n    mapping (uint256 => uint256) private owner_1;\n    mapping (uint256 => uint256) private owner_2;\n    uint256 private stor_4;\n    uint256[] private _name;\n    uint256[] private _symbol;\n    uint256 private _calculateTokensReceived;\n    uint256 private stor_8;\n    uint256 private _sellPrice;\n    uint256 private stor_a;\n    uint256 private stor_b;\n    mapping (uint256 => uint256) private _exit;\n    mapping (uint256 => uint256) private owner_e;\n    mapping (uint256 => uint256) private _dividendsOf;\n    mapping (uint256 => uint256) private _getInvested;\n    uint256 private _totalSupply;\n    uint256 private stor_12;\n    uint256 private _stakingRequirement;\n    uint256 private _totalHolder;\n    uint256 private _totalDonation;\n    address private _fallback;\n    uint8 private _onlyAmbassadors;\n    uint160 private stor_c_0_19;\n\n    event onTokenPurchase(address indexed purchaser, uint256 ethereumSpent, uint256 tokensReceived, address indexed referredBy, uint256 timestamp, uint256 totalSupply);\n    event onWithdraw(address indexed customerAddress, uint256 ethereumWithdrawn);\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event onTokenSell(address indexed customerAddress, uint256 tokensSold, uint256 ethereumEarned, uint256 timestamp, uint256 totalSupply);\n    event onDistribute(address indexed customerAddress, uint256 ethereumDistributed);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event onReinvestment(address indexed customerAddress, uint256 ethereumReinvested, uint256 tokensMinted);\n\n    // The decompiled functions go here. The exact implementation cannot be determined from the given EVM bytecode.\n    // ...\n}\n```\n\nPlease note that this is a rough representation of the smart contract code. The exact function implementations are not provided in the question, so they are not included in the Solidity code above.",
				"role": "assistant"
			}
		}
	],
	"created": 1701457952,
	"id": "chatcmpl-8R3E8p9s1zXOYqWKXhW88oyDTQj9X",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.12 21:21 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) owner_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) owner_2; // STORAGE[0x2]\nuint256 stor_4; // STORAGE[0x4]\nuint256[] _name; // STORAGE[0x5]\nuint256[] _symbol; // STORAGE[0x6]\nuint256 _calculateTokensReceived; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 _sellPrice; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _exit; // STORAGE[0xd]\nmapping (uint256 => [uint256]) owner_e; // STORAGE[0xe]\nmapping (uint256 => [uint256]) _dividendsOf; // STORAGE[0xf]\nmapping (uint256 => [uint256]) _getInvested; // STORAGE[0x10]\nuint256 _totalSupply; // STORAGE[0x11]\nuint256 stor_12; // STORAGE[0x12]\nuint256 _stakingRequirement; // STORAGE[0x13]\nuint256 _totalHolder; // STORAGE[0x14]\nuint256 _totalDonation; // STORAGE[0x15]\naddress _fallback; // STORAGE[0x0] bytes 0 to 19\nuint8 _onlyAmbassadors; // STORAGE[0x3] bytes 0 to 0\nuint160 stor_c_0_19; // STORAGE[0xc] bytes 0 to 19\n\n// Events\nonTokenPurchase(address, uint256, uint256, address, uint256, uint256);\nonWithdraw(address, uint256);\nTransfer(address, address, uint256);\nonTokenSell(address, uint256, uint256, uint256, uint256);\nonDistribute(address, uint256);\nOwnershipTransferred(address, address);\nonReinvestment(address, uint256, uint256);\n\nfunction 0x11a0(uint256 varg0) private { \n    v0 = v1 = 0;\n    v2 = 0xf1a();\n    require(v2 > 0);\n    require(varg0 <= _exit[msg.sender]);\n    v3 = v4 = 4587;\n    v5 = v6 = 0x15b9(_sellPrice, varg0);\n    while (!100) {\n        assert(100);\n        assert(v0 <= v0);\n        assert(v0 <= varg0);\n        v7 = varg0 - v0;\n        assert(varg0 <= _totalSupply);\n        _totalSupply = _totalSupply - varg0;\n        assert(varg0 <= _exit[msg.sender]);\n        _exit[msg.sender] = _exit[msg.sender] - varg0;\n        _dividendsOf[msg.sender] = _dividendsOf[msg.sender] - ((v7 << 64) + varg0 * stor_12);\n        assert(v0 + _dividendsOf[stor_c_0_19] >= _dividendsOf[stor_c_0_19]);\n        owner_e[stor_c_0_19] = v0 + _dividendsOf[stor_c_0_19];\n        if (_totalSupply > 0) {\n            assert(_totalSupply);\n            assert((v0 - v0 << 64) / _totalSupply + stor_12 >= stor_12);\n            stor_12 += (v0 - v0 << 64) / _totalSupply;\n        }\n        v8 = 0xedf();\n        emit onTokenSell(msg.sender, varg0, v7, block.timestamp, v8);\n        return ;\n        v0 = v5 / 100;\n        goto {'0x11eb', '0x11fc'};\n        v3 = v9 = 4604;\n        v5 = 0x15b9(stor_b, v0);\n    }\n}\n\nfunction 0x15b9(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    v0 = 0x5c9(msg.value, msg.sender, _fallback);\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    return _dividendsOf[varg0] * stor_12 - _dividendsOf[varg0] >> 64;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction calculateTokensReceived(uint256 varg0) public nonPayable { \n    v0 = 0x15b9(_calculateTokensReceived, varg0);\n    assert(100);\n    assert(v0 / 100 <= varg0);\n    return varg0 - v0 / 100;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction calculateEthereumReceived(uint256 varg0) public nonPayable { \n    require(varg0 <= _totalSupply);\n    v0 = 0x15b9(_sellPrice, varg0);\n    assert(100);\n    assert(v0 / 100 <= varg0);\n    return varg0 - v0 / 100;\n}\n\nfunction updateMaintenanceAddress(address varg0) public nonPayable { \n    require(msg.sender == _fallback);\n    stor_c_0_19 = varg0;\n}\n\nfunction onlyAmbassadors() public nonPayable { \n    return _onlyAmbassadors;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    0xd7e();\n}\n\nfunction sellPrice() public nonPayable { \n    v0 = 0x15b9(_sellPrice, 0xde0b6b3a7640000);\n    assert(100);\n    assert(v0 / 100 <= 0xde0b6b3a7640000);\n    return 0xde0b6b3a7640000 - v0 / 100;\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction myDividends(bool varg0) public nonPayable { \n    v0 = 0xe7e(varg0);\n    return v0;\n}\n\nfunction totalEthereumBalance() public nonPayable { \n    return this.balance;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _exit[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    v0 = 0xedf();\n    return v0;\n}\n\nfunction owner() public nonPayable { \n    return _fallback;\n}\n\nfunction myTokens() public nonPayable { \n    v0 = 0xf1a();\n    return v0;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0xf1a();\n    require(v0 > 0);\n    require(varg1 <= _exit[msg.sender]);\n    v1 = 0xe7e(1);\n    if (v1 > 0) {\n        0xd7e();\n    }\n    v2 = 0x15b9(stor_8, varg1);\n    assert(100);\n    assert(v2 / 100 <= varg1);\n    assert(v2 / 100 <= _totalSupply);\n    _totalSupply = _totalSupply - v2 / 100;\n    assert(varg1 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg1;\n    assert(varg1 - v2 / 100 + _exit[varg0] >= _exit[varg0]);\n    _exit[varg0] += varg1 - v2 / 100;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] - varg1 * stor_12;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] + (varg1 - v2 / 100) * stor_12;\n    assert(_totalSupply);\n    assert((v2 / 100 << 64) / _totalSupply + stor_12 >= stor_12);\n    stor_12 += (v2 / 100 << 64) / _totalSupply;\n    emit Transfer(msg.sender, varg0, varg1 - v2 / 100);\n    return 1;\n}\n\nfunction setSymbol(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    require(msg.sender == _fallback);\n    v2 = v3 = v0.data;\n    if (31 < v0.length) {\n        _symbol.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v3 + v0.length > v2) {\n                STORAGE[v4] = MEM[v2];\n                v2 += 32;\n                v4 += 1;\n            }\n        }\n    } else {\n        _symbol.length = v0.length + v0.length | ~0xff & MEM[v3];\n    }\n    while (v5 + (31 + _symbol.length >> 5) > v4) {\n        STORAGE[v4] = 0;\n        v4 += 1;\n    }\n}\n\nfunction getInvested() public nonPayable { \n    return _getInvested[msg.sender];\n}\n\nfunction setName(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    require(msg.sender == _fallback);\n    v2 = v3 = v0.data;\n    if (31 < v0.length) {\n        _name.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v3 + v0.length > v2) {\n                STORAGE[v4] = MEM[v2];\n                v2 += 32;\n                v4 += 1;\n            }\n        }\n    } else {\n        _name.length = v0.length + v0.length | ~0xff & MEM[v3];\n    }\n    while (v5 + (31 + _name.length >> 5) > v4) {\n        STORAGE[v4] = 0;\n        v4 += 1;\n    }\n}\n\nfunction buyFor(address varg0, address varg1) public payable { \n    v0 = 0x5c9(msg.value, varg0, varg1);\n    return v0;\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    0x11a0(varg0);\n}\n\nfunction distribute() public payable { \n    require(0 < msg.value, 'must be a positive value');\n    _totalDonation += msg.value;\n    assert(_totalSupply);\n    assert((msg.value << 64) / _totalSupply + stor_12 >= stor_12);\n    stor_12 += (msg.value << 64) / _totalSupply;\n    emit onDistribute(msg.sender, msg.value);\n    return 0;\n}\n\nfunction exit() public nonPayable { \n    if (_exit[msg.sender] > 0) {\n        0x11a0(_exit[msg.sender]);\n    }\n    0xd7e();\n}\n\nfunction totalDonation() public nonPayable { \n    return _totalDonation;\n}\n\nfunction buy(address varg0) public payable { \n    v0 = 0x5c9(msg.value, msg.sender, varg0);\n    return v0;\n}\n\nfunction totalHolder() public nonPayable { \n    return _totalHolder;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _fallback);\n    require(varg0);\n    emit OwnershipTransferred(_fallback, varg0);\n    _fallback = varg0;\n}\n\nfunction reinvest() public nonPayable { \n    v0 = 0xe7e(1);\n    require(v0 > 0);\n    v1 = 0xe7e(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    _dividendsOf[msg.sender] = 0;\n    v2 = 0x5c9(v1 + _dividendsOf[msg.sender], msg.sender, 0);\n    emit onReinvestment(msg.sender, v1 + _dividendsOf[msg.sender], v2);\n}\n\nfunction 0x5c9(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    v0 = v1 = 0;\n    v0 = v2 = 0;\n    if (block.timestamp >= stor_4) {\n        _onlyAmbassadors = 0;\n    }\n    if (!_onlyAmbassadors) {\n        _onlyAmbassadors = 0;\n        if (!_getInvested[msg.sender]) {\n            _totalHolder += 1;\n        }\n        _getInvested[msg.sender] += varg0;\n        v3 = v4 = 2453;\n        v5 = v6 = 0x15b9(_calculateTokensReceived, varg0);\n    } else {\n        v7 = address(varg1);\n        v8 = v9 = 0xff & owner_1[v7] == 1;\n        if (v9) {\n            v10 = address(varg1);\n            v8 = v11 = varg0 + owner_2[v10] <= 0xde0b6b3a7640000;\n        }\n        require(v8);\n        v12 = address(varg1);\n        v13 = varg0 + owner_2[v12];\n        assert(v13 >= owner_2[v12]);\n        v14 = address(varg1);\n        owner_2[v14] = v13;\n        if (!_getInvested[msg.sender]) {\n            _totalHolder += 1;\n        }\n        _getInvested[msg.sender] += varg0;\n        v3 = v15 = 1750;\n        v5 = v16 = 0x15b9(_calculateTokensReceived, varg0);\n    }\n    while (!100) {\n        assert(100);\n        v17 = v18 = 1805;\n        v19 = v20 = v0 + v0;\n        assert(v20 >= v0);\n        assert(v19 <= v0);\n        v21 = v22 = v0 - v19;\n        goto {'0x9c7', '0x70d'};\n        assert(v0 <= varg0);\n        v23 = v24 = varg0 - v0;\n        v25 = v26 = v22 << 64;\n        v27 = v28 = v24 > 0;\n        if (v28) {\n            assert(_totalSupply + v24 >= v24);\n            v27 = v29 = _totalSupply + v24 > _totalSupply;\n        }\n        require(v27);\n        assert(v0 + owner_e[stor_c_0_19] >= owner_e[stor_c_0_19]);\n        owner_e[stor_c_0_19] += v0;\n        v30 = !address(varg2);\n        v31 = v32 = address(varg2);\n        if (address(varg2)) {\n            v31 = v33 = address(varg2) != address(varg1);\n        }\n        if (v31) {\n            v34 = address(varg2);\n            v31 = v35 = _exit[v34] >= _stakingRequirement;\n        }\n        if (!v31) {\n            v21 = v36 = v0 + v22;\n            assert(v36 >= v22);\n            v25 = v37 = v36 << 64;\n        } else {\n            v38 = address(varg2);\n            assert(v0 + owner_e[v38] >= owner_e[v38]);\n            v39 = address(varg2);\n            owner_e[v39] = v0 + owner_e[v38];\n        }\n        if (_totalSupply <= 0) {\n            _totalSupply = v24;\n        } else {\n            assert(v24 + _totalSupply >= _totalSupply);\n            _totalSupply += v24;\n            assert(v24 + _totalSupply);\n            stor_12 = stor_12 + (v21 << 64) / (v24 + _totalSupply);\n            assert(_totalSupply);\n            v25 = v40 = v25 - (v25 - v24 * ((v21 << 64) / _totalSupply));\n        }\n        v41 = address(varg1);\n        assert(v24 + _exit[v41] >= _exit[v41]);\n        v42 = address(varg1);\n        _exit[v42] = v24 + _exit[v41];\n        _dividendsOf[v42] += v24 * stor_12 - v25;\n        v43 = 0xedf();\n        emit onTokenPurchase(v42, address(varg2), varg0, v24, block.timestamp, v43);\n        return v23;\n        assert(v0 <= varg0);\n        v23 = varg0 - v0;\n        v44 = v45 = v22 << 64;\n        v46 = v47 = v23 > 0;\n        if (v47) {\n            assert(_totalSupply + v23 >= v23);\n            v46 = v48 = _totalSupply + v23 > _totalSupply;\n        }\n        require(v46);\n        assert(v0 + owner_e[stor_c_0_19] >= owner_e[stor_c_0_19]);\n        owner_e[stor_c_0_19] += v0;\n        v49 = !address(varg2);\n        v50 = v51 = address(varg2);\n        if (address(varg2)) {\n            v50 = v52 = address(varg2) != address(varg1);\n        }\n        if (v50) {\n            v53 = address(varg2);\n            v50 = v54 = _exit[v53] >= _stakingRequirement;\n        }\n        if (!v50) {\n            v21 = v0 + v22;\n            assert(v21 >= v22);\n            v44 = v55 = v21 << 64;\n        } else {\n            v56 = address(varg2);\n            assert(v0 + owner_e[v56] >= owner_e[v56]);\n            v57 = address(varg2);\n            owner_e[v57] = v0 + owner_e[v56];\n        }\n        if (_totalSupply <= 0) {\n            _totalSupply = v23;\n        } else {\n            assert(v23 + _totalSupply >= _totalSupply);\n            _totalSupply += v23;\n            assert(v23 + _totalSupply);\n            stor_12 = stor_12 + (v21 << 64) / (v23 + _totalSupply);\n            assert(_totalSupply);\n            v44 = v58 = v44 - (v44 - v23 * ((v21 << 64) / _totalSupply));\n        }\n        v59 = address(varg1);\n        assert(v23 + _exit[v59] >= _exit[v59]);\n        v60 = address(varg1);\n        _exit[v60] = v23 + _exit[v59];\n        _dividendsOf[v60] += v23 * stor_12 - v44;\n        v61 = 0xedf();\n        emit onTokenPurchase(v60, address(varg2), varg0, v23, block.timestamp, v61);\n        v17 = v62 = 2503;\n        v19 = v0 + v0;\n        assert(v19 >= v0);\n        goto 0x708;\n        v0 = v5 / 100;\n        goto {'0x6d6', '0x9b7', '0x9a6', '0x6e7', '0x6f8', '0x995'};\n        v3 = v63 = 1767;\n        v5 = 0x15b9(stor_b, v0);\n        v3 = v64 = 1784;\n        v5 = 0x15b9(stor_a, v0);\n        v3 = v65 = 2470;\n        v5 = 0x15b9(stor_b, v0);\n        v3 = v66 = 2487;\n        v5 = 0x15b9(stor_a, v0);\n    }\n}\n\nfunction 0xd7e() private { \n    v0 = 0xe7e(1);\n    require(v0 > 0);\n    v1 = 0xe7e(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    _dividendsOf[msg.sender] = 0;\n    v2 = msg.sender.call().value(v1 + _dividendsOf[msg.sender]).gas(2300 * !(v1 + _dividendsOf[msg.sender]));\n    require(v2); // checks call status, propagates error data on error\n    emit onWithdraw(msg.sender, v1 + _dividendsOf[msg.sender]);\n    return ;\n}\n\nfunction 0xe7e(uint256 varg0) private { \n    if (varg0) {\n        v0 = v1 = (_dividendsOf[msg.sender] * stor_12 - _dividendsOf[msg.sender] >> 64) + owner_e[msg.sender];\n    } else {\n        v0 = _dividendsOf[msg.sender] * stor_12 - _dividendsOf[msg.sender] >> 64;\n    }\n    return v0;\n}\n\nfunction 0xedf() private { \n    v0 = 0x15b9(_calculateTokensReceived, 0xde0b6b3a7640000);\n    assert(100);\n    assert(v0 / 100 + 0xde0b6b3a7640000 >= 0xde0b6b3a7640000);\n    return v0 / 100 + 0xde0b6b3a7640000;\n}\n\nfunction 0xf1a() private { \n    return _exit[msg.sender];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x65318b) {\n            dividendsOf(address);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x10d0ffdd == function_selector) {\n            calculateTokensReceived(uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x22609373 == function_selector) {\n            calculateEthereumReceived(uint256);\n        } else if (0x275893a9 == function_selector) {\n            updateMaintenanceAddress(address);\n        } else if (0x27defa1f == function_selector) {\n            onlyAmbassadors();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x688abbf7 == function_selector) {\n            myDividends(bool);\n        } else if (0x6b2f4632 == function_selector) {\n            totalEthereumBalance();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x949e8acd == function_selector) {\n            myTokens();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb84c8246 == function_selector) {\n            setSymbol(string);\n        } else if (0xbefc3e2b == function_selector) {\n            getInvested();\n        } else if (0xc47f0027 == function_selector) {\n            setName(string);\n        } else if (0xcaa877e7 == function_selector) {\n            buyFor(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe4fc6b6d == function_selector) {\n            distribute();\n        } else if (0xe9fad8ee == function_selector) {\n            exit();\n        } else if (0xee2ac05f == function_selector) {\n            totalDonation();\n        } else if (0xf088d547 == function_selector) {\n            buy(address);\n        } else if (0xf11745df == function_selector) {\n            totalHolder();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.12 21:21 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) owner_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) owner_2; // STORAGE[0x2]\nuint256 stor_4; // STORAGE[0x4]\nuint256[] _name; // STORAGE[0x5]\nuint256[] _symbol; // STORAGE[0x6]\nuint256 _calculateTokensReceived; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 _sellPrice; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _exit; // STORAGE[0xd]\nmapping (uint256 => [uint256]) owner_e; // STORAGE[0xe]\nmapping (uint256 => [uint256]) _dividendsOf; // STORAGE[0xf]\nmapping (uint256 => [uint256]) _getInvested; // STORAGE[0x10]\nuint256 _totalSupply; // STORAGE[0x11]\nuint256 stor_12; // STORAGE[0x12]\nuint256 _stakingRequirement; // STORAGE[0x13]\nuint256 _totalHolder; // STORAGE[0x14]\nuint256 _totalDonation; // STORAGE[0x15]\naddress _fallback; // STORAGE[0x0] bytes 0 to 19\nuint8 _onlyAmbassadors; // STORAGE[0x3] bytes 0 to 0\nuint160 stor_c_0_19; // STORAGE[0xc] bytes 0 to 19\n\n// Events\nonTokenPurchase(address, uint256, uint256, address, uint256, uint256);\nonWithdraw(address, uint256);\nTransfer(address, address, uint256);\nonTokenSell(address, uint256, uint256, uint256, uint256);\nonDistribute(address, uint256);\nOwnershipTransferred(address, address);\nonReinvestment(address, uint256, uint256);\n\nfunction 0x11a0(uint256 varg0) private { \n    v0 = v1 = 0;\n    v2 = 0xf1a();\n    require(v2 > 0);\n    require(varg0 <= _exit[msg.sender]);\n    v3 = v4 = 4587;\n    v5 = v6 = 0x15b9(_sellPrice, varg0);\n    while (!100) {\n        assert(100);\n        assert(v0 <= v0);\n        assert(v0 <= varg0);\n        v7 = varg0 - v0;\n        assert(varg0 <= _totalSupply);\n        _totalSupply = _totalSupply - varg0;\n        assert(varg0 <= _exit[msg.sender]);\n        _exit[msg.sender] = _exit[msg.sender] - varg0;\n        _dividendsOf[msg.sender] = _dividendsOf[msg.sender] - ((v7 << 64) + varg0 * stor_12);\n        assert(v0 + _dividendsOf[stor_c_0_19] >= _dividendsOf[stor_c_0_19]);\n        owner_e[stor_c_0_19] = v0 + _dividendsOf[stor_c_0_19];\n        if (_totalSupply > 0) {\n            assert(_totalSupply);\n            assert((v0 - v0 << 64) / _totalSupply + stor_12 >= stor_12);\n            stor_12 += (v0 - v0 << 64) / _totalSupply;\n        }\n        v8 = 0xedf();\n        emit onTokenSell(msg.sender, varg0, v7, block.timestamp, v8);\n        return ;\n        v0 = v5 / 100;\n        goto {'0x11eb', '0x11fc'};\n        v3 = v9 = 4604;\n        v5 = 0x15b9(stor_b, v0);\n    }\n}\n\nfunction 0x15b9(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    v0 = 0x5c9(msg.value, msg.sender, _fallback);\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    return _dividendsOf[varg0] * stor_12 - _dividendsOf[varg0] >> 64;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction calculateTokensReceived(uint256 varg0) public nonPayable { \n    v0 = 0x15b9(_calculateTokensReceived, varg0);\n    assert(100);\n    assert(v0 / 100 <= varg0);\n    return varg0 - v0 / 100;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction calculateEthereumReceived(uint256 varg0) public nonPayable { \n    require(varg0 <= _totalSupply);\n    v0 = 0x15b9(_sellPrice, varg0);\n    assert(100);\n    assert(v0 / 100 <= varg0);\n    return varg0 - v0 / 100;\n}\n\nfunction updateMaintenanceAddress(address varg0) public nonPayable { \n    require(msg.sender == _fallback);\n    stor_c_0_19 = varg0;\n}\n\nfunction onlyAmbassadors() public nonPayable { \n    return _onlyAmbassadors;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    0xd7e();\n}\n\nfunction sellPrice() public nonPayable { \n    v0 = 0x15b9(_sellPrice, 0xde0b6b3a7640000);\n    assert(100);\n    assert(v0 / 100 <= 0xde0b6b3a7640000);\n    return 0xde0b6b3a7640000 - v0 / 100;\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction myDividends(bool varg0) public nonPayable { \n    v0 = 0xe7e(varg0);\n    return v0;\n}\n\nfunction totalEthereumBalance() public nonPayable { \n    return this.balance;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _exit[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    v0 = 0xedf();\n    return v0;\n}\n\nfunction owner() public nonPayable { \n    return _fallback;\n}\n\nfunction myTokens() public nonPayable { \n    v0 = 0xf1a();\n    return v0;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0xf1a();\n    require(v0 > 0);\n    require(varg1 <= _exit[msg.sender]);\n    v1 = 0xe7e(1);\n    if (v1 > 0) {\n        0xd7e();\n    }\n    v2 = 0x15b9(stor_8, varg1);\n    assert(100);\n    assert(v2 / 100 <= varg1);\n    assert(v2 / 100 <= _totalSupply);\n    _totalSupply = _totalSupply - v2 / 100;\n    assert(varg1 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg1;\n    assert(varg1 - v2 / 100 + _exit[varg0] >= _exit[varg0]);\n    _exit[varg0] += varg1 - v2 / 100;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] - varg1 * stor_12;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] + (varg1 - v2 / 100) * stor_12;\n    assert(_totalSupply);\n    assert((v2 / 100 << 64) / _totalSupply + stor_12 >= stor_12);\n    stor_12 += (v2 / 100 << 64) / _totalSupply;\n    emit Transfer(msg.sender, varg0, varg1 - v2 / 100);\n    return 1;\n}\n\nfunction setSymbol(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    require(msg.sender == _fallback);\n    v2 = v3 = v0.data;\n    if (31 < v0.length) {\n        _symbol.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v3 + v0.length > v2) {\n                STORAGE[v4] = MEM[v2];\n                v2 += 32;\n                v4 += 1;\n            }\n        }\n    } else {\n        _symbol.length = v0.length + v0.length | ~0xff & MEM[v3];\n    }\n    while (v5 + (31 + _symbol.length >> 5) > v4) {\n        STORAGE[v4] = 0;\n        v4 += 1;\n    }\n}\n\nfunction getInvested() public nonPayable { \n    return _getInvested[msg.sender];\n}\n\nfunction setName(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    require(msg.sender == _fallback);\n    v2 = v3 = v0.data;\n    if (31 < v0.length) {\n        _name.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v3 + v0.length > v2) {\n                STORAGE[v4] = MEM[v2];\n                v2 += 32;\n                v4 += 1;\n            }\n        }\n    } else {\n        _name.length = v0.length + v0.length | ~0xff & MEM[v3];\n    }\n    while (v5 + (31 + _name.length >> 5) > v4) {\n        STORAGE[v4] = 0;\n        v4 += 1;\n    }\n}\n\nfunction buyFor(address varg0, address varg1) public payable { \n    v0 = 0x5c9(msg.value, varg0, varg1);\n    return v0;\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    0x11a0(varg0);\n}\n\nfunction distribute() public payable { \n    require(0 < msg.value, 'must be a positive value');\n    _totalDonation += msg.value;\n    assert(_totalSupply);\n    assert((msg.value << 64) / _totalSupply + stor_12 >= stor_12);\n    stor_12 += (msg.value << 64) / _totalSupply;\n    emit onDistribute(msg.sender, msg.value);\n    return 0;\n}\n\nfunction exit() public nonPayable { \n    if (_exit[msg.sender] > 0) {\n        0x11a0(_exit[msg.sender]);\n    }\n    0xd7e();\n}\n\nfunction totalDonation() public nonPayable { \n    return _totalDonation;\n}\n\nfunction buy(address varg0) public payable { \n    v0 = 0x5c9(msg.value, msg.sender, varg0);\n    return v0;\n}\n\nfunction totalHolder() public nonPayable { \n    return _totalHolder;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _fallback);\n    require(varg0);\n    emit OwnershipTransferred(_fallback, varg0);\n    _fallback = varg0;\n}\n\nfunction reinvest() public nonPayable { \n    v0 = 0xe7e(1);\n    require(v0 > 0);\n    v1 = 0xe7e(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    _dividendsOf[msg.sender] = 0;\n    v2 = 0x5c9(v1 + _dividendsOf[msg.sender], msg.sender, 0);\n    emit onReinvestment(msg.sender, v1 + _dividendsOf[msg.sender], v2);\n}\n\nfunction 0x5c9(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    v0 = v1 = 0;\n    v0 = v2 = 0;\n    if (block.timestamp >= stor_4) {\n        _onlyAmbassadors = 0;\n    }\n    if (!_onlyAmbassadors) {\n        _onlyAmbassadors = 0;\n        if (!_getInvested[msg.sender]) {\n            _totalHolder += 1;\n        }\n        _getInvested[msg.sender] += varg0;\n        v3 = v4 = 2453;\n        v5 = v6 = 0x15b9(_calculateTokensReceived, varg0);\n    } else {\n        v7 = address(varg1);\n        v8 = v9 = 0xff & owner_1[v7] == 1;\n        if (v9) {\n            v10 = address(varg1);\n            v8 = v11 = varg0 + owner_2[v10] <= 0xde0b6b3a7640000;\n        }\n        require(v8);\n        v12 = address(varg1);\n        v13 = varg0 + owner_2[v12];\n        assert(v13 >= owner_2[v12]);\n        v14 = address(varg1);\n        owner_2[v14] = v13;\n        if (!_getInvested[msg.sender]) {\n            _totalHolder += 1;\n        }\n        _getInvested[msg.sender] += varg0;\n        v3 = v15 = 1750;\n        v5 = v16 = 0x15b9(_calculateTokensReceived, varg0);\n    }\n    while (!100) {\n        assert(100);\n        v17 = v18 = 1805;\n        v19 = v20 = v0 + v0;\n        assert(v20 >= v0);\n        assert(v19 <= v0);\n        v21 = v22 = v0 - v19;\n        goto {'0x9c7', '0x70d'};\n        assert(v0 <= varg0);\n        v23 = v24 = varg0 - v0;\n        v25 = v26 = v22 << 64;\n        v27 = v28 = v24 > 0;\n        if (v28) {\n            assert(_totalSupply + v24 >= v24);\n            v27 = v29 = _totalSupply + v24 > _totalSupply;\n        }\n        require(v27);\n        assert(v0 + owner_e[stor_c_0_19] >= owner_e[stor_c_0_19]);\n        owner_e[stor_c_0_19] += v0;\n        v30 = !address(varg2);\n        v31 = v32 = address(varg2);\n        if (address(varg2)) {\n            v31 = v33 = address(varg2) != address(varg1);\n        }\n        if (v31) {\n            v34 = address(varg2);\n            v31 = v35 = _exit[v34] >= _stakingRequirement;\n        }\n        if (!v31) {\n            v21 = v36 = v0 + v22;\n            assert(v36 >= v22);\n            v25 = v37 = v36 << 64;\n        } else {\n            v38 = address(varg2);\n            assert(v0 + owner_e[v38] >= owner_e[v38]);\n            v39 = address(varg2);\n            owner_e[v39] = v0 + owner_e[v38];\n        }\n        if (_totalSupply <= 0) {\n            _totalSupply = v24;\n        } else {\n            assert(v24 + _totalSupply >= _totalSupply);\n            _totalSupply += v24;\n            assert(v24 + _totalSupply);\n            stor_12 = stor_12 + (v21 << 64) / (v24 + _totalSupply);\n            assert(_totalSupply);\n            v25 = v40 = v25 - (v25 - v24 * ((v21 << 64) / _totalSupply));\n        }\n        v41 = address(varg1);\n        assert(v24 + _exit[v41] >= _exit[v41]);\n        v42 = address(varg1);\n        _exit[v42] = v24 + _exit[v41];\n        _dividendsOf[v42] += v24 * stor_12 - v25;\n        v43 = 0xedf();\n        emit onTokenPurchase(v42, address(varg2), varg0, v24, block.timestamp, v43);\n        return v23;\n        assert(v0 <= varg0);\n        v23 = varg0 - v0;\n        v44 = v45 = v22 << 64;\n        v46 = v47 = v23 > 0;\n        if (v47) {\n            assert(_totalSupply + v23 >= v23);\n            v46 = v48 = _totalSupply + v23 > _totalSupply;\n        }\n        require(v46);\n        assert(v0 + owner_e[stor_c_0_19] >= owner_e[stor_c_0_19]);\n        owner_e[stor_c_0_19] += v0;\n        v49 = !address(varg2);\n        v50 = v51 = address(varg2);\n        if (address(varg2)) {\n            v50 = v52 = address(varg2) != address(varg1);\n        }\n        if (v50) {\n            v53 = address(varg2);\n            v50 = v54 = _exit[v53] >= _stakingRequirement;\n        }\n        if (!v50) {\n            v21 = v0 + v22;\n            assert(v21 >= v22);\n            v44 = v55 = v21 << 64;\n        } else {\n            v56 = address(varg2);\n            assert(v0 + owner_e[v56] >= owner_e[v56]);\n            v57 = address(varg2);\n            owner_e[v57] = v0 + owner_e[v56];\n        }\n        if (_totalSupply <= 0) {\n            _totalSupply = v23;\n        } else {\n            assert(v23 + _totalSupply >= _totalSupply);\n            _totalSupply += v23;\n            assert(v23 + _totalSupply);\n            stor_12 = stor_12 + (v21 << 64) / (v23 + _totalSupply);\n            assert(_totalSupply);\n            v44 = v58 = v44 - (v44 - v23 * ((v21 << 64) / _totalSupply));\n        }\n        v59 = address(varg1);\n        assert(v23 + _exit[v59] >= _exit[v59]);\n        v60 = address(varg1);\n        _exit[v60] = v23 + _exit[v59];\n        _dividendsOf[v60] += v23 * stor_12 - v44;\n        v61 = 0xedf();\n        emit onTokenPurchase(v60, address(varg2), varg0, v23, block.timestamp, v61);\n        v17 = v62 = 2503;\n        v19 = v0 + v0;\n        assert(v19 >= v0);\n        goto 0x708;\n        v0 = v5 / 100;\n        goto {'0x6d6', '0x9b7', '0x9a6', '0x6e7', '0x6f8', '0x995'};\n        v3 = v63 = 1767;\n        v5 = 0x15b9(stor_b, v0);\n        v3 = v64 = 1784;\n        v5 = 0x15b9(stor_a, v0);\n        v3 = v65 = 2470;\n        v5 = 0x15b9(stor_b, v0);\n        v3 = v66 = 2487;\n        v5 = 0x15b9(stor_a, v0);\n    }\n}\n\nfunction 0xd7e() private { \n    v0 = 0xe7e(1);\n    require(v0 > 0);\n    v1 = 0xe7e(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    _dividendsOf[msg.sender] = 0;\n    v2 = msg.sender.call().value(v1 + _dividendsOf[msg.sender]).gas(2300 * !(v1 + _dividendsOf[msg.sender]));\n    require(v2); // checks call status, propagates error data on error\n    emit onWithdraw(msg.sender, v1 + _dividendsOf[msg.sender]);\n    return ;\n}\n\nfunction 0xe7e(uint256 varg0) private { \n    if (varg0) {\n        v0 = v1 = (_dividendsOf[msg.sender] * stor_12 - _dividendsOf[msg.sender] >> 64) + owner_e[msg.sender];\n    } else {\n        v0 = _dividendsOf[msg.sender] * stor_12 - _dividendsOf[msg.sender] >> 64;\n    }\n    return v0;\n}\n\nfunction 0xedf() private { \n    v0 = 0x15b9(_calculateTokensReceived, 0xde0b6b3a7640000);\n    assert(100);\n    assert(v0 / 100 + 0xde0b6b3a7640000 >= 0xde0b6b3a7640000);\n    return v0 / 100 + 0xde0b6b3a7640000;\n}\n\nfunction 0xf1a() private { \n    return _exit[msg.sender];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x65318b) {\n            dividendsOf(address);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x10d0ffdd == function_selector) {\n            calculateTokensReceived(uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x22609373 == function_selector) {\n            calculateEthereumReceived(uint256);\n        } else if (0x275893a9 == function_selector) {\n            updateMaintenanceAddress(address);\n        } else if (0x27defa1f == function_selector) {\n            onlyAmbassadors();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x688abbf7 == function_selector) {\n            myDividends(bool);\n        } else if (0x6b2f4632 == function_selector) {\n            totalEthereumBalance();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x949e8acd == function_selector) {\n            myTokens();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb84c8246 == function_selector) {\n            setSymbol(string);\n        } else if (0xbefc3e2b == function_selector) {\n            getInvested();\n        } else if (0xc47f0027 == function_selector) {\n            setName(string);\n        } else if (0xcaa877e7 == function_selector) {\n            buyFor(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe4fc6b6d == function_selector) {\n            distribute();\n        } else if (0xe9fad8ee == function_selector) {\n            exit();\n        } else if (0xee2ac05f == function_selector) {\n            totalDonation();\n        } else if (0xf088d547 == function_selector) {\n            buy(address);\n        } else if (0xf11745df == function_selector) {\n            totalHolder();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.12 21:21 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) owner_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) owner_2; // STORAGE[0x2]\nuint256 stor_4; // STORAGE[0x4]\nuint256[] _name; // STORAGE[0x5]\nuint256[] _symbol; // STORAGE[0x6]\nuint256 _calculateTokensReceived; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 _sellPrice; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _exit; // STORAGE[0xd]\nmapping (uint256 => [uint256]) owner_e; // STORAGE[0xe]\nmapping (uint256 => [uint256]) _dividendsOf; // STORAGE[0xf]\nmapping (uint256 => [uint256]) _getInvested; // STORAGE[0x10]\nuint256 _totalSupply; // STORAGE[0x11]\nuint256 stor_12; // STORAGE[0x12]\nuint256 _stakingRequirement; // STORAGE[0x13]\nuint256 _totalHolder; // STORAGE[0x14]\nuint256 _totalDonation; // STORAGE[0x15]\naddress _fallback; // STORAGE[0x0] bytes 0 to 19\nuint8 _onlyAmbassadors; // STORAGE[0x3] bytes 0 to 0\nuint160 stor_c_0_19; // STORAGE[0xc] bytes 0 to 19\n\n// Events\nonTokenPurchase(address, uint256, uint256, address, uint256, uint256);\nonWithdraw(address, uint256);\nTransfer(address, address, uint256);\nonTokenSell(address, uint256, uint256, uint256, uint256);\nonDistribute(address, uint256);\nOwnershipTransferred(address, address);\nonReinvestment(address, uint256, uint256);\n\nfunction 0x11a0(uint256 varg0) private { \n    v0 = v1 = 0;\n    v2 = 0xf1a();\n    require(v2 > 0);\n    require(varg0 <= _exit[msg.sender]);\n    v3 = v4 = 4587;\n    v5 = v6 = 0x15b9(_sellPrice, varg0);\n    while (!100) {\n        assert(100);\n        assert(v0 <= v0);\n        assert(v0 <= varg0);\n        v7 = varg0 - v0;\n        assert(varg0 <= _totalSupply);\n        _totalSupply = _totalSupply - varg0;\n        assert(varg0 <= _exit[msg.sender]);\n        _exit[msg.sender] = _exit[msg.sender] - varg0;\n        _dividendsOf[msg.sender] = _dividendsOf[msg.sender] - ((v7 << 64) + varg0 * stor_12);\n        assert(v0 + _dividendsOf[stor_c_0_19] >= _dividendsOf[stor_c_0_19]);\n        owner_e[stor_c_0_19] = v0 + _dividendsOf[stor_c_0_19];\n        if (_totalSupply > 0) {\n            assert(_totalSupply);\n            assert((v0 - v0 << 64) / _totalSupply + stor_12 >= stor_12);\n            stor_12 += (v0 - v0 << 64) / _totalSupply;\n        }\n        v8 = 0xedf();\n        emit onTokenSell(msg.sender, varg0, v7, block.timestamp, v8);\n        return ;\n        v0 = v5 / 100;\n        goto {'0x11eb', '0x11fc'};\n        v3 = v9 = 4604;\n        v5 = 0x15b9(stor_b, v0);\n    }\n}\n\nfunction 0x15b9(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    v0 = 0x5c9(msg.value, msg.sender, _fallback);\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    return _dividendsOf[varg0] * stor_12 - _dividendsOf[varg0] >> 64;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction calculateTokensReceived(uint256 varg0) public nonPayable { \n    v0 = 0x15b9(_calculateTokensReceived, varg0);\n    assert(100);\n    assert(v0 / 100 <= varg0);\n    return varg0 - v0 / 100;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction calculateEthereumReceived(uint256 varg0) public nonPayable { \n    require(varg0 <= _totalSupply);\n    v0 = 0x15b9(_sellPrice, varg0);\n    assert(100);\n    assert(v0 / 100 <= varg0);\n    return varg0 - v0 / 100;\n}\n\nfunction updateMaintenanceAddress(address varg0) public nonPayable { \n    require(msg.sender == _fallback);\n    stor_c_0_19 = varg0;\n}\n\nfunction onlyAmbassadors() public nonPayable { \n    return _onlyAmbassadors;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    0xd7e();\n}\n\nfunction sellPrice() public nonPayable { \n    v0 = 0x15b9(_sellPrice, 0xde0b6b3a7640000);\n    assert(100);\n    assert(v0 / 100 <= 0xde0b6b3a7640000);\n    return 0xde0b6b3a7640000 - v0 / 100;\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction myDividends(bool varg0) public nonPayable { \n    v0 = 0xe7e(varg0);\n    return v0;\n}\n\nfunction totalEthereumBalance() public nonPayable { \n    return this.balance;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _exit[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    v0 = 0xedf();\n    return v0;\n}\n\nfunction owner() public nonPayable { \n    return _fallback;\n}\n\nfunction myTokens() public nonPayable { \n    v0 = 0xf1a();\n    return v0;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0xf1a();\n    require(v0 > 0);\n    require(varg1 <= _exit[msg.sender]);\n    v1 = 0xe7e(1);\n    if (v1 > 0) {\n        0xd7e();\n    }\n    v2 = 0x15b9(stor_8, varg1);\n    assert(100);\n    assert(v2 / 100 <= varg1);\n    assert(v2 / 100 <= _totalSupply);\n    _totalSupply = _totalSupply - v2 / 100;\n    assert(varg1 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg1;\n    assert(varg1 - v2 / 100 + _exit[varg0] >= _exit[varg0]);\n    _exit[varg0] += varg1 - v2 / 100;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] - varg1 * stor_12;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] + (varg1 - v2 / 100) * stor_12;\n    assert(_totalSupply);\n    assert((v2 / 100 << 64) / _totalSupply + stor_12 >= stor_12);\n    stor_12 += (v2 / 100 << 64) / _totalSupply;\n    emit Transfer(msg.sender, varg0, varg1 - v2 / 100);\n    return 1;\n}\n\nfunction setSymbol(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    require(msg.sender == _fallback);\n    v2 = v3 = v0.data;\n    if (31 < v0.length) {\n        _symbol.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v3 + v0.length > v2) {\n                STORAGE[v4] = MEM[v2];\n                v2 += 32;\n                v4 += 1;\n            }\n        }\n    } else {\n        _symbol.length = v0.length + v0.length | ~0xff & MEM[v3];\n    }\n    while (v5 + (31 + _symbol.length >> 5) > v4) {\n        STORAGE[v4] = 0;\n        v4 += 1;\n    }\n}\n\nfunction getInvested() public nonPayable { \n    return _getInvested[msg.sender];\n}\n\nfunction setName(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    require(msg.sender == _fallback);\n    v2 = v3 = v0.data;\n    if (31 < v0.length) {\n        _name.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v3 + v0.length > v2) {\n                STORAGE[v4] = MEM[v2];\n                v2 += 32;\n                v4 += 1;\n            }\n        }\n    } else {\n        _name.length = v0.length + v0.length | ~0xff & MEM[v3];\n    }\n    while (v5 + (31 + _name.length >> 5) > v4) {\n        STORAGE[v4] = 0;\n        v4 += 1;\n    }\n}\n\nfunction buyFor(address varg0, address varg1) public payable { \n    v0 = 0x5c9(msg.value, varg0, varg1);\n    return v0;\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    0x11a0(varg0);\n}\n\nfunction distribute() public payable { \n    require(0 < msg.value, 'must be a positive value');\n    _totalDonation += msg.value;\n    assert(_totalSupply);\n    assert((msg.value << 64) / _totalSupply + stor_12 >= stor_12);\n    stor_12 += (msg.value << 64) / _totalSupply;\n    emit onDistribute(msg.sender, msg.value);\n    return 0;\n}\n\nfunction exit() public nonPayable { \n    if (_exit[msg.sender] > 0) {\n        0x11a0(_exit[msg.sender]);\n    }\n    0xd7e();\n}\n\nfunction totalDonation() public nonPayable { \n    return _totalDonation;\n}\n\nfunction buy(address varg0) public payable { \n    v0 = 0x5c9(msg.value, msg.sender, varg0);\n    return v0;\n}\n\nfunction totalHolder() public nonPayable { \n    return _totalHolder;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _fallback);\n    require(varg0);\n    emit OwnershipTransferred(_fallback, varg0);\n    _fallback = varg0;\n}\n\nfunction reinvest() public nonPayable { \n    v0 = 0xe7e(1);\n    require(v0 > 0);\n    v1 = 0xe7e(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    _dividendsOf[msg.sender] = 0;\n    v2 = 0x5c9(v1 + _dividendsOf[msg.sender], msg.sender, 0);\n    emit onReinvestment(msg.sender, v1 + _dividendsOf[msg.sender], v2);\n}\n\nfunction 0x5c9(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    v0 = v1 = 0;\n    v0 = v2 = 0;\n    if (block.timestamp >= stor_4) {\n        _onlyAmbassadors = 0;\n    }\n    if (!_onlyAmbassadors) {\n        _onlyAmbassadors = 0;\n        if (!_getInvested[msg.sender]) {\n            _totalHolder += 1;\n        }\n        _getInvested[msg.sender] += varg0;\n        v3 = v4 = 2453;\n        v5 = v6 = 0x15b9(_calculateTokensReceived, varg0);\n    } else {\n        v7 = address(varg1);\n        v8 = v9 = 0xff & owner_1[v7] == 1;\n        if (v9) {\n            v10 = address(varg1);\n            v8 = v11 = varg0 + owner_2[v10] <= 0xde0b6b3a7640000;\n        }\n        require(v8);\n        v12 = address(varg1);\n        v13 = varg0 + owner_2[v12];\n        assert(v13 >= owner_2[v12]);\n        v14 = address(varg1);\n        owner_2[v14] = v13;\n        if (!_getInvested[msg.sender]) {\n            _totalHolder += 1;\n        }\n        _getInvested[msg.sender] += varg0;\n        v3 = v15 = 1750;\n        v5 = v16 = 0x15b9(_calculateTokensReceived, varg0);\n    }\n    while (!100) {\n        assert(100);\n        v17 = v18 = 1805;\n        v19 = v20 = v0 + v0;\n        assert(v20 >= v0);\n        assert(v19 <= v0);\n        v21 = v22 = v0 - v19;\n        goto {'0x9c7', '0x70d'};\n        assert(v0 <= varg0);\n        v23 = v24 = varg0 - v0;\n        v25 = v26 = v22 << 64;\n        v27 = v28 = v24 > 0;\n        if (v28) {\n            assert(_totalSupply + v24 >= v24);\n            v27 = v29 = _totalSupply + v24 > _totalSupply;\n        }\n        require(v27);\n        assert(v0 + owner_e[stor_c_0_19] >= owner_e[stor_c_0_19]);\n        owner_e[stor_c_0_19] += v0;\n        v30 = !address(varg2);\n        v31 = v32 = address(varg2);\n        if (address(varg2)) {\n            v31 = v33 = address(varg2) != address(varg1);\n        }\n        if (v31) {\n            v34 = address(varg2);\n            v31 = v35 = _exit[v34] >= _stakingRequirement;\n        }\n        if (!v31) {\n            v21 = v36 = v0 + v22;\n            assert(v36 >= v22);\n            v25 = v37 = v36 << 64;\n        } else {\n            v38 = address(varg2);\n            assert(v0 + owner_e[v38] >= owner_e[v38]);\n            v39 = address(varg2);\n            owner_e[v39] = v0 + owner_e[v38];\n        }\n        if (_totalSupply <= 0) {\n            _totalSupply = v24;\n        } else {\n            assert(v24 + _totalSupply >= _totalSupply);\n            _totalSupply += v24;\n            assert(v24 + _totalSupply);\n            stor_12 = stor_12 + (v21 << 64) / (v24 + _totalSupply);\n            assert(_totalSupply);\n            v25 = v40 = v25 - (v25 - v24 * ((v21 << 64) / _totalSupply));\n        }\n        v41 = address(varg1);\n        assert(v24 + _exit[v41] >= _exit[v41]);\n        v42 = address(varg1);\n        _exit[v42] = v24 + _exit[v41];\n        _dividendsOf[v42] += v24 * stor_12 - v25;\n        v43 = 0xedf();\n        emit onTokenPurchase(v42, address(varg2), varg0, v24, block.timestamp, v43);\n        return v23;\n        assert(v0 <= varg0);\n        v23 = varg0 - v0;\n        v44 = v45 = v22 << 64;\n        v46 = v47 = v23 > 0;\n        if (v47) {\n            assert(_totalSupply + v23 >= v23);\n            v46 = v48 = _totalSupply + v23 > _totalSupply;\n        }\n        require(v46);\n        assert(v0 + owner_e[stor_c_0_19] >= owner_e[stor_c_0_19]);\n        owner_e[stor_c_0_19] += v0;\n        v49 = !address(varg2);\n        v50 = v51 = address(varg2);\n        if (address(varg2)) {\n            v50 = v52 = address(varg2) != address(varg1);\n        }\n        if (v50) {\n            v53 = address(varg2);\n            v50 = v54 = _exit[v53] >= _stakingRequirement;\n        }\n        if (!v50) {\n            v21 = v0 + v22;\n            assert(v21 >= v22);\n            v44 = v55 = v21 << 64;\n        } else {\n            v56 = address(varg2);\n            assert(v0 + owner_e[v56] >= owner_e[v56]);\n            v57 = address(varg2);\n            owner_e[v57] = v0 + owner_e[v56];\n        }\n        if (_totalSupply <= 0) {\n            _totalSupply = v23;\n        } else {\n            assert(v23 + _totalSupply >= _totalSupply);\n            _totalSupply += v23;\n            assert(v23 + _totalSupply);\n            stor_12 = stor_12 + (v21 << 64) / (v23 + _totalSupply);\n            assert(_totalSupply);\n            v44 = v58 = v44 - (v44 - v23 * ((v21 << 64) / _totalSupply));\n        }\n        v59 = address(varg1);\n        assert(v23 + _exit[v59] >= _exit[v59]);\n        v60 = address(varg1);\n        _exit[v60] = v23 + _exit[v59];\n        _dividendsOf[v60] += v23 * stor_12 - v44;\n        v61 = 0xedf();\n        emit onTokenPurchase(v60, address(varg2), varg0, v23, block.timestamp, v61);\n        v17 = v62 = 2503;\n        v19 = v0 + v0;\n        assert(v19 >= v0);\n        goto 0x708;\n        v0 = v5 / 100;\n        goto {'0x6d6', '0x9b7', '0x9a6', '0x6e7', '0x6f8', '0x995'};\n        v3 = v63 = 1767;\n        v5 = 0x15b9(stor_b, v0);\n        v3 = v64 = 1784;\n        v5 = 0x15b9(stor_a, v0);\n        v3 = v65 = 2470;\n        v5 = 0x15b9(stor_b, v0);\n        v3 = v66 = 2487;\n        v5 = 0x15b9(stor_a, v0);\n    }\n}\n\nfunction 0xd7e() private { \n    v0 = 0xe7e(1);\n    require(v0 > 0);\n    v1 = 0xe7e(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    _dividendsOf[msg.sender] = 0;\n    v2 = msg.sender.call().value(v1 + _dividendsOf[msg.sender]).gas(2300 * !(v1 + _dividendsOf[msg.sender]));\n    require(v2); // checks call status, propagates error data on error\n    emit onWithdraw(msg.sender, v1 + _dividendsOf[msg.sender]);\n    return ;\n}\n\nfunction 0xe7e(uint256 varg0) private { \n    if (varg0) {\n        v0 = v1 = (_dividendsOf[msg.sender] * stor_12 - _dividendsOf[msg.sender] >> 64) + owner_e[msg.sender];\n    } else {\n        v0 = _dividendsOf[msg.sender] * stor_12 - _dividendsOf[msg.sender] >> 64;\n    }\n    return v0;\n}\n\nfunction 0xedf() private { \n    v0 = 0x15b9(_calculateTokensReceived, 0xde0b6b3a7640000);\n    assert(100);\n    assert(v0 / 100 + 0xde0b6b3a7640000 >= 0xde0b6b3a7640000);\n    return v0 / 100 + 0xde0b6b3a7640000;\n}\n\nfunction 0xf1a() private { \n    return _exit[msg.sender];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x65318b) {\n            dividendsOf(address);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x10d0ffdd == function_selector) {\n            calculateTokensReceived(uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x22609373 == function_selector) {\n            calculateEthereumReceived(uint256);\n        } else if (0x275893a9 == function_selector) {\n            updateMaintenanceAddress(address);\n        } else if (0x27defa1f == function_selector) {\n            onlyAmbassadors();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x688abbf7 == function_selector) {\n            myDividends(bool);\n        } else if (0x6b2f4632 == function_selector) {\n            totalEthereumBalance();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x949e8acd == function_selector) {\n            myTokens();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb84c8246 == function_selector) {\n            setSymbol(string);\n        } else if (0xbefc3e2b == function_selector) {\n            getInvested();\n        } else if (0xc47f0027 == function_selector) {\n            setName(string);\n        } else if (0xcaa877e7 == function_selector) {\n            buyFor(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe4fc6b6d == function_selector) {\n            distribute();\n        } else if (0xe9fad8ee == function_selector) {\n            exit();\n        } else if (0xee2ac05f == function_selector) {\n            totalDonation();\n        } else if (0xf088d547 == function_selector) {\n            buy(address);\n        } else if (0xf11745df == function_selector) {\n            totalHolder();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 38.795767068862915,
	"usage": {
		"completion_tokens": 539,
		"prompt_tokens": 6323,
		"total_tokens": 6862
	}
}