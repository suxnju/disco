{
	"address": "0x31603e6212222255056c54d92f55586e471415bd",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's the Solidity code equivalent to the decompiled code:\n\n```Solidity\npragma solidity ^0.5.1;\n\ncontract Contract {\n    uint256 storage1;\n    uint256 storage2;\n    uint256 storage3;\n    uint256 storage4;\n    uint256 storage5;\n    address owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function main(address _address, uint256 _value1, uint256 _value2, uint256 _value3, uint256 _value4) public {\n        require(msg.sender == owner, \"Only contract owner can call this function.\");\n        storage1 = _value1;\n        storage2 = _value2;\n        storage3 = _value3;\n        storage4 = _value4;\n        storage5 = uint256(_address);\n    }\n\n    function getStorage1() public view returns(uint256) {\n        return storage1;\n    }\n\n    function getStorage2() public view returns(uint256) {\n        return storage2;\n    }\n\n    function getStorage3() public view returns(uint256) {\n        return storage3;\n    }\n\n    function getStorage4() public view returns(uint256) {\n        return storage4;\n    }\n\n    function getStorage5() public view returns(uint256) {\n        return storage5;\n    }\n\n    function updateStorage1(uint256 _value) public {\n        require(msg.sender == owner, \"Only contract owner can call this function.\");\n        storage1 = _value;\n    }\n\n    function updateStorage2(uint256 _value) public {\n        require(msg.sender == owner, \"Only contract owner can call this function.\");\n        storage2 = _value;\n    }\n\n    function updateStorage3(uint256 _value) public {\n        require(msg.sender == owner, \"Only contract owner can call this function.\");\n        storage3 = _value;\n    }\n\n    function updateStorage4(uint256 _value) public {\n        require(msg.sender == owner, \"Only contract owner can call this function.\");\n        storage4 = _value;\n    }\n\n    function updateStorage5(uint256 _value) public {\n        require(msg.sender == owner, \"Only contract owner can call this function.\");\n        storage5 = _value;\n    }\n}\n```\n\nThis contract has a constructor that sets the contract owner to the address that deploys the contract. There are five storage variables, and the `main` function updates these variables. It also includes getter methods to retrieve the values of the storage variables, and update methods to change their values. The update methods can only be called by the contract owner.\n\nPlease note that due to the lack of context, I made certain assumptions in the Solidity code. The actual functionality might differ based on the context of the original EVM Bytecode.",
				"role": "assistant"
			}
		}
	],
	"created": 1700475200,
	"id": "chatcmpl-8MvZIqq8F565wq6s3I9XU34qnvCsz",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] != 0x559f352f) {\n            if (0x00) {\n                // Error: StackRead before write???\n                var var-2;\n                // Error: StackRead before write???\n                var var-1;\n                memory[0x0160:0x0180] = var-1;\n                memory[0x0140:0x0160] = var-2;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x03;\n            \n                if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n            \n                if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n            \n                if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01c0:0x01e0] = 0x313ce567;\n                var temp13;\n                temp13, memory[0x0220:0x0240] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x01dc:0x01e0]);\n            \n                if (!temp13) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01a0:0x01c0] = memory[0x0220:0x0240];\n            \n                if (!(memory[0x0140:0x0160] ~ storage[0x04])) {\n                    var-2 = 0x0240;\n                \n                    if (!address(storage[0x05]).code.length) { revert(memory[0x00:0x00]); }\n                \n                    if (!(address(this) ~ storage[0x05])) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0280:0x02a0] = 0xafb1f8d6;\n                    var temp14;\n                    temp14, memory[0x02e0:0x0320] = address(storage[0x05]).staticcall.gas(msg.gas)(memory[0x029c:0x02a0]);\n                \n                    if (!temp14) { revert(memory[0x00:0x00]); }\n                \n                    var temp15 = var-2;\n                    memory[temp15:temp15 + 0x20] = memory[0x02e0:0x0300];\n                    memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = memory[0x0300:0x0320];\n                    memory[0x0180:0x01a0] = memory[0x0240:0x0260];\n                \n                    if (memory[0x0180:0x01a0] < 0x0d2f13f7789f0000) { revert(memory[0x00:0x00]); }\n                \n                    if (memory[0x0180:0x01a0] > 0x0e92596fd6290000) { revert(memory[0x00:0x00]); }\n                \n                    if (!0x02540be400) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0180:0x01a0] = memory[0x0180:0x01a0] / 0x02540be400;\n                \n                label_024C:\n                \n                    if (!memory[0x0180:0x01a0]) {\n                        var-2 = 0x00;\n                        goto label_03DF;\n                    } else if (0x12 >= memory[0x01a0:0x01c0]) {\n                        var-2 = 0x0a < 0x0a ** (0x12 - memory[0x01a0:0x01c0]);\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var-1 = !(0x12 - memory[0x01a0:0x01c0]);\n                        var0 = 0x01;\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        if (!((0x12 - memory[0x01a0:0x01c0] == var0) | var-1 | var-2)) { revert(memory[0x00:0x00]); }\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var-2 = 0x0a ** (0x12 - memory[0x01a0:0x01c0]);\n                        var-1 = memory[0x0180:0x01a0];\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = 0x0a < 0x0a ** (0x12 - memory[0x01a0:0x01c0]);\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = !(0x12 - memory[0x01a0:0x01c0]);\n                        var2 = 0x01;\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        if (!((0x12 - memory[0x01a0:0x01c0] == var2) | var1 | var0)) { revert(memory[0x00:0x00]); }\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        if ((memory[0x0180:0x01a0] * 0x0a ** (0x12 - memory[0x01a0:0x01c0])) / var-1 != var-2) { revert(memory[0x00:0x00]); }\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var-2 = 0x0a < 0x0a ** (0x12 - memory[0x01a0:0x01c0]);\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var-1 = !(0x12 - memory[0x01a0:0x01c0]);\n                        var0 = 0x01;\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        if (!((0x12 - memory[0x01a0:0x01c0] == var0) | var-1 | var-2)) { revert(memory[0x00:0x00]); }\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var-2 = memory[0x0180:0x01a0] * 0x0a ** (0x12 - memory[0x01a0:0x01c0]);\n                    \n                    label_03DF:\n                        memory[0x0320:0x0340] = var-2;\n                        memory[0x00:0x20] = memory[0x0320:0x0340];\n                        var-2 = memory[0x00:0x20];\n                        // Error: Could not resolve jump destination!\n                    } else { revert(memory[0x00:0x00]); }\n                } else {\n                    memory[0x0180:0x01a0] = 0x05f5e100;\n                    goto label_024C;\n                }\n            } else if (memory[0x00:0x20] != 0xf1bb1086) {\n                if (memory[0x00:0x20] != 0xfa75d160) {\n                    if (memory[0x00:0x20] != 0x3d710a9d) {\n                        if (memory[0x00:0x20] != 0xe79767af) {\n                            if (memory[0x00:0x20] != 0x06fdde03) {\n                                if (memory[0x00:0x20] != 0x8da5cb5b) {\n                                    if (memory[0x00:0x20] != 0x9b8ce99a) {\n                                        if (memory[0x00:0x20] != 0xe744092e) {\n                                            if (memory[0x00:0x20] != 0x2c387275) {\n                                                if (memory[0x00:0x20] != 0x72df29a7) { revert(memory[0x00:0x00]); }\n                                            \n                                                if (msg.value) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0x00:0x20] = storage[0x05];\n                                                return memory[0x00:0x20];\n                                            } else if (!msg.value) {\n                                                memory[0x00:0x20] = storage[0x04];\n                                                return memory[0x00:0x20];\n                                            } else { revert(memory[0x00:0x00]); }\n                                        } else if (!msg.value) {\n                                            var var0 = msg.data[0x04:0x24];\n                                        \n                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = 0x03;\n                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                            return memory[0x00:0x20];\n                                        } else { revert(memory[0x00:0x00]); }\n                                    } else if (!msg.value) {\n                                        var0 = memory[0x60:0x80];\n                                        var var1 = msg.data[0x04:0x24];\n                                    \n                                        if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n                                    \n                                        var temp0 = var0;\n                                        var0 = var1;\n                                    \n                                        if (var0 i< temp0) { revert(memory[0x00:0x00]); }\n                                    \n                                        var0 = msg.data[0x04:0x24];\n                                    \n                                        if (var0 >= 0x05) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0xc0:0xe0] = 0x02;\n                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + var0];\n                                        return memory[0x00:0x20];\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    memory[0x00:0x20] = storage[0x01];\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var0 = 0x00;\n                                memory[0xc0:0xe0] = var0;\n                                var1 = keccak256(memory[0xc0:0xe0]);\n                                var var2 = 0x0180;\n                                var temp1 = storage[var1] + 0x20;\n                                var var3 = temp1;\n                                var var4 = 0x0120;\n                                memory[var4:var4 + 0x20] = 0x00;\n                                var var5 = 0x02;\n                            \n                                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0804; }\n                            \n                            label_0808:\n                                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                var temp2 = var4;\n                                var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                                memory[temp2:temp2 + 0x20] = temp3;\n                            \n                                if (var5 == temp3) { goto label_082A; }\n                            \n                                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0808; }\n                            \n                            label_0804:\n                            \n                            label_082A:\n                                var temp4 = memory[0x0180:0x01a0];\n                                var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                                var1 = 0x01e0;\n                                var temp5 = memory[0x0180:0x01a0];\n                                memory[var1:var1 + 0x20] = temp5;\n                                var2 = temp5 + 0x10;\n                            \n                                if (memory[0x01e0:0x0200] > var0) { goto label_085C; }\n                            \n                            label_0860:\n                                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                                var temp6 = var1;\n                                var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                                memory[temp6:temp6 + 0x20] = temp7;\n                            \n                                if (var2 == temp7) { goto label_087C; }\n                            \n                                if (memory[0x01e0:0x0200] <= var0) { goto label_0860; }\n                            \n                            label_085C:\n                            \n                            label_087C:\n                                memory[0x0160:0x0180] = 0x20;\n                                var temp8 = memory[0x0180:0x01a0] + 0x40;\n                                return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            var0 = msg.data[0x04:0x24];\n                        \n                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                        \n                            if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                            memory[0xc0:0xe0] = 0x03;\n                        \n                            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                            memory[0xc0:0xe0] = 0x03;\n                            storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                            memory[0x00:0x20] = 0x01;\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        var0 = msg.data[0x04:0x24];\n                    \n                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = memory[0x60:0x80];\n                        var1 = msg.data[0x24:0x44];\n                    \n                        if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n                    \n                        var temp9 = var0;\n                        var0 = var1;\n                    \n                        if (var0 i< temp9) { revert(memory[0x00:0x00]); }\n                    \n                        if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = msg.data[0x04:0x24];\n                        var1 = msg.data[0x24:0x44];\n                    \n                        if (var1 >= 0x05) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0xc0:0xe0] = 0x02;\n                        storage[keccak256(memory[0xc0:0xe0]) + var1] = var0;\n                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                        memory[0xc0:0xe0] = 0x03;\n                        storage[keccak256(memory[0xc0:0x0100])] = 0x01;\n                        log(memory[0x00:0x00], [0xa92882985915193a9370218a3a7e82c81fc53c081fbc542aa6766ba82239902d, msg.data[0x04:0x24], msg.data[0x24:0x44]]);\n                        memory[0x00:0x20] = 0x01;\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0180:0x01a0] = 0x00;\n                    var0 = 0x01a0;\n                    memory[var0:var0 + 0x20] = 0x00;\n                    var1 = 0x05;\n                    var2 = memory[0x01a0:0x01c0];\n                \n                    if (var2 >= 0x05) { revert(memory[0x00:0x00]); }\n                \n                label_04C8:\n                    memory[0xc0:0xe0] = 0x02;\n                    memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + var2];\n                \n                    if (!(memory[0x0140:0x0160] ~ 0x00)) {\n                        var temp10 = var0;\n                        var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n                        memory[temp10:temp10 + 0x20] = temp11;\n                    \n                        if (var1 != temp11) {\n                            var2 = memory[0x01a0:0x01c0];\n                        \n                            if (var2 < 0x05) { goto label_04C8; }\n                            else { revert(memory[0x00:0x00]); }\n                        } else {\n                            memory[0x00:0x20] = memory[0x0180:0x01a0];\n                            return memory[0x00:0x20];\n                        }\n                    } else if (address(memory[0x0140:0x0160]).code.length) {\n                        if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x01e0:0x0200] = 0x70a08231;\n                        memory[0x0200:0x0220] = msg.data[0x04:0x24];\n                        var temp12;\n                        temp12, memory[0x0260:0x0280] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x01fc:0x0220]);\n                    \n                        if (!temp12) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x01c0:0x01e0] = memory[0x0260:0x0280];\n                        var2 = memory[0x0140:0x0160];\n                        var3 = memory[0x0160:0x0180];\n                        var4 = memory[0x0180:0x01a0];\n                        var5 = memory[0x01a0:0x01c0];\n                        var var6 = memory[0x01c0:0x01e0];\n                        var var7 = memory[0x01e0:0x0200];\n                        var var8 = memory[0x0200:0x0220];\n                        var var9 = memory[0x0220:0x0240];\n                        var var10 = memory[0x0240:0x0260];\n                        var var11 = memory[0x0260:0x0280];\n                        memory[0x02a0:0x02c0] = 0x5be08150;\n                        memory[0x02c0:0x02e0] = memory[0x0140:0x0160];\n                        var var12 = memory[0x02c0:0x02e0];\n                        var var13 = 0x06;\n                        // Unhandled termination\n                    } else { revert(memory[0x00:0x00]); }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                memory[0xc0:0xe0] = 0x03;\n            \n                if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n            \n                var0 = memory[0x0140:0x0160];\n                memory[0x0180:0x01a0] = 0x5be08150;\n                memory[0x01a0:0x01c0] = msg.data[0x04:0x24];\n                var1 = memory[0x01a0:0x01c0];\n                var2 = 0x06;\n                // Unhandled termination\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var0 = 0x0140;\n        \n            if (!address(storage[0x05]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ storage[0x05])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = 0xafb1f8d6;\n            var temp16;\n            temp16, memory[0x01e0:0x0220] = address(storage[0x05]).staticcall.gas(msg.gas)(memory[0x019c:0x01a0]);\n        \n            if (!temp16) { revert(memory[0x00:0x00]); }\n        \n            var temp17 = var0;\n            memory[temp17:temp17 + 0x20] = memory[0x01e0:0x0200];\n            memory[temp17 + 0x20:temp17 + 0x20 + 0x20] = memory[0x0200:0x0220];\n            memory[0x00:0x20] = memory[0x0140:0x0160];\n            return memory[0x00:0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] != 0x559f352f) {\n            if (0x00) {\n                // Error: StackRead before write???\n                var var-2;\n                // Error: StackRead before write???\n                var var-1;\n                memory[0x0160:0x0180] = var-1;\n                memory[0x0140:0x0160] = var-2;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x03;\n            \n                if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n            \n                if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n            \n                if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01c0:0x01e0] = 0x313ce567;\n                var temp13;\n                temp13, memory[0x0220:0x0240] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x01dc:0x01e0]);\n            \n                if (!temp13) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01a0:0x01c0] = memory[0x0220:0x0240];\n            \n                if (!(memory[0x0140:0x0160] ~ storage[0x04])) {\n                    var-2 = 0x0240;\n                \n                    if (!address(storage[0x05]).code.length) { revert(memory[0x00:0x00]); }\n                \n                    if (!(address(this) ~ storage[0x05])) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0280:0x02a0] = 0xafb1f8d6;\n                    var temp14;\n                    temp14, memory[0x02e0:0x0320] = address(storage[0x05]).staticcall.gas(msg.gas)(memory[0x029c:0x02a0]);\n                \n                    if (!temp14) { revert(memory[0x00:0x00]); }\n                \n                    var temp15 = var-2;\n                    memory[temp15:temp15 + 0x20] = memory[0x02e0:0x0300];\n                    memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = memory[0x0300:0x0320];\n                    memory[0x0180:0x01a0] = memory[0x0240:0x0260];\n                \n                    if (memory[0x0180:0x01a0] < 0x0d2f13f7789f0000) { revert(memory[0x00:0x00]); }\n                \n                    if (memory[0x0180:0x01a0] > 0x0e92596fd6290000) { revert(memory[0x00:0x00]); }\n                \n                    if (!0x02540be400) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0180:0x01a0] = memory[0x0180:0x01a0] / 0x02540be400;\n                \n                label_024C:\n                \n                    if (!memory[0x0180:0x01a0]) {\n                        var-2 = 0x00;\n                        goto label_03DF;\n                    } else if (0x12 >= memory[0x01a0:0x01c0]) {\n                        var-2 = 0x0a < 0x0a ** (0x12 - memory[0x01a0:0x01c0]);\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var-1 = !(0x12 - memory[0x01a0:0x01c0]);\n                        var0 = 0x01;\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        if (!((0x12 - memory[0x01a0:0x01c0] == var0) | var-1 | var-2)) { revert(memory[0x00:0x00]); }\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var-2 = 0x0a ** (0x12 - memory[0x01a0:0x01c0]);\n                        var-1 = memory[0x0180:0x01a0];\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = 0x0a < 0x0a ** (0x12 - memory[0x01a0:0x01c0]);\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = !(0x12 - memory[0x01a0:0x01c0]);\n                        var2 = 0x01;\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        if (!((0x12 - memory[0x01a0:0x01c0] == var2) | var1 | var0)) { revert(memory[0x00:0x00]); }\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        if ((memory[0x0180:0x01a0] * 0x0a ** (0x12 - memory[0x01a0:0x01c0])) / var-1 != var-2) { revert(memory[0x00:0x00]); }\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var-2 = 0x0a < 0x0a ** (0x12 - memory[0x01a0:0x01c0]);\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var-1 = !(0x12 - memory[0x01a0:0x01c0]);\n                        var0 = 0x01;\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        if (!((0x12 - memory[0x01a0:0x01c0] == var0) | var-1 | var-2)) { revert(memory[0x00:0x00]); }\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var-2 = memory[0x0180:0x01a0] * 0x0a ** (0x12 - memory[0x01a0:0x01c0]);\n                    \n                    label_03DF:\n                        memory[0x0320:0x0340] = var-2;\n                        memory[0x00:0x20] = memory[0x0320:0x0340];\n                        var-2 = memory[0x00:0x20];\n                        // Error: Could not resolve jump destination!\n                    } else { revert(memory[0x00:0x00]); }\n                } else {\n                    memory[0x0180:0x01a0] = 0x05f5e100;\n                    goto label_024C;\n                }\n            } else if (memory[0x00:0x20] != 0xf1bb1086) {\n                if (memory[0x00:0x20] != 0xfa75d160) {\n                    if (memory[0x00:0x20] != 0x3d710a9d) {\n                        if (memory[0x00:0x20] != 0xe79767af) {\n                            if (memory[0x00:0x20] != 0x06fdde03) {\n                                if (memory[0x00:0x20] != 0x8da5cb5b) {\n                                    if (memory[0x00:0x20] != 0x9b8ce99a) {\n                                        if (memory[0x00:0x20] != 0xe744092e) {\n                                            if (memory[0x00:0x20] != 0x2c387275) {\n                                                if (memory[0x00:0x20] != 0x72df29a7) { revert(memory[0x00:0x00]); }\n                                            \n                                                if (msg.value) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0x00:0x20] = storage[0x05];\n                                                return memory[0x00:0x20];\n                                            } else if (!msg.value) {\n                                                memory[0x00:0x20] = storage[0x04];\n                                                return memory[0x00:0x20];\n                                            } else { revert(memory[0x00:0x00]); }\n                                        } else if (!msg.value) {\n                                            var var0 = msg.data[0x04:0x24];\n                                        \n                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = 0x03;\n                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                            return memory[0x00:0x20];\n                                        } else { revert(memory[0x00:0x00]); }\n                                    } else if (!msg.value) {\n                                        var0 = memory[0x60:0x80];\n                                        var var1 = msg.data[0x04:0x24];\n                                    \n                                        if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n                                    \n                                        var temp0 = var0;\n                                        var0 = var1;\n                                    \n                                        if (var0 i< temp0) { revert(memory[0x00:0x00]); }\n                                    \n                                        var0 = msg.data[0x04:0x24];\n                                    \n                                        if (var0 >= 0x05) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0xc0:0xe0] = 0x02;\n                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + var0];\n                                        return memory[0x00:0x20];\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    memory[0x00:0x20] = storage[0x01];\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var0 = 0x00;\n                                memory[0xc0:0xe0] = var0;\n                                var1 = keccak256(memory[0xc0:0xe0]);\n                                var var2 = 0x0180;\n                                var temp1 = storage[var1] + 0x20;\n                                var var3 = temp1;\n                                var var4 = 0x0120;\n                                memory[var4:var4 + 0x20] = 0x00;\n                                var var5 = 0x02;\n                            \n                                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0804; }\n                            \n                            label_0808:\n                                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                var temp2 = var4;\n                                var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                                memory[temp2:temp2 + 0x20] = temp3;\n                            \n                                if (var5 == temp3) { goto label_082A; }\n                            \n                                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0808; }\n                            \n                            label_0804:\n                            \n                            label_082A:\n                                var temp4 = memory[0x0180:0x01a0];\n                                var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                                var1 = 0x01e0;\n                                var temp5 = memory[0x0180:0x01a0];\n                                memory[var1:var1 + 0x20] = temp5;\n                                var2 = temp5 + 0x10;\n                            \n                                if (memory[0x01e0:0x0200] > var0) { goto label_085C; }\n                            \n                            label_0860:\n                                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                                var temp6 = var1;\n                                var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                                memory[temp6:temp6 + 0x20] = temp7;\n                            \n                                if (var2 == temp7) { goto label_087C; }\n                            \n                                if (memory[0x01e0:0x0200] <= var0) { goto label_0860; }\n                            \n                            label_085C:\n                            \n                            label_087C:\n                                memory[0x0160:0x0180] = 0x20;\n                                var temp8 = memory[0x0180:0x01a0] + 0x40;\n                                return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            var0 = msg.data[0x04:0x24];\n                        \n                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                        \n                            if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                            memory[0xc0:0xe0] = 0x03;\n                        \n                            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                            memory[0xc0:0xe0] = 0x03;\n                            storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                            memory[0x00:0x20] = 0x01;\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        var0 = msg.data[0x04:0x24];\n                    \n                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = memory[0x60:0x80];\n                        var1 = msg.data[0x24:0x44];\n                    \n                        if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n                    \n                        var temp9 = var0;\n                        var0 = var1;\n                    \n                        if (var0 i< temp9) { revert(memory[0x00:0x00]); }\n                    \n                        if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = msg.data[0x04:0x24];\n                        var1 = msg.data[0x24:0x44];\n                    \n                        if (var1 >= 0x05) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0xc0:0xe0] = 0x02;\n                        storage[keccak256(memory[0xc0:0xe0]) + var1] = var0;\n                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                        memory[0xc0:0xe0] = 0x03;\n                        storage[keccak256(memory[0xc0:0x0100])] = 0x01;\n                        log(memory[0x00:0x00], [0xa92882985915193a9370218a3a7e82c81fc53c081fbc542aa6766ba82239902d, msg.data[0x04:0x24], msg.data[0x24:0x44]]);\n                        memory[0x00:0x20] = 0x01;\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0180:0x01a0] = 0x00;\n                    var0 = 0x01a0;\n                    memory[var0:var0 + 0x20] = 0x00;\n                    var1 = 0x05;\n                    var2 = memory[0x01a0:0x01c0];\n                \n                    if (var2 >= 0x05) { revert(memory[0x00:0x00]); }\n                \n                label_04C8:\n                    memory[0xc0:0xe0] = 0x02;\n                    memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + var2];\n                \n                    if (!(memory[0x0140:0x0160] ~ 0x00)) {\n                        var temp10 = var0;\n                        var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n                        memory[temp10:temp10 + 0x20] = temp11;\n                    \n                        if (var1 != temp11) {\n                            var2 = memory[0x01a0:0x01c0];\n                        \n                            if (var2 < 0x05) { goto label_04C8; }\n                            else { revert(memory[0x00:0x00]); }\n                        } else {\n                            memory[0x00:0x20] = memory[0x0180:0x01a0];\n                            return memory[0x00:0x20];\n                        }\n                    } else if (address(memory[0x0140:0x0160]).code.length) {\n                        if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x01e0:0x0200] = 0x70a08231;\n                        memory[0x0200:0x0220] = msg.data[0x04:0x24];\n                        var temp12;\n                        temp12, memory[0x0260:0x0280] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x01fc:0x0220]);\n                    \n                        if (!temp12) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x01c0:0x01e0] = memory[0x0260:0x0280];\n                        var2 = memory[0x0140:0x0160];\n                        var3 = memory[0x0160:0x0180];\n                        var4 = memory[0x0180:0x01a0];\n                        var5 = memory[0x01a0:0x01c0];\n                        var var6 = memory[0x01c0:0x01e0];\n                        var var7 = memory[0x01e0:0x0200];\n                        var var8 = memory[0x0200:0x0220];\n                        var var9 = memory[0x0220:0x0240];\n                        var var10 = memory[0x0240:0x0260];\n                        var var11 = memory[0x0260:0x0280];\n                        memory[0x02a0:0x02c0] = 0x5be08150;\n                        memory[0x02c0:0x02e0] = memory[0x0140:0x0160];\n                        var var12 = memory[0x02c0:0x02e0];\n                        var var13 = 0x06;\n                        // Unhandled termination\n                    } else { revert(memory[0x00:0x00]); }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                memory[0xc0:0xe0] = 0x03;\n            \n                if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n            \n                var0 = memory[0x0140:0x0160];\n                memory[0x0180:0x01a0] = 0x5be08150;\n                memory[0x01a0:0x01c0] = msg.data[0x04:0x24];\n                var1 = memory[0x01a0:0x01c0];\n                var2 = 0x06;\n                // Unhandled termination\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var0 = 0x0140;\n        \n            if (!address(storage[0x05]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ storage[0x05])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = 0xafb1f8d6;\n            var temp16;\n            temp16, memory[0x01e0:0x0220] = address(storage[0x05]).staticcall.gas(msg.gas)(memory[0x019c:0x01a0]);\n        \n            if (!temp16) { revert(memory[0x00:0x00]); }\n        \n            var temp17 = var0;\n            memory[temp17:temp17 + 0x20] = memory[0x01e0:0x0200];\n            memory[temp17 + 0x20:temp17 + 0x20 + 0x20] = memory[0x0200:0x0220];\n            memory[0x00:0x20] = memory[0x0140:0x0160];\n            return memory[0x00:0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] != 0x559f352f) {\n            if (0x00) {\n                // Error: StackRead before write???\n                var var-2;\n                // Error: StackRead before write???\n                var var-1;\n                memory[0x0160:0x0180] = var-1;\n                memory[0x0140:0x0160] = var-2;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x03;\n            \n                if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n            \n                if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n            \n                if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01c0:0x01e0] = 0x313ce567;\n                var temp13;\n                temp13, memory[0x0220:0x0240] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x01dc:0x01e0]);\n            \n                if (!temp13) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01a0:0x01c0] = memory[0x0220:0x0240];\n            \n                if (!(memory[0x0140:0x0160] ~ storage[0x04])) {\n                    var-2 = 0x0240;\n                \n                    if (!address(storage[0x05]).code.length) { revert(memory[0x00:0x00]); }\n                \n                    if (!(address(this) ~ storage[0x05])) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0280:0x02a0] = 0xafb1f8d6;\n                    var temp14;\n                    temp14, memory[0x02e0:0x0320] = address(storage[0x05]).staticcall.gas(msg.gas)(memory[0x029c:0x02a0]);\n                \n                    if (!temp14) { revert(memory[0x00:0x00]); }\n                \n                    var temp15 = var-2;\n                    memory[temp15:temp15 + 0x20] = memory[0x02e0:0x0300];\n                    memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = memory[0x0300:0x0320];\n                    memory[0x0180:0x01a0] = memory[0x0240:0x0260];\n                \n                    if (memory[0x0180:0x01a0] < 0x0d2f13f7789f0000) { revert(memory[0x00:0x00]); }\n                \n                    if (memory[0x0180:0x01a0] > 0x0e92596fd6290000) { revert(memory[0x00:0x00]); }\n                \n                    if (!0x02540be400) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0180:0x01a0] = memory[0x0180:0x01a0] / 0x02540be400;\n                \n                label_024C:\n                \n                    if (!memory[0x0180:0x01a0]) {\n                        var-2 = 0x00;\n                        goto label_03DF;\n                    } else if (0x12 >= memory[0x01a0:0x01c0]) {\n                        var-2 = 0x0a < 0x0a ** (0x12 - memory[0x01a0:0x01c0]);\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var-1 = !(0x12 - memory[0x01a0:0x01c0]);\n                        var0 = 0x01;\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        if (!((0x12 - memory[0x01a0:0x01c0] == var0) | var-1 | var-2)) { revert(memory[0x00:0x00]); }\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var-2 = 0x0a ** (0x12 - memory[0x01a0:0x01c0]);\n                        var-1 = memory[0x0180:0x01a0];\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = 0x0a < 0x0a ** (0x12 - memory[0x01a0:0x01c0]);\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = !(0x12 - memory[0x01a0:0x01c0]);\n                        var2 = 0x01;\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        if (!((0x12 - memory[0x01a0:0x01c0] == var2) | var1 | var0)) { revert(memory[0x00:0x00]); }\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        if ((memory[0x0180:0x01a0] * 0x0a ** (0x12 - memory[0x01a0:0x01c0])) / var-1 != var-2) { revert(memory[0x00:0x00]); }\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var-2 = 0x0a < 0x0a ** (0x12 - memory[0x01a0:0x01c0]);\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var-1 = !(0x12 - memory[0x01a0:0x01c0]);\n                        var0 = 0x01;\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        if (!((0x12 - memory[0x01a0:0x01c0] == var0) | var-1 | var-2)) { revert(memory[0x00:0x00]); }\n                    \n                        if (0x12 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n                    \n                        var-2 = memory[0x0180:0x01a0] * 0x0a ** (0x12 - memory[0x01a0:0x01c0]);\n                    \n                    label_03DF:\n                        memory[0x0320:0x0340] = var-2;\n                        memory[0x00:0x20] = memory[0x0320:0x0340];\n                        var-2 = memory[0x00:0x20];\n                        // Error: Could not resolve jump destination!\n                    } else { revert(memory[0x00:0x00]); }\n                } else {\n                    memory[0x0180:0x01a0] = 0x05f5e100;\n                    goto label_024C;\n                }\n            } else if (memory[0x00:0x20] != 0xf1bb1086) {\n                if (memory[0x00:0x20] != 0xfa75d160) {\n                    if (memory[0x00:0x20] != 0x3d710a9d) {\n                        if (memory[0x00:0x20] != 0xe79767af) {\n                            if (memory[0x00:0x20] != 0x06fdde03) {\n                                if (memory[0x00:0x20] != 0x8da5cb5b) {\n                                    if (memory[0x00:0x20] != 0x9b8ce99a) {\n                                        if (memory[0x00:0x20] != 0xe744092e) {\n                                            if (memory[0x00:0x20] != 0x2c387275) {\n                                                if (memory[0x00:0x20] != 0x72df29a7) { revert(memory[0x00:0x00]); }\n                                            \n                                                if (msg.value) { revert(memory[0x00:0x00]); }\n                                            \n                                                memory[0x00:0x20] = storage[0x05];\n                                                return memory[0x00:0x20];\n                                            } else if (!msg.value) {\n                                                memory[0x00:0x20] = storage[0x04];\n                                                return memory[0x00:0x20];\n                                            } else { revert(memory[0x00:0x00]); }\n                                        } else if (!msg.value) {\n                                            var var0 = msg.data[0x04:0x24];\n                                        \n                                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                        \n                                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                                            memory[0xc0:0xe0] = 0x03;\n                                            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                            return memory[0x00:0x20];\n                                        } else { revert(memory[0x00:0x00]); }\n                                    } else if (!msg.value) {\n                                        var0 = memory[0x60:0x80];\n                                        var var1 = msg.data[0x04:0x24];\n                                    \n                                        if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n                                    \n                                        var temp0 = var0;\n                                        var0 = var1;\n                                    \n                                        if (var0 i< temp0) { revert(memory[0x00:0x00]); }\n                                    \n                                        var0 = msg.data[0x04:0x24];\n                                    \n                                        if (var0 >= 0x05) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0xc0:0xe0] = 0x02;\n                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + var0];\n                                        return memory[0x00:0x20];\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    memory[0x00:0x20] = storage[0x01];\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var0 = 0x00;\n                                memory[0xc0:0xe0] = var0;\n                                var1 = keccak256(memory[0xc0:0xe0]);\n                                var var2 = 0x0180;\n                                var temp1 = storage[var1] + 0x20;\n                                var var3 = temp1;\n                                var var4 = 0x0120;\n                                memory[var4:var4 + 0x20] = 0x00;\n                                var var5 = 0x02;\n                            \n                                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0804; }\n                            \n                            label_0808:\n                                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                var temp2 = var4;\n                                var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                                memory[temp2:temp2 + 0x20] = temp3;\n                            \n                                if (var5 == temp3) { goto label_082A; }\n                            \n                                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0808; }\n                            \n                            label_0804:\n                            \n                            label_082A:\n                                var temp4 = memory[0x0180:0x01a0];\n                                var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                                var1 = 0x01e0;\n                                var temp5 = memory[0x0180:0x01a0];\n                                memory[var1:var1 + 0x20] = temp5;\n                                var2 = temp5 + 0x10;\n                            \n                                if (memory[0x01e0:0x0200] > var0) { goto label_085C; }\n                            \n                            label_0860:\n                                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                                var temp6 = var1;\n                                var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                                memory[temp6:temp6 + 0x20] = temp7;\n                            \n                                if (var2 == temp7) { goto label_087C; }\n                            \n                                if (memory[0x01e0:0x0200] <= var0) { goto label_0860; }\n                            \n                            label_085C:\n                            \n                            label_087C:\n                                memory[0x0160:0x0180] = 0x20;\n                                var temp8 = memory[0x0180:0x01a0] + 0x40;\n                                return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            var0 = msg.data[0x04:0x24];\n                        \n                            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                        \n                            if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                            memory[0xc0:0xe0] = 0x03;\n                        \n                            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n                        \n                            memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                            memory[0xc0:0xe0] = 0x03;\n                            storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                            memory[0x00:0x20] = 0x01;\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        var0 = msg.data[0x04:0x24];\n                    \n                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = memory[0x60:0x80];\n                        var1 = msg.data[0x24:0x44];\n                    \n                        if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n                    \n                        var temp9 = var0;\n                        var0 = var1;\n                    \n                        if (var0 i< temp9) { revert(memory[0x00:0x00]); }\n                    \n                        if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = msg.data[0x04:0x24];\n                        var1 = msg.data[0x24:0x44];\n                    \n                        if (var1 >= 0x05) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0xc0:0xe0] = 0x02;\n                        storage[keccak256(memory[0xc0:0xe0]) + var1] = var0;\n                        memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                        memory[0xc0:0xe0] = 0x03;\n                        storage[keccak256(memory[0xc0:0x0100])] = 0x01;\n                        log(memory[0x00:0x00], [0xa92882985915193a9370218a3a7e82c81fc53c081fbc542aa6766ba82239902d, msg.data[0x04:0x24], msg.data[0x24:0x44]]);\n                        memory[0x00:0x20] = 0x01;\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0180:0x01a0] = 0x00;\n                    var0 = 0x01a0;\n                    memory[var0:var0 + 0x20] = 0x00;\n                    var1 = 0x05;\n                    var2 = memory[0x01a0:0x01c0];\n                \n                    if (var2 >= 0x05) { revert(memory[0x00:0x00]); }\n                \n                label_04C8:\n                    memory[0xc0:0xe0] = 0x02;\n                    memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + var2];\n                \n                    if (!(memory[0x0140:0x0160] ~ 0x00)) {\n                        var temp10 = var0;\n                        var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n                        memory[temp10:temp10 + 0x20] = temp11;\n                    \n                        if (var1 != temp11) {\n                            var2 = memory[0x01a0:0x01c0];\n                        \n                            if (var2 < 0x05) { goto label_04C8; }\n                            else { revert(memory[0x00:0x00]); }\n                        } else {\n                            memory[0x00:0x20] = memory[0x0180:0x01a0];\n                            return memory[0x00:0x20];\n                        }\n                    } else if (address(memory[0x0140:0x0160]).code.length) {\n                        if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x01e0:0x0200] = 0x70a08231;\n                        memory[0x0200:0x0220] = msg.data[0x04:0x24];\n                        var temp12;\n                        temp12, memory[0x0260:0x0280] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x01fc:0x0220]);\n                    \n                        if (!temp12) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x01c0:0x01e0] = memory[0x0260:0x0280];\n                        var2 = memory[0x0140:0x0160];\n                        var3 = memory[0x0160:0x0180];\n                        var4 = memory[0x0180:0x01a0];\n                        var5 = memory[0x01a0:0x01c0];\n                        var var6 = memory[0x01c0:0x01e0];\n                        var var7 = memory[0x01e0:0x0200];\n                        var var8 = memory[0x0200:0x0220];\n                        var var9 = memory[0x0220:0x0240];\n                        var var10 = memory[0x0240:0x0260];\n                        var var11 = memory[0x0260:0x0280];\n                        memory[0x02a0:0x02c0] = 0x5be08150;\n                        memory[0x02c0:0x02e0] = memory[0x0140:0x0160];\n                        var var12 = memory[0x02c0:0x02e0];\n                        var var13 = 0x06;\n                        // Unhandled termination\n                    } else { revert(memory[0x00:0x00]); }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = msg.data[0x04:0x24];\n                memory[0xc0:0xe0] = 0x03;\n            \n                if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n            \n                var0 = memory[0x0140:0x0160];\n                memory[0x0180:0x01a0] = 0x5be08150;\n                memory[0x01a0:0x01c0] = msg.data[0x04:0x24];\n                var1 = memory[0x01a0:0x01c0];\n                var2 = 0x06;\n                // Unhandled termination\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var0 = 0x0140;\n        \n            if (!address(storage[0x05]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ storage[0x05])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = 0xafb1f8d6;\n            var temp16;\n            temp16, memory[0x01e0:0x0220] = address(storage[0x05]).staticcall.gas(msg.gas)(memory[0x019c:0x01a0]);\n        \n            if (!temp16) { revert(memory[0x00:0x00]); }\n        \n            var temp17 = var0;\n            memory[temp17:temp17 + 0x20] = memory[0x01e0:0x0200];\n            memory[temp17 + 0x20:temp17 + 0x20 + 0x20] = memory[0x0200:0x0220];\n            memory[0x00:0x20] = memory[0x0140:0x0160];\n            return memory[0x00:0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 26.79081678390503,
	"usage": {
		"completion_tokens": 562,
		"prompt_tokens": 5825,
		"total_tokens": 6387
	}
}