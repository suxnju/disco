{
	"address": "0x940c9515085de7e73efc89967d26a2306554a043",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity code corresponding to the decompiled code would look something like this:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    modifier onlyOwner() {\n        require(isOwner(), \"Caller is not the owner\");\n        _;\n    }\n\n    function isOwner() public view returns(bool) {\n        return msg.sender == _owner;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"New owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function sendToMe() public onlyOwner {\n        (bool success,) = msg.sender.call{ value: address(this).balance }(\"\");\n        require(success, \"Transfer failed.\");\n    }\n\n    function sendTokensToMe(address tokenContract, uint256 amount) public onlyOwner {\n        IERC20 token = IERC20(tokenContract);\n        require(token.balanceOf(address(this)) >= amount, \"Not enough tokens in contract\");\n        bool success = token.transfer(msg.sender, amount);\n        require(success, \"Token transfer failed\");\n    }\n\n    fallback() external payable {}\n}\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n```\n\nPlease note that this is a basic version of the contract, based on the decompiled code you provided. It may need to be adapted to fit your specific use case.",
				"role": "assistant"
			}
		}
	],
	"created": 1701468588,
	"id": "chatcmpl-8R5zgG5INPaSempfWVz9bBLycktiY",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 06:01 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _owner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction fallback() public payable { \n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction sendToMe() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0);\n}\n\nfunction sendTokensToMe(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0.code.size);\n    v0, v1 = varg0.transfer(msg.sender, varg1).gas(msg.gas);\n    require(v0);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa501ab39 == function_selector) {\n            sendToMe();\n        } else if (0xbaac4316 == function_selector) {\n            sendTokensToMe(address,uint256);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 06:01 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _owner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction fallback() public payable { \n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction sendToMe() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0);\n}\n\nfunction sendTokensToMe(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0.code.size);\n    v0, v1 = varg0.transfer(msg.sender, varg1).gas(msg.gas);\n    require(v0);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa501ab39 == function_selector) {\n            sendToMe();\n        } else if (0xbaac4316 == function_selector) {\n            sendTokensToMe(address,uint256);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 06:01 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _owner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction fallback() public payable { \n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction sendToMe() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0);\n}\n\nfunction sendTokensToMe(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0.code.size);\n    v0, v1 = varg0.transfer(msg.sender, varg1).gas(msg.gas);\n    require(v0);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa501ab39 == function_selector) {\n            sendToMe();\n        } else if (0xbaac4316 == function_selector) {\n            sendTokensToMe(address,uint256);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 19.5477614402771,
	"usage": {
		"completion_tokens": 358,
		"prompt_tokens": 464,
		"total_tokens": 822
	}
}