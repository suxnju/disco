{
	"address": "0xbd65f6f9f9f87af2a677709e132debc3f242671d",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity smart contract based on the description you provided:\n\n```solidity\npragma solidity 0.6.12;\n\ncontract YourContract {\n    \n    address private owner;\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => uint256) public blacklist;\n    \n    uint256 public totalsupply;\n    uint256 public totaldistributed;\n    uint256 public totalremaining;\n    uint256 public value;\n    bool public distributionfinished;\n\n    constructor () payable public {\n        owner = msg.sender;\n        totalsupply = 0x916720a817a68ab4c8000000;\n        totaldistributed = 0x88adbd6ace8d3076bc000000;\n        totalremaining = totalsupply - totaldistributed;\n        distributionfinished = false;\n    }\n\n    function approve(address _to, uint256 _value) public {\n        if (_value == 0) {\n            allowance[msg.sender][_to] = _value;\n        }\n        else if (_value != 0 && allowance[msg.sender][_to] == 0) {\n            allowance[msg.sender][_to] = _value;\n        }\n    }\n\n    function withdraw() public {\n        require(msg.sender == owner);\n        msg.sender.transfer(address(this).balance);\n    }\n\n    function finishDistribution() public {\n        require(msg.sender == owner);\n        require(distributionfinished == false);\n        distributionfinished = true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public {\n        require(_value <= allowance[_from][msg.sender]);\n        require(_to != address(0));\n        require(_value <= balanceOf[_from]);\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        balanceOf[_to] += _value;\n    }\n\n    function getTokenBalance(address _tokenContract, address _who) external view returns (uint256) {\n        InterfaceLB _token = InterfaceLB(_tokenContract);\n        uint256 _balance = _token.balanceOf(_who);\n        return _balance;\n    }\n\n    function burn(uint256 _value) public {\n        require(msg.sender == owner);\n        require(_value <= balanceOf[msg.sender]);\n        balanceOf[msg.sender] -= _value;\n        totalsupply -= _value;\n        totaldistributed -= _value;\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        require(_to != address(0));\n        require(_value <= balanceOf[msg.sender]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n    }\n\n    function transferOwnership(address _newOwner) public {\n        require(_newOwner != address(0));\n        require(msg.sender == owner);\n        owner = _newOwner;\n    }\n\n    fallback() external payable {\n        require(distributionfinished == false);\n        require(blacklist[msg.sender] == 0);\n        if (msg.value <= totalremaining) {\n            totaldistributed += msg.value;\n            totalremaining -= msg.value;\n            balanceOf[msg.sender] += msg.value;\n            value = (msg.value/0x186a0)*0x1869f;\n            if (value > 0) {\n                blacklist[msg.sender] = 1;\n            }\n            if (totaldistributed >= totalsupply) {\n                distributionfinished = true;\n            }\n        } else if (msg.value > totalremaining) {\n            value = totalremaining;\n        }\n    }\n\n    function withdrawForeignTokens(address _tokenContract) public returns(bool _sent){\n        require(msg.sender == owner);\n        InterfaceLB _token = InterfaceLB(_tokenContract);\n        uint256 _value = _token.balanceOf(address(this));\n        _sent = _token.transfer(owner, _value);\n        return _sent;\n    }\n\n    function getTokens() public payable {\n        require(distributionfinished == false);\n        require(blacklist[msg.sender] == 0);\n        if (msg.value <= totalremaining) {\n            totaldistributed += msg.value;\n            totalremaining -= msg.value;\n            balanceOf[msg.sender] += msg.value;\n            value = (msg.value/0x186a0)*0x1869f;\n            if (value > 0) {\n                blacklist[msg.sender] = 1;\n            }\n            if (totaldistributed >= totalsupply) {\n                distributionfinished = true;\n            }\n        } else if (msg.value > totalremaining) {\n            value = totalremaining;\n        }\n    }\n}\n\ninterface InterfaceLB {\n    function balanceOf(address who) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n}\n```\nThis is a basic contract and it will need to be tested thoroughly in a safe environment before being used in a production setting.",
				"role": "assistant"
			}
		}
	],
	"created": 1701720318,
	"id": "chatcmpl-8S9TqI10dw2dgtPTFVMwTf0CLRSKc",
	"input_format": "TemplateDescription",
	"ir": "For the payable constructor function.\n- the state variable owner will be updated to caller.\n- the state variable totalsupply will be updated to 0x916720a817a68ab4c8000000.\n- the state variable totaldistributed will be updated to 0x88adbd6ace8d3076bc000000.\n\nFor the approve function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When the second argument equals to 0:\n  - the allowance from caller to the first argument will be updated to the second argument.\n- When the second argument does not equal to 0, and the allowance from caller to the first argument equals to 0:\n  - the allowance from caller to the first argument will be updated to the second argument.\n\nFor the withdraw function.\n- For owner:\n  - it transfers ether valued the balance of the address of this contract to owner.\n\nFor the finishDistribution function.\n- For owner, and distributionfinished is 0:\n  - the state variable distributionfinished will be updated to 1.\n\nFor the transferFrom function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- When the third argument is not greater than the allowance from the first argument to caller, and the second argument does not equal to 0, and the third argument is not greater than the balance of the first argument:\n  - the balance of the first argument will be updated to (the balance of the first argument-the third argument).\n  - the allowance from the first argument to caller will be updated to (the allowance from the first argument to caller-the third argument).\n  - the balance of the second argument will be updated to (the balance of the second argument+the third argument).\n\nFor the getTokenBalance function, it has 2 arguments and the type of each argument is as follows: address, address.\n- it calls an external function balanceOf of the first argument with the second argument.\n\nFor the burn function, it has one argument and its type is uint256.\n- When the first argument is not greater than the balance of caller, and for owner:\n  - the balance of caller will be updated to (the balance of caller-the first argument).\n  - the state variable totalsupply will be updated to (totalsupply-the first argument).\n  - the state variable totaldistributed will be updated to (totaldistributed-the first argument).\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When the first argument does not equal to 0, and the second argument is not greater than the balance of caller:\n  - the balance of caller will be updated to (the balance of caller-the second argument).\n  - the balance of the first argument will be updated to (the balance of the first argument+the second argument).\n\nFor the transferOwnership function, it has one argument and its type is address.\n- When the first argument does not equal to 0, and for owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the payable fallback function.\n- When distributionfinished is 0, and the blacklist of caller equals to 0:\n  - When value is not greater than totalremaining:\n    - the state variable totaldistributed will be updated to (totaldistributed+value).\n    - the state variable totalremaining will be updated to (totalremaining-value).\n    - the balance of caller will be updated to (the balance of caller+value). Afterthat, \n      - the state variable value will be updated to ((value/0x186a0)*0x1869f).\n    - When value is greater than 0:\n      - the blacklist of caller will be updated to 1.\n    - When totaldistributed is not smaller than totalsupply:\n      - the state variable distributionfinished will be updated to 1.\n  - When value is greater than totalremaining:\n    - the state variable value will be updated to totalremaining.\n  - When value is not greater than totalremaining:\n    - the state variable totaldistributed will be updated to (totaldistributed+value).\n    - the state variable totalremaining will be updated to (totalremaining-value).\n    - the balance of caller will be updated to (the balance of caller+value). Afterthat, \n      - the state variable value will be updated to ((value/0x186a0)*0x1869f).\n    - When value is greater than 0:\n      - the blacklist of caller will be updated to 1.\n    - When totaldistributed is not smaller than totalsupply:\n      - the state variable distributionfinished will be updated to 1.\n\nFor the withdrawForeignTokens function, it has one argument and its type is address.\n- For owner:\n  - it calls an external function balanceOf of the first argument with the address of this contract as the argument, and gets the returned value as v0.\n  - When RETURNDATASIZE is not smaller than 32:\n    - it calls an external function transfer of the first argument with the following argument list: owner, and v0.\n\nFor the payable getTokens function.\n- When distributionfinished is 0, and the blacklist of caller equals to 0:\n  - When value is not greater than totalremaining:\n    - the state variable totaldistributed will be updated to (totaldistributed+value).\n    - the state variable totalremaining will be updated to (totalremaining-value).\n    - the balance of caller will be updated to (the balance of caller+value). Afterthat, \n      - the state variable value will be updated to ((value/0x186a0)*0x1869f).\n    - When value is greater than 0:\n      - the blacklist of caller will be updated to 1.\n    - When totaldistributed is not smaller than totalsupply:\n      - the state variable distributionfinished will be updated to 1.\n  - When value is greater than totalremaining:\n    - the state variable value will be updated to totalremaining.\n  - When value is not greater than totalremaining:\n    - the state variable totaldistributed will be updated to (totaldistributed+value).\n    - the state variable totalremaining will be updated to (totalremaining-value).\n    - the balance of caller will be updated to (the balance of caller+value). Afterthat, \n      - the state variable value will be updated to ((value/0x186a0)*0x1869f).\n    - When value is greater than 0:\n      - the blacklist of caller will be updated to 1.\n    - When totaldistributed is not smaller than totalsupply:\n      - the state variable distributionfinished will be updated to 1.\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables and programming specifications are provided to help you develop. ",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the payable constructor function.\n- the state variable owner will be updated to caller.\n- the state variable totalsupply will be updated to 0x916720a817a68ab4c8000000.\n- the state variable totaldistributed will be updated to 0x88adbd6ace8d3076bc000000.\n\nFor the approve function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When the second argument equals to 0:\n  - the allowance from caller to the first argument will be updated to the second argument.\n- When the second argument does not equal to 0, and the allowance from caller to the first argument equals to 0:\n  - the allowance from caller to the first argument will be updated to the second argument.\n\nFor the withdraw function.\n- For owner:\n  - it transfers ether valued the balance of the address of this contract to owner.\n\nFor the finishDistribution function.\n- For owner, and distributionfinished is 0:\n  - the state variable distributionfinished will be updated to 1.\n\nFor the transferFrom function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- When the third argument is not greater than the allowance from the first argument to caller, and the second argument does not equal to 0, and the third argument is not greater than the balance of the first argument:\n  - the balance of the first argument will be updated to (the balance of the first argument-the third argument).\n  - the allowance from the first argument to caller will be updated to (the allowance from the first argument to caller-the third argument).\n  - the balance of the second argument will be updated to (the balance of the second argument+the third argument).\n\nFor the getTokenBalance function, it has 2 arguments and the type of each argument is as follows: address, address.\n- it calls an external function balanceOf of the first argument with the second argument.\n\nFor the burn function, it has one argument and its type is uint256.\n- When the first argument is not greater than the balance of caller, and for owner:\n  - the balance of caller will be updated to (the balance of caller-the first argument).\n  - the state variable totalsupply will be updated to (totalsupply-the first argument).\n  - the state variable totaldistributed will be updated to (totaldistributed-the first argument).\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When the first argument does not equal to 0, and the second argument is not greater than the balance of caller:\n  - the balance of caller will be updated to (the balance of caller-the second argument).\n  - the balance of the first argument will be updated to (the balance of the first argument+the second argument).\n\nFor the transferOwnership function, it has one argument and its type is address.\n- When the first argument does not equal to 0, and for owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the payable fallback function.\n- When distributionfinished is 0, and the blacklist of caller equals to 0:\n  - When value is not greater than totalremaining:\n    - the state variable totaldistributed will be updated to (totaldistributed+value).\n    - the state variable totalremaining will be updated to (totalremaining-value).\n    - the balance of caller will be updated to (the balance of caller+value). Afterthat, \n      - the state variable value will be updated to ((value/0x186a0)*0x1869f).\n    - When value is greater than 0:\n      - the blacklist of caller will be updated to 1.\n    - When totaldistributed is not smaller than totalsupply:\n      - the state variable distributionfinished will be updated to 1.\n  - When value is greater than totalremaining:\n    - the state variable value will be updated to totalremaining.\n  - When value is not greater than totalremaining:\n    - the state variable totaldistributed will be updated to (totaldistributed+value).\n    - the state variable totalremaining will be updated to (totalremaining-value).\n    - the balance of caller will be updated to (the balance of caller+value). Afterthat, \n      - the state variable value will be updated to ((value/0x186a0)*0x1869f).\n    - When value is greater than 0:\n      - the blacklist of caller will be updated to 1.\n    - When totaldistributed is not smaller than totalsupply:\n      - the state variable distributionfinished will be updated to 1.\n\nFor the withdrawForeignTokens function, it has one argument and its type is address.\n- For owner:\n  - it calls an external function balanceOf of the first argument with the address of this contract as the argument, and gets the returned value as v0.\n  - When RETURNDATASIZE is not smaller than 32:\n    - it calls an external function transfer of the first argument with the following argument list: owner, and v0.\n\nFor the payable getTokens function.\n- When distributionfinished is 0, and the blacklist of caller equals to 0:\n  - When value is not greater than totalremaining:\n    - the state variable totaldistributed will be updated to (totaldistributed+value).\n    - the state variable totalremaining will be updated to (totalremaining-value).\n    - the balance of caller will be updated to (the balance of caller+value). Afterthat, \n      - the state variable value will be updated to ((value/0x186a0)*0x1869f).\n    - When value is greater than 0:\n      - the blacklist of caller will be updated to 1.\n    - When totaldistributed is not smaller than totalsupply:\n      - the state variable distributionfinished will be updated to 1.\n  - When value is greater than totalremaining:\n    - the state variable value will be updated to totalremaining.\n  - When value is not greater than totalremaining:\n    - the state variable totaldistributed will be updated to (totaldistributed+value).\n    - the state variable totalremaining will be updated to (totalremaining-value).\n    - the balance of caller will be updated to (the balance of caller+value). Afterthat, \n      - the state variable value will be updated to ((value/0x186a0)*0x1869f).\n    - When value is greater than 0:\n      - the blacklist of caller will be updated to 1.\n    - When totaldistributed is not smaller than totalsupply:\n      - the state variable distributionfinished will be updated to 1.\n\n.\n Here are some state variables with their corresponding types: private state variable `owner` is typed address,public state variable `balanceof` is typed mapping,public state variable `allowance` is typed mapping,public state variable `blacklist` is typed mapping,public state variable `totalsupply` is typed uint256,public state variable `totaldistributed` is typed uint256,public state variable `totalremaining` is typed uint256,public state variable `value` is typed uint256,public state variable `distributionfinished` is typed bool.\n Here are some programming specifications: - You must declare a variable before you can use it, but the same variable cannot be declared twice\n- You must lock the pragma and use a stable version (e.g., pragma solidity `0.6.12`).\n- For exteranal calls, you must use `.call()` instead of `.transfer()` and `.send()`.\n- The target address who receives ether must be `payable address` type.\n- You must make the function `payable` if `msg.value` is used in the public functions.\n- From security perspectives, you must check whether an overflow or underflow is possible before an arithmetic operation (e.g., safemath operations), and you should determine whether the user's address is empty before transferring ether to the him.\n- You cannot import external resources because you are a separate contract.\n- You must use the following methods in new versions rather than old methods\n  - For some built-in functions, \n    - `abi.encodePacked(...) returns (bytes memory)` performs packed encoding of arguments to bytes.\n    - `keccak256(bytes memory) returns (bytes32)` computes the Keccak-256 hash of the input.\n    - `sha256(bytes memory) returns (bytes32)` computes the SHA-256 hash of the input.\n    - `ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)` recovers the address associated with the public key from elliptic curve signature or return zero on error. \n  - For some properties,\n    - `block.number (uint)` returns the current block number.\n    - `block.timestamp (uint)` returns the current block timestamp as seconds since unix epoch.\n    - `blockhash(uint blockNumber) returns (bytes32)` returns the hash of the given block.\n- `0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` means `-1`, so `+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` indeed means `-1`.\n",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables and programming specifications are provided to help you develop. The following is the description of the contract logic: For the payable constructor function.\n- the state variable owner will be updated to caller.\n- the state variable totalsupply will be updated to 0x916720a817a68ab4c8000000.\n- the state variable totaldistributed will be updated to 0x88adbd6ace8d3076bc000000.\n\nFor the approve function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When the second argument equals to 0:\n  - the allowance from caller to the first argument will be updated to the second argument.\n- When the second argument does not equal to 0, and the allowance from caller to the first argument equals to 0:\n  - the allowance from caller to the first argument will be updated to the second argument.\n\nFor the withdraw function.\n- For owner:\n  - it transfers ether valued the balance of the address of this contract to owner.\n\nFor the finishDistribution function.\n- For owner, and distributionfinished is 0:\n  - the state variable distributionfinished will be updated to 1.\n\nFor the transferFrom function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- When the third argument is not greater than the allowance from the first argument to caller, and the second argument does not equal to 0, and the third argument is not greater than the balance of the first argument:\n  - the balance of the first argument will be updated to (the balance of the first argument-the third argument).\n  - the allowance from the first argument to caller will be updated to (the allowance from the first argument to caller-the third argument).\n  - the balance of the second argument will be updated to (the balance of the second argument+the third argument).\n\nFor the getTokenBalance function, it has 2 arguments and the type of each argument is as follows: address, address.\n- it calls an external function balanceOf of the first argument with the second argument.\n\nFor the burn function, it has one argument and its type is uint256.\n- When the first argument is not greater than the balance of caller, and for owner:\n  - the balance of caller will be updated to (the balance of caller-the first argument).\n  - the state variable totalsupply will be updated to (totalsupply-the first argument).\n  - the state variable totaldistributed will be updated to (totaldistributed-the first argument).\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When the first argument does not equal to 0, and the second argument is not greater than the balance of caller:\n  - the balance of caller will be updated to (the balance of caller-the second argument).\n  - the balance of the first argument will be updated to (the balance of the first argument+the second argument).\n\nFor the transferOwnership function, it has one argument and its type is address.\n- When the first argument does not equal to 0, and for owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the payable fallback function.\n- When distributionfinished is 0, and the blacklist of caller equals to 0:\n  - When value is not greater than totalremaining:\n    - the state variable totaldistributed will be updated to (totaldistributed+value).\n    - the state variable totalremaining will be updated to (totalremaining-value).\n    - the balance of caller will be updated to (the balance of caller+value). Afterthat, \n      - the state variable value will be updated to ((value/0x186a0)*0x1869f).\n    - When value is greater than 0:\n      - the blacklist of caller will be updated to 1.\n    - When totaldistributed is not smaller than totalsupply:\n      - the state variable distributionfinished will be updated to 1.\n  - When value is greater than totalremaining:\n    - the state variable value will be updated to totalremaining.\n  - When value is not greater than totalremaining:\n    - the state variable totaldistributed will be updated to (totaldistributed+value).\n    - the state variable totalremaining will be updated to (totalremaining-value).\n    - the balance of caller will be updated to (the balance of caller+value). Afterthat, \n      - the state variable value will be updated to ((value/0x186a0)*0x1869f).\n    - When value is greater than 0:\n      - the blacklist of caller will be updated to 1.\n    - When totaldistributed is not smaller than totalsupply:\n      - the state variable distributionfinished will be updated to 1.\n\nFor the withdrawForeignTokens function, it has one argument and its type is address.\n- For owner:\n  - it calls an external function balanceOf of the first argument with the address of this contract as the argument, and gets the returned value as v0.\n  - When RETURNDATASIZE is not smaller than 32:\n    - it calls an external function transfer of the first argument with the following argument list: owner, and v0.\n\nFor the payable getTokens function.\n- When distributionfinished is 0, and the blacklist of caller equals to 0:\n  - When value is not greater than totalremaining:\n    - the state variable totaldistributed will be updated to (totaldistributed+value).\n    - the state variable totalremaining will be updated to (totalremaining-value).\n    - the balance of caller will be updated to (the balance of caller+value). Afterthat, \n      - the state variable value will be updated to ((value/0x186a0)*0x1869f).\n    - When value is greater than 0:\n      - the blacklist of caller will be updated to 1.\n    - When totaldistributed is not smaller than totalsupply:\n      - the state variable distributionfinished will be updated to 1.\n  - When value is greater than totalremaining:\n    - the state variable value will be updated to totalremaining.\n  - When value is not greater than totalremaining:\n    - the state variable totaldistributed will be updated to (totaldistributed+value).\n    - the state variable totalremaining will be updated to (totalremaining-value).\n    - the balance of caller will be updated to (the balance of caller+value). Afterthat, \n      - the state variable value will be updated to ((value/0x186a0)*0x1869f).\n    - When value is greater than 0:\n      - the blacklist of caller will be updated to 1.\n    - When totaldistributed is not smaller than totalsupply:\n      - the state variable distributionfinished will be updated to 1.\n\n.\n Here are some state variables with their corresponding types: private state variable `owner` is typed address,public state variable `balanceof` is typed mapping,public state variable `allowance` is typed mapping,public state variable `blacklist` is typed mapping,public state variable `totalsupply` is typed uint256,public state variable `totaldistributed` is typed uint256,public state variable `totalremaining` is typed uint256,public state variable `value` is typed uint256,public state variable `distributionfinished` is typed bool.\n Here are some programming specifications: - You must declare a variable before you can use it, but the same variable cannot be declared twice\n- You must lock the pragma and use a stable version (e.g., pragma solidity `0.6.12`).\n- For exteranal calls, you must use `.call()` instead of `.transfer()` and `.send()`.\n- The target address who receives ether must be `payable address` type.\n- You must make the function `payable` if `msg.value` is used in the public functions.\n- From security perspectives, you must check whether an overflow or underflow is possible before an arithmetic operation (e.g., safemath operations), and you should determine whether the user's address is empty before transferring ether to the him.\n- You cannot import external resources because you are a separate contract.\n- You must use the following methods in new versions rather than old methods\n  - For some built-in functions, \n    - `abi.encodePacked(...) returns (bytes memory)` performs packed encoding of arguments to bytes.\n    - `keccak256(bytes memory) returns (bytes32)` computes the Keccak-256 hash of the input.\n    - `sha256(bytes memory) returns (bytes32)` computes the SHA-256 hash of the input.\n    - `ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)` recovers the address associated with the public key from elliptic curve signature or return zero on error. \n  - For some properties,\n    - `block.number (uint)` returns the current block number.\n    - `block.timestamp (uint)` returns the current block timestamp as seconds since unix epoch.\n    - `blockhash(uint blockNumber) returns (bytes32)` returns the hash of the given block.\n- `0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` means `-1`, so `+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` indeed means `-1`.\n",
	"status": "1",
	"time_cost": 51.9403862953186,
	"usage": {
		"completion_tokens": 995,
		"prompt_tokens": 1967,
		"total_tokens": 2962
	}
}