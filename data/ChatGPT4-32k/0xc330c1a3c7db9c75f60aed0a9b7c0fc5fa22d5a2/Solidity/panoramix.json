{
	"address": "0xc330c1a3c7db9c75f60aed0a9b7c0fc5fa22d5a2",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity code based on the decompiled code you provided might look like the following:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Wallet {\n    uint constant MAX_OWNER_COUNT = 50;\n    mapping (address => bool) isOwner;\n    mapping (uint => Transaction) transactions;\n    mapping (uint => mapping (address => bool)) confirmations;\n    address[] owners;\n    uint required;\n    uint transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    event Deposit(address indexed sender, uint value);\n    event Submission(uint indexed transactionId);\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    function isConfirmed(uint transactionId) public view returns (bool) {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    function addTransaction(address destination, uint value, bytes memory data) public returns (uint transactionId) {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    function addConfirmation(uint transactionId) public {\n        Transaction storage txn = transactions[transactionId];\n        require(!txn.executed, \"transaction already executed\");\n        confirmations[transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, transactionId);\n    }\n\n    function executeTransaction(uint transactionId) public {\n        Transaction storage txn = transactions[transactionId];\n        require(!txn.executed, \"transaction already executed\");\n        if (isConfirmed(transactionId)) {\n            txn.executed = true;\n            (bool success, ) = txn.destination.call.value(txn.value)(txn.data);\n            if (success)\n                emit Execution(transactionId);\n            else {\n                emit ExecutionFailure(transactionId);\n                txn.executed = false;\n            }\n        }\n    }\n\n    // Rest of the functions like removeOwner, replaceOwner, changeRequirement etc goes here...\n}\n```\nPlease note that this code is only an example and might not cover the exact functionality of the original contract. You should test and modify the code according to your needs.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472328,
	"id": "chatcmpl-8MuoycfidG6UqftrkJDKZQf31ZcSP",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\nconst MAX_OWNER_COUNT = 50\n\ndef storage:\n  stor0 is mapping of struct at storage 0\n  stor1 is mapping of uint8 at storage 1\n  stor2 is mapping of uint8 at storage 2\n  owners is array of struct at storage 3\n  required is uint256 at storage 4\n  transactionCount is uint256 at storage 5\n\ndef owners(uint256 _param1): # not payable\n  require _param1 < owners.length\n  return address(owners[_param1].field_0)\n\ndef isOwner(address account): # not payable\n  return bool(stor2[account])\n\ndef confirmations(uint256 _param1, address _param2): # not payable\n  return bool(uint8(stor1[_param1][_param2]))\n\ndef transactionCount(): # not payable\n  return transactionCount\n\ndef required(): # not payable\n  return required\n\n#\n#  Regular functions\n#\n\ndef _fallback(?) payable: # default function\n  if call.value > 0:\n      log Deposit(\n            address sender=call.value,\n            uint256 value=caller)\n\ndef changeRequirement(uint256 _required): # not payable\n  require caller == this.address\n  require owners.length <= 50\n  require _required <= owners.length\n  require _required\n  require owners.length\n  required = _required\n  log RequirementChange(uint256 required=_required)\n\ndef revokeConfirmation(uint256 transactionId): # not payable\n  require stor2[caller]\n  require uint8(stor1[transactionId][caller])\n  require not uint8(stor0[transactionId].field_768)\n  uint8(stor1[transactionId][caller]) = 0\n  log Revocation(\n        address sender=caller,\n        uint256 transactionId=transactionId)\n\ndef addOwner(address owner): # not payable\n  require caller == this.address\n  require not stor2[address(owner)]\n  require owner\n  require owners.length + 1 <= 50\n  require required <= owners.length + 1\n  require required\n  require owners.length + 1\n  stor2[address(owner)] = 1\n  owners.length++\n  address(owners[owners.length].field_0) = owner\n  log OwnerAddition(address owner=owner)\n\ndef getConfirmationCount(uint256 transactionId): # not payable\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionId, 1)\n      if not uint8(stor1[transactionId][address(stor3[idx].field_0)]):\n          idx = idx + 1\n          s = s\n          continue \n      idx = idx + 1\n      s = s + 1\n      continue \n  return s\n\ndef isConfirmed(uint256 transactionId): # not payable\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionId, 1)\n      if not uint8(stor1[transactionId][address(stor3[idx].field_0)]):\n          if s != required:\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          if s + 1 != required:\n              idx = idx + 1\n              s = s + 1\n              continue \n      return 1\n  return 0\n\ndef replaceOwner(address owner, address newOwner): # not payable\n  require caller == this.address\n  require stor2[address(owner)]\n  require not stor2[address(newOwner)]\n  idx = 0\n  while idx < owners.length:\n      mem[0] = 3\n      if address(owners[idx].field_0) != owner:\n          idx = idx + 1\n          continue \n      require idx < owners.length\n      address(owners[idx].field_0) = newOwner\n      stor2[address(owner)] = 0\n      stor2[newOwner] = 1\n      log OwnerRemoval(address owner=owner)\n      log OwnerAddition(address owner=newOwner)\n      stop\n  stor2[address(owner)] = 0\n  stor2[newOwner] = 1\n  log OwnerRemoval(address owner=owner)\n  log OwnerAddition(address owner=newOwner)\n\ndef transactions(uint256 _param1): # not payable\n  mem[256] = stor0[_param1][2].field_0\n  idx = 256\n  s = 0\n  while stor0[_param1][2].length + 256 > idx + 32:\n      mem[idx + 32] = stor0[_param1][s + 2].field_256\n      idx = idx + 32\n      s = s + 1\n      continue \n  return address(stor0[_param1].field_0), \n         stor0[_param1].field_256,\n         Array(len=stor0[_param1][2].length, data=mem[256 len stor0[_param1][2].length + (floor32(stor0[_param1][2].length - 1) + -stor0[_param1][2].length + 32 % 32)]),\n         bool(uint8(stor0[_param1].field_768))\n\ndef getOwners(): # not payable\n  if owners.length:\n      mem[160] = address(owners.field_0)\n      idx = 160\n      s = 0\n      while (32 * owners.length) + 128 > idx:\n          mem[idx + 32] = address(owners[s].field_256)\n          idx = idx + 32\n          s = s + 1\n          continue \n  mem[(32 * owners.length) + 160] = 32\n  mem[(32 * owners.length) + 192] = owners.length\n  if Mask(251, 0, owners.length):\n      mem[(32 * owners.length) + 224] = mem[160]\n      mem[(32 * owners.length) + 256 len floor32((32 * owners.length) - 1)] = mem[192 len floor32((32 * owners.length) - 1)]\n  return Array(len=owners.length, data=mem[(32 * owners.length) + 224 len 32 * owners.length])\n\ndef getTransactionCount(bool pending, bool executed): # not payable\n  idx = 0\n  s = 0\n  while idx < transactionCount:\n      if not pending:\n          if not executed:\n              idx = idx + 1\n              s = s\n              continue \n          mem[0] = idx\n          mem[32] = 0\n          if not uint8(stor0[idx].field_768):\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          mem[0] = idx\n          mem[32] = 0\n          if uint8(stor0[idx].field_768):\n              if not executed:\n                  idx = idx + 1\n                  s = s\n                  continue \n              mem[0] = idx\n              mem[32] = 0\n              if not uint8(stor0[idx].field_768):\n                  idx = idx + 1\n                  s = s\n                  continue \n      idx = idx + 1\n      s = s + 1\n      continue \n  return s\n\ndef executeTransaction(uint256 transactionId): # not payable\n  require not uint8(stor0[transactionId].field_768)\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionId, 1)\n      if not uint8(stor1[transactionId][address(stor3[idx].field_0)]):\n          if s != required:\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          if s + 1 != required:\n              idx = idx + 1\n              s = s + 1\n              continue \n      uint8(stor0[transactionId].field_768) = 1\n      mem[96] = stor0[transactionId][2].field_0\n      idx = 96\n      s = sha3(sha3(transactionId, 0) + 2)\n      while stor0[transactionId][2].length + 96 > idx + 32:\n          mem[idx + 32] = uint256(stor1[s])\n          idx = idx + 32\n          s = s + 1\n          continue \n      call address(stor0[transactionId].field_0).mem[96 len 4] with:\n         value stor0[transactionId].field_256 wei\n           gas gas_remaining - 34050 wei\n          args mem[100 len stor0[transactionId][2].length + (floor32(stor0[transactionId][2].length - 1) + -stor0[transactionId][2].length + 32 % 32) - 4]\n      if ext_call.success:\n          log Execution(uint256 transactionId=transactionId)\n      else:\n          log ExecutionFailure(uint256 transactionId=transactionId)\n          uint8(stor0[transactionId].field_768) = 0\n      stop\n\ndef removeOwner(address owner): # not payable\n  require caller == this.address\n  require stor2[address(owner)]\n  stor2[address(owner)] = 0\n  idx = 0\n  while idx < owners.length - 1:\n      require idx < owners.length\n      mem[0] = 3\n      if address(owners[idx].field_0) != owner:\n          idx = idx + 1\n          continue \n      require owners.length - 1 < owners.length\n      require idx < owners.length\n      address(owners[idx].field_0) = address(owners[owners.length].field_0)\n      owners.length--\n      if not owners.length <= owners.length - 1:\n          idx = owners.length + sha3(3) - 1\n          while sha3(3) + owners.length > idx:\n              stor[idx] = 0\n              idx = idx + 1\n              continue \n      if required > owners.length:\n          require caller == this.address\n          require owners.length <= 50\n          require owners.length <= owners.length\n          require owners.length\n          require owners.length\n          required = owners.length\n          log RequirementChange(uint256 required=owners.length)\n      log OwnerRemoval(address owner=owner)\n      stop\n  owners.length--\n  if not owners.length <= owners.length - 1:\n      idx = owners.length - 1\n      while owners.length > idx:\n          owners[idx].field_0 = 0\n          idx = idx + 1\n          continue \n  if required > owners.length:\n      require caller == this.address\n      require owners.length <= 50\n      require owners.length <= owners.length\n      require owners.length\n      require owners.length\n      required = owners.length\n      log RequirementChange(uint256 required=owners.length)\n  log OwnerRemoval(address owner=owner)\n\ndef confirmTransaction(uint256 transactionId): # not payable\n  require stor2[caller]\n  require address(stor0[transactionId].field_0)\n  require not uint8(stor1[transactionId][caller])\n  uint8(stor1[transactionId][caller]) = 1\n  log Confirmation(\n        address sender=caller,\n        uint256 transactionId=transactionId)\n  require not uint8(stor0[transactionId].field_768)\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionId, 1)\n      if not uint8(stor1[transactionId][address(stor3[idx].field_0)]):\n          if s != required:\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          if s + 1 != required:\n              idx = idx + 1\n              s = s + 1\n              continue \n      uint8(stor0[transactionId].field_768) = 1\n      mem[96] = stor0[transactionId][2].field_0\n      idx = 96\n      s = sha3(sha3(transactionId, 0) + 2)\n      while stor0[transactionId][2].length + 96 > idx + 32:\n          mem[idx + 32] = uint256(stor1[s])\n          idx = idx + 32\n          s = s + 1\n          continue \n      call address(stor0[transactionId].field_0).mem[96 len 4] with:\n         value stor0[transactionId].field_256 wei\n           gas gas_remaining - 34050 wei\n          args mem[100 len stor0[transactionId][2].length + (floor32(stor0[transactionId][2].length - 1) + -stor0[transactionId][2].length + 32 % 32) - 4]\n      if ext_call.success:\n          log Execution(uint256 transactionId=transactionId)\n      else:\n          log ExecutionFailure(uint256 transactionId=transactionId)\n          uint8(stor0[transactionId].field_768) = 0\n      stop\n\ndef getConfirmations(uint256 transactionId): # not payable\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionId, 1)\n      if not uint8(stor1[transactionId][address(stor3[idx].field_0)]):\n          idx = idx + 1\n          s = s\n          continue \n      require idx < owners.length\n      mem[0] = 3\n      require s < owners.length\n      mem[(32 * s) + 192] = address(owners[idx].field_0)\n      idx = idx + 1\n      s = s + 1\n      continue \n  if (32 * s) + 224 < (32 * owners.length) + 192:\n      mem[(32 * owners.length) + 192] = s\n      t = 0\n      while t < s:\n          require t < owners.length\n          require t < s\n          mem[(32 * owners.length) + (32 * t) + 224] = mem[(32 * t) + 204 len 20]\n          t = t + 1\n          continue \n      mem[(32 * owners.length) + (32 * s) + 224] = 32\n      mem[(32 * owners.length) + (32 * s) + 256] = s\n      if Mask(251, 0, s):\n          mem[(32 * owners.length) + (32 * s) + 288] = mem[(32 * owners.length) + 224]\n          mem[(32 * owners.length) + (32 * s) + 320 len floor32((32 * s) - 1)] = mem[(32 * owners.length) + 256 len floor32((32 * s) - 1)]\n      return Array(len=s, data=mem[(32 * owners.length) + (32 * s) + 288 len 32 * s])\n  mem[(32 * s) + 224] = s\n  t = 0\n  while t < s:\n      require t < owners.length\n      require t < s, None\n      mem[(32 * s) + (32 * t) + 256] = mem[(32 * t) + 204 len 20]\n      t = t + 1\n      continue \n  mem[(64 * s) + 256] = 32\n  mem[(64 * s) + 288] = s, None\n  if not Mask(251, 0, s):\n      return memory\n        from (64 * s) + 256\n         len (32 * s) + 64\n  mem[(64 * s) + 320] = mem[(32 * s) + 256]\n  mem[(64 * s) + 352 len floor32((32 * s, None) - 1)] = mem[(32 * s) + 288 len floor32((32 * s, None) - 1)]\n  return memory\n    from (64 * s) + 256\n     len (32 * s, None) + 64\n\ndef submitTransaction(address destination, uint256 value, bytes data): # not payable\n  mem[128 len data.length] = data[all]\n  require destination\n  mem[ceil32(data.length) + 128] = destination\n  address(stor0[stor5].field_0) = destination\n  stor0[stor5].field_256 = value\n  stor0[stor5].field_512 = (2 * data.length) + 1\n  s = 0\n  idx = 128\n  while data.length + 128 > idx:\n      stor0[stor5][s + 2].field_0 = mem[idx]\n      s = s + 1\n      idx = idx + 32\n      continue \n  if stor0[stor5][2].length + 31 / 32 > Mask(251, 0, data.length + 31) >> 5:\n      stor[('array', 2, ('map', ('stor', ('name', 'stor5', 5)), ('name', 'stor0', 0))) + (Mask(251, 0, data.length + 31) >> 5)].field_0 = 0\n      idx = (Mask(251, 0, data.length + 31) >> 5) + 1\n      while stor0[stor5][2].length + 31 / 32 > idx:\n          stor0[stor5][idx + 2].field_0 = 0\n          idx = idx + 1\n          continue \n  uint8(stor0[stor5].field_768) = 0\n  transactionCount++\n  log Submission(uint256 transactionId=transactionCount)\n  require stor2[caller]\n  require address(stor0[stor5].field_0)\n  require not uint8(stor1[stor5][caller])\n  uint8(stor1[stor5][caller]) = 1\n  log Confirmation(\n        address sender=caller,\n        uint256 transactionId=transactionCount)\n  require not uint8(stor0[stor5].field_768)\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionCount, 1)\n      if not uint8(stor1[stor5][address(stor3[idx].field_0)]):\n          if s != required:\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          if s + 1 != required:\n              idx = idx + 1\n              s = s + 1\n              continue \n      uint8(stor0[stor5].field_768) = 1\n      mem[ceil32(data.length) + 256] = stor0[stor5][2].field_0\n      idx = ceil32(data.length) + 256\n      s = sha3(sha3(transactionCount, 0) + 2)\n      while ceil32(data.length) + stor0[stor5][2].length + 256 > idx + 32:\n          mem[idx + 32] = uint256(stor1[s])\n          idx = idx + 32\n          s = s + 1\n          continue \n      call address(stor0[stor5].field_0).mem[ceil32(data.length) + 256 len 4] with:\n         value stor0[stor5].field_256 wei\n           gas gas_remaining - 34050 wei\n          args mem[ceil32(data.length) + 260 len stor0[stor5][2].length + (floor32(stor0[stor5][2].length - 1) + -stor0[stor5][2].length + 32 % 32) - 4]\n      if ext_call.success:\n          log Execution(uint256 transactionId=transactionCount)\n      else:\n          log ExecutionFailure(uint256 transactionId=transactionCount)\n          uint8(stor0[stor5].field_768) = 0\n      return transactionCount\n  return transactionCount\n\ndef getTransactionIds(uint256 from, uint256 to, bool pending, bool executed): # not payable\n  mem[96] = 0\n  mem[128] = 0\n  mem[160] = transactionCount\n  idx = 0\n  s = 0\n  while idx < transactionCount:\n      if not pending:\n          if not executed:\n              idx = idx + 1\n              s = s\n              continue \n          mem[0] = idx\n          mem[32] = 0\n          if not uint8(stor0[idx].field_768):\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          mem[0] = idx\n          mem[32] = 0\n          if uint8(stor0[idx].field_768):\n              if not executed:\n                  idx = idx + 1\n                  s = s\n                  continue \n              mem[0] = idx\n              mem[32] = 0\n              if not uint8(stor0[idx].field_768):\n                  idx = idx + 1\n                  s = s\n                  continue \n      require s < transactionCount\n      mem[(32 * s) + 192] = idx\n      idx = idx + 1\n      s = s + 1\n      continue \n  if (32 * s) + 224 >= (32 * transactionCount) + 192:\n      mem[(32 * s) + 224] = to - from\n      mem[64] = (32 * s) + (32 * to - from) + 256\n      idx = from\n      while idx < to:\n          require idx < transactionCount\n          require idx - from < to - from, None\n          mem[(32 * s) + (32 * idx - from) + 256] = mem[(32 * idx) + 192]\n          idx = idx + 1\n          continue \n      mem[(32 * s) + (32 * to - from) + 256] = 32\n      mem[(32 * s) + (32 * to - from) + 288] = to - from, None\n      if not Mask(251, 0, to - from):\n          return 32, mem[(32 * s) + (32 * to - from) + 288 len (32 * to - from) + 32]\n      mem[(32 * s) + (32 * to - from) + 320] = mem[(32 * s) + 256]\n      t = (32 * s) + 256\n      u = (32 * s) + (32 * to - from) + 320\n      t = 32 * to - from, None\n      while t > 32:\n          mem[u + 32] = mem[to + 32]\n          t = to + 32\n          u = u + 32\n          t = t - 32\n          continue \n      return memory\n        from (32 * s) + (32 * to - from) + 256\n         len (32 * to - from, None) + 64\n  mem[(32 * transactionCount) + 192] = to - from\n  mem[64] = (32 * transactionCount) + (32 * to - from) + 224\n  idx = from\n  while idx < to:\n      require idx < transactionCount\n      require idx - from < mem[(32 * transactionCount) + 192]\n      mem[(32 * transactionCount) + (32 * idx - from) + 224] = mem[(32 * idx) + 192]\n      idx = idx + 1\n      continue \n  mem[(32 * transactionCount) + (32 * to - from) + 224] = 32\n  mem[(32 * transactionCount) + (32 * to - from) + 256] = mem[(32 * transactionCount) + 192]\n  _118 = mem[(32 * transactionCount) + 192]\n  if not Mask(251, 0, mem[(32 * transactionCount) + 192]):\n      return 32, mem[(32 * transactionCount) + (32 * to - from) + 256 len (32 * mem[(32 * transactionCount) + 192]) + 32]\n  mem[(32 * transactionCount) + (32 * to - from) + 288] = mem[(32 * transactionCount) + 224]\n  s = (32 * transactionCount) + 224\n  t = mem[64] + 64\n  s = 32 * mem[(32 * transactionCount) + 192]\n  while s > 32:\n      mem[t + 32] = mem[to + 32]\n      s = to + 32\n      t = t + 32\n      s = s - 32\n      continue \n  return memory\n    from mem[64]\n     len (32 * _118) + (32 * transactionCount) + (32 * to - from) + -mem[64] + 288\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: # Palkeoramix decompiler. \n\nconst MAX_OWNER_COUNT = 50\n\ndef storage:\n  stor0 is mapping of struct at storage 0\n  stor1 is mapping of uint8 at storage 1\n  stor2 is mapping of uint8 at storage 2\n  owners is array of struct at storage 3\n  required is uint256 at storage 4\n  transactionCount is uint256 at storage 5\n\ndef owners(uint256 _param1): # not payable\n  require _param1 < owners.length\n  return address(owners[_param1].field_0)\n\ndef isOwner(address account): # not payable\n  return bool(stor2[account])\n\ndef confirmations(uint256 _param1, address _param2): # not payable\n  return bool(uint8(stor1[_param1][_param2]))\n\ndef transactionCount(): # not payable\n  return transactionCount\n\ndef required(): # not payable\n  return required\n\n#\n#  Regular functions\n#\n\ndef _fallback(?) payable: # default function\n  if call.value > 0:\n      log Deposit(\n            address sender=call.value,\n            uint256 value=caller)\n\ndef changeRequirement(uint256 _required): # not payable\n  require caller == this.address\n  require owners.length <= 50\n  require _required <= owners.length\n  require _required\n  require owners.length\n  required = _required\n  log RequirementChange(uint256 required=_required)\n\ndef revokeConfirmation(uint256 transactionId): # not payable\n  require stor2[caller]\n  require uint8(stor1[transactionId][caller])\n  require not uint8(stor0[transactionId].field_768)\n  uint8(stor1[transactionId][caller]) = 0\n  log Revocation(\n        address sender=caller,\n        uint256 transactionId=transactionId)\n\ndef addOwner(address owner): # not payable\n  require caller == this.address\n  require not stor2[address(owner)]\n  require owner\n  require owners.length + 1 <= 50\n  require required <= owners.length + 1\n  require required\n  require owners.length + 1\n  stor2[address(owner)] = 1\n  owners.length++\n  address(owners[owners.length].field_0) = owner\n  log OwnerAddition(address owner=owner)\n\ndef getConfirmationCount(uint256 transactionId): # not payable\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionId, 1)\n      if not uint8(stor1[transactionId][address(stor3[idx].field_0)]):\n          idx = idx + 1\n          s = s\n          continue \n      idx = idx + 1\n      s = s + 1\n      continue \n  return s\n\ndef isConfirmed(uint256 transactionId): # not payable\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionId, 1)\n      if not uint8(stor1[transactionId][address(stor3[idx].field_0)]):\n          if s != required:\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          if s + 1 != required:\n              idx = idx + 1\n              s = s + 1\n              continue \n      return 1\n  return 0\n\ndef replaceOwner(address owner, address newOwner): # not payable\n  require caller == this.address\n  require stor2[address(owner)]\n  require not stor2[address(newOwner)]\n  idx = 0\n  while idx < owners.length:\n      mem[0] = 3\n      if address(owners[idx].field_0) != owner:\n          idx = idx + 1\n          continue \n      require idx < owners.length\n      address(owners[idx].field_0) = newOwner\n      stor2[address(owner)] = 0\n      stor2[newOwner] = 1\n      log OwnerRemoval(address owner=owner)\n      log OwnerAddition(address owner=newOwner)\n      stop\n  stor2[address(owner)] = 0\n  stor2[newOwner] = 1\n  log OwnerRemoval(address owner=owner)\n  log OwnerAddition(address owner=newOwner)\n\ndef transactions(uint256 _param1): # not payable\n  mem[256] = stor0[_param1][2].field_0\n  idx = 256\n  s = 0\n  while stor0[_param1][2].length + 256 > idx + 32:\n      mem[idx + 32] = stor0[_param1][s + 2].field_256\n      idx = idx + 32\n      s = s + 1\n      continue \n  return address(stor0[_param1].field_0), \n         stor0[_param1].field_256,\n         Array(len=stor0[_param1][2].length, data=mem[256 len stor0[_param1][2].length + (floor32(stor0[_param1][2].length - 1) + -stor0[_param1][2].length + 32 % 32)]),\n         bool(uint8(stor0[_param1].field_768))\n\ndef getOwners(): # not payable\n  if owners.length:\n      mem[160] = address(owners.field_0)\n      idx = 160\n      s = 0\n      while (32 * owners.length) + 128 > idx:\n          mem[idx + 32] = address(owners[s].field_256)\n          idx = idx + 32\n          s = s + 1\n          continue \n  mem[(32 * owners.length) + 160] = 32\n  mem[(32 * owners.length) + 192] = owners.length\n  if Mask(251, 0, owners.length):\n      mem[(32 * owners.length) + 224] = mem[160]\n      mem[(32 * owners.length) + 256 len floor32((32 * owners.length) - 1)] = mem[192 len floor32((32 * owners.length) - 1)]\n  return Array(len=owners.length, data=mem[(32 * owners.length) + 224 len 32 * owners.length])\n\ndef getTransactionCount(bool pending, bool executed): # not payable\n  idx = 0\n  s = 0\n  while idx < transactionCount:\n      if not pending:\n          if not executed:\n              idx = idx + 1\n              s = s\n              continue \n          mem[0] = idx\n          mem[32] = 0\n          if not uint8(stor0[idx].field_768):\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          mem[0] = idx\n          mem[32] = 0\n          if uint8(stor0[idx].field_768):\n              if not executed:\n                  idx = idx + 1\n                  s = s\n                  continue \n              mem[0] = idx\n              mem[32] = 0\n              if not uint8(stor0[idx].field_768):\n                  idx = idx + 1\n                  s = s\n                  continue \n      idx = idx + 1\n      s = s + 1\n      continue \n  return s\n\ndef executeTransaction(uint256 transactionId): # not payable\n  require not uint8(stor0[transactionId].field_768)\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionId, 1)\n      if not uint8(stor1[transactionId][address(stor3[idx].field_0)]):\n          if s != required:\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          if s + 1 != required:\n              idx = idx + 1\n              s = s + 1\n              continue \n      uint8(stor0[transactionId].field_768) = 1\n      mem[96] = stor0[transactionId][2].field_0\n      idx = 96\n      s = sha3(sha3(transactionId, 0) + 2)\n      while stor0[transactionId][2].length + 96 > idx + 32:\n          mem[idx + 32] = uint256(stor1[s])\n          idx = idx + 32\n          s = s + 1\n          continue \n      call address(stor0[transactionId].field_0).mem[96 len 4] with:\n         value stor0[transactionId].field_256 wei\n           gas gas_remaining - 34050 wei\n          args mem[100 len stor0[transactionId][2].length + (floor32(stor0[transactionId][2].length - 1) + -stor0[transactionId][2].length + 32 % 32) - 4]\n      if ext_call.success:\n          log Execution(uint256 transactionId=transactionId)\n      else:\n          log ExecutionFailure(uint256 transactionId=transactionId)\n          uint8(stor0[transactionId].field_768) = 0\n      stop\n\ndef removeOwner(address owner): # not payable\n  require caller == this.address\n  require stor2[address(owner)]\n  stor2[address(owner)] = 0\n  idx = 0\n  while idx < owners.length - 1:\n      require idx < owners.length\n      mem[0] = 3\n      if address(owners[idx].field_0) != owner:\n          idx = idx + 1\n          continue \n      require owners.length - 1 < owners.length\n      require idx < owners.length\n      address(owners[idx].field_0) = address(owners[owners.length].field_0)\n      owners.length--\n      if not owners.length <= owners.length - 1:\n          idx = owners.length + sha3(3) - 1\n          while sha3(3) + owners.length > idx:\n              stor[idx] = 0\n              idx = idx + 1\n              continue \n      if required > owners.length:\n          require caller == this.address\n          require owners.length <= 50\n          require owners.length <= owners.length\n          require owners.length\n          require owners.length\n          required = owners.length\n          log RequirementChange(uint256 required=owners.length)\n      log OwnerRemoval(address owner=owner)\n      stop\n  owners.length--\n  if not owners.length <= owners.length - 1:\n      idx = owners.length - 1\n      while owners.length > idx:\n          owners[idx].field_0 = 0\n          idx = idx + 1\n          continue \n  if required > owners.length:\n      require caller == this.address\n      require owners.length <= 50\n      require owners.length <= owners.length\n      require owners.length\n      require owners.length\n      required = owners.length\n      log RequirementChange(uint256 required=owners.length)\n  log OwnerRemoval(address owner=owner)\n\ndef confirmTransaction(uint256 transactionId): # not payable\n  require stor2[caller]\n  require address(stor0[transactionId].field_0)\n  require not uint8(stor1[transactionId][caller])\n  uint8(stor1[transactionId][caller]) = 1\n  log Confirmation(\n        address sender=caller,\n        uint256 transactionId=transactionId)\n  require not uint8(stor0[transactionId].field_768)\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionId, 1)\n      if not uint8(stor1[transactionId][address(stor3[idx].field_0)]):\n          if s != required:\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          if s + 1 != required:\n              idx = idx + 1\n              s = s + 1\n              continue \n      uint8(stor0[transactionId].field_768) = 1\n      mem[96] = stor0[transactionId][2].field_0\n      idx = 96\n      s = sha3(sha3(transactionId, 0) + 2)\n      while stor0[transactionId][2].length + 96 > idx + 32:\n          mem[idx + 32] = uint256(stor1[s])\n          idx = idx + 32\n          s = s + 1\n          continue \n      call address(stor0[transactionId].field_0).mem[96 len 4] with:\n         value stor0[transactionId].field_256 wei\n           gas gas_remaining - 34050 wei\n          args mem[100 len stor0[transactionId][2].length + (floor32(stor0[transactionId][2].length - 1) + -stor0[transactionId][2].length + 32 % 32) - 4]\n      if ext_call.success:\n          log Execution(uint256 transactionId=transactionId)\n      else:\n          log ExecutionFailure(uint256 transactionId=transactionId)\n          uint8(stor0[transactionId].field_768) = 0\n      stop\n\ndef getConfirmations(uint256 transactionId): # not payable\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionId, 1)\n      if not uint8(stor1[transactionId][address(stor3[idx].field_0)]):\n          idx = idx + 1\n          s = s\n          continue \n      require idx < owners.length\n      mem[0] = 3\n      require s < owners.length\n      mem[(32 * s) + 192] = address(owners[idx].field_0)\n      idx = idx + 1\n      s = s + 1\n      continue \n  if (32 * s) + 224 < (32 * owners.length) + 192:\n      mem[(32 * owners.length) + 192] = s\n      t = 0\n      while t < s:\n          require t < owners.length\n          require t < s\n          mem[(32 * owners.length) + (32 * t) + 224] = mem[(32 * t) + 204 len 20]\n          t = t + 1\n          continue \n      mem[(32 * owners.length) + (32 * s) + 224] = 32\n      mem[(32 * owners.length) + (32 * s) + 256] = s\n      if Mask(251, 0, s):\n          mem[(32 * owners.length) + (32 * s) + 288] = mem[(32 * owners.length) + 224]\n          mem[(32 * owners.length) + (32 * s) + 320 len floor32((32 * s) - 1)] = mem[(32 * owners.length) + 256 len floor32((32 * s) - 1)]\n      return Array(len=s, data=mem[(32 * owners.length) + (32 * s) + 288 len 32 * s])\n  mem[(32 * s) + 224] = s\n  t = 0\n  while t < s:\n      require t < owners.length\n      require t < s, None\n      mem[(32 * s) + (32 * t) + 256] = mem[(32 * t) + 204 len 20]\n      t = t + 1\n      continue \n  mem[(64 * s) + 256] = 32\n  mem[(64 * s) + 288] = s, None\n  if not Mask(251, 0, s):\n      return memory\n        from (64 * s) + 256\n         len (32 * s) + 64\n  mem[(64 * s) + 320] = mem[(32 * s) + 256]\n  mem[(64 * s) + 352 len floor32((32 * s, None) - 1)] = mem[(32 * s) + 288 len floor32((32 * s, None) - 1)]\n  return memory\n    from (64 * s) + 256\n     len (32 * s, None) + 64\n\ndef submitTransaction(address destination, uint256 value, bytes data): # not payable\n  mem[128 len data.length] = data[all]\n  require destination\n  mem[ceil32(data.length) + 128] = destination\n  address(stor0[stor5].field_0) = destination\n  stor0[stor5].field_256 = value\n  stor0[stor5].field_512 = (2 * data.length) + 1\n  s = 0\n  idx = 128\n  while data.length + 128 > idx:\n      stor0[stor5][s + 2].field_0 = mem[idx]\n      s = s + 1\n      idx = idx + 32\n      continue \n  if stor0[stor5][2].length + 31 / 32 > Mask(251, 0, data.length + 31) >> 5:\n      stor[('array', 2, ('map', ('stor', ('name', 'stor5', 5)), ('name', 'stor0', 0))) + (Mask(251, 0, data.length + 31) >> 5)].field_0 = 0\n      idx = (Mask(251, 0, data.length + 31) >> 5) + 1\n      while stor0[stor5][2].length + 31 / 32 > idx:\n          stor0[stor5][idx + 2].field_0 = 0\n          idx = idx + 1\n          continue \n  uint8(stor0[stor5].field_768) = 0\n  transactionCount++\n  log Submission(uint256 transactionId=transactionCount)\n  require stor2[caller]\n  require address(stor0[stor5].field_0)\n  require not uint8(stor1[stor5][caller])\n  uint8(stor1[stor5][caller]) = 1\n  log Confirmation(\n        address sender=caller,\n        uint256 transactionId=transactionCount)\n  require not uint8(stor0[stor5].field_768)\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionCount, 1)\n      if not uint8(stor1[stor5][address(stor3[idx].field_0)]):\n          if s != required:\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          if s + 1 != required:\n              idx = idx + 1\n              s = s + 1\n              continue \n      uint8(stor0[stor5].field_768) = 1\n      mem[ceil32(data.length) + 256] = stor0[stor5][2].field_0\n      idx = ceil32(data.length) + 256\n      s = sha3(sha3(transactionCount, 0) + 2)\n      while ceil32(data.length) + stor0[stor5][2].length + 256 > idx + 32:\n          mem[idx + 32] = uint256(stor1[s])\n          idx = idx + 32\n          s = s + 1\n          continue \n      call address(stor0[stor5].field_0).mem[ceil32(data.length) + 256 len 4] with:\n         value stor0[stor5].field_256 wei\n           gas gas_remaining - 34050 wei\n          args mem[ceil32(data.length) + 260 len stor0[stor5][2].length + (floor32(stor0[stor5][2].length - 1) + -stor0[stor5][2].length + 32 % 32) - 4]\n      if ext_call.success:\n          log Execution(uint256 transactionId=transactionCount)\n      else:\n          log ExecutionFailure(uint256 transactionId=transactionCount)\n          uint8(stor0[stor5].field_768) = 0\n      return transactionCount\n  return transactionCount\n\ndef getTransactionIds(uint256 from, uint256 to, bool pending, bool executed): # not payable\n  mem[96] = 0\n  mem[128] = 0\n  mem[160] = transactionCount\n  idx = 0\n  s = 0\n  while idx < transactionCount:\n      if not pending:\n          if not executed:\n              idx = idx + 1\n              s = s\n              continue \n          mem[0] = idx\n          mem[32] = 0\n          if not uint8(stor0[idx].field_768):\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          mem[0] = idx\n          mem[32] = 0\n          if uint8(stor0[idx].field_768):\n              if not executed:\n                  idx = idx + 1\n                  s = s\n                  continue \n              mem[0] = idx\n              mem[32] = 0\n              if not uint8(stor0[idx].field_768):\n                  idx = idx + 1\n                  s = s\n                  continue \n      require s < transactionCount\n      mem[(32 * s) + 192] = idx\n      idx = idx + 1\n      s = s + 1\n      continue \n  if (32 * s) + 224 >= (32 * transactionCount) + 192:\n      mem[(32 * s) + 224] = to - from\n      mem[64] = (32 * s) + (32 * to - from) + 256\n      idx = from\n      while idx < to:\n          require idx < transactionCount\n          require idx - from < to - from, None\n          mem[(32 * s) + (32 * idx - from) + 256] = mem[(32 * idx) + 192]\n          idx = idx + 1\n          continue \n      mem[(32 * s) + (32 * to - from) + 256] = 32\n      mem[(32 * s) + (32 * to - from) + 288] = to - from, None\n      if not Mask(251, 0, to - from):\n          return 32, mem[(32 * s) + (32 * to - from) + 288 len (32 * to - from) + 32]\n      mem[(32 * s) + (32 * to - from) + 320] = mem[(32 * s) + 256]\n      t = (32 * s) + 256\n      u = (32 * s) + (32 * to - from) + 320\n      t = 32 * to - from, None\n      while t > 32:\n          mem[u + 32] = mem[to + 32]\n          t = to + 32\n          u = u + 32\n          t = t - 32\n          continue \n      return memory\n        from (32 * s) + (32 * to - from) + 256\n         len (32 * to - from, None) + 64\n  mem[(32 * transactionCount) + 192] = to - from\n  mem[64] = (32 * transactionCount) + (32 * to - from) + 224\n  idx = from\n  while idx < to:\n      require idx < transactionCount\n      require idx - from < mem[(32 * transactionCount) + 192]\n      mem[(32 * transactionCount) + (32 * idx - from) + 224] = mem[(32 * idx) + 192]\n      idx = idx + 1\n      continue \n  mem[(32 * transactionCount) + (32 * to - from) + 224] = 32\n  mem[(32 * transactionCount) + (32 * to - from) + 256] = mem[(32 * transactionCount) + 192]\n  _118 = mem[(32 * transactionCount) + 192]\n  if not Mask(251, 0, mem[(32 * transactionCount) + 192]):\n      return 32, mem[(32 * transactionCount) + (32 * to - from) + 256 len (32 * mem[(32 * transactionCount) + 192]) + 32]\n  mem[(32 * transactionCount) + (32 * to - from) + 288] = mem[(32 * transactionCount) + 224]\n  s = (32 * transactionCount) + 224\n  t = mem[64] + 64\n  s = 32 * mem[(32 * transactionCount) + 192]\n  while s > 32:\n      mem[t + 32] = mem[to + 32]\n      s = to + 32\n      t = t + 32\n      s = s - 32\n      continue \n  return memory\n    from mem[64]\n     len (32 * _118) + (32 * transactionCount) + (32 * to - from) + -mem[64] + 288\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: # Palkeoramix decompiler. \n\nconst MAX_OWNER_COUNT = 50\n\ndef storage:\n  stor0 is mapping of struct at storage 0\n  stor1 is mapping of uint8 at storage 1\n  stor2 is mapping of uint8 at storage 2\n  owners is array of struct at storage 3\n  required is uint256 at storage 4\n  transactionCount is uint256 at storage 5\n\ndef owners(uint256 _param1): # not payable\n  require _param1 < owners.length\n  return address(owners[_param1].field_0)\n\ndef isOwner(address account): # not payable\n  return bool(stor2[account])\n\ndef confirmations(uint256 _param1, address _param2): # not payable\n  return bool(uint8(stor1[_param1][_param2]))\n\ndef transactionCount(): # not payable\n  return transactionCount\n\ndef required(): # not payable\n  return required\n\n#\n#  Regular functions\n#\n\ndef _fallback(?) payable: # default function\n  if call.value > 0:\n      log Deposit(\n            address sender=call.value,\n            uint256 value=caller)\n\ndef changeRequirement(uint256 _required): # not payable\n  require caller == this.address\n  require owners.length <= 50\n  require _required <= owners.length\n  require _required\n  require owners.length\n  required = _required\n  log RequirementChange(uint256 required=_required)\n\ndef revokeConfirmation(uint256 transactionId): # not payable\n  require stor2[caller]\n  require uint8(stor1[transactionId][caller])\n  require not uint8(stor0[transactionId].field_768)\n  uint8(stor1[transactionId][caller]) = 0\n  log Revocation(\n        address sender=caller,\n        uint256 transactionId=transactionId)\n\ndef addOwner(address owner): # not payable\n  require caller == this.address\n  require not stor2[address(owner)]\n  require owner\n  require owners.length + 1 <= 50\n  require required <= owners.length + 1\n  require required\n  require owners.length + 1\n  stor2[address(owner)] = 1\n  owners.length++\n  address(owners[owners.length].field_0) = owner\n  log OwnerAddition(address owner=owner)\n\ndef getConfirmationCount(uint256 transactionId): # not payable\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionId, 1)\n      if not uint8(stor1[transactionId][address(stor3[idx].field_0)]):\n          idx = idx + 1\n          s = s\n          continue \n      idx = idx + 1\n      s = s + 1\n      continue \n  return s\n\ndef isConfirmed(uint256 transactionId): # not payable\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionId, 1)\n      if not uint8(stor1[transactionId][address(stor3[idx].field_0)]):\n          if s != required:\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          if s + 1 != required:\n              idx = idx + 1\n              s = s + 1\n              continue \n      return 1\n  return 0\n\ndef replaceOwner(address owner, address newOwner): # not payable\n  require caller == this.address\n  require stor2[address(owner)]\n  require not stor2[address(newOwner)]\n  idx = 0\n  while idx < owners.length:\n      mem[0] = 3\n      if address(owners[idx].field_0) != owner:\n          idx = idx + 1\n          continue \n      require idx < owners.length\n      address(owners[idx].field_0) = newOwner\n      stor2[address(owner)] = 0\n      stor2[newOwner] = 1\n      log OwnerRemoval(address owner=owner)\n      log OwnerAddition(address owner=newOwner)\n      stop\n  stor2[address(owner)] = 0\n  stor2[newOwner] = 1\n  log OwnerRemoval(address owner=owner)\n  log OwnerAddition(address owner=newOwner)\n\ndef transactions(uint256 _param1): # not payable\n  mem[256] = stor0[_param1][2].field_0\n  idx = 256\n  s = 0\n  while stor0[_param1][2].length + 256 > idx + 32:\n      mem[idx + 32] = stor0[_param1][s + 2].field_256\n      idx = idx + 32\n      s = s + 1\n      continue \n  return address(stor0[_param1].field_0), \n         stor0[_param1].field_256,\n         Array(len=stor0[_param1][2].length, data=mem[256 len stor0[_param1][2].length + (floor32(stor0[_param1][2].length - 1) + -stor0[_param1][2].length + 32 % 32)]),\n         bool(uint8(stor0[_param1].field_768))\n\ndef getOwners(): # not payable\n  if owners.length:\n      mem[160] = address(owners.field_0)\n      idx = 160\n      s = 0\n      while (32 * owners.length) + 128 > idx:\n          mem[idx + 32] = address(owners[s].field_256)\n          idx = idx + 32\n          s = s + 1\n          continue \n  mem[(32 * owners.length) + 160] = 32\n  mem[(32 * owners.length) + 192] = owners.length\n  if Mask(251, 0, owners.length):\n      mem[(32 * owners.length) + 224] = mem[160]\n      mem[(32 * owners.length) + 256 len floor32((32 * owners.length) - 1)] = mem[192 len floor32((32 * owners.length) - 1)]\n  return Array(len=owners.length, data=mem[(32 * owners.length) + 224 len 32 * owners.length])\n\ndef getTransactionCount(bool pending, bool executed): # not payable\n  idx = 0\n  s = 0\n  while idx < transactionCount:\n      if not pending:\n          if not executed:\n              idx = idx + 1\n              s = s\n              continue \n          mem[0] = idx\n          mem[32] = 0\n          if not uint8(stor0[idx].field_768):\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          mem[0] = idx\n          mem[32] = 0\n          if uint8(stor0[idx].field_768):\n              if not executed:\n                  idx = idx + 1\n                  s = s\n                  continue \n              mem[0] = idx\n              mem[32] = 0\n              if not uint8(stor0[idx].field_768):\n                  idx = idx + 1\n                  s = s\n                  continue \n      idx = idx + 1\n      s = s + 1\n      continue \n  return s\n\ndef executeTransaction(uint256 transactionId): # not payable\n  require not uint8(stor0[transactionId].field_768)\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionId, 1)\n      if not uint8(stor1[transactionId][address(stor3[idx].field_0)]):\n          if s != required:\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          if s + 1 != required:\n              idx = idx + 1\n              s = s + 1\n              continue \n      uint8(stor0[transactionId].field_768) = 1\n      mem[96] = stor0[transactionId][2].field_0\n      idx = 96\n      s = sha3(sha3(transactionId, 0) + 2)\n      while stor0[transactionId][2].length + 96 > idx + 32:\n          mem[idx + 32] = uint256(stor1[s])\n          idx = idx + 32\n          s = s + 1\n          continue \n      call address(stor0[transactionId].field_0).mem[96 len 4] with:\n         value stor0[transactionId].field_256 wei\n           gas gas_remaining - 34050 wei\n          args mem[100 len stor0[transactionId][2].length + (floor32(stor0[transactionId][2].length - 1) + -stor0[transactionId][2].length + 32 % 32) - 4]\n      if ext_call.success:\n          log Execution(uint256 transactionId=transactionId)\n      else:\n          log ExecutionFailure(uint256 transactionId=transactionId)\n          uint8(stor0[transactionId].field_768) = 0\n      stop\n\ndef removeOwner(address owner): # not payable\n  require caller == this.address\n  require stor2[address(owner)]\n  stor2[address(owner)] = 0\n  idx = 0\n  while idx < owners.length - 1:\n      require idx < owners.length\n      mem[0] = 3\n      if address(owners[idx].field_0) != owner:\n          idx = idx + 1\n          continue \n      require owners.length - 1 < owners.length\n      require idx < owners.length\n      address(owners[idx].field_0) = address(owners[owners.length].field_0)\n      owners.length--\n      if not owners.length <= owners.length - 1:\n          idx = owners.length + sha3(3) - 1\n          while sha3(3) + owners.length > idx:\n              stor[idx] = 0\n              idx = idx + 1\n              continue \n      if required > owners.length:\n          require caller == this.address\n          require owners.length <= 50\n          require owners.length <= owners.length\n          require owners.length\n          require owners.length\n          required = owners.length\n          log RequirementChange(uint256 required=owners.length)\n      log OwnerRemoval(address owner=owner)\n      stop\n  owners.length--\n  if not owners.length <= owners.length - 1:\n      idx = owners.length - 1\n      while owners.length > idx:\n          owners[idx].field_0 = 0\n          idx = idx + 1\n          continue \n  if required > owners.length:\n      require caller == this.address\n      require owners.length <= 50\n      require owners.length <= owners.length\n      require owners.length\n      require owners.length\n      required = owners.length\n      log RequirementChange(uint256 required=owners.length)\n  log OwnerRemoval(address owner=owner)\n\ndef confirmTransaction(uint256 transactionId): # not payable\n  require stor2[caller]\n  require address(stor0[transactionId].field_0)\n  require not uint8(stor1[transactionId][caller])\n  uint8(stor1[transactionId][caller]) = 1\n  log Confirmation(\n        address sender=caller,\n        uint256 transactionId=transactionId)\n  require not uint8(stor0[transactionId].field_768)\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionId, 1)\n      if not uint8(stor1[transactionId][address(stor3[idx].field_0)]):\n          if s != required:\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          if s + 1 != required:\n              idx = idx + 1\n              s = s + 1\n              continue \n      uint8(stor0[transactionId].field_768) = 1\n      mem[96] = stor0[transactionId][2].field_0\n      idx = 96\n      s = sha3(sha3(transactionId, 0) + 2)\n      while stor0[transactionId][2].length + 96 > idx + 32:\n          mem[idx + 32] = uint256(stor1[s])\n          idx = idx + 32\n          s = s + 1\n          continue \n      call address(stor0[transactionId].field_0).mem[96 len 4] with:\n         value stor0[transactionId].field_256 wei\n           gas gas_remaining - 34050 wei\n          args mem[100 len stor0[transactionId][2].length + (floor32(stor0[transactionId][2].length - 1) + -stor0[transactionId][2].length + 32 % 32) - 4]\n      if ext_call.success:\n          log Execution(uint256 transactionId=transactionId)\n      else:\n          log ExecutionFailure(uint256 transactionId=transactionId)\n          uint8(stor0[transactionId].field_768) = 0\n      stop\n\ndef getConfirmations(uint256 transactionId): # not payable\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionId, 1)\n      if not uint8(stor1[transactionId][address(stor3[idx].field_0)]):\n          idx = idx + 1\n          s = s\n          continue \n      require idx < owners.length\n      mem[0] = 3\n      require s < owners.length\n      mem[(32 * s) + 192] = address(owners[idx].field_0)\n      idx = idx + 1\n      s = s + 1\n      continue \n  if (32 * s) + 224 < (32 * owners.length) + 192:\n      mem[(32 * owners.length) + 192] = s\n      t = 0\n      while t < s:\n          require t < owners.length\n          require t < s\n          mem[(32 * owners.length) + (32 * t) + 224] = mem[(32 * t) + 204 len 20]\n          t = t + 1\n          continue \n      mem[(32 * owners.length) + (32 * s) + 224] = 32\n      mem[(32 * owners.length) + (32 * s) + 256] = s\n      if Mask(251, 0, s):\n          mem[(32 * owners.length) + (32 * s) + 288] = mem[(32 * owners.length) + 224]\n          mem[(32 * owners.length) + (32 * s) + 320 len floor32((32 * s) - 1)] = mem[(32 * owners.length) + 256 len floor32((32 * s) - 1)]\n      return Array(len=s, data=mem[(32 * owners.length) + (32 * s) + 288 len 32 * s])\n  mem[(32 * s) + 224] = s\n  t = 0\n  while t < s:\n      require t < owners.length\n      require t < s, None\n      mem[(32 * s) + (32 * t) + 256] = mem[(32 * t) + 204 len 20]\n      t = t + 1\n      continue \n  mem[(64 * s) + 256] = 32\n  mem[(64 * s) + 288] = s, None\n  if not Mask(251, 0, s):\n      return memory\n        from (64 * s) + 256\n         len (32 * s) + 64\n  mem[(64 * s) + 320] = mem[(32 * s) + 256]\n  mem[(64 * s) + 352 len floor32((32 * s, None) - 1)] = mem[(32 * s) + 288 len floor32((32 * s, None) - 1)]\n  return memory\n    from (64 * s) + 256\n     len (32 * s, None) + 64\n\ndef submitTransaction(address destination, uint256 value, bytes data): # not payable\n  mem[128 len data.length] = data[all]\n  require destination\n  mem[ceil32(data.length) + 128] = destination\n  address(stor0[stor5].field_0) = destination\n  stor0[stor5].field_256 = value\n  stor0[stor5].field_512 = (2 * data.length) + 1\n  s = 0\n  idx = 128\n  while data.length + 128 > idx:\n      stor0[stor5][s + 2].field_0 = mem[idx]\n      s = s + 1\n      idx = idx + 32\n      continue \n  if stor0[stor5][2].length + 31 / 32 > Mask(251, 0, data.length + 31) >> 5:\n      stor[('array', 2, ('map', ('stor', ('name', 'stor5', 5)), ('name', 'stor0', 0))) + (Mask(251, 0, data.length + 31) >> 5)].field_0 = 0\n      idx = (Mask(251, 0, data.length + 31) >> 5) + 1\n      while stor0[stor5][2].length + 31 / 32 > idx:\n          stor0[stor5][idx + 2].field_0 = 0\n          idx = idx + 1\n          continue \n  uint8(stor0[stor5].field_768) = 0\n  transactionCount++\n  log Submission(uint256 transactionId=transactionCount)\n  require stor2[caller]\n  require address(stor0[stor5].field_0)\n  require not uint8(stor1[stor5][caller])\n  uint8(stor1[stor5][caller]) = 1\n  log Confirmation(\n        address sender=caller,\n        uint256 transactionId=transactionCount)\n  require not uint8(stor0[stor5].field_768)\n  idx = 0\n  s = 0\n  while idx < owners.length:\n      mem[0] = address(owners[idx].field_0)\n      mem[32] = sha3(transactionCount, 1)\n      if not uint8(stor1[stor5][address(stor3[idx].field_0)]):\n          if s != required:\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          if s + 1 != required:\n              idx = idx + 1\n              s = s + 1\n              continue \n      uint8(stor0[stor5].field_768) = 1\n      mem[ceil32(data.length) + 256] = stor0[stor5][2].field_0\n      idx = ceil32(data.length) + 256\n      s = sha3(sha3(transactionCount, 0) + 2)\n      while ceil32(data.length) + stor0[stor5][2].length + 256 > idx + 32:\n          mem[idx + 32] = uint256(stor1[s])\n          idx = idx + 32\n          s = s + 1\n          continue \n      call address(stor0[stor5].field_0).mem[ceil32(data.length) + 256 len 4] with:\n         value stor0[stor5].field_256 wei\n           gas gas_remaining - 34050 wei\n          args mem[ceil32(data.length) + 260 len stor0[stor5][2].length + (floor32(stor0[stor5][2].length - 1) + -stor0[stor5][2].length + 32 % 32) - 4]\n      if ext_call.success:\n          log Execution(uint256 transactionId=transactionCount)\n      else:\n          log ExecutionFailure(uint256 transactionId=transactionCount)\n          uint8(stor0[stor5].field_768) = 0\n      return transactionCount\n  return transactionCount\n\ndef getTransactionIds(uint256 from, uint256 to, bool pending, bool executed): # not payable\n  mem[96] = 0\n  mem[128] = 0\n  mem[160] = transactionCount\n  idx = 0\n  s = 0\n  while idx < transactionCount:\n      if not pending:\n          if not executed:\n              idx = idx + 1\n              s = s\n              continue \n          mem[0] = idx\n          mem[32] = 0\n          if not uint8(stor0[idx].field_768):\n              idx = idx + 1\n              s = s\n              continue \n      else:\n          mem[0] = idx\n          mem[32] = 0\n          if uint8(stor0[idx].field_768):\n              if not executed:\n                  idx = idx + 1\n                  s = s\n                  continue \n              mem[0] = idx\n              mem[32] = 0\n              if not uint8(stor0[idx].field_768):\n                  idx = idx + 1\n                  s = s\n                  continue \n      require s < transactionCount\n      mem[(32 * s) + 192] = idx\n      idx = idx + 1\n      s = s + 1\n      continue \n  if (32 * s) + 224 >= (32 * transactionCount) + 192:\n      mem[(32 * s) + 224] = to - from\n      mem[64] = (32 * s) + (32 * to - from) + 256\n      idx = from\n      while idx < to:\n          require idx < transactionCount\n          require idx - from < to - from, None\n          mem[(32 * s) + (32 * idx - from) + 256] = mem[(32 * idx) + 192]\n          idx = idx + 1\n          continue \n      mem[(32 * s) + (32 * to - from) + 256] = 32\n      mem[(32 * s) + (32 * to - from) + 288] = to - from, None\n      if not Mask(251, 0, to - from):\n          return 32, mem[(32 * s) + (32 * to - from) + 288 len (32 * to - from) + 32]\n      mem[(32 * s) + (32 * to - from) + 320] = mem[(32 * s) + 256]\n      t = (32 * s) + 256\n      u = (32 * s) + (32 * to - from) + 320\n      t = 32 * to - from, None\n      while t > 32:\n          mem[u + 32] = mem[to + 32]\n          t = to + 32\n          u = u + 32\n          t = t - 32\n          continue \n      return memory\n        from (32 * s) + (32 * to - from) + 256\n         len (32 * to - from, None) + 64\n  mem[(32 * transactionCount) + 192] = to - from\n  mem[64] = (32 * transactionCount) + (32 * to - from) + 224\n  idx = from\n  while idx < to:\n      require idx < transactionCount\n      require idx - from < mem[(32 * transactionCount) + 192]\n      mem[(32 * transactionCount) + (32 * idx - from) + 224] = mem[(32 * idx) + 192]\n      idx = idx + 1\n      continue \n  mem[(32 * transactionCount) + (32 * to - from) + 224] = 32\n  mem[(32 * transactionCount) + (32 * to - from) + 256] = mem[(32 * transactionCount) + 192]\n  _118 = mem[(32 * transactionCount) + 192]\n  if not Mask(251, 0, mem[(32 * transactionCount) + 192]):\n      return 32, mem[(32 * transactionCount) + (32 * to - from) + 256 len (32 * mem[(32 * transactionCount) + 192]) + 32]\n  mem[(32 * transactionCount) + (32 * to - from) + 288] = mem[(32 * transactionCount) + 224]\n  s = (32 * transactionCount) + 224\n  t = mem[64] + 64\n  s = 32 * mem[(32 * transactionCount) + 192]\n  while s > 32:\n      mem[t + 32] = mem[to + 32]\n      s = to + 32\n      t = t + 32\n      s = s - 32\n      continue \n  return memory\n    from mem[64]\n     len (32 * _118) + (32 * transactionCount) + (32 * to - from) + -mem[64] + 288\n\n.",
	"status": "1",
	"time_cost": 28.711474657058716,
	"usage": {
		"completion_tokens": 555,
		"prompt_tokens": 5612,
		"total_tokens": 6167
	}
}