{
	"address": "0x4e7f1707d2bd6d35015a76addea244e4345e17cb",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity contract code that matches the functionality in the decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n    string private _version;\n    uint256 private _unitsOneEthCanBuy;\n    uint256 private _totalEthInWei;\n    uint8 private _decimals;\n    address payable private _fundsWallet;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function fundsWallet() public view returns (address) {\n        return _fundsWallet;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(value <= _balanceOf[from]);\n        require(value <= _allowance[from][msg.sender]);\n\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        _allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function version() public view returns (string memory) {\n        return _version;\n    }\n\n    function unitsOneEthCanBuy() public view returns (uint256) {\n        return _unitsOneEthCanBuy;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balanceOf[owner];\n    }\n\n    function totalEthInWei() public view returns (uint256) {\n        return _totalEthInWei;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(value <= _balanceOf[msg.sender]);\n\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approveAndCall(address spender, uint256 value, bytes memory extraData) public returns (bool success) {\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        // Call the receiveApproval function on the contract you want to be notified\n        // This crafts the function signature manually so one doesn't have to include a contract in here just for this\n        // receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n        // it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead\n        (bool success,) = spender.call(abi.encodeWithSignature(\"receiveApproval(address,uint256,address,bytes)\", msg.sender, value, this, extraData));\n        require(success);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256 remaining) {\n        return _allowance[owner][spender];\n    }\n\n    function () external payable {\n        _totalEthInWei += msg.value;\n        require(msg.value * _unitsOneEthCanBuy <= _balanceOf[_fundsWallet]);\n\n        _balanceOf[_fundsWallet] -= msg.value * _unitsOneEthCanBuy;\n        _balanceOf[msg.sender] += msg.value * _unitsOneEthCanBuy;\n\n        emit Transfer(_fundsWallet, msg.sender, msg.value * _unitsOneEthCanBuy);\n        _fundsWallet.transfer(msg.value);\n    }\n}\n```\nPlease note that the decompiled code is in an intermediary language that's not directly translatable to Solidity. The code above is a high-level Solidity version of the decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701463243,
	"id": "chatcmpl-8R4bTMlPD0rziUxi8DWEZ3zfctjEl",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 11:43 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x5]\nuint256[] _version; // STORAGE[0x6]\nuint256 _unitsOneEthCanBuy; // STORAGE[0x7]\nuint256 _totalEthInWei; // STORAGE[0x8]\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\naddress _fundsWallet; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction fundsWallet() public nonPayable { \n    return _fundsWallet;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = varg2 <= _balanceOf[varg0];\n    if (varg2 <= _balanceOf[varg0]) {\n        v0 = v2 = varg2 <= _allowance[msg.sender];\n    }\n    if (v0) {\n        v0 = varg2 > 0;\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        _balanceOf[varg1] += varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v3 = v5 = 1;\n    }\n    return v3;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction version() public nonPayable { \n    v0 = new bytes[]((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) {\n        if (31 < (_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction unitsOneEthCanBuy() public nonPayable { \n    return _unitsOneEthCanBuy;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction totalEthInWei() public nonPayable { \n    return _totalEthInWei;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1 <= _balanceOf[msg.sender];\n    if (varg1 <= _balanceOf[msg.sender]) {\n        v0 = varg1 > 0;\n    }\n    if (!v0) {\n        v2 = v3 = 0;\n        goto 0x51f0x70bB0x388;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v2 = v4 = 1;\n    }\n    return v2;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[](varg2.length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, varg2.length);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        MEM[v2 + (100 + MEM[64])] = MEM[v2 + v0.data];\n        v2 += 32;\n    }\n    v4 = v5 = v0.length + (100 + MEM[64]);\n    if (0x1f & v0.length) {\n        MEM[v5 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v5 - (0x1f & v0.length)];\n    }\n    v6 = varg0.receiveApproval(msg.sender, varg1, address(this)).gas(msg.gas);\n    require(v6);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction fallback() public payable { \n    _totalEthInWei += msg.value;\n    if (msg.value * _unitsOneEthCanBuy <= _balanceOf[_fundsWallet]) {\n        _balanceOf[_fundsWallet] = _balanceOf[_fundsWallet] - msg.value * _unitsOneEthCanBuy;\n        _balanceOf[msg.sender] += msg.value * _unitsOneEthCanBuy;\n        emit Transfer(_fundsWallet, msg.sender, msg.value * _unitsOneEthCanBuy);\n        v0 = _fundsWallet.call().value(msg.value).gas(2300 * !msg.value);\n        require(v0); // checks call status, propagates error data on error\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == uint32(function_selector >> 224)) {\n            approve(address,uint256);\n        } else if (0x18160ddd == uint32(function_selector >> 224)) {\n            totalSupply();\n        } else if (0x2194f3a2 == uint32(function_selector >> 224)) {\n            fundsWallet();\n        } else if (0x23b872dd == uint32(function_selector >> 224)) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == uint32(function_selector >> 224)) {\n            decimals();\n        } else if (0x54fd4d50 == uint32(function_selector >> 224)) {\n            version();\n        } else if (0x65f2bc2e == uint32(function_selector >> 224)) {\n            unitsOneEthCanBuy();\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x933ba413 == uint32(function_selector >> 224)) {\n            totalEthInWei();\n        } else if (0x95d89b41 == uint32(function_selector >> 224)) {\n            symbol();\n        } else if (0xa9059cbb == uint32(function_selector >> 224)) {\n            transfer(address,uint256);\n        } else if (0xcae9ca51 == uint32(function_selector >> 224)) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xdd62ed3e == uint32(function_selector >> 224)) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 11:43 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x5]\nuint256[] _version; // STORAGE[0x6]\nuint256 _unitsOneEthCanBuy; // STORAGE[0x7]\nuint256 _totalEthInWei; // STORAGE[0x8]\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\naddress _fundsWallet; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction fundsWallet() public nonPayable { \n    return _fundsWallet;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = varg2 <= _balanceOf[varg0];\n    if (varg2 <= _balanceOf[varg0]) {\n        v0 = v2 = varg2 <= _allowance[msg.sender];\n    }\n    if (v0) {\n        v0 = varg2 > 0;\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        _balanceOf[varg1] += varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v3 = v5 = 1;\n    }\n    return v3;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction version() public nonPayable { \n    v0 = new bytes[]((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) {\n        if (31 < (_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction unitsOneEthCanBuy() public nonPayable { \n    return _unitsOneEthCanBuy;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction totalEthInWei() public nonPayable { \n    return _totalEthInWei;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1 <= _balanceOf[msg.sender];\n    if (varg1 <= _balanceOf[msg.sender]) {\n        v0 = varg1 > 0;\n    }\n    if (!v0) {\n        v2 = v3 = 0;\n        goto 0x51f0x70bB0x388;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v2 = v4 = 1;\n    }\n    return v2;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[](varg2.length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, varg2.length);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        MEM[v2 + (100 + MEM[64])] = MEM[v2 + v0.data];\n        v2 += 32;\n    }\n    v4 = v5 = v0.length + (100 + MEM[64]);\n    if (0x1f & v0.length) {\n        MEM[v5 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v5 - (0x1f & v0.length)];\n    }\n    v6 = varg0.receiveApproval(msg.sender, varg1, address(this)).gas(msg.gas);\n    require(v6);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction fallback() public payable { \n    _totalEthInWei += msg.value;\n    if (msg.value * _unitsOneEthCanBuy <= _balanceOf[_fundsWallet]) {\n        _balanceOf[_fundsWallet] = _balanceOf[_fundsWallet] - msg.value * _unitsOneEthCanBuy;\n        _balanceOf[msg.sender] += msg.value * _unitsOneEthCanBuy;\n        emit Transfer(_fundsWallet, msg.sender, msg.value * _unitsOneEthCanBuy);\n        v0 = _fundsWallet.call().value(msg.value).gas(2300 * !msg.value);\n        require(v0); // checks call status, propagates error data on error\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == uint32(function_selector >> 224)) {\n            approve(address,uint256);\n        } else if (0x18160ddd == uint32(function_selector >> 224)) {\n            totalSupply();\n        } else if (0x2194f3a2 == uint32(function_selector >> 224)) {\n            fundsWallet();\n        } else if (0x23b872dd == uint32(function_selector >> 224)) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == uint32(function_selector >> 224)) {\n            decimals();\n        } else if (0x54fd4d50 == uint32(function_selector >> 224)) {\n            version();\n        } else if (0x65f2bc2e == uint32(function_selector >> 224)) {\n            unitsOneEthCanBuy();\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x933ba413 == uint32(function_selector >> 224)) {\n            totalEthInWei();\n        } else if (0x95d89b41 == uint32(function_selector >> 224)) {\n            symbol();\n        } else if (0xa9059cbb == uint32(function_selector >> 224)) {\n            transfer(address,uint256);\n        } else if (0xcae9ca51 == uint32(function_selector >> 224)) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xdd62ed3e == uint32(function_selector >> 224)) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 11:43 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x5]\nuint256[] _version; // STORAGE[0x6]\nuint256 _unitsOneEthCanBuy; // STORAGE[0x7]\nuint256 _totalEthInWei; // STORAGE[0x8]\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\naddress _fundsWallet; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction fundsWallet() public nonPayable { \n    return _fundsWallet;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = varg2 <= _balanceOf[varg0];\n    if (varg2 <= _balanceOf[varg0]) {\n        v0 = v2 = varg2 <= _allowance[msg.sender];\n    }\n    if (v0) {\n        v0 = varg2 > 0;\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        _balanceOf[varg1] += varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v3 = v5 = 1;\n    }\n    return v3;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction version() public nonPayable { \n    v0 = new bytes[]((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) {\n        if (31 < (_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction unitsOneEthCanBuy() public nonPayable { \n    return _unitsOneEthCanBuy;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction totalEthInWei() public nonPayable { \n    return _totalEthInWei;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1 <= _balanceOf[msg.sender];\n    if (varg1 <= _balanceOf[msg.sender]) {\n        v0 = varg1 > 0;\n    }\n    if (!v0) {\n        v2 = v3 = 0;\n        goto 0x51f0x70bB0x388;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v2 = v4 = 1;\n    }\n    return v2;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[](varg2.length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, varg2.length);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        MEM[v2 + (100 + MEM[64])] = MEM[v2 + v0.data];\n        v2 += 32;\n    }\n    v4 = v5 = v0.length + (100 + MEM[64]);\n    if (0x1f & v0.length) {\n        MEM[v5 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v5 - (0x1f & v0.length)];\n    }\n    v6 = varg0.receiveApproval(msg.sender, varg1, address(this)).gas(msg.gas);\n    require(v6);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction fallback() public payable { \n    _totalEthInWei += msg.value;\n    if (msg.value * _unitsOneEthCanBuy <= _balanceOf[_fundsWallet]) {\n        _balanceOf[_fundsWallet] = _balanceOf[_fundsWallet] - msg.value * _unitsOneEthCanBuy;\n        _balanceOf[msg.sender] += msg.value * _unitsOneEthCanBuy;\n        emit Transfer(_fundsWallet, msg.sender, msg.value * _unitsOneEthCanBuy);\n        v0 = _fundsWallet.call().value(msg.value).gas(2300 * !msg.value);\n        require(v0); // checks call status, propagates error data on error\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == uint32(function_selector >> 224)) {\n            approve(address,uint256);\n        } else if (0x18160ddd == uint32(function_selector >> 224)) {\n            totalSupply();\n        } else if (0x2194f3a2 == uint32(function_selector >> 224)) {\n            fundsWallet();\n        } else if (0x23b872dd == uint32(function_selector >> 224)) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == uint32(function_selector >> 224)) {\n            decimals();\n        } else if (0x54fd4d50 == uint32(function_selector >> 224)) {\n            version();\n        } else if (0x65f2bc2e == uint32(function_selector >> 224)) {\n            unitsOneEthCanBuy();\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x933ba413 == uint32(function_selector >> 224)) {\n            totalEthInWei();\n        } else if (0x95d89b41 == uint32(function_selector >> 224)) {\n            symbol();\n        } else if (0xa9059cbb == uint32(function_selector >> 224)) {\n            transfer(address,uint256);\n        } else if (0xcae9ca51 == uint32(function_selector >> 224)) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xdd62ed3e == uint32(function_selector >> 224)) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 35.48159193992615,
	"usage": {
		"completion_tokens": 898,
		"prompt_tokens": 2724,
		"total_tokens": 3622
	}
}