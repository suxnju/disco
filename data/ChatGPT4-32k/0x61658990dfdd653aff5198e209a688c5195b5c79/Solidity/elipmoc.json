{
	"address": "0x61658990dfdd653aff5198e209a688c5195b5c79",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the provided code, here is a Solidity version of the contract:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract DigitalHumanityToken {\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    mapping (address => uint256) private _eTHBalance;\n    uint256 private _totalSupply;\n    uint256 private _start_sale;\n    uint256 private _presalePeriod;\n    uint256 private _maxAmountPresale_USD;\n    uint256 private _soldAmount_USD;\n    address private _contract_owner_address;\n    address private _affiliateAddress;\n    uint8 private _decimals;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n\n    function name() public pure returns (string memory) {\n        return \"Digital Humanity Token\";\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferSale(address to, uint256 value, uint256 varg2, uint256 varg3) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        _eTHBalance[to] += varg2;\n        _soldAmount_USD += varg3;\n        return true;\n    }\n\n    function maxAmountPresale_USD() public view returns (uint256) {\n        return _maxAmountPresale_USD;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(value <= _balanceOf[from], \"Insufficient balance\");\n        require(value <= _allowance[from][msg.sender], \"Insufficient allowance\");\n        _transfer(from, to, value);\n        _allowance[from][msg.sender] -= value;\n        return true;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function start_sale() public view returns (uint256) {\n        return _start_sale;\n    }\n\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balanceOf[account];\n    }\n\n    function soldAmount_USD() public view returns (uint256) {\n        return _soldAmount_USD;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"DHT\";\n    }\n\n    function ETHBalance(address account) public view returns (uint256) {\n        return _eTHBalance[account];\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function affiliateAddress() public view returns (address) {\n        return _affiliateAddress;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function presalePeriod() public view returns (uint256) {\n        return _presalePeriod;\n    }\n\n    function contract_owner_address() public view returns (address) {\n        return _contract_owner_address;\n    }\n\n    function _transfer(address from, address to, uint256 value) private {\n        require(to != address(0), \"Invalid address\");\n        require(value <= _balanceOf[from], \"Insufficient balance\");\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(from, to, value);\n    }\n\n    function _burn(address account, uint256 value) private {\n        require(value <= _balanceOf[account], \"Insufficient balance\");\n        _totalSupply -= value;\n        _balanceOf[account] -= value;\n        emit Burn(account, value);\n    }\n}\n```\n\nPlease note that the original decompiled code was missing the constructors and other fundamental functions, so I provided a simplified version of the contract. Also, some of the original functions were ambiguous or had missing parts, so they are not included or modified in the Solidity version.",
				"role": "assistant"
			}
		}
	],
	"created": 1701469032,
	"id": "chatcmpl-8R66qNUnjQ6DPnus1LGVy4snRRW4d",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.23 21:27 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _eTHBalance; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x3]\nuint256 _start_sale; // STORAGE[0x5]\nuint256 _presalePeriod; // STORAGE[0x6]\nuint256 _maxAmountPresale_USD; // STORAGE[0x8]\nuint256 _soldAmount_USD; // STORAGE[0x9]\nuint160 _contract_owner_address; // STORAGE[0x4] bytes 0 to 19\nuint160 _affiliateAddress; // STORAGE[0x7] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x4] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nBurn(address, uint256);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (22) {\n        MEM[v0.data] = ~0xffffffffffffffffffff & 'Digital Humanity Token';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferSale(address varg0, uint256 varg1, uint256 varg2, uint256 varg3) public nonPayable { \n    v0 = 0x7e3(varg1, varg0);\n    v1 = _SafeAdd(varg2, _eTHBalance[varg0]);\n    _eTHBalance[varg0] = v1;\n    _soldAmount_USD += varg3;\n    return 1;\n}\n\nfunction maxAmountPresale_USD() public nonPayable { \n    return _maxAmountPresale_USD;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    v0 = _SafeAdd(varg2, _balanceOf[varg1]);\n    _balanceOf[varg1] = v0;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction start_sale() public nonPayable { \n    return _start_sale;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n}\n\nfunction depositContrac(uint256 varg0) public payable { \n    _allowance[address(this)] = varg0;\n    emit Approval(msg.sender, address(this), varg0);\n    v0 = this.call().value(varg0).gas(2300 * !varg0);\n    return v0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction soldAmount_USD() public nonPayable { \n    return _soldAmount_USD;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4448540000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction ETHBalance(address varg0) public nonPayable { \n    return _eTHBalance[varg0];\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0x7e3(varg1, varg0);\n    return v0;\n}\n\nfunction affiliateAddress() public nonPayable { \n    return _affiliateAddress;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction presalePeriod() public nonPayable { \n    return _presalePeriod;\n}\n\nfunction contract_owner_address() public nonPayable { \n    return _contract_owner_address;\n}\n\nfunction refund(address varg0) public payable { \n    require(0 < this.balance);\n    v0 = v1 = block.timestamp > _presalePeriod * 0x15180 + _start_sale;\n    if (v1) {\n        v0 = v2 = _soldAmount_USD < _maxAmountPresale_USD;\n    }\n    require(v0);\n    require(_balanceOf[varg0] > 0);\n    require(_eTHBalance[varg0] > 0);\n    assert(_balanceOf[varg0] <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - _balanceOf[varg0];\n    v3 = _SafeAdd(_balanceOf[varg0], _balanceOf[_contract_owner_address]);\n    _balanceOf[_contract_owner_address] = v3;\n    _eTHBalance[varg0] = 0;\n    _allowance[varg0] = _eTHBalance[varg0];\n    emit Approval(msg.sender, varg0, _eTHBalance[varg0]);\n    v4 = varg0.call().value(_eTHBalance[varg0]).gas(2300 * !_eTHBalance[varg0]);\n    require(v4); // checks call status, propagates error data on error\n    return 1;\n}\n\nfunction 0x7e3(uint256 varg0, uint256 varg1) private { \n    require(address(varg1));\n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = address(varg1);\n    v1 = _SafeAdd(varg0, _balanceOf[v0]);\n    v2 = address(varg1);\n    _balanceOf[v2] = v1;\n    emit Transfer(msg.sender, v2, varg0);\n    return 1;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    assert(v0 >= varg1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x1f8e6fb3 == function_selector) {\n            transferSale(address,uint256,uint256,uint256);\n        } else if (0x21b1f5d5 == function_selector) {\n            maxAmountPresale_USD();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x425ef709 == function_selector) {\n            start_sale();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x46ff7eac == function_selector) {\n            depositContrac(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7da6ffba == function_selector) {\n            soldAmount_USD();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa815119d == function_selector) {\n            ETHBalance(address);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xac76260e == function_selector) {\n            affiliateAddress();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe10cc836 == function_selector) {\n            presalePeriod();\n        } else if (0xfa47b8e6 == function_selector) {\n            contract_owner_address();\n        } else if (0xfa89401a == function_selector) {\n            refund(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 21:27 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _eTHBalance; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x3]\nuint256 _start_sale; // STORAGE[0x5]\nuint256 _presalePeriod; // STORAGE[0x6]\nuint256 _maxAmountPresale_USD; // STORAGE[0x8]\nuint256 _soldAmount_USD; // STORAGE[0x9]\nuint160 _contract_owner_address; // STORAGE[0x4] bytes 0 to 19\nuint160 _affiliateAddress; // STORAGE[0x7] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x4] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nBurn(address, uint256);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (22) {\n        MEM[v0.data] = ~0xffffffffffffffffffff & 'Digital Humanity Token';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferSale(address varg0, uint256 varg1, uint256 varg2, uint256 varg3) public nonPayable { \n    v0 = 0x7e3(varg1, varg0);\n    v1 = _SafeAdd(varg2, _eTHBalance[varg0]);\n    _eTHBalance[varg0] = v1;\n    _soldAmount_USD += varg3;\n    return 1;\n}\n\nfunction maxAmountPresale_USD() public nonPayable { \n    return _maxAmountPresale_USD;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    v0 = _SafeAdd(varg2, _balanceOf[varg1]);\n    _balanceOf[varg1] = v0;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction start_sale() public nonPayable { \n    return _start_sale;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n}\n\nfunction depositContrac(uint256 varg0) public payable { \n    _allowance[address(this)] = varg0;\n    emit Approval(msg.sender, address(this), varg0);\n    v0 = this.call().value(varg0).gas(2300 * !varg0);\n    return v0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction soldAmount_USD() public nonPayable { \n    return _soldAmount_USD;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4448540000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction ETHBalance(address varg0) public nonPayable { \n    return _eTHBalance[varg0];\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0x7e3(varg1, varg0);\n    return v0;\n}\n\nfunction affiliateAddress() public nonPayable { \n    return _affiliateAddress;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction presalePeriod() public nonPayable { \n    return _presalePeriod;\n}\n\nfunction contract_owner_address() public nonPayable { \n    return _contract_owner_address;\n}\n\nfunction refund(address varg0) public payable { \n    require(0 < this.balance);\n    v0 = v1 = block.timestamp > _presalePeriod * 0x15180 + _start_sale;\n    if (v1) {\n        v0 = v2 = _soldAmount_USD < _maxAmountPresale_USD;\n    }\n    require(v0);\n    require(_balanceOf[varg0] > 0);\n    require(_eTHBalance[varg0] > 0);\n    assert(_balanceOf[varg0] <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - _balanceOf[varg0];\n    v3 = _SafeAdd(_balanceOf[varg0], _balanceOf[_contract_owner_address]);\n    _balanceOf[_contract_owner_address] = v3;\n    _eTHBalance[varg0] = 0;\n    _allowance[varg0] = _eTHBalance[varg0];\n    emit Approval(msg.sender, varg0, _eTHBalance[varg0]);\n    v4 = varg0.call().value(_eTHBalance[varg0]).gas(2300 * !_eTHBalance[varg0]);\n    require(v4); // checks call status, propagates error data on error\n    return 1;\n}\n\nfunction 0x7e3(uint256 varg0, uint256 varg1) private { \n    require(address(varg1));\n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = address(varg1);\n    v1 = _SafeAdd(varg0, _balanceOf[v0]);\n    v2 = address(varg1);\n    _balanceOf[v2] = v1;\n    emit Transfer(msg.sender, v2, varg0);\n    return 1;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    assert(v0 >= varg1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x1f8e6fb3 == function_selector) {\n            transferSale(address,uint256,uint256,uint256);\n        } else if (0x21b1f5d5 == function_selector) {\n            maxAmountPresale_USD();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x425ef709 == function_selector) {\n            start_sale();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x46ff7eac == function_selector) {\n            depositContrac(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7da6ffba == function_selector) {\n            soldAmount_USD();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa815119d == function_selector) {\n            ETHBalance(address);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xac76260e == function_selector) {\n            affiliateAddress();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe10cc836 == function_selector) {\n            presalePeriod();\n        } else if (0xfa47b8e6 == function_selector) {\n            contract_owner_address();\n        } else if (0xfa89401a == function_selector) {\n            refund(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 21:27 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _eTHBalance; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x3]\nuint256 _start_sale; // STORAGE[0x5]\nuint256 _presalePeriod; // STORAGE[0x6]\nuint256 _maxAmountPresale_USD; // STORAGE[0x8]\nuint256 _soldAmount_USD; // STORAGE[0x9]\nuint160 _contract_owner_address; // STORAGE[0x4] bytes 0 to 19\nuint160 _affiliateAddress; // STORAGE[0x7] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x4] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nBurn(address, uint256);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (22) {\n        MEM[v0.data] = ~0xffffffffffffffffffff & 'Digital Humanity Token';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferSale(address varg0, uint256 varg1, uint256 varg2, uint256 varg3) public nonPayable { \n    v0 = 0x7e3(varg1, varg0);\n    v1 = _SafeAdd(varg2, _eTHBalance[varg0]);\n    _eTHBalance[varg0] = v1;\n    _soldAmount_USD += varg3;\n    return 1;\n}\n\nfunction maxAmountPresale_USD() public nonPayable { \n    return _maxAmountPresale_USD;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    v0 = _SafeAdd(varg2, _balanceOf[varg1]);\n    _balanceOf[varg1] = v0;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction start_sale() public nonPayable { \n    return _start_sale;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n}\n\nfunction depositContrac(uint256 varg0) public payable { \n    _allowance[address(this)] = varg0;\n    emit Approval(msg.sender, address(this), varg0);\n    v0 = this.call().value(varg0).gas(2300 * !varg0);\n    return v0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction soldAmount_USD() public nonPayable { \n    return _soldAmount_USD;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4448540000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction ETHBalance(address varg0) public nonPayable { \n    return _eTHBalance[varg0];\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0x7e3(varg1, varg0);\n    return v0;\n}\n\nfunction affiliateAddress() public nonPayable { \n    return _affiliateAddress;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction presalePeriod() public nonPayable { \n    return _presalePeriod;\n}\n\nfunction contract_owner_address() public nonPayable { \n    return _contract_owner_address;\n}\n\nfunction refund(address varg0) public payable { \n    require(0 < this.balance);\n    v0 = v1 = block.timestamp > _presalePeriod * 0x15180 + _start_sale;\n    if (v1) {\n        v0 = v2 = _soldAmount_USD < _maxAmountPresale_USD;\n    }\n    require(v0);\n    require(_balanceOf[varg0] > 0);\n    require(_eTHBalance[varg0] > 0);\n    assert(_balanceOf[varg0] <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - _balanceOf[varg0];\n    v3 = _SafeAdd(_balanceOf[varg0], _balanceOf[_contract_owner_address]);\n    _balanceOf[_contract_owner_address] = v3;\n    _eTHBalance[varg0] = 0;\n    _allowance[varg0] = _eTHBalance[varg0];\n    emit Approval(msg.sender, varg0, _eTHBalance[varg0]);\n    v4 = varg0.call().value(_eTHBalance[varg0]).gas(2300 * !_eTHBalance[varg0]);\n    require(v4); // checks call status, propagates error data on error\n    return 1;\n}\n\nfunction 0x7e3(uint256 varg0, uint256 varg1) private { \n    require(address(varg1));\n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = address(varg1);\n    v1 = _SafeAdd(varg0, _balanceOf[v0]);\n    v2 = address(varg1);\n    _balanceOf[v2] = v1;\n    emit Transfer(msg.sender, v2, varg0);\n    return 1;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    assert(v0 >= varg1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x1f8e6fb3 == function_selector) {\n            transferSale(address,uint256,uint256,uint256);\n        } else if (0x21b1f5d5 == function_selector) {\n            maxAmountPresale_USD();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x425ef709 == function_selector) {\n            start_sale();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x46ff7eac == function_selector) {\n            depositContrac(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7da6ffba == function_selector) {\n            soldAmount_USD();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa815119d == function_selector) {\n            ETHBalance(address);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xac76260e == function_selector) {\n            affiliateAddress();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe10cc836 == function_selector) {\n            presalePeriod();\n        } else if (0xfa47b8e6 == function_selector) {\n            contract_owner_address();\n        } else if (0xfa89401a == function_selector) {\n            refund(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 37.679388761520386,
	"usage": {
		"completion_tokens": 922,
		"prompt_tokens": 2253,
		"total_tokens": 3175
	}
}