{
	"address": "0xd2344f06ce022a7424619b2af222e71b65824975",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here is a Solidity contract that mimics the decompiled code. Please note that the decompiled code was incomplete and had some unusual structure which isn't normally found in Solidity code, so I have made certain assumptions and simplified the code for clarity:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    mapping(address => Pusher) public pushers;\n    uint256 public pusherTracker;\n    uint256 public rateLimiter;\n\n    struct Pusher {\n        uint256 field_0;\n        uint256 field_256;\n    }\n\n    function deposit() external payable { }\n\n    function distribute(uint256 _tokens) external {\n        require(msg.sender == tx.origin, \"sorry humans only\");\n        require(_tokens > 0 && _tokens < 100, \"please pick a percent between 1 and 99\");\n\n        Pusher storage pusher = pushers[msg.sender];\n\n        if (pusher.field_0 > pusherTracker - 100) {\n            pusher.field_256 = now;\n        } else {\n            pusher.field_0 = pusherTracker;\n            pusherTracker++;\n            // Further logic involving external contract calls and token transfers\n            // has been omitted for brevity and clarity.\n        }\n    }\n\n    function() external payable {\n        revert();\n    }\n}\n```\n\nThis contract has mappings to track `pushers` and two other state variables `pusherTracker` and `rateLimiter`. It has a `deposit` function which simply accepts Ether but does nothing else, and a `distribute` function which performs some logic based on the input `_tokens` and the current `pusher`.\n\nNote: The original decompiled code appears to involve calls to external contracts (address `0x97550ce17666bb49349ef0e50f9fdb88353edb64`), which could not be accurately represented in Solidity due to lack of context and information about that contract's interface. Also, the original code contained complex loop structures which are not typically found in Solidity due to gas limitations, and these have been omitted for clarity. Please adapt this code to suit your actual requirements.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473318,
	"id": "chatcmpl-8Mv4wPat3kmMZygLkBGeMS7g2mADV",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\nconst balances = eth.balance(this.address)\n\ndef storage:\n  pusherTracker_ is uint256 at storage 0\n  pushers_ is mapping of struct at storage 1\n  rateLimiter_ is uint256 at storage 2\n\ndef pushers_(address _param1): # not payable\n  return pushers_[_param1].field_0, pushers_[_param1].field_256\n\ndef pusherTracker_(): # not payable\n  return pusherTracker_\n\ndef rateLimiter_(): # not payable\n  return rateLimiter_\n\n#\n#  Regular functions\n#\n\ndef deposit() payable: \n  stop\n\ndef _fallback(?) payable: # default function\n  revert\n\ndef distribute(uint256 _tokens): # not payable\n  require caller == tx.origin\n  if ext_code.size(caller):\n      revert with 0, 'sorry humans only'\n  if _tokens <= 0:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'please pick a percent between 1 and 99'\n  if _tokens >= 100:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'please pick a percent between 1 and 99'\n  if 100 > pusherTracker_:\n      revert with 0, 'SafeMath sub failed'\n  if pushers_[caller].field_0 > pusherTracker_ - 100:\n      idx = 1\n      s = 10\n      while idx < 47:\n          if not s:\n              idx = idx + 1\n              s = 0\n              continue \n          if 10 * s / s != 10:\n              revert with 0, 'SafeMath mul failed'\n          idx = idx + 1\n          s = 10 * s\n          continue \n      if not s:\n          idx = 1\n          s = 10\n          while idx < 47:\n              if not s:\n                  idx = idx + 1\n                  s = 0\n                  continue \n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              s = 10 * s\n              continue \n          if s:\n              require 1 < 0 / s\n              if s != s:\n                  revert with 0, 'SafeMath mul failed'\n          revert\n      if 10 * s / s != 10:\n          revert with 0, 'SafeMath mul failed'\n      idx = 1\n      t = 10\n      while idx < 47:\n          if not t:\n              idx = idx + 1\n              t = 0\n              continue \n          if 10 * t / t != 10:\n              revert with 0, 'SafeMath mul failed'\n          idx = idx + 1\n          t = 10 * t\n          continue \n      require t\n      require 1 < 10 * s / t\n      if t != t:\n          revert with 0, 'SafeMath mul failed'\n      require 10 * s\n      if not 0 / 10 * s:\n          require t\n          if not 0 / t:\n              if t < 0:\n                  revert with 0, 'SafeMath add failed'\n              if t < t:\n                  revert with 0, 'SafeMath add failed'\n          else:\n              if t * 0 / t / 0 / t != t:\n                  revert with 0, 'SafeMath mul failed'\n              if t * 0 / t > 0:\n                  revert with 0, 'SafeMath sub failed'\n              if t - (t * 0 / t) < -1 * t * 0 / t:\n                  revert with 0, 'SafeMath add failed'\n      else:\n          if 10 * s * 0 / 10 * s / 0 / 10 * s != 10 * s:\n              revert with 0, 'SafeMath mul failed'\n          require t\n          if not 0 / t:\n              if t < 0:\n                  revert with 0, 'SafeMath add failed'\n              if (10 * s * 0 / 10 * s) + t < t:\n                  revert with 0, 'SafeMath add failed'\n          else:\n              if t * 0 / t / 0 / t != t:\n                  revert with 0, 'SafeMath mul failed'\n              if t * 0 / t > 0:\n                  revert with 0, 'SafeMath sub failed'\n              if t - (t * 0 / t) < -1 * t * 0 / t:\n                  revert with 0, 'SafeMath add failed'\n              if 10 * s * 0 / 10 * s < 0:\n                  revert with 0, 'SafeMath add failed'\n      pushers_[caller].field_256 = block.timestamp\n      idx = 1\n      s = 10\n      while idx < 14:\n          if not s:\n              idx = idx + 1\n              s = 0\n              continue \n          if 10 * s / s != 10:\n              revert with 0, 'SafeMath mul failed'\n          idx = idx + 1\n          s = 10 * s\n          continue \n      if not s:\n          require block.timestamp < 0\n          require block.timestamp > 0\n      else:\n          if 10 * s / s != 10:\n              revert with 0, 'SafeMath mul failed'\n          require block.timestamp < 10 * s\n          if block.timestamp <= 0:\n  else:\n      if pushers_[caller].field_256 + 3600 < pushers_[caller].field_256:\n          revert with 0, 'SafeMath add failed'\n      if pushers_[caller].field_256 + 3600 >= block.timestamp:\n          idx = 1\n          s = 10\n          while idx < 47:\n              if not s:\n                  idx = idx + 1\n                  s = 0\n                  continue \n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              s = 10 * s\n              continue \n          if not s:\n              idx = 1\n              s = 10\n              while idx < 47:\n                  if not s:\n                      idx = idx + 1\n                      s = 0\n                      continue \n                  if 10 * s / s != 10:\n                      revert with 0, 'SafeMath mul failed'\n                  idx = idx + 1\n                  s = 10 * s\n                  continue \n              if s:\n                  require 1 < 0 / s\n                  if s != s:\n                      revert with 0, 'SafeMath mul failed'\n              revert\n          if 10 * s / s != 10:\n              revert with 0, 'SafeMath mul failed'\n          idx = 1\n          t = 10\n          while idx < 47:\n              if not t:\n                  idx = idx + 1\n                  t = 0\n                  continue \n              if 10 * t / t != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              t = 10 * t\n              continue \n          require t\n          require 1 < 10 * s / t\n          if t != t:\n              revert with 0, 'SafeMath mul failed'\n          require 10 * s\n          if not 0 / 10 * s:\n              require t\n              if not 0 / t:\n                  if t < 0:\n                      revert with 0, 'SafeMath add failed'\n                  if t < t:\n                      revert with 0, 'SafeMath add failed'\n              else:\n                  if t * 0 / t / 0 / t != t:\n                      revert with 0, 'SafeMath mul failed'\n                  if t * 0 / t > 0:\n                      revert with 0, 'SafeMath sub failed'\n                  if t - (t * 0 / t) < -1 * t * 0 / t:\n                      revert with 0, 'SafeMath add failed'\n          else:\n              if 10 * s * 0 / 10 * s / 0 / 10 * s != 10 * s:\n                  revert with 0, 'SafeMath mul failed'\n              require t\n              if not 0 / t:\n                  if t < 0:\n                      revert with 0, 'SafeMath add failed'\n                  if (10 * s * 0 / 10 * s) + t < t:\n                      revert with 0, 'SafeMath add failed'\n              else:\n                  if t * 0 / t / 0 / t != t:\n                      revert with 0, 'SafeMath mul failed'\n                  if t * 0 / t > 0:\n                      revert with 0, 'SafeMath sub failed'\n                  if t - (t * 0 / t) < -1 * t * 0 / t:\n                      revert with 0, 'SafeMath add failed'\n                  if 10 * s * 0 / 10 * s < 0:\n                      revert with 0, 'SafeMath add failed'\n          pushers_[caller].field_256 = block.timestamp\n          idx = 1\n          s = 10\n          while idx < 14:\n              if not s:\n                  idx = idx + 1\n                  s = 0\n                  continue \n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              s = 10 * s\n              continue \n          if not s:\n              require block.timestamp < 0\n              require block.timestamp > 0\n          else:\n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              require block.timestamp < 10 * s\n              if block.timestamp <= 0:\n      else:\n          pushers_[caller].field_0 = pusherTracker_\n          pusherTracker_++\n          require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n          call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.stakingRequirement() with:\n               gas gas_remaining wei\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n          call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.balanceOf(address account) with:\n               gas gas_remaining wei\n              args caller\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          if not eth.balance(this.address):\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.buy(address _referredBy) with:\n                 value eth.balance(this.address) wei\n                   gas gas_remaining wei\n                  args caller\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.balanceOf(address account) with:\n                   gas gas_remaining wei\n                  args this.address\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.sell(uint256 amount) with:\n                   gas gas_remaining wei\n                  args ext_call.return_data[0]\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.dividendsOf(address _customerAddress) with:\n                   gas gas_remaining wei\n                  args this.address\n              mem[96] = ext_call.return_data[0]\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              idx = mem[96]\n              while idx >= 0:\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.reinvest() with:\n                       gas gas_remaining wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.balanceOf(address account) with:\n                       gas gas_remaining wei\n                      args this.address\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  mem[96] = 0xe4849b3200000000000000000000000000000000000000000000000000000000\n                  mem[100] = ext_call.return_data[0]\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.sell(uint256 amount) with:\n                       gas gas_remaining wei\n                      args ext_call.return_data[0]\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  if not idx:\n                      idx = 0\n                      continue \n                  if 81 * idx / idx != 81:\n                      revert with 0, 'SafeMath mul failed'\n                  idx = 81 * idx / 100\n                  continue \n          else:\n              if (100 * eth.balance(this.address)) - (_tokens * eth.balance(this.address)) / eth.balance(this.address) != -_tokens + 100:\n                  revert with 0, 'SafeMath mul failed'\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.buy(address _referredBy) with:\n                 value eth.balance(this.address) wei\n                   gas gas_remaining wei\n                  args caller\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.balanceOf(address account) with:\n                   gas gas_remaining wei\n                  args this.address\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.sell(uint256 amount) with:\n                   gas gas_remaining wei\n                  args ext_call.return_data[0]\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.dividendsOf(address _customerAddress) with:\n                   gas gas_remaining wei\n                  args this.address\n              mem[96] = ext_call.return_data[0]\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              idx = mem[96]\n              while idx >= (100 * eth.balance(this.address)) - (_tokens * eth.balance(this.address)) / 100:\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.reinvest() with:\n                       gas gas_remaining wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.balanceOf(address account) with:\n                       gas gas_remaining wei\n                      args this.address\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  mem[96] = 0xe4849b3200000000000000000000000000000000000000000000000000000000\n                  mem[100] = ext_call.return_data[0]\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.sell(uint256 amount) with:\n                       gas gas_remaining wei\n                      args ext_call.return_data[0]\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  if not idx:\n                      idx = 0\n                      continue \n                  if 81 * idx / idx != 81:\n                      revert with 0, 'SafeMath mul failed'\n                  idx = 81 * idx / 100\n                  continue \n          require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n          call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.withdraw() with:\n               gas gas_remaining wei\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          pushers_[caller].field_256 = block.timestamp\n          idx = 1\n          s = 10\n          while idx < 14:\n              if not s:\n                  idx = idx + 1\n                  s = 0\n                  continue \n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              s = 10 * s\n              continue \n          if not s:\n              require block.timestamp < 0\n              require block.timestamp > 0\n              require block.timestamp\n              require block.timestamp / block.timestamp != 1\n              revert with 0, 'SafeMath mul failed'\n          if 10 * s / s != 10:\n              revert with 0, 'SafeMath mul failed'\n          require block.timestamp < 10 * s\n          if block.timestamp <= 0:\n              require 10 * s\n              if not 0 / 10 * s:\n                  if block.timestamp < 0:\n                      revert with 0, 'SafeMath add failed'\n                  if block.timestamp < block.timestamp:\n                      revert with 0, 'SafeMath add failed'\n              else:\n                  if 10 * s * 0 / 10 * s / 0 / 10 * s != 10 * s:\n                      revert with 0, 'SafeMath mul failed'\n                  if block.timestamp < 0:\n                      revert with 0, 'SafeMath add failed'\n                  if (10 * s * 0 / 10 * s) + block.timestamp < block.timestamp:\n                      revert with 0, 'SafeMath add failed'\n          else:\n              if not block.timestamp:\n                  require 10 * s\n                  if 0 / 10 * s:\n                      if 10 * s * 0 / 10 * s / 0 / 10 * s != 10 * s:\n                          revert with 0, 'SafeMath mul failed'\n                      if 10 * s * 0 / 10 * s < 0:\n                          revert with 0, 'SafeMath add failed'\n              else:\n                  if block.timestamp / block.timestamp != 1:\n                      revert with 0, 'SafeMath mul failed'\n                  require 10 * s\n                  if not 0 / 10 * s:\n                      if block.timestamp < 0:\n                          revert with 0, 'SafeMath add failed'\n                      if block.timestamp < block.timestamp:\n                          revert with 0, 'SafeMath add failed'\n                  else:\n                      if 10 * s * 0 / 10 * s / 0 / 10 * s != 10 * s:\n                          revert with 0, 'SafeMath mul failed'\n                      if block.timestamp < 0:\n                          revert with 0, 'SafeMath add failed'\n                      if (10 * s * 0 / 10 * s) + block.timestamp < block.timestamp:\n                          revert with 0, 'SafeMath add failed'\n          idx = 1\n          s = 10\n          while idx < 29:\n              if not s:\n                  idx = idx + 1\n                  s = 0\n                  continue \n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              s = 10 * s\n              continue \n          if s:\n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: # Palkeoramix decompiler. \n\nconst balances = eth.balance(this.address)\n\ndef storage:\n  pusherTracker_ is uint256 at storage 0\n  pushers_ is mapping of struct at storage 1\n  rateLimiter_ is uint256 at storage 2\n\ndef pushers_(address _param1): # not payable\n  return pushers_[_param1].field_0, pushers_[_param1].field_256\n\ndef pusherTracker_(): # not payable\n  return pusherTracker_\n\ndef rateLimiter_(): # not payable\n  return rateLimiter_\n\n#\n#  Regular functions\n#\n\ndef deposit() payable: \n  stop\n\ndef _fallback(?) payable: # default function\n  revert\n\ndef distribute(uint256 _tokens): # not payable\n  require caller == tx.origin\n  if ext_code.size(caller):\n      revert with 0, 'sorry humans only'\n  if _tokens <= 0:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'please pick a percent between 1 and 99'\n  if _tokens >= 100:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'please pick a percent between 1 and 99'\n  if 100 > pusherTracker_:\n      revert with 0, 'SafeMath sub failed'\n  if pushers_[caller].field_0 > pusherTracker_ - 100:\n      idx = 1\n      s = 10\n      while idx < 47:\n          if not s:\n              idx = idx + 1\n              s = 0\n              continue \n          if 10 * s / s != 10:\n              revert with 0, 'SafeMath mul failed'\n          idx = idx + 1\n          s = 10 * s\n          continue \n      if not s:\n          idx = 1\n          s = 10\n          while idx < 47:\n              if not s:\n                  idx = idx + 1\n                  s = 0\n                  continue \n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              s = 10 * s\n              continue \n          if s:\n              require 1 < 0 / s\n              if s != s:\n                  revert with 0, 'SafeMath mul failed'\n          revert\n      if 10 * s / s != 10:\n          revert with 0, 'SafeMath mul failed'\n      idx = 1\n      t = 10\n      while idx < 47:\n          if not t:\n              idx = idx + 1\n              t = 0\n              continue \n          if 10 * t / t != 10:\n              revert with 0, 'SafeMath mul failed'\n          idx = idx + 1\n          t = 10 * t\n          continue \n      require t\n      require 1 < 10 * s / t\n      if t != t:\n          revert with 0, 'SafeMath mul failed'\n      require 10 * s\n      if not 0 / 10 * s:\n          require t\n          if not 0 / t:\n              if t < 0:\n                  revert with 0, 'SafeMath add failed'\n              if t < t:\n                  revert with 0, 'SafeMath add failed'\n          else:\n              if t * 0 / t / 0 / t != t:\n                  revert with 0, 'SafeMath mul failed'\n              if t * 0 / t > 0:\n                  revert with 0, 'SafeMath sub failed'\n              if t - (t * 0 / t) < -1 * t * 0 / t:\n                  revert with 0, 'SafeMath add failed'\n      else:\n          if 10 * s * 0 / 10 * s / 0 / 10 * s != 10 * s:\n              revert with 0, 'SafeMath mul failed'\n          require t\n          if not 0 / t:\n              if t < 0:\n                  revert with 0, 'SafeMath add failed'\n              if (10 * s * 0 / 10 * s) + t < t:\n                  revert with 0, 'SafeMath add failed'\n          else:\n              if t * 0 / t / 0 / t != t:\n                  revert with 0, 'SafeMath mul failed'\n              if t * 0 / t > 0:\n                  revert with 0, 'SafeMath sub failed'\n              if t - (t * 0 / t) < -1 * t * 0 / t:\n                  revert with 0, 'SafeMath add failed'\n              if 10 * s * 0 / 10 * s < 0:\n                  revert with 0, 'SafeMath add failed'\n      pushers_[caller].field_256 = block.timestamp\n      idx = 1\n      s = 10\n      while idx < 14:\n          if not s:\n              idx = idx + 1\n              s = 0\n              continue \n          if 10 * s / s != 10:\n              revert with 0, 'SafeMath mul failed'\n          idx = idx + 1\n          s = 10 * s\n          continue \n      if not s:\n          require block.timestamp < 0\n          require block.timestamp > 0\n      else:\n          if 10 * s / s != 10:\n              revert with 0, 'SafeMath mul failed'\n          require block.timestamp < 10 * s\n          if block.timestamp <= 0:\n  else:\n      if pushers_[caller].field_256 + 3600 < pushers_[caller].field_256:\n          revert with 0, 'SafeMath add failed'\n      if pushers_[caller].field_256 + 3600 >= block.timestamp:\n          idx = 1\n          s = 10\n          while idx < 47:\n              if not s:\n                  idx = idx + 1\n                  s = 0\n                  continue \n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              s = 10 * s\n              continue \n          if not s:\n              idx = 1\n              s = 10\n              while idx < 47:\n                  if not s:\n                      idx = idx + 1\n                      s = 0\n                      continue \n                  if 10 * s / s != 10:\n                      revert with 0, 'SafeMath mul failed'\n                  idx = idx + 1\n                  s = 10 * s\n                  continue \n              if s:\n                  require 1 < 0 / s\n                  if s != s:\n                      revert with 0, 'SafeMath mul failed'\n              revert\n          if 10 * s / s != 10:\n              revert with 0, 'SafeMath mul failed'\n          idx = 1\n          t = 10\n          while idx < 47:\n              if not t:\n                  idx = idx + 1\n                  t = 0\n                  continue \n              if 10 * t / t != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              t = 10 * t\n              continue \n          require t\n          require 1 < 10 * s / t\n          if t != t:\n              revert with 0, 'SafeMath mul failed'\n          require 10 * s\n          if not 0 / 10 * s:\n              require t\n              if not 0 / t:\n                  if t < 0:\n                      revert with 0, 'SafeMath add failed'\n                  if t < t:\n                      revert with 0, 'SafeMath add failed'\n              else:\n                  if t * 0 / t / 0 / t != t:\n                      revert with 0, 'SafeMath mul failed'\n                  if t * 0 / t > 0:\n                      revert with 0, 'SafeMath sub failed'\n                  if t - (t * 0 / t) < -1 * t * 0 / t:\n                      revert with 0, 'SafeMath add failed'\n          else:\n              if 10 * s * 0 / 10 * s / 0 / 10 * s != 10 * s:\n                  revert with 0, 'SafeMath mul failed'\n              require t\n              if not 0 / t:\n                  if t < 0:\n                      revert with 0, 'SafeMath add failed'\n                  if (10 * s * 0 / 10 * s) + t < t:\n                      revert with 0, 'SafeMath add failed'\n              else:\n                  if t * 0 / t / 0 / t != t:\n                      revert with 0, 'SafeMath mul failed'\n                  if t * 0 / t > 0:\n                      revert with 0, 'SafeMath sub failed'\n                  if t - (t * 0 / t) < -1 * t * 0 / t:\n                      revert with 0, 'SafeMath add failed'\n                  if 10 * s * 0 / 10 * s < 0:\n                      revert with 0, 'SafeMath add failed'\n          pushers_[caller].field_256 = block.timestamp\n          idx = 1\n          s = 10\n          while idx < 14:\n              if not s:\n                  idx = idx + 1\n                  s = 0\n                  continue \n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              s = 10 * s\n              continue \n          if not s:\n              require block.timestamp < 0\n              require block.timestamp > 0\n          else:\n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              require block.timestamp < 10 * s\n              if block.timestamp <= 0:\n      else:\n          pushers_[caller].field_0 = pusherTracker_\n          pusherTracker_++\n          require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n          call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.stakingRequirement() with:\n               gas gas_remaining wei\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n          call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.balanceOf(address account) with:\n               gas gas_remaining wei\n              args caller\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          if not eth.balance(this.address):\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.buy(address _referredBy) with:\n                 value eth.balance(this.address) wei\n                   gas gas_remaining wei\n                  args caller\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.balanceOf(address account) with:\n                   gas gas_remaining wei\n                  args this.address\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.sell(uint256 amount) with:\n                   gas gas_remaining wei\n                  args ext_call.return_data[0]\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.dividendsOf(address _customerAddress) with:\n                   gas gas_remaining wei\n                  args this.address\n              mem[96] = ext_call.return_data[0]\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              idx = mem[96]\n              while idx >= 0:\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.reinvest() with:\n                       gas gas_remaining wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.balanceOf(address account) with:\n                       gas gas_remaining wei\n                      args this.address\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  mem[96] = 0xe4849b3200000000000000000000000000000000000000000000000000000000\n                  mem[100] = ext_call.return_data[0]\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.sell(uint256 amount) with:\n                       gas gas_remaining wei\n                      args ext_call.return_data[0]\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  if not idx:\n                      idx = 0\n                      continue \n                  if 81 * idx / idx != 81:\n                      revert with 0, 'SafeMath mul failed'\n                  idx = 81 * idx / 100\n                  continue \n          else:\n              if (100 * eth.balance(this.address)) - (_tokens * eth.balance(this.address)) / eth.balance(this.address) != -_tokens + 100:\n                  revert with 0, 'SafeMath mul failed'\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.buy(address _referredBy) with:\n                 value eth.balance(this.address) wei\n                   gas gas_remaining wei\n                  args caller\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.balanceOf(address account) with:\n                   gas gas_remaining wei\n                  args this.address\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.sell(uint256 amount) with:\n                   gas gas_remaining wei\n                  args ext_call.return_data[0]\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.dividendsOf(address _customerAddress) with:\n                   gas gas_remaining wei\n                  args this.address\n              mem[96] = ext_call.return_data[0]\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              idx = mem[96]\n              while idx >= (100 * eth.balance(this.address)) - (_tokens * eth.balance(this.address)) / 100:\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.reinvest() with:\n                       gas gas_remaining wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.balanceOf(address account) with:\n                       gas gas_remaining wei\n                      args this.address\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  mem[96] = 0xe4849b3200000000000000000000000000000000000000000000000000000000\n                  mem[100] = ext_call.return_data[0]\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.sell(uint256 amount) with:\n                       gas gas_remaining wei\n                      args ext_call.return_data[0]\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  if not idx:\n                      idx = 0\n                      continue \n                  if 81 * idx / idx != 81:\n                      revert with 0, 'SafeMath mul failed'\n                  idx = 81 * idx / 100\n                  continue \n          require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n          call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.withdraw() with:\n               gas gas_remaining wei\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          pushers_[caller].field_256 = block.timestamp\n          idx = 1\n          s = 10\n          while idx < 14:\n              if not s:\n                  idx = idx + 1\n                  s = 0\n                  continue \n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              s = 10 * s\n              continue \n          if not s:\n              require block.timestamp < 0\n              require block.timestamp > 0\n              require block.timestamp\n              require block.timestamp / block.timestamp != 1\n              revert with 0, 'SafeMath mul failed'\n          if 10 * s / s != 10:\n              revert with 0, 'SafeMath mul failed'\n          require block.timestamp < 10 * s\n          if block.timestamp <= 0:\n              require 10 * s\n              if not 0 / 10 * s:\n                  if block.timestamp < 0:\n                      revert with 0, 'SafeMath add failed'\n                  if block.timestamp < block.timestamp:\n                      revert with 0, 'SafeMath add failed'\n              else:\n                  if 10 * s * 0 / 10 * s / 0 / 10 * s != 10 * s:\n                      revert with 0, 'SafeMath mul failed'\n                  if block.timestamp < 0:\n                      revert with 0, 'SafeMath add failed'\n                  if (10 * s * 0 / 10 * s) + block.timestamp < block.timestamp:\n                      revert with 0, 'SafeMath add failed'\n          else:\n              if not block.timestamp:\n                  require 10 * s\n                  if 0 / 10 * s:\n                      if 10 * s * 0 / 10 * s / 0 / 10 * s != 10 * s:\n                          revert with 0, 'SafeMath mul failed'\n                      if 10 * s * 0 / 10 * s < 0:\n                          revert with 0, 'SafeMath add failed'\n              else:\n                  if block.timestamp / block.timestamp != 1:\n                      revert with 0, 'SafeMath mul failed'\n                  require 10 * s\n                  if not 0 / 10 * s:\n                      if block.timestamp < 0:\n                          revert with 0, 'SafeMath add failed'\n                      if block.timestamp < block.timestamp:\n                          revert with 0, 'SafeMath add failed'\n                  else:\n                      if 10 * s * 0 / 10 * s / 0 / 10 * s != 10 * s:\n                          revert with 0, 'SafeMath mul failed'\n                      if block.timestamp < 0:\n                          revert with 0, 'SafeMath add failed'\n                      if (10 * s * 0 / 10 * s) + block.timestamp < block.timestamp:\n                          revert with 0, 'SafeMath add failed'\n          idx = 1\n          s = 10\n          while idx < 29:\n              if not s:\n                  idx = idx + 1\n                  s = 0\n                  continue \n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              s = 10 * s\n              continue \n          if s:\n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: # Palkeoramix decompiler. \n\nconst balances = eth.balance(this.address)\n\ndef storage:\n  pusherTracker_ is uint256 at storage 0\n  pushers_ is mapping of struct at storage 1\n  rateLimiter_ is uint256 at storage 2\n\ndef pushers_(address _param1): # not payable\n  return pushers_[_param1].field_0, pushers_[_param1].field_256\n\ndef pusherTracker_(): # not payable\n  return pusherTracker_\n\ndef rateLimiter_(): # not payable\n  return rateLimiter_\n\n#\n#  Regular functions\n#\n\ndef deposit() payable: \n  stop\n\ndef _fallback(?) payable: # default function\n  revert\n\ndef distribute(uint256 _tokens): # not payable\n  require caller == tx.origin\n  if ext_code.size(caller):\n      revert with 0, 'sorry humans only'\n  if _tokens <= 0:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'please pick a percent between 1 and 99'\n  if _tokens >= 100:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'please pick a percent between 1 and 99'\n  if 100 > pusherTracker_:\n      revert with 0, 'SafeMath sub failed'\n  if pushers_[caller].field_0 > pusherTracker_ - 100:\n      idx = 1\n      s = 10\n      while idx < 47:\n          if not s:\n              idx = idx + 1\n              s = 0\n              continue \n          if 10 * s / s != 10:\n              revert with 0, 'SafeMath mul failed'\n          idx = idx + 1\n          s = 10 * s\n          continue \n      if not s:\n          idx = 1\n          s = 10\n          while idx < 47:\n              if not s:\n                  idx = idx + 1\n                  s = 0\n                  continue \n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              s = 10 * s\n              continue \n          if s:\n              require 1 < 0 / s\n              if s != s:\n                  revert with 0, 'SafeMath mul failed'\n          revert\n      if 10 * s / s != 10:\n          revert with 0, 'SafeMath mul failed'\n      idx = 1\n      t = 10\n      while idx < 47:\n          if not t:\n              idx = idx + 1\n              t = 0\n              continue \n          if 10 * t / t != 10:\n              revert with 0, 'SafeMath mul failed'\n          idx = idx + 1\n          t = 10 * t\n          continue \n      require t\n      require 1 < 10 * s / t\n      if t != t:\n          revert with 0, 'SafeMath mul failed'\n      require 10 * s\n      if not 0 / 10 * s:\n          require t\n          if not 0 / t:\n              if t < 0:\n                  revert with 0, 'SafeMath add failed'\n              if t < t:\n                  revert with 0, 'SafeMath add failed'\n          else:\n              if t * 0 / t / 0 / t != t:\n                  revert with 0, 'SafeMath mul failed'\n              if t * 0 / t > 0:\n                  revert with 0, 'SafeMath sub failed'\n              if t - (t * 0 / t) < -1 * t * 0 / t:\n                  revert with 0, 'SafeMath add failed'\n      else:\n          if 10 * s * 0 / 10 * s / 0 / 10 * s != 10 * s:\n              revert with 0, 'SafeMath mul failed'\n          require t\n          if not 0 / t:\n              if t < 0:\n                  revert with 0, 'SafeMath add failed'\n              if (10 * s * 0 / 10 * s) + t < t:\n                  revert with 0, 'SafeMath add failed'\n          else:\n              if t * 0 / t / 0 / t != t:\n                  revert with 0, 'SafeMath mul failed'\n              if t * 0 / t > 0:\n                  revert with 0, 'SafeMath sub failed'\n              if t - (t * 0 / t) < -1 * t * 0 / t:\n                  revert with 0, 'SafeMath add failed'\n              if 10 * s * 0 / 10 * s < 0:\n                  revert with 0, 'SafeMath add failed'\n      pushers_[caller].field_256 = block.timestamp\n      idx = 1\n      s = 10\n      while idx < 14:\n          if not s:\n              idx = idx + 1\n              s = 0\n              continue \n          if 10 * s / s != 10:\n              revert with 0, 'SafeMath mul failed'\n          idx = idx + 1\n          s = 10 * s\n          continue \n      if not s:\n          require block.timestamp < 0\n          require block.timestamp > 0\n      else:\n          if 10 * s / s != 10:\n              revert with 0, 'SafeMath mul failed'\n          require block.timestamp < 10 * s\n          if block.timestamp <= 0:\n  else:\n      if pushers_[caller].field_256 + 3600 < pushers_[caller].field_256:\n          revert with 0, 'SafeMath add failed'\n      if pushers_[caller].field_256 + 3600 >= block.timestamp:\n          idx = 1\n          s = 10\n          while idx < 47:\n              if not s:\n                  idx = idx + 1\n                  s = 0\n                  continue \n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              s = 10 * s\n              continue \n          if not s:\n              idx = 1\n              s = 10\n              while idx < 47:\n                  if not s:\n                      idx = idx + 1\n                      s = 0\n                      continue \n                  if 10 * s / s != 10:\n                      revert with 0, 'SafeMath mul failed'\n                  idx = idx + 1\n                  s = 10 * s\n                  continue \n              if s:\n                  require 1 < 0 / s\n                  if s != s:\n                      revert with 0, 'SafeMath mul failed'\n              revert\n          if 10 * s / s != 10:\n              revert with 0, 'SafeMath mul failed'\n          idx = 1\n          t = 10\n          while idx < 47:\n              if not t:\n                  idx = idx + 1\n                  t = 0\n                  continue \n              if 10 * t / t != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              t = 10 * t\n              continue \n          require t\n          require 1 < 10 * s / t\n          if t != t:\n              revert with 0, 'SafeMath mul failed'\n          require 10 * s\n          if not 0 / 10 * s:\n              require t\n              if not 0 / t:\n                  if t < 0:\n                      revert with 0, 'SafeMath add failed'\n                  if t < t:\n                      revert with 0, 'SafeMath add failed'\n              else:\n                  if t * 0 / t / 0 / t != t:\n                      revert with 0, 'SafeMath mul failed'\n                  if t * 0 / t > 0:\n                      revert with 0, 'SafeMath sub failed'\n                  if t - (t * 0 / t) < -1 * t * 0 / t:\n                      revert with 0, 'SafeMath add failed'\n          else:\n              if 10 * s * 0 / 10 * s / 0 / 10 * s != 10 * s:\n                  revert with 0, 'SafeMath mul failed'\n              require t\n              if not 0 / t:\n                  if t < 0:\n                      revert with 0, 'SafeMath add failed'\n                  if (10 * s * 0 / 10 * s) + t < t:\n                      revert with 0, 'SafeMath add failed'\n              else:\n                  if t * 0 / t / 0 / t != t:\n                      revert with 0, 'SafeMath mul failed'\n                  if t * 0 / t > 0:\n                      revert with 0, 'SafeMath sub failed'\n                  if t - (t * 0 / t) < -1 * t * 0 / t:\n                      revert with 0, 'SafeMath add failed'\n                  if 10 * s * 0 / 10 * s < 0:\n                      revert with 0, 'SafeMath add failed'\n          pushers_[caller].field_256 = block.timestamp\n          idx = 1\n          s = 10\n          while idx < 14:\n              if not s:\n                  idx = idx + 1\n                  s = 0\n                  continue \n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              s = 10 * s\n              continue \n          if not s:\n              require block.timestamp < 0\n              require block.timestamp > 0\n          else:\n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              require block.timestamp < 10 * s\n              if block.timestamp <= 0:\n      else:\n          pushers_[caller].field_0 = pusherTracker_\n          pusherTracker_++\n          require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n          call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.stakingRequirement() with:\n               gas gas_remaining wei\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n          call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.balanceOf(address account) with:\n               gas gas_remaining wei\n              args caller\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          if not eth.balance(this.address):\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.buy(address _referredBy) with:\n                 value eth.balance(this.address) wei\n                   gas gas_remaining wei\n                  args caller\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.balanceOf(address account) with:\n                   gas gas_remaining wei\n                  args this.address\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.sell(uint256 amount) with:\n                   gas gas_remaining wei\n                  args ext_call.return_data[0]\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.dividendsOf(address _customerAddress) with:\n                   gas gas_remaining wei\n                  args this.address\n              mem[96] = ext_call.return_data[0]\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              idx = mem[96]\n              while idx >= 0:\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.reinvest() with:\n                       gas gas_remaining wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.balanceOf(address account) with:\n                       gas gas_remaining wei\n                      args this.address\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  mem[96] = 0xe4849b3200000000000000000000000000000000000000000000000000000000\n                  mem[100] = ext_call.return_data[0]\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.sell(uint256 amount) with:\n                       gas gas_remaining wei\n                      args ext_call.return_data[0]\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  if not idx:\n                      idx = 0\n                      continue \n                  if 81 * idx / idx != 81:\n                      revert with 0, 'SafeMath mul failed'\n                  idx = 81 * idx / 100\n                  continue \n          else:\n              if (100 * eth.balance(this.address)) - (_tokens * eth.balance(this.address)) / eth.balance(this.address) != -_tokens + 100:\n                  revert with 0, 'SafeMath mul failed'\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.buy(address _referredBy) with:\n                 value eth.balance(this.address) wei\n                   gas gas_remaining wei\n                  args caller\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.balanceOf(address account) with:\n                   gas gas_remaining wei\n                  args this.address\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.sell(uint256 amount) with:\n                   gas gas_remaining wei\n                  args ext_call.return_data[0]\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n              call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.dividendsOf(address _customerAddress) with:\n                   gas gas_remaining wei\n                  args this.address\n              mem[96] = ext_call.return_data[0]\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              idx = mem[96]\n              while idx >= (100 * eth.balance(this.address)) - (_tokens * eth.balance(this.address)) / 100:\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.reinvest() with:\n                       gas gas_remaining wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.balanceOf(address account) with:\n                       gas gas_remaining wei\n                      args this.address\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  mem[96] = 0xe4849b3200000000000000000000000000000000000000000000000000000000\n                  mem[100] = ext_call.return_data[0]\n                  require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n                  call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.sell(uint256 amount) with:\n                       gas gas_remaining wei\n                      args ext_call.return_data[0]\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  if not idx:\n                      idx = 0\n                      continue \n                  if 81 * idx / idx != 81:\n                      revert with 0, 'SafeMath mul failed'\n                  idx = 81 * idx / 100\n                  continue \n          require ext_code.size(0x97550ce17666bb49349ef0e50f9fdb88353edb64)\n          call 0x97550ce17666bb49349ef0e50f9fdb88353edb64.withdraw() with:\n               gas gas_remaining wei\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          pushers_[caller].field_256 = block.timestamp\n          idx = 1\n          s = 10\n          while idx < 14:\n              if not s:\n                  idx = idx + 1\n                  s = 0\n                  continue \n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              s = 10 * s\n              continue \n          if not s:\n              require block.timestamp < 0\n              require block.timestamp > 0\n              require block.timestamp\n              require block.timestamp / block.timestamp != 1\n              revert with 0, 'SafeMath mul failed'\n          if 10 * s / s != 10:\n              revert with 0, 'SafeMath mul failed'\n          require block.timestamp < 10 * s\n          if block.timestamp <= 0:\n              require 10 * s\n              if not 0 / 10 * s:\n                  if block.timestamp < 0:\n                      revert with 0, 'SafeMath add failed'\n                  if block.timestamp < block.timestamp:\n                      revert with 0, 'SafeMath add failed'\n              else:\n                  if 10 * s * 0 / 10 * s / 0 / 10 * s != 10 * s:\n                      revert with 0, 'SafeMath mul failed'\n                  if block.timestamp < 0:\n                      revert with 0, 'SafeMath add failed'\n                  if (10 * s * 0 / 10 * s) + block.timestamp < block.timestamp:\n                      revert with 0, 'SafeMath add failed'\n          else:\n              if not block.timestamp:\n                  require 10 * s\n                  if 0 / 10 * s:\n                      if 10 * s * 0 / 10 * s / 0 / 10 * s != 10 * s:\n                          revert with 0, 'SafeMath mul failed'\n                      if 10 * s * 0 / 10 * s < 0:\n                          revert with 0, 'SafeMath add failed'\n              else:\n                  if block.timestamp / block.timestamp != 1:\n                      revert with 0, 'SafeMath mul failed'\n                  require 10 * s\n                  if not 0 / 10 * s:\n                      if block.timestamp < 0:\n                          revert with 0, 'SafeMath add failed'\n                      if block.timestamp < block.timestamp:\n                          revert with 0, 'SafeMath add failed'\n                  else:\n                      if 10 * s * 0 / 10 * s / 0 / 10 * s != 10 * s:\n                          revert with 0, 'SafeMath mul failed'\n                      if block.timestamp < 0:\n                          revert with 0, 'SafeMath add failed'\n                      if (10 * s * 0 / 10 * s) + block.timestamp < block.timestamp:\n                          revert with 0, 'SafeMath add failed'\n          idx = 1\n          s = 10\n          while idx < 29:\n              if not s:\n                  idx = idx + 1\n                  s = 0\n                  continue \n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n              idx = idx + 1\n              s = 10 * s\n              continue \n          if s:\n              if 10 * s / s != 10:\n                  revert with 0, 'SafeMath mul failed'\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n.",
	"status": "1",
	"time_cost": 21.88854956626892,
	"usage": {
		"completion_tokens": 444,
		"prompt_tokens": 4990,
		"total_tokens": 5434
	}
}