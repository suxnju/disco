{
	"address": "0xd2344f06ce022a7424619b2af222e71b65824975",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The decompiled solidity code would look something like this:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(uint => uint)) pushers;\n    uint public pusherTracker;\n    \n    function pushers_(address _addr) public view returns (uint, uint) {\n        return (pushers[_addr][0], pushers[_addr][1]);\n    }\n    \n    function rateLimiter_() public pure returns (uint) {\n        return 0x02;\n    }\n    \n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n    \n    function distribute(uint256 percentage) public {\n        require(msg.sender == tx.origin, \"sorry humans only\");\n        require(percentage > 0, \"please pick a percent between 1 and 99\");\n        \n        uint256 amount = address(this).balance;\n        uint256 toDistribute = amount * percentage / 100;\n        \n        require(toDistribute <= amount, \"SafeMath sub failed\");\n        \n        if(pushers_[msg.sender] == (0,0)) {\n            if(block.timestamp <= pusherTracker_()) {\n                if(block.timestamp >= rateLimiter_()) {\n                    balances[msg.sender] -= toDistribute;\n                    pushers[msg.sender][0] = block.timestamp;\n                    pushers[msg.sender][1] += 1;\n                }\n            }\n        }\n    }\n    \n    function() external payable {\n        revert();\n    }\n}\n```\n\nPlease note that this translation is not perfect as the decompiled code is not providing all the necessary information. Specifically, there is a function `func_0966`, `func_09CB`, `func_0A26`, `func_0C21` that is not clear from the decompiled code. I have omitted these from the Solidity as it's unclear what their functionality might be. \n\nAlso, there are some mathematical calculations and conditions in the decompiled code that's hard to translate into Solidity without knowing the original purpose of the code.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473948,
	"id": "chatcmpl-8MvF6NyXB5bNoXi4tpz4VaRqQUeVs",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x1f75c390) {\n            // Dispatch table entry for pushers_(address)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0084;\n            var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var var3;\n            var2, var3 = pushers_(var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var2;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var3;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x40];\n        } else if (var0 == 0x521ceba7) {\n            // Dispatch table entry for pusherTracker_()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00b2;\n            var2 = pusherTracker_();\n        \n        label_00B2:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var2;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n        } else if (var0 == 0x7bb98a68) {\n            // Dispatch table entry for balances()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00b2;\n            var1 = balances();\n            goto label_00B2;\n        } else if (var0 == 0x91c05b0b) {\n            // Dispatch table entry for distribute(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00f1;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = var5;\n            var var7 = var6;\n            var var8 = var7;\n            var var9 = msg.sender;\n            var var10 = var8;\n        \n            if (var9 != tx.origin) { revert(memory[0x00:0x00]); }\n        \n            var10 = address(var9).code.length;\n        \n            if (!var10) {\n                var var11 = var2 > 0x00;\n            \n                if (!var11) {\n                    if (var11) {\n                    label_022E:\n                        var3 = msg.sender;\n                        var4 = address(this).balance;\n                        var var12 = storage[0x00];\n                        var11 = 0x0249;\n                        var var13 = 0x64;\n                        var11 = func_0966(var12, var13);\n                        memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x01;\n                        var11 = storage[keccak256(memory[0x00:0x40])] <= var11;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] <= var11) {\n                        label_029E:\n                        \n                            if (!var11) {\n                                var11 = 0x085f;\n                                var12 = var6;\n                                var13 = 0x01;\n                                var var14 = 0x2f;\n                                var var15 = var14;\n                            \n                            label_0A9D:\n                                var var16 = 0x00;\n                                var var17 = var15 < 0x4d;\n                            \n                                if (!var17) {\n                                    if (var17) {\n                                    label_0B05:\n                                    \n                                        if (var15 >= var14) {\n                                            var17 = 0x0b77;\n                                            var var18 = 0x0a;\n                                            var var19 = 0x0b6b;\n                                            var var20 = var15;\n                                            var var21 = 0x00;\n                                            var var22 = 0x09c5;\n                                            var var23 = 0x0a;\n                                            var var24 = var20;\n                                            var22 = func_0C21(var23, var24);\n                                            var19 = var22;\n                                            // Error: Could not resolve jump destination!\n                                        } else {\n                                            var temp4 = memory[0x40:0x60];\n                                            memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                            memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                                            memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x14;\n                                            memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x656e64206d757374206265203e3d207374617274000000000000000000000000;\n                                            var temp5 = memory[0x40:0x60];\n                                            revert(memory[temp5:temp5 + temp4 - temp5 + 0x64]);\n                                        }\n                                    } else {\n                                    label_0AB6:\n                                        var temp6 = memory[0x40:0x60];\n                                        memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                        memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                                        memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x1e;\n                                        memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x73746172742f656e64206d757374206265206c657373207468616e2037370000;\n                                        var temp7 = memory[0x40:0x60];\n                                        revert(memory[temp7:temp7 + temp6 - temp7 + 0x64]);\n                                    }\n                                } else if (var14 < 0x4d) { goto label_0B05; }\n                                else { goto label_0AB6; }\n                            } else {\n                                var temp8 = storage[0x00];\n                                memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x01;\n                                storage[keccak256(memory[0x00:0x40])] = temp8;\n                                storage[0x00] = temp8 + 0x01;\n                                var temp9 = memory[0x40:0x60];\n                                memory[temp9:temp9 + 0x20] = 0x56d399e800000000000000000000000000000000000000000000000000000000;\n                                var11 = 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                var12 = 0x56d399e8;\n                                var13 = temp9 + 0x04;\n                                var14 = 0x20;\n                                var15 = memory[0x40:0x60];\n                                var16 = temp9 - var15 + 0x04;\n                                var18 = 0x00;\n                                var17 = var15;\n                                var19 = var11;\n                                var20 = !address(var19).code.length;\n                            \n                                if (var20) { revert(memory[0x00:0x00]); }\n                            \n                                var temp10;\n                                temp10, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                var14 = !temp10;\n                            \n                                if (!var14) {\n                                    var11 = memory[0x40:0x60];\n                                    var12 = returndata.length;\n                                \n                                    if (var12 < 0x20) { revert(memory[0x00:0x00]); }\n                                \n                                    var11 = memory[var11:var11 + 0x20];\n                                    var temp11 = memory[0x40:0x60];\n                                    memory[temp11:temp11 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                    memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                                    var12 = 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                    var13 = 0x70a08231;\n                                    var14 = temp11 + 0x24;\n                                    var15 = 0x20;\n                                    var16 = memory[0x40:0x60];\n                                    var17 = temp11 - var16 + 0x24;\n                                    var18 = var16;\n                                    var19 = 0x00;\n                                    var20 = var12;\n                                    var21 = !address(var20).code.length;\n                                \n                                    if (var21) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp12;\n                                    temp12, memory[var16:var16 + var15] = address(var20).call.gas(msg.gas).value(var19)(memory[var18:var18 + var17]);\n                                    var15 = !temp12;\n                                \n                                    if (!var15) {\n                                        var12 = memory[0x40:0x60];\n                                        var13 = returndata.length;\n                                    \n                                        if (var13 < 0x20) { revert(memory[0x00:0x00]); }\n                                    \n                                        if (memory[var12:var12 + 0x20] < var11) {\n                                            var11 = 0x64;\n                                            var12 = 0x041b;\n                                            var13 = var4;\n                                            var14 = var11 - var2;\n                                            var12 = func_0A26(var13, var14);\n                                        \n                                        label_041B:\n                                        \n                                            if (!var11) { assert(); }\n                                        \n                                            var7 = var12 / var11;\n                                            var11 = 0x02 ** 0xa0 - 0x01 & 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                            var12 = 0xf088d547;\n                                            var13 = var4;\n                                            var temp13 = memory[0x40:0x60];\n                                            memory[temp13:temp13 + 0x20] = (var12 & 0xffffffff) * 0x02 ** 0xe0;\n                                            var temp14 = temp13 + 0x04;\n                                            memory[temp14:temp14 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                            var14 = temp14 + 0x20;\n                                            var15 = 0x20;\n                                            var16 = memory[0x40:0x60];\n                                            var17 = var14 - var16;\n                                            var18 = var16;\n                                            var19 = var13;\n                                            var20 = var11;\n                                            var21 = !address(var20).code.length;\n                                        \n                                            if (var21) { revert(memory[0x00:0x00]); }\n                                        \n                                            var temp15;\n                                            temp15, memory[var16:var16 + var15] = address(var20).call.gas(msg.gas).value(var19)(memory[var18:var18 + var17]);\n                                            var15 = !temp15;\n                                        \n                                            if (!var15) {\n                                                var11 = memory[0x40:0x60];\n                                                var12 = returndata.length;\n                                            \n                                                if (var12 < 0x20) { revert(memory[0x00:0x00]); }\n                                            \n                                                var temp16 = memory[0x40:0x60];\n                                                memory[temp16:temp16 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                                memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = address(this);\n                                                var11 = 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                                var12 = 0xe4849b32;\n                                                var13 = var11;\n                                                var14 = 0x70a08231;\n                                                var15 = temp16 + 0x24;\n                                                var16 = 0x20;\n                                                var17 = memory[0x40:0x60];\n                                                var18 = temp16 - var17 + 0x24;\n                                                var19 = var17;\n                                                var20 = 0x00;\n                                                var21 = var13;\n                                                var22 = !address(var21).code.length;\n                                            \n                                                if (var22) { revert(memory[0x00:0x00]); }\n                                            \n                                                var temp17;\n                                                temp17, memory[var17:var17 + var16] = address(var21).call.gas(msg.gas).value(var20)(memory[var19:var19 + var18]);\n                                                var16 = !temp17;\n                                            \n                                                if (!var16) {\n                                                    var13 = memory[0x40:0x60];\n                                                    var14 = returndata.length;\n                                                \n                                                    if (var14 < 0x20) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp18 = memory[var13:var13 + 0x20];\n                                                    var temp19 = memory[0x40:0x60];\n                                                    memory[temp19:temp19 + 0x20] = (var12 & 0xffffffff) * 0x02 ** 0xe0;\n                                                    memory[temp19 + 0x04:temp19 + 0x04 + 0x20] = temp18;\n                                                    var13 = temp19 + 0x24;\n                                                    var14 = 0x00;\n                                                    var15 = memory[0x40:0x60];\n                                                    var16 = temp19 - var15 + 0x24;\n                                                    var17 = var15;\n                                                    var18 = var14;\n                                                    var19 = var11;\n                                                    var20 = !address(var19).code.length;\n                                                \n                                                    if (var20) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp20;\n                                                    temp20, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                                    var14 = !temp20;\n                                                \n                                                    if (!var14) {\n                                                        var temp21 = memory[0x40:0x60];\n                                                        memory[temp21:temp21 + 0x20] = 0x65318b00000000000000000000000000000000000000000000000000000000;\n                                                        memory[temp21 + 0x04:temp21 + 0x04 + 0x20] = address(this);\n                                                        var11 = 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                                        var12 = 0x65318b;\n                                                        var13 = temp21 + 0x24;\n                                                        var14 = 0x20;\n                                                        var15 = memory[0x40:0x60];\n                                                        var16 = temp21 - var15 + 0x24;\n                                                        var17 = var15;\n                                                        var18 = 0x00;\n                                                        var19 = var11;\n                                                        var20 = !address(var19).code.length;\n                                                    \n                                                        if (var20) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp22;\n                                                        temp22, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                                        var14 = !temp22;\n                                                    \n                                                        if (!var14) {\n                                                            var11 = memory[0x40:0x60];\n                                                            var12 = returndata.length;\n                                                        \n                                                            if (var12 < 0x20) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var8 = memory[var11:var11 + 0x20];\n                                                        \n                                                            if (var8 < var7) {\n                                                            label_07DC:\n                                                                var11 = 0x02 ** 0xa0 - 0x01 & 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                                                var12 = 0x3ccfd60b;\n                                                                var temp23 = memory[0x40:0x60];\n                                                                memory[temp23:temp23 + 0x20] = (var12 & 0xffffffff) * 0x02 ** 0xe0;\n                                                                var13 = temp23 + 0x04;\n                                                                var14 = 0x00;\n                                                                var15 = memory[0x40:0x60];\n                                                                var16 = var13 - var15;\n                                                                var17 = var15;\n                                                                var18 = 0x00;\n                                                                var19 = var11;\n                                                                var20 = !address(var19).code.length;\n                                                            \n                                                                if (var20) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var temp24;\n                                                                temp24, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                                                var14 = !temp24;\n                                                            \n                                                                if (!var14) {\n                                                                    memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                                                                    memory[0x20:0x40] = 0x01;\n                                                                    storage[keccak256(memory[0x00:0x40]) + 0x01] = block.timestamp;\n                                                                    var11 = 0x0896;\n                                                                    var12 = var6;\n                                                                    var13 = block.timestamp;\n                                                                    var14 = 0x00;\n                                                                    var15 = 0x0e;\n                                                                    goto label_0A9D;\n                                                                } else {\n                                                                    var temp25 = returndata.length;\n                                                                    memory[0x00:0x00 + temp25] = returndata[0x00:0x00 + temp25];\n                                                                    revert(memory[0x00:0x00 + returndata.length]);\n                                                                }\n                                                            } else {\n                                                            label_0658:\n                                                                var11 = 0x02 ** 0xa0 - 0x01 & 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                                                var12 = 0xfdb5a03e;\n                                                                var temp26 = memory[0x40:0x60];\n                                                                memory[temp26:temp26 + 0x20] = (var12 & 0xffffffff) * 0x02 ** 0xe0;\n                                                                var13 = temp26 + 0x04;\n                                                                var14 = 0x00;\n                                                                var15 = memory[0x40:0x60];\n                                                                var16 = var13 - var15;\n                                                                var17 = var15;\n                                                                var18 = 0x00;\n                                                                var19 = var11;\n                                                                var20 = !address(var19).code.length;\n                                                            \n                                                                if (var20) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var temp27;\n                                                                temp27, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                                                var14 = !temp27;\n                                                            \n                                                                if (!var14) {\n                                                                    var temp28 = memory[0x40:0x60];\n                                                                    memory[temp28:temp28 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                                                    memory[temp28 + 0x04:temp28 + 0x04 + 0x20] = address(this);\n                                                                    var11 = 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                                                    var12 = 0xe4849b32;\n                                                                    var13 = var11;\n                                                                    var14 = 0x70a08231;\n                                                                    var15 = temp28 + 0x24;\n                                                                    var16 = 0x20;\n                                                                    var17 = memory[0x40:0x60];\n                                                                    var18 = temp28 - var17 + 0x24;\n                                                                    var19 = var17;\n                                                                    var20 = 0x00;\n                                                                    var21 = var13;\n                                                                    var22 = !address(var21).code.length;\n                                                                \n                                                                    if (var22) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp29;\n                                                                    temp29, memory[var17:var17 + var16] = address(var21).call.gas(msg.gas).value(var20)(memory[var19:var19 + var18]);\n                                                                    var16 = !temp29;\n                                                                \n                                                                    if (!var16) {\n                                                                        var13 = memory[0x40:0x60];\n                                                                        var14 = returndata.length;\n                                                                    \n                                                                        if (var14 < 0x20) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp30 = memory[var13:var13 + 0x20];\n                                                                        var temp31 = memory[0x40:0x60];\n                                                                        memory[temp31:temp31 + 0x20] = (var12 & 0xffffffff) * 0x02 ** 0xe0;\n                                                                        memory[temp31 + 0x04:temp31 + 0x04 + 0x20] = temp30;\n                                                                        var13 = temp31 + 0x24;\n                                                                        var14 = 0x00;\n                                                                        var15 = memory[0x40:0x60];\n                                                                        var16 = temp31 - var15 + 0x24;\n                                                                        var17 = var15;\n                                                                        var18 = var14;\n                                                                        var19 = var11;\n                                                                        var20 = !address(var19).code.length;\n                                                                    \n                                                                        if (var20) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp32;\n                                                                        temp32, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                                                        var14 = !temp32;\n                                                                    \n                                                                        if (!var14) {\n                                                                            var11 = 0x64;\n                                                                            var12 = 0x07cb;\n                                                                            var13 = var8;\n                                                                            var14 = 0x51;\n                                                                            var12 = func_0A26(var13, var14);\n                                                                        \n                                                                            if (!var11) { assert(); }\n                                                                        \n                                                                            var8 = var12 / var11;\n                                                                        \n                                                                            if (var8 < var7) { goto label_07DC; }\n                                                                            else { goto label_0658; }\n                                                                        } else {\n                                                                            var temp33 = returndata.length;\n                                                                            memory[0x00:0x00 + temp33] = returndata[0x00:0x00 + temp33];\n                                                                            revert(memory[0x00:0x00 + returndata.length]);\n                                                                        }\n                                                                    } else {\n                                                                        var temp34 = returndata.length;\n                                                                        memory[0x00:0x00 + temp34] = returndata[0x00:0x00 + temp34];\n                                                                        revert(memory[0x00:0x00 + returndata.length]);\n                                                                    }\n                                                                } else {\n                                                                    var temp35 = returndata.length;\n                                                                    memory[0x00:0x00 + temp35] = returndata[0x00:0x00 + temp35];\n                                                                    revert(memory[0x00:0x00 + returndata.length]);\n                                                                }\n                                                            }\n                                                        } else {\n                                                            var temp36 = returndata.length;\n                                                            memory[0x00:0x00 + temp36] = returndata[0x00:0x00 + temp36];\n                                                            revert(memory[0x00:0x00 + returndata.length]);\n                                                        }\n                                                    } else {\n                                                        var temp37 = returndata.length;\n                                                        memory[0x00:0x00 + temp37] = returndata[0x00:0x00 + temp37];\n                                                        revert(memory[0x00:0x00 + returndata.length]);\n                                                    }\n                                                } else {\n                                                    var temp38 = returndata.length;\n                                                    memory[0x00:0x00 + temp38] = returndata[0x00:0x00 + temp38];\n                                                    revert(memory[0x00:0x00 + returndata.length]);\n                                                }\n                                            } else {\n                                                var temp39 = returndata.length;\n                                                memory[0x00:0x00 + temp39] = returndata[0x00:0x00 + temp39];\n                                                revert(memory[0x00:0x00 + returndata.length]);\n                                            }\n                                        } else {\n                                            var5 = var4 / 0x0a / 0x03;\n                                            var11 = 0x64;\n                                            var12 = 0x041b;\n                                            var13 = var4;\n                                            var14 = var11 - var2;\n                                            var12 = func_0A26(var13, var14);\n                                            goto label_041B;\n                                        }\n                                    } else {\n                                        var temp40 = returndata.length;\n                                        memory[0x00:0x00 + temp40] = returndata[0x00:0x00 + temp40];\n                                        revert(memory[0x00:0x00 + returndata.length]);\n                                    }\n                                } else {\n                                    var temp41 = returndata.length;\n                                    memory[0x00:0x00 + temp41] = returndata[0x00:0x00 + temp41];\n                                    revert(memory[0x00:0x00 + returndata.length]);\n                                }\n                            }\n                        } else {\n                            memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x01;\n                            var11 = block.timestamp;\n                            var12 = 0x029c;\n                            var13 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n                            var14 = 0x0e10;\n                            var12 = func_09CB(var13, var14);\n                            var11 = var12 < var11;\n                            goto label_029E;\n                        }\n                    } else {\n                    label_01B9:\n                        var temp42 = memory[0x40:0x60];\n                        memory[temp42:temp42 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp42 + 0x04:temp42 + 0x04 + 0x20] = 0x20;\n                        memory[temp42 + 0x24:temp42 + 0x24 + 0x20] = 0x26;\n                        memory[temp42 + 0x44:temp42 + 0x44 + 0x20] = 0x706c65617365207069636b20612070657263656e74206265747765656e203120;\n                        memory[temp42 + 0x64:temp42 + 0x64 + 0x20] = 0x616e642039390000000000000000000000000000000000000000000000000000;\n                        var temp43 = memory[0x40:0x60];\n                        revert(memory[temp43:temp43 + temp42 - temp43 + 0x84]);\n                    }\n                } else if (var2 < 0x64) { goto label_022E; }\n                else { goto label_01B9; }\n            } else {\n                var temp44 = memory[0x40:0x60];\n                memory[temp44:temp44 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp44 + 0x04:temp44 + 0x04 + 0x20] = 0x20;\n                memory[temp44 + 0x24:temp44 + 0x24 + 0x20] = 0x11;\n                memory[temp44 + 0x44:temp44 + 0x44 + 0x20] = 0x736f7272792068756d616e73206f6e6c79000000000000000000000000000000;\n                var temp45 = memory[0x40:0x60];\n                revert(memory[temp45:temp45 + temp44 - temp45 + 0x64]);\n            }\n        } else if (var0 == 0xb519cf31) {\n            // Dispatch table entry for rateLimiter_()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00b2;\n            var2 = rateLimiter_();\n            goto label_00B2;\n        } else if (var0 == 0xd0e30db0) {\n            // Dispatch table entry for deposit()\n            var1 = 0x00f1;\n            deposit();\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function pushers_(var arg0) returns (var arg0, var r1) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        r1 = storage[temp0 + 0x01];\n        return arg0, r1;\n    }\n    \n    function pusherTracker_() returns (var r0) { return storage[0x00]; }\n    \n    function balances() returns (var r0) { return address(this).balance; }\n    \n    function rateLimiter_() returns (var r0) { return storage[0x02]; }\n    \n    function deposit() {}\n    \n    function func_0966(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x13;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x536166654d61746820737562206661696c656400000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n    }\n    \n    function func_09CB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 + temp0;\n    \n        if (var0 >= temp0) { return var0; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x13;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d61746820616464206661696c656400000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_0A26(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) {\n            var temp0 = arg0;\n            var0 = arg1 * temp0;\n            var var1 = arg1;\n            var var2 = temp0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            if (var3 / var2 == var1) {\n            label_09C5:\n                return var0;\n            } else {\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n                memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x13;\n                memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d617468206d756c206661696c656400000000000000000000000000;\n                var temp2 = memory[0x40:0x60];\n                revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_09C5;\n        }\n    }\n    \n    function func_0C21(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (!arg0) {\n            var0 = 0x00;\n            goto label_0C6C;\n        } else if (arg1) {\n            var1 = arg0;\n            var2 = 0x01;\n        \n            if (var2 >= arg1) {\n            label_0C68:\n                var0 = var1;\n            \n            label_0C6C:\n                return var0;\n            } else {\n            label_0C55:\n                var var3 = 0x0c5e;\n                var var4 = var1;\n                var var5 = arg0;\n                var3 = func_0A26(var4, var5);\n                var1 = var3;\n                var2 = var2 + 0x01;\n            \n                if (var2 >= arg1) { goto label_0C68; }\n                else { goto label_0C55; }\n            }\n        } else {\n            var0 = 0x01;\n            goto label_0C6C;\n        }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x1f75c390) {\n            // Dispatch table entry for pushers_(address)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0084;\n            var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var var3;\n            var2, var3 = pushers_(var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var2;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var3;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x40];\n        } else if (var0 == 0x521ceba7) {\n            // Dispatch table entry for pusherTracker_()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00b2;\n            var2 = pusherTracker_();\n        \n        label_00B2:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var2;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n        } else if (var0 == 0x7bb98a68) {\n            // Dispatch table entry for balances()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00b2;\n            var1 = balances();\n            goto label_00B2;\n        } else if (var0 == 0x91c05b0b) {\n            // Dispatch table entry for distribute(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00f1;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = var5;\n            var var7 = var6;\n            var var8 = var7;\n            var var9 = msg.sender;\n            var var10 = var8;\n        \n            if (var9 != tx.origin) { revert(memory[0x00:0x00]); }\n        \n            var10 = address(var9).code.length;\n        \n            if (!var10) {\n                var var11 = var2 > 0x00;\n            \n                if (!var11) {\n                    if (var11) {\n                    label_022E:\n                        var3 = msg.sender;\n                        var4 = address(this).balance;\n                        var var12 = storage[0x00];\n                        var11 = 0x0249;\n                        var var13 = 0x64;\n                        var11 = func_0966(var12, var13);\n                        memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x01;\n                        var11 = storage[keccak256(memory[0x00:0x40])] <= var11;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] <= var11) {\n                        label_029E:\n                        \n                            if (!var11) {\n                                var11 = 0x085f;\n                                var12 = var6;\n                                var13 = 0x01;\n                                var var14 = 0x2f;\n                                var var15 = var14;\n                            \n                            label_0A9D:\n                                var var16 = 0x00;\n                                var var17 = var15 < 0x4d;\n                            \n                                if (!var17) {\n                                    if (var17) {\n                                    label_0B05:\n                                    \n                                        if (var15 >= var14) {\n                                            var17 = 0x0b77;\n                                            var var18 = 0x0a;\n                                            var var19 = 0x0b6b;\n                                            var var20 = var15;\n                                            var var21 = 0x00;\n                                            var var22 = 0x09c5;\n                                            var var23 = 0x0a;\n                                            var var24 = var20;\n                                            var22 = func_0C21(var23, var24);\n                                            var19 = var22;\n                                            // Error: Could not resolve jump destination!\n                                        } else {\n                                            var temp4 = memory[0x40:0x60];\n                                            memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                            memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                                            memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x14;\n                                            memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x656e64206d757374206265203e3d207374617274000000000000000000000000;\n                                            var temp5 = memory[0x40:0x60];\n                                            revert(memory[temp5:temp5 + temp4 - temp5 + 0x64]);\n                                        }\n                                    } else {\n                                    label_0AB6:\n                                        var temp6 = memory[0x40:0x60];\n                                        memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                        memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                                        memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x1e;\n                                        memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x73746172742f656e64206d757374206265206c657373207468616e2037370000;\n                                        var temp7 = memory[0x40:0x60];\n                                        revert(memory[temp7:temp7 + temp6 - temp7 + 0x64]);\n                                    }\n                                } else if (var14 < 0x4d) { goto label_0B05; }\n                                else { goto label_0AB6; }\n                            } else {\n                                var temp8 = storage[0x00];\n                                memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x01;\n                                storage[keccak256(memory[0x00:0x40])] = temp8;\n                                storage[0x00] = temp8 + 0x01;\n                                var temp9 = memory[0x40:0x60];\n                                memory[temp9:temp9 + 0x20] = 0x56d399e800000000000000000000000000000000000000000000000000000000;\n                                var11 = 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                var12 = 0x56d399e8;\n                                var13 = temp9 + 0x04;\n                                var14 = 0x20;\n                                var15 = memory[0x40:0x60];\n                                var16 = temp9 - var15 + 0x04;\n                                var18 = 0x00;\n                                var17 = var15;\n                                var19 = var11;\n                                var20 = !address(var19).code.length;\n                            \n                                if (var20) { revert(memory[0x00:0x00]); }\n                            \n                                var temp10;\n                                temp10, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                var14 = !temp10;\n                            \n                                if (!var14) {\n                                    var11 = memory[0x40:0x60];\n                                    var12 = returndata.length;\n                                \n                                    if (var12 < 0x20) { revert(memory[0x00:0x00]); }\n                                \n                                    var11 = memory[var11:var11 + 0x20];\n                                    var temp11 = memory[0x40:0x60];\n                                    memory[temp11:temp11 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                    memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                                    var12 = 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                    var13 = 0x70a08231;\n                                    var14 = temp11 + 0x24;\n                                    var15 = 0x20;\n                                    var16 = memory[0x40:0x60];\n                                    var17 = temp11 - var16 + 0x24;\n                                    var18 = var16;\n                                    var19 = 0x00;\n                                    var20 = var12;\n                                    var21 = !address(var20).code.length;\n                                \n                                    if (var21) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp12;\n                                    temp12, memory[var16:var16 + var15] = address(var20).call.gas(msg.gas).value(var19)(memory[var18:var18 + var17]);\n                                    var15 = !temp12;\n                                \n                                    if (!var15) {\n                                        var12 = memory[0x40:0x60];\n                                        var13 = returndata.length;\n                                    \n                                        if (var13 < 0x20) { revert(memory[0x00:0x00]); }\n                                    \n                                        if (memory[var12:var12 + 0x20] < var11) {\n                                            var11 = 0x64;\n                                            var12 = 0x041b;\n                                            var13 = var4;\n                                            var14 = var11 - var2;\n                                            var12 = func_0A26(var13, var14);\n                                        \n                                        label_041B:\n                                        \n                                            if (!var11) { assert(); }\n                                        \n                                            var7 = var12 / var11;\n                                            var11 = 0x02 ** 0xa0 - 0x01 & 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                            var12 = 0xf088d547;\n                                            var13 = var4;\n                                            var temp13 = memory[0x40:0x60];\n                                            memory[temp13:temp13 + 0x20] = (var12 & 0xffffffff) * 0x02 ** 0xe0;\n                                            var temp14 = temp13 + 0x04;\n                                            memory[temp14:temp14 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                            var14 = temp14 + 0x20;\n                                            var15 = 0x20;\n                                            var16 = memory[0x40:0x60];\n                                            var17 = var14 - var16;\n                                            var18 = var16;\n                                            var19 = var13;\n                                            var20 = var11;\n                                            var21 = !address(var20).code.length;\n                                        \n                                            if (var21) { revert(memory[0x00:0x00]); }\n                                        \n                                            var temp15;\n                                            temp15, memory[var16:var16 + var15] = address(var20).call.gas(msg.gas).value(var19)(memory[var18:var18 + var17]);\n                                            var15 = !temp15;\n                                        \n                                            if (!var15) {\n                                                var11 = memory[0x40:0x60];\n                                                var12 = returndata.length;\n                                            \n                                                if (var12 < 0x20) { revert(memory[0x00:0x00]); }\n                                            \n                                                var temp16 = memory[0x40:0x60];\n                                                memory[temp16:temp16 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                                memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = address(this);\n                                                var11 = 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                                var12 = 0xe4849b32;\n                                                var13 = var11;\n                                                var14 = 0x70a08231;\n                                                var15 = temp16 + 0x24;\n                                                var16 = 0x20;\n                                                var17 = memory[0x40:0x60];\n                                                var18 = temp16 - var17 + 0x24;\n                                                var19 = var17;\n                                                var20 = 0x00;\n                                                var21 = var13;\n                                                var22 = !address(var21).code.length;\n                                            \n                                                if (var22) { revert(memory[0x00:0x00]); }\n                                            \n                                                var temp17;\n                                                temp17, memory[var17:var17 + var16] = address(var21).call.gas(msg.gas).value(var20)(memory[var19:var19 + var18]);\n                                                var16 = !temp17;\n                                            \n                                                if (!var16) {\n                                                    var13 = memory[0x40:0x60];\n                                                    var14 = returndata.length;\n                                                \n                                                    if (var14 < 0x20) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp18 = memory[var13:var13 + 0x20];\n                                                    var temp19 = memory[0x40:0x60];\n                                                    memory[temp19:temp19 + 0x20] = (var12 & 0xffffffff) * 0x02 ** 0xe0;\n                                                    memory[temp19 + 0x04:temp19 + 0x04 + 0x20] = temp18;\n                                                    var13 = temp19 + 0x24;\n                                                    var14 = 0x00;\n                                                    var15 = memory[0x40:0x60];\n                                                    var16 = temp19 - var15 + 0x24;\n                                                    var17 = var15;\n                                                    var18 = var14;\n                                                    var19 = var11;\n                                                    var20 = !address(var19).code.length;\n                                                \n                                                    if (var20) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp20;\n                                                    temp20, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                                    var14 = !temp20;\n                                                \n                                                    if (!var14) {\n                                                        var temp21 = memory[0x40:0x60];\n                                                        memory[temp21:temp21 + 0x20] = 0x65318b00000000000000000000000000000000000000000000000000000000;\n                                                        memory[temp21 + 0x04:temp21 + 0x04 + 0x20] = address(this);\n                                                        var11 = 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                                        var12 = 0x65318b;\n                                                        var13 = temp21 + 0x24;\n                                                        var14 = 0x20;\n                                                        var15 = memory[0x40:0x60];\n                                                        var16 = temp21 - var15 + 0x24;\n                                                        var17 = var15;\n                                                        var18 = 0x00;\n                                                        var19 = var11;\n                                                        var20 = !address(var19).code.length;\n                                                    \n                                                        if (var20) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp22;\n                                                        temp22, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                                        var14 = !temp22;\n                                                    \n                                                        if (!var14) {\n                                                            var11 = memory[0x40:0x60];\n                                                            var12 = returndata.length;\n                                                        \n                                                            if (var12 < 0x20) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var8 = memory[var11:var11 + 0x20];\n                                                        \n                                                            if (var8 < var7) {\n                                                            label_07DC:\n                                                                var11 = 0x02 ** 0xa0 - 0x01 & 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                                                var12 = 0x3ccfd60b;\n                                                                var temp23 = memory[0x40:0x60];\n                                                                memory[temp23:temp23 + 0x20] = (var12 & 0xffffffff) * 0x02 ** 0xe0;\n                                                                var13 = temp23 + 0x04;\n                                                                var14 = 0x00;\n                                                                var15 = memory[0x40:0x60];\n                                                                var16 = var13 - var15;\n                                                                var17 = var15;\n                                                                var18 = 0x00;\n                                                                var19 = var11;\n                                                                var20 = !address(var19).code.length;\n                                                            \n                                                                if (var20) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var temp24;\n                                                                temp24, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                                                var14 = !temp24;\n                                                            \n                                                                if (!var14) {\n                                                                    memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                                                                    memory[0x20:0x40] = 0x01;\n                                                                    storage[keccak256(memory[0x00:0x40]) + 0x01] = block.timestamp;\n                                                                    var11 = 0x0896;\n                                                                    var12 = var6;\n                                                                    var13 = block.timestamp;\n                                                                    var14 = 0x00;\n                                                                    var15 = 0x0e;\n                                                                    goto label_0A9D;\n                                                                } else {\n                                                                    var temp25 = returndata.length;\n                                                                    memory[0x00:0x00 + temp25] = returndata[0x00:0x00 + temp25];\n                                                                    revert(memory[0x00:0x00 + returndata.length]);\n                                                                }\n                                                            } else {\n                                                            label_0658:\n                                                                var11 = 0x02 ** 0xa0 - 0x01 & 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                                                var12 = 0xfdb5a03e;\n                                                                var temp26 = memory[0x40:0x60];\n                                                                memory[temp26:temp26 + 0x20] = (var12 & 0xffffffff) * 0x02 ** 0xe0;\n                                                                var13 = temp26 + 0x04;\n                                                                var14 = 0x00;\n                                                                var15 = memory[0x40:0x60];\n                                                                var16 = var13 - var15;\n                                                                var17 = var15;\n                                                                var18 = 0x00;\n                                                                var19 = var11;\n                                                                var20 = !address(var19).code.length;\n                                                            \n                                                                if (var20) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var temp27;\n                                                                temp27, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                                                var14 = !temp27;\n                                                            \n                                                                if (!var14) {\n                                                                    var temp28 = memory[0x40:0x60];\n                                                                    memory[temp28:temp28 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                                                    memory[temp28 + 0x04:temp28 + 0x04 + 0x20] = address(this);\n                                                                    var11 = 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                                                    var12 = 0xe4849b32;\n                                                                    var13 = var11;\n                                                                    var14 = 0x70a08231;\n                                                                    var15 = temp28 + 0x24;\n                                                                    var16 = 0x20;\n                                                                    var17 = memory[0x40:0x60];\n                                                                    var18 = temp28 - var17 + 0x24;\n                                                                    var19 = var17;\n                                                                    var20 = 0x00;\n                                                                    var21 = var13;\n                                                                    var22 = !address(var21).code.length;\n                                                                \n                                                                    if (var22) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp29;\n                                                                    temp29, memory[var17:var17 + var16] = address(var21).call.gas(msg.gas).value(var20)(memory[var19:var19 + var18]);\n                                                                    var16 = !temp29;\n                                                                \n                                                                    if (!var16) {\n                                                                        var13 = memory[0x40:0x60];\n                                                                        var14 = returndata.length;\n                                                                    \n                                                                        if (var14 < 0x20) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp30 = memory[var13:var13 + 0x20];\n                                                                        var temp31 = memory[0x40:0x60];\n                                                                        memory[temp31:temp31 + 0x20] = (var12 & 0xffffffff) * 0x02 ** 0xe0;\n                                                                        memory[temp31 + 0x04:temp31 + 0x04 + 0x20] = temp30;\n                                                                        var13 = temp31 + 0x24;\n                                                                        var14 = 0x00;\n                                                                        var15 = memory[0x40:0x60];\n                                                                        var16 = temp31 - var15 + 0x24;\n                                                                        var17 = var15;\n                                                                        var18 = var14;\n                                                                        var19 = var11;\n                                                                        var20 = !address(var19).code.length;\n                                                                    \n                                                                        if (var20) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp32;\n                                                                        temp32, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                                                        var14 = !temp32;\n                                                                    \n                                                                        if (!var14) {\n                                                                            var11 = 0x64;\n                                                                            var12 = 0x07cb;\n                                                                            var13 = var8;\n                                                                            var14 = 0x51;\n                                                                            var12 = func_0A26(var13, var14);\n                                                                        \n                                                                            if (!var11) { assert(); }\n                                                                        \n                                                                            var8 = var12 / var11;\n                                                                        \n                                                                            if (var8 < var7) { goto label_07DC; }\n                                                                            else { goto label_0658; }\n                                                                        } else {\n                                                                            var temp33 = returndata.length;\n                                                                            memory[0x00:0x00 + temp33] = returndata[0x00:0x00 + temp33];\n                                                                            revert(memory[0x00:0x00 + returndata.length]);\n                                                                        }\n                                                                    } else {\n                                                                        var temp34 = returndata.length;\n                                                                        memory[0x00:0x00 + temp34] = returndata[0x00:0x00 + temp34];\n                                                                        revert(memory[0x00:0x00 + returndata.length]);\n                                                                    }\n                                                                } else {\n                                                                    var temp35 = returndata.length;\n                                                                    memory[0x00:0x00 + temp35] = returndata[0x00:0x00 + temp35];\n                                                                    revert(memory[0x00:0x00 + returndata.length]);\n                                                                }\n                                                            }\n                                                        } else {\n                                                            var temp36 = returndata.length;\n                                                            memory[0x00:0x00 + temp36] = returndata[0x00:0x00 + temp36];\n                                                            revert(memory[0x00:0x00 + returndata.length]);\n                                                        }\n                                                    } else {\n                                                        var temp37 = returndata.length;\n                                                        memory[0x00:0x00 + temp37] = returndata[0x00:0x00 + temp37];\n                                                        revert(memory[0x00:0x00 + returndata.length]);\n                                                    }\n                                                } else {\n                                                    var temp38 = returndata.length;\n                                                    memory[0x00:0x00 + temp38] = returndata[0x00:0x00 + temp38];\n                                                    revert(memory[0x00:0x00 + returndata.length]);\n                                                }\n                                            } else {\n                                                var temp39 = returndata.length;\n                                                memory[0x00:0x00 + temp39] = returndata[0x00:0x00 + temp39];\n                                                revert(memory[0x00:0x00 + returndata.length]);\n                                            }\n                                        } else {\n                                            var5 = var4 / 0x0a / 0x03;\n                                            var11 = 0x64;\n                                            var12 = 0x041b;\n                                            var13 = var4;\n                                            var14 = var11 - var2;\n                                            var12 = func_0A26(var13, var14);\n                                            goto label_041B;\n                                        }\n                                    } else {\n                                        var temp40 = returndata.length;\n                                        memory[0x00:0x00 + temp40] = returndata[0x00:0x00 + temp40];\n                                        revert(memory[0x00:0x00 + returndata.length]);\n                                    }\n                                } else {\n                                    var temp41 = returndata.length;\n                                    memory[0x00:0x00 + temp41] = returndata[0x00:0x00 + temp41];\n                                    revert(memory[0x00:0x00 + returndata.length]);\n                                }\n                            }\n                        } else {\n                            memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x01;\n                            var11 = block.timestamp;\n                            var12 = 0x029c;\n                            var13 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n                            var14 = 0x0e10;\n                            var12 = func_09CB(var13, var14);\n                            var11 = var12 < var11;\n                            goto label_029E;\n                        }\n                    } else {\n                    label_01B9:\n                        var temp42 = memory[0x40:0x60];\n                        memory[temp42:temp42 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp42 + 0x04:temp42 + 0x04 + 0x20] = 0x20;\n                        memory[temp42 + 0x24:temp42 + 0x24 + 0x20] = 0x26;\n                        memory[temp42 + 0x44:temp42 + 0x44 + 0x20] = 0x706c65617365207069636b20612070657263656e74206265747765656e203120;\n                        memory[temp42 + 0x64:temp42 + 0x64 + 0x20] = 0x616e642039390000000000000000000000000000000000000000000000000000;\n                        var temp43 = memory[0x40:0x60];\n                        revert(memory[temp43:temp43 + temp42 - temp43 + 0x84]);\n                    }\n                } else if (var2 < 0x64) { goto label_022E; }\n                else { goto label_01B9; }\n            } else {\n                var temp44 = memory[0x40:0x60];\n                memory[temp44:temp44 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp44 + 0x04:temp44 + 0x04 + 0x20] = 0x20;\n                memory[temp44 + 0x24:temp44 + 0x24 + 0x20] = 0x11;\n                memory[temp44 + 0x44:temp44 + 0x44 + 0x20] = 0x736f7272792068756d616e73206f6e6c79000000000000000000000000000000;\n                var temp45 = memory[0x40:0x60];\n                revert(memory[temp45:temp45 + temp44 - temp45 + 0x64]);\n            }\n        } else if (var0 == 0xb519cf31) {\n            // Dispatch table entry for rateLimiter_()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00b2;\n            var2 = rateLimiter_();\n            goto label_00B2;\n        } else if (var0 == 0xd0e30db0) {\n            // Dispatch table entry for deposit()\n            var1 = 0x00f1;\n            deposit();\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function pushers_(var arg0) returns (var arg0, var r1) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        r1 = storage[temp0 + 0x01];\n        return arg0, r1;\n    }\n    \n    function pusherTracker_() returns (var r0) { return storage[0x00]; }\n    \n    function balances() returns (var r0) { return address(this).balance; }\n    \n    function rateLimiter_() returns (var r0) { return storage[0x02]; }\n    \n    function deposit() {}\n    \n    function func_0966(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x13;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x536166654d61746820737562206661696c656400000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n    }\n    \n    function func_09CB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 + temp0;\n    \n        if (var0 >= temp0) { return var0; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x13;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d61746820616464206661696c656400000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_0A26(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) {\n            var temp0 = arg0;\n            var0 = arg1 * temp0;\n            var var1 = arg1;\n            var var2 = temp0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            if (var3 / var2 == var1) {\n            label_09C5:\n                return var0;\n            } else {\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n                memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x13;\n                memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d617468206d756c206661696c656400000000000000000000000000;\n                var temp2 = memory[0x40:0x60];\n                revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_09C5;\n        }\n    }\n    \n    function func_0C21(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (!arg0) {\n            var0 = 0x00;\n            goto label_0C6C;\n        } else if (arg1) {\n            var1 = arg0;\n            var2 = 0x01;\n        \n            if (var2 >= arg1) {\n            label_0C68:\n                var0 = var1;\n            \n            label_0C6C:\n                return var0;\n            } else {\n            label_0C55:\n                var var3 = 0x0c5e;\n                var var4 = var1;\n                var var5 = arg0;\n                var3 = func_0A26(var4, var5);\n                var1 = var3;\n                var2 = var2 + 0x01;\n            \n                if (var2 >= arg1) { goto label_0C68; }\n                else { goto label_0C55; }\n            }\n        } else {\n            var0 = 0x01;\n            goto label_0C6C;\n        }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x1f75c390) {\n            // Dispatch table entry for pushers_(address)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0084;\n            var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var var3;\n            var2, var3 = pushers_(var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var2;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var3;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x40];\n        } else if (var0 == 0x521ceba7) {\n            // Dispatch table entry for pusherTracker_()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00b2;\n            var2 = pusherTracker_();\n        \n        label_00B2:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var2;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n        } else if (var0 == 0x7bb98a68) {\n            // Dispatch table entry for balances()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00b2;\n            var1 = balances();\n            goto label_00B2;\n        } else if (var0 == 0x91c05b0b) {\n            // Dispatch table entry for distribute(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00f1;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = var5;\n            var var7 = var6;\n            var var8 = var7;\n            var var9 = msg.sender;\n            var var10 = var8;\n        \n            if (var9 != tx.origin) { revert(memory[0x00:0x00]); }\n        \n            var10 = address(var9).code.length;\n        \n            if (!var10) {\n                var var11 = var2 > 0x00;\n            \n                if (!var11) {\n                    if (var11) {\n                    label_022E:\n                        var3 = msg.sender;\n                        var4 = address(this).balance;\n                        var var12 = storage[0x00];\n                        var11 = 0x0249;\n                        var var13 = 0x64;\n                        var11 = func_0966(var12, var13);\n                        memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x01;\n                        var11 = storage[keccak256(memory[0x00:0x40])] <= var11;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] <= var11) {\n                        label_029E:\n                        \n                            if (!var11) {\n                                var11 = 0x085f;\n                                var12 = var6;\n                                var13 = 0x01;\n                                var var14 = 0x2f;\n                                var var15 = var14;\n                            \n                            label_0A9D:\n                                var var16 = 0x00;\n                                var var17 = var15 < 0x4d;\n                            \n                                if (!var17) {\n                                    if (var17) {\n                                    label_0B05:\n                                    \n                                        if (var15 >= var14) {\n                                            var17 = 0x0b77;\n                                            var var18 = 0x0a;\n                                            var var19 = 0x0b6b;\n                                            var var20 = var15;\n                                            var var21 = 0x00;\n                                            var var22 = 0x09c5;\n                                            var var23 = 0x0a;\n                                            var var24 = var20;\n                                            var22 = func_0C21(var23, var24);\n                                            var19 = var22;\n                                            // Error: Could not resolve jump destination!\n                                        } else {\n                                            var temp4 = memory[0x40:0x60];\n                                            memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                            memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                                            memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x14;\n                                            memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x656e64206d757374206265203e3d207374617274000000000000000000000000;\n                                            var temp5 = memory[0x40:0x60];\n                                            revert(memory[temp5:temp5 + temp4 - temp5 + 0x64]);\n                                        }\n                                    } else {\n                                    label_0AB6:\n                                        var temp6 = memory[0x40:0x60];\n                                        memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                        memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                                        memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x1e;\n                                        memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x73746172742f656e64206d757374206265206c657373207468616e2037370000;\n                                        var temp7 = memory[0x40:0x60];\n                                        revert(memory[temp7:temp7 + temp6 - temp7 + 0x64]);\n                                    }\n                                } else if (var14 < 0x4d) { goto label_0B05; }\n                                else { goto label_0AB6; }\n                            } else {\n                                var temp8 = storage[0x00];\n                                memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x01;\n                                storage[keccak256(memory[0x00:0x40])] = temp8;\n                                storage[0x00] = temp8 + 0x01;\n                                var temp9 = memory[0x40:0x60];\n                                memory[temp9:temp9 + 0x20] = 0x56d399e800000000000000000000000000000000000000000000000000000000;\n                                var11 = 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                var12 = 0x56d399e8;\n                                var13 = temp9 + 0x04;\n                                var14 = 0x20;\n                                var15 = memory[0x40:0x60];\n                                var16 = temp9 - var15 + 0x04;\n                                var18 = 0x00;\n                                var17 = var15;\n                                var19 = var11;\n                                var20 = !address(var19).code.length;\n                            \n                                if (var20) { revert(memory[0x00:0x00]); }\n                            \n                                var temp10;\n                                temp10, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                var14 = !temp10;\n                            \n                                if (!var14) {\n                                    var11 = memory[0x40:0x60];\n                                    var12 = returndata.length;\n                                \n                                    if (var12 < 0x20) { revert(memory[0x00:0x00]); }\n                                \n                                    var11 = memory[var11:var11 + 0x20];\n                                    var temp11 = memory[0x40:0x60];\n                                    memory[temp11:temp11 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                    memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                                    var12 = 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                    var13 = 0x70a08231;\n                                    var14 = temp11 + 0x24;\n                                    var15 = 0x20;\n                                    var16 = memory[0x40:0x60];\n                                    var17 = temp11 - var16 + 0x24;\n                                    var18 = var16;\n                                    var19 = 0x00;\n                                    var20 = var12;\n                                    var21 = !address(var20).code.length;\n                                \n                                    if (var21) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp12;\n                                    temp12, memory[var16:var16 + var15] = address(var20).call.gas(msg.gas).value(var19)(memory[var18:var18 + var17]);\n                                    var15 = !temp12;\n                                \n                                    if (!var15) {\n                                        var12 = memory[0x40:0x60];\n                                        var13 = returndata.length;\n                                    \n                                        if (var13 < 0x20) { revert(memory[0x00:0x00]); }\n                                    \n                                        if (memory[var12:var12 + 0x20] < var11) {\n                                            var11 = 0x64;\n                                            var12 = 0x041b;\n                                            var13 = var4;\n                                            var14 = var11 - var2;\n                                            var12 = func_0A26(var13, var14);\n                                        \n                                        label_041B:\n                                        \n                                            if (!var11) { assert(); }\n                                        \n                                            var7 = var12 / var11;\n                                            var11 = 0x02 ** 0xa0 - 0x01 & 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                            var12 = 0xf088d547;\n                                            var13 = var4;\n                                            var temp13 = memory[0x40:0x60];\n                                            memory[temp13:temp13 + 0x20] = (var12 & 0xffffffff) * 0x02 ** 0xe0;\n                                            var temp14 = temp13 + 0x04;\n                                            memory[temp14:temp14 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                            var14 = temp14 + 0x20;\n                                            var15 = 0x20;\n                                            var16 = memory[0x40:0x60];\n                                            var17 = var14 - var16;\n                                            var18 = var16;\n                                            var19 = var13;\n                                            var20 = var11;\n                                            var21 = !address(var20).code.length;\n                                        \n                                            if (var21) { revert(memory[0x00:0x00]); }\n                                        \n                                            var temp15;\n                                            temp15, memory[var16:var16 + var15] = address(var20).call.gas(msg.gas).value(var19)(memory[var18:var18 + var17]);\n                                            var15 = !temp15;\n                                        \n                                            if (!var15) {\n                                                var11 = memory[0x40:0x60];\n                                                var12 = returndata.length;\n                                            \n                                                if (var12 < 0x20) { revert(memory[0x00:0x00]); }\n                                            \n                                                var temp16 = memory[0x40:0x60];\n                                                memory[temp16:temp16 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                                memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = address(this);\n                                                var11 = 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                                var12 = 0xe4849b32;\n                                                var13 = var11;\n                                                var14 = 0x70a08231;\n                                                var15 = temp16 + 0x24;\n                                                var16 = 0x20;\n                                                var17 = memory[0x40:0x60];\n                                                var18 = temp16 - var17 + 0x24;\n                                                var19 = var17;\n                                                var20 = 0x00;\n                                                var21 = var13;\n                                                var22 = !address(var21).code.length;\n                                            \n                                                if (var22) { revert(memory[0x00:0x00]); }\n                                            \n                                                var temp17;\n                                                temp17, memory[var17:var17 + var16] = address(var21).call.gas(msg.gas).value(var20)(memory[var19:var19 + var18]);\n                                                var16 = !temp17;\n                                            \n                                                if (!var16) {\n                                                    var13 = memory[0x40:0x60];\n                                                    var14 = returndata.length;\n                                                \n                                                    if (var14 < 0x20) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp18 = memory[var13:var13 + 0x20];\n                                                    var temp19 = memory[0x40:0x60];\n                                                    memory[temp19:temp19 + 0x20] = (var12 & 0xffffffff) * 0x02 ** 0xe0;\n                                                    memory[temp19 + 0x04:temp19 + 0x04 + 0x20] = temp18;\n                                                    var13 = temp19 + 0x24;\n                                                    var14 = 0x00;\n                                                    var15 = memory[0x40:0x60];\n                                                    var16 = temp19 - var15 + 0x24;\n                                                    var17 = var15;\n                                                    var18 = var14;\n                                                    var19 = var11;\n                                                    var20 = !address(var19).code.length;\n                                                \n                                                    if (var20) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp20;\n                                                    temp20, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                                    var14 = !temp20;\n                                                \n                                                    if (!var14) {\n                                                        var temp21 = memory[0x40:0x60];\n                                                        memory[temp21:temp21 + 0x20] = 0x65318b00000000000000000000000000000000000000000000000000000000;\n                                                        memory[temp21 + 0x04:temp21 + 0x04 + 0x20] = address(this);\n                                                        var11 = 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                                        var12 = 0x65318b;\n                                                        var13 = temp21 + 0x24;\n                                                        var14 = 0x20;\n                                                        var15 = memory[0x40:0x60];\n                                                        var16 = temp21 - var15 + 0x24;\n                                                        var17 = var15;\n                                                        var18 = 0x00;\n                                                        var19 = var11;\n                                                        var20 = !address(var19).code.length;\n                                                    \n                                                        if (var20) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp22;\n                                                        temp22, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                                        var14 = !temp22;\n                                                    \n                                                        if (!var14) {\n                                                            var11 = memory[0x40:0x60];\n                                                            var12 = returndata.length;\n                                                        \n                                                            if (var12 < 0x20) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var8 = memory[var11:var11 + 0x20];\n                                                        \n                                                            if (var8 < var7) {\n                                                            label_07DC:\n                                                                var11 = 0x02 ** 0xa0 - 0x01 & 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                                                var12 = 0x3ccfd60b;\n                                                                var temp23 = memory[0x40:0x60];\n                                                                memory[temp23:temp23 + 0x20] = (var12 & 0xffffffff) * 0x02 ** 0xe0;\n                                                                var13 = temp23 + 0x04;\n                                                                var14 = 0x00;\n                                                                var15 = memory[0x40:0x60];\n                                                                var16 = var13 - var15;\n                                                                var17 = var15;\n                                                                var18 = 0x00;\n                                                                var19 = var11;\n                                                                var20 = !address(var19).code.length;\n                                                            \n                                                                if (var20) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var temp24;\n                                                                temp24, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                                                var14 = !temp24;\n                                                            \n                                                                if (!var14) {\n                                                                    memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                                                                    memory[0x20:0x40] = 0x01;\n                                                                    storage[keccak256(memory[0x00:0x40]) + 0x01] = block.timestamp;\n                                                                    var11 = 0x0896;\n                                                                    var12 = var6;\n                                                                    var13 = block.timestamp;\n                                                                    var14 = 0x00;\n                                                                    var15 = 0x0e;\n                                                                    goto label_0A9D;\n                                                                } else {\n                                                                    var temp25 = returndata.length;\n                                                                    memory[0x00:0x00 + temp25] = returndata[0x00:0x00 + temp25];\n                                                                    revert(memory[0x00:0x00 + returndata.length]);\n                                                                }\n                                                            } else {\n                                                            label_0658:\n                                                                var11 = 0x02 ** 0xa0 - 0x01 & 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                                                var12 = 0xfdb5a03e;\n                                                                var temp26 = memory[0x40:0x60];\n                                                                memory[temp26:temp26 + 0x20] = (var12 & 0xffffffff) * 0x02 ** 0xe0;\n                                                                var13 = temp26 + 0x04;\n                                                                var14 = 0x00;\n                                                                var15 = memory[0x40:0x60];\n                                                                var16 = var13 - var15;\n                                                                var17 = var15;\n                                                                var18 = 0x00;\n                                                                var19 = var11;\n                                                                var20 = !address(var19).code.length;\n                                                            \n                                                                if (var20) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var temp27;\n                                                                temp27, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                                                var14 = !temp27;\n                                                            \n                                                                if (!var14) {\n                                                                    var temp28 = memory[0x40:0x60];\n                                                                    memory[temp28:temp28 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                                                    memory[temp28 + 0x04:temp28 + 0x04 + 0x20] = address(this);\n                                                                    var11 = 0x97550ce17666bb49349ef0e50f9fdb88353edb64;\n                                                                    var12 = 0xe4849b32;\n                                                                    var13 = var11;\n                                                                    var14 = 0x70a08231;\n                                                                    var15 = temp28 + 0x24;\n                                                                    var16 = 0x20;\n                                                                    var17 = memory[0x40:0x60];\n                                                                    var18 = temp28 - var17 + 0x24;\n                                                                    var19 = var17;\n                                                                    var20 = 0x00;\n                                                                    var21 = var13;\n                                                                    var22 = !address(var21).code.length;\n                                                                \n                                                                    if (var22) { revert(memory[0x00:0x00]); }\n                                                                \n                                                                    var temp29;\n                                                                    temp29, memory[var17:var17 + var16] = address(var21).call.gas(msg.gas).value(var20)(memory[var19:var19 + var18]);\n                                                                    var16 = !temp29;\n                                                                \n                                                                    if (!var16) {\n                                                                        var13 = memory[0x40:0x60];\n                                                                        var14 = returndata.length;\n                                                                    \n                                                                        if (var14 < 0x20) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp30 = memory[var13:var13 + 0x20];\n                                                                        var temp31 = memory[0x40:0x60];\n                                                                        memory[temp31:temp31 + 0x20] = (var12 & 0xffffffff) * 0x02 ** 0xe0;\n                                                                        memory[temp31 + 0x04:temp31 + 0x04 + 0x20] = temp30;\n                                                                        var13 = temp31 + 0x24;\n                                                                        var14 = 0x00;\n                                                                        var15 = memory[0x40:0x60];\n                                                                        var16 = temp31 - var15 + 0x24;\n                                                                        var17 = var15;\n                                                                        var18 = var14;\n                                                                        var19 = var11;\n                                                                        var20 = !address(var19).code.length;\n                                                                    \n                                                                        if (var20) { revert(memory[0x00:0x00]); }\n                                                                    \n                                                                        var temp32;\n                                                                        temp32, memory[var15:var15 + var14] = address(var19).call.gas(msg.gas).value(var18)(memory[var17:var17 + var16]);\n                                                                        var14 = !temp32;\n                                                                    \n                                                                        if (!var14) {\n                                                                            var11 = 0x64;\n                                                                            var12 = 0x07cb;\n                                                                            var13 = var8;\n                                                                            var14 = 0x51;\n                                                                            var12 = func_0A26(var13, var14);\n                                                                        \n                                                                            if (!var11) { assert(); }\n                                                                        \n                                                                            var8 = var12 / var11;\n                                                                        \n                                                                            if (var8 < var7) { goto label_07DC; }\n                                                                            else { goto label_0658; }\n                                                                        } else {\n                                                                            var temp33 = returndata.length;\n                                                                            memory[0x00:0x00 + temp33] = returndata[0x00:0x00 + temp33];\n                                                                            revert(memory[0x00:0x00 + returndata.length]);\n                                                                        }\n                                                                    } else {\n                                                                        var temp34 = returndata.length;\n                                                                        memory[0x00:0x00 + temp34] = returndata[0x00:0x00 + temp34];\n                                                                        revert(memory[0x00:0x00 + returndata.length]);\n                                                                    }\n                                                                } else {\n                                                                    var temp35 = returndata.length;\n                                                                    memory[0x00:0x00 + temp35] = returndata[0x00:0x00 + temp35];\n                                                                    revert(memory[0x00:0x00 + returndata.length]);\n                                                                }\n                                                            }\n                                                        } else {\n                                                            var temp36 = returndata.length;\n                                                            memory[0x00:0x00 + temp36] = returndata[0x00:0x00 + temp36];\n                                                            revert(memory[0x00:0x00 + returndata.length]);\n                                                        }\n                                                    } else {\n                                                        var temp37 = returndata.length;\n                                                        memory[0x00:0x00 + temp37] = returndata[0x00:0x00 + temp37];\n                                                        revert(memory[0x00:0x00 + returndata.length]);\n                                                    }\n                                                } else {\n                                                    var temp38 = returndata.length;\n                                                    memory[0x00:0x00 + temp38] = returndata[0x00:0x00 + temp38];\n                                                    revert(memory[0x00:0x00 + returndata.length]);\n                                                }\n                                            } else {\n                                                var temp39 = returndata.length;\n                                                memory[0x00:0x00 + temp39] = returndata[0x00:0x00 + temp39];\n                                                revert(memory[0x00:0x00 + returndata.length]);\n                                            }\n                                        } else {\n                                            var5 = var4 / 0x0a / 0x03;\n                                            var11 = 0x64;\n                                            var12 = 0x041b;\n                                            var13 = var4;\n                                            var14 = var11 - var2;\n                                            var12 = func_0A26(var13, var14);\n                                            goto label_041B;\n                                        }\n                                    } else {\n                                        var temp40 = returndata.length;\n                                        memory[0x00:0x00 + temp40] = returndata[0x00:0x00 + temp40];\n                                        revert(memory[0x00:0x00 + returndata.length]);\n                                    }\n                                } else {\n                                    var temp41 = returndata.length;\n                                    memory[0x00:0x00 + temp41] = returndata[0x00:0x00 + temp41];\n                                    revert(memory[0x00:0x00 + returndata.length]);\n                                }\n                            }\n                        } else {\n                            memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x01;\n                            var11 = block.timestamp;\n                            var12 = 0x029c;\n                            var13 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n                            var14 = 0x0e10;\n                            var12 = func_09CB(var13, var14);\n                            var11 = var12 < var11;\n                            goto label_029E;\n                        }\n                    } else {\n                    label_01B9:\n                        var temp42 = memory[0x40:0x60];\n                        memory[temp42:temp42 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp42 + 0x04:temp42 + 0x04 + 0x20] = 0x20;\n                        memory[temp42 + 0x24:temp42 + 0x24 + 0x20] = 0x26;\n                        memory[temp42 + 0x44:temp42 + 0x44 + 0x20] = 0x706c65617365207069636b20612070657263656e74206265747765656e203120;\n                        memory[temp42 + 0x64:temp42 + 0x64 + 0x20] = 0x616e642039390000000000000000000000000000000000000000000000000000;\n                        var temp43 = memory[0x40:0x60];\n                        revert(memory[temp43:temp43 + temp42 - temp43 + 0x84]);\n                    }\n                } else if (var2 < 0x64) { goto label_022E; }\n                else { goto label_01B9; }\n            } else {\n                var temp44 = memory[0x40:0x60];\n                memory[temp44:temp44 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp44 + 0x04:temp44 + 0x04 + 0x20] = 0x20;\n                memory[temp44 + 0x24:temp44 + 0x24 + 0x20] = 0x11;\n                memory[temp44 + 0x44:temp44 + 0x44 + 0x20] = 0x736f7272792068756d616e73206f6e6c79000000000000000000000000000000;\n                var temp45 = memory[0x40:0x60];\n                revert(memory[temp45:temp45 + temp44 - temp45 + 0x64]);\n            }\n        } else if (var0 == 0xb519cf31) {\n            // Dispatch table entry for rateLimiter_()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00b2;\n            var2 = rateLimiter_();\n            goto label_00B2;\n        } else if (var0 == 0xd0e30db0) {\n            // Dispatch table entry for deposit()\n            var1 = 0x00f1;\n            deposit();\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function pushers_(var arg0) returns (var arg0, var r1) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        r1 = storage[temp0 + 0x01];\n        return arg0, r1;\n    }\n    \n    function pusherTracker_() returns (var r0) { return storage[0x00]; }\n    \n    function balances() returns (var r0) { return address(this).balance; }\n    \n    function rateLimiter_() returns (var r0) { return storage[0x02]; }\n    \n    function deposit() {}\n    \n    function func_0966(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x13;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x536166654d61746820737562206661696c656400000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n    }\n    \n    function func_09CB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 + temp0;\n    \n        if (var0 >= temp0) { return var0; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x13;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d61746820616464206661696c656400000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_0A26(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) {\n            var temp0 = arg0;\n            var0 = arg1 * temp0;\n            var var1 = arg1;\n            var var2 = temp0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            if (var3 / var2 == var1) {\n            label_09C5:\n                return var0;\n            } else {\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n                memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x13;\n                memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d617468206d756c206661696c656400000000000000000000000000;\n                var temp2 = memory[0x40:0x60];\n                revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_09C5;\n        }\n    }\n    \n    function func_0C21(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (!arg0) {\n            var0 = 0x00;\n            goto label_0C6C;\n        } else if (arg1) {\n            var1 = arg0;\n            var2 = 0x01;\n        \n            if (var2 >= arg1) {\n            label_0C68:\n                var0 = var1;\n            \n            label_0C6C:\n                return var0;\n            } else {\n            label_0C55:\n                var var3 = 0x0c5e;\n                var var4 = var1;\n                var var5 = arg0;\n                var3 = func_0A26(var4, var5);\n                var1 = var3;\n                var2 = var2 + 0x01;\n            \n                if (var2 >= arg1) { goto label_0C68; }\n                else { goto label_0C55; }\n            }\n        } else {\n            var0 = 0x01;\n            goto label_0C6C;\n        }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 25.72482395172119,
	"usage": {
		"completion_tokens": 428,
		"prompt_tokens": 8034,
		"total_tokens": 8462
	}
}