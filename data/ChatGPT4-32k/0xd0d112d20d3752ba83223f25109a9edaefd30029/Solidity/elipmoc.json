{
	"address": "0xd0d112d20d3752ba83223f25109a9edaefd30029",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity contract that has a similar functionality to the decompiled code:\n\n```solidity\npragma solidity ^0.8.18;\n\ncontract MyToken {\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    uint256 private _totalSupply;\n    address private _owner;\n    bool private _openTrading;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor() {\n        _totalSupply = 1e18; // Same as 10^9 * 0x5f5e100 in the decompiled code\n        _owner = msg.sender;\n        _balanceOf[_owner] = _totalSupply;\n        _openTrading = false;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        require(_allowance[sender][msg.sender] >= amount, \"Not enough allowance\");\n        _allowance[sender][msg.sender] -= amount;\n        _transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balanceOf[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function openTrading() public {\n        require(_owner == msg.sender, \"Only the owner can open trading\");\n        _openTrading = true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) private {\n        require(_balanceOf[sender] >= amount, \"Not enough balance\");\n        require(_openTrading || sender == _owner || recipient == _owner, \"Trading is not open yet\");\n\n        _balanceOf[sender] -= amount;\n        _balanceOf[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n}\n```\n\nPlease note that I made many assumptions about the original contract's functionality because the decompiled code does not contain enough information to create an exact replica. For example, I assumed that the contract is a basic ERC-20 token contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1702495738,
	"id": "chatcmpl-8VPCcrKLwo8vOel4mzhaIRiy2xJTF",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2023.11.17 08:57 UTC\n// Compiled using the solidity compiler version 0.8.18\n\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => uint256) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => mapping (uint256 => uint256)) _allowance; // STORAGE[0x1]\nuint256 stor_2; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\nuint256 _openTrading; // STORAGE[0x4] bytes 0 to 0\nuint256 stor_4_1_1; // STORAGE[0x4] bytes 1 to 1\n\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction () public payable { \n}\n\nfunction totalSupply() public nonPayable { \n    v0 = _SafeExp(10, uint8(9));\n    require((v0 == v0 * 0x5f5e100 / 0x5f5e100) | !0x5f5e100, Panic(17)); // arithmetic overflow or underflow\n    return v0 * 0x5f5e100;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    require(_allowance[varg0][msg.sender] - varg2 <= _allowance[varg0][msg.sender], Panic(17)); // arithmetic overflow or underflow\n    _allowance[varg0][msg.sender] = _allowance[varg0][msg.sender] - varg2;\n    v0 = @_transfer_427(varg2, varg1, varg0);\n    return bool(v0);\n}\n\nfunction decimals() public nonPayable { \n    return uint8(9);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](v1.length);\n    v2 = 0;\n    while (v2 < v1.length) {\n        v0[v2] = v1[v2];\n        v2 += 32;\n    }\n    v0[v1.length] = 0;\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    v0 = @_transfer_427(varg1, varg0, msg.sender);\n    return bool(v0);\n}\n\nfunction openTrading() public nonPayable { \n    require(0x98b284d61e45d83014b20432ea266155197452ec == msg.sender);\n    _openTrading = 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    return _allowance[varg0][varg1];\n}\n\nfunction 0xef6d6e07(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    if (msg.sender + ~0x98b284d61e45d83014b20432ea266155197452eb) {\n        require(varg0 < 10);\n        require(varg1 < 10);\n        revert();\n    } else {\n        stor_2 = varg0;\n        stor_3 = varg1;\n        exit;\n    }\n}\n\nfunction @_transfer_427(uint256 varg0, address varg1, address varg2) private { \n    require(_balanceOf[varg2] - varg0 <= _balanceOf[varg2], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[varg2] = _balanceOf[varg2] - varg0;\n    if (0x98b284d61e45d83014b20432ea266155197452ec != varg2) {\n        require(_openTrading);\n    }\n    v0 = v1 = varg1 != address(0x30b1e0e276ed8db10ffd01e4f26db9c9faddf959);\n    if (!bool(address(varg1) == address(0x30b1e0e276ed8db10ffd01e4f26db9c9faddf959))) {\n        v0 = v2 = 0x98b284d61e45d83014b20432ea266155197452ec != varg1;\n    }\n    if (v0) {\n        v3 = _SafeExp(10, uint8(9));\n        require((v3 == v3 * 0x5f5e100 / 0x5f5e100) | !0x5f5e100, Panic(17)); // arithmetic overflow or underflow\n        require((v3 * 0x5f5e100 == v3 * 0x5f5e100 * 100 / 100) | !0x64, Panic(17)); // arithmetic overflow or underflow\n        require(100, Panic(18)); // division by zero\n        require(_balanceOf[varg1] <= varg0 + _balanceOf[varg1], Panic(17)); // arithmetic overflow or underflow\n        require(varg0 + _balanceOf[varg1] <= v3 * 0x5f5e100 * 100 / 100);\n    }\n    v4 = v5 = varg1 == address(0x30b1e0e276ed8db10ffd01e4f26db9c9faddf959);\n    if (v5) {\n        v4 = v6 = !stor_4_1_1;\n    }\n    if (v4) {\n        v7 = _SafeExp(10, uint8(9));\n        require((v7 == v7 * 0x5f5e100 / 0x5f5e100) | !0x5f5e100, Panic(17)); // arithmetic overflow or underflow\n        require(1000, Panic(18)); // division by zero\n        v4 = v8 = _balanceOf[this] >= v7 * 0x5f5e100 / 1000;\n    }\n    if (v4) {\n        stor_4_1_1 = 1;\n        v9 = new address[](2);\n        CALLDATACOPY(v9.data, msg.data.length, 64);\n        require(0 < v9.length, Panic(50)); // access an out-of-bounds or negative index of bytesN array or slice\n        v10 = v9.data;\n        v9[0] = address(this);\n        require(1 < v9.length, Panic(50)); // access an out-of-bounds or negative index of bytesN array or slice\n        v9[1] = address(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2);\n        v11 = _SafeExp(10, uint8(9));\n        require((v11 == v11 * 0x5f5e100 / 0x5f5e100) | !0x5f5e100, Panic(17)); // arithmetic overflow or underflow\n        require(1000, Panic(18)); // division by zero\n        v12 = new address[](v9.length);\n        v13 = v14 = v12.data;\n        v15 = v16 = v9.data;\n        v17 = v18 = 0;\n        while (v17 < v9.length) {\n            MEM[v13] = address(MEM[v15]);\n            v15 += 32;\n            v13 += 32;\n            v17 += 1;\n        }\n        require(bool(0x7a250d5630b4cf539739df2c5dacb4c659f2488d.code.size));\n        v19 = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d.swapExactTokensForETHSupportingFeeOnTransferTokens(v11 * 0x5f5e100 / 1000, 0, v12, address(this), block.timestamp, v20, address(this)).gas(msg.gas);\n        require(bool(v19), 0, RETURNDATASIZE()); // checks call status, propagates error data on error\n        v21 = 0x98b284d61e45d83014b20432ea266155197452ec.call().value(this.balance).gas(2300 * !this.balance);\n        require(bool(v21), 0, RETURNDATASIZE()); // checks call status, propagates error data on error\n        stor_4_1_1 = 0;\n    }\n    v22 = v23 = this != varg2;\n    if (this != varg2) {\n        v22 = v24 = 0x98b284d61e45d83014b20432ea266155197452ec != varg1;\n    }\n    if (v22) {\n        if (varg2 == address(0x30b1e0e276ed8db10ffd01e4f26db9c9faddf959)) {\n            v25 = v26 = stor_2;\n        } else {\n            v25 = v27 = stor_3;\n        }\n        require((v25 == v25 * varg0 / varg0) | !varg0, Panic(17)); // arithmetic overflow or underflow\n        require(100, Panic(18)); // division by zero\n        v28 = v25 * varg0 / 100;\n        varg0 = v29 = varg0 - v28;\n        require(v29 <= varg0, Panic(17)); // arithmetic overflow or underflow\n        require(_balanceOf[this] <= v28 + _balanceOf[this], Panic(17)); // arithmetic overflow or underflow\n        _balanceOf[this] += v28;\n        emit Transfer(varg2, this, v28);\n    }\n    require(_balanceOf[varg1] <= varg0 + _balanceOf[varg1], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[varg1] += varg0;\n    emit Transfer(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction _SafeExp(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        if (varg0) {\n            if (varg0 == 1) {\n                return 1;\n            } else if (varg0 == 2) {\n                require(varg1 <= uint8.max, Panic(17)); // arithmetic overflow or underflow\n                return 1 << varg1;\n            } else if (!((varg0 < 11) & (varg1 < 78) | (varg0 < 307) & (varg1 < 32))) {\n                v0 = v1 = 1;\n                while (varg1 > v1) {\n                    require(varg0 <= ~0 / varg0, Panic(17)); // arithmetic overflow or underflow\n                    if (varg1 & v1) {\n                        v0 *= varg0;\n                    }\n                    varg1 = varg1 >> v1;\n                    varg0 *= varg0;\n                }\n                require(v0 <= ~0 / varg0, Panic(17)); // arithmetic overflow or underflow\n                return varg0 * v0;\n            } else {\n                return varg0 ** varg1;\n            }\n        } else {\n            return 0;\n        }\n    } else {\n        return 1;\n    }\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](v1.length);\n    v2 = 0;\n    while (v2 < v1.length) {\n        v0[v2] = v1[v2];\n        v2 += 32;\n    }\n    v0[v1.length] = 0;\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    _allowance[msg.sender][varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return bool(1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length < 4) {\n        require(!msg.data.length);\n        ();\n    } else if (0x70a08231 > function_selector >> 224) {\n        if (0x6fdde03 == function_selector >> 224) {\n            name();\n        } else if (0x95ea7b3 == function_selector >> 224) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector >> 224) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector >> 224) {\n            transferFrom(address,address,uint256);\n        } else {\n            require(0x313ce567 == function_selector >> 224);\n            decimals();\n        }\n    } else if (0x70a08231 == function_selector >> 224) {\n        balanceOf(address);\n    } else if (0x95d89b41 == function_selector >> 224) {\n        symbol();\n    } else if (0xa9059cbb == function_selector >> 224) {\n        transfer(address,uint256);\n    } else if (0xc9567bf9 == function_selector >> 224) {\n        openTrading();\n    } else if (0xdd62ed3e == function_selector >> 224) {\n        allowance(address,address);\n    } else {\n        require(0xef6d6e07 == function_selector >> 224);\n        0xef6d6e07();\n    }\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2023.11.17 08:57 UTC\n// Compiled using the solidity compiler version 0.8.18\n\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => uint256) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => mapping (uint256 => uint256)) _allowance; // STORAGE[0x1]\nuint256 stor_2; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\nuint256 _openTrading; // STORAGE[0x4] bytes 0 to 0\nuint256 stor_4_1_1; // STORAGE[0x4] bytes 1 to 1\n\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction () public payable { \n}\n\nfunction totalSupply() public nonPayable { \n    v0 = _SafeExp(10, uint8(9));\n    require((v0 == v0 * 0x5f5e100 / 0x5f5e100) | !0x5f5e100, Panic(17)); // arithmetic overflow or underflow\n    return v0 * 0x5f5e100;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    require(_allowance[varg0][msg.sender] - varg2 <= _allowance[varg0][msg.sender], Panic(17)); // arithmetic overflow or underflow\n    _allowance[varg0][msg.sender] = _allowance[varg0][msg.sender] - varg2;\n    v0 = @_transfer_427(varg2, varg1, varg0);\n    return bool(v0);\n}\n\nfunction decimals() public nonPayable { \n    return uint8(9);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](v1.length);\n    v2 = 0;\n    while (v2 < v1.length) {\n        v0[v2] = v1[v2];\n        v2 += 32;\n    }\n    v0[v1.length] = 0;\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    v0 = @_transfer_427(varg1, varg0, msg.sender);\n    return bool(v0);\n}\n\nfunction openTrading() public nonPayable { \n    require(0x98b284d61e45d83014b20432ea266155197452ec == msg.sender);\n    _openTrading = 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    return _allowance[varg0][varg1];\n}\n\nfunction 0xef6d6e07(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    if (msg.sender + ~0x98b284d61e45d83014b20432ea266155197452eb) {\n        require(varg0 < 10);\n        require(varg1 < 10);\n        revert();\n    } else {\n        stor_2 = varg0;\n        stor_3 = varg1;\n        exit;\n    }\n}\n\nfunction @_transfer_427(uint256 varg0, address varg1, address varg2) private { \n    require(_balanceOf[varg2] - varg0 <= _balanceOf[varg2], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[varg2] = _balanceOf[varg2] - varg0;\n    if (0x98b284d61e45d83014b20432ea266155197452ec != varg2) {\n        require(_openTrading);\n    }\n    v0 = v1 = varg1 != address(0x30b1e0e276ed8db10ffd01e4f26db9c9faddf959);\n    if (!bool(address(varg1) == address(0x30b1e0e276ed8db10ffd01e4f26db9c9faddf959))) {\n        v0 = v2 = 0x98b284d61e45d83014b20432ea266155197452ec != varg1;\n    }\n    if (v0) {\n        v3 = _SafeExp(10, uint8(9));\n        require((v3 == v3 * 0x5f5e100 / 0x5f5e100) | !0x5f5e100, Panic(17)); // arithmetic overflow or underflow\n        require((v3 * 0x5f5e100 == v3 * 0x5f5e100 * 100 / 100) | !0x64, Panic(17)); // arithmetic overflow or underflow\n        require(100, Panic(18)); // division by zero\n        require(_balanceOf[varg1] <= varg0 + _balanceOf[varg1], Panic(17)); // arithmetic overflow or underflow\n        require(varg0 + _balanceOf[varg1] <= v3 * 0x5f5e100 * 100 / 100);\n    }\n    v4 = v5 = varg1 == address(0x30b1e0e276ed8db10ffd01e4f26db9c9faddf959);\n    if (v5) {\n        v4 = v6 = !stor_4_1_1;\n    }\n    if (v4) {\n        v7 = _SafeExp(10, uint8(9));\n        require((v7 == v7 * 0x5f5e100 / 0x5f5e100) | !0x5f5e100, Panic(17)); // arithmetic overflow or underflow\n        require(1000, Panic(18)); // division by zero\n        v4 = v8 = _balanceOf[this] >= v7 * 0x5f5e100 / 1000;\n    }\n    if (v4) {\n        stor_4_1_1 = 1;\n        v9 = new address[](2);\n        CALLDATACOPY(v9.data, msg.data.length, 64);\n        require(0 < v9.length, Panic(50)); // access an out-of-bounds or negative index of bytesN array or slice\n        v10 = v9.data;\n        v9[0] = address(this);\n        require(1 < v9.length, Panic(50)); // access an out-of-bounds or negative index of bytesN array or slice\n        v9[1] = address(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2);\n        v11 = _SafeExp(10, uint8(9));\n        require((v11 == v11 * 0x5f5e100 / 0x5f5e100) | !0x5f5e100, Panic(17)); // arithmetic overflow or underflow\n        require(1000, Panic(18)); // division by zero\n        v12 = new address[](v9.length);\n        v13 = v14 = v12.data;\n        v15 = v16 = v9.data;\n        v17 = v18 = 0;\n        while (v17 < v9.length) {\n            MEM[v13] = address(MEM[v15]);\n            v15 += 32;\n            v13 += 32;\n            v17 += 1;\n        }\n        require(bool(0x7a250d5630b4cf539739df2c5dacb4c659f2488d.code.size));\n        v19 = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d.swapExactTokensForETHSupportingFeeOnTransferTokens(v11 * 0x5f5e100 / 1000, 0, v12, address(this), block.timestamp, v20, address(this)).gas(msg.gas);\n        require(bool(v19), 0, RETURNDATASIZE()); // checks call status, propagates error data on error\n        v21 = 0x98b284d61e45d83014b20432ea266155197452ec.call().value(this.balance).gas(2300 * !this.balance);\n        require(bool(v21), 0, RETURNDATASIZE()); // checks call status, propagates error data on error\n        stor_4_1_1 = 0;\n    }\n    v22 = v23 = this != varg2;\n    if (this != varg2) {\n        v22 = v24 = 0x98b284d61e45d83014b20432ea266155197452ec != varg1;\n    }\n    if (v22) {\n        if (varg2 == address(0x30b1e0e276ed8db10ffd01e4f26db9c9faddf959)) {\n            v25 = v26 = stor_2;\n        } else {\n            v25 = v27 = stor_3;\n        }\n        require((v25 == v25 * varg0 / varg0) | !varg0, Panic(17)); // arithmetic overflow or underflow\n        require(100, Panic(18)); // division by zero\n        v28 = v25 * varg0 / 100;\n        varg0 = v29 = varg0 - v28;\n        require(v29 <= varg0, Panic(17)); // arithmetic overflow or underflow\n        require(_balanceOf[this] <= v28 + _balanceOf[this], Panic(17)); // arithmetic overflow or underflow\n        _balanceOf[this] += v28;\n        emit Transfer(varg2, this, v28);\n    }\n    require(_balanceOf[varg1] <= varg0 + _balanceOf[varg1], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[varg1] += varg0;\n    emit Transfer(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction _SafeExp(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        if (varg0) {\n            if (varg0 == 1) {\n                return 1;\n            } else if (varg0 == 2) {\n                require(varg1 <= uint8.max, Panic(17)); // arithmetic overflow or underflow\n                return 1 << varg1;\n            } else if (!((varg0 < 11) & (varg1 < 78) | (varg0 < 307) & (varg1 < 32))) {\n                v0 = v1 = 1;\n                while (varg1 > v1) {\n                    require(varg0 <= ~0 / varg0, Panic(17)); // arithmetic overflow or underflow\n                    if (varg1 & v1) {\n                        v0 *= varg0;\n                    }\n                    varg1 = varg1 >> v1;\n                    varg0 *= varg0;\n                }\n                require(v0 <= ~0 / varg0, Panic(17)); // arithmetic overflow or underflow\n                return varg0 * v0;\n            } else {\n                return varg0 ** varg1;\n            }\n        } else {\n            return 0;\n        }\n    } else {\n        return 1;\n    }\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](v1.length);\n    v2 = 0;\n    while (v2 < v1.length) {\n        v0[v2] = v1[v2];\n        v2 += 32;\n    }\n    v0[v1.length] = 0;\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    _allowance[msg.sender][varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return bool(1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length < 4) {\n        require(!msg.data.length);\n        ();\n    } else if (0x70a08231 > function_selector >> 224) {\n        if (0x6fdde03 == function_selector >> 224) {\n            name();\n        } else if (0x95ea7b3 == function_selector >> 224) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector >> 224) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector >> 224) {\n            transferFrom(address,address,uint256);\n        } else {\n            require(0x313ce567 == function_selector >> 224);\n            decimals();\n        }\n    } else if (0x70a08231 == function_selector >> 224) {\n        balanceOf(address);\n    } else if (0x95d89b41 == function_selector >> 224) {\n        symbol();\n    } else if (0xa9059cbb == function_selector >> 224) {\n        transfer(address,uint256);\n    } else if (0xc9567bf9 == function_selector >> 224) {\n        openTrading();\n    } else if (0xdd62ed3e == function_selector >> 224) {\n        allowance(address,address);\n    } else {\n        require(0xef6d6e07 == function_selector >> 224);\n        0xef6d6e07();\n    }\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2023.11.17 08:57 UTC\n// Compiled using the solidity compiler version 0.8.18\n\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => uint256) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => mapping (uint256 => uint256)) _allowance; // STORAGE[0x1]\nuint256 stor_2; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\nuint256 _openTrading; // STORAGE[0x4] bytes 0 to 0\nuint256 stor_4_1_1; // STORAGE[0x4] bytes 1 to 1\n\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction () public payable { \n}\n\nfunction totalSupply() public nonPayable { \n    v0 = _SafeExp(10, uint8(9));\n    require((v0 == v0 * 0x5f5e100 / 0x5f5e100) | !0x5f5e100, Panic(17)); // arithmetic overflow or underflow\n    return v0 * 0x5f5e100;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    require(_allowance[varg0][msg.sender] - varg2 <= _allowance[varg0][msg.sender], Panic(17)); // arithmetic overflow or underflow\n    _allowance[varg0][msg.sender] = _allowance[varg0][msg.sender] - varg2;\n    v0 = @_transfer_427(varg2, varg1, varg0);\n    return bool(v0);\n}\n\nfunction decimals() public nonPayable { \n    return uint8(9);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](v1.length);\n    v2 = 0;\n    while (v2 < v1.length) {\n        v0[v2] = v1[v2];\n        v2 += 32;\n    }\n    v0[v1.length] = 0;\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    v0 = @_transfer_427(varg1, varg0, msg.sender);\n    return bool(v0);\n}\n\nfunction openTrading() public nonPayable { \n    require(0x98b284d61e45d83014b20432ea266155197452ec == msg.sender);\n    _openTrading = 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    return _allowance[varg0][varg1];\n}\n\nfunction 0xef6d6e07(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    if (msg.sender + ~0x98b284d61e45d83014b20432ea266155197452eb) {\n        require(varg0 < 10);\n        require(varg1 < 10);\n        revert();\n    } else {\n        stor_2 = varg0;\n        stor_3 = varg1;\n        exit;\n    }\n}\n\nfunction @_transfer_427(uint256 varg0, address varg1, address varg2) private { \n    require(_balanceOf[varg2] - varg0 <= _balanceOf[varg2], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[varg2] = _balanceOf[varg2] - varg0;\n    if (0x98b284d61e45d83014b20432ea266155197452ec != varg2) {\n        require(_openTrading);\n    }\n    v0 = v1 = varg1 != address(0x30b1e0e276ed8db10ffd01e4f26db9c9faddf959);\n    if (!bool(address(varg1) == address(0x30b1e0e276ed8db10ffd01e4f26db9c9faddf959))) {\n        v0 = v2 = 0x98b284d61e45d83014b20432ea266155197452ec != varg1;\n    }\n    if (v0) {\n        v3 = _SafeExp(10, uint8(9));\n        require((v3 == v3 * 0x5f5e100 / 0x5f5e100) | !0x5f5e100, Panic(17)); // arithmetic overflow or underflow\n        require((v3 * 0x5f5e100 == v3 * 0x5f5e100 * 100 / 100) | !0x64, Panic(17)); // arithmetic overflow or underflow\n        require(100, Panic(18)); // division by zero\n        require(_balanceOf[varg1] <= varg0 + _balanceOf[varg1], Panic(17)); // arithmetic overflow or underflow\n        require(varg0 + _balanceOf[varg1] <= v3 * 0x5f5e100 * 100 / 100);\n    }\n    v4 = v5 = varg1 == address(0x30b1e0e276ed8db10ffd01e4f26db9c9faddf959);\n    if (v5) {\n        v4 = v6 = !stor_4_1_1;\n    }\n    if (v4) {\n        v7 = _SafeExp(10, uint8(9));\n        require((v7 == v7 * 0x5f5e100 / 0x5f5e100) | !0x5f5e100, Panic(17)); // arithmetic overflow or underflow\n        require(1000, Panic(18)); // division by zero\n        v4 = v8 = _balanceOf[this] >= v7 * 0x5f5e100 / 1000;\n    }\n    if (v4) {\n        stor_4_1_1 = 1;\n        v9 = new address[](2);\n        CALLDATACOPY(v9.data, msg.data.length, 64);\n        require(0 < v9.length, Panic(50)); // access an out-of-bounds or negative index of bytesN array or slice\n        v10 = v9.data;\n        v9[0] = address(this);\n        require(1 < v9.length, Panic(50)); // access an out-of-bounds or negative index of bytesN array or slice\n        v9[1] = address(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2);\n        v11 = _SafeExp(10, uint8(9));\n        require((v11 == v11 * 0x5f5e100 / 0x5f5e100) | !0x5f5e100, Panic(17)); // arithmetic overflow or underflow\n        require(1000, Panic(18)); // division by zero\n        v12 = new address[](v9.length);\n        v13 = v14 = v12.data;\n        v15 = v16 = v9.data;\n        v17 = v18 = 0;\n        while (v17 < v9.length) {\n            MEM[v13] = address(MEM[v15]);\n            v15 += 32;\n            v13 += 32;\n            v17 += 1;\n        }\n        require(bool(0x7a250d5630b4cf539739df2c5dacb4c659f2488d.code.size));\n        v19 = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d.swapExactTokensForETHSupportingFeeOnTransferTokens(v11 * 0x5f5e100 / 1000, 0, v12, address(this), block.timestamp, v20, address(this)).gas(msg.gas);\n        require(bool(v19), 0, RETURNDATASIZE()); // checks call status, propagates error data on error\n        v21 = 0x98b284d61e45d83014b20432ea266155197452ec.call().value(this.balance).gas(2300 * !this.balance);\n        require(bool(v21), 0, RETURNDATASIZE()); // checks call status, propagates error data on error\n        stor_4_1_1 = 0;\n    }\n    v22 = v23 = this != varg2;\n    if (this != varg2) {\n        v22 = v24 = 0x98b284d61e45d83014b20432ea266155197452ec != varg1;\n    }\n    if (v22) {\n        if (varg2 == address(0x30b1e0e276ed8db10ffd01e4f26db9c9faddf959)) {\n            v25 = v26 = stor_2;\n        } else {\n            v25 = v27 = stor_3;\n        }\n        require((v25 == v25 * varg0 / varg0) | !varg0, Panic(17)); // arithmetic overflow or underflow\n        require(100, Panic(18)); // division by zero\n        v28 = v25 * varg0 / 100;\n        varg0 = v29 = varg0 - v28;\n        require(v29 <= varg0, Panic(17)); // arithmetic overflow or underflow\n        require(_balanceOf[this] <= v28 + _balanceOf[this], Panic(17)); // arithmetic overflow or underflow\n        _balanceOf[this] += v28;\n        emit Transfer(varg2, this, v28);\n    }\n    require(_balanceOf[varg1] <= varg0 + _balanceOf[varg1], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[varg1] += varg0;\n    emit Transfer(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction _SafeExp(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        if (varg0) {\n            if (varg0 == 1) {\n                return 1;\n            } else if (varg0 == 2) {\n                require(varg1 <= uint8.max, Panic(17)); // arithmetic overflow or underflow\n                return 1 << varg1;\n            } else if (!((varg0 < 11) & (varg1 < 78) | (varg0 < 307) & (varg1 < 32))) {\n                v0 = v1 = 1;\n                while (varg1 > v1) {\n                    require(varg0 <= ~0 / varg0, Panic(17)); // arithmetic overflow or underflow\n                    if (varg1 & v1) {\n                        v0 *= varg0;\n                    }\n                    varg1 = varg1 >> v1;\n                    varg0 *= varg0;\n                }\n                require(v0 <= ~0 / varg0, Panic(17)); // arithmetic overflow or underflow\n                return varg0 * v0;\n            } else {\n                return varg0 ** varg1;\n            }\n        } else {\n            return 0;\n        }\n    } else {\n        return 1;\n    }\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](v1.length);\n    v2 = 0;\n    while (v2 < v1.length) {\n        v0[v2] = v1[v2];\n        v2 += 32;\n    }\n    v0[v1.length] = 0;\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    _allowance[msg.sender][varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return bool(1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length < 4) {\n        require(!msg.data.length);\n        ();\n    } else if (0x70a08231 > function_selector >> 224) {\n        if (0x6fdde03 == function_selector >> 224) {\n            name();\n        } else if (0x95ea7b3 == function_selector >> 224) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector >> 224) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector >> 224) {\n            transferFrom(address,address,uint256);\n        } else {\n            require(0x313ce567 == function_selector >> 224);\n            decimals();\n        }\n    } else if (0x70a08231 == function_selector >> 224) {\n        balanceOf(address);\n    } else if (0x95d89b41 == function_selector >> 224) {\n        symbol();\n    } else if (0xa9059cbb == function_selector >> 224) {\n        transfer(address,uint256);\n    } else if (0xc9567bf9 == function_selector >> 224) {\n        openTrading();\n    } else if (0xdd62ed3e == function_selector >> 224) {\n        allowance(address,address);\n    } else {\n        require(0xef6d6e07 == function_selector >> 224);\n        0xef6d6e07();\n    }\n}\n.",
	"status": "1",
	"time_cost": 42.275869846343994,
	"usage": {
		"completion_tokens": 564,
		"prompt_tokens": 3235,
		"total_tokens": 3799
	}
}