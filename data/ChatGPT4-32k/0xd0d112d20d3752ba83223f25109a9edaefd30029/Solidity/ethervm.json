{
	"address": "0xd0d112d20d3752ba83223f25109a9edaefd30029",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, based on your decompiled code, I've written the equivalent Solidity contract. This contract seems to be a simple ERC20 token contract having functionalities like transfer, approve, name, symbol, decimals etc.\n\nPlease note that it's not possible to convert decompiled EVM bytecode directly into a high-level language like Solidity with perfect accuracy, so there may be some minor discrepancies. Here is the Solidity code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract ERC20Token {\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    \n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n    uint256 private _totalSupply;\n    address private _owner;\n    bool private _tradingOpen;\n\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n        _totalSupply = totalSupply_;\n        _balances[msg.sender] = totalSupply_;\n        _owner = msg.sender;\n        _tradingOpen = false;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n    \n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n    \n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n    \n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n    \n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        require(_balances[msg.sender] >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[msg.sender] -= amount;\n        _balances[recipient] += amount;\n        return true;\n    }\n    \n    function approve(address spender, uint256 amount) public returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        return true;\n    }\n    \n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    \n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        require(_balances[sender] >= amount, \"ERC20: transfer amount exceeds balance\");\n        require(_allowances[sender][msg.sender] >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n        _allowances[sender][msg.sender] -= amount;\n        return true;\n    }\n    \n    function openTrading() public {\n        require(msg.sender == _owner, \"Only owner can open trading\");\n        _tradingOpen = true;\n    }\n}\n```\nThis code represents a basic implementation of an ERC20 token. Some functions may need to be adjusted based on the original contract's business logic.",
				"role": "assistant"
			}
		}
	],
	"created": 1700632296,
	"id": "chatcmpl-8NaR61xmNMkX5F3ZGSnxzuZIPoKJ7",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (0x70a08231 > var0) {\n                if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x00df;\n                    var temp0 = memory[0x40:0x60];\n                    var var2 = temp0;\n                    memory[0x40:0x60] = var2 + 0x40;\n                    memory[var2:var2 + 0x20] = 0x07;\n                    memory[var2 + 0x20:var2 + 0x20 + 0x20] = 0x57614461467571 << 0xc8;\n                \n                label_00DF:\n                    var temp1 = var2;\n                    var2 = 0x00ec;\n                    var var3 = temp1;\n                    var var4 = memory[0x40:0x60];\n                    var2 = name(var3, var4);\n                \n                label_00EC:\n                    var temp2 = memory[0x40:0x60];\n                    return memory[temp2:temp2 + var2 - temp2];\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0115;\n                    var2 = 0x0110;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2, var3 = func_0915(var3, var4);\n                    var1 = func_0110(var2, var3);\n                \n                label_0115:\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = !!var1;\n                    var1 = temp3 + 0x20;\n                    goto label_00EC;\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x013a;\n                    var2 = totalSupply();\n                \n                label_013A:\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = var2;\n                    var2 = temp4 + 0x20;\n                    goto label_00EC;\n                } else if (var0 == 0x23b872dd) {\n                    // Dispatch table entry for transferFrom(address,address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0115;\n                    var2 = 0x0163;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2, var3, var4 = func_093F(var3, var4);\n                    var1 = func_0163(var2, var3, var4);\n                    goto label_0115;\n                } else if (var0 == 0x313ce567) {\n                    // Dispatch table entry for decimals()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x017d;\n                    var2 = 0x09;\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = var2 & 0xff;\n                    var2 = temp5 + 0x20;\n                    goto label_00EC;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013a;\n                var2 = 0x01aa;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_097B(var3, var4);\n                var2 = func_01AA(var2);\n                goto label_013A;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00df;\n                var temp6 = memory[0x40:0x60];\n                var2 = temp6;\n                memory[0x40:0x60] = var2 + 0x40;\n                memory[var2:var2 + 0x20] = 0x03;\n                memory[var2 + 0x20:var2 + 0x20 + 0x20] = 0x2ba223 << 0xe9;\n                goto label_00DF;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0115;\n                var2 = 0x0206;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_0915(var3, var4);\n                var4 = 0x00;\n                var var5 = 0x035f;\n                var var6 = msg.sender;\n                var var7 = var2;\n                var var8 = var3;\n                var5 = func_03D6(var6, var7, var8);\n                var1 = var5;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xc9567bf9) {\n                // Dispatch table entry for openTrading()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0220;\n                openTrading();\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013a;\n                var2 = 0x023d;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_0996(var3, var4);\n                var2 = func_023D(var2, var3);\n                goto label_013A;\n            } else if (var0 == 0xef6d6e07) {\n                // Dispatch table entry for 0xef6d6e07 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0220;\n                var2 = 0x0275;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_09C9(var3, var4);\n                func_0275(var2, var3);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (msg.data.length) { revert(memory[0x00:0x00]); }\n        else { stop(); }\n    }\n    \n    function func_0110(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = temp0;\n        var temp1 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp1;\n        var temp2 = memory[0x40:0x60];\n        var var0 = 0x00;\n        var var2 = msg.sender;\n        var var1 = arg0 & (0x01 << 0xa0) - 0x01;\n        var var3 = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\n        memory[temp2:temp2 + 0x20] = temp1;\n        var var4 = temp2 + 0x20;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + var4 - temp3], [stack[-2], stack[-3], stack[-4]]);\n        return 0x01;\n    }\n    \n    function func_0163(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[var0:var0 + 0x40]);\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var1 = arg2;\n        var var2 = keccak256(memory[var0:var0 + 0x40]);\n        var var3 = var0;\n        var var4 = 0x0339;\n        var var6 = storage[var2];\n        var var5 = var1;\n        var4 = func_0B0B(var5, var6);\n        storage[var2] = var4;\n        var1 = 0x034a;\n        var2 = arg0;\n        var3 = arg1;\n        var4 = arg2;\n        return func_03D6(var2, var3, var4);\n    }\n    \n    function func_01AA(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_023D(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0275(var arg0, var arg1) {\n        if (!(msg.sender + ~0x98b284d61e45d83014b20432ea266155197452eb)) {\n            storage[0x02] = arg0;\n            storage[0x03] = arg1;\n            return;\n        } else if (arg0 < 0x0a) {\n            if (arg1 < 0x0a) { revert(memory[0x00:0x00]); }\n            else { revert(memory[0x00:0x00]); }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) {\n        r0 = 0x02f3;\n        var var1 = 0x09;\n        var var2 = 0x0a;\n        r0 = func_0AE5(var1, var2);\n        var1 = r0;\n        r0 = 0x0301;\n        var2 = 0x05f5e100;\n        return func_0AF4(var1, var2);\n    }\n    \n    function openTrading() {\n        if (msg.sender != 0x98b284d61e45d83014b20432ea266155197452ec) { revert(memory[0x00:0x00]); }\n    \n        storage[0x04] = (storage[0x04] & ~0xff) | 0x01;\n    }\n    \n    function func_03D6(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = var0;\n        var var1 = arg2;\n        var var2 = keccak256(memory[var0:var0 + 0x40]);\n        var var3 = var0;\n        var var4 = 0x0400;\n        var var5 = var1;\n        var var6 = storage[var2];\n        var4 = func_0B0B(var5, var6);\n        storage[var2] = var4;\n    \n        if (arg0 & (0x01 << 0xa0) - 0x01 == 0x98b284d61e45d83014b20432ea266155197452ec) {\n        label_0438:\n            var1 = arg1 & (0x01 << 0xa0) - 0x01 != (0x01 << 0xa0) - 0x01 & 0x00000000000000000000000030b1e0e276ed8db10ffd01e4f26db9c9faddf959;\n        \n            if (!var1) {\n                if (!var1) {\n                label_04FC:\n                    var1 = arg1 & (0x01 << 0xa0) - 0x01 == (0x01 << 0xa0) - 0x01 & 0x00000000000000000000000030b1e0e276ed8db10ffd01e4f26db9c9faddf959;\n                \n                    if (var1) {\n                        var1 = !(storage[0x04] / 0x0100 & 0xff);\n                    \n                        if (!var1) { goto label_0586; }\n                        else { goto label_054C; }\n                    } else if (!var1) {\n                    label_0586:\n                    \n                        if (!var1) {\n                        label_0716:\n                            var1 = address(this) != arg0 & (0x01 << 0xa0) - 0x01;\n                        \n                            if (address(this) != arg0 & (0x01 << 0xa0) - 0x01) {\n                                if (!var1) {\n                                label_0825:\n                                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                                    memory[0x20:0x40] = 0x00;\n                                    var2 = keccak256(memory[0x00:0x40]);\n                                    var1 = arg2;\n                                    var3 = 0x00;\n                                    var4 = 0x084d;\n                                    var6 = storage[var2];\n                                    var5 = var1;\n                                    var4 = func_0B40(var5, var6);\n                                    storage[var2] = var4;\n                                    var1 = arg1 & (0x01 << 0xa0) - 0x01;\n                                    var2 = arg0 & (0x01 << 0xa0) - 0x01;\n                                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                                    var temp0 = memory[0x40:0x60];\n                                    memory[temp0:temp0 + 0x20] = arg2;\n                                    var4 = temp0 + 0x20;\n                                    var temp1 = memory[0x40:0x60];\n                                    log(memory[temp1:temp1 + var4 - temp1], [stack[-2], stack[-3], stack[-4]]);\n                                    return 0x01;\n                                } else {\n                                label_0752:\n                                    var1 = 0x00;\n                                    var2 = 0x64;\n                                \n                                    if (arg0 & (0x01 << 0xa0) - 0x01 == (0x01 << 0xa0) - 0x01 & 0x00000000000000000000000030b1e0e276ed8db10ffd01e4f26db9c9faddf959) {\n                                        var4 = storage[0x02];\n                                        var3 = 0x07a4;\n                                        var5 = arg2;\n                                        var3 = func_0AF4(var4, var5);\n                                    \n                                    label_07A4:\n                                        var temp2 = var2;\n                                        var2 = 0x07ae;\n                                        var temp3 = var3;\n                                        var3 = temp2;\n                                        var4 = temp3;\n                                        var2 = func_0B1E(var3, var4);\n                                        var temp4 = var2;\n                                        var1 = temp4;\n                                        var2 = 0x07ba;\n                                        var3 = var1;\n                                        var4 = arg2;\n                                        var2 = func_0B0B(var3, var4);\n                                        memory[0x00:0x20] = address(this);\n                                        memory[0x20:0x40] = 0x00;\n                                        arg2 = var2;\n                                        var2 = var1;\n                                        var3 = keccak256(memory[0x00:0x40]);\n                                        var4 = 0x00;\n                                        var5 = 0x07de;\n                                        var6 = var2;\n                                        var var7 = storage[var3];\n                                        var5 = func_0B40(var6, var7);\n                                        storage[var3] = var5;\n                                        var temp5 = memory[0x40:0x60];\n                                        memory[temp5:temp5 + 0x20] = var1;\n                                        var temp6 = memory[0x40:0x60];\n                                        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-9] & (0x01 << 0xa0) - 0x01, address(this)]);\n                                        goto label_0825;\n                                    } else {\n                                        var3 = storage[0x03];\n                                        var4 = var3;\n                                        var3 = 0x07a4;\n                                        var5 = arg2;\n                                        var3 = func_0AF4(var4, var5);\n                                        goto label_07A4;\n                                    }\n                                }\n                            } else if (arg1 & (0x01 << 0xa0) - 0x01 == 0x98b284d61e45d83014b20432ea266155197452ec) { goto label_0825; }\n                            else { goto label_0752; }\n                        } else {\n                            storage[0x04] = (storage[0x04] & ~0xff00) | 0x0100;\n                            var temp7 = memory[0x40:0x60];\n                            memory[temp7:temp7 + 0x20] = 0x02;\n                            memory[0x40:0x60] = temp7 + 0x60;\n                            memory[temp7 + 0x20:temp7 + 0x20 + 0x40] = msg.data[msg.data.length:msg.data.length + 0x40];\n                            var1 = temp7;\n                            var2 = address(this);\n                            var3 = var1;\n                            var4 = 0x00;\n                        \n                            if (var4 < memory[var3:var3 + 0x20]) {\n                                memory[var4 * 0x20 + 0x20 + var3:var4 * 0x20 + 0x20 + var3 + 0x20] = var2 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                                var2 = 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2;\n                                var3 = var1;\n                                var4 = 0x01;\n                            \n                                if (var4 < memory[var3:var3 + 0x20]) {\n                                    memory[var4 * 0x20 + var3 + 0x20:var4 * 0x20 + var3 + 0x20 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                                    var2 = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                                    var3 = 0x791ac947;\n                                    var4 = 0x03e8;\n                                    var5 = 0x0658;\n                                    var6 = 0x09;\n                                    var7 = 0x0a;\n                                    var5 = func_0AE5(var6, var7);\n                                    var6 = var5;\n                                    var5 = 0x0666;\n                                    var7 = 0x05f5e100;\n                                    var5 = func_0AF4(var6, var7);\n                                    var temp8 = var4;\n                                    var4 = 0x0670;\n                                    var temp9 = var5;\n                                    var5 = temp8;\n                                    var6 = temp9;\n                                    var4 = func_0B1E(var5, var6);\n                                    var temp10 = memory[0x40:0x60];\n                                    memory[temp10:temp10 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n                                    var temp11 = var4;\n                                    var4 = 0x0695;\n                                    var5 = temp11;\n                                    var6 = 0x00;\n                                    var7 = var1;\n                                    var var8 = address(this);\n                                    var var10 = temp10 + 0x04;\n                                    var var9 = block.timestamp;\n                                    var4 = func_0B69(var5, var6, var7, var8, var9, var10);\n                                    var5 = 0x00;\n                                    var6 = memory[0x40:0x60];\n                                    var7 = var4 - var6;\n                                    var8 = var6;\n                                    var9 = 0x00;\n                                    var10 = var2;\n                                    var var11 = !address(var10).code.length;\n                                \n                                    if (var11) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp12;\n                                    temp12, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n                                    var5 = !temp12;\n                                \n                                    if (!var5) {\n                                        var temp13 = memory[0x40:0x60];\n                                        var temp14 = address(this).balance;\n                                        var temp15;\n                                        temp15, memory[temp13:temp13 + 0x00] = address(0x98b284d61e45d83014b20432ea266155197452ec).call.gas(!temp14 * 0x08fc).value(temp14)(memory[temp13:temp13 + 0x00]);\n                                        var2 = !temp15;\n                                    \n                                        if (!var2) {\n                                            storage[0x04] = storage[0x04] & ~0xff00;\n                                            goto label_0716;\n                                        } else {\n                                            var temp16 = returndata.length;\n                                            memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];\n                                            revert(memory[0x00:0x00 + returndata.length]);\n                                        }\n                                    } else {\n                                        var temp17 = returndata.length;\n                                        memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];\n                                        revert(memory[0x00:0x00 + returndata.length]);\n                                    }\n                                } else {\n                                    var5 = 0x0617;\n                                \n                                label_0B53:\n                                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                                    memory[0x04:0x24] = 0x32;\n                                    revert(memory[0x00:0x24]);\n                                }\n                            } else {\n                                var5 = 0x05cf;\n                                goto label_0B53;\n                            }\n                        }\n                    } else {\n                    label_054C:\n                        var1 = 0x03e8;\n                        var2 = 0x055b;\n                        var3 = 0x09;\n                        var4 = 0x0a;\n                        var2 = func_0AE5(var3, var4);\n                        var temp18 = var2;\n                        var2 = 0x0569;\n                        var3 = temp18;\n                        var4 = 0x05f5e100;\n                        var2 = func_0AF4(var3, var4);\n                        var temp19 = var1;\n                        var1 = 0x0573;\n                        var temp20 = var2;\n                        var2 = temp19;\n                        var3 = temp20;\n                        var1 = func_0B1E(var2, var3);\n                        memory[0x00:0x20] = address(this);\n                        memory[0x20:0x40] = 0x00;\n                        var1 = storage[keccak256(memory[0x00:0x40])] >= var1;\n                        goto label_0586;\n                    }\n                } else {\n                label_049D:\n                    var1 = 0x64;\n                    var2 = 0x04aa;\n                    var3 = 0x09;\n                    var4 = 0x0a;\n                    var2 = func_0AE5(var3, var4);\n                    var3 = var2;\n                    var2 = 0x04b8;\n                    var4 = 0x05f5e100;\n                    var2 = func_0AF4(var3, var4);\n                    var temp21 = var2;\n                    var2 = 0x04c3;\n                    var3 = temp21;\n                    var4 = 0x64;\n                    var2 = func_0AF4(var3, var4);\n                    var temp22 = var1;\n                    var1 = 0x04cd;\n                    var temp23 = var2;\n                    var2 = temp22;\n                    var3 = temp23;\n                    var1 = func_0B1E(var2, var3);\n                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                    var2 = 0x04f1;\n                    var3 = arg2;\n                    var4 = storage[keccak256(memory[0x00:0x40])];\n                    var2 = func_0B40(var3, var4);\n                \n                    if (var2 <= var1) { goto label_04FC; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else if (arg1 & (0x01 << 0xa0) - 0x01 == 0x98b284d61e45d83014b20432ea266155197452ec) { goto label_04FC; }\n            else { goto label_049D; }\n        } else if (storage[0x04] & 0xff) { goto label_0438; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = 0x00;\n    \n        if (var3 >= var2) {\n        label_08D8:\n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = 0x00;\n            return temp3 + (temp2 + 0x1f & ~0x1f) + 0x40;\n        } else {\n        label_08C5:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_08D8; }\n            else { goto label_08C5; }\n        }\n    }\n    \n    function func_08F9(var arg0) returns (var r0) {\n        var temp0 = msg.data[arg0:arg0 + 0x20];\n        var var0 = temp0;\n    \n        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0915(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0931;\n        var var3 = arg1;\n        var2 = func_08F9(var3);\n        r0 = var2;\n        arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_093F(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var var3 = 0x095d;\n        var var4 = arg1;\n        var3 = func_08F9(var4);\n        var0 = var3;\n        var3 = 0x096b;\n        var4 = arg1 + 0x20;\n        var3 = func_08F9(var4);\n        arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n        arg0 = var3;\n        r0 = var0;\n        return r0, arg0, arg1;\n    }\n    \n    function func_097B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x035f;\n        var var2 = arg1;\n        return func_08F9(var2);\n    }\n    \n    function func_0996(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x09b2;\n        var var3 = arg1;\n        var2 = func_08F9(var3);\n        var0 = var2;\n        var2 = 0x09c0;\n        var3 = arg1 + 0x20;\n        var2 = func_08F9(var3);\n        arg0 = var2;\n        r0 = var0;\n        return r0, arg0;\n    }\n    \n    function func_09C9(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        r0 = msg.data[temp0:temp0 + 0x20];\n        arg0 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_0A01(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x01;\n        var var1 = arg1;\n        var var2 = var0;\n    \n        if (arg0 <= var2) {\n        label_0A3C:\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n        label_0A0F:\n            var temp0 = var1;\n        \n            if (temp0 > ~0x00 / temp0) {\n                var var3 = 0x0a22;\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            } else if (!(arg0 & var2)) {\n                arg0 = arg0 >> var2;\n                var temp1 = var1;\n                var1 = temp1 * temp1;\n                var2 = var2;\n            \n            label_0A06:\n            \n                if (arg0 <= var2) { goto label_0A3C; }\n                else { goto label_0A0F; }\n            } else {\n                var temp2 = var1;\n                var0 = temp2 * var0;\n                arg0 = arg0 >> var2;\n                var2 = var2;\n                var1 = temp2 * temp2;\n                goto label_0A06;\n            }\n        }\n    }\n    \n    function func_0A44(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg0) {\n            var0 = 0x01;\n            goto label_02E1;\n        } else if (arg1) {\n            var var1 = arg1;\n        \n            if (var1 == 0x01) {\n                var0 = 0x01;\n            \n            label_02E1:\n                return var0;\n            } else if (var1 != 0x02) {\n                var temp0 = arg0;\n                var temp1 = arg1;\n            \n                if (!(((temp1 < 0x0b) & (temp0 < 0x4e)) | ((temp1 < 0x0133) & (temp0 < 0x20)))) {\n                    var1 = 0x0ac9;\n                    var2 = arg0;\n                    var var3 = arg1;\n                    var1, var2 = func_0A01(var2, var3);\n                \n                    if (var1 <= ~0x00 / var2) { return var2 * var1; }\n                \n                    var3 = 0x0add;\n                    goto label_09EB;\n                } else {\n                    var0 = arg1 ** arg0;\n                    goto label_02E1;\n                }\n            } else if (arg0 <= 0xff) {\n                var0 = 0x01 << arg0;\n                goto label_02E1;\n            } else {\n                var var2 = 0x0a91;\n            \n            label_09EB:\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_02E1;\n        }\n    }\n    \n    function func_0AE5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x035f;\n        var var2 = arg0 & 0xff;\n        var var3 = arg1;\n        var1 = func_0A44(var2, var3);\n    \n    label_035F:\n        return var1;\n    }\n    \n    function func_0AF4(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg0;\n        var var0 = temp1 * temp0;\n    \n        if ((temp1 == var0 / temp0) | !temp0) { return var0; }\n    \n        var var1 = 0x02e1;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0B0B(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 - arg0;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var var1 = 0x02e1;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0B1E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) { return arg1 / arg0; }\n    \n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x12;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0B40(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = arg0 + temp0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var var1 = 0x02e1;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0B69(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg5;\n        memory[temp0:temp0 + 0x20] = arg0;\n        var var2 = 0x20;\n        memory[temp0 + var2:temp0 + var2 + 0x20] = arg1;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0xa0;\n        var temp1 = arg2;\n        var temp2 = memory[temp1:temp1 + 0x20];\n        var var4 = temp2;\n        memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20] = var4;\n        var var3 = temp0 + 0xc0;\n        var var1 = temp1 + var2;\n        var var5 = 0x00;\n    \n        if (var5 >= var4) {\n        label_0BB9:\n            var temp3 = arg5;\n            memory[temp3 + 0x60:temp3 + 0x60 + 0x20] = arg3 & (0x01 << 0xa0) - 0x01;\n            memory[temp3 + 0x80:temp3 + 0x80 + 0x20] = arg4;\n            return var3;\n        } else {\n        label_0B9D:\n            var temp4 = var1;\n            var temp5 = var3;\n            memory[temp5:temp5 + 0x20] = memory[temp4:temp4 + 0x20] & (0x01 << 0xa0) - 0x01;\n            var temp6 = var2;\n            var1 = temp6 + temp4;\n            var3 = temp6 + temp5;\n            var5 = var5 + 0x01;\n        \n            if (var5 >= var4) { goto label_0BB9; }\n            else { goto label_0B9D; }\n        }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (0x70a08231 > var0) {\n                if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x00df;\n                    var temp0 = memory[0x40:0x60];\n                    var var2 = temp0;\n                    memory[0x40:0x60] = var2 + 0x40;\n                    memory[var2:var2 + 0x20] = 0x07;\n                    memory[var2 + 0x20:var2 + 0x20 + 0x20] = 0x57614461467571 << 0xc8;\n                \n                label_00DF:\n                    var temp1 = var2;\n                    var2 = 0x00ec;\n                    var var3 = temp1;\n                    var var4 = memory[0x40:0x60];\n                    var2 = name(var3, var4);\n                \n                label_00EC:\n                    var temp2 = memory[0x40:0x60];\n                    return memory[temp2:temp2 + var2 - temp2];\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0115;\n                    var2 = 0x0110;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2, var3 = func_0915(var3, var4);\n                    var1 = func_0110(var2, var3);\n                \n                label_0115:\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = !!var1;\n                    var1 = temp3 + 0x20;\n                    goto label_00EC;\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x013a;\n                    var2 = totalSupply();\n                \n                label_013A:\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = var2;\n                    var2 = temp4 + 0x20;\n                    goto label_00EC;\n                } else if (var0 == 0x23b872dd) {\n                    // Dispatch table entry for transferFrom(address,address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0115;\n                    var2 = 0x0163;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2, var3, var4 = func_093F(var3, var4);\n                    var1 = func_0163(var2, var3, var4);\n                    goto label_0115;\n                } else if (var0 == 0x313ce567) {\n                    // Dispatch table entry for decimals()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x017d;\n                    var2 = 0x09;\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = var2 & 0xff;\n                    var2 = temp5 + 0x20;\n                    goto label_00EC;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013a;\n                var2 = 0x01aa;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_097B(var3, var4);\n                var2 = func_01AA(var2);\n                goto label_013A;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00df;\n                var temp6 = memory[0x40:0x60];\n                var2 = temp6;\n                memory[0x40:0x60] = var2 + 0x40;\n                memory[var2:var2 + 0x20] = 0x03;\n                memory[var2 + 0x20:var2 + 0x20 + 0x20] = 0x2ba223 << 0xe9;\n                goto label_00DF;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0115;\n                var2 = 0x0206;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_0915(var3, var4);\n                var4 = 0x00;\n                var var5 = 0x035f;\n                var var6 = msg.sender;\n                var var7 = var2;\n                var var8 = var3;\n                var5 = func_03D6(var6, var7, var8);\n                var1 = var5;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xc9567bf9) {\n                // Dispatch table entry for openTrading()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0220;\n                openTrading();\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013a;\n                var2 = 0x023d;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_0996(var3, var4);\n                var2 = func_023D(var2, var3);\n                goto label_013A;\n            } else if (var0 == 0xef6d6e07) {\n                // Dispatch table entry for 0xef6d6e07 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0220;\n                var2 = 0x0275;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_09C9(var3, var4);\n                func_0275(var2, var3);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (msg.data.length) { revert(memory[0x00:0x00]); }\n        else { stop(); }\n    }\n    \n    function func_0110(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = temp0;\n        var temp1 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp1;\n        var temp2 = memory[0x40:0x60];\n        var var0 = 0x00;\n        var var2 = msg.sender;\n        var var1 = arg0 & (0x01 << 0xa0) - 0x01;\n        var var3 = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\n        memory[temp2:temp2 + 0x20] = temp1;\n        var var4 = temp2 + 0x20;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + var4 - temp3], [stack[-2], stack[-3], stack[-4]]);\n        return 0x01;\n    }\n    \n    function func_0163(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[var0:var0 + 0x40]);\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var1 = arg2;\n        var var2 = keccak256(memory[var0:var0 + 0x40]);\n        var var3 = var0;\n        var var4 = 0x0339;\n        var var6 = storage[var2];\n        var var5 = var1;\n        var4 = func_0B0B(var5, var6);\n        storage[var2] = var4;\n        var1 = 0x034a;\n        var2 = arg0;\n        var3 = arg1;\n        var4 = arg2;\n        return func_03D6(var2, var3, var4);\n    }\n    \n    function func_01AA(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_023D(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0275(var arg0, var arg1) {\n        if (!(msg.sender + ~0x98b284d61e45d83014b20432ea266155197452eb)) {\n            storage[0x02] = arg0;\n            storage[0x03] = arg1;\n            return;\n        } else if (arg0 < 0x0a) {\n            if (arg1 < 0x0a) { revert(memory[0x00:0x00]); }\n            else { revert(memory[0x00:0x00]); }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) {\n        r0 = 0x02f3;\n        var var1 = 0x09;\n        var var2 = 0x0a;\n        r0 = func_0AE5(var1, var2);\n        var1 = r0;\n        r0 = 0x0301;\n        var2 = 0x05f5e100;\n        return func_0AF4(var1, var2);\n    }\n    \n    function openTrading() {\n        if (msg.sender != 0x98b284d61e45d83014b20432ea266155197452ec) { revert(memory[0x00:0x00]); }\n    \n        storage[0x04] = (storage[0x04] & ~0xff) | 0x01;\n    }\n    \n    function func_03D6(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = var0;\n        var var1 = arg2;\n        var var2 = keccak256(memory[var0:var0 + 0x40]);\n        var var3 = var0;\n        var var4 = 0x0400;\n        var var5 = var1;\n        var var6 = storage[var2];\n        var4 = func_0B0B(var5, var6);\n        storage[var2] = var4;\n    \n        if (arg0 & (0x01 << 0xa0) - 0x01 == 0x98b284d61e45d83014b20432ea266155197452ec) {\n        label_0438:\n            var1 = arg1 & (0x01 << 0xa0) - 0x01 != (0x01 << 0xa0) - 0x01 & 0x00000000000000000000000030b1e0e276ed8db10ffd01e4f26db9c9faddf959;\n        \n            if (!var1) {\n                if (!var1) {\n                label_04FC:\n                    var1 = arg1 & (0x01 << 0xa0) - 0x01 == (0x01 << 0xa0) - 0x01 & 0x00000000000000000000000030b1e0e276ed8db10ffd01e4f26db9c9faddf959;\n                \n                    if (var1) {\n                        var1 = !(storage[0x04] / 0x0100 & 0xff);\n                    \n                        if (!var1) { goto label_0586; }\n                        else { goto label_054C; }\n                    } else if (!var1) {\n                    label_0586:\n                    \n                        if (!var1) {\n                        label_0716:\n                            var1 = address(this) != arg0 & (0x01 << 0xa0) - 0x01;\n                        \n                            if (address(this) != arg0 & (0x01 << 0xa0) - 0x01) {\n                                if (!var1) {\n                                label_0825:\n                                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                                    memory[0x20:0x40] = 0x00;\n                                    var2 = keccak256(memory[0x00:0x40]);\n                                    var1 = arg2;\n                                    var3 = 0x00;\n                                    var4 = 0x084d;\n                                    var6 = storage[var2];\n                                    var5 = var1;\n                                    var4 = func_0B40(var5, var6);\n                                    storage[var2] = var4;\n                                    var1 = arg1 & (0x01 << 0xa0) - 0x01;\n                                    var2 = arg0 & (0x01 << 0xa0) - 0x01;\n                                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                                    var temp0 = memory[0x40:0x60];\n                                    memory[temp0:temp0 + 0x20] = arg2;\n                                    var4 = temp0 + 0x20;\n                                    var temp1 = memory[0x40:0x60];\n                                    log(memory[temp1:temp1 + var4 - temp1], [stack[-2], stack[-3], stack[-4]]);\n                                    return 0x01;\n                                } else {\n                                label_0752:\n                                    var1 = 0x00;\n                                    var2 = 0x64;\n                                \n                                    if (arg0 & (0x01 << 0xa0) - 0x01 == (0x01 << 0xa0) - 0x01 & 0x00000000000000000000000030b1e0e276ed8db10ffd01e4f26db9c9faddf959) {\n                                        var4 = storage[0x02];\n                                        var3 = 0x07a4;\n                                        var5 = arg2;\n                                        var3 = func_0AF4(var4, var5);\n                                    \n                                    label_07A4:\n                                        var temp2 = var2;\n                                        var2 = 0x07ae;\n                                        var temp3 = var3;\n                                        var3 = temp2;\n                                        var4 = temp3;\n                                        var2 = func_0B1E(var3, var4);\n                                        var temp4 = var2;\n                                        var1 = temp4;\n                                        var2 = 0x07ba;\n                                        var3 = var1;\n                                        var4 = arg2;\n                                        var2 = func_0B0B(var3, var4);\n                                        memory[0x00:0x20] = address(this);\n                                        memory[0x20:0x40] = 0x00;\n                                        arg2 = var2;\n                                        var2 = var1;\n                                        var3 = keccak256(memory[0x00:0x40]);\n                                        var4 = 0x00;\n                                        var5 = 0x07de;\n                                        var6 = var2;\n                                        var var7 = storage[var3];\n                                        var5 = func_0B40(var6, var7);\n                                        storage[var3] = var5;\n                                        var temp5 = memory[0x40:0x60];\n                                        memory[temp5:temp5 + 0x20] = var1;\n                                        var temp6 = memory[0x40:0x60];\n                                        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-9] & (0x01 << 0xa0) - 0x01, address(this)]);\n                                        goto label_0825;\n                                    } else {\n                                        var3 = storage[0x03];\n                                        var4 = var3;\n                                        var3 = 0x07a4;\n                                        var5 = arg2;\n                                        var3 = func_0AF4(var4, var5);\n                                        goto label_07A4;\n                                    }\n                                }\n                            } else if (arg1 & (0x01 << 0xa0) - 0x01 == 0x98b284d61e45d83014b20432ea266155197452ec) { goto label_0825; }\n                            else { goto label_0752; }\n                        } else {\n                            storage[0x04] = (storage[0x04] & ~0xff00) | 0x0100;\n                            var temp7 = memory[0x40:0x60];\n                            memory[temp7:temp7 + 0x20] = 0x02;\n                            memory[0x40:0x60] = temp7 + 0x60;\n                            memory[temp7 + 0x20:temp7 + 0x20 + 0x40] = msg.data[msg.data.length:msg.data.length + 0x40];\n                            var1 = temp7;\n                            var2 = address(this);\n                            var3 = var1;\n                            var4 = 0x00;\n                        \n                            if (var4 < memory[var3:var3 + 0x20]) {\n                                memory[var4 * 0x20 + 0x20 + var3:var4 * 0x20 + 0x20 + var3 + 0x20] = var2 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                                var2 = 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2;\n                                var3 = var1;\n                                var4 = 0x01;\n                            \n                                if (var4 < memory[var3:var3 + 0x20]) {\n                                    memory[var4 * 0x20 + var3 + 0x20:var4 * 0x20 + var3 + 0x20 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                                    var2 = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                                    var3 = 0x791ac947;\n                                    var4 = 0x03e8;\n                                    var5 = 0x0658;\n                                    var6 = 0x09;\n                                    var7 = 0x0a;\n                                    var5 = func_0AE5(var6, var7);\n                                    var6 = var5;\n                                    var5 = 0x0666;\n                                    var7 = 0x05f5e100;\n                                    var5 = func_0AF4(var6, var7);\n                                    var temp8 = var4;\n                                    var4 = 0x0670;\n                                    var temp9 = var5;\n                                    var5 = temp8;\n                                    var6 = temp9;\n                                    var4 = func_0B1E(var5, var6);\n                                    var temp10 = memory[0x40:0x60];\n                                    memory[temp10:temp10 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n                                    var temp11 = var4;\n                                    var4 = 0x0695;\n                                    var5 = temp11;\n                                    var6 = 0x00;\n                                    var7 = var1;\n                                    var var8 = address(this);\n                                    var var10 = temp10 + 0x04;\n                                    var var9 = block.timestamp;\n                                    var4 = func_0B69(var5, var6, var7, var8, var9, var10);\n                                    var5 = 0x00;\n                                    var6 = memory[0x40:0x60];\n                                    var7 = var4 - var6;\n                                    var8 = var6;\n                                    var9 = 0x00;\n                                    var10 = var2;\n                                    var var11 = !address(var10).code.length;\n                                \n                                    if (var11) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp12;\n                                    temp12, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n                                    var5 = !temp12;\n                                \n                                    if (!var5) {\n                                        var temp13 = memory[0x40:0x60];\n                                        var temp14 = address(this).balance;\n                                        var temp15;\n                                        temp15, memory[temp13:temp13 + 0x00] = address(0x98b284d61e45d83014b20432ea266155197452ec).call.gas(!temp14 * 0x08fc).value(temp14)(memory[temp13:temp13 + 0x00]);\n                                        var2 = !temp15;\n                                    \n                                        if (!var2) {\n                                            storage[0x04] = storage[0x04] & ~0xff00;\n                                            goto label_0716;\n                                        } else {\n                                            var temp16 = returndata.length;\n                                            memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];\n                                            revert(memory[0x00:0x00 + returndata.length]);\n                                        }\n                                    } else {\n                                        var temp17 = returndata.length;\n                                        memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];\n                                        revert(memory[0x00:0x00 + returndata.length]);\n                                    }\n                                } else {\n                                    var5 = 0x0617;\n                                \n                                label_0B53:\n                                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                                    memory[0x04:0x24] = 0x32;\n                                    revert(memory[0x00:0x24]);\n                                }\n                            } else {\n                                var5 = 0x05cf;\n                                goto label_0B53;\n                            }\n                        }\n                    } else {\n                    label_054C:\n                        var1 = 0x03e8;\n                        var2 = 0x055b;\n                        var3 = 0x09;\n                        var4 = 0x0a;\n                        var2 = func_0AE5(var3, var4);\n                        var temp18 = var2;\n                        var2 = 0x0569;\n                        var3 = temp18;\n                        var4 = 0x05f5e100;\n                        var2 = func_0AF4(var3, var4);\n                        var temp19 = var1;\n                        var1 = 0x0573;\n                        var temp20 = var2;\n                        var2 = temp19;\n                        var3 = temp20;\n                        var1 = func_0B1E(var2, var3);\n                        memory[0x00:0x20] = address(this);\n                        memory[0x20:0x40] = 0x00;\n                        var1 = storage[keccak256(memory[0x00:0x40])] >= var1;\n                        goto label_0586;\n                    }\n                } else {\n                label_049D:\n                    var1 = 0x64;\n                    var2 = 0x04aa;\n                    var3 = 0x09;\n                    var4 = 0x0a;\n                    var2 = func_0AE5(var3, var4);\n                    var3 = var2;\n                    var2 = 0x04b8;\n                    var4 = 0x05f5e100;\n                    var2 = func_0AF4(var3, var4);\n                    var temp21 = var2;\n                    var2 = 0x04c3;\n                    var3 = temp21;\n                    var4 = 0x64;\n                    var2 = func_0AF4(var3, var4);\n                    var temp22 = var1;\n                    var1 = 0x04cd;\n                    var temp23 = var2;\n                    var2 = temp22;\n                    var3 = temp23;\n                    var1 = func_0B1E(var2, var3);\n                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                    var2 = 0x04f1;\n                    var3 = arg2;\n                    var4 = storage[keccak256(memory[0x00:0x40])];\n                    var2 = func_0B40(var3, var4);\n                \n                    if (var2 <= var1) { goto label_04FC; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else if (arg1 & (0x01 << 0xa0) - 0x01 == 0x98b284d61e45d83014b20432ea266155197452ec) { goto label_04FC; }\n            else { goto label_049D; }\n        } else if (storage[0x04] & 0xff) { goto label_0438; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = 0x00;\n    \n        if (var3 >= var2) {\n        label_08D8:\n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = 0x00;\n            return temp3 + (temp2 + 0x1f & ~0x1f) + 0x40;\n        } else {\n        label_08C5:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_08D8; }\n            else { goto label_08C5; }\n        }\n    }\n    \n    function func_08F9(var arg0) returns (var r0) {\n        var temp0 = msg.data[arg0:arg0 + 0x20];\n        var var0 = temp0;\n    \n        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0915(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0931;\n        var var3 = arg1;\n        var2 = func_08F9(var3);\n        r0 = var2;\n        arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_093F(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var var3 = 0x095d;\n        var var4 = arg1;\n        var3 = func_08F9(var4);\n        var0 = var3;\n        var3 = 0x096b;\n        var4 = arg1 + 0x20;\n        var3 = func_08F9(var4);\n        arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n        arg0 = var3;\n        r0 = var0;\n        return r0, arg0, arg1;\n    }\n    \n    function func_097B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x035f;\n        var var2 = arg1;\n        return func_08F9(var2);\n    }\n    \n    function func_0996(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x09b2;\n        var var3 = arg1;\n        var2 = func_08F9(var3);\n        var0 = var2;\n        var2 = 0x09c0;\n        var3 = arg1 + 0x20;\n        var2 = func_08F9(var3);\n        arg0 = var2;\n        r0 = var0;\n        return r0, arg0;\n    }\n    \n    function func_09C9(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        r0 = msg.data[temp0:temp0 + 0x20];\n        arg0 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_0A01(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x01;\n        var var1 = arg1;\n        var var2 = var0;\n    \n        if (arg0 <= var2) {\n        label_0A3C:\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n        label_0A0F:\n            var temp0 = var1;\n        \n            if (temp0 > ~0x00 / temp0) {\n                var var3 = 0x0a22;\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            } else if (!(arg0 & var2)) {\n                arg0 = arg0 >> var2;\n                var temp1 = var1;\n                var1 = temp1 * temp1;\n                var2 = var2;\n            \n            label_0A06:\n            \n                if (arg0 <= var2) { goto label_0A3C; }\n                else { goto label_0A0F; }\n            } else {\n                var temp2 = var1;\n                var0 = temp2 * var0;\n                arg0 = arg0 >> var2;\n                var2 = var2;\n                var1 = temp2 * temp2;\n                goto label_0A06;\n            }\n        }\n    }\n    \n    function func_0A44(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg0) {\n            var0 = 0x01;\n            goto label_02E1;\n        } else if (arg1) {\n            var var1 = arg1;\n        \n            if (var1 == 0x01) {\n                var0 = 0x01;\n            \n            label_02E1:\n                return var0;\n            } else if (var1 != 0x02) {\n                var temp0 = arg0;\n                var temp1 = arg1;\n            \n                if (!(((temp1 < 0x0b) & (temp0 < 0x4e)) | ((temp1 < 0x0133) & (temp0 < 0x20)))) {\n                    var1 = 0x0ac9;\n                    var2 = arg0;\n                    var var3 = arg1;\n                    var1, var2 = func_0A01(var2, var3);\n                \n                    if (var1 <= ~0x00 / var2) { return var2 * var1; }\n                \n                    var3 = 0x0add;\n                    goto label_09EB;\n                } else {\n                    var0 = arg1 ** arg0;\n                    goto label_02E1;\n                }\n            } else if (arg0 <= 0xff) {\n                var0 = 0x01 << arg0;\n                goto label_02E1;\n            } else {\n                var var2 = 0x0a91;\n            \n            label_09EB:\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_02E1;\n        }\n    }\n    \n    function func_0AE5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x035f;\n        var var2 = arg0 & 0xff;\n        var var3 = arg1;\n        var1 = func_0A44(var2, var3);\n    \n    label_035F:\n        return var1;\n    }\n    \n    function func_0AF4(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg0;\n        var var0 = temp1 * temp0;\n    \n        if ((temp1 == var0 / temp0) | !temp0) { return var0; }\n    \n        var var1 = 0x02e1;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0B0B(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 - arg0;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var var1 = 0x02e1;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0B1E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) { return arg1 / arg0; }\n    \n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x12;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0B40(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = arg0 + temp0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var var1 = 0x02e1;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0B69(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg5;\n        memory[temp0:temp0 + 0x20] = arg0;\n        var var2 = 0x20;\n        memory[temp0 + var2:temp0 + var2 + 0x20] = arg1;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0xa0;\n        var temp1 = arg2;\n        var temp2 = memory[temp1:temp1 + 0x20];\n        var var4 = temp2;\n        memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20] = var4;\n        var var3 = temp0 + 0xc0;\n        var var1 = temp1 + var2;\n        var var5 = 0x00;\n    \n        if (var5 >= var4) {\n        label_0BB9:\n            var temp3 = arg5;\n            memory[temp3 + 0x60:temp3 + 0x60 + 0x20] = arg3 & (0x01 << 0xa0) - 0x01;\n            memory[temp3 + 0x80:temp3 + 0x80 + 0x20] = arg4;\n            return var3;\n        } else {\n        label_0B9D:\n            var temp4 = var1;\n            var temp5 = var3;\n            memory[temp5:temp5 + 0x20] = memory[temp4:temp4 + 0x20] & (0x01 << 0xa0) - 0x01;\n            var temp6 = var2;\n            var1 = temp6 + temp4;\n            var3 = temp6 + temp5;\n            var5 = var5 + 0x01;\n        \n            if (var5 >= var4) { goto label_0BB9; }\n            else { goto label_0B9D; }\n        }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (0x70a08231 > var0) {\n                if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x00df;\n                    var temp0 = memory[0x40:0x60];\n                    var var2 = temp0;\n                    memory[0x40:0x60] = var2 + 0x40;\n                    memory[var2:var2 + 0x20] = 0x07;\n                    memory[var2 + 0x20:var2 + 0x20 + 0x20] = 0x57614461467571 << 0xc8;\n                \n                label_00DF:\n                    var temp1 = var2;\n                    var2 = 0x00ec;\n                    var var3 = temp1;\n                    var var4 = memory[0x40:0x60];\n                    var2 = name(var3, var4);\n                \n                label_00EC:\n                    var temp2 = memory[0x40:0x60];\n                    return memory[temp2:temp2 + var2 - temp2];\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0115;\n                    var2 = 0x0110;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2, var3 = func_0915(var3, var4);\n                    var1 = func_0110(var2, var3);\n                \n                label_0115:\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = !!var1;\n                    var1 = temp3 + 0x20;\n                    goto label_00EC;\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x013a;\n                    var2 = totalSupply();\n                \n                label_013A:\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = var2;\n                    var2 = temp4 + 0x20;\n                    goto label_00EC;\n                } else if (var0 == 0x23b872dd) {\n                    // Dispatch table entry for transferFrom(address,address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0115;\n                    var2 = 0x0163;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2, var3, var4 = func_093F(var3, var4);\n                    var1 = func_0163(var2, var3, var4);\n                    goto label_0115;\n                } else if (var0 == 0x313ce567) {\n                    // Dispatch table entry for decimals()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x017d;\n                    var2 = 0x09;\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = var2 & 0xff;\n                    var2 = temp5 + 0x20;\n                    goto label_00EC;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013a;\n                var2 = 0x01aa;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_097B(var3, var4);\n                var2 = func_01AA(var2);\n                goto label_013A;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00df;\n                var temp6 = memory[0x40:0x60];\n                var2 = temp6;\n                memory[0x40:0x60] = var2 + 0x40;\n                memory[var2:var2 + 0x20] = 0x03;\n                memory[var2 + 0x20:var2 + 0x20 + 0x20] = 0x2ba223 << 0xe9;\n                goto label_00DF;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0115;\n                var2 = 0x0206;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_0915(var3, var4);\n                var4 = 0x00;\n                var var5 = 0x035f;\n                var var6 = msg.sender;\n                var var7 = var2;\n                var var8 = var3;\n                var5 = func_03D6(var6, var7, var8);\n                var1 = var5;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xc9567bf9) {\n                // Dispatch table entry for openTrading()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0220;\n                openTrading();\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013a;\n                var2 = 0x023d;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_0996(var3, var4);\n                var2 = func_023D(var2, var3);\n                goto label_013A;\n            } else if (var0 == 0xef6d6e07) {\n                // Dispatch table entry for 0xef6d6e07 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0220;\n                var2 = 0x0275;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_09C9(var3, var4);\n                func_0275(var2, var3);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (msg.data.length) { revert(memory[0x00:0x00]); }\n        else { stop(); }\n    }\n    \n    function func_0110(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = temp0;\n        var temp1 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp1;\n        var temp2 = memory[0x40:0x60];\n        var var0 = 0x00;\n        var var2 = msg.sender;\n        var var1 = arg0 & (0x01 << 0xa0) - 0x01;\n        var var3 = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\n        memory[temp2:temp2 + 0x20] = temp1;\n        var var4 = temp2 + 0x20;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + var4 - temp3], [stack[-2], stack[-3], stack[-4]]);\n        return 0x01;\n    }\n    \n    function func_0163(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[var0:var0 + 0x40]);\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var1 = arg2;\n        var var2 = keccak256(memory[var0:var0 + 0x40]);\n        var var3 = var0;\n        var var4 = 0x0339;\n        var var6 = storage[var2];\n        var var5 = var1;\n        var4 = func_0B0B(var5, var6);\n        storage[var2] = var4;\n        var1 = 0x034a;\n        var2 = arg0;\n        var3 = arg1;\n        var4 = arg2;\n        return func_03D6(var2, var3, var4);\n    }\n    \n    function func_01AA(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_023D(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0275(var arg0, var arg1) {\n        if (!(msg.sender + ~0x98b284d61e45d83014b20432ea266155197452eb)) {\n            storage[0x02] = arg0;\n            storage[0x03] = arg1;\n            return;\n        } else if (arg0 < 0x0a) {\n            if (arg1 < 0x0a) { revert(memory[0x00:0x00]); }\n            else { revert(memory[0x00:0x00]); }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) {\n        r0 = 0x02f3;\n        var var1 = 0x09;\n        var var2 = 0x0a;\n        r0 = func_0AE5(var1, var2);\n        var1 = r0;\n        r0 = 0x0301;\n        var2 = 0x05f5e100;\n        return func_0AF4(var1, var2);\n    }\n    \n    function openTrading() {\n        if (msg.sender != 0x98b284d61e45d83014b20432ea266155197452ec) { revert(memory[0x00:0x00]); }\n    \n        storage[0x04] = (storage[0x04] & ~0xff) | 0x01;\n    }\n    \n    function func_03D6(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = var0;\n        var var1 = arg2;\n        var var2 = keccak256(memory[var0:var0 + 0x40]);\n        var var3 = var0;\n        var var4 = 0x0400;\n        var var5 = var1;\n        var var6 = storage[var2];\n        var4 = func_0B0B(var5, var6);\n        storage[var2] = var4;\n    \n        if (arg0 & (0x01 << 0xa0) - 0x01 == 0x98b284d61e45d83014b20432ea266155197452ec) {\n        label_0438:\n            var1 = arg1 & (0x01 << 0xa0) - 0x01 != (0x01 << 0xa0) - 0x01 & 0x00000000000000000000000030b1e0e276ed8db10ffd01e4f26db9c9faddf959;\n        \n            if (!var1) {\n                if (!var1) {\n                label_04FC:\n                    var1 = arg1 & (0x01 << 0xa0) - 0x01 == (0x01 << 0xa0) - 0x01 & 0x00000000000000000000000030b1e0e276ed8db10ffd01e4f26db9c9faddf959;\n                \n                    if (var1) {\n                        var1 = !(storage[0x04] / 0x0100 & 0xff);\n                    \n                        if (!var1) { goto label_0586; }\n                        else { goto label_054C; }\n                    } else if (!var1) {\n                    label_0586:\n                    \n                        if (!var1) {\n                        label_0716:\n                            var1 = address(this) != arg0 & (0x01 << 0xa0) - 0x01;\n                        \n                            if (address(this) != arg0 & (0x01 << 0xa0) - 0x01) {\n                                if (!var1) {\n                                label_0825:\n                                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                                    memory[0x20:0x40] = 0x00;\n                                    var2 = keccak256(memory[0x00:0x40]);\n                                    var1 = arg2;\n                                    var3 = 0x00;\n                                    var4 = 0x084d;\n                                    var6 = storage[var2];\n                                    var5 = var1;\n                                    var4 = func_0B40(var5, var6);\n                                    storage[var2] = var4;\n                                    var1 = arg1 & (0x01 << 0xa0) - 0x01;\n                                    var2 = arg0 & (0x01 << 0xa0) - 0x01;\n                                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                                    var temp0 = memory[0x40:0x60];\n                                    memory[temp0:temp0 + 0x20] = arg2;\n                                    var4 = temp0 + 0x20;\n                                    var temp1 = memory[0x40:0x60];\n                                    log(memory[temp1:temp1 + var4 - temp1], [stack[-2], stack[-3], stack[-4]]);\n                                    return 0x01;\n                                } else {\n                                label_0752:\n                                    var1 = 0x00;\n                                    var2 = 0x64;\n                                \n                                    if (arg0 & (0x01 << 0xa0) - 0x01 == (0x01 << 0xa0) - 0x01 & 0x00000000000000000000000030b1e0e276ed8db10ffd01e4f26db9c9faddf959) {\n                                        var4 = storage[0x02];\n                                        var3 = 0x07a4;\n                                        var5 = arg2;\n                                        var3 = func_0AF4(var4, var5);\n                                    \n                                    label_07A4:\n                                        var temp2 = var2;\n                                        var2 = 0x07ae;\n                                        var temp3 = var3;\n                                        var3 = temp2;\n                                        var4 = temp3;\n                                        var2 = func_0B1E(var3, var4);\n                                        var temp4 = var2;\n                                        var1 = temp4;\n                                        var2 = 0x07ba;\n                                        var3 = var1;\n                                        var4 = arg2;\n                                        var2 = func_0B0B(var3, var4);\n                                        memory[0x00:0x20] = address(this);\n                                        memory[0x20:0x40] = 0x00;\n                                        arg2 = var2;\n                                        var2 = var1;\n                                        var3 = keccak256(memory[0x00:0x40]);\n                                        var4 = 0x00;\n                                        var5 = 0x07de;\n                                        var6 = var2;\n                                        var var7 = storage[var3];\n                                        var5 = func_0B40(var6, var7);\n                                        storage[var3] = var5;\n                                        var temp5 = memory[0x40:0x60];\n                                        memory[temp5:temp5 + 0x20] = var1;\n                                        var temp6 = memory[0x40:0x60];\n                                        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-9] & (0x01 << 0xa0) - 0x01, address(this)]);\n                                        goto label_0825;\n                                    } else {\n                                        var3 = storage[0x03];\n                                        var4 = var3;\n                                        var3 = 0x07a4;\n                                        var5 = arg2;\n                                        var3 = func_0AF4(var4, var5);\n                                        goto label_07A4;\n                                    }\n                                }\n                            } else if (arg1 & (0x01 << 0xa0) - 0x01 == 0x98b284d61e45d83014b20432ea266155197452ec) { goto label_0825; }\n                            else { goto label_0752; }\n                        } else {\n                            storage[0x04] = (storage[0x04] & ~0xff00) | 0x0100;\n                            var temp7 = memory[0x40:0x60];\n                            memory[temp7:temp7 + 0x20] = 0x02;\n                            memory[0x40:0x60] = temp7 + 0x60;\n                            memory[temp7 + 0x20:temp7 + 0x20 + 0x40] = msg.data[msg.data.length:msg.data.length + 0x40];\n                            var1 = temp7;\n                            var2 = address(this);\n                            var3 = var1;\n                            var4 = 0x00;\n                        \n                            if (var4 < memory[var3:var3 + 0x20]) {\n                                memory[var4 * 0x20 + 0x20 + var3:var4 * 0x20 + 0x20 + var3 + 0x20] = var2 & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                                var2 = 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2;\n                                var3 = var1;\n                                var4 = 0x01;\n                            \n                                if (var4 < memory[var3:var3 + 0x20]) {\n                                    memory[var4 * 0x20 + var3 + 0x20:var4 * 0x20 + var3 + 0x20 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                                    var2 = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                                    var3 = 0x791ac947;\n                                    var4 = 0x03e8;\n                                    var5 = 0x0658;\n                                    var6 = 0x09;\n                                    var7 = 0x0a;\n                                    var5 = func_0AE5(var6, var7);\n                                    var6 = var5;\n                                    var5 = 0x0666;\n                                    var7 = 0x05f5e100;\n                                    var5 = func_0AF4(var6, var7);\n                                    var temp8 = var4;\n                                    var4 = 0x0670;\n                                    var temp9 = var5;\n                                    var5 = temp8;\n                                    var6 = temp9;\n                                    var4 = func_0B1E(var5, var6);\n                                    var temp10 = memory[0x40:0x60];\n                                    memory[temp10:temp10 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n                                    var temp11 = var4;\n                                    var4 = 0x0695;\n                                    var5 = temp11;\n                                    var6 = 0x00;\n                                    var7 = var1;\n                                    var var8 = address(this);\n                                    var var10 = temp10 + 0x04;\n                                    var var9 = block.timestamp;\n                                    var4 = func_0B69(var5, var6, var7, var8, var9, var10);\n                                    var5 = 0x00;\n                                    var6 = memory[0x40:0x60];\n                                    var7 = var4 - var6;\n                                    var8 = var6;\n                                    var9 = 0x00;\n                                    var10 = var2;\n                                    var var11 = !address(var10).code.length;\n                                \n                                    if (var11) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp12;\n                                    temp12, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n                                    var5 = !temp12;\n                                \n                                    if (!var5) {\n                                        var temp13 = memory[0x40:0x60];\n                                        var temp14 = address(this).balance;\n                                        var temp15;\n                                        temp15, memory[temp13:temp13 + 0x00] = address(0x98b284d61e45d83014b20432ea266155197452ec).call.gas(!temp14 * 0x08fc).value(temp14)(memory[temp13:temp13 + 0x00]);\n                                        var2 = !temp15;\n                                    \n                                        if (!var2) {\n                                            storage[0x04] = storage[0x04] & ~0xff00;\n                                            goto label_0716;\n                                        } else {\n                                            var temp16 = returndata.length;\n                                            memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];\n                                            revert(memory[0x00:0x00 + returndata.length]);\n                                        }\n                                    } else {\n                                        var temp17 = returndata.length;\n                                        memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];\n                                        revert(memory[0x00:0x00 + returndata.length]);\n                                    }\n                                } else {\n                                    var5 = 0x0617;\n                                \n                                label_0B53:\n                                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                                    memory[0x04:0x24] = 0x32;\n                                    revert(memory[0x00:0x24]);\n                                }\n                            } else {\n                                var5 = 0x05cf;\n                                goto label_0B53;\n                            }\n                        }\n                    } else {\n                    label_054C:\n                        var1 = 0x03e8;\n                        var2 = 0x055b;\n                        var3 = 0x09;\n                        var4 = 0x0a;\n                        var2 = func_0AE5(var3, var4);\n                        var temp18 = var2;\n                        var2 = 0x0569;\n                        var3 = temp18;\n                        var4 = 0x05f5e100;\n                        var2 = func_0AF4(var3, var4);\n                        var temp19 = var1;\n                        var1 = 0x0573;\n                        var temp20 = var2;\n                        var2 = temp19;\n                        var3 = temp20;\n                        var1 = func_0B1E(var2, var3);\n                        memory[0x00:0x20] = address(this);\n                        memory[0x20:0x40] = 0x00;\n                        var1 = storage[keccak256(memory[0x00:0x40])] >= var1;\n                        goto label_0586;\n                    }\n                } else {\n                label_049D:\n                    var1 = 0x64;\n                    var2 = 0x04aa;\n                    var3 = 0x09;\n                    var4 = 0x0a;\n                    var2 = func_0AE5(var3, var4);\n                    var3 = var2;\n                    var2 = 0x04b8;\n                    var4 = 0x05f5e100;\n                    var2 = func_0AF4(var3, var4);\n                    var temp21 = var2;\n                    var2 = 0x04c3;\n                    var3 = temp21;\n                    var4 = 0x64;\n                    var2 = func_0AF4(var3, var4);\n                    var temp22 = var1;\n                    var1 = 0x04cd;\n                    var temp23 = var2;\n                    var2 = temp22;\n                    var3 = temp23;\n                    var1 = func_0B1E(var2, var3);\n                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                    var2 = 0x04f1;\n                    var3 = arg2;\n                    var4 = storage[keccak256(memory[0x00:0x40])];\n                    var2 = func_0B40(var3, var4);\n                \n                    if (var2 <= var1) { goto label_04FC; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else if (arg1 & (0x01 << 0xa0) - 0x01 == 0x98b284d61e45d83014b20432ea266155197452ec) { goto label_04FC; }\n            else { goto label_049D; }\n        } else if (storage[0x04] & 0xff) { goto label_0438; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = 0x00;\n    \n        if (var3 >= var2) {\n        label_08D8:\n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = 0x00;\n            return temp3 + (temp2 + 0x1f & ~0x1f) + 0x40;\n        } else {\n        label_08C5:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_08D8; }\n            else { goto label_08C5; }\n        }\n    }\n    \n    function func_08F9(var arg0) returns (var r0) {\n        var temp0 = msg.data[arg0:arg0 + 0x20];\n        var var0 = temp0;\n    \n        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0915(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0931;\n        var var3 = arg1;\n        var2 = func_08F9(var3);\n        r0 = var2;\n        arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_093F(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var var3 = 0x095d;\n        var var4 = arg1;\n        var3 = func_08F9(var4);\n        var0 = var3;\n        var3 = 0x096b;\n        var4 = arg1 + 0x20;\n        var3 = func_08F9(var4);\n        arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n        arg0 = var3;\n        r0 = var0;\n        return r0, arg0, arg1;\n    }\n    \n    function func_097B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x035f;\n        var var2 = arg1;\n        return func_08F9(var2);\n    }\n    \n    function func_0996(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x09b2;\n        var var3 = arg1;\n        var2 = func_08F9(var3);\n        var0 = var2;\n        var2 = 0x09c0;\n        var3 = arg1 + 0x20;\n        var2 = func_08F9(var3);\n        arg0 = var2;\n        r0 = var0;\n        return r0, arg0;\n    }\n    \n    function func_09C9(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        r0 = msg.data[temp0:temp0 + 0x20];\n        arg0 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_0A01(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x01;\n        var var1 = arg1;\n        var var2 = var0;\n    \n        if (arg0 <= var2) {\n        label_0A3C:\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n        label_0A0F:\n            var temp0 = var1;\n        \n            if (temp0 > ~0x00 / temp0) {\n                var var3 = 0x0a22;\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            } else if (!(arg0 & var2)) {\n                arg0 = arg0 >> var2;\n                var temp1 = var1;\n                var1 = temp1 * temp1;\n                var2 = var2;\n            \n            label_0A06:\n            \n                if (arg0 <= var2) { goto label_0A3C; }\n                else { goto label_0A0F; }\n            } else {\n                var temp2 = var1;\n                var0 = temp2 * var0;\n                arg0 = arg0 >> var2;\n                var2 = var2;\n                var1 = temp2 * temp2;\n                goto label_0A06;\n            }\n        }\n    }\n    \n    function func_0A44(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg0) {\n            var0 = 0x01;\n            goto label_02E1;\n        } else if (arg1) {\n            var var1 = arg1;\n        \n            if (var1 == 0x01) {\n                var0 = 0x01;\n            \n            label_02E1:\n                return var0;\n            } else if (var1 != 0x02) {\n                var temp0 = arg0;\n                var temp1 = arg1;\n            \n                if (!(((temp1 < 0x0b) & (temp0 < 0x4e)) | ((temp1 < 0x0133) & (temp0 < 0x20)))) {\n                    var1 = 0x0ac9;\n                    var2 = arg0;\n                    var var3 = arg1;\n                    var1, var2 = func_0A01(var2, var3);\n                \n                    if (var1 <= ~0x00 / var2) { return var2 * var1; }\n                \n                    var3 = 0x0add;\n                    goto label_09EB;\n                } else {\n                    var0 = arg1 ** arg0;\n                    goto label_02E1;\n                }\n            } else if (arg0 <= 0xff) {\n                var0 = 0x01 << arg0;\n                goto label_02E1;\n            } else {\n                var var2 = 0x0a91;\n            \n            label_09EB:\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_02E1;\n        }\n    }\n    \n    function func_0AE5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x035f;\n        var var2 = arg0 & 0xff;\n        var var3 = arg1;\n        var1 = func_0A44(var2, var3);\n    \n    label_035F:\n        return var1;\n    }\n    \n    function func_0AF4(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg0;\n        var var0 = temp1 * temp0;\n    \n        if ((temp1 == var0 / temp0) | !temp0) { return var0; }\n    \n        var var1 = 0x02e1;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0B0B(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 - arg0;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var var1 = 0x02e1;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0B1E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) { return arg1 / arg0; }\n    \n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x12;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0B40(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = arg0 + temp0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var var1 = 0x02e1;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0B69(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg5;\n        memory[temp0:temp0 + 0x20] = arg0;\n        var var2 = 0x20;\n        memory[temp0 + var2:temp0 + var2 + 0x20] = arg1;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0xa0;\n        var temp1 = arg2;\n        var temp2 = memory[temp1:temp1 + 0x20];\n        var var4 = temp2;\n        memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20] = var4;\n        var var3 = temp0 + 0xc0;\n        var var1 = temp1 + var2;\n        var var5 = 0x00;\n    \n        if (var5 >= var4) {\n        label_0BB9:\n            var temp3 = arg5;\n            memory[temp3 + 0x60:temp3 + 0x60 + 0x20] = arg3 & (0x01 << 0xa0) - 0x01;\n            memory[temp3 + 0x80:temp3 + 0x80 + 0x20] = arg4;\n            return var3;\n        } else {\n        label_0B9D:\n            var temp4 = var1;\n            var temp5 = var3;\n            memory[temp5:temp5 + 0x20] = memory[temp4:temp4 + 0x20] & (0x01 << 0xa0) - 0x01;\n            var temp6 = var2;\n            var1 = temp6 + temp4;\n            var3 = temp6 + temp5;\n            var5 = var5 + 0x01;\n        \n            if (var5 >= var4) { goto label_0BB9; }\n            else { goto label_0B9D; }\n        }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 105.0058798789978,
	"usage": {
		"completion_tokens": 645,
		"prompt_tokens": 9495,
		"total_tokens": 10140
	}
}