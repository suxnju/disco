{
	"address": "0x2628e13a3cbdc52ed96b4b8d6b1041d3ef3a409e",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code that matches the decompiled code:\n\n```solidity\npragma solidity >=0.5.0 <0.8.0;\n\ncontract MyContract {\n    mapping (address => address) private _participants;\n    mapping (address => uint256) private _referrers;\n    address private stor_2_0_19;\n\n    event ParticipantAdded(address indexed participant);\n    event ParticipantRemoved(address indexed participant);\n    event ReferrerAdded(address indexed referrer, address indexed participant);\n\n    function participants(address _address) public view returns (address) {\n        return _participants[_address];\n    }\n\n    function referrers(address _address) public view returns (uint256) {\n        return _referrers[_address] & 0xff;\n    }\n\n    function processPayment(address _address) public {\n        require(_participants[_address] != address(0), \"This participant is not registered\");\n        // Implementation is missing in the decompiled code.\n    }\n\n    function referrer(address _address, address _referrer) public payable {\n        require(_participants[_address] != address(0), \"This participant is not registered\");\n        // Implementation is missing in the decompiled code.\n    }\n\n    function addReferrer(address _address) public {\n        require((_referrers[_address] & 0xff) == 0, \"This address is already a referrer\");\n        _referrers[_address] = 0x1 | (_referrers[_address] & ~uint256(0xff));\n        emit ReferrerAdded(_address, msg.sender);\n    }\n\n    function removeParticipant(address _address) private {\n        require(_participants[_address] != address(0), \"This participant is not registered\");\n        delete _participants[_address];\n        emit ParticipantRemoved(_address);\n    }\n\n    function fallback() public payable {\n        if (_participants[msg.sender] != address(0)) {\n            require(msg.value == 0, \"0 ether to manually make a daily payment\");\n            processPayment(msg.sender);\n        } else {\n            addReferrer(msg.sender);\n        }\n    }\n\n    function() external payable {\n        fallback();\n    }\n}\n```\nPlease note that the provided decompiled code is incomplete and seems to contain invalid syntax and pseudocode. The actual implementation of the functions `processPayment` and `referrer` are not provided in the decompiled code, so I left placeholders for them.",
				"role": "assistant"
			}
		}
	],
	"created": 1701456291,
	"id": "chatcmpl-8R2nLHwzUP2vYAC0uJswXa6C6slUH",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 04:51 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _participants; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _referrers; // STORAGE[0x1]\naddress stor_2_0_19; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nParticipantAdded(address);\nParticipantRemoved(address);\nReferrerAdded(address, address);\n\nfunction participants(address varg0) public nonPayable { \n    return address(_participants[varg0]);\n}\n\nfunction referrers(address varg0) public nonPayable { \n    return 0xff & _referrers[varg0];\n}\n\nfunction processPayment(address varg0) public nonPayable { \n    0x456(varg0);\n}\n\nfunction referrer(address varg0, address varg1) public payable { \n    0x1d7(varg1, varg0);\n}\n\nfunction addReferrer(address varg0) public nonPayable { \n    require(!(0xff & _referrers[varg0]), 'This address is already a referrer');\n    _referrers[varg0] = 0x1 | ~0xff & _referrers[varg0];\n    MEM[(MEM[64]) len 787] = 0x608060405234801561001057600080fd5b50604051602080610313833981016040525160018054600160a060020a031916600160a060020a039092169190911790556102c3806100506000396000f3006080604052600436106100565763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632423081e811461016b57806368447c931461019c578063a18a7bfc146101b1575b60003411156100eb5760015460008054604080517fd35ada32000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a0392831660248201529051919093169263d35ada3292349260448084019382900301818588803b1580156100cd57600080fd5b505af11580156100e1573d6000803e3d6000fd5b5050505050610169565b600154604080517f8fe123d70000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691638fe123d79160248082019260009290919082900301818387803b15801561015057600080fd5b505af1158015610164573d6000803e3d6000fd5b505050505b005b34801561017757600080fd5b506101806101d2565b60408051600160a060020a039092168252519081900360200190f35b3480156101a857600080fd5b506101806101e1565b3480156101bd57600080fd5b50610169600160a060020a03600435166101f0565b600154600160a060020a031681565b600054600160a060020a031681565b600054600160a060020a03161561026857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f72656665727265722063616e206f6e6c7920626520736574206f6e6365000000604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582001d611e6aff4163b28a366562072ac6c963d9039df7717cff8a6775c73433b8b0029;\n    MEM[787 + MEM[64]] = address(this);\n    v0 = create.code(MEM[64], 819).value(0);\n    require(v0); // checks call status, propagates error data on error\n    require((address(v0)).code.size);\n    v1 = address(v0).setReferrer(varg0).gas(msg.gas);\n    require(v1); // checks call status, propagates error data on error\n    emit ReferrerAdded(address(v0), varg0);\n}\n\nfunction 0x1d7(uint256 varg0, uint256 varg1) private { \n    v0 = address(varg1);\n    require(!address(_participants[v0]), 'This participant is already registered');\n    v1 = v2 = msg.value >= 0x63eb89da4ed0000;\n    if (v2) {\n        v1 = v3 = msg.value <= 0xc328093e61ee40000;\n    }\n    require(v1, 'Deposit should be between 0.45 ether and 225 ether (45 days)');\n    MEM[(MEM[64]) len 1075] = 0x608060405234801561001057600080fd5b5060405160408061043383398101604052805160209091015160008054600160a060020a031916600160a060020a039093169290921782556001556103d890819061005b90396000f3006080604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166322081c1281146100585780634528c699146100745780638da5cb5b1461009b575b005b6100606100d9565b604080519115158252519081900360200190f35b34801561008057600080fd5b5061008961038a565b60408051918252519081900360200190f35b3480156100a757600080fd5b506100b0610390565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60008060006001543414151561015057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c69642076616c756500000000000000000000000000000000000000604482015290519081900360640190fd5b604080517fa87430ba000000000000000000000000000000000000000000000000000000008152306004820152905173e0ae35fe7df8b86ef08557b535b89bb6cb036c239163a87430ba9160248083019260609291908290030181600087803b1580156101bc57600080fd5b505af11580156101d0573d6000803e3d6000fd5b505050506040513d60608110156101e657600080fd5b506020015160405190925073e0ae35fe7df8b86ef08557b535b89bb6cb036c23903490600081818185875af15050604080517fa87430ba000000000000000000000000000000000000000000000000000000008152306004820152905173e0ae35fe7df8b86ef08557b535b89bb6cb036c23935063a87430ba925060248083019260609291908290030181600087803b15801561028257600080fd5b505af1158015610296573d6000803e3d6000fd5b505050506040513d60608110156102ac57600080fd5b506020015190508181141561034857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602481018290527f536d6172746f6c7574696f6e2072656a65637465642074686174207061796d6560448201527f6e742c20746f6f20736f6f6e206f72206e6f7420656e6f756768206574686572606482015290519081900360840190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff90911691303180156108fc02929091818181858888f15050602d84149550505050505090565b60015481565b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a7230582001602c963279cbb1c5cfbf1a56a5d6d964fe9daabac200caf63634cb851d10700029;\n    MEM[1075 + MEM[64]] = address(varg1);\n    MEM[1075 + MEM[64] + 32] = msg.value / 45;\n    v4 = create.code(MEM[64], 1139).value(0);\n    require(v4); // checks call status, propagates error data on error\n    v5 = address(varg1);\n    _participants[v5] = address(v4) | ~0xffffffffffffffffffffffffffffffffffffffff & _participants[v5];\n    0x456(varg1);\n    v6 = stor_2_0_19.call().value(msg.value / 20).gas(2300 * !(msg.value / 20));\n    v7 = !address(varg0);\n    v8 = v9 = address(varg0);\n    if (address(varg0)) {\n        v10 = address(varg0);\n        v8 = v11 = 0xff & _referrers[v10];\n    }\n    if (v8) {\n        v12 = address(varg0).call().value(msg.value / 20).gas(2300 * !(msg.value / 20));\n    }\n    v13 = address(varg1);\n    emit ParticipantAdded(v13);\n    return ;\n}\n\nfunction 0x456(uint256 varg0) private { \n    v0 = address(varg0);\n    require((address(_participants[v0])).code.size);\n    v1, v2 = address(_participants[v0]).daily().gas(msg.gas);\n    require(v1); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require((address(_participants[v0])).code.size);\n    v3, v4 = address(_participants[v0]).processPayment().value(v2).gas(msg.gas);\n    require(v3); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v4) {\n        v5 = address(varg0);\n        _participants[v5] = ~0xffffffffffffffffffffffffffffffffffffffff & _participants[v5];\n        emit ParticipantRemoved(v5);\n    }\n    return ;\n}\n\nfunction fallback() public payable { \n    if (address(_participants[msg.sender])) {\n        require(!msg.value, '0 ether to manually make a daily payment');\n        0x456(msg.sender);\n    } else {\n        0x1d7(0, msg.sender);\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x9e69ede) {\n            participants(address);\n        } else if (0x4a3b68cc == uint32(function_selector >> 224)) {\n            referrers(address);\n        } else if (0x8fe123d7 == uint32(function_selector >> 224)) {\n            processPayment(address);\n        } else if (0xd35ada32 == uint32(function_selector >> 224)) {\n            referrer();\n        } else if (0xfefa9bb1 == uint32(function_selector >> 224)) {\n            addReferrer(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 04:51 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _participants; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _referrers; // STORAGE[0x1]\naddress stor_2_0_19; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nParticipantAdded(address);\nParticipantRemoved(address);\nReferrerAdded(address, address);\n\nfunction participants(address varg0) public nonPayable { \n    return address(_participants[varg0]);\n}\n\nfunction referrers(address varg0) public nonPayable { \n    return 0xff & _referrers[varg0];\n}\n\nfunction processPayment(address varg0) public nonPayable { \n    0x456(varg0);\n}\n\nfunction referrer(address varg0, address varg1) public payable { \n    0x1d7(varg1, varg0);\n}\n\nfunction addReferrer(address varg0) public nonPayable { \n    require(!(0xff & _referrers[varg0]), 'This address is already a referrer');\n    _referrers[varg0] = 0x1 | ~0xff & _referrers[varg0];\n    MEM[(MEM[64]) len 787] = 0x608060405234801561001057600080fd5b50604051602080610313833981016040525160018054600160a060020a031916600160a060020a039092169190911790556102c3806100506000396000f3006080604052600436106100565763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632423081e811461016b57806368447c931461019c578063a18a7bfc146101b1575b60003411156100eb5760015460008054604080517fd35ada32000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a0392831660248201529051919093169263d35ada3292349260448084019382900301818588803b1580156100cd57600080fd5b505af11580156100e1573d6000803e3d6000fd5b5050505050610169565b600154604080517f8fe123d70000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691638fe123d79160248082019260009290919082900301818387803b15801561015057600080fd5b505af1158015610164573d6000803e3d6000fd5b505050505b005b34801561017757600080fd5b506101806101d2565b60408051600160a060020a039092168252519081900360200190f35b3480156101a857600080fd5b506101806101e1565b3480156101bd57600080fd5b50610169600160a060020a03600435166101f0565b600154600160a060020a031681565b600054600160a060020a031681565b600054600160a060020a03161561026857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f72656665727265722063616e206f6e6c7920626520736574206f6e6365000000604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582001d611e6aff4163b28a366562072ac6c963d9039df7717cff8a6775c73433b8b0029;\n    MEM[787 + MEM[64]] = address(this);\n    v0 = create.code(MEM[64], 819).value(0);\n    require(v0); // checks call status, propagates error data on error\n    require((address(v0)).code.size);\n    v1 = address(v0).setReferrer(varg0).gas(msg.gas);\n    require(v1); // checks call status, propagates error data on error\n    emit ReferrerAdded(address(v0), varg0);\n}\n\nfunction 0x1d7(uint256 varg0, uint256 varg1) private { \n    v0 = address(varg1);\n    require(!address(_participants[v0]), 'This participant is already registered');\n    v1 = v2 = msg.value >= 0x63eb89da4ed0000;\n    if (v2) {\n        v1 = v3 = msg.value <= 0xc328093e61ee40000;\n    }\n    require(v1, 'Deposit should be between 0.45 ether and 225 ether (45 days)');\n    MEM[(MEM[64]) len 1075] = 0x608060405234801561001057600080fd5b5060405160408061043383398101604052805160209091015160008054600160a060020a031916600160a060020a039093169290921782556001556103d890819061005b90396000f3006080604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166322081c1281146100585780634528c699146100745780638da5cb5b1461009b575b005b6100606100d9565b604080519115158252519081900360200190f35b34801561008057600080fd5b5061008961038a565b60408051918252519081900360200190f35b3480156100a757600080fd5b506100b0610390565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60008060006001543414151561015057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c69642076616c756500000000000000000000000000000000000000604482015290519081900360640190fd5b604080517fa87430ba000000000000000000000000000000000000000000000000000000008152306004820152905173e0ae35fe7df8b86ef08557b535b89bb6cb036c239163a87430ba9160248083019260609291908290030181600087803b1580156101bc57600080fd5b505af11580156101d0573d6000803e3d6000fd5b505050506040513d60608110156101e657600080fd5b506020015160405190925073e0ae35fe7df8b86ef08557b535b89bb6cb036c23903490600081818185875af15050604080517fa87430ba000000000000000000000000000000000000000000000000000000008152306004820152905173e0ae35fe7df8b86ef08557b535b89bb6cb036c23935063a87430ba925060248083019260609291908290030181600087803b15801561028257600080fd5b505af1158015610296573d6000803e3d6000fd5b505050506040513d60608110156102ac57600080fd5b506020015190508181141561034857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602481018290527f536d6172746f6c7574696f6e2072656a65637465642074686174207061796d6560448201527f6e742c20746f6f20736f6f6e206f72206e6f7420656e6f756768206574686572606482015290519081900360840190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff90911691303180156108fc02929091818181858888f15050602d84149550505050505090565b60015481565b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a7230582001602c963279cbb1c5cfbf1a56a5d6d964fe9daabac200caf63634cb851d10700029;\n    MEM[1075 + MEM[64]] = address(varg1);\n    MEM[1075 + MEM[64] + 32] = msg.value / 45;\n    v4 = create.code(MEM[64], 1139).value(0);\n    require(v4); // checks call status, propagates error data on error\n    v5 = address(varg1);\n    _participants[v5] = address(v4) | ~0xffffffffffffffffffffffffffffffffffffffff & _participants[v5];\n    0x456(varg1);\n    v6 = stor_2_0_19.call().value(msg.value / 20).gas(2300 * !(msg.value / 20));\n    v7 = !address(varg0);\n    v8 = v9 = address(varg0);\n    if (address(varg0)) {\n        v10 = address(varg0);\n        v8 = v11 = 0xff & _referrers[v10];\n    }\n    if (v8) {\n        v12 = address(varg0).call().value(msg.value / 20).gas(2300 * !(msg.value / 20));\n    }\n    v13 = address(varg1);\n    emit ParticipantAdded(v13);\n    return ;\n}\n\nfunction 0x456(uint256 varg0) private { \n    v0 = address(varg0);\n    require((address(_participants[v0])).code.size);\n    v1, v2 = address(_participants[v0]).daily().gas(msg.gas);\n    require(v1); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require((address(_participants[v0])).code.size);\n    v3, v4 = address(_participants[v0]).processPayment().value(v2).gas(msg.gas);\n    require(v3); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v4) {\n        v5 = address(varg0);\n        _participants[v5] = ~0xffffffffffffffffffffffffffffffffffffffff & _participants[v5];\n        emit ParticipantRemoved(v5);\n    }\n    return ;\n}\n\nfunction fallback() public payable { \n    if (address(_participants[msg.sender])) {\n        require(!msg.value, '0 ether to manually make a daily payment');\n        0x456(msg.sender);\n    } else {\n        0x1d7(0, msg.sender);\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x9e69ede) {\n            participants(address);\n        } else if (0x4a3b68cc == uint32(function_selector >> 224)) {\n            referrers(address);\n        } else if (0x8fe123d7 == uint32(function_selector >> 224)) {\n            processPayment(address);\n        } else if (0xd35ada32 == uint32(function_selector >> 224)) {\n            referrer();\n        } else if (0xfefa9bb1 == uint32(function_selector >> 224)) {\n            addReferrer(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 04:51 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _participants; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _referrers; // STORAGE[0x1]\naddress stor_2_0_19; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nParticipantAdded(address);\nParticipantRemoved(address);\nReferrerAdded(address, address);\n\nfunction participants(address varg0) public nonPayable { \n    return address(_participants[varg0]);\n}\n\nfunction referrers(address varg0) public nonPayable { \n    return 0xff & _referrers[varg0];\n}\n\nfunction processPayment(address varg0) public nonPayable { \n    0x456(varg0);\n}\n\nfunction referrer(address varg0, address varg1) public payable { \n    0x1d7(varg1, varg0);\n}\n\nfunction addReferrer(address varg0) public nonPayable { \n    require(!(0xff & _referrers[varg0]), 'This address is already a referrer');\n    _referrers[varg0] = 0x1 | ~0xff & _referrers[varg0];\n    MEM[(MEM[64]) len 787] = 0x608060405234801561001057600080fd5b50604051602080610313833981016040525160018054600160a060020a031916600160a060020a039092169190911790556102c3806100506000396000f3006080604052600436106100565763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632423081e811461016b57806368447c931461019c578063a18a7bfc146101b1575b60003411156100eb5760015460008054604080517fd35ada32000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a0392831660248201529051919093169263d35ada3292349260448084019382900301818588803b1580156100cd57600080fd5b505af11580156100e1573d6000803e3d6000fd5b5050505050610169565b600154604080517f8fe123d70000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691638fe123d79160248082019260009290919082900301818387803b15801561015057600080fd5b505af1158015610164573d6000803e3d6000fd5b505050505b005b34801561017757600080fd5b506101806101d2565b60408051600160a060020a039092168252519081900360200190f35b3480156101a857600080fd5b506101806101e1565b3480156101bd57600080fd5b50610169600160a060020a03600435166101f0565b600154600160a060020a031681565b600054600160a060020a031681565b600054600160a060020a03161561026857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f72656665727265722063616e206f6e6c7920626520736574206f6e6365000000604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582001d611e6aff4163b28a366562072ac6c963d9039df7717cff8a6775c73433b8b0029;\n    MEM[787 + MEM[64]] = address(this);\n    v0 = create.code(MEM[64], 819).value(0);\n    require(v0); // checks call status, propagates error data on error\n    require((address(v0)).code.size);\n    v1 = address(v0).setReferrer(varg0).gas(msg.gas);\n    require(v1); // checks call status, propagates error data on error\n    emit ReferrerAdded(address(v0), varg0);\n}\n\nfunction 0x1d7(uint256 varg0, uint256 varg1) private { \n    v0 = address(varg1);\n    require(!address(_participants[v0]), 'This participant is already registered');\n    v1 = v2 = msg.value >= 0x63eb89da4ed0000;\n    if (v2) {\n        v1 = v3 = msg.value <= 0xc328093e61ee40000;\n    }\n    require(v1, 'Deposit should be between 0.45 ether and 225 ether (45 days)');\n    MEM[(MEM[64]) len 1075] = 0x608060405234801561001057600080fd5b5060405160408061043383398101604052805160209091015160008054600160a060020a031916600160a060020a039093169290921782556001556103d890819061005b90396000f3006080604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166322081c1281146100585780634528c699146100745780638da5cb5b1461009b575b005b6100606100d9565b604080519115158252519081900360200190f35b34801561008057600080fd5b5061008961038a565b60408051918252519081900360200190f35b3480156100a757600080fd5b506100b0610390565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60008060006001543414151561015057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c69642076616c756500000000000000000000000000000000000000604482015290519081900360640190fd5b604080517fa87430ba000000000000000000000000000000000000000000000000000000008152306004820152905173e0ae35fe7df8b86ef08557b535b89bb6cb036c239163a87430ba9160248083019260609291908290030181600087803b1580156101bc57600080fd5b505af11580156101d0573d6000803e3d6000fd5b505050506040513d60608110156101e657600080fd5b506020015160405190925073e0ae35fe7df8b86ef08557b535b89bb6cb036c23903490600081818185875af15050604080517fa87430ba000000000000000000000000000000000000000000000000000000008152306004820152905173e0ae35fe7df8b86ef08557b535b89bb6cb036c23935063a87430ba925060248083019260609291908290030181600087803b15801561028257600080fd5b505af1158015610296573d6000803e3d6000fd5b505050506040513d60608110156102ac57600080fd5b506020015190508181141561034857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602481018290527f536d6172746f6c7574696f6e2072656a65637465642074686174207061796d6560448201527f6e742c20746f6f20736f6f6e206f72206e6f7420656e6f756768206574686572606482015290519081900360840190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff90911691303180156108fc02929091818181858888f15050602d84149550505050505090565b60015481565b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a7230582001602c963279cbb1c5cfbf1a56a5d6d964fe9daabac200caf63634cb851d10700029;\n    MEM[1075 + MEM[64]] = address(varg1);\n    MEM[1075 + MEM[64] + 32] = msg.value / 45;\n    v4 = create.code(MEM[64], 1139).value(0);\n    require(v4); // checks call status, propagates error data on error\n    v5 = address(varg1);\n    _participants[v5] = address(v4) | ~0xffffffffffffffffffffffffffffffffffffffff & _participants[v5];\n    0x456(varg1);\n    v6 = stor_2_0_19.call().value(msg.value / 20).gas(2300 * !(msg.value / 20));\n    v7 = !address(varg0);\n    v8 = v9 = address(varg0);\n    if (address(varg0)) {\n        v10 = address(varg0);\n        v8 = v11 = 0xff & _referrers[v10];\n    }\n    if (v8) {\n        v12 = address(varg0).call().value(msg.value / 20).gas(2300 * !(msg.value / 20));\n    }\n    v13 = address(varg1);\n    emit ParticipantAdded(v13);\n    return ;\n}\n\nfunction 0x456(uint256 varg0) private { \n    v0 = address(varg0);\n    require((address(_participants[v0])).code.size);\n    v1, v2 = address(_participants[v0]).daily().gas(msg.gas);\n    require(v1); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require((address(_participants[v0])).code.size);\n    v3, v4 = address(_participants[v0]).processPayment().value(v2).gas(msg.gas);\n    require(v3); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v4) {\n        v5 = address(varg0);\n        _participants[v5] = ~0xffffffffffffffffffffffffffffffffffffffff & _participants[v5];\n        emit ParticipantRemoved(v5);\n    }\n    return ;\n}\n\nfunction fallback() public payable { \n    if (address(_participants[msg.sender])) {\n        require(!msg.value, '0 ether to manually make a daily payment');\n        0x456(msg.sender);\n    } else {\n        0x1d7(0, msg.sender);\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x9e69ede) {\n            participants(address);\n        } else if (0x4a3b68cc == uint32(function_selector >> 224)) {\n            referrers(address);\n        } else if (0x8fe123d7 == uint32(function_selector >> 224)) {\n            processPayment(address);\n        } else if (0xd35ada32 == uint32(function_selector >> 224)) {\n            referrer();\n        } else if (0xfefa9bb1 == uint32(function_selector >> 224)) {\n            addReferrer(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 27.222954273223877,
	"usage": {
		"completion_tokens": 496,
		"prompt_tokens": 2813,
		"total_tokens": 3309
	}
}