{
	"address": "0x07e3e2de18336a76d780e1d9c1ce8033c9bca498",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is your Solidity code based on the decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(address => uint256) private balances;\n    mapping(address => mapping(address => uint256)) private allowed;\n    address public owner;\n    uint256 public totalSupply;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        totalSupply = 10000;\n        balances[owner] = totalSupply;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n```\n\nNote: This is a simple token contract. The original decompiled code seems to have more functionality. However, without more context or the actual bytecode, it's difficult to further decompile it.",
				"role": "assistant"
			}
		}
	],
	"created": 1700632352,
	"id": "chatcmpl-8NaS0Eb0a8KmItkVoRGPJlDSbelfF",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (0x751039fc > var0) {\n                if (0x4fbee193 > var0) {\n                    if (var0 == 0x06fdde03) {\n                        // Dispatch table entry for name()\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var temp0 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp0 + 0x40;\n                        memory[temp0:temp0 + 0x20] = 0x09;\n                        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x0c1e111a585b5bdb99 << 0xba;\n                        var1 = 0x016a;\n                        var var2 = temp0;\n                        var var3 = memory[0x40:0x60];\n                        var1 = symbol(var2, var3);\n                    \n                    label_016A:\n                        var temp1 = memory[0x40:0x60];\n                        return memory[temp1:temp1 + var1 - temp1];\n                    } else if (var0 == 0x095ea7b3) {\n                        // Dispatch table entry for approve(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0193;\n                        var2 = 0x018e;\n                        var3 = msg.data.length;\n                        var var4 = 0x04;\n                        var2, var3 = func_15A5(var3, var4);\n                        var1 = func_018E(var2, var3);\n                    \n                    label_0193:\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = !!var1;\n                        var1 = temp2 + 0x20;\n                        goto label_016A;\n                    } else if (var0 == 0x18160ddd) {\n                        // Dispatch table entry for totalSupply()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x01b8;\n                        var1 = totalSupply();\n                    \n                    label_01B8:\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = var1;\n                        var1 = temp3 + 0x20;\n                        goto label_016A;\n                    } else if (var0 == 0x23b872dd) {\n                        // Dispatch table entry for transferFrom(address,address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0193;\n                        var2 = 0x01e1;\n                        var3 = msg.data.length;\n                        var4 = 0x04;\n                        var2, var3, var4 = func_15D1(var3, var4);\n                        var var5 = 0x00;\n                        var var6 = 0x048c;\n                        var var7 = var2;\n                        var var8 = var3;\n                        var var9 = var4;\n                        func_098B(var7, var8, var9);\n                        var6 = 0x04de;\n                        var7 = var2;\n                        var8 = msg.sender;\n                        var9 = 0x04d9;\n                        var temp4 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp4 + 0x60;\n                        memory[temp4:temp4 + 0x20] = 0x28;\n                        memory[temp4 + 0x20:temp4 + 0x20 + 0x28] = code[0x17eb:0x1813];\n                        memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp5;\n                        var var10 = storage[keccak256(memory[0x00:0x40])];\n                        var var11 = var4;\n                        var var12 = temp4;\n                        var9 = func_0E35(var10, var11, var12);\n                        func_04D9(var7, var8, var9);\n                        var5 = 0x01;\n                        var1 = var5;\n                        // Error: Could not resolve jump destination!\n                    } else if (var0 == 0x313ce567) {\n                        // Dispatch table entry for decimals()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = 0x09;\n                        var1 = temp6 + 0x20;\n                        goto label_016A;\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x4fbee193) {\n                    // Dispatch table entry for isExcludedFromFees(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0193;\n                    var2 = 0x021d;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_1612(var3, var4);\n                    var2 = func_021D(var2);\n                    goto label_0193;\n                } else if (var0 == 0x51bc3c85) {\n                    // Dispatch table entry for manualSwap()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0247;\n                    manualSwap();\n                    stop();\n                } else if (var0 == 0x6c0a24eb) {\n                    // Dispatch table entry for _maxWalletAmount()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b8;\n                    var2 = storage[0x18];\n                    goto label_01B8;\n                } else if (var0 == 0x70a08231) {\n                    // Dispatch table entry for balanceOf(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b8;\n                    var2 = 0x027a;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_1612(var3, var4);\n                    var1 = func_027A(var2);\n                    goto label_01B8;\n                } else if (var0 == 0x715018a6) {\n                    // Dispatch table entry for renounceOwnership()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0247;\n                    var2 = 0x0550;\n                    func_0FBB();\n                    var2 = 0x055a;\n                    var3 = 0x00;\n                    func_1015(var3);\n                    // Error: Could not resolve jump destination!\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0xa8aa1b31 > var0) {\n                if (var0 == 0x751039fc) {\n                    // Dispatch table entry for removeLimits()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0247;\n                    removeLimits();\n                    stop();\n                } else if (var0 == 0x7d1db4a5) {\n                    // Dispatch table entry for _maxTxAmount()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b8;\n                    var2 = storage[0x17];\n                    goto label_01B8;\n                } else if (var0 == 0x8a8c523c) {\n                    // Dispatch table entry for enableTrading()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0247;\n                    enableTrading();\n                    stop();\n                } else if (var0 == 0x8da5cb5b) {\n                    // Dispatch table entry for owner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = storage[0x00] & (0x01 << 0xa0) - 0x01;\n                \n                label_0304:\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = var1 & (0x01 << 0xa0) - 0x01;\n                    var1 = temp7 + 0x20;\n                    goto label_016A;\n                } else if (var0 == 0x95d89b41) {\n                    // Dispatch table entry for symbol()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp8 = memory[0x40:0x60];\n                    var1 = temp8;\n                    memory[0x40:0x60] = var1 + 0x40;\n                    memory[var1:var1 + 0x20] = 0x04;\n                    memory[var1 + 0x20:var1 + 0x20 + 0x20] = 0x16111351 << 0xe2;\n                    var temp9 = var1;\n                    var1 = 0x016a;\n                    var2 = temp9;\n                    var3 = memory[0x40:0x60];\n                    var1 = symbol(var2, var3);\n                    goto label_016A;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0xa8aa1b31) {\n                // Dispatch table entry for pair()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0304;\n                var2 = storage[0x06] & (0x01 << 0xa0) - 0x01;\n                goto label_0304;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var2 = 0x0384;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_15A5(var3, var4);\n                var4 = 0x00;\n                var5 = 0x0404;\n                var6 = msg.sender;\n                var7 = var2;\n                var8 = var3;\n                func_098B(var6, var7, var8);\n                var4 = 0x01;\n                var1 = var4;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b8;\n                var2 = 0x03a4;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_162F(var3, var4);\n                var1 = func_03A4(var2, var3);\n                goto label_01B8;\n            } else if (var0 == 0xe8078d94) {\n                // Dispatch table entry for addLiquidity()\n                var1 = 0x0247;\n                addLiquidity();\n                stop();\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0247;\n                var2 = 0x03f2;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_1612(var3, var4);\n                func_03F2(var2);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (msg.data.length) { revert(memory[0x00:0x00]); }\n        else { stop(); }\n    }\n    \n    function func_018E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0404;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_085B(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function func_021D(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_027A(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x02;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_03A4(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_03F2(var arg0) {\n        var var0 = 0x07e8;\n        func_0FBB();\n    \n        if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var0 = 0x0545;\n            var var1 = arg0;\n            func_1015(var1);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x26;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x646472657373 << 0xd0;\n            var0 = temp0 + 0x84;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function totalSupply() returns (var r0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = 0xdead;\n        var var0 = 0x00;\n        var var1 = 0x047a;\n        var var2 = storage[0xac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b];\n        var var3 = 0x0474;\n        var var4 = storage[0x01];\n        var var5 = storage[0x6a9609baa168169acaea398c4407efea4be641bb08e21e88806d9836fd9333cc];\n        var3 = func_097F(var4, var5);\n        return func_0474(var2, var3);\n    }\n    \n    function func_0474(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_097F(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_04D9(var arg0, var arg1, var arg2) {\n        func_085B(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function manualSwap() {\n        if (msg.sender != storage[0x15] & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = address(this);\n        memory[0x20:0x40] = 0x02;\n        var var0 = 0x0519;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        func_0E61(var1);\n        var temp0 = memory[0x40:0x60];\n        var temp1 = address(this).balance;\n        var temp2;\n        temp2, memory[temp0:temp0 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n        var0 = !temp2;\n    \n        if (!var0) { return; }\n    \n        var temp3 = returndata.length;\n        memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function removeLimits() {\n        var var0 = 0x0564;\n        func_0FBB();\n        var temp0 = storage[0x01];\n        storage[0x17] = temp0;\n        storage[0x18] = temp0;\n    }\n    \n    function enableTrading() {\n        var var0 = 0x0579;\n        func_0FBB();\n        storage[0x06] = (storage[0x06] & ~(0xff << 0xa0)) | (0x01 << 0xa0);\n    }\n    \n    function addLiquidity() {\n        var var0 = 0x05a3;\n        func_0FBB();\n        var0 = storage[0x05] & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n        var var1 = 0xc45a0155;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) << 0xe0;\n        var var2 = temp0 + 0x04;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x20] = address(var0).staticcall.gas(msg.gas)(memory[temp1:temp1 + var2 - temp1]);\n        var var3 = !temp2;\n    \n        if (!var3) {\n            var temp3 = memory[0x40:0x60];\n            var temp4 = returndata.length;\n            memory[0x40:0x60] = temp3 + (temp4 + 0x1f & ~0x1f);\n            var0 = 0x061a;\n            var2 = temp3;\n            var1 = var2 + temp4;\n            var0 = func_1668(var1, var2);\n            var0 = var0 & (0x01 << 0xa0) - 0x01;\n            var1 = 0xc9c65396;\n            var2 = address(this);\n            var3 = storage[0x05] & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n            var var4 = 0xad5c4648;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = (var4 & 0xffffffff) << 0xe0;\n            var var5 = temp5 + 0x04;\n            var temp6 = memory[0x40:0x60];\n            var temp7;\n            temp7, memory[temp6:temp6 + 0x20] = address(var3).staticcall.gas(msg.gas)(memory[temp6:temp6 + var5 - temp6]);\n            var var6 = !temp7;\n        \n            if (!var6) {\n                var temp8 = memory[0x40:0x60];\n                var temp9 = returndata.length;\n                memory[0x40:0x60] = temp8 + (temp9 + 0x1f & ~0x1f);\n                var3 = 0x06a0;\n                var5 = temp8;\n                var4 = var5 + temp9;\n                var3 = func_1668(var4, var5);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = (var1 << 0xe0) & ~((0x01 << 0xe0) - 0x01);\n                var temp11 = (0x01 << 0xa0) - 0x01;\n                memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = temp11 & var2;\n                memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = temp11 & var3;\n                var2 = temp10 + 0x44;\n                var temp12 = memory[0x40:0x60];\n                var temp13;\n                temp13, memory[temp12:temp12 + 0x20] = address(var0).call.gas(msg.gas)(memory[temp12:temp12 + var2 - temp12]);\n                var3 = !temp13;\n            \n                if (!var3) {\n                    var temp14 = memory[0x40:0x60];\n                    var temp15 = returndata.length;\n                    memory[0x40:0x60] = temp14 + (temp15 + 0x1f & ~0x1f);\n                    var0 = 0x0711;\n                    var2 = temp14;\n                    var1 = var2 + temp15;\n                    var0 = func_1668(var1, var2);\n                    var temp16 = (0x01 << 0xa0) - 0x01;\n                    storage[0x06] = (temp16 & var0) | (storage[0x06] & ~((0x01 << 0xa0) - 0x01));\n                    var0 = 0x0740;\n                    var1 = address(this);\n                    var3 = storage[0x01];\n                    var2 = storage[0x05] & temp16;\n                    func_085B(var1, var2, var3);\n                    var0 = storage[0x05] & (0x01 << 0xa0) - 0x01;\n                    var1 = 0xf305d719;\n                    var2 = msg.value;\n                    var3 = address(this);\n                    memory[0x00:0x20] = var3 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x02;\n                    var4 = storage[keccak256(memory[0x00:0x40])];\n                    var temp17 = memory[0x40:0x60];\n                    memory[temp17:temp17 + 0x20] = (var1 & 0xffffffff) << 0xe0;\n                    var temp18 = var3;\n                    var3 = 0x0798;\n                    var temp19 = var4;\n                    var4 = temp18;\n                    var5 = temp19;\n                    var6 = 0x00;\n                    var var7 = var6;\n                    var var8 = msg.sender;\n                    var var9 = block.timestamp;\n                    var var10 = temp17 + 0x04;\n                    var3 = func_1685(var4, var5, var6, var7, var8, var9, var10);\n                    var temp20 = memory[0x40:0x60];\n                    var temp21;\n                    temp21, memory[temp20:temp20 + 0x60] = address(var0).call.gas(msg.gas).value(var2)(memory[temp20:temp20 + var3 - temp20]);\n                    var4 = !temp21;\n                \n                    if (!var4) {\n                        var temp22 = memory[0x40:0x60];\n                        var temp23 = returndata.length;\n                        memory[0x40:0x60] = temp22 + (temp23 + 0x1f & ~0x1f);\n                        var0 = 0x07db;\n                        var2 = temp22;\n                        var1 = var2 + temp23;\n                        var0, var1, var2 = func_16C0(var1, var2);\n                        return;\n                    } else {\n                        var temp24 = returndata.length;\n                        memory[0x00:0x00 + temp24] = returndata[0x00:0x00 + temp24];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp25 = returndata.length;\n                    memory[0x00:0x00 + temp25] = returndata[0x00:0x00 + temp25];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp26 = returndata.length;\n                memory[0x00:0x00 + temp26] = returndata[0x00:0x00 + temp26];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp27 = returndata.length;\n            memory[0x00:0x00 + temp27] = returndata[0x00:0x00 + temp27];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_085B(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x24;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = 0x72657373 << 0xe0;\n            var0 = temp9 + 0x84;\n            goto label_0849;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = temp0 & arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x03;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x22;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7373 << 0xf0;\n            var var0 = temp7 + 0x84;\n        \n        label_0849:\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_097F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x04e2;\n        var var2 = arg1;\n        var var3 = arg0;\n        return func_1704(var2, var3);\n    }\n    \n    function func_098B(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp14 + 0x04:temp14 + 0x04 + 0x20] = 0x20;\n            memory[temp14 + 0x24:temp14 + 0x24 + 0x20] = 0x25;\n            memory[temp14 + 0x44:temp14 + 0x44 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n            memory[temp14 + 0x64:temp14 + 0x64 + 0x20] = 0x6472657373 << 0xd8;\n            var0 = temp14 + 0x84;\n            goto label_0849;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = 0x02;\n        \n            if (arg2 <= storage[keccak256(memory[0x00:0x40])]) {\n                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x04;\n                var var0 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n            \n                if (var0) {\n                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_0B63; }\n                    else { goto label_0B1B; }\n                } else if (!var0) {\n                label_0B63:\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                    var0 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n                \n                    if (var0) {\n                        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                        var0 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n                    \n                        if (!var0) { goto label_0BBF; }\n                        else { goto label_0BAC; }\n                    } else if (!var0) {\n                    label_0BBF:\n                    \n                        if (!var0) {\n                        label_0BD6:\n                        \n                            if (!var0) {\n                            label_0C4F:\n                                var0 = arg2 <= storage[0x17];\n                            \n                                if (!var0) {\n                                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                                    memory[0x20:0x40] = 0x04;\n                                    var0 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n                                \n                                    if (var0) { goto label_0C9B; }\n                                    else { goto label_0C7E; }\n                                } else if (var0) {\n                                label_0C9B:\n                                \n                                    if (var0) {\n                                    label_0CDB:\n                                        var temp0 = (0x01 << 0xa0) - 0x01;\n                                        var0 = storage[0x06] & temp0 == temp0 & arg1;\n                                    \n                                        if (var0) {\n                                            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                                            memory[0x20:0x40] = 0x04;\n                                        \n                                            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_0D2F; }\n                                            else { goto label_0D17; }\n                                        } else if (!var0) {\n                                        label_0D2F:\n                                            var0 = 0x0d39;\n                                            var var1 = arg0;\n                                            var var2 = arg1;\n                                            var0 = func_1071(var1, var2);\n                                        \n                                            if (!var0) {\n                                                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                                                memory[0x20:0x40] = 0x02;\n                                                var1 = storage[keccak256(memory[0x00:0x40])];\n                                                var0 = 0x0d72;\n                                                var2 = arg2;\n                                                var0 = func_097F(var1, var2);\n                                                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                                                memory[0x20:0x40] = 0x02;\n                                                var temp1 = var0;\n                                                var0 = 0x00;\n                                                storage[keccak256(memory[var0:var0 + 0x40])] = temp1;\n                                                var1 = 0x0d98;\n                                                var2 = arg0;\n                                                var var3 = arg1;\n                                                var1 = func_128A(var2, var3);\n                                            \n                                                if (var1) {\n                                                    var1 = 0x0dad;\n                                                    var2 = arg0;\n                                                    var3 = arg1;\n                                                    var var4 = arg2;\n                                                    var1 = func_12D0(var2, var3, var4);\n                                                \n                                                label_0DAD:\n                                                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                                                    memory[0x20:0x40] = 0x02;\n                                                    var temp2 = var1;\n                                                    var0 = temp2;\n                                                    var2 = storage[keccak256(memory[0x00:0x40])];\n                                                    var1 = 0x0dd3;\n                                                    var3 = var0;\n                                                    var1 = func_1065(var2, var3);\n                                                    var temp3 = (0x01 << 0xa0) - 0x01;\n                                                    memory[0x00:0x20] = arg1 & temp3;\n                                                    memory[0x20:0x40] = 0x02;\n                                                    storage[keccak256(memory[0x00:0x40])] = var1;\n                                                    var1 = arg1 & temp3;\n                                                    var temp4 = memory[0x40:0x60];\n                                                    var2 = arg0 & temp3;\n                                                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                                                    memory[temp4:temp4 + 0x20] = var0;\n                                                    var4 = temp4 + 0x20;\n                                                    var temp5 = memory[0x40:0x60];\n                                                    log(memory[temp5:temp5 + var4 - temp5], [stack[-2], stack[-3], stack[-4]]);\n                                                    return;\n                                                } else {\n                                                    var1 = arg2;\n                                                    goto label_0DAD;\n                                                }\n                                            } else {\n                                                var0 = 0x0d49;\n                                                var1 = storage[0x0a];\n                                                storage[0x08] = (storage[0x08] & ~0xff) | 0x01;\n                                                var2 = 0x00;\n                                                var3 = 0x1139;\n                                                var var8 = storage[0x0d];\n                                                var4 = 0x02;\n                                                var var5 = 0x1133;\n                                                var var6 = storage[0x0e];\n                                                var var10 = storage[0x0c];\n                                                var var7 = 0x112d;\n                                                var var9 = var7;\n                                                var var11 = 0x01;\n                                                var9 = func_1065(var10, var11);\n                                                var7 = func_112D(var8, var9);\n                                                var5 = func_112D(var6, var7);\n                                                var temp6 = var4;\n                                                var4 = var5;\n                                                var5 = temp6;\n                                                var6 = 0x00;\n                                                var7 = 0x04e2;\n                                                var8 = var5;\n                                                var9 = var4;\n                                                var7 = func_17B1(var8, var9);\n                                                var3 = var7;\n                                                // Error: Could not resolve jump destination!\n                                            }\n                                        } else {\n                                        label_0D17:\n                                            var0 = 0x01;\n                                            var1 = 0x07;\n                                            var2 = 0x00;\n                                            var3 = 0x0d29;\n                                            var4 = var0;\n                                            var5 = storage[var1];\n                                            var3 = func_1717(var4, var5);\n                                            storage[var1] = var3;\n                                            goto label_0D2F;\n                                        }\n                                    } else {\n                                    label_0CA0:\n                                        var temp7 = memory[0x40:0x60];\n                                        memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n                                        memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                                        memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x11;\n                                        memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x151608131a5b5a5d08115e18d959591959 << 0x7a;\n                                        var0 = temp7 + 0x64;\n                                    \n                                    label_0849:\n                                        var temp8 = memory[0x40:0x60];\n                                        revert(memory[temp8:temp8 + var0 - temp8]);\n                                    }\n                                } else {\n                                label_0C7E:\n                                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                                    memory[0x20:0x40] = 0x04;\n                                \n                                    if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_0CDB; }\n                                    else { goto label_0CA0; }\n                                }\n                            } else {\n                            label_0BDC:\n                                var0 = storage[0x18];\n                                memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                                memory[0x20:0x40] = 0x02;\n                                var1 = 0x0c01;\n                                var2 = storage[keccak256(memory[0x00:0x40])];\n                                var3 = arg2;\n                                var1 = func_1065(var2, var3);\n                            \n                                if (var1 <= var0) { goto label_0C4F; }\n                            \n                                var temp9 = memory[0x40:0x60];\n                                memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x1e;\n                                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45786365656473206d6178696d756d2077616c6c657420616d6f756e742e0000;\n                                var0 = temp9 + 0x64;\n                                goto label_0849;\n                            }\n                        } else {\n                        label_0BC6:\n                        \n                            if (arg1 & (0x01 << 0xa0) - 0x01 == 0xdead) { goto label_0C4F; }\n                            else { goto label_0BDC; }\n                        }\n                    } else {\n                    label_0BAC:\n                        var temp10 = (0x01 << 0xa0) - 0x01;\n                        var0 = storage[0x06] & temp10 != temp10 & arg1;\n                    \n                        if (!var0) { goto label_0BD6; }\n                        else { goto label_0BC6; }\n                    }\n                } else {\n                label_0B1B:\n                \n                    if (storage[0x06] / (0x01 << 0xa0) & 0xff) { goto label_0B63; }\n                \n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n                    memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x0d;\n                    memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = 0x74726164696e67416374697665 << 0x98;\n                    var0 = temp11 + 0x64;\n                    goto label_0849;\n                }\n            } else {\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = 0x461bcd << 0xe5;\n                memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n                memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x31;\n                memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = 0x596f752061726520747279696e6720746f207472616e73666572206d6f726520;\n                memory[temp12 + 0x64:temp12 + 0x64 + 0x20] = 0x7468616e20796f75722062616c616e6365 << 0x78;\n                var0 = temp12 + 0x84;\n                goto label_0849;\n            }\n        } else {\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x23;\n            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n            memory[temp13 + 0x64:temp13 + 0x64 + 0x20] = 0x657373 << 0xe8;\n            var0 = temp13 + 0x84;\n            goto label_0849;\n        }\n    }\n    \n    function func_0E35(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = var1;\n        var1 = 0x0849;\n        var var2 = temp1;\n        var var3 = temp0 + 0x04;\n        var1 = symbol(var2, var3);\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + var1 - temp2]);\n    }\n    \n    function func_0E61(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x02;\n        memory[0x40:0x60] = temp0 + 0x60;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x40] = msg.data[msg.data.length:msg.data.length + 0x40];\n        var var0 = temp0;\n        var var1 = address(this);\n        var var2 = var0;\n        var var3 = 0x00;\n    \n        if (var3 < memory[var2:var2 + 0x20]) {\n            var temp1 = (0x01 << 0xa0) - 0x01;\n            memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20] = temp1 & var1;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x15ab88c9 << 0xe3;\n            var temp3 = memory[0x40:0x60];\n            var1 = temp1 & storage[0x05];\n            var2 = 0xad5c4648;\n            var3 = temp2 + 0x04;\n            var temp4;\n            temp4, memory[temp3:temp3 + 0x20] = address(var1).staticcall.gas(msg.gas)(memory[temp3:temp3 + temp2 - temp3 + 0x04]);\n            var var4 = !temp4;\n        \n            if (!var4) {\n                var temp5 = memory[0x40:0x60];\n                var temp6 = returndata.length;\n                memory[0x40:0x60] = temp5 + (temp6 + 0x1f & ~0x1f);\n                var1 = 0x0f13;\n                var3 = temp5;\n                var2 = var3 + temp6;\n                var1 = func_1668(var2, var3);\n                var2 = var0;\n                var3 = 0x01;\n            \n                if (var3 < memory[var2:var2 + 0x20]) {\n                    var temp7 = (0x01 << 0xa0) - 0x01;\n                    memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20] = temp7 & var1;\n                    var1 = 0x0f4c;\n                    var2 = address(this);\n                    var3 = storage[0x05] & temp7;\n                    var4 = arg0;\n                    func_085B(var2, var3, var4);\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = 0x791ac947 << 0xe0;\n                    var1 = storage[0x05] & (0x01 << 0xa0) - 0x01;\n                    var2 = 0x791ac947;\n                    var3 = 0x0f85;\n                    var4 = arg0;\n                    var var5 = 0x00;\n                    var var6 = var0;\n                    var var7 = address(this);\n                    var var8 = block.timestamp;\n                    var var9 = temp8 + 0x04;\n                    var3 = func_1740(var4, var5, var6, var7, var8, var9);\n                    var4 = 0x00;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                    var var10 = !address(var9).code.length;\n                \n                    if (var10) { revert(memory[0x00:0x00]); }\n                \n                    var temp9;\n                    temp9, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                    var4 = !temp9;\n                \n                    if (!var4) { return; }\n                \n                    var temp10 = returndata.length;\n                    memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                } else {\n                    var4 = 0x0f26;\n                \n                label_172A:\n                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            } else {\n                var temp11 = returndata.length;\n                memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var4 = 0x0e96;\n            goto label_172A;\n        }\n    }\n    \n    function func_0FBB() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x20;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        var var0 = temp0 + 0x64;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + var0 - temp1]);\n    }\n    \n    function func_1015(var arg0) {\n        var temp0 = storage[0x00];\n        var temp1 = (0x01 << 0xa0) - 0x01;\n        var temp2 = temp1 & arg0;\n        storage[0x00] = temp2 | (temp0 & ~((0x01 << 0xa0) - 0x01));\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & (0x01 << 0xa0) - 0x01, stack[-1] & (0x01 << 0xa0) - 0x01]);\n    }\n    \n    function func_1065(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x04e2;\n        var var2 = arg1;\n        var var3 = arg0;\n        return func_1717(var2, var3);\n    }\n    \n    function func_1071(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !(storage[0x08] & 0xff);\n    \n        if (var1) {\n            var1 = storage[0x06] / (0x01 << 0xa8) & 0xff;\n        \n            if (!var1) { goto label_10A5; }\n            else { goto label_1097; }\n        } else if (!var1) {\n        label_10A5:\n        \n            if (!var1) {\n            label_10CA:\n            \n                if (!var1) {\n                label_10E3:\n                \n                    if (!var1) {\n                    label_04E2:\n                        return var1;\n                    } else {\n                    label_10EA:\n                        return storage[0x07] >= storage[0x09];\n                    }\n                } else {\n                label_10D1:\n                    var temp0 = (0x01 << 0xa0) - 0x01;\n                    var1 = storage[0x06] & temp0 == temp0 & arg1;\n                \n                    if (!var1) { goto label_04E2; }\n                    else { goto label_10EA; }\n                }\n            } else {\n            label_10AC:\n                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x04;\n                var1 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n            \n                if (!var1) { goto label_10E3; }\n                else { goto label_10D1; }\n            }\n        } else {\n        label_1097:\n            var1 = storage[0x06] / (0x01 << 0xa0) & 0xff;\n        \n            if (!var1) { goto label_10CA; }\n            else { goto label_10AC; }\n        }\n    }\n    \n    function func_112D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_1065(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_128A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var var1 = !(storage[keccak256(memory[var0:var0 + 0x40])] & 0xff);\n    \n        if (!var1) { return var1; }\n    \n        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x04;\n        return !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n    }\n    \n    function func_12D0(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x12dd;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_14F7(var3, var4);\n    \n        if (var2 <= var1) { return arg2; }\n    \n        var1 = 0x00;\n        var2 = 0x1300;\n        var3 = 0x12f2;\n        var4 = arg0;\n        var var5 = arg1;\n        var3 = func_14F7(var4, var5);\n        var4 = 0x1133;\n        var var6 = storage[0x13];\n        var5 = arg2;\n        var var7 = 0x00;\n        var var8 = 0x04e2;\n        var var9 = var6;\n        var var10 = var5;\n        var8 = func_17C8(var9, var10);\n        var4 = var8;\n        // Error: Could not resolve jump destination!\n    }\n    \n    function func_14F7(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = (0x01 << 0xa0) - 0x01;\n    \n        if ((arg1 & temp0) - (temp0 & storage[0x06])) {\n            var temp1 = (0x01 << 0xa0) - 0x01;\n        \n            if ((arg0 & temp1) - (temp1 & storage[0x06])) { return storage[0x12]; }\n        \n            var0 = storage[0x10];\n        \n        label_0408:\n            return var0;\n        } else {\n            var0 = storage[0x11];\n            goto label_0408;\n        }\n    }\n    \n    function symbol(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = 0x00;\n    \n        if (var3 >= var2) {\n        label_156F:\n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = 0x00;\n            return temp3 + (temp2 + 0x1f & ~0x1f) + 0x40;\n        } else {\n        label_155C:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_156F; }\n            else { goto label_155C; }\n        }\n    }\n    \n    function func_1590(var arg0) {\n        var temp0 = arg0;\n    \n        if (temp0 == temp0 & (0x01 << 0xa0) - 0x01) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_15A5(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x15c3;\n        var var4 = var2;\n        func_1590(var4);\n        r0 = var2;\n        arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_15D1(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var var3 = msg.data[arg1:arg1 + 0x20];\n        var var4 = 0x15f1;\n        var var5 = var3;\n        func_1590(var5);\n        var0 = var3;\n        var3 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var4 = 0x1601;\n        var5 = var3;\n        func_1590(var5);\n        r0 = var0;\n        arg0 = var3;\n        arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n        return r0, arg0, arg1;\n    }\n    \n    function func_1612(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var2 = 0x04e2;\n        var var3 = var1;\n        func_1590(var3);\n        return var1;\n    }\n    \n    function func_162F(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x164d;\n        var var4 = var2;\n        func_1590(var4);\n        var0 = var2;\n        var2 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var3 = 0x165d;\n        var4 = var2;\n        func_1590(var4);\n        arg0 = var2;\n        r0 = var0;\n        return r0, arg0;\n    }\n    \n    function func_1668(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = memory[arg1:arg1 + 0x20];\n        var var2 = 0x04e2;\n        var var3 = var1;\n        func_1590(var3);\n        return var1;\n    }\n    \n    function func_1685(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg6;\n        memory[temp1:temp1 + 0x20] = temp0 & arg0;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = arg1;\n        memory[temp1 + 0x40:temp1 + 0x40 + 0x20] = arg2;\n        memory[temp1 + 0x60:temp1 + 0x60 + 0x20] = arg3;\n        memory[temp1 + 0x80:temp1 + 0x80 + 0x20] = temp0 & arg4;\n        memory[temp1 + 0xa0:temp1 + 0xa0 + 0x20] = arg5;\n        return temp1 + 0xc0;\n    }\n    \n    function func_16C0(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        arg1 = memory[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        arg0 = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        r0 = memory[temp0:temp0 + 0x20];\n        return r0, arg0, arg1;\n    }\n    \n    function func_1704(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 - arg0;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var var1 = 0x0408;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_1717(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = arg0 + temp0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var var1 = 0x0408;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_1740(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg5;\n        memory[temp0:temp0 + 0x20] = arg0;\n        var var2 = 0x20;\n        memory[temp0 + var2:temp0 + var2 + 0x20] = arg1;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0xa0;\n        var temp1 = arg2;\n        var temp2 = memory[temp1:temp1 + 0x20];\n        var var4 = temp2;\n        memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20] = var4;\n        var var3 = temp0 + 0xc0;\n        var var1 = temp1 + var2;\n        var var5 = 0x00;\n    \n        if (var5 >= var4) {\n        label_1790:\n            var temp3 = arg5;\n            memory[temp3 + 0x60:temp3 + 0x60 + 0x20] = arg3 & (0x01 << 0xa0) - 0x01;\n            memory[temp3 + 0x80:temp3 + 0x80 + 0x20] = arg4;\n            return var3;\n        } else {\n        label_1774:\n            var temp4 = var1;\n            var temp5 = var3;\n            memory[temp5:temp5 + 0x20] = memory[temp4:temp4 + 0x20] & (0x01 << 0xa0) - 0x01;\n            var temp6 = var2;\n            var1 = temp6 + temp4;\n            var3 = temp6 + temp5;\n            var5 = var5 + 0x01;\n        \n            if (var5 >= var4) { goto label_1790; }\n            else { goto label_1774; }\n        }\n    }\n    \n    function func_17B1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg0;\n        var var0 = temp1 * temp0;\n    \n        if ((temp1 == var0 / temp0) | !temp0) { return var0; }\n    \n        var var1 = 0x0408;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_17C8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) { return arg1 / arg0; }\n    \n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x12;\n        revert(memory[0x00:0x24]);\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (0x751039fc > var0) {\n                if (0x4fbee193 > var0) {\n                    if (var0 == 0x06fdde03) {\n                        // Dispatch table entry for name()\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var temp0 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp0 + 0x40;\n                        memory[temp0:temp0 + 0x20] = 0x09;\n                        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x0c1e111a585b5bdb99 << 0xba;\n                        var1 = 0x016a;\n                        var var2 = temp0;\n                        var var3 = memory[0x40:0x60];\n                        var1 = symbol(var2, var3);\n                    \n                    label_016A:\n                        var temp1 = memory[0x40:0x60];\n                        return memory[temp1:temp1 + var1 - temp1];\n                    } else if (var0 == 0x095ea7b3) {\n                        // Dispatch table entry for approve(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0193;\n                        var2 = 0x018e;\n                        var3 = msg.data.length;\n                        var var4 = 0x04;\n                        var2, var3 = func_15A5(var3, var4);\n                        var1 = func_018E(var2, var3);\n                    \n                    label_0193:\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = !!var1;\n                        var1 = temp2 + 0x20;\n                        goto label_016A;\n                    } else if (var0 == 0x18160ddd) {\n                        // Dispatch table entry for totalSupply()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x01b8;\n                        var1 = totalSupply();\n                    \n                    label_01B8:\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = var1;\n                        var1 = temp3 + 0x20;\n                        goto label_016A;\n                    } else if (var0 == 0x23b872dd) {\n                        // Dispatch table entry for transferFrom(address,address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0193;\n                        var2 = 0x01e1;\n                        var3 = msg.data.length;\n                        var4 = 0x04;\n                        var2, var3, var4 = func_15D1(var3, var4);\n                        var var5 = 0x00;\n                        var var6 = 0x048c;\n                        var var7 = var2;\n                        var var8 = var3;\n                        var var9 = var4;\n                        func_098B(var7, var8, var9);\n                        var6 = 0x04de;\n                        var7 = var2;\n                        var8 = msg.sender;\n                        var9 = 0x04d9;\n                        var temp4 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp4 + 0x60;\n                        memory[temp4:temp4 + 0x20] = 0x28;\n                        memory[temp4 + 0x20:temp4 + 0x20 + 0x28] = code[0x17eb:0x1813];\n                        memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp5;\n                        var var10 = storage[keccak256(memory[0x00:0x40])];\n                        var var11 = var4;\n                        var var12 = temp4;\n                        var9 = func_0E35(var10, var11, var12);\n                        func_04D9(var7, var8, var9);\n                        var5 = 0x01;\n                        var1 = var5;\n                        // Error: Could not resolve jump destination!\n                    } else if (var0 == 0x313ce567) {\n                        // Dispatch table entry for decimals()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = 0x09;\n                        var1 = temp6 + 0x20;\n                        goto label_016A;\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x4fbee193) {\n                    // Dispatch table entry for isExcludedFromFees(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0193;\n                    var2 = 0x021d;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_1612(var3, var4);\n                    var2 = func_021D(var2);\n                    goto label_0193;\n                } else if (var0 == 0x51bc3c85) {\n                    // Dispatch table entry for manualSwap()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0247;\n                    manualSwap();\n                    stop();\n                } else if (var0 == 0x6c0a24eb) {\n                    // Dispatch table entry for _maxWalletAmount()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b8;\n                    var2 = storage[0x18];\n                    goto label_01B8;\n                } else if (var0 == 0x70a08231) {\n                    // Dispatch table entry for balanceOf(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b8;\n                    var2 = 0x027a;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_1612(var3, var4);\n                    var1 = func_027A(var2);\n                    goto label_01B8;\n                } else if (var0 == 0x715018a6) {\n                    // Dispatch table entry for renounceOwnership()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0247;\n                    var2 = 0x0550;\n                    func_0FBB();\n                    var2 = 0x055a;\n                    var3 = 0x00;\n                    func_1015(var3);\n                    // Error: Could not resolve jump destination!\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0xa8aa1b31 > var0) {\n                if (var0 == 0x751039fc) {\n                    // Dispatch table entry for removeLimits()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0247;\n                    removeLimits();\n                    stop();\n                } else if (var0 == 0x7d1db4a5) {\n                    // Dispatch table entry for _maxTxAmount()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b8;\n                    var2 = storage[0x17];\n                    goto label_01B8;\n                } else if (var0 == 0x8a8c523c) {\n                    // Dispatch table entry for enableTrading()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0247;\n                    enableTrading();\n                    stop();\n                } else if (var0 == 0x8da5cb5b) {\n                    // Dispatch table entry for owner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = storage[0x00] & (0x01 << 0xa0) - 0x01;\n                \n                label_0304:\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = var1 & (0x01 << 0xa0) - 0x01;\n                    var1 = temp7 + 0x20;\n                    goto label_016A;\n                } else if (var0 == 0x95d89b41) {\n                    // Dispatch table entry for symbol()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp8 = memory[0x40:0x60];\n                    var1 = temp8;\n                    memory[0x40:0x60] = var1 + 0x40;\n                    memory[var1:var1 + 0x20] = 0x04;\n                    memory[var1 + 0x20:var1 + 0x20 + 0x20] = 0x16111351 << 0xe2;\n                    var temp9 = var1;\n                    var1 = 0x016a;\n                    var2 = temp9;\n                    var3 = memory[0x40:0x60];\n                    var1 = symbol(var2, var3);\n                    goto label_016A;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0xa8aa1b31) {\n                // Dispatch table entry for pair()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0304;\n                var2 = storage[0x06] & (0x01 << 0xa0) - 0x01;\n                goto label_0304;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var2 = 0x0384;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_15A5(var3, var4);\n                var4 = 0x00;\n                var5 = 0x0404;\n                var6 = msg.sender;\n                var7 = var2;\n                var8 = var3;\n                func_098B(var6, var7, var8);\n                var4 = 0x01;\n                var1 = var4;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b8;\n                var2 = 0x03a4;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_162F(var3, var4);\n                var1 = func_03A4(var2, var3);\n                goto label_01B8;\n            } else if (var0 == 0xe8078d94) {\n                // Dispatch table entry for addLiquidity()\n                var1 = 0x0247;\n                addLiquidity();\n                stop();\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0247;\n                var2 = 0x03f2;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_1612(var3, var4);\n                func_03F2(var2);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (msg.data.length) { revert(memory[0x00:0x00]); }\n        else { stop(); }\n    }\n    \n    function func_018E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0404;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_085B(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function func_021D(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_027A(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x02;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_03A4(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_03F2(var arg0) {\n        var var0 = 0x07e8;\n        func_0FBB();\n    \n        if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var0 = 0x0545;\n            var var1 = arg0;\n            func_1015(var1);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x26;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x646472657373 << 0xd0;\n            var0 = temp0 + 0x84;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function totalSupply() returns (var r0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = 0xdead;\n        var var0 = 0x00;\n        var var1 = 0x047a;\n        var var2 = storage[0xac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b];\n        var var3 = 0x0474;\n        var var4 = storage[0x01];\n        var var5 = storage[0x6a9609baa168169acaea398c4407efea4be641bb08e21e88806d9836fd9333cc];\n        var3 = func_097F(var4, var5);\n        return func_0474(var2, var3);\n    }\n    \n    function func_0474(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_097F(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_04D9(var arg0, var arg1, var arg2) {\n        func_085B(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function manualSwap() {\n        if (msg.sender != storage[0x15] & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = address(this);\n        memory[0x20:0x40] = 0x02;\n        var var0 = 0x0519;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        func_0E61(var1);\n        var temp0 = memory[0x40:0x60];\n        var temp1 = address(this).balance;\n        var temp2;\n        temp2, memory[temp0:temp0 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n        var0 = !temp2;\n    \n        if (!var0) { return; }\n    \n        var temp3 = returndata.length;\n        memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function removeLimits() {\n        var var0 = 0x0564;\n        func_0FBB();\n        var temp0 = storage[0x01];\n        storage[0x17] = temp0;\n        storage[0x18] = temp0;\n    }\n    \n    function enableTrading() {\n        var var0 = 0x0579;\n        func_0FBB();\n        storage[0x06] = (storage[0x06] & ~(0xff << 0xa0)) | (0x01 << 0xa0);\n    }\n    \n    function addLiquidity() {\n        var var0 = 0x05a3;\n        func_0FBB();\n        var0 = storage[0x05] & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n        var var1 = 0xc45a0155;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) << 0xe0;\n        var var2 = temp0 + 0x04;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x20] = address(var0).staticcall.gas(msg.gas)(memory[temp1:temp1 + var2 - temp1]);\n        var var3 = !temp2;\n    \n        if (!var3) {\n            var temp3 = memory[0x40:0x60];\n            var temp4 = returndata.length;\n            memory[0x40:0x60] = temp3 + (temp4 + 0x1f & ~0x1f);\n            var0 = 0x061a;\n            var2 = temp3;\n            var1 = var2 + temp4;\n            var0 = func_1668(var1, var2);\n            var0 = var0 & (0x01 << 0xa0) - 0x01;\n            var1 = 0xc9c65396;\n            var2 = address(this);\n            var3 = storage[0x05] & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n            var var4 = 0xad5c4648;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = (var4 & 0xffffffff) << 0xe0;\n            var var5 = temp5 + 0x04;\n            var temp6 = memory[0x40:0x60];\n            var temp7;\n            temp7, memory[temp6:temp6 + 0x20] = address(var3).staticcall.gas(msg.gas)(memory[temp6:temp6 + var5 - temp6]);\n            var var6 = !temp7;\n        \n            if (!var6) {\n                var temp8 = memory[0x40:0x60];\n                var temp9 = returndata.length;\n                memory[0x40:0x60] = temp8 + (temp9 + 0x1f & ~0x1f);\n                var3 = 0x06a0;\n                var5 = temp8;\n                var4 = var5 + temp9;\n                var3 = func_1668(var4, var5);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = (var1 << 0xe0) & ~((0x01 << 0xe0) - 0x01);\n                var temp11 = (0x01 << 0xa0) - 0x01;\n                memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = temp11 & var2;\n                memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = temp11 & var3;\n                var2 = temp10 + 0x44;\n                var temp12 = memory[0x40:0x60];\n                var temp13;\n                temp13, memory[temp12:temp12 + 0x20] = address(var0).call.gas(msg.gas)(memory[temp12:temp12 + var2 - temp12]);\n                var3 = !temp13;\n            \n                if (!var3) {\n                    var temp14 = memory[0x40:0x60];\n                    var temp15 = returndata.length;\n                    memory[0x40:0x60] = temp14 + (temp15 + 0x1f & ~0x1f);\n                    var0 = 0x0711;\n                    var2 = temp14;\n                    var1 = var2 + temp15;\n                    var0 = func_1668(var1, var2);\n                    var temp16 = (0x01 << 0xa0) - 0x01;\n                    storage[0x06] = (temp16 & var0) | (storage[0x06] & ~((0x01 << 0xa0) - 0x01));\n                    var0 = 0x0740;\n                    var1 = address(this);\n                    var3 = storage[0x01];\n                    var2 = storage[0x05] & temp16;\n                    func_085B(var1, var2, var3);\n                    var0 = storage[0x05] & (0x01 << 0xa0) - 0x01;\n                    var1 = 0xf305d719;\n                    var2 = msg.value;\n                    var3 = address(this);\n                    memory[0x00:0x20] = var3 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x02;\n                    var4 = storage[keccak256(memory[0x00:0x40])];\n                    var temp17 = memory[0x40:0x60];\n                    memory[temp17:temp17 + 0x20] = (var1 & 0xffffffff) << 0xe0;\n                    var temp18 = var3;\n                    var3 = 0x0798;\n                    var temp19 = var4;\n                    var4 = temp18;\n                    var5 = temp19;\n                    var6 = 0x00;\n                    var var7 = var6;\n                    var var8 = msg.sender;\n                    var var9 = block.timestamp;\n                    var var10 = temp17 + 0x04;\n                    var3 = func_1685(var4, var5, var6, var7, var8, var9, var10);\n                    var temp20 = memory[0x40:0x60];\n                    var temp21;\n                    temp21, memory[temp20:temp20 + 0x60] = address(var0).call.gas(msg.gas).value(var2)(memory[temp20:temp20 + var3 - temp20]);\n                    var4 = !temp21;\n                \n                    if (!var4) {\n                        var temp22 = memory[0x40:0x60];\n                        var temp23 = returndata.length;\n                        memory[0x40:0x60] = temp22 + (temp23 + 0x1f & ~0x1f);\n                        var0 = 0x07db;\n                        var2 = temp22;\n                        var1 = var2 + temp23;\n                        var0, var1, var2 = func_16C0(var1, var2);\n                        return;\n                    } else {\n                        var temp24 = returndata.length;\n                        memory[0x00:0x00 + temp24] = returndata[0x00:0x00 + temp24];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp25 = returndata.length;\n                    memory[0x00:0x00 + temp25] = returndata[0x00:0x00 + temp25];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp26 = returndata.length;\n                memory[0x00:0x00 + temp26] = returndata[0x00:0x00 + temp26];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp27 = returndata.length;\n            memory[0x00:0x00 + temp27] = returndata[0x00:0x00 + temp27];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_085B(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x24;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = 0x72657373 << 0xe0;\n            var0 = temp9 + 0x84;\n            goto label_0849;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = temp0 & arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x03;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x22;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7373 << 0xf0;\n            var var0 = temp7 + 0x84;\n        \n        label_0849:\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_097F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x04e2;\n        var var2 = arg1;\n        var var3 = arg0;\n        return func_1704(var2, var3);\n    }\n    \n    function func_098B(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp14 + 0x04:temp14 + 0x04 + 0x20] = 0x20;\n            memory[temp14 + 0x24:temp14 + 0x24 + 0x20] = 0x25;\n            memory[temp14 + 0x44:temp14 + 0x44 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n            memory[temp14 + 0x64:temp14 + 0x64 + 0x20] = 0x6472657373 << 0xd8;\n            var0 = temp14 + 0x84;\n            goto label_0849;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = 0x02;\n        \n            if (arg2 <= storage[keccak256(memory[0x00:0x40])]) {\n                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x04;\n                var var0 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n            \n                if (var0) {\n                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_0B63; }\n                    else { goto label_0B1B; }\n                } else if (!var0) {\n                label_0B63:\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                    var0 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n                \n                    if (var0) {\n                        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                        var0 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n                    \n                        if (!var0) { goto label_0BBF; }\n                        else { goto label_0BAC; }\n                    } else if (!var0) {\n                    label_0BBF:\n                    \n                        if (!var0) {\n                        label_0BD6:\n                        \n                            if (!var0) {\n                            label_0C4F:\n                                var0 = arg2 <= storage[0x17];\n                            \n                                if (!var0) {\n                                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                                    memory[0x20:0x40] = 0x04;\n                                    var0 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n                                \n                                    if (var0) { goto label_0C9B; }\n                                    else { goto label_0C7E; }\n                                } else if (var0) {\n                                label_0C9B:\n                                \n                                    if (var0) {\n                                    label_0CDB:\n                                        var temp0 = (0x01 << 0xa0) - 0x01;\n                                        var0 = storage[0x06] & temp0 == temp0 & arg1;\n                                    \n                                        if (var0) {\n                                            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                                            memory[0x20:0x40] = 0x04;\n                                        \n                                            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_0D2F; }\n                                            else { goto label_0D17; }\n                                        } else if (!var0) {\n                                        label_0D2F:\n                                            var0 = 0x0d39;\n                                            var var1 = arg0;\n                                            var var2 = arg1;\n                                            var0 = func_1071(var1, var2);\n                                        \n                                            if (!var0) {\n                                                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                                                memory[0x20:0x40] = 0x02;\n                                                var1 = storage[keccak256(memory[0x00:0x40])];\n                                                var0 = 0x0d72;\n                                                var2 = arg2;\n                                                var0 = func_097F(var1, var2);\n                                                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                                                memory[0x20:0x40] = 0x02;\n                                                var temp1 = var0;\n                                                var0 = 0x00;\n                                                storage[keccak256(memory[var0:var0 + 0x40])] = temp1;\n                                                var1 = 0x0d98;\n                                                var2 = arg0;\n                                                var var3 = arg1;\n                                                var1 = func_128A(var2, var3);\n                                            \n                                                if (var1) {\n                                                    var1 = 0x0dad;\n                                                    var2 = arg0;\n                                                    var3 = arg1;\n                                                    var var4 = arg2;\n                                                    var1 = func_12D0(var2, var3, var4);\n                                                \n                                                label_0DAD:\n                                                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                                                    memory[0x20:0x40] = 0x02;\n                                                    var temp2 = var1;\n                                                    var0 = temp2;\n                                                    var2 = storage[keccak256(memory[0x00:0x40])];\n                                                    var1 = 0x0dd3;\n                                                    var3 = var0;\n                                                    var1 = func_1065(var2, var3);\n                                                    var temp3 = (0x01 << 0xa0) - 0x01;\n                                                    memory[0x00:0x20] = arg1 & temp3;\n                                                    memory[0x20:0x40] = 0x02;\n                                                    storage[keccak256(memory[0x00:0x40])] = var1;\n                                                    var1 = arg1 & temp3;\n                                                    var temp4 = memory[0x40:0x60];\n                                                    var2 = arg0 & temp3;\n                                                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                                                    memory[temp4:temp4 + 0x20] = var0;\n                                                    var4 = temp4 + 0x20;\n                                                    var temp5 = memory[0x40:0x60];\n                                                    log(memory[temp5:temp5 + var4 - temp5], [stack[-2], stack[-3], stack[-4]]);\n                                                    return;\n                                                } else {\n                                                    var1 = arg2;\n                                                    goto label_0DAD;\n                                                }\n                                            } else {\n                                                var0 = 0x0d49;\n                                                var1 = storage[0x0a];\n                                                storage[0x08] = (storage[0x08] & ~0xff) | 0x01;\n                                                var2 = 0x00;\n                                                var3 = 0x1139;\n                                                var var8 = storage[0x0d];\n                                                var4 = 0x02;\n                                                var var5 = 0x1133;\n                                                var var6 = storage[0x0e];\n                                                var var10 = storage[0x0c];\n                                                var var7 = 0x112d;\n                                                var var9 = var7;\n                                                var var11 = 0x01;\n                                                var9 = func_1065(var10, var11);\n                                                var7 = func_112D(var8, var9);\n                                                var5 = func_112D(var6, var7);\n                                                var temp6 = var4;\n                                                var4 = var5;\n                                                var5 = temp6;\n                                                var6 = 0x00;\n                                                var7 = 0x04e2;\n                                                var8 = var5;\n                                                var9 = var4;\n                                                var7 = func_17B1(var8, var9);\n                                                var3 = var7;\n                                                // Error: Could not resolve jump destination!\n                                            }\n                                        } else {\n                                        label_0D17:\n                                            var0 = 0x01;\n                                            var1 = 0x07;\n                                            var2 = 0x00;\n                                            var3 = 0x0d29;\n                                            var4 = var0;\n                                            var5 = storage[var1];\n                                            var3 = func_1717(var4, var5);\n                                            storage[var1] = var3;\n                                            goto label_0D2F;\n                                        }\n                                    } else {\n                                    label_0CA0:\n                                        var temp7 = memory[0x40:0x60];\n                                        memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n                                        memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                                        memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x11;\n                                        memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x151608131a5b5a5d08115e18d959591959 << 0x7a;\n                                        var0 = temp7 + 0x64;\n                                    \n                                    label_0849:\n                                        var temp8 = memory[0x40:0x60];\n                                        revert(memory[temp8:temp8 + var0 - temp8]);\n                                    }\n                                } else {\n                                label_0C7E:\n                                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                                    memory[0x20:0x40] = 0x04;\n                                \n                                    if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_0CDB; }\n                                    else { goto label_0CA0; }\n                                }\n                            } else {\n                            label_0BDC:\n                                var0 = storage[0x18];\n                                memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                                memory[0x20:0x40] = 0x02;\n                                var1 = 0x0c01;\n                                var2 = storage[keccak256(memory[0x00:0x40])];\n                                var3 = arg2;\n                                var1 = func_1065(var2, var3);\n                            \n                                if (var1 <= var0) { goto label_0C4F; }\n                            \n                                var temp9 = memory[0x40:0x60];\n                                memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x1e;\n                                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45786365656473206d6178696d756d2077616c6c657420616d6f756e742e0000;\n                                var0 = temp9 + 0x64;\n                                goto label_0849;\n                            }\n                        } else {\n                        label_0BC6:\n                        \n                            if (arg1 & (0x01 << 0xa0) - 0x01 == 0xdead) { goto label_0C4F; }\n                            else { goto label_0BDC; }\n                        }\n                    } else {\n                    label_0BAC:\n                        var temp10 = (0x01 << 0xa0) - 0x01;\n                        var0 = storage[0x06] & temp10 != temp10 & arg1;\n                    \n                        if (!var0) { goto label_0BD6; }\n                        else { goto label_0BC6; }\n                    }\n                } else {\n                label_0B1B:\n                \n                    if (storage[0x06] / (0x01 << 0xa0) & 0xff) { goto label_0B63; }\n                \n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n                    memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x0d;\n                    memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = 0x74726164696e67416374697665 << 0x98;\n                    var0 = temp11 + 0x64;\n                    goto label_0849;\n                }\n            } else {\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = 0x461bcd << 0xe5;\n                memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n                memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x31;\n                memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = 0x596f752061726520747279696e6720746f207472616e73666572206d6f726520;\n                memory[temp12 + 0x64:temp12 + 0x64 + 0x20] = 0x7468616e20796f75722062616c616e6365 << 0x78;\n                var0 = temp12 + 0x84;\n                goto label_0849;\n            }\n        } else {\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x23;\n            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n            memory[temp13 + 0x64:temp13 + 0x64 + 0x20] = 0x657373 << 0xe8;\n            var0 = temp13 + 0x84;\n            goto label_0849;\n        }\n    }\n    \n    function func_0E35(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = var1;\n        var1 = 0x0849;\n        var var2 = temp1;\n        var var3 = temp0 + 0x04;\n        var1 = symbol(var2, var3);\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + var1 - temp2]);\n    }\n    \n    function func_0E61(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x02;\n        memory[0x40:0x60] = temp0 + 0x60;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x40] = msg.data[msg.data.length:msg.data.length + 0x40];\n        var var0 = temp0;\n        var var1 = address(this);\n        var var2 = var0;\n        var var3 = 0x00;\n    \n        if (var3 < memory[var2:var2 + 0x20]) {\n            var temp1 = (0x01 << 0xa0) - 0x01;\n            memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20] = temp1 & var1;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x15ab88c9 << 0xe3;\n            var temp3 = memory[0x40:0x60];\n            var1 = temp1 & storage[0x05];\n            var2 = 0xad5c4648;\n            var3 = temp2 + 0x04;\n            var temp4;\n            temp4, memory[temp3:temp3 + 0x20] = address(var1).staticcall.gas(msg.gas)(memory[temp3:temp3 + temp2 - temp3 + 0x04]);\n            var var4 = !temp4;\n        \n            if (!var4) {\n                var temp5 = memory[0x40:0x60];\n                var temp6 = returndata.length;\n                memory[0x40:0x60] = temp5 + (temp6 + 0x1f & ~0x1f);\n                var1 = 0x0f13;\n                var3 = temp5;\n                var2 = var3 + temp6;\n                var1 = func_1668(var2, var3);\n                var2 = var0;\n                var3 = 0x01;\n            \n                if (var3 < memory[var2:var2 + 0x20]) {\n                    var temp7 = (0x01 << 0xa0) - 0x01;\n                    memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20] = temp7 & var1;\n                    var1 = 0x0f4c;\n                    var2 = address(this);\n                    var3 = storage[0x05] & temp7;\n                    var4 = arg0;\n                    func_085B(var2, var3, var4);\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = 0x791ac947 << 0xe0;\n                    var1 = storage[0x05] & (0x01 << 0xa0) - 0x01;\n                    var2 = 0x791ac947;\n                    var3 = 0x0f85;\n                    var4 = arg0;\n                    var var5 = 0x00;\n                    var var6 = var0;\n                    var var7 = address(this);\n                    var var8 = block.timestamp;\n                    var var9 = temp8 + 0x04;\n                    var3 = func_1740(var4, var5, var6, var7, var8, var9);\n                    var4 = 0x00;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                    var var10 = !address(var9).code.length;\n                \n                    if (var10) { revert(memory[0x00:0x00]); }\n                \n                    var temp9;\n                    temp9, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                    var4 = !temp9;\n                \n                    if (!var4) { return; }\n                \n                    var temp10 = returndata.length;\n                    memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                } else {\n                    var4 = 0x0f26;\n                \n                label_172A:\n                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            } else {\n                var temp11 = returndata.length;\n                memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var4 = 0x0e96;\n            goto label_172A;\n        }\n    }\n    \n    function func_0FBB() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x20;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        var var0 = temp0 + 0x64;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + var0 - temp1]);\n    }\n    \n    function func_1015(var arg0) {\n        var temp0 = storage[0x00];\n        var temp1 = (0x01 << 0xa0) - 0x01;\n        var temp2 = temp1 & arg0;\n        storage[0x00] = temp2 | (temp0 & ~((0x01 << 0xa0) - 0x01));\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & (0x01 << 0xa0) - 0x01, stack[-1] & (0x01 << 0xa0) - 0x01]);\n    }\n    \n    function func_1065(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x04e2;\n        var var2 = arg1;\n        var var3 = arg0;\n        return func_1717(var2, var3);\n    }\n    \n    function func_1071(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !(storage[0x08] & 0xff);\n    \n        if (var1) {\n            var1 = storage[0x06] / (0x01 << 0xa8) & 0xff;\n        \n            if (!var1) { goto label_10A5; }\n            else { goto label_1097; }\n        } else if (!var1) {\n        label_10A5:\n        \n            if (!var1) {\n            label_10CA:\n            \n                if (!var1) {\n                label_10E3:\n                \n                    if (!var1) {\n                    label_04E2:\n                        return var1;\n                    } else {\n                    label_10EA:\n                        return storage[0x07] >= storage[0x09];\n                    }\n                } else {\n                label_10D1:\n                    var temp0 = (0x01 << 0xa0) - 0x01;\n                    var1 = storage[0x06] & temp0 == temp0 & arg1;\n                \n                    if (!var1) { goto label_04E2; }\n                    else { goto label_10EA; }\n                }\n            } else {\n            label_10AC:\n                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x04;\n                var1 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n            \n                if (!var1) { goto label_10E3; }\n                else { goto label_10D1; }\n            }\n        } else {\n        label_1097:\n            var1 = storage[0x06] / (0x01 << 0xa0) & 0xff;\n        \n            if (!var1) { goto label_10CA; }\n            else { goto label_10AC; }\n        }\n    }\n    \n    function func_112D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_1065(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_128A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var var1 = !(storage[keccak256(memory[var0:var0 + 0x40])] & 0xff);\n    \n        if (!var1) { return var1; }\n    \n        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x04;\n        return !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n    }\n    \n    function func_12D0(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x12dd;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_14F7(var3, var4);\n    \n        if (var2 <= var1) { return arg2; }\n    \n        var1 = 0x00;\n        var2 = 0x1300;\n        var3 = 0x12f2;\n        var4 = arg0;\n        var var5 = arg1;\n        var3 = func_14F7(var4, var5);\n        var4 = 0x1133;\n        var var6 = storage[0x13];\n        var5 = arg2;\n        var var7 = 0x00;\n        var var8 = 0x04e2;\n        var var9 = var6;\n        var var10 = var5;\n        var8 = func_17C8(var9, var10);\n        var4 = var8;\n        // Error: Could not resolve jump destination!\n    }\n    \n    function func_14F7(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = (0x01 << 0xa0) - 0x01;\n    \n        if ((arg1 & temp0) - (temp0 & storage[0x06])) {\n            var temp1 = (0x01 << 0xa0) - 0x01;\n        \n            if ((arg0 & temp1) - (temp1 & storage[0x06])) { return storage[0x12]; }\n        \n            var0 = storage[0x10];\n        \n        label_0408:\n            return var0;\n        } else {\n            var0 = storage[0x11];\n            goto label_0408;\n        }\n    }\n    \n    function symbol(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = 0x00;\n    \n        if (var3 >= var2) {\n        label_156F:\n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = 0x00;\n            return temp3 + (temp2 + 0x1f & ~0x1f) + 0x40;\n        } else {\n        label_155C:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_156F; }\n            else { goto label_155C; }\n        }\n    }\n    \n    function func_1590(var arg0) {\n        var temp0 = arg0;\n    \n        if (temp0 == temp0 & (0x01 << 0xa0) - 0x01) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_15A5(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x15c3;\n        var var4 = var2;\n        func_1590(var4);\n        r0 = var2;\n        arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_15D1(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var var3 = msg.data[arg1:arg1 + 0x20];\n        var var4 = 0x15f1;\n        var var5 = var3;\n        func_1590(var5);\n        var0 = var3;\n        var3 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var4 = 0x1601;\n        var5 = var3;\n        func_1590(var5);\n        r0 = var0;\n        arg0 = var3;\n        arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n        return r0, arg0, arg1;\n    }\n    \n    function func_1612(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var2 = 0x04e2;\n        var var3 = var1;\n        func_1590(var3);\n        return var1;\n    }\n    \n    function func_162F(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x164d;\n        var var4 = var2;\n        func_1590(var4);\n        var0 = var2;\n        var2 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var3 = 0x165d;\n        var4 = var2;\n        func_1590(var4);\n        arg0 = var2;\n        r0 = var0;\n        return r0, arg0;\n    }\n    \n    function func_1668(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = memory[arg1:arg1 + 0x20];\n        var var2 = 0x04e2;\n        var var3 = var1;\n        func_1590(var3);\n        return var1;\n    }\n    \n    function func_1685(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg6;\n        memory[temp1:temp1 + 0x20] = temp0 & arg0;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = arg1;\n        memory[temp1 + 0x40:temp1 + 0x40 + 0x20] = arg2;\n        memory[temp1 + 0x60:temp1 + 0x60 + 0x20] = arg3;\n        memory[temp1 + 0x80:temp1 + 0x80 + 0x20] = temp0 & arg4;\n        memory[temp1 + 0xa0:temp1 + 0xa0 + 0x20] = arg5;\n        return temp1 + 0xc0;\n    }\n    \n    function func_16C0(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        arg1 = memory[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        arg0 = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        r0 = memory[temp0:temp0 + 0x20];\n        return r0, arg0, arg1;\n    }\n    \n    function func_1704(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 - arg0;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var var1 = 0x0408;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_1717(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = arg0 + temp0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var var1 = 0x0408;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_1740(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg5;\n        memory[temp0:temp0 + 0x20] = arg0;\n        var var2 = 0x20;\n        memory[temp0 + var2:temp0 + var2 + 0x20] = arg1;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0xa0;\n        var temp1 = arg2;\n        var temp2 = memory[temp1:temp1 + 0x20];\n        var var4 = temp2;\n        memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20] = var4;\n        var var3 = temp0 + 0xc0;\n        var var1 = temp1 + var2;\n        var var5 = 0x00;\n    \n        if (var5 >= var4) {\n        label_1790:\n            var temp3 = arg5;\n            memory[temp3 + 0x60:temp3 + 0x60 + 0x20] = arg3 & (0x01 << 0xa0) - 0x01;\n            memory[temp3 + 0x80:temp3 + 0x80 + 0x20] = arg4;\n            return var3;\n        } else {\n        label_1774:\n            var temp4 = var1;\n            var temp5 = var3;\n            memory[temp5:temp5 + 0x20] = memory[temp4:temp4 + 0x20] & (0x01 << 0xa0) - 0x01;\n            var temp6 = var2;\n            var1 = temp6 + temp4;\n            var3 = temp6 + temp5;\n            var5 = var5 + 0x01;\n        \n            if (var5 >= var4) { goto label_1790; }\n            else { goto label_1774; }\n        }\n    }\n    \n    function func_17B1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg0;\n        var var0 = temp1 * temp0;\n    \n        if ((temp1 == var0 / temp0) | !temp0) { return var0; }\n    \n        var var1 = 0x0408;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_17C8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) { return arg1 / arg0; }\n    \n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x12;\n        revert(memory[0x00:0x24]);\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (0x751039fc > var0) {\n                if (0x4fbee193 > var0) {\n                    if (var0 == 0x06fdde03) {\n                        // Dispatch table entry for name()\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var temp0 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp0 + 0x40;\n                        memory[temp0:temp0 + 0x20] = 0x09;\n                        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x0c1e111a585b5bdb99 << 0xba;\n                        var1 = 0x016a;\n                        var var2 = temp0;\n                        var var3 = memory[0x40:0x60];\n                        var1 = symbol(var2, var3);\n                    \n                    label_016A:\n                        var temp1 = memory[0x40:0x60];\n                        return memory[temp1:temp1 + var1 - temp1];\n                    } else if (var0 == 0x095ea7b3) {\n                        // Dispatch table entry for approve(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0193;\n                        var2 = 0x018e;\n                        var3 = msg.data.length;\n                        var var4 = 0x04;\n                        var2, var3 = func_15A5(var3, var4);\n                        var1 = func_018E(var2, var3);\n                    \n                    label_0193:\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = !!var1;\n                        var1 = temp2 + 0x20;\n                        goto label_016A;\n                    } else if (var0 == 0x18160ddd) {\n                        // Dispatch table entry for totalSupply()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x01b8;\n                        var1 = totalSupply();\n                    \n                    label_01B8:\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = var1;\n                        var1 = temp3 + 0x20;\n                        goto label_016A;\n                    } else if (var0 == 0x23b872dd) {\n                        // Dispatch table entry for transferFrom(address,address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0193;\n                        var2 = 0x01e1;\n                        var3 = msg.data.length;\n                        var4 = 0x04;\n                        var2, var3, var4 = func_15D1(var3, var4);\n                        var var5 = 0x00;\n                        var var6 = 0x048c;\n                        var var7 = var2;\n                        var var8 = var3;\n                        var var9 = var4;\n                        func_098B(var7, var8, var9);\n                        var6 = 0x04de;\n                        var7 = var2;\n                        var8 = msg.sender;\n                        var9 = 0x04d9;\n                        var temp4 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp4 + 0x60;\n                        memory[temp4:temp4 + 0x20] = 0x28;\n                        memory[temp4 + 0x20:temp4 + 0x20 + 0x28] = code[0x17eb:0x1813];\n                        memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp5;\n                        var var10 = storage[keccak256(memory[0x00:0x40])];\n                        var var11 = var4;\n                        var var12 = temp4;\n                        var9 = func_0E35(var10, var11, var12);\n                        func_04D9(var7, var8, var9);\n                        var5 = 0x01;\n                        var1 = var5;\n                        // Error: Could not resolve jump destination!\n                    } else if (var0 == 0x313ce567) {\n                        // Dispatch table entry for decimals()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = 0x09;\n                        var1 = temp6 + 0x20;\n                        goto label_016A;\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x4fbee193) {\n                    // Dispatch table entry for isExcludedFromFees(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0193;\n                    var2 = 0x021d;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_1612(var3, var4);\n                    var2 = func_021D(var2);\n                    goto label_0193;\n                } else if (var0 == 0x51bc3c85) {\n                    // Dispatch table entry for manualSwap()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0247;\n                    manualSwap();\n                    stop();\n                } else if (var0 == 0x6c0a24eb) {\n                    // Dispatch table entry for _maxWalletAmount()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b8;\n                    var2 = storage[0x18];\n                    goto label_01B8;\n                } else if (var0 == 0x70a08231) {\n                    // Dispatch table entry for balanceOf(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b8;\n                    var2 = 0x027a;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_1612(var3, var4);\n                    var1 = func_027A(var2);\n                    goto label_01B8;\n                } else if (var0 == 0x715018a6) {\n                    // Dispatch table entry for renounceOwnership()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0247;\n                    var2 = 0x0550;\n                    func_0FBB();\n                    var2 = 0x055a;\n                    var3 = 0x00;\n                    func_1015(var3);\n                    // Error: Could not resolve jump destination!\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0xa8aa1b31 > var0) {\n                if (var0 == 0x751039fc) {\n                    // Dispatch table entry for removeLimits()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0247;\n                    removeLimits();\n                    stop();\n                } else if (var0 == 0x7d1db4a5) {\n                    // Dispatch table entry for _maxTxAmount()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b8;\n                    var2 = storage[0x17];\n                    goto label_01B8;\n                } else if (var0 == 0x8a8c523c) {\n                    // Dispatch table entry for enableTrading()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0247;\n                    enableTrading();\n                    stop();\n                } else if (var0 == 0x8da5cb5b) {\n                    // Dispatch table entry for owner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = storage[0x00] & (0x01 << 0xa0) - 0x01;\n                \n                label_0304:\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = var1 & (0x01 << 0xa0) - 0x01;\n                    var1 = temp7 + 0x20;\n                    goto label_016A;\n                } else if (var0 == 0x95d89b41) {\n                    // Dispatch table entry for symbol()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp8 = memory[0x40:0x60];\n                    var1 = temp8;\n                    memory[0x40:0x60] = var1 + 0x40;\n                    memory[var1:var1 + 0x20] = 0x04;\n                    memory[var1 + 0x20:var1 + 0x20 + 0x20] = 0x16111351 << 0xe2;\n                    var temp9 = var1;\n                    var1 = 0x016a;\n                    var2 = temp9;\n                    var3 = memory[0x40:0x60];\n                    var1 = symbol(var2, var3);\n                    goto label_016A;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0xa8aa1b31) {\n                // Dispatch table entry for pair()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0304;\n                var2 = storage[0x06] & (0x01 << 0xa0) - 0x01;\n                goto label_0304;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var2 = 0x0384;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_15A5(var3, var4);\n                var4 = 0x00;\n                var5 = 0x0404;\n                var6 = msg.sender;\n                var7 = var2;\n                var8 = var3;\n                func_098B(var6, var7, var8);\n                var4 = 0x01;\n                var1 = var4;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b8;\n                var2 = 0x03a4;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_162F(var3, var4);\n                var1 = func_03A4(var2, var3);\n                goto label_01B8;\n            } else if (var0 == 0xe8078d94) {\n                // Dispatch table entry for addLiquidity()\n                var1 = 0x0247;\n                addLiquidity();\n                stop();\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0247;\n                var2 = 0x03f2;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_1612(var3, var4);\n                func_03F2(var2);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (msg.data.length) { revert(memory[0x00:0x00]); }\n        else { stop(); }\n    }\n    \n    function func_018E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0404;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_085B(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function func_021D(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_027A(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x02;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_03A4(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_03F2(var arg0) {\n        var var0 = 0x07e8;\n        func_0FBB();\n    \n        if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var0 = 0x0545;\n            var var1 = arg0;\n            func_1015(var1);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x26;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x646472657373 << 0xd0;\n            var0 = temp0 + 0x84;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function totalSupply() returns (var r0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = 0xdead;\n        var var0 = 0x00;\n        var var1 = 0x047a;\n        var var2 = storage[0xac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b];\n        var var3 = 0x0474;\n        var var4 = storage[0x01];\n        var var5 = storage[0x6a9609baa168169acaea398c4407efea4be641bb08e21e88806d9836fd9333cc];\n        var3 = func_097F(var4, var5);\n        return func_0474(var2, var3);\n    }\n    \n    function func_0474(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_097F(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_04D9(var arg0, var arg1, var arg2) {\n        func_085B(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function manualSwap() {\n        if (msg.sender != storage[0x15] & (0x01 << 0xa0) - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = address(this);\n        memory[0x20:0x40] = 0x02;\n        var var0 = 0x0519;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        func_0E61(var1);\n        var temp0 = memory[0x40:0x60];\n        var temp1 = address(this).balance;\n        var temp2;\n        temp2, memory[temp0:temp0 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n        var0 = !temp2;\n    \n        if (!var0) { return; }\n    \n        var temp3 = returndata.length;\n        memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function removeLimits() {\n        var var0 = 0x0564;\n        func_0FBB();\n        var temp0 = storage[0x01];\n        storage[0x17] = temp0;\n        storage[0x18] = temp0;\n    }\n    \n    function enableTrading() {\n        var var0 = 0x0579;\n        func_0FBB();\n        storage[0x06] = (storage[0x06] & ~(0xff << 0xa0)) | (0x01 << 0xa0);\n    }\n    \n    function addLiquidity() {\n        var var0 = 0x05a3;\n        func_0FBB();\n        var0 = storage[0x05] & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n        var var1 = 0xc45a0155;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) << 0xe0;\n        var var2 = temp0 + 0x04;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x20] = address(var0).staticcall.gas(msg.gas)(memory[temp1:temp1 + var2 - temp1]);\n        var var3 = !temp2;\n    \n        if (!var3) {\n            var temp3 = memory[0x40:0x60];\n            var temp4 = returndata.length;\n            memory[0x40:0x60] = temp3 + (temp4 + 0x1f & ~0x1f);\n            var0 = 0x061a;\n            var2 = temp3;\n            var1 = var2 + temp4;\n            var0 = func_1668(var1, var2);\n            var0 = var0 & (0x01 << 0xa0) - 0x01;\n            var1 = 0xc9c65396;\n            var2 = address(this);\n            var3 = storage[0x05] & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n            var var4 = 0xad5c4648;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = (var4 & 0xffffffff) << 0xe0;\n            var var5 = temp5 + 0x04;\n            var temp6 = memory[0x40:0x60];\n            var temp7;\n            temp7, memory[temp6:temp6 + 0x20] = address(var3).staticcall.gas(msg.gas)(memory[temp6:temp6 + var5 - temp6]);\n            var var6 = !temp7;\n        \n            if (!var6) {\n                var temp8 = memory[0x40:0x60];\n                var temp9 = returndata.length;\n                memory[0x40:0x60] = temp8 + (temp9 + 0x1f & ~0x1f);\n                var3 = 0x06a0;\n                var5 = temp8;\n                var4 = var5 + temp9;\n                var3 = func_1668(var4, var5);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = (var1 << 0xe0) & ~((0x01 << 0xe0) - 0x01);\n                var temp11 = (0x01 << 0xa0) - 0x01;\n                memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = temp11 & var2;\n                memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = temp11 & var3;\n                var2 = temp10 + 0x44;\n                var temp12 = memory[0x40:0x60];\n                var temp13;\n                temp13, memory[temp12:temp12 + 0x20] = address(var0).call.gas(msg.gas)(memory[temp12:temp12 + var2 - temp12]);\n                var3 = !temp13;\n            \n                if (!var3) {\n                    var temp14 = memory[0x40:0x60];\n                    var temp15 = returndata.length;\n                    memory[0x40:0x60] = temp14 + (temp15 + 0x1f & ~0x1f);\n                    var0 = 0x0711;\n                    var2 = temp14;\n                    var1 = var2 + temp15;\n                    var0 = func_1668(var1, var2);\n                    var temp16 = (0x01 << 0xa0) - 0x01;\n                    storage[0x06] = (temp16 & var0) | (storage[0x06] & ~((0x01 << 0xa0) - 0x01));\n                    var0 = 0x0740;\n                    var1 = address(this);\n                    var3 = storage[0x01];\n                    var2 = storage[0x05] & temp16;\n                    func_085B(var1, var2, var3);\n                    var0 = storage[0x05] & (0x01 << 0xa0) - 0x01;\n                    var1 = 0xf305d719;\n                    var2 = msg.value;\n                    var3 = address(this);\n                    memory[0x00:0x20] = var3 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x02;\n                    var4 = storage[keccak256(memory[0x00:0x40])];\n                    var temp17 = memory[0x40:0x60];\n                    memory[temp17:temp17 + 0x20] = (var1 & 0xffffffff) << 0xe0;\n                    var temp18 = var3;\n                    var3 = 0x0798;\n                    var temp19 = var4;\n                    var4 = temp18;\n                    var5 = temp19;\n                    var6 = 0x00;\n                    var var7 = var6;\n                    var var8 = msg.sender;\n                    var var9 = block.timestamp;\n                    var var10 = temp17 + 0x04;\n                    var3 = func_1685(var4, var5, var6, var7, var8, var9, var10);\n                    var temp20 = memory[0x40:0x60];\n                    var temp21;\n                    temp21, memory[temp20:temp20 + 0x60] = address(var0).call.gas(msg.gas).value(var2)(memory[temp20:temp20 + var3 - temp20]);\n                    var4 = !temp21;\n                \n                    if (!var4) {\n                        var temp22 = memory[0x40:0x60];\n                        var temp23 = returndata.length;\n                        memory[0x40:0x60] = temp22 + (temp23 + 0x1f & ~0x1f);\n                        var0 = 0x07db;\n                        var2 = temp22;\n                        var1 = var2 + temp23;\n                        var0, var1, var2 = func_16C0(var1, var2);\n                        return;\n                    } else {\n                        var temp24 = returndata.length;\n                        memory[0x00:0x00 + temp24] = returndata[0x00:0x00 + temp24];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp25 = returndata.length;\n                    memory[0x00:0x00 + temp25] = returndata[0x00:0x00 + temp25];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp26 = returndata.length;\n                memory[0x00:0x00 + temp26] = returndata[0x00:0x00 + temp26];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp27 = returndata.length;\n            memory[0x00:0x00 + temp27] = returndata[0x00:0x00 + temp27];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_085B(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x24;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = 0x72657373 << 0xe0;\n            var0 = temp9 + 0x84;\n            goto label_0849;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = temp0 & arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x03;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x22;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7373 << 0xf0;\n            var var0 = temp7 + 0x84;\n        \n        label_0849:\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_097F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x04e2;\n        var var2 = arg1;\n        var var3 = arg0;\n        return func_1704(var2, var3);\n    }\n    \n    function func_098B(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp14 + 0x04:temp14 + 0x04 + 0x20] = 0x20;\n            memory[temp14 + 0x24:temp14 + 0x24 + 0x20] = 0x25;\n            memory[temp14 + 0x44:temp14 + 0x44 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n            memory[temp14 + 0x64:temp14 + 0x64 + 0x20] = 0x6472657373 << 0xd8;\n            var0 = temp14 + 0x84;\n            goto label_0849;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = 0x02;\n        \n            if (arg2 <= storage[keccak256(memory[0x00:0x40])]) {\n                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x04;\n                var var0 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n            \n                if (var0) {\n                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_0B63; }\n                    else { goto label_0B1B; }\n                } else if (!var0) {\n                label_0B63:\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                    var0 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n                \n                    if (var0) {\n                        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                        var0 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n                    \n                        if (!var0) { goto label_0BBF; }\n                        else { goto label_0BAC; }\n                    } else if (!var0) {\n                    label_0BBF:\n                    \n                        if (!var0) {\n                        label_0BD6:\n                        \n                            if (!var0) {\n                            label_0C4F:\n                                var0 = arg2 <= storage[0x17];\n                            \n                                if (!var0) {\n                                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                                    memory[0x20:0x40] = 0x04;\n                                    var0 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n                                \n                                    if (var0) { goto label_0C9B; }\n                                    else { goto label_0C7E; }\n                                } else if (var0) {\n                                label_0C9B:\n                                \n                                    if (var0) {\n                                    label_0CDB:\n                                        var temp0 = (0x01 << 0xa0) - 0x01;\n                                        var0 = storage[0x06] & temp0 == temp0 & arg1;\n                                    \n                                        if (var0) {\n                                            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                                            memory[0x20:0x40] = 0x04;\n                                        \n                                            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_0D2F; }\n                                            else { goto label_0D17; }\n                                        } else if (!var0) {\n                                        label_0D2F:\n                                            var0 = 0x0d39;\n                                            var var1 = arg0;\n                                            var var2 = arg1;\n                                            var0 = func_1071(var1, var2);\n                                        \n                                            if (!var0) {\n                                                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                                                memory[0x20:0x40] = 0x02;\n                                                var1 = storage[keccak256(memory[0x00:0x40])];\n                                                var0 = 0x0d72;\n                                                var2 = arg2;\n                                                var0 = func_097F(var1, var2);\n                                                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                                                memory[0x20:0x40] = 0x02;\n                                                var temp1 = var0;\n                                                var0 = 0x00;\n                                                storage[keccak256(memory[var0:var0 + 0x40])] = temp1;\n                                                var1 = 0x0d98;\n                                                var2 = arg0;\n                                                var var3 = arg1;\n                                                var1 = func_128A(var2, var3);\n                                            \n                                                if (var1) {\n                                                    var1 = 0x0dad;\n                                                    var2 = arg0;\n                                                    var3 = arg1;\n                                                    var var4 = arg2;\n                                                    var1 = func_12D0(var2, var3, var4);\n                                                \n                                                label_0DAD:\n                                                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                                                    memory[0x20:0x40] = 0x02;\n                                                    var temp2 = var1;\n                                                    var0 = temp2;\n                                                    var2 = storage[keccak256(memory[0x00:0x40])];\n                                                    var1 = 0x0dd3;\n                                                    var3 = var0;\n                                                    var1 = func_1065(var2, var3);\n                                                    var temp3 = (0x01 << 0xa0) - 0x01;\n                                                    memory[0x00:0x20] = arg1 & temp3;\n                                                    memory[0x20:0x40] = 0x02;\n                                                    storage[keccak256(memory[0x00:0x40])] = var1;\n                                                    var1 = arg1 & temp3;\n                                                    var temp4 = memory[0x40:0x60];\n                                                    var2 = arg0 & temp3;\n                                                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                                                    memory[temp4:temp4 + 0x20] = var0;\n                                                    var4 = temp4 + 0x20;\n                                                    var temp5 = memory[0x40:0x60];\n                                                    log(memory[temp5:temp5 + var4 - temp5], [stack[-2], stack[-3], stack[-4]]);\n                                                    return;\n                                                } else {\n                                                    var1 = arg2;\n                                                    goto label_0DAD;\n                                                }\n                                            } else {\n                                                var0 = 0x0d49;\n                                                var1 = storage[0x0a];\n                                                storage[0x08] = (storage[0x08] & ~0xff) | 0x01;\n                                                var2 = 0x00;\n                                                var3 = 0x1139;\n                                                var var8 = storage[0x0d];\n                                                var4 = 0x02;\n                                                var var5 = 0x1133;\n                                                var var6 = storage[0x0e];\n                                                var var10 = storage[0x0c];\n                                                var var7 = 0x112d;\n                                                var var9 = var7;\n                                                var var11 = 0x01;\n                                                var9 = func_1065(var10, var11);\n                                                var7 = func_112D(var8, var9);\n                                                var5 = func_112D(var6, var7);\n                                                var temp6 = var4;\n                                                var4 = var5;\n                                                var5 = temp6;\n                                                var6 = 0x00;\n                                                var7 = 0x04e2;\n                                                var8 = var5;\n                                                var9 = var4;\n                                                var7 = func_17B1(var8, var9);\n                                                var3 = var7;\n                                                // Error: Could not resolve jump destination!\n                                            }\n                                        } else {\n                                        label_0D17:\n                                            var0 = 0x01;\n                                            var1 = 0x07;\n                                            var2 = 0x00;\n                                            var3 = 0x0d29;\n                                            var4 = var0;\n                                            var5 = storage[var1];\n                                            var3 = func_1717(var4, var5);\n                                            storage[var1] = var3;\n                                            goto label_0D2F;\n                                        }\n                                    } else {\n                                    label_0CA0:\n                                        var temp7 = memory[0x40:0x60];\n                                        memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n                                        memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                                        memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x11;\n                                        memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x151608131a5b5a5d08115e18d959591959 << 0x7a;\n                                        var0 = temp7 + 0x64;\n                                    \n                                    label_0849:\n                                        var temp8 = memory[0x40:0x60];\n                                        revert(memory[temp8:temp8 + var0 - temp8]);\n                                    }\n                                } else {\n                                label_0C7E:\n                                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                                    memory[0x20:0x40] = 0x04;\n                                \n                                    if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_0CDB; }\n                                    else { goto label_0CA0; }\n                                }\n                            } else {\n                            label_0BDC:\n                                var0 = storage[0x18];\n                                memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                                memory[0x20:0x40] = 0x02;\n                                var1 = 0x0c01;\n                                var2 = storage[keccak256(memory[0x00:0x40])];\n                                var3 = arg2;\n                                var1 = func_1065(var2, var3);\n                            \n                                if (var1 <= var0) { goto label_0C4F; }\n                            \n                                var temp9 = memory[0x40:0x60];\n                                memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x1e;\n                                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45786365656473206d6178696d756d2077616c6c657420616d6f756e742e0000;\n                                var0 = temp9 + 0x64;\n                                goto label_0849;\n                            }\n                        } else {\n                        label_0BC6:\n                        \n                            if (arg1 & (0x01 << 0xa0) - 0x01 == 0xdead) { goto label_0C4F; }\n                            else { goto label_0BDC; }\n                        }\n                    } else {\n                    label_0BAC:\n                        var temp10 = (0x01 << 0xa0) - 0x01;\n                        var0 = storage[0x06] & temp10 != temp10 & arg1;\n                    \n                        if (!var0) { goto label_0BD6; }\n                        else { goto label_0BC6; }\n                    }\n                } else {\n                label_0B1B:\n                \n                    if (storage[0x06] / (0x01 << 0xa0) & 0xff) { goto label_0B63; }\n                \n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n                    memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x0d;\n                    memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = 0x74726164696e67416374697665 << 0x98;\n                    var0 = temp11 + 0x64;\n                    goto label_0849;\n                }\n            } else {\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = 0x461bcd << 0xe5;\n                memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n                memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x31;\n                memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = 0x596f752061726520747279696e6720746f207472616e73666572206d6f726520;\n                memory[temp12 + 0x64:temp12 + 0x64 + 0x20] = 0x7468616e20796f75722062616c616e6365 << 0x78;\n                var0 = temp12 + 0x84;\n                goto label_0849;\n            }\n        } else {\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x23;\n            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n            memory[temp13 + 0x64:temp13 + 0x64 + 0x20] = 0x657373 << 0xe8;\n            var0 = temp13 + 0x84;\n            goto label_0849;\n        }\n    }\n    \n    function func_0E35(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = var1;\n        var1 = 0x0849;\n        var var2 = temp1;\n        var var3 = temp0 + 0x04;\n        var1 = symbol(var2, var3);\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + var1 - temp2]);\n    }\n    \n    function func_0E61(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x02;\n        memory[0x40:0x60] = temp0 + 0x60;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x40] = msg.data[msg.data.length:msg.data.length + 0x40];\n        var var0 = temp0;\n        var var1 = address(this);\n        var var2 = var0;\n        var var3 = 0x00;\n    \n        if (var3 < memory[var2:var2 + 0x20]) {\n            var temp1 = (0x01 << 0xa0) - 0x01;\n            memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20] = temp1 & var1;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x15ab88c9 << 0xe3;\n            var temp3 = memory[0x40:0x60];\n            var1 = temp1 & storage[0x05];\n            var2 = 0xad5c4648;\n            var3 = temp2 + 0x04;\n            var temp4;\n            temp4, memory[temp3:temp3 + 0x20] = address(var1).staticcall.gas(msg.gas)(memory[temp3:temp3 + temp2 - temp3 + 0x04]);\n            var var4 = !temp4;\n        \n            if (!var4) {\n                var temp5 = memory[0x40:0x60];\n                var temp6 = returndata.length;\n                memory[0x40:0x60] = temp5 + (temp6 + 0x1f & ~0x1f);\n                var1 = 0x0f13;\n                var3 = temp5;\n                var2 = var3 + temp6;\n                var1 = func_1668(var2, var3);\n                var2 = var0;\n                var3 = 0x01;\n            \n                if (var3 < memory[var2:var2 + 0x20]) {\n                    var temp7 = (0x01 << 0xa0) - 0x01;\n                    memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20] = temp7 & var1;\n                    var1 = 0x0f4c;\n                    var2 = address(this);\n                    var3 = storage[0x05] & temp7;\n                    var4 = arg0;\n                    func_085B(var2, var3, var4);\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = 0x791ac947 << 0xe0;\n                    var1 = storage[0x05] & (0x01 << 0xa0) - 0x01;\n                    var2 = 0x791ac947;\n                    var3 = 0x0f85;\n                    var4 = arg0;\n                    var var5 = 0x00;\n                    var var6 = var0;\n                    var var7 = address(this);\n                    var var8 = block.timestamp;\n                    var var9 = temp8 + 0x04;\n                    var3 = func_1740(var4, var5, var6, var7, var8, var9);\n                    var4 = 0x00;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                    var var10 = !address(var9).code.length;\n                \n                    if (var10) { revert(memory[0x00:0x00]); }\n                \n                    var temp9;\n                    temp9, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                    var4 = !temp9;\n                \n                    if (!var4) { return; }\n                \n                    var temp10 = returndata.length;\n                    memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                } else {\n                    var4 = 0x0f26;\n                \n                label_172A:\n                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            } else {\n                var temp11 = returndata.length;\n                memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var4 = 0x0e96;\n            goto label_172A;\n        }\n    }\n    \n    function func_0FBB() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x20;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        var var0 = temp0 + 0x64;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + var0 - temp1]);\n    }\n    \n    function func_1015(var arg0) {\n        var temp0 = storage[0x00];\n        var temp1 = (0x01 << 0xa0) - 0x01;\n        var temp2 = temp1 & arg0;\n        storage[0x00] = temp2 | (temp0 & ~((0x01 << 0xa0) - 0x01));\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & (0x01 << 0xa0) - 0x01, stack[-1] & (0x01 << 0xa0) - 0x01]);\n    }\n    \n    function func_1065(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x04e2;\n        var var2 = arg1;\n        var var3 = arg0;\n        return func_1717(var2, var3);\n    }\n    \n    function func_1071(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !(storage[0x08] & 0xff);\n    \n        if (var1) {\n            var1 = storage[0x06] / (0x01 << 0xa8) & 0xff;\n        \n            if (!var1) { goto label_10A5; }\n            else { goto label_1097; }\n        } else if (!var1) {\n        label_10A5:\n        \n            if (!var1) {\n            label_10CA:\n            \n                if (!var1) {\n                label_10E3:\n                \n                    if (!var1) {\n                    label_04E2:\n                        return var1;\n                    } else {\n                    label_10EA:\n                        return storage[0x07] >= storage[0x09];\n                    }\n                } else {\n                label_10D1:\n                    var temp0 = (0x01 << 0xa0) - 0x01;\n                    var1 = storage[0x06] & temp0 == temp0 & arg1;\n                \n                    if (!var1) { goto label_04E2; }\n                    else { goto label_10EA; }\n                }\n            } else {\n            label_10AC:\n                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x04;\n                var1 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n            \n                if (!var1) { goto label_10E3; }\n                else { goto label_10D1; }\n            }\n        } else {\n        label_1097:\n            var1 = storage[0x06] / (0x01 << 0xa0) & 0xff;\n        \n            if (!var1) { goto label_10CA; }\n            else { goto label_10AC; }\n        }\n    }\n    \n    function func_112D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_1065(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_128A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var var1 = !(storage[keccak256(memory[var0:var0 + 0x40])] & 0xff);\n    \n        if (!var1) { return var1; }\n    \n        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x04;\n        return !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n    }\n    \n    function func_12D0(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x12dd;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_14F7(var3, var4);\n    \n        if (var2 <= var1) { return arg2; }\n    \n        var1 = 0x00;\n        var2 = 0x1300;\n        var3 = 0x12f2;\n        var4 = arg0;\n        var var5 = arg1;\n        var3 = func_14F7(var4, var5);\n        var4 = 0x1133;\n        var var6 = storage[0x13];\n        var5 = arg2;\n        var var7 = 0x00;\n        var var8 = 0x04e2;\n        var var9 = var6;\n        var var10 = var5;\n        var8 = func_17C8(var9, var10);\n        var4 = var8;\n        // Error: Could not resolve jump destination!\n    }\n    \n    function func_14F7(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = (0x01 << 0xa0) - 0x01;\n    \n        if ((arg1 & temp0) - (temp0 & storage[0x06])) {\n            var temp1 = (0x01 << 0xa0) - 0x01;\n        \n            if ((arg0 & temp1) - (temp1 & storage[0x06])) { return storage[0x12]; }\n        \n            var0 = storage[0x10];\n        \n        label_0408:\n            return var0;\n        } else {\n            var0 = storage[0x11];\n            goto label_0408;\n        }\n    }\n    \n    function symbol(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = 0x00;\n    \n        if (var3 >= var2) {\n        label_156F:\n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = 0x00;\n            return temp3 + (temp2 + 0x1f & ~0x1f) + 0x40;\n        } else {\n        label_155C:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_156F; }\n            else { goto label_155C; }\n        }\n    }\n    \n    function func_1590(var arg0) {\n        var temp0 = arg0;\n    \n        if (temp0 == temp0 & (0x01 << 0xa0) - 0x01) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_15A5(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x15c3;\n        var var4 = var2;\n        func_1590(var4);\n        r0 = var2;\n        arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_15D1(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var var3 = msg.data[arg1:arg1 + 0x20];\n        var var4 = 0x15f1;\n        var var5 = var3;\n        func_1590(var5);\n        var0 = var3;\n        var3 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var4 = 0x1601;\n        var5 = var3;\n        func_1590(var5);\n        r0 = var0;\n        arg0 = var3;\n        arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n        return r0, arg0, arg1;\n    }\n    \n    function func_1612(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var2 = 0x04e2;\n        var var3 = var1;\n        func_1590(var3);\n        return var1;\n    }\n    \n    function func_162F(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x164d;\n        var var4 = var2;\n        func_1590(var4);\n        var0 = var2;\n        var2 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var3 = 0x165d;\n        var4 = var2;\n        func_1590(var4);\n        arg0 = var2;\n        r0 = var0;\n        return r0, arg0;\n    }\n    \n    function func_1668(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = memory[arg1:arg1 + 0x20];\n        var var2 = 0x04e2;\n        var var3 = var1;\n        func_1590(var3);\n        return var1;\n    }\n    \n    function func_1685(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg6;\n        memory[temp1:temp1 + 0x20] = temp0 & arg0;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = arg1;\n        memory[temp1 + 0x40:temp1 + 0x40 + 0x20] = arg2;\n        memory[temp1 + 0x60:temp1 + 0x60 + 0x20] = arg3;\n        memory[temp1 + 0x80:temp1 + 0x80 + 0x20] = temp0 & arg4;\n        memory[temp1 + 0xa0:temp1 + 0xa0 + 0x20] = arg5;\n        return temp1 + 0xc0;\n    }\n    \n    function func_16C0(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        arg1 = memory[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        arg0 = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        r0 = memory[temp0:temp0 + 0x20];\n        return r0, arg0, arg1;\n    }\n    \n    function func_1704(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 - arg0;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var var1 = 0x0408;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_1717(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = arg0 + temp0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var var1 = 0x0408;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_1740(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg5;\n        memory[temp0:temp0 + 0x20] = arg0;\n        var var2 = 0x20;\n        memory[temp0 + var2:temp0 + var2 + 0x20] = arg1;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0xa0;\n        var temp1 = arg2;\n        var temp2 = memory[temp1:temp1 + 0x20];\n        var var4 = temp2;\n        memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20] = var4;\n        var var3 = temp0 + 0xc0;\n        var var1 = temp1 + var2;\n        var var5 = 0x00;\n    \n        if (var5 >= var4) {\n        label_1790:\n            var temp3 = arg5;\n            memory[temp3 + 0x60:temp3 + 0x60 + 0x20] = arg3 & (0x01 << 0xa0) - 0x01;\n            memory[temp3 + 0x80:temp3 + 0x80 + 0x20] = arg4;\n            return var3;\n        } else {\n        label_1774:\n            var temp4 = var1;\n            var temp5 = var3;\n            memory[temp5:temp5 + 0x20] = memory[temp4:temp4 + 0x20] & (0x01 << 0xa0) - 0x01;\n            var temp6 = var2;\n            var1 = temp6 + temp4;\n            var3 = temp6 + temp5;\n            var5 = var5 + 0x01;\n        \n            if (var5 >= var4) { goto label_1790; }\n            else { goto label_1774; }\n        }\n    }\n    \n    function func_17B1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg0;\n        var var0 = temp1 * temp0;\n    \n        if ((temp1 == var0 / temp0) | !temp0) { return var0; }\n    \n        var var1 = 0x0408;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_17C8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) { return arg1 / arg0; }\n    \n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x12;\n        revert(memory[0x00:0x24]);\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 27.310588836669922,
	"usage": {
		"completion_tokens": 383,
		"prompt_tokens": 16614,
		"total_tokens": 16997
	}
}