{
	"address": "0xd2bfceeab8ffa24cdf94faa2683df63df4bcbdc8",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\nconst decimals = 18\nconst giveEthFundAddress = 0xd9092d94f74e6b5d408dbd3ecc88f3e5810d1e98\nconst totalEthereumBalance = eth.balance(this.address)\n\ndef storage:\n  stor0 is uint256 at storage 0\n  name is array of uint256 at storage 1\n  symbol is array of uint256 at storage 2\n  totalEthFundRecieved is uint256 at storage 3\n  totalEthFundCollected is uint256 at storage 4\n  stakingRequirement is uint256 at storage 5\n  stor6 is mapping of uint8 at storage 6\n  balanceOf is mapping of uint256 at storage 7\n  stor8 is mapping of uint256 at storage 8\n  stor9 is mapping of uint256 at storage 9\n  stor10 is mapping of uint256 at storage 10\n  totalSupply is uint256 at storage 11\n  stor12 is uint256 at storage 12\n  stor13 is mapping of uint8 at storage 13\n  onlyAmbassadors is uint8 at storage 14\n  stor15 is mapping of uint8 at storage 15\n\ndef name(): # not payable\n  return name[0 len name.length]\n\ndef canAcceptTokens_(address _param1): # not payable\n  return bool(stor15[_param1])\n\ndef totalSupply(): # not payable\n  return totalSupply\n\ndef onlyAmbassadors(): # not payable\n  return bool(onlyAmbassadors)\n\ndef stakingRequirement(): # not payable\n  return stakingRequirement\n\ndef balanceOf(address account): # not payable\n  return balanceOf[address(account)]\n\ndef administrators(address _param1): # not payable\n  return bool(stor13[_param1])\n\ndef totalEthFundCollected(): # not payable\n  return totalEthFundCollected\n\ndef myTokens(): # not payable\n  return balanceOf[caller]\n\ndef symbol(): # not payable\n  return symbol[0 len symbol.length]\n\ndef totalEthFundRecieved(): # not payable\n  return totalEthFundRecieved\n\n#\n#  Regular functions\n#\n\ndef setStakingRequirement(uint256 _amountOfTokens): # not payable\n  require stor13[caller]\n  stakingRequirement = _amountOfTokens\n\ndef etherToSendFund(): # not payable\n  require totalEthFundRecieved <= totalEthFundCollected\n  return (totalEthFundCollected - totalEthFundRecieved)\n\ndef setName(string _name): # not payable\n  require stor13[caller]\n  name[] = Array(len=_name.length, data=_name[all])\n\ndef setSymbol(string _symbol): # not payable\n  require stor13[caller]\n  symbol[] = Array(len=_symbol.length, data=_symbol[all])\n\ndef setCanAcceptTokens(address _address, bool _value): # not payable\n  require stor13[caller]\n  stor15[address(_address)] = uint8(_value)\n\ndef setAdministrator(address _identifier, bool _status): # not payable\n  require stor13[caller]\n  stor13[address(_identifier)] = uint8(_status)\n\ndef dividendsOf(address _customerAddress): # not payable\n  return (Mask(192, 64, (balanceOf[address(_customerAddress)] * stor12) - stor9[address(_customerAddress)]) >> 64)\n\ndef myDividends(bool _includeReferralBonus): # not payable\n  if _includeReferralBonus:\n      return ((Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller])\n  return (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64)\n\ndef payFund() payable: \n  require totalEthFundRecieved <= totalEthFundCollected\n  require totalEthFundCollected - totalEthFundRecieved > 1\n  require totalEthFundCollected >= totalEthFundRecieved\n  totalEthFundRecieved = totalEthFundCollected\n  call 0xd9092d94f74e6b5d408dbd3ecc88f3e5810d1e98 with:\n     value totalEthFundCollected - totalEthFundRecieved wei\n       gas 400000 wei\n  if not ext_call.success:\n      require totalEthFundCollected - totalEthFundRecieved <= totalEthFundRecieved\n      totalEthFundRecieved = (2 * totalEthFundRecieved) - totalEthFundCollected\n\ndef withdraw(): # not payable\n  require (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] > 0\n  stor9[caller] += Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller])\n  stor8[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]),\n        uint256 ethereumWithdrawn=caller)\n\ndef transfer(address recipient, uint256 amount): # not payable\n  require balanceOf[caller] > 0\n  require amount <= balanceOf[caller]\n  if (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] > 0:\n      require (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] > 0\n      stor9[caller] += Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller])\n      stor8[caller] = 0\n      call caller with:\n         value (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n      log onWithdraw(\n            address customerAddress=((Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]),\n            uint256 ethereumWithdrawn=caller)\n  require amount <= balanceOf[caller]\n  balanceOf[caller] -= amount\n  require amount + balanceOf[recipient] >= balanceOf[recipient]\n  balanceOf[address(recipient)] = amount + balanceOf[recipient]\n  stor9[caller] += -1 * amount * stor12\n  stor9[recipient] += amount * stor12\n  log Transfer(\n        address from=amount,\n        address to=caller,\n        uint256 value=recipient)\n  return 1\n\ndef transferAndCall(address to, uint256 value, bytes data): # not payable\n  require to\n  require 1 == bool(stor15[address(to)])\n  require balanceOf[caller] > 0\n  require value <= balanceOf[caller]\n  if (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] > 0:\n      require (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] > 0\n      stor9[caller] += Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller])\n      stor8[caller] = 0\n      call caller with:\n         value (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n      log onWithdraw(\n            address customerAddress=((Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]),\n            uint256 ethereumWithdrawn=caller)\n  require value <= balanceOf[caller]\n  balanceOf[caller] -= value\n  require value + balanceOf[to] >= balanceOf[to]\n  balanceOf[address(to)] = value + balanceOf[to]\n  stor9[caller] += -1 * value * stor12\n  stor9[to] += value * stor12\n  log Transfer(\n        address from=value,\n        address to=caller,\n        uint256 value=to)\n  if ext_code.size(to) > 0:\n      require ext_code.size(to)\n      call to.tokenFallback(address _from, uint256 _value, bytes _data) with:\n           gas gas_remaining wei\n          args 0, uint32(caller), value, 96, data.length, data[all]\n      require ext_call.success\n      require ext_call.return_data[0]\n  return 1\n\ndef sellPrice(): # not payable\n  if not totalSupply:\n      return (2500000 * 3600)\n  require 1999999999999999999 * 10^9 <= (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (2500000 * 10^18 * 3600)\n  if not (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n      if not (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n          if 0 <= (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n              return ((1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18)\n      else:\n          if 5 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 == 5:\n              if 0 <= (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n                  if 5 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100 <= (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n                      return (((1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18) - (5 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100))\n  else:\n      if 20 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 == 20:\n          if not (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n              if 20 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100 <= (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n                  if 0 <= ((1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18) - (20 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100):\n                      return (((1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18) - (20 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100))\n          else:\n              if 5 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 == 5:\n                  if 20 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100 <= (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n                      if 5 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100 <= ((1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18) - (20 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100):\n                          return (((1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18) - (20 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100) - (5 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100))\n  revert\n\ndef buyPrice(): # not payable\n  if not totalSupply:\n      return 11 * 10^9\n  require 1999999999999999999 * 10^9 <= (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (2500000 * 10^18 * 3600)\n  if not (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n      if not (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n          if (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 >= (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n              return ((1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18)\n      else:\n          if 5 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 == 5:\n              if (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 >= (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n                  if (5 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100) + ((1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18) >= (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n                      return ((5 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100) + ((1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18))\n  else:\n      if 20 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 == 20:\n          if not (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n              if (20 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100) + ((1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18) >= (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n                  return ((20 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100) + ((1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18))\n          else:\n              if 5 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 == 5:\n                  if (20 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100) + ((1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18) >= (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18:\n                      if 5 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100 >= 0:\n                          return ((5 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100) + (20 * (1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18 / 100) + ((1000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^9 / 10^18))\n  revert\n\ndef buy(address _referredBy) payable: \n  require block.gasprice <= 5 * 10^10\n  require caller == tx.origin\n  if call.value <= 2 * 10^18:\n      if block.timestamp >= stor0:\n          onlyAmbassadors = 0\n      if not onlyAmbassadors:\n          onlyAmbassadors = 0\n      else:\n          if eth.balance(this.address) - call.value > 8 * 10^18:\n              onlyAmbassadors = 0\n          else:\n              require 1 == bool(stor6[caller])\n              require call.value + stor10[caller] <= 8 * 10^18\n              require call.value + stor10[caller] >= stor10[caller]\n              stor10[caller] += call.value\n      if not call.value:\n          if not call.value:\n              require 0 <= call.value\n              require totalEthFundCollected >= totalEthFundCollected\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          require 5 * call.value / call.value == 5\n          require 0 <= call.value\n          require 5 * call.value / 100 <= call.value\n      else:\n          require 20 * call.value / call.value == 20\n          if not call.value:\n              require 20 * call.value / 100 / 3 <= 20 * call.value / 100\n              require 20 * call.value / 100 <= call.value\n              require 0 <= call.value - (20 * call.value / 100)\n              require totalEthFundCollected >= totalEthFundCollected\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          require 5 * call.value / call.value == 5\n          require 20 * call.value / 100 / 3 <= 20 * call.value / 100\n          require 20 * call.value / 100 <= call.value\n          require 5 * call.value / 100 <= call.value - (20 * call.value / 100)\n      require (5 * call.value / 100) + totalEthFundCollected >= totalEthFundCollected\n      totalEthFundCollected += 5 * call.value / 100\n  else:\n      require call.value <= eth.balance(this.address)\n      if eth.balance(this.address) - call.value <= 200 * 10^18:\n          require 2 * 10^18 <= call.value\n          if block.timestamp >= stor0:\n              onlyAmbassadors = 0\n          if not onlyAmbassadors:\n              onlyAmbassadors = 0\n          else:\n              if eth.balance(this.address) - 2 * 10^18 > 8 * 10^18:\n                  onlyAmbassadors = 0\n              else:\n                  require 1 == bool(stor6[caller])\n                  require stor10[caller] + 2 * 10^18 <= 8 * 10^18\n                  require stor10[caller] + 2 * 10^18 >= stor10[caller]\n                  stor10[caller] += 2 * 10^18\n          require totalEthFundCollected + 10^17 >= totalEthFundCollected\n          totalEthFundCollected += 10^17\n      else:\n          if block.timestamp >= stor0:\n              onlyAmbassadors = 0\n          if not onlyAmbassadors:\n              onlyAmbassadors = 0\n          else:\n              if eth.balance(this.address) - call.value > 8 * 10^18:\n                  onlyAmbassadors = 0\n              else:\n                  require 1 == bool(stor6[caller])\n                  require call.value + stor10[caller] <= 8 * 10^18\n                  require call.value + stor10[caller] >= stor10[caller]\n                  stor10[caller] += call.value\n          if not call.value:\n              if not call.value:\n                  require 0 <= call.value\n                  require totalEthFundCollected >= totalEthFundCollected\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require 5 * call.value / call.value == 5\n              require 0 <= call.value\n              require 5 * call.value / 100 <= call.value\n          else:\n              require 20 * call.value / call.value == 20\n              if not call.value:\n                  require 20 * call.value / 100 / 3 <= 20 * call.value / 100\n                  require 20 * call.value / 100 <= call.value\n                  require 0 <= call.value - (20 * call.value / 100)\n                  require totalEthFundCollected >= totalEthFundCollected\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require 5 * call.value / call.value == 5\n              require 20 * call.value / 100 / 3 <= 20 * call.value / 100\n              require 20 * call.value / 100 <= call.value\n              require 5 * call.value / 100 <= call.value - (20 * call.value / 100)\n          require (5 * call.value / 100) + totalEthFundCollected >= totalEthFundCollected\n          totalEthFundCollected += 5 * call.value / 100\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef _fallback(?) payable: # default function\n  require block.gasprice <= 10^10\n  require caller == tx.origin\n  if call.value <= 2 * 10^18:\n      if block.timestamp >= stor0:\n          onlyAmbassadors = 0\n      if not onlyAmbassadors:\n          onlyAmbassadors = 0\n      else:\n          if eth.balance(this.address) - call.value > 8 * 10^18:\n              onlyAmbassadors = 0\n          else:\n              require 1 == bool(stor6[caller])\n              require call.value + stor10[caller] <= 8 * 10^18\n              require call.value + stor10[caller] >= stor10[caller]\n              stor10[caller] += call.value\n      if not call.value:\n          if not call.value:\n              require 0 <= call.value\n              require totalEthFundCollected >= totalEthFundCollected\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          require 5 * call.value / call.value == 5\n          require 0 <= call.value\n          require 5 * call.value / 100 <= call.value\n      else:\n          require 20 * call.value / call.value == 20\n          if not call.value:\n              require 20 * call.value / 100 / 3 <= 20 * call.value / 100\n              require 20 * call.value / 100 <= call.value\n              require 0 <= call.value - (20 * call.value / 100)\n              require totalEthFundCollected >= totalEthFundCollected\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          require 5 * call.value / call.value == 5\n          require 20 * call.value / 100 / 3 <= 20 * call.value / 100\n          require 20 * call.value / 100 <= call.value\n          require 5 * call.value / 100 <= call.value - (20 * call.value / 100)\n      require (5 * call.value / 100) + totalEthFundCollected >= totalEthFundCollected\n      totalEthFundCollected += 5 * call.value / 100\n  else:\n      require call.value <= eth.balance(this.address)\n      if eth.balance(this.address) - call.value <= 200 * 10^18:\n          require 2 * 10^18 <= call.value\n          if block.timestamp >= stor0:\n              onlyAmbassadors = 0\n          if not onlyAmbassadors:\n              onlyAmbassadors = 0\n          else:\n              if eth.balance(this.address) - 2 * 10^18 > 8 * 10^18:\n                  onlyAmbassadors = 0\n              else:\n                  require 1 == bool(stor6[caller])\n                  require stor10[caller] + 2 * 10^18 <= 8 * 10^18\n                  require stor10[caller] + 2 * 10^18 >= stor10[caller]\n                  stor10[caller] += 2 * 10^18\n          require totalEthFundCollected + 10^17 >= totalEthFundCollected\n          totalEthFundCollected += 10^17\n      else:\n          if block.timestamp >= stor0:\n              onlyAmbassadors = 0\n          if not onlyAmbassadors:\n              onlyAmbassadors = 0\n          else:\n              if eth.balance(this.address) - call.value > 8 * 10^18:\n                  onlyAmbassadors = 0\n              else:\n                  require 1 == bool(stor6[caller])\n                  require call.value + stor10[caller] <= 8 * 10^18\n                  require call.value + stor10[caller] >= stor10[caller]\n                  stor10[caller] += call.value\n          if not call.value:\n              if not call.value:\n                  require 0 <= call.value\n                  require totalEthFundCollected >= totalEthFundCollected\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require 5 * call.value / call.value == 5\n              require 0 <= call.value\n              require 5 * call.value / 100 <= call.value\n          else:\n              require 20 * call.value / call.value == 20\n              if not call.value:\n                  require 20 * call.value / 100 / 3 <= 20 * call.value / 100\n                  require 20 * call.value / 100 <= call.value\n                  require 0 <= call.value - (20 * call.value / 100)\n                  require totalEthFundCollected >= totalEthFundCollected\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require 5 * call.value / call.value == 5\n              require 20 * call.value / 100 / 3 <= 20 * call.value / 100\n              require 20 * call.value / 100 <= call.value\n              require 5 * call.value / 100 <= call.value - (20 * call.value / 100)\n          require (5 * call.value / 100) + totalEthFundCollected >= totalEthFundCollected\n          totalEthFundCollected += 5 * call.value / 100\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef calculateTokensReceived(uint256 _ethereumToSpend): # not payable\n  if not _ethereumToSpend:\n      if not _ethereumToSpend:\n          if 0 <= _ethereumToSpend:\n              s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * _ethereumToSpend) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n              t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * _ethereumToSpend) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n              while s < t:\n                  require s\n                  s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * _ethereumToSpend) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                  t = s\n                  continue \n              if 10000000000 * 10^18 <= t:\n                  return ((t - 10000000000 * 10^18 / 10^9) - totalSupply)\n      else:\n          if 5 * _ethereumToSpend / _ethereumToSpend == 5:\n              if 0 <= _ethereumToSpend:\n                  if 5 * _ethereumToSpend / 100 <= _ethereumToSpend:\n                      s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * _ethereumToSpend) + (-2000000000000000000000000000 * 10^18 * 5 * _ethereumToSpend / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                      t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * _ethereumToSpend) + (-2000000000000000000000000000 * 10^18 * 5 * _ethereumToSpend / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n                      while s < t:\n                          require s\n                          s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * _ethereumToSpend) + (-2000000000000000000000000000 * 10^18 * 5 * _ethereumToSpend / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                          t = s\n                          continue \n                      if 10000000000 * 10^18 <= t:\n                          return ((t - 10000000000 * 10^18 / 10^9) - totalSupply)\n  else:\n      if 20 * _ethereumToSpend / _ethereumToSpend == 20:\n          if not _ethereumToSpend:\n              if 20 * _ethereumToSpend / 100 <= _ethereumToSpend:\n                  if 0 <= _ethereumToSpend - (20 * _ethereumToSpend / 100):\n                      s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * _ethereumToSpend) + (-2000000000000000000000000000 * 10^18 * 20 * _ethereumToSpend / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                      t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * _ethereumToSpend) + (-2000000000000000000000000000 * 10^18 * 20 * _ethereumToSpend / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n                      while s < t:\n                          require s\n                          s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * _ethereumToSpend) + (-2000000000000000000000000000 * 10^18 * 20 * _ethereumToSpend / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                          t = s\n                          continue \n                      if 10000000000 * 10^18 <= t:\n                          return ((t - 10000000000 * 10^18 / 10^9) - totalSupply)\n          else:\n              if 5 * _ethereumToSpend / _ethereumToSpend == 5:\n                  if 20 * _ethereumToSpend / 100 <= _ethereumToSpend:\n                      if 5 * _ethereumToSpend / 100 <= _ethereumToSpend - (20 * _ethereumToSpend / 100):\n                          s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * _ethereumToSpend) + (-2000000000000000000000000000 * 10^18 * 20 * _ethereumToSpend / 100) + (-2000000000000000000000000000 * 10^18 * 5 * _ethereumToSpend / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                          t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * _ethereumToSpend) + (-2000000000000000000000000000 * 10^18 * 20 * _ethereumToSpend / 100) + (-2000000000000000000000000000 * 10^18 * 5 * _ethereumToSpend / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n                          while s < t:\n                              require s\n                              s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * _ethereumToSpend) + (-2000000000000000000000000000 * 10^18 * 20 * _ethereumToSpend / 100) + (-2000000000000000000000000000 * 10^18 * 5 * _ethereumToSpend / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                              t = s\n                              continue \n                          if 10000000000 * 10^18 <= t:\n                              return ((t - 10000000000 * 10^18 / 10^9) - totalSupply)\n  revert\n\ndef calculateEthereumReceived(uint256 _tokensToSell): # not payable\n  require _tokensToSell <= totalSupply\n  require 10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2 <= (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell)\n  if not (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n      if not (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n          if 0 <= (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n              return ((2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18)\n      else:\n          if 5 * (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 == 5:\n              if 0 <= (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n                  if 5 * (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100 <= (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n                      return (((2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - (5 * (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100))\n  else:\n      if 20 * (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 == 20:\n          if not (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n              if 20 * (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100 <= (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n                  if 0 <= ((2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100):\n                      return (((2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100))\n          else:\n              if 5 * (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 == 5:\n                  if 20 * (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100 <= (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n                      if 5 * (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100 <= ((2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100):\n                          return (((2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (2500000 * 3600 * _tokensToSell) + (10^9 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^9 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100))\n  revert\n\ndef sell(uint256 amount): # not payable\n  require balanceOf[caller] > 0\n  require amount <= balanceOf[caller]\n  require 10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2 <= (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount)\n  if not (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18:\n      if not (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18:\n          require 0 <= (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18\n          require totalEthFundCollected >= totalEthFundCollected\n          require amount <= totalSupply\n          totalSupply -= amount\n          require amount <= balanceOf[caller]\n          balanceOf[caller] -= amount\n          stor9[caller] = stor9[caller] - ((2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 << 64) - (amount * stor12)\n          if totalSupply > 0:\n              require totalSupply\n              require (0 / totalSupply) + stor12 >= stor12\n              stor12 += 0 / totalSupply\n          log onTokenSell(\n                address customerAddress=amount,\n                uint256 tokensBurned=(2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18,\n                uint256 ethereumEarned=caller)\n      else:\n          require 5 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 == 5\n          require 0 <= (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18\n          require 5 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100 <= (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18\n          require (5 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100) + totalEthFundCollected >= totalEthFundCollected\n          totalEthFundCollected += 5 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100\n          require amount <= totalSupply\n          totalSupply -= amount\n          require amount <= balanceOf[caller]\n          balanceOf[caller] -= amount\n          stor9[caller] = stor9[caller] - (((2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - (5 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100) << 64) - (amount * stor12)\n          if totalSupply > 0:\n              require totalSupply\n              require (0 / totalSupply) + stor12 >= stor12\n              stor12 += 0 / totalSupply\n          log onTokenSell(\n                address customerAddress=amount,\n                uint256 tokensBurned=((2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - (5 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                uint256 ethereumEarned=caller)\n  else:\n      require 20 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 == 20\n      if not (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18:\n          require 20 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100 <= (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18\n          require 0 <= ((2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100)\n          require totalEthFundCollected >= totalEthFundCollected\n          require amount <= totalSupply\n          totalSupply -= amount\n          require amount <= balanceOf[caller]\n          balanceOf[caller] -= amount\n          stor9[caller] = stor9[caller] - (((2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100) << 64) - (amount * stor12)\n          if totalSupply > 0:\n              require totalSupply\n              require (20 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply) + stor12 >= stor12\n              stor12 += 20 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply\n          log onTokenSell(\n                address customerAddress=amount,\n                uint256 tokensBurned=((2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                uint256 ethereumEarned=caller)\n      else:\n          require 5 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 == 5\n          require 20 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100 <= (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18\n          require 5 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100 <= ((2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100)\n          require (5 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100) + totalEthFundCollected >= totalEthFundCollected\n          totalEthFundCollected += 5 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100\n          require amount <= totalSupply\n          totalSupply -= amount\n          require amount <= balanceOf[caller]\n          balanceOf[caller] -= amount\n          stor9[caller] = stor9[caller] - (((2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100) << 64) - (amount * stor12)\n          if totalSupply > 0:\n              require totalSupply\n              require (20 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply) + stor12 >= stor12\n              stor12 += 20 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply\n          log onTokenSell(\n                address customerAddress=amount,\n                uint256 tokensBurned=((2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (2500000 * 3600 * amount) + (10^9 * totalSupply + 10^18 / 10^18 * amount) - (10^9 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                uint256 ethereumEarned=caller)\n\ndef exit(): # not payable\n  if balanceOf[caller] > 0:\n      require balanceOf[caller] > 0\n      require balanceOf[caller] <= balanceOf[caller]\n      require 10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2 <= (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller])\n      if not (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n          if not (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n              require 0 <= (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n              require totalEthFundCollected >= totalEthFundCollected\n              require balanceOf[caller] <= totalSupply\n              totalSupply -= balanceOf[caller]\n              require balanceOf[caller] <= balanceOf[caller]\n              balanceOf[caller] = 0\n              stor9[caller] = stor9[caller] - ((2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 << 64) - (balanceOf[caller] * stor12)\n              if totalSupply > 0:\n                  require totalSupply\n                  require (0 / totalSupply) + stor12 >= stor12\n                  stor12 += 0 / totalSupply\n              log onTokenSell(\n                    address customerAddress=balanceOf[caller],\n                    uint256 tokensBurned=(2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18,\n                    uint256 ethereumEarned=caller)\n          else:\n              require 5 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 5\n              require 0 <= (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n              require 5 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 <= (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n              require (5 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) + totalEthFundCollected >= totalEthFundCollected\n              totalEthFundCollected += 5 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100\n              require balanceOf[caller] <= totalSupply\n              totalSupply -= balanceOf[caller]\n              require balanceOf[caller] <= balanceOf[caller]\n              balanceOf[caller] = 0\n              stor9[caller] = stor9[caller] - (((2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (5 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) << 64) - (balanceOf[caller] * stor12)\n              if totalSupply > 0:\n                  require totalSupply\n                  require (0 / totalSupply) + stor12 >= stor12\n                  stor12 += 0 / totalSupply\n              log onTokenSell(\n                    address customerAddress=balanceOf[caller],\n                    uint256 tokensBurned=((2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (5 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                    uint256 ethereumEarned=caller)\n      else:\n          require 20 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 20\n          if not (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n              require 20 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 <= (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n              require 0 <= ((2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100)\n              require totalEthFundCollected >= totalEthFundCollected\n              require balanceOf[caller] <= totalSupply\n              totalSupply -= balanceOf[caller]\n              require balanceOf[caller] <= balanceOf[caller]\n              balanceOf[caller] = 0\n              stor9[caller] = stor9[caller] - (((2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) << 64) - (balanceOf[caller] * stor12)\n              if totalSupply > 0:\n                  require totalSupply\n                  require (20 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply) + stor12 >= stor12\n                  stor12 += 20 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply\n              log onTokenSell(\n                    address customerAddress=balanceOf[caller],\n                    uint256 tokensBurned=((2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                    uint256 ethereumEarned=caller)\n          else:\n              require 5 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 5\n              require 20 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 <= (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n              require 5 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 <= ((2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100)\n              require (5 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) + totalEthFundCollected >= totalEthFundCollected\n              totalEthFundCollected += 5 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100\n              require balanceOf[caller] <= totalSupply\n              totalSupply -= balanceOf[caller]\n              require balanceOf[caller] <= balanceOf[caller]\n              balanceOf[caller] = 0\n              stor9[caller] = stor9[caller] - (((2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) << 64) - (balanceOf[caller] * stor12)\n              if totalSupply > 0:\n                  require totalSupply\n                  require (20 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply) + stor12 >= stor12\n                  stor12 += 20 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply\n              log onTokenSell(\n                    address customerAddress=balanceOf[caller],\n                    uint256 tokensBurned=((2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (20 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (2500000 * 3600 * balanceOf[caller]) + (10^9 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^9 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                    uint256 ethereumEarned=caller)\n  require (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] > 0\n  stor9[caller] += Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller])\n  stor8[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]),\n        uint256 ethereumWithdrawn=caller)\n\ndef reinvest(): # not payable\n  require (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] > 0\n  stor9[caller] += Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller])\n  stor8[caller] = 0\n  if block.timestamp >= stor0:\n      onlyAmbassadors = 0\n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      if not (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]:\n          if not (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]:\n              require 0 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]\n              require totalEthFundCollected >= totalEthFundCollected\n              s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n              t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n              while s < t:\n                  require s\n                  s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                  t = s\n                  continue \n          else:\n              require (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] == 5\n              require 0 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]\n              require (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]\n              require ((5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + totalEthFundCollected >= totalEthFundCollected\n              totalEthFundCollected += (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100\n              s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n              t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n              while s < t:\n                  require s\n                  s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                  t = s\n                  continue \n          require 10000000000 * 10^18 <= t\n          require (t - 10000000000 * 10^18 / 10^9) - totalSupply > 0\n          require t - 10000000000 * 10^18 / 10^9 >= (t - 10000000000 * 10^18 / 10^9) - totalSupply\n          require t - 10000000000 * 10^18 / 10^9 > totalSupply\n          if totalSupply <= 0:\n              totalSupply = (t - 10000000000 * 10^18 / 10^9) - totalSupply\n              require (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n              balanceOf[caller] = (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller]\n              stor9[caller] = stor9[caller] + (t - 10000000000 * 10^18 / 10^9 * stor12) - (totalSupply * stor12)\n          else:\n              require t - 10000000000 * 10^18 / 10^9 >= totalSupply\n              totalSupply = t - 10000000000 * 10^18 / 10^9\n              require t - 10000000000 * 10^18 / 10^9\n              stor12 += 0 / t - 10000000000 * 10^18 / 10^9\n              require totalSupply\n              require (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n              balanceOf[caller] = (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller]\n              stor9[caller] = stor9[caller] + (t - 10000000000 * 10^18 / 10^9 * stor12) - (totalSupply * stor12) - (t - 10000000000 * 10^18 / 10^9 * 0 / totalSupply) + (totalSupply * 0 / totalSupply)\n      else:\n          require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] == 20\n          if not (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]:\n              require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 / 3 <= (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100\n              require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]\n              require 0 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] - ((20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100)\n              require totalEthFundCollected >= totalEthFundCollected\n              s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n              t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n              while s < t:\n                  require s\n                  s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                  t = s\n                  continue \n          else:\n              require (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] == 5\n              require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 / 3 <= (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100\n              require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]\n              require (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] - ((20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100)\n              require ((5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + totalEthFundCollected >= totalEthFundCollected\n              totalEthFundCollected += (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100\n              s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n              t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n              while s < t:\n                  require s\n                  s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                  t = s\n                  continue \n          require 10000000000 * 10^18 <= t\n          require (t - 10000000000 * 10^18 / 10^9) - totalSupply > 0\n          require t - 10000000000 * 10^18 / 10^9 >= (t - 10000000000 * 10^18 / 10^9) - totalSupply\n          require t - 10000000000 * 10^18 / 10^9 > totalSupply\n          require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 >= ((20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) - ((20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 / 3)\n          if totalSupply <= 0:\n              totalSupply = (t - 10000000000 * 10^18 / 10^9) - totalSupply\n              require (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n              balanceOf[caller] = (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller]\n              stor9[caller] = stor9[caller] + (t - 10000000000 * 10^18 / 10^9 * stor12) - (totalSupply * stor12) - ((20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 << 64)\n          else:\n              require t - 10000000000 * 10^18 / 10^9 >= totalSupply\n              totalSupply = t - 10000000000 * 10^18 / 10^9\n              require t - 10000000000 * 10^18 / 10^9\n              stor12 += (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 << 64 / t - 10000000000 * 10^18 / 10^9\n              require totalSupply\n              require (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n              balanceOf[caller] = (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller]\n              stor9[caller] = stor9[caller] + (t - 10000000000 * 10^18 / 10^9 * stor12) - (totalSupply * stor12) - (t - 10000000000 * 10^18 / 10^9 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 << 64 / totalSupply) + (totalSupply * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 << 64 / totalSupply)\n  else:\n      if eth.balance(this.address) - (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) - stor8[caller] > 8 * 10^18:\n          onlyAmbassadors = 0\n          if not (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]:\n              if not (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]:\n                  require 0 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]\n                  require totalEthFundCollected >= totalEthFundCollected\n                  s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                  t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n                  while s < t:\n                      require s\n                      s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                      t = s\n                      continue \n              else:\n                  require (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] == 5\n                  require 0 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]\n                  require (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]\n                  require ((5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + totalEthFundCollected >= totalEthFundCollected\n                  totalEthFundCollected += (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100\n                  s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                  t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n                  while s < t:\n                      require s\n                      s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                      t = s\n                      continue \n              require 10000000000 * 10^18 <= t\n              require (t - 10000000000 * 10^18 / 10^9) - totalSupply > 0\n              require t - 10000000000 * 10^18 / 10^9 >= (t - 10000000000 * 10^18 / 10^9) - totalSupply\n              require t - 10000000000 * 10^18 / 10^9 > totalSupply\n              if totalSupply <= 0:\n                  totalSupply = (t - 10000000000 * 10^18 / 10^9) - totalSupply\n                  require (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller]\n                  stor9[caller] = stor9[caller] + (t - 10000000000 * 10^18 / 10^9 * stor12) - (totalSupply * stor12)\n              else:\n                  require t - 10000000000 * 10^18 / 10^9 >= totalSupply\n                  totalSupply = t - 10000000000 * 10^18 / 10^9\n                  require t - 10000000000 * 10^18 / 10^9\n                  stor12 += 0 / t - 10000000000 * 10^18 / 10^9\n                  require totalSupply\n                  require (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller]\n                  stor9[caller] = stor9[caller] + (t - 10000000000 * 10^18 / 10^9 * stor12) - (totalSupply * stor12) - (t - 10000000000 * 10^18 / 10^9 * 0 / totalSupply) + (totalSupply * 0 / totalSupply)\n          else:\n              require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] == 20\n              if not (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]:\n                  require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 / 3 <= (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100\n                  require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]\n                  require 0 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] - ((20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100)\n                  require totalEthFundCollected >= totalEthFundCollected\n                  s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                  t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n                  while s < t:\n                      require s\n                      s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                      t = s\n                      continue \n              else:\n                  require (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] == 5\n                  require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 / 3 <= (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100\n                  require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]\n                  require (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] - ((20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100)\n                  require ((5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + totalEthFundCollected >= totalEthFundCollected\n                  totalEthFundCollected += (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100\n                  s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                  t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n                  while s < t:\n                      require s\n                      s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                      t = s\n                      continue \n              require 10000000000 * 10^18 <= t\n              require (t - 10000000000 * 10^18 / 10^9) - totalSupply > 0\n              require t - 10000000000 * 10^18 / 10^9 >= (t - 10000000000 * 10^18 / 10^9) - totalSupply\n              require t - 10000000000 * 10^18 / 10^9 > totalSupply\n              require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 >= ((20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) - ((20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 / 3)\n              if totalSupply <= 0:\n                  totalSupply = (t - 10000000000 * 10^18 / 10^9) - totalSupply\n                  require (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller]\n                  stor9[caller] = stor9[caller] + (t - 10000000000 * 10^18 / 10^9 * stor12) - (totalSupply * stor12) - ((20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 << 64)\n              else:\n                  require t - 10000000000 * 10^18 / 10^9 >= totalSupply\n                  totalSupply = t - 10000000000 * 10^18 / 10^9\n                  require t - 10000000000 * 10^18 / 10^9\n                  stor12 += (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 << 64 / t - 10000000000 * 10^18 / 10^9\n                  require totalSupply\n                  require (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller]\n                  stor9[caller] = stor9[caller] + (t - 10000000000 * 10^18 / 10^9 * stor12) - (totalSupply * stor12) - (t - 10000000000 * 10^18 / 10^9 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 << 64 / totalSupply) + (totalSupply * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 << 64 / totalSupply)\n      else:\n          require 1 == bool(stor6[caller])\n          require (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] + stor10[caller] <= 8 * 10^18\n          require (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] + stor10[caller] >= stor10[caller]\n          stor10[caller] = (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] + stor10[caller]\n          if not (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]:\n              if not (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]:\n                  require 0 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]\n                  require totalEthFundCollected >= totalEthFundCollected\n                  s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                  t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n                  while s < t:\n                      require s\n                      s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                      t = s\n                      continue \n              else:\n                  require (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] == 5\n                  require 0 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]\n                  require (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]\n                  require ((5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + totalEthFundCollected >= totalEthFundCollected\n                  totalEthFundCollected += (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100\n                  s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                  t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n                  while s < t:\n                      require s\n                      s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                      t = s\n                      continue \n              require 10000000000 * 10^18 <= t\n              require (t - 10000000000 * 10^18 / 10^9) - totalSupply > 0\n              require t - 10000000000 * 10^18 / 10^9 >= (t - 10000000000 * 10^18 / 10^9) - totalSupply\n              require t - 10000000000 * 10^18 / 10^9 > totalSupply\n              if totalSupply <= 0:\n                  totalSupply = (t - 10000000000 * 10^18 / 10^9) - totalSupply\n                  require (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller]\n                  stor9[caller] = stor9[caller] + (t - 10000000000 * 10^18 / 10^9 * stor12) - (totalSupply * stor12)\n              else:\n                  require t - 10000000000 * 10^18 / 10^9 >= totalSupply\n                  totalSupply = t - 10000000000 * 10^18 / 10^9\n                  require t - 10000000000 * 10^18 / 10^9\n                  stor12 += 0 / t - 10000000000 * 10^18 / 10^9\n                  require totalSupply\n                  require (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller]\n                  stor9[caller] = stor9[caller] + (t - 10000000000 * 10^18 / 10^9 * stor12) - (totalSupply * stor12) - (t - 10000000000 * 10^18 / 10^9 * 0 / totalSupply) + (totalSupply * 0 / totalSupply)\n          else:\n              require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] == 20\n              if not (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]:\n                  require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 / 3 <= (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100\n                  require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]\n                  require 0 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] - ((20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100)\n                  require totalEthFundCollected >= totalEthFundCollected\n                  s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                  t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n                  while s < t:\n                      require s\n                      s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                      t = s\n                      continue \n              else:\n                  require (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] == 5\n                  require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 / 3 <= (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100\n                  require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller]\n                  require (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100 <= (Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller] - ((20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100)\n                  require ((5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + totalEthFundCollected >= totalEthFundCollected\n                  totalEthFundCollected += (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100\n                  s = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                  t = (20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n                  while s < t:\n                      require s\n                      s = ((20000000000000000000 * 10^18 * totalSupply) + (10^18 * totalSupply^2) + (0x59aedfc10d7279c5eed1401645400000000000 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (0x59aedfc10d7279c5eed1401645400000000000 * stor8[caller]) + (-2000000000000000000000000000 * 10^18 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) + (-2000000000000000000000000000 * 10^18 * (5 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (5 * stor8[caller]) / 100) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                      t = s\n                      continue \n              require 10000000000 * 10^18 <= t\n              require (t - 10000000000 * 10^18 / 10^9) - totalSupply > 0\n              require t - 10000000000 * 10^18 / 10^9 >= (t - 10000000000 * 10^18 / 10^9) - totalSupply\n              require t - 10000000000 * 10^18 / 10^9 > totalSupply\n              require (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 >= ((20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100) - ((20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 / 3)\n              if totalSupply <= 0:\n                  totalSupply = (t - 10000000000 * 10^18 / 10^9) - totalSupply\n                  require (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller]\n                  stor9[caller] = stor9[caller] + (t - 10000000000 * 10^18 / 10^9 * stor12) - (totalSupply * stor12) - ((20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 << 64)\n              else:\n                  require t - 10000000000 * 10^18 / 10^9 >= totalSupply\n                  totalSupply = t - 10000000000 * 10^18 / 10^9\n                  require t - 10000000000 * 10^18 / 10^9\n                  stor12 += (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 << 64 / t - 10000000000 * 10^18 / 10^9\n                  require totalSupply\n                  require (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 10000000000 * 10^18 / 10^9) - totalSupply + balanceOf[caller]\n                  stor9[caller] = stor9[caller] + (t - 10000000000 * 10^18 / 10^9 * stor12) - (totalSupply * stor12) - (t - 10000000000 * 10^18 / 10^9 * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 << 64 / totalSupply) + (totalSupply * (20 * Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + (20 * stor8[caller]) / 100 << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=(Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller],\n        uint256 incomingEthereum=(t - 10000000000 * 10^18 / 10^9) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=0)\n  log onReinvestment(\n        address customerAddress=(Mask(192, 64, (balanceOf[caller] * stor12) - stor9[caller]) >> 64) + stor8[caller],\n        uint256 ethereumReinvested=(t - 10000000000 * 10^18 / 10^9) - totalSupply,\n        uint256 tokensMinted=caller)\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 37008 tokens. Please reduce the length of the messages."
}