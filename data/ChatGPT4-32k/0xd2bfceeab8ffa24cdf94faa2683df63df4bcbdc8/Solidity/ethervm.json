{
	"address": "0xd2bfceeab8ffa24cdf94faa2683df63df4bcbdc8",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The original code is quite complex and contains several jump labels which are not valid in Solidity. However, it seems to be related to a token contract. Here is a simplified and valid Solidity contract that includes some of the functions and variables mentioned in the decompiled code:\n\n```solidity\npragma solidity ^0.7.0;\n\ncontract Token {\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => bool)) public canAcceptTokens;\n    mapping(address => bool) public administrators;\n    uint256 public totalSupply;\n    string public symbol;\n    string public name;\n    uint8 public decimals = 18;\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n    uint256 constant MAX_UINT = 2**256 - 1;\n\n    function buy(uint256 amount) public payable {\n        require(msg.value >= amount * buyPrice, \"Not enough Ether\");\n        balances[msg.sender] += amount;\n        totalSupply += amount;\n    }\n\n    function sell(uint256 amount) public {\n        require(balances[msg.sender] >= amount, \"Not enough tokens\");\n        uint256 etherAmount = amount * sellPrice;\n        require(address(this).balance >= etherAmount, \"Contract has not enough Ether\");\n        balances[msg.sender] -= amount;\n        totalSupply -= amount;\n        msg.sender.transfer(etherAmount);\n    }\n\n    function transfer(address to, uint256 amount) public {\n        require(balances[msg.sender] >= amount, \"Not enough tokens\");\n        require(canAcceptTokens[msg.sender][to], \"The receiver can not accept tokens\");\n        balances[msg.sender] -= amount;\n        balances[to] += amount;\n    }\n\n    function allowTransfer(address to) public {\n        canAcceptTokens[msg.sender][to] = true;\n    }\n\n    function disallowTransfer(address to) public {\n        canAcceptTokens[msg.sender][to] = false;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return balances[account];\n    }\n\n    function setAdministrator(address account, bool isAdmin) public {\n        administrators[account] = isAdmin;\n    }\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public {\n        require(administrators[msg.sender], \"Only administrators can set prices\");\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function setName(string memory newName) public {\n        require(administrators[msg.sender], \"Only administrators can set the name\");\n        name = newName;\n    }\n\n    function setSymbol(string memory newSymbol) public {\n        require(administrators[msg.sender], \"Only administrators can set the symbol\");\n        symbol = newSymbol;\n    }\n}\n```\nPlease note that this contract is a simple approximation and does not include all the functionality of the original one. The main purpose of this contract is to give you an idea of how a Solidity contract might look like based on the decompiled code. For a complete and accurate reimplementation of the original contract, a more detailed analysis is needed.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471892,
	"id": "chatcmpl-8MuhwNFIafkdKtLXaGMGF8P2JACKd",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_01AA:\n        \n            if (tx.gasprice > 0x02540be400) { revert(memory[0x00:0x00]); }\n        \n            var var0 = 0x01c7;\n            var var1 = msg.value;\n            var var2 = 0x00;\n            var0 = buy(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = dividendsOf(var2);\n            \n            label_01E9:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020e;\n                var2 = name();\n            \n            label_020E:\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                memory[var3:var3 + 0x20] = 0x20;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var6 = temp4 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_024A:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_023B:\n                    var temp10 = var11;\n                    memory[temp10 + var9:temp10 + var9 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_024A; }\n                    else { goto label_023B; }\n                }\n            } else if (var0 == 0x0f34dc16) {\n                // Dispatch table entry for canAcceptTokens_(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = canAcceptTokens_(var2);\n            \n            label_02A4:\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = !!var2;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x00;\n                var4 = var3;\n                var5 = var4;\n                var6 = var5;\n                var7 = var6;\n                var8 = 0x07ea;\n                var9 = 0x07e3;\n                var10 = var2;\n                var11 = 0x14;\n                var9 = func_1867(var10, var11);\n                var8 = func_07E3(var9);\n                var4 = var8;\n                var8 = 0x07fa;\n                var9 = 0x07e3;\n                var10 = var2;\n                var11 = 0x05;\n                var9 = func_1867(var10, var11);\n                var8 = func_07E3(var9);\n                var5 = var8;\n                var8 = 0x080f;\n                var9 = 0x0809;\n                var10 = var2;\n                var11 = var4;\n                var9 = func_1234(var10, var11);\n                var8 = func_0809(var5, var9);\n                var temp13 = var8;\n                var6 = temp13;\n                var8 = 0x081a;\n                var9 = var6;\n                var8 = func_18B0(var9);\n                var1 = var8;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = totalSupply();\n                goto label_01E9;\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                goto label_01E9;\n            } else if (var0 == 0x27defa1f) {\n                // Dispatch table entry for onlyAmbassadors()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a4;\n                var2 = onlyAmbassadors();\n                goto label_02A4;\n            } else if (var0 == 0x294205b4) {\n                // Dispatch table entry for setCanAcceptTokens(address,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = !!msg.data[0x24:0x44];\n                setCanAcceptTokens(var2, var3);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0343;\n                var2 = decimals();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0xff;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4000aea0) {\n                // Dispatch table entry for transferAndCall(address,uint256,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var temp16 = msg.data[0x44:0x64];\n                var4 = temp16 + 0x24;\n                var5 = msg.data[temp16 + 0x04:temp16 + 0x04 + 0x20];\n                var6 = 0x00;\n                var7 = var6;\n            \n                if (!(var2 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0f;\n            \n                if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != 0x01) { revert(memory[0x00:0x00]); }\n            \n                var8 = 0x09fc;\n                var9 = var2;\n                var10 = var3;\n            \n            label_0DE4:\n                var11 = 0x00;\n                var var12 = var11;\n                var var13 = 0x00;\n                var var14 = 0x0df1;\n                var14 = myTokens();\n            \n                if (var14 <= var13) { revert(memory[0x00:0x00]); }\n            \n                var12 = msg.sender;\n                memory[0x00:0x20] = var12 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x07;\n            \n                if (var10 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n            \n                var13 = 0x00;\n                var14 = 0x0e2e;\n                var var15 = 0x01;\n                var14 = myDividends(var15);\n            \n                if (var14 <= var13) {\n                label_0E3C:\n                    memory[0x00:0x20] = var12 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x07;\n                    var13 = 0x0e5f;\n                    var14 = storage[keccak256(memory[0x00:0x40])];\n                    var15 = var10;\n                    var13 = func_1234(var14, var15);\n                    var temp17 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = var12 & temp17;\n                    memory[0x20:0x40] = 0x07;\n                    storage[keccak256(memory[0x00:0x40])] = var13;\n                    memory[0x00:0x20] = var9 & temp17;\n                    var14 = storage[keccak256(memory[0x00:0x40])];\n                    var13 = 0x0e8e;\n                    var15 = var10;\n                    var13 = func_19B4(var14, var15);\n                    var temp18 = 0x02 ** 0xa0 - 0x01;\n                    var temp19 = temp18 & var9;\n                    memory[0x00:0x20] = temp19;\n                    memory[0x20:0x40] = 0x07;\n                    storage[keccak256(memory[0x00:0x40])] = var13;\n                    var temp20 = var12 & temp18;\n                    memory[0x00:0x20] = temp20;\n                    memory[0x20:0x40] = 0x09;\n                    var temp21 = keccak256(memory[0x00:0x40]);\n                    var temp22 = var10;\n                    storage[temp21] = storage[temp21] - temp22 * storage[0x0c];\n                    memory[0x00:0x20] = temp19;\n                    var temp23 = keccak256(memory[0x00:0x40]);\n                    storage[temp23] = storage[temp23] + temp22 * storage[0x0c];\n                    var temp24 = memory[0x40:0x60];\n                    memory[temp24:temp24 + 0x20] = temp22;\n                    var temp25 = memory[0x40:0x60];\n                    log(memory[temp25:temp25 + (temp24 + 0x20) - temp25], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-2] & 0x02 ** 0xa0 - 0x01, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n                    var11 = 0x01;\n                    var8 = var11;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var13 = 0x0e3c;\n                    withdraw();\n                    goto label_0E3C;\n                }\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = sellPrice();\n                goto label_01E9;\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = stakingRequirement();\n                goto label_01E9;\n            } else if (var0 == 0x5e079aa5) {\n                // Dispatch table entry for giveEthFundAddress()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03d4;\n                var2 = giveEthFundAddress();\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0x66042e7a) {\n                // Dispatch table entry for etherToSendFund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = etherToSendFund();\n                goto label_01E9;\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                goto label_01E9;\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = totalEthereumBalance();\n                goto label_01E9;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_01E9;\n            } else if (var0 == 0x76be1585) {\n                // Dispatch table entry for administrators(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = administrators(var2);\n                goto label_02A4;\n            } else if (var0 == 0x7ff276bd) {\n                // Dispatch table entry for totalEthFundCollected()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = totalEthFundCollected();\n                goto label_01E9;\n            } else if (var0 == 0x8328b610) {\n                // Dispatch table entry for setStakingRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var2 = msg.data[0x04:0x24];\n                setStakingRequirement(var2);\n                stop();\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = buyPrice();\n                goto label_01E9;\n            } else if (var0 == 0x87c95058) {\n                // Dispatch table entry for setAdministrator(address,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = !!msg.data[0x24:0x44];\n                setAdministrator(var2, var3);\n                stop();\n            } else if (var0 == 0x8974372d) {\n                // Dispatch table entry for payFund()\n                var1 = 0x032e;\n                payFund();\n                stop();\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = myTokens();\n                goto label_01E9;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020e;\n                var2 = symbol();\n                goto label_020E;\n            } else if (var0 == 0xa4d55686) {\n                // Dispatch table entry for totalEthFundRecieved()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = totalEthFundRecieved();\n                goto label_01E9;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                goto label_0DE4;\n            } else if (var0 == 0xb84c8246) {\n                // Dispatch table entry for setSymbol(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var temp28 = msg.data[0x04:0x24];\n                var temp29 = msg.data[temp28 + 0x04:temp28 + 0x04 + 0x20];\n                var temp30 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp30 + (temp29 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp30:temp30 + 0x20] = temp29;\n                memory[temp30 + 0x20:temp30 + 0x20 + temp29] = msg.data[temp28 + 0x24:temp28 + 0x24 + temp29];\n                var2 = temp30;\n                var3 = msg.sender;\n                memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0d;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var temp31 = var2;\n                var4 = 0x0f59;\n                var5 = 0x02;\n                var6 = temp31 + 0x20;\n                var7 = memory[temp31:temp31 + 0x20];\n            \n            label_19F8:\n                var temp32 = var5;\n                var temp33 = storage[temp32];\n                memory[0x00:0x20] = temp32;\n                var8 = keccak256(memory[0x00:0x20]);\n                var temp34 = var6;\n                var6 = var8 + ((!(temp33 & 0x01) * 0x0100 - 0x01 & temp33) / 0x02 + 0x1f) / 0x20;\n                var9 = temp34;\n            \n                if (0x1f < var7) {\n                    var temp35 = var7;\n                    storage[var5] = temp35 + temp35 + 0x01;\n                \n                    if (!temp35) {\n                    label_1A66:\n                        var temp36 = var6;\n                        var6 = 0x0d6f;\n                        var7 = 0x0828;\n                        var temp37 = var8;\n                        var9 = temp37;\n                        var8 = temp36;\n                    \n                        if (var8 <= var9) {\n                            var7 = func_0D6F(var8, var9);\n                            var6 = func_0828(var7);\n                            var4 = func_0D6F(var5, var6);\n                            // Error: Could not resolve method call return address!\n                        } else {\n                        label_1A7B:\n                            var temp38 = var9;\n                            storage[temp38] = 0x00;\n                            var9 = temp38 + 0x01;\n                        \n                            if (var8 > var9) { goto label_1A7B; }\n                        \n                            var7 = func_0D6F(var8, var9);\n                            // Error: Could not resolve method call return address!\n                        }\n                    } else {\n                        var temp39 = var7;\n                        var temp40 = var9;\n                        var7 = temp40;\n                        var9 = var7 + temp39;\n                    \n                        if (var9 <= var7) { goto label_1A66; }\n                    \n                    label_1A54:\n                        var temp41 = var7;\n                        var temp42 = var8;\n                        storage[temp42] = memory[temp41:temp41 + 0x20];\n                        var7 = temp41 + 0x20;\n                        var9 = var9;\n                        var8 = temp42 + 0x01;\n                    \n                        if (var9 <= var7) { goto label_1A66; }\n                        else { goto label_1A54; }\n                    }\n                } else {\n                    var temp43 = var7;\n                    storage[var5] = temp43 + temp43 | (memory[var9:var9 + 0x20] & ~0xff);\n                    goto label_1A66;\n                }\n            } else if (var0 == 0xc47f0027) {\n                // Dispatch table entry for setName(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var temp44 = msg.data[0x04:0x24];\n                var temp45 = msg.data[temp44 + 0x04:temp44 + 0x04 + 0x20];\n                var temp46 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp46 + (temp45 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp46:temp46 + 0x20] = temp45;\n                memory[temp46 + 0x20:temp46 + 0x20 + temp45] = msg.data[temp44 + 0x24:temp44 + 0x24 + temp45];\n                var2 = temp46;\n                var3 = msg.sender;\n                memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0d;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var temp47 = var2;\n                var4 = 0x0f59;\n                var5 = 0x01;\n                var6 = temp47 + 0x20;\n                var7 = memory[temp47:temp47 + 0x20];\n                goto label_19F8;\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x01e9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x00;\n            \n                if (tx.gasprice > 0x0ba43b7400) { revert(memory[0x00:0x00]); }\n            \n                var4 = 0x0bb8;\n                var5 = msg.value;\n                var6 = var2;\n                var4 = buy(var5, var6);\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                reinvest();\n                stop();\n            } else { goto label_01AA; }\n        }\n    }\n    \n    function buy(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (msg.sender != tx.origin) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n    \n        if (var1 <= 0x1bc16d674ec80000) {\n        label_0694:\n            var var3 = 0x069e;\n            var var4 = var1;\n            var var5 = arg1;\n            var3 = func_1246(var4, var5);\n        \n            if (var2 <= 0x00) {\n            label_06D9:\n                return var0;\n            } else {\n                var temp0 = var2;\n                var temp1 = memory[0x40:0x60];\n                var temp2;\n                temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n            \n                if (temp2) { goto label_06D9; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var3 = 0x0ad78ebc5ac6200000;\n            var4 = 0x0677;\n            var5 = address(this).balance;\n            var var6 = var1;\n            var4 = func_1234(var5, var6);\n        \n            if (var4 > var3) { goto label_0694; }\n        \n            var1 = 0x1bc16d674ec80000;\n            var3 = 0x0691;\n            var4 = arg0;\n            var5 = var1;\n            var3 = func_1234(var4, var5);\n            var2 = var3;\n            goto label_0694;\n        }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x0c] - temp0 / 0x010000000000000000;\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_07B2:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_07A9; }\n        \n        label_0795:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0795; }\n        \n        label_07A9:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_07B2;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_07B2;\n        }\n    }\n    \n    function canAcceptTokens_(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0f;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_07E3(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_1899(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0809(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1234(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x0b]; }\n    \n    function func_0828(var arg0) returns (var r0) { return arg0; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n    \n        if (arg0 > storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        var var5 = 0x084d;\n        var var6 = arg0;\n        var5 = func_1942(var6);\n        var temp0 = var5;\n        var1 = temp0;\n        var5 = 0x085d;\n        var6 = 0x07e3;\n        var var7 = var1;\n        var var8 = 0x14;\n        var6 = func_1867(var7, var8);\n        var5 = func_07E3(var6);\n        var2 = var5;\n        var5 = 0x086d;\n        var6 = 0x07e3;\n        var7 = var1;\n        var8 = 0x05;\n        var6 = func_1867(var7, var8);\n        var5 = func_07E3(var6);\n        var3 = var5;\n        var5 = 0x081a;\n        var6 = 0x087c;\n        var7 = var1;\n        var8 = var2;\n        var6 = func_1234(var7, var8);\n        return func_087C(var3, var6);\n    }\n    \n    function func_087C(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1234(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function onlyAmbassadors() returns (var r0) { return storage[0x0e] & 0xff; }\n    \n    function setCanAcceptTokens(var arg0, var arg1) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0f;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = !!arg1 | (storage[temp0] & ~0xff);\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x08f3;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x090a;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var2;\n        storage[temp1] = temp2 * 0x010000000000000000 + storage[temp1];\n        memory[0x20:0x40] = 0x08;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var temp5 = temp2 + temp4;\n        var1 = temp5;\n        var temp6 = memory[0x40:0x60];\n        var temp7;\n        temp7, memory[temp6:temp6 + 0x00] = address(temp0).call.gas(!var1 * 0x08fc).value(var1)(memory[temp6:temp6 + memory[0x40:0x60] - temp6]);\n    \n        if (!temp7) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = var1;\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n    \n        if (storage[0x0b] != 0x00) {\n            var var5 = 0x0b0c;\n            var var6 = 0x0de0b6b3a7640000;\n            var5 = func_1942(var6);\n            var temp0 = var5;\n            var1 = temp0;\n            var5 = 0x0b1c;\n            var6 = 0x07e3;\n            var var7 = var1;\n            var var8 = 0x14;\n            var6 = func_1867(var7, var8);\n            var5 = func_07E3(var6);\n            var2 = var5;\n            var5 = 0x0b2c;\n            var6 = 0x07e3;\n            var7 = var1;\n            var8 = 0x05;\n            var6 = func_1867(var7, var8);\n            var5 = func_07E3(var6);\n            var3 = var5;\n            var5 = 0x0b3b;\n            var6 = 0x087c;\n            var7 = var1;\n            var8 = var2;\n            var6 = func_1234(var7, var8);\n            var5 = func_087C(var3, var6);\n            var4 = var5;\n            var0 = var4;\n        \n        label_0B41:\n            return var0;\n        } else {\n            var0 = 0x0218711a00;\n            goto label_0B41;\n        }\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x05]; }\n    \n    function giveEthFundAddress() returns (var r0) { return 0xd9092d94f74e6b5d408dbd3ecc88f3e5810d1e98; }\n    \n    function etherToSendFund() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b76;\n        var var2 = storage[0x04];\n        var var3 = storage[0x03];\n        return func_1234(var2, var3);\n    }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x08;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x0bb3;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x0b8c;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function totalEthFundCollected() returns (var r0) { return storage[0x04]; }\n    \n    function setStakingRequirement(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x05] = arg0;\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n    \n        if (storage[0x0b] != 0x00) {\n            var var5 = 0x0c61;\n            var var6 = 0x0de0b6b3a7640000;\n            var5 = func_1942(var6);\n            var temp0 = var5;\n            var1 = temp0;\n            var5 = 0x0c71;\n            var6 = 0x07e3;\n            var var7 = var1;\n            var var8 = 0x14;\n            var6 = func_1867(var7, var8);\n            var5 = func_07E3(var6);\n            var2 = var5;\n            var5 = 0x0c81;\n            var6 = 0x07e3;\n            var7 = var1;\n            var8 = 0x05;\n            var6 = func_1867(var7, var8);\n            var5 = func_07E3(var6);\n            var3 = var5;\n            var5 = 0x0b3b;\n            var6 = 0x0c90;\n            var7 = var1;\n            var8 = var2;\n            var6 = func_19B4(var7, var8);\n            var5 = func_0C90(var3, var6);\n            var4 = var5;\n            var0 = var4;\n        \n        label_0B41:\n            return var0;\n        } else {\n            var0 = 0x028fa6ae00;\n            goto label_0B41;\n        }\n    }\n    \n    function func_0C90(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_19B4(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0d;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = !!arg1 | (storage[temp0] & ~0xff);\n    }\n    \n    function payFund() {\n        var var0 = 0x00;\n        var var1 = 0x0cfa;\n        var var2 = storage[0x04];\n        var var3 = storage[0x03];\n        var1 = func_1234(var2, var3);\n        var0 = var1;\n    \n        if (var0 <= 0x01) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0d15;\n        var2 = storage[0x03];\n        var3 = var0;\n        var1 = func_19B4(var2, var3);\n        storage[0x03] = var1;\n        var temp0 = memory[0x40:0x60];\n        var temp1;\n        temp1, memory[temp0:temp0 + 0x00] = address(0xd9092d94f74e6b5d408dbd3ecc88f3e5810d1e98).call.gas(0x061a80).value(var0)(memory[temp0:temp0 + memory[0x40:0x60] - temp0]);\n    \n        if (temp1) {\n        label_0D5D:\n            return;\n        } else {\n            var1 = 0x0d59;\n            var2 = storage[0x03];\n            var3 = var0;\n            var1 = func_1234(var2, var3);\n            storage[0x03] = var1;\n            goto label_0D5D;\n        }\n    }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x0d6c;\n        var var3 = var1;\n        var2 = balanceOf(var3);\n        var0 = var2;\n        r0 = func_0D6F(var0, var1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0D6F(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x02;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_07B2:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_07A9; }\n        \n        label_0795:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0795; }\n        \n        label_07A9:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_07B2;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_07B2;\n        }\n    }\n    \n    function totalEthFundRecieved() returns (var r0) { return storage[0x03]; }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x0fad;\n        var8 = myTokens();\n    \n        if (var8 <= var7) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var0 = msg.sender;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var7 = 0x0fec;\n        var8 = var1;\n        var7 = func_1942(var8);\n        var temp0 = var7;\n        var2 = temp0;\n        var7 = 0x0ffc;\n        var8 = 0x07e3;\n        var var9 = var2;\n        var var10 = 0x14;\n        var8 = func_1867(var9, var10);\n        var7 = func_07E3(var8);\n        var3 = var7;\n        var7 = 0x100c;\n        var8 = 0x07e3;\n        var9 = var2;\n        var10 = 0x05;\n        var8 = func_1867(var9, var10);\n        var7 = func_07E3(var8);\n        var4 = var7;\n        var7 = 0x101b;\n        var8 = 0x0809;\n        var9 = var2;\n        var10 = var3;\n        var8 = func_1234(var9, var10);\n        var7 = func_0809(var4, var8);\n        var5 = var7;\n        var7 = 0x1029;\n        var8 = storage[0x04];\n        var9 = var4;\n        var7 = func_19B4(var8, var9);\n        storage[0x04] = var7;\n        var8 = storage[0x0b];\n        var7 = 0x1039;\n        var9 = var1;\n        var7 = func_1234(var8, var9);\n        storage[0x0b] = var7;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var7 = 0x105f;\n        var8 = storage[keccak256(memory[0x00:0x40])];\n        var9 = var1;\n        var7 = func_1234(var8, var9);\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var7;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var5 * 0x010000000000000000 + var1 * storage[0x0c];\n        storage[temp1] = storage[temp1] - temp2;\n        var6 = temp2;\n    \n        if (storage[0x0b] <= 0x00) {\n        label_10D6:\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = var1;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var5;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x40) - temp4], [0xc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139, stack[-7] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var7 = 0x10d2;\n            var8 = storage[0x0c];\n            var9 = storage[0x0b];\n            var10 = var3 * 0x010000000000000000;\n        \n            if (!var9) { assert(); }\n        \n            var7 = func_10CC(var8, var9, var10);\n            storage[0x0c] = var7;\n            goto label_10D6;\n        }\n    }\n    \n    function func_10CC(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_19B4(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_114F:\n            var var2 = 0x1157;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x114f;\n            var var3 = var1;\n            sell(var3);\n            goto label_114F;\n        }\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x1189;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x119d;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var3;\n        storage[temp0] = temp1 * 0x010000000000000000 + storage[temp0];\n        memory[0x20:0x40] = 0x08;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = storage[temp2];\n        storage[temp2] = 0x00;\n        var0 = temp1 + temp3;\n        var1 = msg.sender;\n        var3 = 0x11e9;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = func_1246(var4, var5);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_1234(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1246(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = arg0;\n        var var10 = msg.sender;\n    \n        if (block.timestamp < storage[0x00]) {\n            var var11 = storage[0x0e] & 0xff;\n        \n            if (!var11) {\n            label_1293:\n            \n                if (!var11) {\n                    storage[0x0e] = storage[0x0e] & ~0xff;\n                    var11 = 0x15db;\n                    var var12 = 0x07e3;\n                    var var13 = arg0;\n                    var var14 = 0x14;\n                    var12 = func_1867(var13, var14);\n                    var11 = func_07E3(var12);\n                    var temp0 = var11;\n                    var1 = temp0;\n                    var11 = 0x15e8;\n                    var12 = var1;\n                    var13 = 0x03;\n                    var11 = func_1899(var12, var13);\n                    var2 = var11;\n                    var11 = 0x15f8;\n                    var12 = 0x07e3;\n                    var13 = arg0;\n                    var14 = 0x05;\n                    var12 = func_1867(var13, var14);\n                    var11 = func_07E3(var12);\n                    var3 = var11;\n                    var11 = 0x1604;\n                    var12 = var1;\n                    var13 = var2;\n                    var11 = func_1234(var12, var13);\n                    var4 = var11;\n                    var11 = 0x1613;\n                    var12 = 0x1375;\n                    var13 = arg0;\n                    var14 = var1;\n                    var12 = func_1234(var13, var14);\n                    var11 = func_1375(var3, var12);\n                    var5 = var11;\n                    var11 = 0x1621;\n                    var12 = storage[0x04];\n                    var13 = var3;\n                    var11 = func_19B4(var12, var13);\n                    storage[0x04] = var11;\n                    var11 = 0x162d;\n                    var12 = var5;\n                    var11 = func_18B0(var12);\n                    var6 = var11;\n                    var7 = var4 * 0x010000000000000000;\n                    var temp1 = var6 > 0x00;\n                    var11 = temp1;\n                \n                    if (!var11) {\n                    label_1657:\n                    \n                        if (!var11) { revert(memory[0x00:0x00]); }\n                    \n                        var11 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n                    \n                        if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                            var11 = arg1 & 0x02 ** 0xa0 - 0x01 != msg.sender;\n                        \n                            if (!var11) { goto label_16B2; }\n                            else { goto label_1693; }\n                        } else if (!var11) {\n                        label_16B2:\n                        \n                            if (!var11) {\n                            label_16F8:\n                                var11 = 0x1702;\n                                var12 = var4;\n                                var13 = var2;\n                                var11 = func_19B4(var12, var13);\n                                var4 = var11;\n                                var7 = var4 * 0x010000000000000000;\n                            \n                                if (storage[0x0b] <= 0x00) {\n                                label_1777:\n                                    storage[0x0b] = var6;\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x07;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var11 = 0x17a0;\n                                    var13 = var6;\n                                    var11 = func_19B4(var12, var13);\n                                \n                                label_17A0:\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x07;\n                                    storage[keccak256(memory[0x00:0x40])] = var11;\n                                    var temp2 = var6;\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x09;\n                                    var temp3 = keccak256(memory[0x00:0x40]);\n                                    storage[temp3] = storage[temp3] + (storage[0x0c] * temp2 - var7);\n                                    var temp4 = memory[0x40:0x60];\n                                    memory[temp4:temp4 + 0x20] = arg0;\n                                    memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp2;\n                                    var temp5 = memory[0x40:0x60];\n                                    log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, msg.sender, stack[-13] & 0x02 ** 0xa0 - 0x01]);\n                                    return temp2;\n                                } else {\n                                label_171F:\n                                    var11 = 0x172a;\n                                    var12 = storage[0x0b];\n                                    var13 = var6;\n                                    var11 = func_19B4(var12, var13);\n                                    var temp6 = var11;\n                                    storage[0x0b] = temp6;\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!temp6) { assert(); }\n                                \n                                    storage[0x0c] = storage[0x0c] + var12 / var11;\n                                    var11 = storage[0x0b];\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!var11) { assert(); }\n                                \n                                    var temp7 = var7;\n                                    var7 = temp7 - (temp7 - var6 * (var12 / var11));\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x07;\n                                    var11 = 0x17a0;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = var6;\n                                    var11 = func_19B4(var12, var13);\n                                    goto label_17A0;\n                                }\n                            } else {\n                            label_16B8:\n                                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x08;\n                                var11 = 0x16da;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var13 = var2;\n                                var11 = func_19B4(var12, var13);\n                                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x08;\n                                storage[keccak256(memory[0x00:0x40])] = var11;\n                            \n                                if (storage[0x0b] <= 0x00) { goto label_1777; }\n                                else { goto label_171F; }\n                            }\n                        } else {\n                        label_1693:\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x07;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] < storage[0x05]) { goto label_16F8; }\n                            else { goto label_16B8; }\n                        }\n                    } else {\n                        var11 = storage[0x0b];\n                        var12 = 0x1655;\n                        var13 = var6;\n                        var14 = var11;\n                        var12 = func_19B4(var13, var14);\n                        var11 = var12 > var11;\n                        goto label_1657;\n                    }\n                } else {\n                    memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x06;\n                    var11 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == 0x01;\n                \n                    if (var11) {\n                        memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x0a;\n                    \n                        if (var9 + storage[keccak256(memory[0x00:0x40])] <= 0x6f05b59d3b200000) { goto label_12F3; }\n                        else { revert(memory[0x00:0x00]); }\n                    } else if (var11) {\n                    label_12F3:\n                        memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x0a;\n                        var12 = storage[keccak256(memory[0x00:0x40])];\n                        var11 = 0x1316;\n                        var13 = var9;\n                        var11 = func_19B4(var12, var13);\n                        memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x0a;\n                        storage[keccak256(memory[0x00:0x40])] = var11;\n                        var11 = 0x133d;\n                        var12 = 0x07e3;\n                        var13 = arg0;\n                        var14 = 0x14;\n                        var12 = func_1867(var13, var14);\n                        var11 = func_07E3(var12);\n                        var temp8 = var11;\n                        var1 = temp8;\n                        var11 = 0x134a;\n                        var12 = var1;\n                        var13 = 0x03;\n                        var11 = func_1899(var12, var13);\n                        var2 = var11;\n                        var11 = 0x135a;\n                        var12 = 0x07e3;\n                        var13 = arg0;\n                        var14 = 0x05;\n                        var12 = func_1867(var13, var14);\n                        var11 = func_07E3(var12);\n                        var3 = var11;\n                        var11 = 0x1366;\n                        var12 = var1;\n                        var13 = var2;\n                        var11 = func_1234(var12, var13);\n                        var4 = var11;\n                        var11 = 0x137b;\n                        var12 = 0x1375;\n                        var13 = arg0;\n                        var14 = var1;\n                        var12 = func_1234(var13, var14);\n                        var11 = func_1375(var3, var12);\n                        var5 = var11;\n                        var11 = 0x1389;\n                        var12 = storage[0x04];\n                        var13 = var3;\n                        var11 = func_19B4(var12, var13);\n                        storage[0x04] = var11;\n                        var11 = 0x1395;\n                        var12 = var5;\n                        var11 = func_18B0(var12);\n                        var6 = var11;\n                        var7 = var4 * 0x010000000000000000;\n                        var temp9 = var6 > 0x00;\n                        var11 = temp9;\n                    \n                        if (!var11) {\n                        label_13BF:\n                        \n                            if (!var11) { revert(memory[0x00:0x00]); }\n                        \n                            var11 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n                        \n                            if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                                var11 = arg1 & 0x02 ** 0xa0 - 0x01 != msg.sender;\n                            \n                                if (!var11) { goto label_141A; }\n                                else { goto label_13FB; }\n                            } else if (!var11) {\n                            label_141A:\n                            \n                                if (!var11) {\n                                label_1460:\n                                    var11 = 0x146a;\n                                    var12 = var4;\n                                    var13 = var2;\n                                    var11 = func_19B4(var12, var13);\n                                    var4 = var11;\n                                    var7 = var4 * 0x010000000000000000;\n                                \n                                    if (storage[0x0b] <= 0x00) {\n                                    label_14DF:\n                                        storage[0x0b] = var6;\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x07;\n                                        var12 = storage[keccak256(memory[0x00:0x40])];\n                                        var11 = 0x1508;\n                                        var13 = var6;\n                                        var11 = func_19B4(var12, var13);\n                                    \n                                    label_1508:\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x07;\n                                        storage[keccak256(memory[0x00:0x40])] = var11;\n                                        var temp10 = var6;\n                                        var8 = storage[0x0c] * temp10 - var7;\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x09;\n                                        var temp11 = keccak256(memory[0x00:0x40]);\n                                        storage[temp11] = storage[temp11] + var8;\n                                        var temp12 = memory[0x40:0x60];\n                                        memory[temp12:temp12 + 0x20] = arg0;\n                                        memory[temp12 + 0x20:temp12 + 0x20 + 0x20] = temp10;\n                                        var temp13 = memory[0x40:0x60];\n                                        log(memory[temp13:temp13 + (temp12 + 0x40) - temp13], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, msg.sender, stack[-13] & 0x02 ** 0xa0 - 0x01]);\n                                        return temp10;\n                                    } else {\n                                    label_1487:\n                                        var11 = 0x1492;\n                                        var12 = storage[0x0b];\n                                        var13 = var6;\n                                        var11 = func_19B4(var12, var13);\n                                        var temp14 = var11;\n                                        storage[0x0b] = temp14;\n                                        var12 = var4 * 0x010000000000000000;\n                                    \n                                        if (!temp14) { assert(); }\n                                    \n                                        storage[0x0c] = storage[0x0c] + var12 / var11;\n                                        var11 = storage[0x0b];\n                                        var12 = var4 * 0x010000000000000000;\n                                    \n                                        if (!var11) { assert(); }\n                                    \n                                        var temp15 = var7;\n                                        var7 = temp15 - (temp15 - var6 * (var12 / var11));\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x07;\n                                        var12 = storage[keccak256(memory[0x00:0x40])];\n                                        var11 = 0x1508;\n                                        var13 = var6;\n                                        var11 = func_19B4(var12, var13);\n                                        goto label_1508;\n                                    }\n                                } else {\n                                label_1420:\n                                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x08;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var11 = 0x1442;\n                                    var13 = var2;\n                                    var11 = func_19B4(var12, var13);\n                                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x08;\n                                    storage[keccak256(memory[0x00:0x40])] = var11;\n                                \n                                    if (storage[0x0b] <= 0x00) { goto label_14DF; }\n                                    else { goto label_1487; }\n                                }\n                            } else {\n                            label_13FB:\n                                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x07;\n                            \n                                if (storage[keccak256(memory[0x00:0x40])] < storage[0x05]) { goto label_1460; }\n                                else { goto label_1420; }\n                            }\n                        } else {\n                            var11 = storage[0x0b];\n                            var12 = 0x13bd;\n                            var13 = var6;\n                            var14 = var11;\n                            var12 = func_19B4(var13, var14);\n                            var11 = var12 > var11;\n                            goto label_13BF;\n                        }\n                    } else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_127D:\n                var11 = 0x6f05b59d3b200000;\n                var12 = var9;\n                var13 = 0x128f;\n                var13 = totalEthereumBalance();\n                var11 = var13 - var12 <= var11;\n                goto label_1293;\n            }\n        } else {\n            storage[0x0e] = storage[0x0e] & ~0xff;\n            var11 = storage[0x0e] & 0xff;\n        \n            if (!var11) { goto label_1293; }\n            else { goto label_127D; }\n        }\n    }\n    \n    function func_1375(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1234(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1867(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1899(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_18B0(var arg0) returns (var r0) {\n        var temp0 = storage[0x0b];\n        var var0 = 0x00;\n        var var1 = 0x204fce5e3e25026110000000;\n        var var3 = temp0;\n        var var2 = var0;\n        var var4 = 0x3b9aca00;\n        var var5 = 0x192f;\n        var var6 = 0x1929;\n        var var7 = var3 * 0x0f0bdc21abb48db201e86d4000000000 + var3 ** 0x02 * 0x0de0b6b3a7640000 + arg0 * 0x59aedfc10d7279c5eed1401645400000000000 + 0x04140c78940f6a24fdffc78873d4490d2100000000000000;\n        var6 = func_19C3(var7);\n        var5 = func_1929(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_1929(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1234(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1942(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x0b] + 0x0de0b6b3a7640000;\n        var var4 = 0x0de0b6b3a7640000;\n        var var3 = var0;\n        var var5 = 0x1999;\n        var var6 = temp0 * (var2 / var4 * 0x3b9aca00 + 0x0218711a00);\n        var var7 = 0x02;\n        var var8 = (var1 ** var7 - temp0 + ~0x0de0b6b3a763ffff) / var4 * 0x3b9aca00;\n    \n        if (!var7) { assert(); }\n    \n        var5 = func_1993(var6, var7, var8);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_1993(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1234(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_19B4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_19C3(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_0BB8:\n            return var0;\n        } else {\n        label_19D5:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_0BB8; }\n            else { goto label_19D5; }\n        }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_01AA:\n        \n            if (tx.gasprice > 0x02540be400) { revert(memory[0x00:0x00]); }\n        \n            var var0 = 0x01c7;\n            var var1 = msg.value;\n            var var2 = 0x00;\n            var0 = buy(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = dividendsOf(var2);\n            \n            label_01E9:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020e;\n                var2 = name();\n            \n            label_020E:\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                memory[var3:var3 + 0x20] = 0x20;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var6 = temp4 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_024A:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_023B:\n                    var temp10 = var11;\n                    memory[temp10 + var9:temp10 + var9 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_024A; }\n                    else { goto label_023B; }\n                }\n            } else if (var0 == 0x0f34dc16) {\n                // Dispatch table entry for canAcceptTokens_(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = canAcceptTokens_(var2);\n            \n            label_02A4:\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = !!var2;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x00;\n                var4 = var3;\n                var5 = var4;\n                var6 = var5;\n                var7 = var6;\n                var8 = 0x07ea;\n                var9 = 0x07e3;\n                var10 = var2;\n                var11 = 0x14;\n                var9 = func_1867(var10, var11);\n                var8 = func_07E3(var9);\n                var4 = var8;\n                var8 = 0x07fa;\n                var9 = 0x07e3;\n                var10 = var2;\n                var11 = 0x05;\n                var9 = func_1867(var10, var11);\n                var8 = func_07E3(var9);\n                var5 = var8;\n                var8 = 0x080f;\n                var9 = 0x0809;\n                var10 = var2;\n                var11 = var4;\n                var9 = func_1234(var10, var11);\n                var8 = func_0809(var5, var9);\n                var temp13 = var8;\n                var6 = temp13;\n                var8 = 0x081a;\n                var9 = var6;\n                var8 = func_18B0(var9);\n                var1 = var8;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = totalSupply();\n                goto label_01E9;\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                goto label_01E9;\n            } else if (var0 == 0x27defa1f) {\n                // Dispatch table entry for onlyAmbassadors()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a4;\n                var2 = onlyAmbassadors();\n                goto label_02A4;\n            } else if (var0 == 0x294205b4) {\n                // Dispatch table entry for setCanAcceptTokens(address,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = !!msg.data[0x24:0x44];\n                setCanAcceptTokens(var2, var3);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0343;\n                var2 = decimals();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0xff;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4000aea0) {\n                // Dispatch table entry for transferAndCall(address,uint256,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var temp16 = msg.data[0x44:0x64];\n                var4 = temp16 + 0x24;\n                var5 = msg.data[temp16 + 0x04:temp16 + 0x04 + 0x20];\n                var6 = 0x00;\n                var7 = var6;\n            \n                if (!(var2 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0f;\n            \n                if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != 0x01) { revert(memory[0x00:0x00]); }\n            \n                var8 = 0x09fc;\n                var9 = var2;\n                var10 = var3;\n            \n            label_0DE4:\n                var11 = 0x00;\n                var var12 = var11;\n                var var13 = 0x00;\n                var var14 = 0x0df1;\n                var14 = myTokens();\n            \n                if (var14 <= var13) { revert(memory[0x00:0x00]); }\n            \n                var12 = msg.sender;\n                memory[0x00:0x20] = var12 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x07;\n            \n                if (var10 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n            \n                var13 = 0x00;\n                var14 = 0x0e2e;\n                var var15 = 0x01;\n                var14 = myDividends(var15);\n            \n                if (var14 <= var13) {\n                label_0E3C:\n                    memory[0x00:0x20] = var12 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x07;\n                    var13 = 0x0e5f;\n                    var14 = storage[keccak256(memory[0x00:0x40])];\n                    var15 = var10;\n                    var13 = func_1234(var14, var15);\n                    var temp17 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = var12 & temp17;\n                    memory[0x20:0x40] = 0x07;\n                    storage[keccak256(memory[0x00:0x40])] = var13;\n                    memory[0x00:0x20] = var9 & temp17;\n                    var14 = storage[keccak256(memory[0x00:0x40])];\n                    var13 = 0x0e8e;\n                    var15 = var10;\n                    var13 = func_19B4(var14, var15);\n                    var temp18 = 0x02 ** 0xa0 - 0x01;\n                    var temp19 = temp18 & var9;\n                    memory[0x00:0x20] = temp19;\n                    memory[0x20:0x40] = 0x07;\n                    storage[keccak256(memory[0x00:0x40])] = var13;\n                    var temp20 = var12 & temp18;\n                    memory[0x00:0x20] = temp20;\n                    memory[0x20:0x40] = 0x09;\n                    var temp21 = keccak256(memory[0x00:0x40]);\n                    var temp22 = var10;\n                    storage[temp21] = storage[temp21] - temp22 * storage[0x0c];\n                    memory[0x00:0x20] = temp19;\n                    var temp23 = keccak256(memory[0x00:0x40]);\n                    storage[temp23] = storage[temp23] + temp22 * storage[0x0c];\n                    var temp24 = memory[0x40:0x60];\n                    memory[temp24:temp24 + 0x20] = temp22;\n                    var temp25 = memory[0x40:0x60];\n                    log(memory[temp25:temp25 + (temp24 + 0x20) - temp25], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-2] & 0x02 ** 0xa0 - 0x01, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n                    var11 = 0x01;\n                    var8 = var11;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var13 = 0x0e3c;\n                    withdraw();\n                    goto label_0E3C;\n                }\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = sellPrice();\n                goto label_01E9;\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = stakingRequirement();\n                goto label_01E9;\n            } else if (var0 == 0x5e079aa5) {\n                // Dispatch table entry for giveEthFundAddress()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03d4;\n                var2 = giveEthFundAddress();\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0x66042e7a) {\n                // Dispatch table entry for etherToSendFund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = etherToSendFund();\n                goto label_01E9;\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                goto label_01E9;\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = totalEthereumBalance();\n                goto label_01E9;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_01E9;\n            } else if (var0 == 0x76be1585) {\n                // Dispatch table entry for administrators(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = administrators(var2);\n                goto label_02A4;\n            } else if (var0 == 0x7ff276bd) {\n                // Dispatch table entry for totalEthFundCollected()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = totalEthFundCollected();\n                goto label_01E9;\n            } else if (var0 == 0x8328b610) {\n                // Dispatch table entry for setStakingRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var2 = msg.data[0x04:0x24];\n                setStakingRequirement(var2);\n                stop();\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = buyPrice();\n                goto label_01E9;\n            } else if (var0 == 0x87c95058) {\n                // Dispatch table entry for setAdministrator(address,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = !!msg.data[0x24:0x44];\n                setAdministrator(var2, var3);\n                stop();\n            } else if (var0 == 0x8974372d) {\n                // Dispatch table entry for payFund()\n                var1 = 0x032e;\n                payFund();\n                stop();\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = myTokens();\n                goto label_01E9;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020e;\n                var2 = symbol();\n                goto label_020E;\n            } else if (var0 == 0xa4d55686) {\n                // Dispatch table entry for totalEthFundRecieved()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = totalEthFundRecieved();\n                goto label_01E9;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                goto label_0DE4;\n            } else if (var0 == 0xb84c8246) {\n                // Dispatch table entry for setSymbol(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var temp28 = msg.data[0x04:0x24];\n                var temp29 = msg.data[temp28 + 0x04:temp28 + 0x04 + 0x20];\n                var temp30 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp30 + (temp29 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp30:temp30 + 0x20] = temp29;\n                memory[temp30 + 0x20:temp30 + 0x20 + temp29] = msg.data[temp28 + 0x24:temp28 + 0x24 + temp29];\n                var2 = temp30;\n                var3 = msg.sender;\n                memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0d;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var temp31 = var2;\n                var4 = 0x0f59;\n                var5 = 0x02;\n                var6 = temp31 + 0x20;\n                var7 = memory[temp31:temp31 + 0x20];\n            \n            label_19F8:\n                var temp32 = var5;\n                var temp33 = storage[temp32];\n                memory[0x00:0x20] = temp32;\n                var8 = keccak256(memory[0x00:0x20]);\n                var temp34 = var6;\n                var6 = var8 + ((!(temp33 & 0x01) * 0x0100 - 0x01 & temp33) / 0x02 + 0x1f) / 0x20;\n                var9 = temp34;\n            \n                if (0x1f < var7) {\n                    var temp35 = var7;\n                    storage[var5] = temp35 + temp35 + 0x01;\n                \n                    if (!temp35) {\n                    label_1A66:\n                        var temp36 = var6;\n                        var6 = 0x0d6f;\n                        var7 = 0x0828;\n                        var temp37 = var8;\n                        var9 = temp37;\n                        var8 = temp36;\n                    \n                        if (var8 <= var9) {\n                            var7 = func_0D6F(var8, var9);\n                            var6 = func_0828(var7);\n                            var4 = func_0D6F(var5, var6);\n                            // Error: Could not resolve method call return address!\n                        } else {\n                        label_1A7B:\n                            var temp38 = var9;\n                            storage[temp38] = 0x00;\n                            var9 = temp38 + 0x01;\n                        \n                            if (var8 > var9) { goto label_1A7B; }\n                        \n                            var7 = func_0D6F(var8, var9);\n                            // Error: Could not resolve method call return address!\n                        }\n                    } else {\n                        var temp39 = var7;\n                        var temp40 = var9;\n                        var7 = temp40;\n                        var9 = var7 + temp39;\n                    \n                        if (var9 <= var7) { goto label_1A66; }\n                    \n                    label_1A54:\n                        var temp41 = var7;\n                        var temp42 = var8;\n                        storage[temp42] = memory[temp41:temp41 + 0x20];\n                        var7 = temp41 + 0x20;\n                        var9 = var9;\n                        var8 = temp42 + 0x01;\n                    \n                        if (var9 <= var7) { goto label_1A66; }\n                        else { goto label_1A54; }\n                    }\n                } else {\n                    var temp43 = var7;\n                    storage[var5] = temp43 + temp43 | (memory[var9:var9 + 0x20] & ~0xff);\n                    goto label_1A66;\n                }\n            } else if (var0 == 0xc47f0027) {\n                // Dispatch table entry for setName(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var temp44 = msg.data[0x04:0x24];\n                var temp45 = msg.data[temp44 + 0x04:temp44 + 0x04 + 0x20];\n                var temp46 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp46 + (temp45 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp46:temp46 + 0x20] = temp45;\n                memory[temp46 + 0x20:temp46 + 0x20 + temp45] = msg.data[temp44 + 0x24:temp44 + 0x24 + temp45];\n                var2 = temp46;\n                var3 = msg.sender;\n                memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0d;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var temp47 = var2;\n                var4 = 0x0f59;\n                var5 = 0x01;\n                var6 = temp47 + 0x20;\n                var7 = memory[temp47:temp47 + 0x20];\n                goto label_19F8;\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x01e9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x00;\n            \n                if (tx.gasprice > 0x0ba43b7400) { revert(memory[0x00:0x00]); }\n            \n                var4 = 0x0bb8;\n                var5 = msg.value;\n                var6 = var2;\n                var4 = buy(var5, var6);\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                reinvest();\n                stop();\n            } else { goto label_01AA; }\n        }\n    }\n    \n    function buy(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (msg.sender != tx.origin) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n    \n        if (var1 <= 0x1bc16d674ec80000) {\n        label_0694:\n            var var3 = 0x069e;\n            var var4 = var1;\n            var var5 = arg1;\n            var3 = func_1246(var4, var5);\n        \n            if (var2 <= 0x00) {\n            label_06D9:\n                return var0;\n            } else {\n                var temp0 = var2;\n                var temp1 = memory[0x40:0x60];\n                var temp2;\n                temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n            \n                if (temp2) { goto label_06D9; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var3 = 0x0ad78ebc5ac6200000;\n            var4 = 0x0677;\n            var5 = address(this).balance;\n            var var6 = var1;\n            var4 = func_1234(var5, var6);\n        \n            if (var4 > var3) { goto label_0694; }\n        \n            var1 = 0x1bc16d674ec80000;\n            var3 = 0x0691;\n            var4 = arg0;\n            var5 = var1;\n            var3 = func_1234(var4, var5);\n            var2 = var3;\n            goto label_0694;\n        }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x0c] - temp0 / 0x010000000000000000;\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_07B2:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_07A9; }\n        \n        label_0795:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0795; }\n        \n        label_07A9:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_07B2;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_07B2;\n        }\n    }\n    \n    function canAcceptTokens_(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0f;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_07E3(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_1899(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0809(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1234(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x0b]; }\n    \n    function func_0828(var arg0) returns (var r0) { return arg0; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n    \n        if (arg0 > storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        var var5 = 0x084d;\n        var var6 = arg0;\n        var5 = func_1942(var6);\n        var temp0 = var5;\n        var1 = temp0;\n        var5 = 0x085d;\n        var6 = 0x07e3;\n        var var7 = var1;\n        var var8 = 0x14;\n        var6 = func_1867(var7, var8);\n        var5 = func_07E3(var6);\n        var2 = var5;\n        var5 = 0x086d;\n        var6 = 0x07e3;\n        var7 = var1;\n        var8 = 0x05;\n        var6 = func_1867(var7, var8);\n        var5 = func_07E3(var6);\n        var3 = var5;\n        var5 = 0x081a;\n        var6 = 0x087c;\n        var7 = var1;\n        var8 = var2;\n        var6 = func_1234(var7, var8);\n        return func_087C(var3, var6);\n    }\n    \n    function func_087C(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1234(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function onlyAmbassadors() returns (var r0) { return storage[0x0e] & 0xff; }\n    \n    function setCanAcceptTokens(var arg0, var arg1) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0f;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = !!arg1 | (storage[temp0] & ~0xff);\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x08f3;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x090a;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var2;\n        storage[temp1] = temp2 * 0x010000000000000000 + storage[temp1];\n        memory[0x20:0x40] = 0x08;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var temp5 = temp2 + temp4;\n        var1 = temp5;\n        var temp6 = memory[0x40:0x60];\n        var temp7;\n        temp7, memory[temp6:temp6 + 0x00] = address(temp0).call.gas(!var1 * 0x08fc).value(var1)(memory[temp6:temp6 + memory[0x40:0x60] - temp6]);\n    \n        if (!temp7) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = var1;\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n    \n        if (storage[0x0b] != 0x00) {\n            var var5 = 0x0b0c;\n            var var6 = 0x0de0b6b3a7640000;\n            var5 = func_1942(var6);\n            var temp0 = var5;\n            var1 = temp0;\n            var5 = 0x0b1c;\n            var6 = 0x07e3;\n            var var7 = var1;\n            var var8 = 0x14;\n            var6 = func_1867(var7, var8);\n            var5 = func_07E3(var6);\n            var2 = var5;\n            var5 = 0x0b2c;\n            var6 = 0x07e3;\n            var7 = var1;\n            var8 = 0x05;\n            var6 = func_1867(var7, var8);\n            var5 = func_07E3(var6);\n            var3 = var5;\n            var5 = 0x0b3b;\n            var6 = 0x087c;\n            var7 = var1;\n            var8 = var2;\n            var6 = func_1234(var7, var8);\n            var5 = func_087C(var3, var6);\n            var4 = var5;\n            var0 = var4;\n        \n        label_0B41:\n            return var0;\n        } else {\n            var0 = 0x0218711a00;\n            goto label_0B41;\n        }\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x05]; }\n    \n    function giveEthFundAddress() returns (var r0) { return 0xd9092d94f74e6b5d408dbd3ecc88f3e5810d1e98; }\n    \n    function etherToSendFund() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b76;\n        var var2 = storage[0x04];\n        var var3 = storage[0x03];\n        return func_1234(var2, var3);\n    }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x08;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x0bb3;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x0b8c;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function totalEthFundCollected() returns (var r0) { return storage[0x04]; }\n    \n    function setStakingRequirement(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x05] = arg0;\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n    \n        if (storage[0x0b] != 0x00) {\n            var var5 = 0x0c61;\n            var var6 = 0x0de0b6b3a7640000;\n            var5 = func_1942(var6);\n            var temp0 = var5;\n            var1 = temp0;\n            var5 = 0x0c71;\n            var6 = 0x07e3;\n            var var7 = var1;\n            var var8 = 0x14;\n            var6 = func_1867(var7, var8);\n            var5 = func_07E3(var6);\n            var2 = var5;\n            var5 = 0x0c81;\n            var6 = 0x07e3;\n            var7 = var1;\n            var8 = 0x05;\n            var6 = func_1867(var7, var8);\n            var5 = func_07E3(var6);\n            var3 = var5;\n            var5 = 0x0b3b;\n            var6 = 0x0c90;\n            var7 = var1;\n            var8 = var2;\n            var6 = func_19B4(var7, var8);\n            var5 = func_0C90(var3, var6);\n            var4 = var5;\n            var0 = var4;\n        \n        label_0B41:\n            return var0;\n        } else {\n            var0 = 0x028fa6ae00;\n            goto label_0B41;\n        }\n    }\n    \n    function func_0C90(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_19B4(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0d;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = !!arg1 | (storage[temp0] & ~0xff);\n    }\n    \n    function payFund() {\n        var var0 = 0x00;\n        var var1 = 0x0cfa;\n        var var2 = storage[0x04];\n        var var3 = storage[0x03];\n        var1 = func_1234(var2, var3);\n        var0 = var1;\n    \n        if (var0 <= 0x01) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0d15;\n        var2 = storage[0x03];\n        var3 = var0;\n        var1 = func_19B4(var2, var3);\n        storage[0x03] = var1;\n        var temp0 = memory[0x40:0x60];\n        var temp1;\n        temp1, memory[temp0:temp0 + 0x00] = address(0xd9092d94f74e6b5d408dbd3ecc88f3e5810d1e98).call.gas(0x061a80).value(var0)(memory[temp0:temp0 + memory[0x40:0x60] - temp0]);\n    \n        if (temp1) {\n        label_0D5D:\n            return;\n        } else {\n            var1 = 0x0d59;\n            var2 = storage[0x03];\n            var3 = var0;\n            var1 = func_1234(var2, var3);\n            storage[0x03] = var1;\n            goto label_0D5D;\n        }\n    }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x0d6c;\n        var var3 = var1;\n        var2 = balanceOf(var3);\n        var0 = var2;\n        r0 = func_0D6F(var0, var1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0D6F(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x02;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_07B2:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_07A9; }\n        \n        label_0795:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0795; }\n        \n        label_07A9:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_07B2;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_07B2;\n        }\n    }\n    \n    function totalEthFundRecieved() returns (var r0) { return storage[0x03]; }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x0fad;\n        var8 = myTokens();\n    \n        if (var8 <= var7) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var0 = msg.sender;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var7 = 0x0fec;\n        var8 = var1;\n        var7 = func_1942(var8);\n        var temp0 = var7;\n        var2 = temp0;\n        var7 = 0x0ffc;\n        var8 = 0x07e3;\n        var var9 = var2;\n        var var10 = 0x14;\n        var8 = func_1867(var9, var10);\n        var7 = func_07E3(var8);\n        var3 = var7;\n        var7 = 0x100c;\n        var8 = 0x07e3;\n        var9 = var2;\n        var10 = 0x05;\n        var8 = func_1867(var9, var10);\n        var7 = func_07E3(var8);\n        var4 = var7;\n        var7 = 0x101b;\n        var8 = 0x0809;\n        var9 = var2;\n        var10 = var3;\n        var8 = func_1234(var9, var10);\n        var7 = func_0809(var4, var8);\n        var5 = var7;\n        var7 = 0x1029;\n        var8 = storage[0x04];\n        var9 = var4;\n        var7 = func_19B4(var8, var9);\n        storage[0x04] = var7;\n        var8 = storage[0x0b];\n        var7 = 0x1039;\n        var9 = var1;\n        var7 = func_1234(var8, var9);\n        storage[0x0b] = var7;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var7 = 0x105f;\n        var8 = storage[keccak256(memory[0x00:0x40])];\n        var9 = var1;\n        var7 = func_1234(var8, var9);\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var7;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var5 * 0x010000000000000000 + var1 * storage[0x0c];\n        storage[temp1] = storage[temp1] - temp2;\n        var6 = temp2;\n    \n        if (storage[0x0b] <= 0x00) {\n        label_10D6:\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = var1;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var5;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x40) - temp4], [0xc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139, stack[-7] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var7 = 0x10d2;\n            var8 = storage[0x0c];\n            var9 = storage[0x0b];\n            var10 = var3 * 0x010000000000000000;\n        \n            if (!var9) { assert(); }\n        \n            var7 = func_10CC(var8, var9, var10);\n            storage[0x0c] = var7;\n            goto label_10D6;\n        }\n    }\n    \n    function func_10CC(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_19B4(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_114F:\n            var var2 = 0x1157;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x114f;\n            var var3 = var1;\n            sell(var3);\n            goto label_114F;\n        }\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x1189;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x119d;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var3;\n        storage[temp0] = temp1 * 0x010000000000000000 + storage[temp0];\n        memory[0x20:0x40] = 0x08;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = storage[temp2];\n        storage[temp2] = 0x00;\n        var0 = temp1 + temp3;\n        var1 = msg.sender;\n        var3 = 0x11e9;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = func_1246(var4, var5);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_1234(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1246(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = arg0;\n        var var10 = msg.sender;\n    \n        if (block.timestamp < storage[0x00]) {\n            var var11 = storage[0x0e] & 0xff;\n        \n            if (!var11) {\n            label_1293:\n            \n                if (!var11) {\n                    storage[0x0e] = storage[0x0e] & ~0xff;\n                    var11 = 0x15db;\n                    var var12 = 0x07e3;\n                    var var13 = arg0;\n                    var var14 = 0x14;\n                    var12 = func_1867(var13, var14);\n                    var11 = func_07E3(var12);\n                    var temp0 = var11;\n                    var1 = temp0;\n                    var11 = 0x15e8;\n                    var12 = var1;\n                    var13 = 0x03;\n                    var11 = func_1899(var12, var13);\n                    var2 = var11;\n                    var11 = 0x15f8;\n                    var12 = 0x07e3;\n                    var13 = arg0;\n                    var14 = 0x05;\n                    var12 = func_1867(var13, var14);\n                    var11 = func_07E3(var12);\n                    var3 = var11;\n                    var11 = 0x1604;\n                    var12 = var1;\n                    var13 = var2;\n                    var11 = func_1234(var12, var13);\n                    var4 = var11;\n                    var11 = 0x1613;\n                    var12 = 0x1375;\n                    var13 = arg0;\n                    var14 = var1;\n                    var12 = func_1234(var13, var14);\n                    var11 = func_1375(var3, var12);\n                    var5 = var11;\n                    var11 = 0x1621;\n                    var12 = storage[0x04];\n                    var13 = var3;\n                    var11 = func_19B4(var12, var13);\n                    storage[0x04] = var11;\n                    var11 = 0x162d;\n                    var12 = var5;\n                    var11 = func_18B0(var12);\n                    var6 = var11;\n                    var7 = var4 * 0x010000000000000000;\n                    var temp1 = var6 > 0x00;\n                    var11 = temp1;\n                \n                    if (!var11) {\n                    label_1657:\n                    \n                        if (!var11) { revert(memory[0x00:0x00]); }\n                    \n                        var11 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n                    \n                        if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                            var11 = arg1 & 0x02 ** 0xa0 - 0x01 != msg.sender;\n                        \n                            if (!var11) { goto label_16B2; }\n                            else { goto label_1693; }\n                        } else if (!var11) {\n                        label_16B2:\n                        \n                            if (!var11) {\n                            label_16F8:\n                                var11 = 0x1702;\n                                var12 = var4;\n                                var13 = var2;\n                                var11 = func_19B4(var12, var13);\n                                var4 = var11;\n                                var7 = var4 * 0x010000000000000000;\n                            \n                                if (storage[0x0b] <= 0x00) {\n                                label_1777:\n                                    storage[0x0b] = var6;\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x07;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var11 = 0x17a0;\n                                    var13 = var6;\n                                    var11 = func_19B4(var12, var13);\n                                \n                                label_17A0:\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x07;\n                                    storage[keccak256(memory[0x00:0x40])] = var11;\n                                    var temp2 = var6;\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x09;\n                                    var temp3 = keccak256(memory[0x00:0x40]);\n                                    storage[temp3] = storage[temp3] + (storage[0x0c] * temp2 - var7);\n                                    var temp4 = memory[0x40:0x60];\n                                    memory[temp4:temp4 + 0x20] = arg0;\n                                    memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp2;\n                                    var temp5 = memory[0x40:0x60];\n                                    log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, msg.sender, stack[-13] & 0x02 ** 0xa0 - 0x01]);\n                                    return temp2;\n                                } else {\n                                label_171F:\n                                    var11 = 0x172a;\n                                    var12 = storage[0x0b];\n                                    var13 = var6;\n                                    var11 = func_19B4(var12, var13);\n                                    var temp6 = var11;\n                                    storage[0x0b] = temp6;\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!temp6) { assert(); }\n                                \n                                    storage[0x0c] = storage[0x0c] + var12 / var11;\n                                    var11 = storage[0x0b];\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!var11) { assert(); }\n                                \n                                    var temp7 = var7;\n                                    var7 = temp7 - (temp7 - var6 * (var12 / var11));\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x07;\n                                    var11 = 0x17a0;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = var6;\n                                    var11 = func_19B4(var12, var13);\n                                    goto label_17A0;\n                                }\n                            } else {\n                            label_16B8:\n                                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x08;\n                                var11 = 0x16da;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var13 = var2;\n                                var11 = func_19B4(var12, var13);\n                                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x08;\n                                storage[keccak256(memory[0x00:0x40])] = var11;\n                            \n                                if (storage[0x0b] <= 0x00) { goto label_1777; }\n                                else { goto label_171F; }\n                            }\n                        } else {\n                        label_1693:\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x07;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] < storage[0x05]) { goto label_16F8; }\n                            else { goto label_16B8; }\n                        }\n                    } else {\n                        var11 = storage[0x0b];\n                        var12 = 0x1655;\n                        var13 = var6;\n                        var14 = var11;\n                        var12 = func_19B4(var13, var14);\n                        var11 = var12 > var11;\n                        goto label_1657;\n                    }\n                } else {\n                    memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x06;\n                    var11 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == 0x01;\n                \n                    if (var11) {\n                        memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x0a;\n                    \n                        if (var9 + storage[keccak256(memory[0x00:0x40])] <= 0x6f05b59d3b200000) { goto label_12F3; }\n                        else { revert(memory[0x00:0x00]); }\n                    } else if (var11) {\n                    label_12F3:\n                        memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x0a;\n                        var12 = storage[keccak256(memory[0x00:0x40])];\n                        var11 = 0x1316;\n                        var13 = var9;\n                        var11 = func_19B4(var12, var13);\n                        memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x0a;\n                        storage[keccak256(memory[0x00:0x40])] = var11;\n                        var11 = 0x133d;\n                        var12 = 0x07e3;\n                        var13 = arg0;\n                        var14 = 0x14;\n                        var12 = func_1867(var13, var14);\n                        var11 = func_07E3(var12);\n                        var temp8 = var11;\n                        var1 = temp8;\n                        var11 = 0x134a;\n                        var12 = var1;\n                        var13 = 0x03;\n                        var11 = func_1899(var12, var13);\n                        var2 = var11;\n                        var11 = 0x135a;\n                        var12 = 0x07e3;\n                        var13 = arg0;\n                        var14 = 0x05;\n                        var12 = func_1867(var13, var14);\n                        var11 = func_07E3(var12);\n                        var3 = var11;\n                        var11 = 0x1366;\n                        var12 = var1;\n                        var13 = var2;\n                        var11 = func_1234(var12, var13);\n                        var4 = var11;\n                        var11 = 0x137b;\n                        var12 = 0x1375;\n                        var13 = arg0;\n                        var14 = var1;\n                        var12 = func_1234(var13, var14);\n                        var11 = func_1375(var3, var12);\n                        var5 = var11;\n                        var11 = 0x1389;\n                        var12 = storage[0x04];\n                        var13 = var3;\n                        var11 = func_19B4(var12, var13);\n                        storage[0x04] = var11;\n                        var11 = 0x1395;\n                        var12 = var5;\n                        var11 = func_18B0(var12);\n                        var6 = var11;\n                        var7 = var4 * 0x010000000000000000;\n                        var temp9 = var6 > 0x00;\n                        var11 = temp9;\n                    \n                        if (!var11) {\n                        label_13BF:\n                        \n                            if (!var11) { revert(memory[0x00:0x00]); }\n                        \n                            var11 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n                        \n                            if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                                var11 = arg1 & 0x02 ** 0xa0 - 0x01 != msg.sender;\n                            \n                                if (!var11) { goto label_141A; }\n                                else { goto label_13FB; }\n                            } else if (!var11) {\n                            label_141A:\n                            \n                                if (!var11) {\n                                label_1460:\n                                    var11 = 0x146a;\n                                    var12 = var4;\n                                    var13 = var2;\n                                    var11 = func_19B4(var12, var13);\n                                    var4 = var11;\n                                    var7 = var4 * 0x010000000000000000;\n                                \n                                    if (storage[0x0b] <= 0x00) {\n                                    label_14DF:\n                                        storage[0x0b] = var6;\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x07;\n                                        var12 = storage[keccak256(memory[0x00:0x40])];\n                                        var11 = 0x1508;\n                                        var13 = var6;\n                                        var11 = func_19B4(var12, var13);\n                                    \n                                    label_1508:\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x07;\n                                        storage[keccak256(memory[0x00:0x40])] = var11;\n                                        var temp10 = var6;\n                                        var8 = storage[0x0c] * temp10 - var7;\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x09;\n                                        var temp11 = keccak256(memory[0x00:0x40]);\n                                        storage[temp11] = storage[temp11] + var8;\n                                        var temp12 = memory[0x40:0x60];\n                                        memory[temp12:temp12 + 0x20] = arg0;\n                                        memory[temp12 + 0x20:temp12 + 0x20 + 0x20] = temp10;\n                                        var temp13 = memory[0x40:0x60];\n                                        log(memory[temp13:temp13 + (temp12 + 0x40) - temp13], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, msg.sender, stack[-13] & 0x02 ** 0xa0 - 0x01]);\n                                        return temp10;\n                                    } else {\n                                    label_1487:\n                                        var11 = 0x1492;\n                                        var12 = storage[0x0b];\n                                        var13 = var6;\n                                        var11 = func_19B4(var12, var13);\n                                        var temp14 = var11;\n                                        storage[0x0b] = temp14;\n                                        var12 = var4 * 0x010000000000000000;\n                                    \n                                        if (!temp14) { assert(); }\n                                    \n                                        storage[0x0c] = storage[0x0c] + var12 / var11;\n                                        var11 = storage[0x0b];\n                                        var12 = var4 * 0x010000000000000000;\n                                    \n                                        if (!var11) { assert(); }\n                                    \n                                        var temp15 = var7;\n                                        var7 = temp15 - (temp15 - var6 * (var12 / var11));\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x07;\n                                        var12 = storage[keccak256(memory[0x00:0x40])];\n                                        var11 = 0x1508;\n                                        var13 = var6;\n                                        var11 = func_19B4(var12, var13);\n                                        goto label_1508;\n                                    }\n                                } else {\n                                label_1420:\n                                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x08;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var11 = 0x1442;\n                                    var13 = var2;\n                                    var11 = func_19B4(var12, var13);\n                                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x08;\n                                    storage[keccak256(memory[0x00:0x40])] = var11;\n                                \n                                    if (storage[0x0b] <= 0x00) { goto label_14DF; }\n                                    else { goto label_1487; }\n                                }\n                            } else {\n                            label_13FB:\n                                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x07;\n                            \n                                if (storage[keccak256(memory[0x00:0x40])] < storage[0x05]) { goto label_1460; }\n                                else { goto label_1420; }\n                            }\n                        } else {\n                            var11 = storage[0x0b];\n                            var12 = 0x13bd;\n                            var13 = var6;\n                            var14 = var11;\n                            var12 = func_19B4(var13, var14);\n                            var11 = var12 > var11;\n                            goto label_13BF;\n                        }\n                    } else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_127D:\n                var11 = 0x6f05b59d3b200000;\n                var12 = var9;\n                var13 = 0x128f;\n                var13 = totalEthereumBalance();\n                var11 = var13 - var12 <= var11;\n                goto label_1293;\n            }\n        } else {\n            storage[0x0e] = storage[0x0e] & ~0xff;\n            var11 = storage[0x0e] & 0xff;\n        \n            if (!var11) { goto label_1293; }\n            else { goto label_127D; }\n        }\n    }\n    \n    function func_1375(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1234(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1867(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1899(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_18B0(var arg0) returns (var r0) {\n        var temp0 = storage[0x0b];\n        var var0 = 0x00;\n        var var1 = 0x204fce5e3e25026110000000;\n        var var3 = temp0;\n        var var2 = var0;\n        var var4 = 0x3b9aca00;\n        var var5 = 0x192f;\n        var var6 = 0x1929;\n        var var7 = var3 * 0x0f0bdc21abb48db201e86d4000000000 + var3 ** 0x02 * 0x0de0b6b3a7640000 + arg0 * 0x59aedfc10d7279c5eed1401645400000000000 + 0x04140c78940f6a24fdffc78873d4490d2100000000000000;\n        var6 = func_19C3(var7);\n        var5 = func_1929(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_1929(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1234(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1942(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x0b] + 0x0de0b6b3a7640000;\n        var var4 = 0x0de0b6b3a7640000;\n        var var3 = var0;\n        var var5 = 0x1999;\n        var var6 = temp0 * (var2 / var4 * 0x3b9aca00 + 0x0218711a00);\n        var var7 = 0x02;\n        var var8 = (var1 ** var7 - temp0 + ~0x0de0b6b3a763ffff) / var4 * 0x3b9aca00;\n    \n        if (!var7) { assert(); }\n    \n        var5 = func_1993(var6, var7, var8);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_1993(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1234(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_19B4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_19C3(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_0BB8:\n            return var0;\n        } else {\n        label_19D5:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_0BB8; }\n            else { goto label_19D5; }\n        }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_01AA:\n        \n            if (tx.gasprice > 0x02540be400) { revert(memory[0x00:0x00]); }\n        \n            var var0 = 0x01c7;\n            var var1 = msg.value;\n            var var2 = 0x00;\n            var0 = buy(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = dividendsOf(var2);\n            \n            label_01E9:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020e;\n                var2 = name();\n            \n            label_020E:\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                memory[var3:var3 + 0x20] = 0x20;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var6 = temp4 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_024A:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_023B:\n                    var temp10 = var11;\n                    memory[temp10 + var9:temp10 + var9 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_024A; }\n                    else { goto label_023B; }\n                }\n            } else if (var0 == 0x0f34dc16) {\n                // Dispatch table entry for canAcceptTokens_(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = canAcceptTokens_(var2);\n            \n            label_02A4:\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = !!var2;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x00;\n                var4 = var3;\n                var5 = var4;\n                var6 = var5;\n                var7 = var6;\n                var8 = 0x07ea;\n                var9 = 0x07e3;\n                var10 = var2;\n                var11 = 0x14;\n                var9 = func_1867(var10, var11);\n                var8 = func_07E3(var9);\n                var4 = var8;\n                var8 = 0x07fa;\n                var9 = 0x07e3;\n                var10 = var2;\n                var11 = 0x05;\n                var9 = func_1867(var10, var11);\n                var8 = func_07E3(var9);\n                var5 = var8;\n                var8 = 0x080f;\n                var9 = 0x0809;\n                var10 = var2;\n                var11 = var4;\n                var9 = func_1234(var10, var11);\n                var8 = func_0809(var5, var9);\n                var temp13 = var8;\n                var6 = temp13;\n                var8 = 0x081a;\n                var9 = var6;\n                var8 = func_18B0(var9);\n                var1 = var8;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = totalSupply();\n                goto label_01E9;\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                goto label_01E9;\n            } else if (var0 == 0x27defa1f) {\n                // Dispatch table entry for onlyAmbassadors()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a4;\n                var2 = onlyAmbassadors();\n                goto label_02A4;\n            } else if (var0 == 0x294205b4) {\n                // Dispatch table entry for setCanAcceptTokens(address,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = !!msg.data[0x24:0x44];\n                setCanAcceptTokens(var2, var3);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0343;\n                var2 = decimals();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0xff;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4000aea0) {\n                // Dispatch table entry for transferAndCall(address,uint256,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var temp16 = msg.data[0x44:0x64];\n                var4 = temp16 + 0x24;\n                var5 = msg.data[temp16 + 0x04:temp16 + 0x04 + 0x20];\n                var6 = 0x00;\n                var7 = var6;\n            \n                if (!(var2 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0f;\n            \n                if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != 0x01) { revert(memory[0x00:0x00]); }\n            \n                var8 = 0x09fc;\n                var9 = var2;\n                var10 = var3;\n            \n            label_0DE4:\n                var11 = 0x00;\n                var var12 = var11;\n                var var13 = 0x00;\n                var var14 = 0x0df1;\n                var14 = myTokens();\n            \n                if (var14 <= var13) { revert(memory[0x00:0x00]); }\n            \n                var12 = msg.sender;\n                memory[0x00:0x20] = var12 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x07;\n            \n                if (var10 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n            \n                var13 = 0x00;\n                var14 = 0x0e2e;\n                var var15 = 0x01;\n                var14 = myDividends(var15);\n            \n                if (var14 <= var13) {\n                label_0E3C:\n                    memory[0x00:0x20] = var12 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x07;\n                    var13 = 0x0e5f;\n                    var14 = storage[keccak256(memory[0x00:0x40])];\n                    var15 = var10;\n                    var13 = func_1234(var14, var15);\n                    var temp17 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = var12 & temp17;\n                    memory[0x20:0x40] = 0x07;\n                    storage[keccak256(memory[0x00:0x40])] = var13;\n                    memory[0x00:0x20] = var9 & temp17;\n                    var14 = storage[keccak256(memory[0x00:0x40])];\n                    var13 = 0x0e8e;\n                    var15 = var10;\n                    var13 = func_19B4(var14, var15);\n                    var temp18 = 0x02 ** 0xa0 - 0x01;\n                    var temp19 = temp18 & var9;\n                    memory[0x00:0x20] = temp19;\n                    memory[0x20:0x40] = 0x07;\n                    storage[keccak256(memory[0x00:0x40])] = var13;\n                    var temp20 = var12 & temp18;\n                    memory[0x00:0x20] = temp20;\n                    memory[0x20:0x40] = 0x09;\n                    var temp21 = keccak256(memory[0x00:0x40]);\n                    var temp22 = var10;\n                    storage[temp21] = storage[temp21] - temp22 * storage[0x0c];\n                    memory[0x00:0x20] = temp19;\n                    var temp23 = keccak256(memory[0x00:0x40]);\n                    storage[temp23] = storage[temp23] + temp22 * storage[0x0c];\n                    var temp24 = memory[0x40:0x60];\n                    memory[temp24:temp24 + 0x20] = temp22;\n                    var temp25 = memory[0x40:0x60];\n                    log(memory[temp25:temp25 + (temp24 + 0x20) - temp25], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-2] & 0x02 ** 0xa0 - 0x01, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n                    var11 = 0x01;\n                    var8 = var11;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var13 = 0x0e3c;\n                    withdraw();\n                    goto label_0E3C;\n                }\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = sellPrice();\n                goto label_01E9;\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = stakingRequirement();\n                goto label_01E9;\n            } else if (var0 == 0x5e079aa5) {\n                // Dispatch table entry for giveEthFundAddress()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03d4;\n                var2 = giveEthFundAddress();\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0x66042e7a) {\n                // Dispatch table entry for etherToSendFund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = etherToSendFund();\n                goto label_01E9;\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                goto label_01E9;\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = totalEthereumBalance();\n                goto label_01E9;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_01E9;\n            } else if (var0 == 0x76be1585) {\n                // Dispatch table entry for administrators(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = administrators(var2);\n                goto label_02A4;\n            } else if (var0 == 0x7ff276bd) {\n                // Dispatch table entry for totalEthFundCollected()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = totalEthFundCollected();\n                goto label_01E9;\n            } else if (var0 == 0x8328b610) {\n                // Dispatch table entry for setStakingRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var2 = msg.data[0x04:0x24];\n                setStakingRequirement(var2);\n                stop();\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = buyPrice();\n                goto label_01E9;\n            } else if (var0 == 0x87c95058) {\n                // Dispatch table entry for setAdministrator(address,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = !!msg.data[0x24:0x44];\n                setAdministrator(var2, var3);\n                stop();\n            } else if (var0 == 0x8974372d) {\n                // Dispatch table entry for payFund()\n                var1 = 0x032e;\n                payFund();\n                stop();\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var1 = myTokens();\n                goto label_01E9;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020e;\n                var2 = symbol();\n                goto label_020E;\n            } else if (var0 == 0xa4d55686) {\n                // Dispatch table entry for totalEthFundRecieved()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e9;\n                var2 = totalEthFundRecieved();\n                goto label_01E9;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                goto label_0DE4;\n            } else if (var0 == 0xb84c8246) {\n                // Dispatch table entry for setSymbol(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var temp28 = msg.data[0x04:0x24];\n                var temp29 = msg.data[temp28 + 0x04:temp28 + 0x04 + 0x20];\n                var temp30 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp30 + (temp29 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp30:temp30 + 0x20] = temp29;\n                memory[temp30 + 0x20:temp30 + 0x20 + temp29] = msg.data[temp28 + 0x24:temp28 + 0x24 + temp29];\n                var2 = temp30;\n                var3 = msg.sender;\n                memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0d;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var temp31 = var2;\n                var4 = 0x0f59;\n                var5 = 0x02;\n                var6 = temp31 + 0x20;\n                var7 = memory[temp31:temp31 + 0x20];\n            \n            label_19F8:\n                var temp32 = var5;\n                var temp33 = storage[temp32];\n                memory[0x00:0x20] = temp32;\n                var8 = keccak256(memory[0x00:0x20]);\n                var temp34 = var6;\n                var6 = var8 + ((!(temp33 & 0x01) * 0x0100 - 0x01 & temp33) / 0x02 + 0x1f) / 0x20;\n                var9 = temp34;\n            \n                if (0x1f < var7) {\n                    var temp35 = var7;\n                    storage[var5] = temp35 + temp35 + 0x01;\n                \n                    if (!temp35) {\n                    label_1A66:\n                        var temp36 = var6;\n                        var6 = 0x0d6f;\n                        var7 = 0x0828;\n                        var temp37 = var8;\n                        var9 = temp37;\n                        var8 = temp36;\n                    \n                        if (var8 <= var9) {\n                            var7 = func_0D6F(var8, var9);\n                            var6 = func_0828(var7);\n                            var4 = func_0D6F(var5, var6);\n                            // Error: Could not resolve method call return address!\n                        } else {\n                        label_1A7B:\n                            var temp38 = var9;\n                            storage[temp38] = 0x00;\n                            var9 = temp38 + 0x01;\n                        \n                            if (var8 > var9) { goto label_1A7B; }\n                        \n                            var7 = func_0D6F(var8, var9);\n                            // Error: Could not resolve method call return address!\n                        }\n                    } else {\n                        var temp39 = var7;\n                        var temp40 = var9;\n                        var7 = temp40;\n                        var9 = var7 + temp39;\n                    \n                        if (var9 <= var7) { goto label_1A66; }\n                    \n                    label_1A54:\n                        var temp41 = var7;\n                        var temp42 = var8;\n                        storage[temp42] = memory[temp41:temp41 + 0x20];\n                        var7 = temp41 + 0x20;\n                        var9 = var9;\n                        var8 = temp42 + 0x01;\n                    \n                        if (var9 <= var7) { goto label_1A66; }\n                        else { goto label_1A54; }\n                    }\n                } else {\n                    var temp43 = var7;\n                    storage[var5] = temp43 + temp43 | (memory[var9:var9 + 0x20] & ~0xff);\n                    goto label_1A66;\n                }\n            } else if (var0 == 0xc47f0027) {\n                // Dispatch table entry for setName(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var temp44 = msg.data[0x04:0x24];\n                var temp45 = msg.data[temp44 + 0x04:temp44 + 0x04 + 0x20];\n                var temp46 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp46 + (temp45 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp46:temp46 + 0x20] = temp45;\n                memory[temp46 + 0x20:temp46 + 0x20 + temp45] = msg.data[temp44 + 0x24:temp44 + 0x24 + temp45];\n                var2 = temp46;\n                var3 = msg.sender;\n                memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0d;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var temp47 = var2;\n                var4 = 0x0f59;\n                var5 = 0x01;\n                var6 = temp47 + 0x20;\n                var7 = memory[temp47:temp47 + 0x20];\n                goto label_19F8;\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x01e9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x00;\n            \n                if (tx.gasprice > 0x0ba43b7400) { revert(memory[0x00:0x00]); }\n            \n                var4 = 0x0bb8;\n                var5 = msg.value;\n                var6 = var2;\n                var4 = buy(var5, var6);\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032e;\n                reinvest();\n                stop();\n            } else { goto label_01AA; }\n        }\n    }\n    \n    function buy(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (msg.sender != tx.origin) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n    \n        if (var1 <= 0x1bc16d674ec80000) {\n        label_0694:\n            var var3 = 0x069e;\n            var var4 = var1;\n            var var5 = arg1;\n            var3 = func_1246(var4, var5);\n        \n            if (var2 <= 0x00) {\n            label_06D9:\n                return var0;\n            } else {\n                var temp0 = var2;\n                var temp1 = memory[0x40:0x60];\n                var temp2;\n                temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n            \n                if (temp2) { goto label_06D9; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var3 = 0x0ad78ebc5ac6200000;\n            var4 = 0x0677;\n            var5 = address(this).balance;\n            var var6 = var1;\n            var4 = func_1234(var5, var6);\n        \n            if (var4 > var3) { goto label_0694; }\n        \n            var1 = 0x1bc16d674ec80000;\n            var3 = 0x0691;\n            var4 = arg0;\n            var5 = var1;\n            var3 = func_1234(var4, var5);\n            var2 = var3;\n            goto label_0694;\n        }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x0c] - temp0 / 0x010000000000000000;\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_07B2:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_07A9; }\n        \n        label_0795:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0795; }\n        \n        label_07A9:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_07B2;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_07B2;\n        }\n    }\n    \n    function canAcceptTokens_(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0f;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_07E3(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_1899(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0809(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1234(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x0b]; }\n    \n    function func_0828(var arg0) returns (var r0) { return arg0; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n    \n        if (arg0 > storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        var var5 = 0x084d;\n        var var6 = arg0;\n        var5 = func_1942(var6);\n        var temp0 = var5;\n        var1 = temp0;\n        var5 = 0x085d;\n        var6 = 0x07e3;\n        var var7 = var1;\n        var var8 = 0x14;\n        var6 = func_1867(var7, var8);\n        var5 = func_07E3(var6);\n        var2 = var5;\n        var5 = 0x086d;\n        var6 = 0x07e3;\n        var7 = var1;\n        var8 = 0x05;\n        var6 = func_1867(var7, var8);\n        var5 = func_07E3(var6);\n        var3 = var5;\n        var5 = 0x081a;\n        var6 = 0x087c;\n        var7 = var1;\n        var8 = var2;\n        var6 = func_1234(var7, var8);\n        return func_087C(var3, var6);\n    }\n    \n    function func_087C(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1234(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function onlyAmbassadors() returns (var r0) { return storage[0x0e] & 0xff; }\n    \n    function setCanAcceptTokens(var arg0, var arg1) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0f;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = !!arg1 | (storage[temp0] & ~0xff);\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x08f3;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x090a;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var2;\n        storage[temp1] = temp2 * 0x010000000000000000 + storage[temp1];\n        memory[0x20:0x40] = 0x08;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var temp5 = temp2 + temp4;\n        var1 = temp5;\n        var temp6 = memory[0x40:0x60];\n        var temp7;\n        temp7, memory[temp6:temp6 + 0x00] = address(temp0).call.gas(!var1 * 0x08fc).value(var1)(memory[temp6:temp6 + memory[0x40:0x60] - temp6]);\n    \n        if (!temp7) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = var1;\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n    \n        if (storage[0x0b] != 0x00) {\n            var var5 = 0x0b0c;\n            var var6 = 0x0de0b6b3a7640000;\n            var5 = func_1942(var6);\n            var temp0 = var5;\n            var1 = temp0;\n            var5 = 0x0b1c;\n            var6 = 0x07e3;\n            var var7 = var1;\n            var var8 = 0x14;\n            var6 = func_1867(var7, var8);\n            var5 = func_07E3(var6);\n            var2 = var5;\n            var5 = 0x0b2c;\n            var6 = 0x07e3;\n            var7 = var1;\n            var8 = 0x05;\n            var6 = func_1867(var7, var8);\n            var5 = func_07E3(var6);\n            var3 = var5;\n            var5 = 0x0b3b;\n            var6 = 0x087c;\n            var7 = var1;\n            var8 = var2;\n            var6 = func_1234(var7, var8);\n            var5 = func_087C(var3, var6);\n            var4 = var5;\n            var0 = var4;\n        \n        label_0B41:\n            return var0;\n        } else {\n            var0 = 0x0218711a00;\n            goto label_0B41;\n        }\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x05]; }\n    \n    function giveEthFundAddress() returns (var r0) { return 0xd9092d94f74e6b5d408dbd3ecc88f3e5810d1e98; }\n    \n    function etherToSendFund() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b76;\n        var var2 = storage[0x04];\n        var var3 = storage[0x03];\n        return func_1234(var2, var3);\n    }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x08;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x0bb3;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x0b8c;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function totalEthFundCollected() returns (var r0) { return storage[0x04]; }\n    \n    function setStakingRequirement(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x05] = arg0;\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n    \n        if (storage[0x0b] != 0x00) {\n            var var5 = 0x0c61;\n            var var6 = 0x0de0b6b3a7640000;\n            var5 = func_1942(var6);\n            var temp0 = var5;\n            var1 = temp0;\n            var5 = 0x0c71;\n            var6 = 0x07e3;\n            var var7 = var1;\n            var var8 = 0x14;\n            var6 = func_1867(var7, var8);\n            var5 = func_07E3(var6);\n            var2 = var5;\n            var5 = 0x0c81;\n            var6 = 0x07e3;\n            var7 = var1;\n            var8 = 0x05;\n            var6 = func_1867(var7, var8);\n            var5 = func_07E3(var6);\n            var3 = var5;\n            var5 = 0x0b3b;\n            var6 = 0x0c90;\n            var7 = var1;\n            var8 = var2;\n            var6 = func_19B4(var7, var8);\n            var5 = func_0C90(var3, var6);\n            var4 = var5;\n            var0 = var4;\n        \n        label_0B41:\n            return var0;\n        } else {\n            var0 = 0x028fa6ae00;\n            goto label_0B41;\n        }\n    }\n    \n    function func_0C90(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_19B4(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0d;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = !!arg1 | (storage[temp0] & ~0xff);\n    }\n    \n    function payFund() {\n        var var0 = 0x00;\n        var var1 = 0x0cfa;\n        var var2 = storage[0x04];\n        var var3 = storage[0x03];\n        var1 = func_1234(var2, var3);\n        var0 = var1;\n    \n        if (var0 <= 0x01) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0d15;\n        var2 = storage[0x03];\n        var3 = var0;\n        var1 = func_19B4(var2, var3);\n        storage[0x03] = var1;\n        var temp0 = memory[0x40:0x60];\n        var temp1;\n        temp1, memory[temp0:temp0 + 0x00] = address(0xd9092d94f74e6b5d408dbd3ecc88f3e5810d1e98).call.gas(0x061a80).value(var0)(memory[temp0:temp0 + memory[0x40:0x60] - temp0]);\n    \n        if (temp1) {\n        label_0D5D:\n            return;\n        } else {\n            var1 = 0x0d59;\n            var2 = storage[0x03];\n            var3 = var0;\n            var1 = func_1234(var2, var3);\n            storage[0x03] = var1;\n            goto label_0D5D;\n        }\n    }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x0d6c;\n        var var3 = var1;\n        var2 = balanceOf(var3);\n        var0 = var2;\n        r0 = func_0D6F(var0, var1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0D6F(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x02;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_07B2:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_07A9; }\n        \n        label_0795:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0795; }\n        \n        label_07A9:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_07B2;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_07B2;\n        }\n    }\n    \n    function totalEthFundRecieved() returns (var r0) { return storage[0x03]; }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x0fad;\n        var8 = myTokens();\n    \n        if (var8 <= var7) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var0 = msg.sender;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var7 = 0x0fec;\n        var8 = var1;\n        var7 = func_1942(var8);\n        var temp0 = var7;\n        var2 = temp0;\n        var7 = 0x0ffc;\n        var8 = 0x07e3;\n        var var9 = var2;\n        var var10 = 0x14;\n        var8 = func_1867(var9, var10);\n        var7 = func_07E3(var8);\n        var3 = var7;\n        var7 = 0x100c;\n        var8 = 0x07e3;\n        var9 = var2;\n        var10 = 0x05;\n        var8 = func_1867(var9, var10);\n        var7 = func_07E3(var8);\n        var4 = var7;\n        var7 = 0x101b;\n        var8 = 0x0809;\n        var9 = var2;\n        var10 = var3;\n        var8 = func_1234(var9, var10);\n        var7 = func_0809(var4, var8);\n        var5 = var7;\n        var7 = 0x1029;\n        var8 = storage[0x04];\n        var9 = var4;\n        var7 = func_19B4(var8, var9);\n        storage[0x04] = var7;\n        var8 = storage[0x0b];\n        var7 = 0x1039;\n        var9 = var1;\n        var7 = func_1234(var8, var9);\n        storage[0x0b] = var7;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var7 = 0x105f;\n        var8 = storage[keccak256(memory[0x00:0x40])];\n        var9 = var1;\n        var7 = func_1234(var8, var9);\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var7;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var5 * 0x010000000000000000 + var1 * storage[0x0c];\n        storage[temp1] = storage[temp1] - temp2;\n        var6 = temp2;\n    \n        if (storage[0x0b] <= 0x00) {\n        label_10D6:\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = var1;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var5;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x40) - temp4], [0xc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139, stack[-7] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var7 = 0x10d2;\n            var8 = storage[0x0c];\n            var9 = storage[0x0b];\n            var10 = var3 * 0x010000000000000000;\n        \n            if (!var9) { assert(); }\n        \n            var7 = func_10CC(var8, var9, var10);\n            storage[0x0c] = var7;\n            goto label_10D6;\n        }\n    }\n    \n    function func_10CC(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_19B4(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_114F:\n            var var2 = 0x1157;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x114f;\n            var var3 = var1;\n            sell(var3);\n            goto label_114F;\n        }\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x1189;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x119d;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var3;\n        storage[temp0] = temp1 * 0x010000000000000000 + storage[temp0];\n        memory[0x20:0x40] = 0x08;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = storage[temp2];\n        storage[temp2] = 0x00;\n        var0 = temp1 + temp3;\n        var1 = msg.sender;\n        var3 = 0x11e9;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = func_1246(var4, var5);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_1234(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1246(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = arg0;\n        var var10 = msg.sender;\n    \n        if (block.timestamp < storage[0x00]) {\n            var var11 = storage[0x0e] & 0xff;\n        \n            if (!var11) {\n            label_1293:\n            \n                if (!var11) {\n                    storage[0x0e] = storage[0x0e] & ~0xff;\n                    var11 = 0x15db;\n                    var var12 = 0x07e3;\n                    var var13 = arg0;\n                    var var14 = 0x14;\n                    var12 = func_1867(var13, var14);\n                    var11 = func_07E3(var12);\n                    var temp0 = var11;\n                    var1 = temp0;\n                    var11 = 0x15e8;\n                    var12 = var1;\n                    var13 = 0x03;\n                    var11 = func_1899(var12, var13);\n                    var2 = var11;\n                    var11 = 0x15f8;\n                    var12 = 0x07e3;\n                    var13 = arg0;\n                    var14 = 0x05;\n                    var12 = func_1867(var13, var14);\n                    var11 = func_07E3(var12);\n                    var3 = var11;\n                    var11 = 0x1604;\n                    var12 = var1;\n                    var13 = var2;\n                    var11 = func_1234(var12, var13);\n                    var4 = var11;\n                    var11 = 0x1613;\n                    var12 = 0x1375;\n                    var13 = arg0;\n                    var14 = var1;\n                    var12 = func_1234(var13, var14);\n                    var11 = func_1375(var3, var12);\n                    var5 = var11;\n                    var11 = 0x1621;\n                    var12 = storage[0x04];\n                    var13 = var3;\n                    var11 = func_19B4(var12, var13);\n                    storage[0x04] = var11;\n                    var11 = 0x162d;\n                    var12 = var5;\n                    var11 = func_18B0(var12);\n                    var6 = var11;\n                    var7 = var4 * 0x010000000000000000;\n                    var temp1 = var6 > 0x00;\n                    var11 = temp1;\n                \n                    if (!var11) {\n                    label_1657:\n                    \n                        if (!var11) { revert(memory[0x00:0x00]); }\n                    \n                        var11 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n                    \n                        if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                            var11 = arg1 & 0x02 ** 0xa0 - 0x01 != msg.sender;\n                        \n                            if (!var11) { goto label_16B2; }\n                            else { goto label_1693; }\n                        } else if (!var11) {\n                        label_16B2:\n                        \n                            if (!var11) {\n                            label_16F8:\n                                var11 = 0x1702;\n                                var12 = var4;\n                                var13 = var2;\n                                var11 = func_19B4(var12, var13);\n                                var4 = var11;\n                                var7 = var4 * 0x010000000000000000;\n                            \n                                if (storage[0x0b] <= 0x00) {\n                                label_1777:\n                                    storage[0x0b] = var6;\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x07;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var11 = 0x17a0;\n                                    var13 = var6;\n                                    var11 = func_19B4(var12, var13);\n                                \n                                label_17A0:\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x07;\n                                    storage[keccak256(memory[0x00:0x40])] = var11;\n                                    var temp2 = var6;\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x09;\n                                    var temp3 = keccak256(memory[0x00:0x40]);\n                                    storage[temp3] = storage[temp3] + (storage[0x0c] * temp2 - var7);\n                                    var temp4 = memory[0x40:0x60];\n                                    memory[temp4:temp4 + 0x20] = arg0;\n                                    memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp2;\n                                    var temp5 = memory[0x40:0x60];\n                                    log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, msg.sender, stack[-13] & 0x02 ** 0xa0 - 0x01]);\n                                    return temp2;\n                                } else {\n                                label_171F:\n                                    var11 = 0x172a;\n                                    var12 = storage[0x0b];\n                                    var13 = var6;\n                                    var11 = func_19B4(var12, var13);\n                                    var temp6 = var11;\n                                    storage[0x0b] = temp6;\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!temp6) { assert(); }\n                                \n                                    storage[0x0c] = storage[0x0c] + var12 / var11;\n                                    var11 = storage[0x0b];\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!var11) { assert(); }\n                                \n                                    var temp7 = var7;\n                                    var7 = temp7 - (temp7 - var6 * (var12 / var11));\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x07;\n                                    var11 = 0x17a0;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = var6;\n                                    var11 = func_19B4(var12, var13);\n                                    goto label_17A0;\n                                }\n                            } else {\n                            label_16B8:\n                                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x08;\n                                var11 = 0x16da;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var13 = var2;\n                                var11 = func_19B4(var12, var13);\n                                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x08;\n                                storage[keccak256(memory[0x00:0x40])] = var11;\n                            \n                                if (storage[0x0b] <= 0x00) { goto label_1777; }\n                                else { goto label_171F; }\n                            }\n                        } else {\n                        label_1693:\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x07;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] < storage[0x05]) { goto label_16F8; }\n                            else { goto label_16B8; }\n                        }\n                    } else {\n                        var11 = storage[0x0b];\n                        var12 = 0x1655;\n                        var13 = var6;\n                        var14 = var11;\n                        var12 = func_19B4(var13, var14);\n                        var11 = var12 > var11;\n                        goto label_1657;\n                    }\n                } else {\n                    memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x06;\n                    var11 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == 0x01;\n                \n                    if (var11) {\n                        memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x0a;\n                    \n                        if (var9 + storage[keccak256(memory[0x00:0x40])] <= 0x6f05b59d3b200000) { goto label_12F3; }\n                        else { revert(memory[0x00:0x00]); }\n                    } else if (var11) {\n                    label_12F3:\n                        memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x0a;\n                        var12 = storage[keccak256(memory[0x00:0x40])];\n                        var11 = 0x1316;\n                        var13 = var9;\n                        var11 = func_19B4(var12, var13);\n                        memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x0a;\n                        storage[keccak256(memory[0x00:0x40])] = var11;\n                        var11 = 0x133d;\n                        var12 = 0x07e3;\n                        var13 = arg0;\n                        var14 = 0x14;\n                        var12 = func_1867(var13, var14);\n                        var11 = func_07E3(var12);\n                        var temp8 = var11;\n                        var1 = temp8;\n                        var11 = 0x134a;\n                        var12 = var1;\n                        var13 = 0x03;\n                        var11 = func_1899(var12, var13);\n                        var2 = var11;\n                        var11 = 0x135a;\n                        var12 = 0x07e3;\n                        var13 = arg0;\n                        var14 = 0x05;\n                        var12 = func_1867(var13, var14);\n                        var11 = func_07E3(var12);\n                        var3 = var11;\n                        var11 = 0x1366;\n                        var12 = var1;\n                        var13 = var2;\n                        var11 = func_1234(var12, var13);\n                        var4 = var11;\n                        var11 = 0x137b;\n                        var12 = 0x1375;\n                        var13 = arg0;\n                        var14 = var1;\n                        var12 = func_1234(var13, var14);\n                        var11 = func_1375(var3, var12);\n                        var5 = var11;\n                        var11 = 0x1389;\n                        var12 = storage[0x04];\n                        var13 = var3;\n                        var11 = func_19B4(var12, var13);\n                        storage[0x04] = var11;\n                        var11 = 0x1395;\n                        var12 = var5;\n                        var11 = func_18B0(var12);\n                        var6 = var11;\n                        var7 = var4 * 0x010000000000000000;\n                        var temp9 = var6 > 0x00;\n                        var11 = temp9;\n                    \n                        if (!var11) {\n                        label_13BF:\n                        \n                            if (!var11) { revert(memory[0x00:0x00]); }\n                        \n                            var11 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n                        \n                            if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                                var11 = arg1 & 0x02 ** 0xa0 - 0x01 != msg.sender;\n                            \n                                if (!var11) { goto label_141A; }\n                                else { goto label_13FB; }\n                            } else if (!var11) {\n                            label_141A:\n                            \n                                if (!var11) {\n                                label_1460:\n                                    var11 = 0x146a;\n                                    var12 = var4;\n                                    var13 = var2;\n                                    var11 = func_19B4(var12, var13);\n                                    var4 = var11;\n                                    var7 = var4 * 0x010000000000000000;\n                                \n                                    if (storage[0x0b] <= 0x00) {\n                                    label_14DF:\n                                        storage[0x0b] = var6;\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x07;\n                                        var12 = storage[keccak256(memory[0x00:0x40])];\n                                        var11 = 0x1508;\n                                        var13 = var6;\n                                        var11 = func_19B4(var12, var13);\n                                    \n                                    label_1508:\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x07;\n                                        storage[keccak256(memory[0x00:0x40])] = var11;\n                                        var temp10 = var6;\n                                        var8 = storage[0x0c] * temp10 - var7;\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x09;\n                                        var temp11 = keccak256(memory[0x00:0x40]);\n                                        storage[temp11] = storage[temp11] + var8;\n                                        var temp12 = memory[0x40:0x60];\n                                        memory[temp12:temp12 + 0x20] = arg0;\n                                        memory[temp12 + 0x20:temp12 + 0x20 + 0x20] = temp10;\n                                        var temp13 = memory[0x40:0x60];\n                                        log(memory[temp13:temp13 + (temp12 + 0x40) - temp13], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, msg.sender, stack[-13] & 0x02 ** 0xa0 - 0x01]);\n                                        return temp10;\n                                    } else {\n                                    label_1487:\n                                        var11 = 0x1492;\n                                        var12 = storage[0x0b];\n                                        var13 = var6;\n                                        var11 = func_19B4(var12, var13);\n                                        var temp14 = var11;\n                                        storage[0x0b] = temp14;\n                                        var12 = var4 * 0x010000000000000000;\n                                    \n                                        if (!temp14) { assert(); }\n                                    \n                                        storage[0x0c] = storage[0x0c] + var12 / var11;\n                                        var11 = storage[0x0b];\n                                        var12 = var4 * 0x010000000000000000;\n                                    \n                                        if (!var11) { assert(); }\n                                    \n                                        var temp15 = var7;\n                                        var7 = temp15 - (temp15 - var6 * (var12 / var11));\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x07;\n                                        var12 = storage[keccak256(memory[0x00:0x40])];\n                                        var11 = 0x1508;\n                                        var13 = var6;\n                                        var11 = func_19B4(var12, var13);\n                                        goto label_1508;\n                                    }\n                                } else {\n                                label_1420:\n                                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x08;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var11 = 0x1442;\n                                    var13 = var2;\n                                    var11 = func_19B4(var12, var13);\n                                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x08;\n                                    storage[keccak256(memory[0x00:0x40])] = var11;\n                                \n                                    if (storage[0x0b] <= 0x00) { goto label_14DF; }\n                                    else { goto label_1487; }\n                                }\n                            } else {\n                            label_13FB:\n                                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x07;\n                            \n                                if (storage[keccak256(memory[0x00:0x40])] < storage[0x05]) { goto label_1460; }\n                                else { goto label_1420; }\n                            }\n                        } else {\n                            var11 = storage[0x0b];\n                            var12 = 0x13bd;\n                            var13 = var6;\n                            var14 = var11;\n                            var12 = func_19B4(var13, var14);\n                            var11 = var12 > var11;\n                            goto label_13BF;\n                        }\n                    } else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_127D:\n                var11 = 0x6f05b59d3b200000;\n                var12 = var9;\n                var13 = 0x128f;\n                var13 = totalEthereumBalance();\n                var11 = var13 - var12 <= var11;\n                goto label_1293;\n            }\n        } else {\n            storage[0x0e] = storage[0x0e] & ~0xff;\n            var11 = storage[0x0e] & 0xff;\n        \n            if (!var11) { goto label_1293; }\n            else { goto label_127D; }\n        }\n    }\n    \n    function func_1375(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1234(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1867(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1899(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_18B0(var arg0) returns (var r0) {\n        var temp0 = storage[0x0b];\n        var var0 = 0x00;\n        var var1 = 0x204fce5e3e25026110000000;\n        var var3 = temp0;\n        var var2 = var0;\n        var var4 = 0x3b9aca00;\n        var var5 = 0x192f;\n        var var6 = 0x1929;\n        var var7 = var3 * 0x0f0bdc21abb48db201e86d4000000000 + var3 ** 0x02 * 0x0de0b6b3a7640000 + arg0 * 0x59aedfc10d7279c5eed1401645400000000000 + 0x04140c78940f6a24fdffc78873d4490d2100000000000000;\n        var6 = func_19C3(var7);\n        var5 = func_1929(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_1929(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1234(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1942(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x0b] + 0x0de0b6b3a7640000;\n        var var4 = 0x0de0b6b3a7640000;\n        var var3 = var0;\n        var var5 = 0x1999;\n        var var6 = temp0 * (var2 / var4 * 0x3b9aca00 + 0x0218711a00);\n        var var7 = 0x02;\n        var var8 = (var1 ** var7 - temp0 + ~0x0de0b6b3a763ffff) / var4 * 0x3b9aca00;\n    \n        if (!var7) { assert(); }\n    \n        var5 = func_1993(var6, var7, var8);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_1993(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1234(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_19B4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_19C3(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_0BB8:\n            return var0;\n        } else {\n        label_19D5:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_0BB8; }\n            else { goto label_19D5; }\n        }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 49.27842140197754,
	"usage": {
		"completion_tokens": 621,
		"prompt_tokens": 19277,
		"total_tokens": 19898
	}
}