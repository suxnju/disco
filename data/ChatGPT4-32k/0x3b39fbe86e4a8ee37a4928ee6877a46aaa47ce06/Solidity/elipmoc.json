{
	"address": "0x3b39fbe86e4a8ee37a4928ee6877a46aaa47ce06",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The decompiled code you provided seems to be pseudo-code and is not a direct representation of Solidity code. To write a Solidity contract, we would need the actual business logic and requirements. However, I can write a basic contract structure in Solidity that uses some of the elements found in your decompiled code.\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    struct User {\n        uint256 reinvest;\n        uint256 referralBalance;\n        uint256 repayBalance;\n        uint256 mayPassRepay;\n    }\n\n    mapping(address => User) private _users;\n    uint256 private _dividendsOf;\n    uint8 private _saleOpen;\n    uint256 private _fund;\n    address private _admin;\n\n    event OnRepayAddressAdded(address indexed user, uint256 timestamp);\n    // Other events...\n\n    constructor() {\n        _admin = msg.sender;\n    }\n\n    function reinvest() public {\n        require(_users[msg.sender].reinvest > 0, \"Insufficient funds for reinvestment\");\n        // additional logic...\n    }\n\n    function fallBack() public payable {\n        require(msg.value >= 1 ether, \"Minimum deposit of 1 ETH is allowed.\");\n        require(_saleOpen == 1, \"Sales stopped for the moment.\");\n        // additional logic...\n    }\n\n    function withdraw() public {\n        // additional logic...\n    }\n\n    function allowPassRepay(address user) public {\n        require(msg.sender == _admin, \"Only admin can allow repay\");\n        _users[user].mayPassRepay = 1;\n        emit OnRepayAddressAdded(user, block.timestamp);\n    }\n\n    function denyPassRepay(address user) public {\n        require(msg.sender == _admin, \"Only admin can deny repay\");\n        _users[user].mayPassRepay = 0;\n        // Emit event...\n    }\n\n    function saleStart() public {\n        require(msg.sender == _admin, \"Only admin can start the sale\");\n        _saleOpen = 1;\n        // Emit event...\n    }\n\n    function saleStop() public {\n        require(msg.sender == _admin, \"Only admin can stop the sale\");\n        _saleOpen = 0;\n        // Emit event...\n    }\n\n    // More functions...\n}\n```\n\nPlease note that this is a basic structure and may need to be modified according to the specific requirements of the contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701458066,
	"id": "chatcmpl-8R3FyQC1x9mYOgaz8uOHy7O0ndoXv",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 09:15 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _stakingRequirement; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _exit; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _referralBalance_; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _reinvest; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _repayBalance_; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _mayPassRepay; // STORAGE[0x8]\nuint256 _fund; // STORAGE[0x9]\nuint256 _dividendsOf; // STORAGE[0xa]\nuint8 _saleOpen; // STORAGE[0xb] bytes 0 to 0\naddress _admin; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nOnRepayAddressAdded(address, uint256);\nOnInterestPassed(address, uint256, uint256, uint256, uint256);\nOnWithdraw(address, uint256, uint256);\nOnSaleStop(uint256);\nOnGotRepay(address, uint256, uint256);\nOnRepayPassed(address, address, uint256, uint256);\nOnSaleStart(uint256);\nOnFunded(address, uint256, uint256, uint256);\nOnRepayAddressRemoved(address, uint256);\n\nfunction fallback() public payable { \n    require(msg.value >= 0xde0b6b3a7640000, 'Minimum deposit of 1 ETH is allowed.');\n    require(_saleOpen, 'Sales stopped for the moment.');\n    v0 = 0xa92(0, 0, 0, msg.value);\n}\n\nfunction 0x181b() private { \n    v0 = 0x1a06(1);\n    require(v0 > 0);\n    v1 = 0x1a06(0);\n    _reinvest[msg.sender] = _reinvest[msg.sender] + (v1 << 64);\n    _reinvest[msg.sender] = 0;\n    v2 = msg.sender.call().value(v1 + _reinvest[msg.sender]).gas(!(v1 + _reinvest[msg.sender]) * 2300);\n    require(v2); // checks call status, propagates error data on error\n    emit OnWithdraw(msg.sender, v1 + _reinvest[msg.sender], block.timestamp);\n    return ;\n}\n\nfunction 0x1a06(uint256 varg0) private { \n    if (varg0) {\n        v0 = v1 = (_dividendsOf * _reinvest[msg.sender] - _reinvest[msg.sender] >> 64) + _referralBalance_[msg.sender];\n    } else {\n        v0 = _dividendsOf * _reinvest[msg.sender] - _reinvest[msg.sender] >> 64;\n    }\n    return v0;\n}\n\nfunction 0x1b6b() private { \n    require(_repayBalance_[msg.sender] > 0);\n    _repayBalance_[msg.sender] = 0;\n    _exit[msg.sender] = 0;\n    _fund = _fund - _exit[msg.sender];\n    v0 = msg.sender.call().value(_repayBalance_[msg.sender]).gas(!_repayBalance_[msg.sender] * 2300);\n    require(v0); // checks call status, propagates error data on error\n    emit OnGotRepay(msg.sender, _repayBalance_[msg.sender], block.timestamp);\n    return ;\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _dividendsOf * _reinvest[varg0] - _reinvest[varg0] >> 64;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction allowPassRepay(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _admin);\n    _mayPassRepay[varg0] = 0x1 | ~0xff & _mayPassRepay[varg0];\n    emit OnRepayAddressAdded(varg0, block.timestamp);\n}\n\nfunction ethereumToTokens_(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return varg0 * 0xde0b6b3a7640000 / 0x38d7ea4c68000;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction passInterest(address varg0, uint256 varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(0xff & _mayPassRepay[msg.sender], 'Not allowed to pass interest from your address.');\n    require(msg.value > 0);\n    _referralBalance_[varg0] = _referralBalance_[varg0] + msg.value;\n    emit OnInterestPassed(varg0, msg.value, varg1, varg2, block.timestamp);\n}\n\nfunction withdraw() public nonPayable { \n    0x181b();\n}\n\nfunction mayPassRepay(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _mayPassRepay[varg0];\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction repayBalance_(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _repayBalance_[varg0];\n}\n\nfunction myDividends(bool varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (varg0) {\n        v0 = v1 = (_dividendsOf * _reinvest[msg.sender] - _reinvest[msg.sender] >> 64) + _referralBalance_[msg.sender];\n    } else {\n        v0 = _dividendsOf * _reinvest[msg.sender] - _reinvest[msg.sender] >> 64;\n    }\n    return v0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _exit[varg0];\n}\n\nfunction saleStop() public nonPayable { \n    require(msg.sender == _admin);\n    _saleOpen = 0;\n    emit OnSaleStop(block.timestamp);\n}\n\nfunction getRepay() public nonPayable { \n    0x1b6b();\n}\n\nfunction myTokens() public nonPayable { \n    return _exit[msg.sender];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy(address varg0, address varg1, address varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(msg.value >= 0xde0b6b3a7640000, 'Minimum deposit of 1 ETH is allowed.');\n    require(_saleOpen, 'Sales stopped for the moment.');\n    v0 = 0xa92(varg2, varg1, varg0, msg.value);\n    return v0;\n}\n\nfunction saleOpen() public nonPayable { \n    return _saleOpen;\n}\n\nfunction passRepay(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(0xff & _mayPassRepay[msg.sender], 'Not allowed to pass repay from your address.');\n    require(msg.value > 0);\n    _repayBalance_[varg0] = _repayBalance_[varg0] + msg.value;\n    emit OnRepayPassed(varg0, msg.sender, msg.value, block.timestamp);\n}\n\nfunction saleStart() public nonPayable { \n    require(msg.sender == _admin);\n    _saleOpen = 1;\n    emit OnSaleStart(block.timestamp);\n}\n\nfunction fund() public payable { \n    assert(_fund);\n    _dividendsOf = _dividendsOf + (msg.value << 64) / _fund;\n    emit OnFunded(msg.sender, msg.value, (msg.value << 64) / _fund, block.timestamp);\n}\n\nfunction 0xb96ec64a(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    if (varg1) {\n        v0 = v1 = (_dividendsOf * _reinvest[varg0] - _reinvest[varg0] >> 64) + _referralBalance_[varg0];\n    } else {\n        v0 = _dividendsOf * _reinvest[varg0] - _reinvest[varg0] >> 64;\n    }\n    return v0;\n}\n\nfunction tokensToEthereum_(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return varg0 * 0xde0b6b3a7640000;\n}\n\nfunction referralBalance_(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _referralBalance_[varg0];\n}\n\nfunction denyPassRepay(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _admin);\n    _mayPassRepay[varg0] = 0x0 | ~0xff & _mayPassRepay[varg0];\n    emit OnRepayAddressRemoved(varg0, block.timestamp);\n}\n\nfunction exit() public nonPayable { \n    if (_exit[msg.sender] > 0) {\n        0x1b6b();\n    }\n    0x181b();\n}\n\nfunction admin() public nonPayable { \n    return _admin;\n}\n\nfunction reinvest() public nonPayable { \n    v0 = 0x1a06(1);\n    require(v0 > 0);\n    v1 = 0x1a06(0);\n    _reinvest[msg.sender] = _reinvest[msg.sender] + (v1 << 64);\n    _reinvest[msg.sender] = 0;\n    v2 = 0xa92(0, 0, 0, v1 + _reinvest[msg.sender]);\n    emit 0xd398a8ad9cdaf67ab73451a8866398e450f86cf0110476d6f9433deb6ce73e5a(msg.sender, v1 + _reinvest[msg.sender], v2, block.timestamp);\n}\n\nfunction 0xa92(uint256 varg0, uint256 varg1, uint256 varg2, uint256 varg3) private { \n    MEM[(MEM[64]) len 160] = this.code[this.code.size len 160];\n    v0 = varg3 * 10 / 100;\n    MEM[32 + MEM[64]] = 0;\n    MEM[64 + MEM[64]] = 0;\n    MEM[96 + MEM[64]] = 0;\n    MEM[128 + MEM[64]] = 0;\n    assert(10);\n    assert(10);\n    assert(10);\n    assert(10);\n    v1 = v0 - (v0 << 2) / 10 - (v0 << 1) / 10 - (v0 << 1) / 10 - v0 / 10;\n    v2 = varg3 * 0xde0b6b3a7640000 / 0x38d7ea4c68000;\n    v3 = v4 = v1 << 64;\n    require(v2 > 0);\n    v5 = v6 = address(varg2) != 0;\n    if (v6) {\n        v7 = address(varg2);\n        v5 = v8 = _exit[v7] * 0x38d7ea4c68000 >= _stakingRequirement;\n    }\n    if (!v5) {\n        _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] = _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] + (v0 << 2) / 10;\n        varg2 = v9 = 0;\n    } else {\n        v10 = address(varg2);\n        _referralBalance_[v10] = _referralBalance_[v10] + (v0 << 2) / 10;\n    }\n    v11 = v12 = address(varg1) != 0;\n    if (v12) {\n        v13 = address(varg1);\n        v11 = v14 = _exit[v13] * 0x38d7ea4c68000 >= _stakingRequirement;\n    }\n    if (!v11) {\n        _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] = _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] + (v0 << 1) / 10;\n        varg1 = v15 = 0;\n    } else {\n        v16 = address(varg1);\n        _referralBalance_[v16] = _referralBalance_[v16] + (v0 << 1) / 10;\n    }\n    v17 = v18 = address(varg0) != 0;\n    if (v18) {\n        v19 = address(varg0);\n        v17 = v20 = _exit[v19] * 0x38d7ea4c68000 >= _stakingRequirement;\n    }\n    if (!v17) {\n        _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] = _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] + (v0 << 1) / 10;\n        varg0 = v21 = 0;\n    } else {\n        v22 = address(varg0);\n        _referralBalance_[v22] = _referralBalance_[v22] + (v0 << 1) / 10;\n    }\n    _referralBalance_[0xf43414abb5a05c3037910506571e4333e16a4bf4] = _referralBalance_[0xf43414abb5a05c3037910506571e4333e16a4bf4] + (varg3 - v0);\n    if (_fund <= 0) {\n        _fund = v2;\n    } else {\n        _fund = _fund + v2;\n        assert(_fund);\n        _dividendsOf = _dividendsOf + (v1 << 64) / _fund;\n        assert(_fund);\n        v3 = v23 = v4 - (v4 - v2 * ((v1 << 64) / _fund));\n    }\n    _exit[msg.sender] = _exit[msg.sender] + v2;\n    _reinvest[msg.sender] = _reinvest[msg.sender] + (_dividendsOf * v2 - v3);\n    require(0x897d6c6772b85bf25b46c6f6da454133478ea6ab.code.size);\n    v24 = 0x897d6c6772b85bf25b46c6f6da454133478ea6ab.fund().value(v0 / 10).gas(msg.gas);\n    require(v24); // checks call status, propagates error data on error\n    v25 = address(varg2);\n    v26 = address(varg1);\n    v27 = address(varg0);\n    emit 0x40a1d6f54a18383973455ecc09aed928163ec90ef70170fc54f28da79daa07cb(msg.sender, varg3, v2, v25, v26, v27, block.timestamp);\n    return v2;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x65318b == function_selector) {\n            dividendsOf(address);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x9881fb8 == function_selector) {\n            allowPassRepay(address);\n        } else if (0x2a9121c7 == function_selector) {\n            ethereumToTokens_(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x31e9b2fc == function_selector) {\n            passInterest(address,uint256,uint256);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x53f944e1 == function_selector) {\n            mayPassRepay(address);\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x5ab33fe4 == function_selector) {\n            repayBalance_(address);\n        } else if (0x688abbf7 == function_selector) {\n            myDividends(bool);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8078059c == function_selector) {\n            saleStop();\n        } else if (0x8a811be8 == function_selector) {\n            getRepay();\n        } else if (0x949e8acd == function_selector) {\n            myTokens();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x961e1c49 == function_selector) {\n            buy(address,address,address);\n        } else if (0x99288dbb == function_selector) {\n            saleOpen();\n        } else if (0x9cd460b5 == function_selector) {\n            passRepay(address);\n        } else if (0xab0bcc41 == function_selector) {\n            saleStart();\n        } else if (0xb60d4288 == function_selector) {\n            fund();\n        } else if (0xb96ec64a == function_selector) {\n            0xb96ec64a();\n        } else if (0xbf3b397b == function_selector) {\n            tokensToEthereum_(uint256);\n        } else if (0xc664f7f1 == function_selector) {\n            referralBalance_(address);\n        } else if (0xe4116246 == function_selector) {\n            denyPassRepay(address);\n        } else if (0xe9fad8ee == function_selector) {\n            exit();\n        } else if (0xf851a440 == function_selector) {\n            admin();\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 09:15 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _stakingRequirement; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _exit; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _referralBalance_; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _reinvest; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _repayBalance_; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _mayPassRepay; // STORAGE[0x8]\nuint256 _fund; // STORAGE[0x9]\nuint256 _dividendsOf; // STORAGE[0xa]\nuint8 _saleOpen; // STORAGE[0xb] bytes 0 to 0\naddress _admin; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nOnRepayAddressAdded(address, uint256);\nOnInterestPassed(address, uint256, uint256, uint256, uint256);\nOnWithdraw(address, uint256, uint256);\nOnSaleStop(uint256);\nOnGotRepay(address, uint256, uint256);\nOnRepayPassed(address, address, uint256, uint256);\nOnSaleStart(uint256);\nOnFunded(address, uint256, uint256, uint256);\nOnRepayAddressRemoved(address, uint256);\n\nfunction fallback() public payable { \n    require(msg.value >= 0xde0b6b3a7640000, 'Minimum deposit of 1 ETH is allowed.');\n    require(_saleOpen, 'Sales stopped for the moment.');\n    v0 = 0xa92(0, 0, 0, msg.value);\n}\n\nfunction 0x181b() private { \n    v0 = 0x1a06(1);\n    require(v0 > 0);\n    v1 = 0x1a06(0);\n    _reinvest[msg.sender] = _reinvest[msg.sender] + (v1 << 64);\n    _reinvest[msg.sender] = 0;\n    v2 = msg.sender.call().value(v1 + _reinvest[msg.sender]).gas(!(v1 + _reinvest[msg.sender]) * 2300);\n    require(v2); // checks call status, propagates error data on error\n    emit OnWithdraw(msg.sender, v1 + _reinvest[msg.sender], block.timestamp);\n    return ;\n}\n\nfunction 0x1a06(uint256 varg0) private { \n    if (varg0) {\n        v0 = v1 = (_dividendsOf * _reinvest[msg.sender] - _reinvest[msg.sender] >> 64) + _referralBalance_[msg.sender];\n    } else {\n        v0 = _dividendsOf * _reinvest[msg.sender] - _reinvest[msg.sender] >> 64;\n    }\n    return v0;\n}\n\nfunction 0x1b6b() private { \n    require(_repayBalance_[msg.sender] > 0);\n    _repayBalance_[msg.sender] = 0;\n    _exit[msg.sender] = 0;\n    _fund = _fund - _exit[msg.sender];\n    v0 = msg.sender.call().value(_repayBalance_[msg.sender]).gas(!_repayBalance_[msg.sender] * 2300);\n    require(v0); // checks call status, propagates error data on error\n    emit OnGotRepay(msg.sender, _repayBalance_[msg.sender], block.timestamp);\n    return ;\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _dividendsOf * _reinvest[varg0] - _reinvest[varg0] >> 64;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction allowPassRepay(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _admin);\n    _mayPassRepay[varg0] = 0x1 | ~0xff & _mayPassRepay[varg0];\n    emit OnRepayAddressAdded(varg0, block.timestamp);\n}\n\nfunction ethereumToTokens_(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return varg0 * 0xde0b6b3a7640000 / 0x38d7ea4c68000;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction passInterest(address varg0, uint256 varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(0xff & _mayPassRepay[msg.sender], 'Not allowed to pass interest from your address.');\n    require(msg.value > 0);\n    _referralBalance_[varg0] = _referralBalance_[varg0] + msg.value;\n    emit OnInterestPassed(varg0, msg.value, varg1, varg2, block.timestamp);\n}\n\nfunction withdraw() public nonPayable { \n    0x181b();\n}\n\nfunction mayPassRepay(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _mayPassRepay[varg0];\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction repayBalance_(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _repayBalance_[varg0];\n}\n\nfunction myDividends(bool varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (varg0) {\n        v0 = v1 = (_dividendsOf * _reinvest[msg.sender] - _reinvest[msg.sender] >> 64) + _referralBalance_[msg.sender];\n    } else {\n        v0 = _dividendsOf * _reinvest[msg.sender] - _reinvest[msg.sender] >> 64;\n    }\n    return v0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _exit[varg0];\n}\n\nfunction saleStop() public nonPayable { \n    require(msg.sender == _admin);\n    _saleOpen = 0;\n    emit OnSaleStop(block.timestamp);\n}\n\nfunction getRepay() public nonPayable { \n    0x1b6b();\n}\n\nfunction myTokens() public nonPayable { \n    return _exit[msg.sender];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy(address varg0, address varg1, address varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(msg.value >= 0xde0b6b3a7640000, 'Minimum deposit of 1 ETH is allowed.');\n    require(_saleOpen, 'Sales stopped for the moment.');\n    v0 = 0xa92(varg2, varg1, varg0, msg.value);\n    return v0;\n}\n\nfunction saleOpen() public nonPayable { \n    return _saleOpen;\n}\n\nfunction passRepay(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(0xff & _mayPassRepay[msg.sender], 'Not allowed to pass repay from your address.');\n    require(msg.value > 0);\n    _repayBalance_[varg0] = _repayBalance_[varg0] + msg.value;\n    emit OnRepayPassed(varg0, msg.sender, msg.value, block.timestamp);\n}\n\nfunction saleStart() public nonPayable { \n    require(msg.sender == _admin);\n    _saleOpen = 1;\n    emit OnSaleStart(block.timestamp);\n}\n\nfunction fund() public payable { \n    assert(_fund);\n    _dividendsOf = _dividendsOf + (msg.value << 64) / _fund;\n    emit OnFunded(msg.sender, msg.value, (msg.value << 64) / _fund, block.timestamp);\n}\n\nfunction 0xb96ec64a(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    if (varg1) {\n        v0 = v1 = (_dividendsOf * _reinvest[varg0] - _reinvest[varg0] >> 64) + _referralBalance_[varg0];\n    } else {\n        v0 = _dividendsOf * _reinvest[varg0] - _reinvest[varg0] >> 64;\n    }\n    return v0;\n}\n\nfunction tokensToEthereum_(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return varg0 * 0xde0b6b3a7640000;\n}\n\nfunction referralBalance_(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _referralBalance_[varg0];\n}\n\nfunction denyPassRepay(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _admin);\n    _mayPassRepay[varg0] = 0x0 | ~0xff & _mayPassRepay[varg0];\n    emit OnRepayAddressRemoved(varg0, block.timestamp);\n}\n\nfunction exit() public nonPayable { \n    if (_exit[msg.sender] > 0) {\n        0x1b6b();\n    }\n    0x181b();\n}\n\nfunction admin() public nonPayable { \n    return _admin;\n}\n\nfunction reinvest() public nonPayable { \n    v0 = 0x1a06(1);\n    require(v0 > 0);\n    v1 = 0x1a06(0);\n    _reinvest[msg.sender] = _reinvest[msg.sender] + (v1 << 64);\n    _reinvest[msg.sender] = 0;\n    v2 = 0xa92(0, 0, 0, v1 + _reinvest[msg.sender]);\n    emit 0xd398a8ad9cdaf67ab73451a8866398e450f86cf0110476d6f9433deb6ce73e5a(msg.sender, v1 + _reinvest[msg.sender], v2, block.timestamp);\n}\n\nfunction 0xa92(uint256 varg0, uint256 varg1, uint256 varg2, uint256 varg3) private { \n    MEM[(MEM[64]) len 160] = this.code[this.code.size len 160];\n    v0 = varg3 * 10 / 100;\n    MEM[32 + MEM[64]] = 0;\n    MEM[64 + MEM[64]] = 0;\n    MEM[96 + MEM[64]] = 0;\n    MEM[128 + MEM[64]] = 0;\n    assert(10);\n    assert(10);\n    assert(10);\n    assert(10);\n    v1 = v0 - (v0 << 2) / 10 - (v0 << 1) / 10 - (v0 << 1) / 10 - v0 / 10;\n    v2 = varg3 * 0xde0b6b3a7640000 / 0x38d7ea4c68000;\n    v3 = v4 = v1 << 64;\n    require(v2 > 0);\n    v5 = v6 = address(varg2) != 0;\n    if (v6) {\n        v7 = address(varg2);\n        v5 = v8 = _exit[v7] * 0x38d7ea4c68000 >= _stakingRequirement;\n    }\n    if (!v5) {\n        _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] = _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] + (v0 << 2) / 10;\n        varg2 = v9 = 0;\n    } else {\n        v10 = address(varg2);\n        _referralBalance_[v10] = _referralBalance_[v10] + (v0 << 2) / 10;\n    }\n    v11 = v12 = address(varg1) != 0;\n    if (v12) {\n        v13 = address(varg1);\n        v11 = v14 = _exit[v13] * 0x38d7ea4c68000 >= _stakingRequirement;\n    }\n    if (!v11) {\n        _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] = _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] + (v0 << 1) / 10;\n        varg1 = v15 = 0;\n    } else {\n        v16 = address(varg1);\n        _referralBalance_[v16] = _referralBalance_[v16] + (v0 << 1) / 10;\n    }\n    v17 = v18 = address(varg0) != 0;\n    if (v18) {\n        v19 = address(varg0);\n        v17 = v20 = _exit[v19] * 0x38d7ea4c68000 >= _stakingRequirement;\n    }\n    if (!v17) {\n        _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] = _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] + (v0 << 1) / 10;\n        varg0 = v21 = 0;\n    } else {\n        v22 = address(varg0);\n        _referralBalance_[v22] = _referralBalance_[v22] + (v0 << 1) / 10;\n    }\n    _referralBalance_[0xf43414abb5a05c3037910506571e4333e16a4bf4] = _referralBalance_[0xf43414abb5a05c3037910506571e4333e16a4bf4] + (varg3 - v0);\n    if (_fund <= 0) {\n        _fund = v2;\n    } else {\n        _fund = _fund + v2;\n        assert(_fund);\n        _dividendsOf = _dividendsOf + (v1 << 64) / _fund;\n        assert(_fund);\n        v3 = v23 = v4 - (v4 - v2 * ((v1 << 64) / _fund));\n    }\n    _exit[msg.sender] = _exit[msg.sender] + v2;\n    _reinvest[msg.sender] = _reinvest[msg.sender] + (_dividendsOf * v2 - v3);\n    require(0x897d6c6772b85bf25b46c6f6da454133478ea6ab.code.size);\n    v24 = 0x897d6c6772b85bf25b46c6f6da454133478ea6ab.fund().value(v0 / 10).gas(msg.gas);\n    require(v24); // checks call status, propagates error data on error\n    v25 = address(varg2);\n    v26 = address(varg1);\n    v27 = address(varg0);\n    emit 0x40a1d6f54a18383973455ecc09aed928163ec90ef70170fc54f28da79daa07cb(msg.sender, varg3, v2, v25, v26, v27, block.timestamp);\n    return v2;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x65318b == function_selector) {\n            dividendsOf(address);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x9881fb8 == function_selector) {\n            allowPassRepay(address);\n        } else if (0x2a9121c7 == function_selector) {\n            ethereumToTokens_(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x31e9b2fc == function_selector) {\n            passInterest(address,uint256,uint256);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x53f944e1 == function_selector) {\n            mayPassRepay(address);\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x5ab33fe4 == function_selector) {\n            repayBalance_(address);\n        } else if (0x688abbf7 == function_selector) {\n            myDividends(bool);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8078059c == function_selector) {\n            saleStop();\n        } else if (0x8a811be8 == function_selector) {\n            getRepay();\n        } else if (0x949e8acd == function_selector) {\n            myTokens();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x961e1c49 == function_selector) {\n            buy(address,address,address);\n        } else if (0x99288dbb == function_selector) {\n            saleOpen();\n        } else if (0x9cd460b5 == function_selector) {\n            passRepay(address);\n        } else if (0xab0bcc41 == function_selector) {\n            saleStart();\n        } else if (0xb60d4288 == function_selector) {\n            fund();\n        } else if (0xb96ec64a == function_selector) {\n            0xb96ec64a();\n        } else if (0xbf3b397b == function_selector) {\n            tokensToEthereum_(uint256);\n        } else if (0xc664f7f1 == function_selector) {\n            referralBalance_(address);\n        } else if (0xe4116246 == function_selector) {\n            denyPassRepay(address);\n        } else if (0xe9fad8ee == function_selector) {\n            exit();\n        } else if (0xf851a440 == function_selector) {\n            admin();\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 09:15 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _stakingRequirement; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _exit; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _referralBalance_; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _reinvest; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _repayBalance_; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _mayPassRepay; // STORAGE[0x8]\nuint256 _fund; // STORAGE[0x9]\nuint256 _dividendsOf; // STORAGE[0xa]\nuint8 _saleOpen; // STORAGE[0xb] bytes 0 to 0\naddress _admin; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nOnRepayAddressAdded(address, uint256);\nOnInterestPassed(address, uint256, uint256, uint256, uint256);\nOnWithdraw(address, uint256, uint256);\nOnSaleStop(uint256);\nOnGotRepay(address, uint256, uint256);\nOnRepayPassed(address, address, uint256, uint256);\nOnSaleStart(uint256);\nOnFunded(address, uint256, uint256, uint256);\nOnRepayAddressRemoved(address, uint256);\n\nfunction fallback() public payable { \n    require(msg.value >= 0xde0b6b3a7640000, 'Minimum deposit of 1 ETH is allowed.');\n    require(_saleOpen, 'Sales stopped for the moment.');\n    v0 = 0xa92(0, 0, 0, msg.value);\n}\n\nfunction 0x181b() private { \n    v0 = 0x1a06(1);\n    require(v0 > 0);\n    v1 = 0x1a06(0);\n    _reinvest[msg.sender] = _reinvest[msg.sender] + (v1 << 64);\n    _reinvest[msg.sender] = 0;\n    v2 = msg.sender.call().value(v1 + _reinvest[msg.sender]).gas(!(v1 + _reinvest[msg.sender]) * 2300);\n    require(v2); // checks call status, propagates error data on error\n    emit OnWithdraw(msg.sender, v1 + _reinvest[msg.sender], block.timestamp);\n    return ;\n}\n\nfunction 0x1a06(uint256 varg0) private { \n    if (varg0) {\n        v0 = v1 = (_dividendsOf * _reinvest[msg.sender] - _reinvest[msg.sender] >> 64) + _referralBalance_[msg.sender];\n    } else {\n        v0 = _dividendsOf * _reinvest[msg.sender] - _reinvest[msg.sender] >> 64;\n    }\n    return v0;\n}\n\nfunction 0x1b6b() private { \n    require(_repayBalance_[msg.sender] > 0);\n    _repayBalance_[msg.sender] = 0;\n    _exit[msg.sender] = 0;\n    _fund = _fund - _exit[msg.sender];\n    v0 = msg.sender.call().value(_repayBalance_[msg.sender]).gas(!_repayBalance_[msg.sender] * 2300);\n    require(v0); // checks call status, propagates error data on error\n    emit OnGotRepay(msg.sender, _repayBalance_[msg.sender], block.timestamp);\n    return ;\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _dividendsOf * _reinvest[varg0] - _reinvest[varg0] >> 64;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction allowPassRepay(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _admin);\n    _mayPassRepay[varg0] = 0x1 | ~0xff & _mayPassRepay[varg0];\n    emit OnRepayAddressAdded(varg0, block.timestamp);\n}\n\nfunction ethereumToTokens_(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return varg0 * 0xde0b6b3a7640000 / 0x38d7ea4c68000;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction passInterest(address varg0, uint256 varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(0xff & _mayPassRepay[msg.sender], 'Not allowed to pass interest from your address.');\n    require(msg.value > 0);\n    _referralBalance_[varg0] = _referralBalance_[varg0] + msg.value;\n    emit OnInterestPassed(varg0, msg.value, varg1, varg2, block.timestamp);\n}\n\nfunction withdraw() public nonPayable { \n    0x181b();\n}\n\nfunction mayPassRepay(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _mayPassRepay[varg0];\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction repayBalance_(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _repayBalance_[varg0];\n}\n\nfunction myDividends(bool varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (varg0) {\n        v0 = v1 = (_dividendsOf * _reinvest[msg.sender] - _reinvest[msg.sender] >> 64) + _referralBalance_[msg.sender];\n    } else {\n        v0 = _dividendsOf * _reinvest[msg.sender] - _reinvest[msg.sender] >> 64;\n    }\n    return v0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _exit[varg0];\n}\n\nfunction saleStop() public nonPayable { \n    require(msg.sender == _admin);\n    _saleOpen = 0;\n    emit OnSaleStop(block.timestamp);\n}\n\nfunction getRepay() public nonPayable { \n    0x1b6b();\n}\n\nfunction myTokens() public nonPayable { \n    return _exit[msg.sender];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy(address varg0, address varg1, address varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(msg.value >= 0xde0b6b3a7640000, 'Minimum deposit of 1 ETH is allowed.');\n    require(_saleOpen, 'Sales stopped for the moment.');\n    v0 = 0xa92(varg2, varg1, varg0, msg.value);\n    return v0;\n}\n\nfunction saleOpen() public nonPayable { \n    return _saleOpen;\n}\n\nfunction passRepay(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(0xff & _mayPassRepay[msg.sender], 'Not allowed to pass repay from your address.');\n    require(msg.value > 0);\n    _repayBalance_[varg0] = _repayBalance_[varg0] + msg.value;\n    emit OnRepayPassed(varg0, msg.sender, msg.value, block.timestamp);\n}\n\nfunction saleStart() public nonPayable { \n    require(msg.sender == _admin);\n    _saleOpen = 1;\n    emit OnSaleStart(block.timestamp);\n}\n\nfunction fund() public payable { \n    assert(_fund);\n    _dividendsOf = _dividendsOf + (msg.value << 64) / _fund;\n    emit OnFunded(msg.sender, msg.value, (msg.value << 64) / _fund, block.timestamp);\n}\n\nfunction 0xb96ec64a(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    if (varg1) {\n        v0 = v1 = (_dividendsOf * _reinvest[varg0] - _reinvest[varg0] >> 64) + _referralBalance_[varg0];\n    } else {\n        v0 = _dividendsOf * _reinvest[varg0] - _reinvest[varg0] >> 64;\n    }\n    return v0;\n}\n\nfunction tokensToEthereum_(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return varg0 * 0xde0b6b3a7640000;\n}\n\nfunction referralBalance_(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _referralBalance_[varg0];\n}\n\nfunction denyPassRepay(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _admin);\n    _mayPassRepay[varg0] = 0x0 | ~0xff & _mayPassRepay[varg0];\n    emit OnRepayAddressRemoved(varg0, block.timestamp);\n}\n\nfunction exit() public nonPayable { \n    if (_exit[msg.sender] > 0) {\n        0x1b6b();\n    }\n    0x181b();\n}\n\nfunction admin() public nonPayable { \n    return _admin;\n}\n\nfunction reinvest() public nonPayable { \n    v0 = 0x1a06(1);\n    require(v0 > 0);\n    v1 = 0x1a06(0);\n    _reinvest[msg.sender] = _reinvest[msg.sender] + (v1 << 64);\n    _reinvest[msg.sender] = 0;\n    v2 = 0xa92(0, 0, 0, v1 + _reinvest[msg.sender]);\n    emit 0xd398a8ad9cdaf67ab73451a8866398e450f86cf0110476d6f9433deb6ce73e5a(msg.sender, v1 + _reinvest[msg.sender], v2, block.timestamp);\n}\n\nfunction 0xa92(uint256 varg0, uint256 varg1, uint256 varg2, uint256 varg3) private { \n    MEM[(MEM[64]) len 160] = this.code[this.code.size len 160];\n    v0 = varg3 * 10 / 100;\n    MEM[32 + MEM[64]] = 0;\n    MEM[64 + MEM[64]] = 0;\n    MEM[96 + MEM[64]] = 0;\n    MEM[128 + MEM[64]] = 0;\n    assert(10);\n    assert(10);\n    assert(10);\n    assert(10);\n    v1 = v0 - (v0 << 2) / 10 - (v0 << 1) / 10 - (v0 << 1) / 10 - v0 / 10;\n    v2 = varg3 * 0xde0b6b3a7640000 / 0x38d7ea4c68000;\n    v3 = v4 = v1 << 64;\n    require(v2 > 0);\n    v5 = v6 = address(varg2) != 0;\n    if (v6) {\n        v7 = address(varg2);\n        v5 = v8 = _exit[v7] * 0x38d7ea4c68000 >= _stakingRequirement;\n    }\n    if (!v5) {\n        _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] = _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] + (v0 << 2) / 10;\n        varg2 = v9 = 0;\n    } else {\n        v10 = address(varg2);\n        _referralBalance_[v10] = _referralBalance_[v10] + (v0 << 2) / 10;\n    }\n    v11 = v12 = address(varg1) != 0;\n    if (v12) {\n        v13 = address(varg1);\n        v11 = v14 = _exit[v13] * 0x38d7ea4c68000 >= _stakingRequirement;\n    }\n    if (!v11) {\n        _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] = _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] + (v0 << 1) / 10;\n        varg1 = v15 = 0;\n    } else {\n        v16 = address(varg1);\n        _referralBalance_[v16] = _referralBalance_[v16] + (v0 << 1) / 10;\n    }\n    v17 = v18 = address(varg0) != 0;\n    if (v18) {\n        v19 = address(varg0);\n        v17 = v20 = _exit[v19] * 0x38d7ea4c68000 >= _stakingRequirement;\n    }\n    if (!v17) {\n        _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] = _referralBalance_[0xca27ff938c760391e76b7ada887288caf9bf6ada] + (v0 << 1) / 10;\n        varg0 = v21 = 0;\n    } else {\n        v22 = address(varg0);\n        _referralBalance_[v22] = _referralBalance_[v22] + (v0 << 1) / 10;\n    }\n    _referralBalance_[0xf43414abb5a05c3037910506571e4333e16a4bf4] = _referralBalance_[0xf43414abb5a05c3037910506571e4333e16a4bf4] + (varg3 - v0);\n    if (_fund <= 0) {\n        _fund = v2;\n    } else {\n        _fund = _fund + v2;\n        assert(_fund);\n        _dividendsOf = _dividendsOf + (v1 << 64) / _fund;\n        assert(_fund);\n        v3 = v23 = v4 - (v4 - v2 * ((v1 << 64) / _fund));\n    }\n    _exit[msg.sender] = _exit[msg.sender] + v2;\n    _reinvest[msg.sender] = _reinvest[msg.sender] + (_dividendsOf * v2 - v3);\n    require(0x897d6c6772b85bf25b46c6f6da454133478ea6ab.code.size);\n    v24 = 0x897d6c6772b85bf25b46c6f6da454133478ea6ab.fund().value(v0 / 10).gas(msg.gas);\n    require(v24); // checks call status, propagates error data on error\n    v25 = address(varg2);\n    v26 = address(varg1);\n    v27 = address(varg0);\n    emit 0x40a1d6f54a18383973455ecc09aed928163ec90ef70170fc54f28da79daa07cb(msg.sender, varg3, v2, v25, v26, v27, block.timestamp);\n    return v2;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x65318b == function_selector) {\n            dividendsOf(address);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x9881fb8 == function_selector) {\n            allowPassRepay(address);\n        } else if (0x2a9121c7 == function_selector) {\n            ethereumToTokens_(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x31e9b2fc == function_selector) {\n            passInterest(address,uint256,uint256);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x53f944e1 == function_selector) {\n            mayPassRepay(address);\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x5ab33fe4 == function_selector) {\n            repayBalance_(address);\n        } else if (0x688abbf7 == function_selector) {\n            myDividends(bool);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8078059c == function_selector) {\n            saleStop();\n        } else if (0x8a811be8 == function_selector) {\n            getRepay();\n        } else if (0x949e8acd == function_selector) {\n            myTokens();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x961e1c49 == function_selector) {\n            buy(address,address,address);\n        } else if (0x99288dbb == function_selector) {\n            saleOpen();\n        } else if (0x9cd460b5 == function_selector) {\n            passRepay(address);\n        } else if (0xab0bcc41 == function_selector) {\n            saleStart();\n        } else if (0xb60d4288 == function_selector) {\n            fund();\n        } else if (0xb96ec64a == function_selector) {\n            0xb96ec64a();\n        } else if (0xbf3b397b == function_selector) {\n            tokensToEthereum_(uint256);\n        } else if (0xc664f7f1 == function_selector) {\n            referralBalance_(address);\n        } else if (0xe4116246 == function_selector) {\n            denyPassRepay(address);\n        } else if (0xe9fad8ee == function_selector) {\n            exit();\n        } else if (0xf851a440 == function_selector) {\n            admin();\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 25.556288957595825,
	"usage": {
		"completion_tokens": 491,
		"prompt_tokens": 4754,
		"total_tokens": 5245
	}
}