{
	"address": "0x00674045bb7c17f0aa1cde34780d6c51af548728",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity contract that represents the decompiled EVM Bytecode:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    uint256 constant MAX_OWNER_COUNT = 0x32;\n    mapping(uint256 => Transaction) public transactions;\n    mapping(uint256 => mapping(uint256 => bool)) public confirmations;\n    mapping(uint256 => mapping(uint256 => bool)) public isOwner;\n    mapping(uint256 => uint256) public owners;\n    uint256 public required;\n    uint256 public transactionCount;\n    uint256 public dailyLimit;\n    uint256 public spentToday;\n    uint256 public lastDay;\n\n    struct Transaction {\n        address destination;\n        uint256 value;\n        bytes data;\n        bool executed;\n    }\n\n    function executeTransaction(uint256 transactionId) public {\n        require(msg.sender == address(this));\n        require(transactions[transactionId].executed == false);\n        if (isConfirmed(transactionId)) {\n            transactions[transactionId].executed = true;\n            transactions[transactionId].destination.call.value(transactions[transactionId].value)(transactions[transactionId].data);\n        }\n    }\n\n    function isConfirmed(uint256 transactionId) internal view returns (bool) {\n        uint256 count = 0;\n        for (uint256 i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]]) {\n                count += 1;\n            }\n            if (count == required) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function changeRequirement(uint256 _required) public {\n        require(msg.sender == address(this));\n        required = _required;\n    }\n\n    function changeDailyLimit(uint256 _dailyLimit) public {\n        require(msg.sender == address(this));\n        dailyLimit = _dailyLimit;\n    }\n\n    // Other functions are omitted for brevity\n}\n```\n\nPlease note: \n\n1. This contract is reconstructed based on the given decompiled EVM bytecode. Some parts are omitted for brevity.\n2. The function `executeTransaction` is called by the contract itself, not by external accounts.\n3. The function `changeRequirement` and `changeDailyLimit` also can only be called by the contract itself.\n4. This contract seems to be a multisig wallet with a daily limit. It involves several functionalities related to transactions, confirmations, and owner management.\n5. For the full contract, you need to add more functions based on the decompiled EVM bytecode. \n\nPlease consult with a solidity expert or a security auditor to review the contract before using it.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471780,
	"id": "chatcmpl-8Mug8oZFr06ffcmxP3fFYNzn4V1os",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0151:\n        \n            if (msg.value <= 0x00) { stop(); }\n        \n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = msg.value;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n            stop();\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x01b2;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var var3 = 0x00;\n            \n                if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var var4 = var2;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                storage[temp4] = storage[temp4] & ~0xff;\n                var3 = 0x00;\n            \n                if (var3 >= storage[0x03] + ~0x00) {\n                label_0892:\n                    var var5 = storage[0x03] + ~0x00;\n                    var var6 = 0x08a5;\n                    var var7 = 0x03;\n                    var var8 = var5;\n                    func_1728(var7, var8);\n                \n                    if (storage[0x04] <= storage[0x03]) {\n                    label_08BE:\n                        var temp5 = memory[0x40:0x60];\n                        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        var6 = storage[0x03];\n                        var5 = 0x08be;\n                        changeRequirement(var6);\n                        goto label_08BE;\n                    }\n                } else {\n                label_07C9:\n                    var5 = var2 & 0x02 ** 0xa0 - 0x01;\n                    var6 = 0x03;\n                    var7 = var3;\n                \n                    if (var7 >= storage[var6]) { assert(); }\n                \n                    memory[0x00:0x20] = var6;\n                \n                    if (storage[var7 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var5) {\n                        var4 = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x03] + ~0x00) { goto label_0892; }\n                        else { goto label_07C9; }\n                    } else {\n                        var5 = 0x03;\n                        var temp6 = storage[var5];\n                        var6 = temp6 + ~0x00;\n                    \n                        if (var6 >= temp6) { assert(); }\n                    \n                        memory[0x00:0x20] = var5;\n                        var5 = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                        var6 = 0x03;\n                        var7 = var3;\n                    \n                        if (var7 >= storage[var6]) { assert(); }\n                    \n                        memory[0x00:0x20] = var6;\n                        var temp7 = var7 + keccak256(memory[0x00:0x20]);\n                        storage[temp7] = (var5 & 0x02 ** 0xa0 - 0x01) | (storage[temp7] & ~(0x02 ** 0xa0 - 0x01));\n                        goto label_0892;\n                    }\n                }\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0226;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = isOwner(var2);\n            \n            label_0226:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var2;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0226;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var2 = confirmations(var2, var3);\n                goto label_0226;\n            } else if (var0 == 0x4bc9fdc2) {\n                // Dispatch table entry for calcMaxWithdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var1 = calcMaxWithdraw();\n            \n            label_0283:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n                goto label_0283;\n            } else if (var0 == 0x67eeba0c) {\n                // Dispatch table entry for dailyLimit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = dailyLimit();\n                goto label_0283;\n            } else if (var0 == 0x6b0c932d) {\n                // Dispatch table entry for lastDay()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = lastDay();\n                goto label_0283;\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0226;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                goto label_0226;\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                goto label_0283;\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0397;\n                var2 = msg.data[0x04:0x24];\n                var2, var3, var4, var5 = transactions(var2);\n                var temp12 = memory[0x40:0x60];\n                var6 = temp12;\n                memory[var6:var6 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[var6 + 0x20:var6 + 0x20 + 0x20] = var3;\n                memory[var6 + 0x60:var6 + 0x60 + 0x20] = !!var5;\n                memory[var6 + 0x40:var6 + 0x40 + 0x20] = 0x80;\n                var temp13 = storage[var4];\n                var temp14 = (temp13 & !(temp13 & 0x01) * 0x0100 + ~0x00) / 0x02;\n                memory[var6 + 0x80:var6 + 0x80 + 0x20] = temp14;\n                var7 = var6 + 0x40;\n                var8 = var6 + 0xa0;\n                var var10 = temp14;\n                var var9 = var4;\n            \n                if (!var10) {\n                label_042E:\n                    var temp15 = memory[0x40:0x60];\n                    return memory[temp15:temp15 + var8 - temp15];\n                } else if (0x1f < var10) {\n                    var temp16 = var8;\n                    var temp17 = temp16 + var10;\n                    var8 = temp17;\n                    memory[0x00:0x20] = var9;\n                    var temp18 = keccak256(memory[0x00:0x20]);\n                    memory[temp16:temp16 + 0x20] = storage[temp18];\n                    var9 = temp18 + 0x01;\n                    var10 = temp16 + 0x20;\n                \n                    if (var8 <= var10) { goto label_0425; }\n                \n                label_0411:\n                    var temp19 = var9;\n                    var temp20 = var10;\n                    memory[temp20:temp20 + 0x20] = storage[temp19];\n                    var9 = temp19 + 0x01;\n                    var10 = temp20 + 0x20;\n                \n                    if (var8 > var10) { goto label_0411; }\n                \n                label_0425:\n                    var temp21 = var8;\n                    var temp22 = temp21 + (var10 - temp21 & 0x1f);\n                    var10 = temp21;\n                    var8 = temp22;\n                    goto label_042E;\n                } else {\n                    var temp23 = var8;\n                    memory[temp23:temp23 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                    var10 = var10;\n                    var8 = temp23 + 0x20;\n                    goto label_042E;\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0453;\n                var1 = getOwners();\n            \n            label_0453:\n                var temp24 = memory[0x40:0x60];\n                var2 = temp24;\n                memory[var2:var2 + 0x20] = 0x20;\n                var3 = var2;\n                var temp25 = var3 + 0x20;\n                var temp26 = var1;\n                memory[temp25:temp25 + 0x20] = memory[temp26:temp26 + 0x20];\n                var4 = temp25 + 0x20;\n                var5 = temp26 + 0x20;\n                var6 = memory[temp26:temp26 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_0493:\n                    var temp27 = memory[0x40:0x60];\n                    return memory[temp27:temp27 + (var6 + var4) - temp27];\n                } else {\n                label_0483:\n                    var temp28 = var10;\n                    memory[var8 + temp28:var8 + temp28 + 0x20] = memory[var9 + temp28:var9 + temp28 + 0x20];\n                    var10 = temp28 + 0x20;\n                \n                    if (var10 >= var7) { goto label_0493; }\n                    else { goto label_0483; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0453;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                goto label_0453;\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0453;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                goto label_0453;\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = transactionCount();\n                goto label_0283;\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.sender;\n                memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x00;\n                var4 = var2;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x01;\n                var temp29 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp29;\n                var5 = var2;\n                var6 = msg.sender;\n            \n                if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n            \n                var temp30 = var2;\n                memory[0x00:0x20] = temp30;\n                memory[0x20:0x40] = 0x01;\n                var temp31 = keccak256(memory[0x00:0x40]);\n                var temp32 = msg.sender;\n                memory[0x00:0x20] = temp32;\n                memory[0x20:0x40] = temp31;\n                var temp33 = keccak256(memory[0x00:0x40]);\n                storage[temp33] = (storage[temp33] & ~0xff) | 0x01;\n                var temp34 = memory[0x40:0x60];\n                log(memory[temp34:temp34 + memory[0x40:0x60] - temp34], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n                var7 = 0x09d5;\n                var8 = temp30;\n                executeTransaction(var8);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var temp35 = msg.data[0x44:0x64];\n                var temp36 = msg.data[temp35 + 0x04:temp35 + 0x04 + 0x20];\n                var temp37 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp37 + (temp36 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp37:temp37 + 0x20] = temp36;\n                memory[temp37 + 0x20:temp37 + 0x20 + temp36] = msg.data[temp35 + 0x24:temp35 + 0x24 + temp36];\n                var4 = temp37;\n                var5 = 0x00;\n                var6 = 0x11dd;\n                var7 = var2;\n                var8 = var3;\n                var9 = var4;\n                var10 = 0x00;\n                var var11 = var7;\n            \n                if (!(var11 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                var10 = storage[0x05];\n                var temp38 = memory[0x40:0x60];\n                var var12 = temp38;\n                memory[0x40:0x60] = var12 + 0x80;\n                memory[var12:var12 + 0x20] = var7 & 0x02 ** 0xa0 - 0x01;\n                memory[var12 + 0x20:var12 + 0x20 + 0x20] = var8;\n                memory[var12 + 0x40:var12 + 0x40 + 0x20] = var9;\n                memory[var12 + 0x60:var12 + 0x60 + 0x20] = 0x00;\n                memory[0x00:0x20] = var10;\n                memory[0x20:0x40] = 0x00;\n                var temp39 = keccak256(memory[0x00:0x40]);\n                var var13 = temp39;\n                storage[var13] = (memory[var12:var12 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[var13] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                storage[var13 + 0x01] = memory[var12 + 0x20:var12 + 0x20 + 0x20];\n                var temp40 = memory[var12 + 0x40:var12 + 0x40 + 0x20];\n                var var14 = 0x1684;\n                var var15 = var13 + 0x02;\n                var var17 = memory[temp40:temp40 + 0x20];\n                var var16 = temp40 + 0x20;\n                var temp41 = var15;\n                var temp42 = storage[temp41];\n                memory[0x00:0x20] = temp41;\n                var var18 = keccak256(memory[0x00:0x20]);\n                var temp43 = var16;\n                var16 = var18 + ((!(temp42 & 0x01) * 0x0100 - 0x01 & temp42) / 0x02 + 0x1f) / 0x20;\n                var var19 = temp43;\n            \n                if (0x1f < var17) {\n                    var temp44 = var17;\n                    storage[var15] = temp44 + temp44 + 0x01;\n                \n                    if (!temp44) {\n                    label_180E:\n                        var temp45 = var16;\n                        var16 = 0x181b;\n                        var17 = temp45;\n                        var temp46 = var17;\n                        var17 = 0x0a37;\n                        var temp47 = var18;\n                        var19 = temp47;\n                        var18 = temp46;\n                    \n                        if (var18 <= var19) {\n                            var17 = func_181B(var18, var19);\n                            var16 = var17;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                        label_182E:\n                            var temp48 = var19;\n                            storage[temp48] = 0x00;\n                            var19 = temp48 + 0x01;\n                        \n                            if (var18 > var19) { goto label_182E; }\n                        \n                            var17 = func_181B(var18, var19);\n                            // Error: Could not resolve method call return address!\n                        }\n                    } else {\n                        var temp49 = var17;\n                        var temp50 = var19;\n                        var17 = temp50;\n                        var19 = var17 + temp49;\n                    \n                        if (var19 <= var17) { goto label_180E; }\n                    \n                    label_17FC:\n                        var temp51 = var17;\n                        var temp52 = var18;\n                        storage[temp52] = memory[temp51:temp51 + 0x20];\n                        var17 = temp51 + 0x20;\n                        var19 = var19;\n                        var18 = temp52 + 0x01;\n                    \n                        if (var19 <= var17) { goto label_180E; }\n                        else { goto label_17FC; }\n                    }\n                } else {\n                    var temp53 = var17;\n                    storage[var15] = temp53 + temp53 | (memory[var19:var19 + 0x20] & ~0xff);\n                    goto label_180E;\n                }\n            } else if (var0 == 0xcea08621) {\n                // Dispatch table entry for changeDailyLimit(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24];\n                changeDailyLimit(var2);\n                stop();\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = MAX_OWNER_COUNT();\n                goto label_0283;\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = required();\n                goto label_0283;\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var temp54 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp54 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp54;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else if (var0 == 0xf059cf2b) {\n                // Dispatch table entry for spentToday()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = spentToday();\n                goto label_0283;\n            } else { goto label_0151; }\n        }\n    }\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var1 = arg0;\n        var var2 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var3 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] & ~0xff;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function calcMaxWithdraw() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (block.timestamp <= storage[0x07] + 0x015180) { return storage[0x06] - storage[0x08]; }\n        else { return storage[0x06]; }\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x05]) {\n        label_0AA1:\n            return var0;\n        } else {\n        label_0A49:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_0A8B; }\n                else { goto label_0A6D; }\n            } else if (var2) {\n            label_0A8B:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0A3E:\n                \n                    if (var1 >= storage[0x05]) { goto label_0AA1; }\n                    else { goto label_0A49; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0A3E;\n                }\n            } else {\n            label_0A6D:\n                var2 = arg1;\n            \n                if (!var2) { goto label_0A8B; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_0A8B;\n            }\n        }\n    }\n    \n    function dailyLimit() returns (var r0) { return storage[0x06]; }\n    \n    function lastDay() returns (var r0) { return storage[0x07]; }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var0 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x32;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_0B36; }\n            else { goto label_0B33; }\n        } else if (var4) {\n        label_0B36:\n        \n            if (var4) {\n            label_0B3F:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_0B49:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var var5 = storage[0x03];\n                var4 = 0x03;\n                var var6 = var5 + 0x01;\n                var var7 = 0x0b81;\n                var var8 = var4;\n                var var9 = var6;\n                func_1728(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = var5 + keccak256(memory[0x00:0x20]);\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                var temp3 = arg0 & temp2;\n                storage[temp1] = (storage[temp1] & ~temp2) | temp3;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n            label_0B3C:\n            \n                if (var2) { goto label_0B49; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0B33:\n            var4 = !var3;\n        \n            if (var4) { goto label_0B3F; }\n            else { goto label_0B3C; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= storage[0x03]) {\n        label_0C76:\n            return var0;\n        } else {\n        label_0BFA:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var5 = 0x03;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff) {\n                var temp1 = var1 + 0x01;\n                var1 = temp1;\n            \n                if (var1 != storage[0x04]) { goto label_0C6D; }\n                else { goto label_0C65; }\n            } else if (var1 != storage[0x04]) {\n            label_0C6D:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_0C76; }\n                else { goto label_0BFA; }\n            } else {\n            label_0C65:\n                var0 = 0x01;\n                goto label_0C76;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x03]) {\n        label_0CF6:\n            return var0;\n        } else {\n        label_0C8D:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var4 = 0x03;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_0C82:\n            \n                if (var1 >= storage[0x03]) { goto label_0CF6; }\n                else { goto label_0C8D; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_0C82;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        return arg0, r1, r2, r3;\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x0d39;\n        var0 = func_177C();\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_0D8F:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp4 + 0x01;\n            var6 = temp2 + 0x20;\n        \n            if (var4 <= var6) { goto label_0D8F; }\n        \n        label_0D71:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_0D71; }\n            else { goto label_0D8F; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x0da2;\n        var0 = func_177C();\n        var var1 = 0x0daa;\n        var1 = func_177C();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_0E55:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_0EBC:\n                        return var0;\n                    } else {\n                    label_0E86:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_0EBC; }\n                        else { goto label_0E86; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_0EBC; }\n                    else { goto label_0E86; }\n                }\n            } else {\n            label_0DE5:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_0E27; }\n                    else { goto label_0E09; }\n                } else if (var4) {\n                label_0E27:\n                \n                    if (!var4) {\n                    label_0E4C:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_0E55; }\n                        else { goto label_0DE5; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3;\n                        var2 = var2 + 0x01;\n                        goto label_0E4C;\n                    }\n                } else {\n                label_0E09:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_0E27; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_0E27;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_0E55; }\n            else { goto label_0DE5; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x0ed0;\n        var0 = func_177C();\n        var var1 = 0x0ed8;\n        var1 = func_177C();\n        var var2 = 0x00;\n        var var4 = storage[0x03];\n        var var3 = var2;\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_0FD0:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_1041:\n                        return var0;\n                    } else {\n                    label_1000:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_1041; }\n                        else { goto label_1000; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_1041; }\n                    else { goto label_1000; }\n                }\n            } else {\n            label_0F15:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var6 = 0x03;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp6 + 0x40])] & 0xff)) {\n                label_0FC7:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_0FD0; }\n                    else { goto label_0F15; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                    var3 = var3;\n                    var2 = var2 + 0x01;\n                    goto label_0FC7;\n                }\n            }\n        } else {\n            var temp7 = MSIZE();\n            var temp8 = var4;\n            memory[temp7:temp7 + 0x20] = temp8;\n            memory[0x40:0x60] = temp7 + temp8 * 0x20 + 0x20;\n            var1 = temp7;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_0FD0; }\n            else { goto label_0F15; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x32;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_108B; }\n            else { goto label_1088; }\n        } else if (var2) {\n        label_108B:\n        \n            if (var2) {\n            label_1094:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_109E:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_1091:\n            \n                if (var0) { goto label_109E; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_1088:\n            var2 = !var1;\n        \n            if (var2) { goto label_1094; }\n            else { goto label_1091; }\n        }\n    }\n    \n    function changeDailyLimit(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        storage[0x06] = temp0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xc71bdc6afaf9b1aa90a7078191d4fc1adf3bf680fca3183697df6b0dc226bca2]);\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var2 = arg1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1373:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = ~0xff;\n            storage[temp2] = temp3 & storage[temp2];\n            var temp4 = arg1;\n            memory[0x00:0x20] = temp4 & temp0;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = (temp3 & storage[temp5]) | 0x01;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n        label_12DB:\n            var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var3) {\n                var2 = var2;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1373; }\n                else { goto label_12DB; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp8 = var5 + keccak256(memory[0x00:0x20]);\n                storage[temp8] = (var3 & 0x02 ** 0xa0 - 0x01) | (storage[temp8] & ~(0x02 ** 0xa0 - 0x01));\n                goto label_1373;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = var0;\n        var var1 = var0;\n        var var2 = arg0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n        var var3 = 0x1455;\n        var var4 = arg0;\n        var3 = isConfirmed(var4);\n        var1 = var3;\n        var3 = var1;\n    \n        if (var3) {\n        label_1488:\n        \n            if (!var3) {\n            label_09D8:\n                return;\n            } else {\n                var temp0 = var0 + 0x03;\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n            \n                if (var1) {\n                    var temp1 = var0;\n                    var3 = storage[temp1] & 0x02 ** 0xa0 - 0x01;\n                    var4 = storage[temp1 + 0x01];\n                    var var5 = temp1 + 0x02;\n                    var var6 = memory[0x40:0x60];\n                    var var7 = var6;\n                    var var8 = var5;\n                    var temp2 = storage[var8];\n                    var var9 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n                \n                    if (!var9) {\n                    label_1530:\n                        var temp3 = memory[0x40:0x60];\n                        var temp4;\n                        temp4, memory[temp3:temp3 + 0x00] = address(var3).call.gas(msg.gas - 0x8796).value(var4)(memory[temp3:temp3 + var7 - temp3]);\n                    \n                        if (!temp4) {\n                            var temp5 = memory[0x40:0x60];\n                            log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-4]]);\n                            var temp6 = var0 + 0x03;\n                            storage[temp6] = storage[temp6] & ~0xff;\n                        \n                            if (var1) { goto label_09D8; }\n                        \n                            storage[0x08] = storage[0x08] - storage[var0 + 0x01];\n                            return;\n                        } else {\n                            var temp7 = memory[0x40:0x60];\n                            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-4]]);\n                            goto label_09D8;\n                        }\n                    } else {\n                    label_14EA:\n                    \n                        if (0x1f < var9) {\n                            var temp8 = var7;\n                            var temp9 = temp8 + var9;\n                            var7 = temp9;\n                            memory[0x00:0x20] = var8;\n                            var temp10 = keccak256(memory[0x00:0x20]);\n                            memory[temp8:temp8 + 0x20] = storage[temp10];\n                            var8 = temp10 + 0x01;\n                            var9 = temp8 + 0x20;\n                        \n                            if (var7 <= var9) { goto label_1527; }\n                        \n                        label_1513:\n                            var temp11 = var8;\n                            var temp12 = var9;\n                            memory[temp12:temp12 + 0x20] = storage[temp11];\n                            var8 = temp11 + 0x01;\n                            var9 = temp12 + 0x20;\n                        \n                            if (var7 > var9) { goto label_1513; }\n                        \n                        label_1527:\n                            var temp13 = var7;\n                            var temp14 = temp13 + (var9 - temp13 & 0x1f);\n                            var9 = temp13;\n                            var7 = temp14;\n                            goto label_1530;\n                        } else {\n                            var temp15 = var7;\n                            memory[temp15:temp15 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n                            var7 = temp15 + 0x20;\n                            var9 = var9;\n                            goto label_1530;\n                        }\n                    }\n                } else {\n                    var temp16 = var0;\n                    storage[0x08] = storage[temp16 + 0x01] + storage[0x08];\n                    var4 = storage[temp16 + 0x01];\n                    var3 = storage[temp16] & 0x02 ** 0xa0 - 0x01;\n                    var5 = temp16 + 0x02;\n                    var6 = memory[0x40:0x60];\n                    var7 = var6;\n                    var8 = var5;\n                    var temp17 = storage[var8];\n                    var9 = (!(temp17 & 0x01) * 0x0100 - 0x01 & temp17) / 0x02;\n                \n                    if (!var9) { goto label_1530; }\n                    else { goto label_14EA; }\n                }\n            }\n        } else {\n            var temp18 = storage[var0 + 0x02];\n            var3 = !((!(temp18 & 0x01) * 0x0100 + ~0x00 & temp18) / 0x02);\n        \n            if (!var3) { goto label_1488; }\n        \n            var3 = 0x1488;\n            var4 = storage[var0 + 0x01];\n            var3 = func_16E0(var4);\n            goto label_1488;\n        }\n    }\n    \n    function spentToday() returns (var r0) { return storage[0x08]; }\n    \n    function func_16E0(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (block.timestamp <= storage[0x07] + 0x015180) {\n            var var1 = storage[0x08] + arg0 > storage[0x06];\n        \n            if (var1) {\n            label_1712:\n            \n                if (!var1) {\n                label_171F:\n                    return 0x01;\n                } else {\n                label_1718:\n                    return 0x00;\n                }\n            } else {\n            label_170A:\n                var temp0 = storage[0x08];\n            \n                if (temp0 + arg0 >= temp0) { goto label_171F; }\n                else { goto label_1718; }\n            }\n        } else {\n            storage[0x07] = block.timestamp;\n            storage[0x08] = 0x00;\n            var1 = storage[0x08] + arg0 > storage[0x06];\n        \n            if (var1) { goto label_1712; }\n            else { goto label_170A; }\n        }\n    }\n    \n    function func_1728(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) { return; }\n    \n        memory[0x00:0x20] = arg0;\n        var temp3 = keccak256(memory[0x00:0x20]);\n        var temp4 = var0;\n        var0 = 0x08f6;\n        var var1 = temp3 + temp4;\n        var var2 = arg1 + temp3;\n        var temp5 = var1;\n        var1 = 0x0a37;\n        var temp6 = var2;\n        var var3 = temp6;\n        var2 = temp5;\n    \n        if (var2 <= var3) {\n            var1 = func_181B(var2, var3);\n            var0 = var1;\n            // Error: Could not resolve jump destination!\n        } else {\n        label_182E:\n            var temp7 = var3;\n            storage[temp7] = 0x00;\n            var3 = temp7 + 0x01;\n        \n            if (var2 > var3) { goto label_182E; }\n        \n            var1 = func_181B(var2, var3);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_177C() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_181B(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0151:\n        \n            if (msg.value <= 0x00) { stop(); }\n        \n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = msg.value;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n            stop();\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x01b2;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var var3 = 0x00;\n            \n                if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var var4 = var2;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                storage[temp4] = storage[temp4] & ~0xff;\n                var3 = 0x00;\n            \n                if (var3 >= storage[0x03] + ~0x00) {\n                label_0892:\n                    var var5 = storage[0x03] + ~0x00;\n                    var var6 = 0x08a5;\n                    var var7 = 0x03;\n                    var var8 = var5;\n                    func_1728(var7, var8);\n                \n                    if (storage[0x04] <= storage[0x03]) {\n                    label_08BE:\n                        var temp5 = memory[0x40:0x60];\n                        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        var6 = storage[0x03];\n                        var5 = 0x08be;\n                        changeRequirement(var6);\n                        goto label_08BE;\n                    }\n                } else {\n                label_07C9:\n                    var5 = var2 & 0x02 ** 0xa0 - 0x01;\n                    var6 = 0x03;\n                    var7 = var3;\n                \n                    if (var7 >= storage[var6]) { assert(); }\n                \n                    memory[0x00:0x20] = var6;\n                \n                    if (storage[var7 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var5) {\n                        var4 = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x03] + ~0x00) { goto label_0892; }\n                        else { goto label_07C9; }\n                    } else {\n                        var5 = 0x03;\n                        var temp6 = storage[var5];\n                        var6 = temp6 + ~0x00;\n                    \n                        if (var6 >= temp6) { assert(); }\n                    \n                        memory[0x00:0x20] = var5;\n                        var5 = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                        var6 = 0x03;\n                        var7 = var3;\n                    \n                        if (var7 >= storage[var6]) { assert(); }\n                    \n                        memory[0x00:0x20] = var6;\n                        var temp7 = var7 + keccak256(memory[0x00:0x20]);\n                        storage[temp7] = (var5 & 0x02 ** 0xa0 - 0x01) | (storage[temp7] & ~(0x02 ** 0xa0 - 0x01));\n                        goto label_0892;\n                    }\n                }\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0226;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = isOwner(var2);\n            \n            label_0226:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var2;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0226;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var2 = confirmations(var2, var3);\n                goto label_0226;\n            } else if (var0 == 0x4bc9fdc2) {\n                // Dispatch table entry for calcMaxWithdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var1 = calcMaxWithdraw();\n            \n            label_0283:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n                goto label_0283;\n            } else if (var0 == 0x67eeba0c) {\n                // Dispatch table entry for dailyLimit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = dailyLimit();\n                goto label_0283;\n            } else if (var0 == 0x6b0c932d) {\n                // Dispatch table entry for lastDay()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = lastDay();\n                goto label_0283;\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0226;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                goto label_0226;\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                goto label_0283;\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0397;\n                var2 = msg.data[0x04:0x24];\n                var2, var3, var4, var5 = transactions(var2);\n                var temp12 = memory[0x40:0x60];\n                var6 = temp12;\n                memory[var6:var6 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[var6 + 0x20:var6 + 0x20 + 0x20] = var3;\n                memory[var6 + 0x60:var6 + 0x60 + 0x20] = !!var5;\n                memory[var6 + 0x40:var6 + 0x40 + 0x20] = 0x80;\n                var temp13 = storage[var4];\n                var temp14 = (temp13 & !(temp13 & 0x01) * 0x0100 + ~0x00) / 0x02;\n                memory[var6 + 0x80:var6 + 0x80 + 0x20] = temp14;\n                var7 = var6 + 0x40;\n                var8 = var6 + 0xa0;\n                var var10 = temp14;\n                var var9 = var4;\n            \n                if (!var10) {\n                label_042E:\n                    var temp15 = memory[0x40:0x60];\n                    return memory[temp15:temp15 + var8 - temp15];\n                } else if (0x1f < var10) {\n                    var temp16 = var8;\n                    var temp17 = temp16 + var10;\n                    var8 = temp17;\n                    memory[0x00:0x20] = var9;\n                    var temp18 = keccak256(memory[0x00:0x20]);\n                    memory[temp16:temp16 + 0x20] = storage[temp18];\n                    var9 = temp18 + 0x01;\n                    var10 = temp16 + 0x20;\n                \n                    if (var8 <= var10) { goto label_0425; }\n                \n                label_0411:\n                    var temp19 = var9;\n                    var temp20 = var10;\n                    memory[temp20:temp20 + 0x20] = storage[temp19];\n                    var9 = temp19 + 0x01;\n                    var10 = temp20 + 0x20;\n                \n                    if (var8 > var10) { goto label_0411; }\n                \n                label_0425:\n                    var temp21 = var8;\n                    var temp22 = temp21 + (var10 - temp21 & 0x1f);\n                    var10 = temp21;\n                    var8 = temp22;\n                    goto label_042E;\n                } else {\n                    var temp23 = var8;\n                    memory[temp23:temp23 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                    var10 = var10;\n                    var8 = temp23 + 0x20;\n                    goto label_042E;\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0453;\n                var1 = getOwners();\n            \n            label_0453:\n                var temp24 = memory[0x40:0x60];\n                var2 = temp24;\n                memory[var2:var2 + 0x20] = 0x20;\n                var3 = var2;\n                var temp25 = var3 + 0x20;\n                var temp26 = var1;\n                memory[temp25:temp25 + 0x20] = memory[temp26:temp26 + 0x20];\n                var4 = temp25 + 0x20;\n                var5 = temp26 + 0x20;\n                var6 = memory[temp26:temp26 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_0493:\n                    var temp27 = memory[0x40:0x60];\n                    return memory[temp27:temp27 + (var6 + var4) - temp27];\n                } else {\n                label_0483:\n                    var temp28 = var10;\n                    memory[var8 + temp28:var8 + temp28 + 0x20] = memory[var9 + temp28:var9 + temp28 + 0x20];\n                    var10 = temp28 + 0x20;\n                \n                    if (var10 >= var7) { goto label_0493; }\n                    else { goto label_0483; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0453;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                goto label_0453;\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0453;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                goto label_0453;\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = transactionCount();\n                goto label_0283;\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.sender;\n                memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x00;\n                var4 = var2;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x01;\n                var temp29 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp29;\n                var5 = var2;\n                var6 = msg.sender;\n            \n                if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n            \n                var temp30 = var2;\n                memory[0x00:0x20] = temp30;\n                memory[0x20:0x40] = 0x01;\n                var temp31 = keccak256(memory[0x00:0x40]);\n                var temp32 = msg.sender;\n                memory[0x00:0x20] = temp32;\n                memory[0x20:0x40] = temp31;\n                var temp33 = keccak256(memory[0x00:0x40]);\n                storage[temp33] = (storage[temp33] & ~0xff) | 0x01;\n                var temp34 = memory[0x40:0x60];\n                log(memory[temp34:temp34 + memory[0x40:0x60] - temp34], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n                var7 = 0x09d5;\n                var8 = temp30;\n                executeTransaction(var8);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var temp35 = msg.data[0x44:0x64];\n                var temp36 = msg.data[temp35 + 0x04:temp35 + 0x04 + 0x20];\n                var temp37 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp37 + (temp36 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp37:temp37 + 0x20] = temp36;\n                memory[temp37 + 0x20:temp37 + 0x20 + temp36] = msg.data[temp35 + 0x24:temp35 + 0x24 + temp36];\n                var4 = temp37;\n                var5 = 0x00;\n                var6 = 0x11dd;\n                var7 = var2;\n                var8 = var3;\n                var9 = var4;\n                var10 = 0x00;\n                var var11 = var7;\n            \n                if (!(var11 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                var10 = storage[0x05];\n                var temp38 = memory[0x40:0x60];\n                var var12 = temp38;\n                memory[0x40:0x60] = var12 + 0x80;\n                memory[var12:var12 + 0x20] = var7 & 0x02 ** 0xa0 - 0x01;\n                memory[var12 + 0x20:var12 + 0x20 + 0x20] = var8;\n                memory[var12 + 0x40:var12 + 0x40 + 0x20] = var9;\n                memory[var12 + 0x60:var12 + 0x60 + 0x20] = 0x00;\n                memory[0x00:0x20] = var10;\n                memory[0x20:0x40] = 0x00;\n                var temp39 = keccak256(memory[0x00:0x40]);\n                var var13 = temp39;\n                storage[var13] = (memory[var12:var12 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[var13] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                storage[var13 + 0x01] = memory[var12 + 0x20:var12 + 0x20 + 0x20];\n                var temp40 = memory[var12 + 0x40:var12 + 0x40 + 0x20];\n                var var14 = 0x1684;\n                var var15 = var13 + 0x02;\n                var var17 = memory[temp40:temp40 + 0x20];\n                var var16 = temp40 + 0x20;\n                var temp41 = var15;\n                var temp42 = storage[temp41];\n                memory[0x00:0x20] = temp41;\n                var var18 = keccak256(memory[0x00:0x20]);\n                var temp43 = var16;\n                var16 = var18 + ((!(temp42 & 0x01) * 0x0100 - 0x01 & temp42) / 0x02 + 0x1f) / 0x20;\n                var var19 = temp43;\n            \n                if (0x1f < var17) {\n                    var temp44 = var17;\n                    storage[var15] = temp44 + temp44 + 0x01;\n                \n                    if (!temp44) {\n                    label_180E:\n                        var temp45 = var16;\n                        var16 = 0x181b;\n                        var17 = temp45;\n                        var temp46 = var17;\n                        var17 = 0x0a37;\n                        var temp47 = var18;\n                        var19 = temp47;\n                        var18 = temp46;\n                    \n                        if (var18 <= var19) {\n                            var17 = func_181B(var18, var19);\n                            var16 = var17;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                        label_182E:\n                            var temp48 = var19;\n                            storage[temp48] = 0x00;\n                            var19 = temp48 + 0x01;\n                        \n                            if (var18 > var19) { goto label_182E; }\n                        \n                            var17 = func_181B(var18, var19);\n                            // Error: Could not resolve method call return address!\n                        }\n                    } else {\n                        var temp49 = var17;\n                        var temp50 = var19;\n                        var17 = temp50;\n                        var19 = var17 + temp49;\n                    \n                        if (var19 <= var17) { goto label_180E; }\n                    \n                    label_17FC:\n                        var temp51 = var17;\n                        var temp52 = var18;\n                        storage[temp52] = memory[temp51:temp51 + 0x20];\n                        var17 = temp51 + 0x20;\n                        var19 = var19;\n                        var18 = temp52 + 0x01;\n                    \n                        if (var19 <= var17) { goto label_180E; }\n                        else { goto label_17FC; }\n                    }\n                } else {\n                    var temp53 = var17;\n                    storage[var15] = temp53 + temp53 | (memory[var19:var19 + 0x20] & ~0xff);\n                    goto label_180E;\n                }\n            } else if (var0 == 0xcea08621) {\n                // Dispatch table entry for changeDailyLimit(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24];\n                changeDailyLimit(var2);\n                stop();\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = MAX_OWNER_COUNT();\n                goto label_0283;\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = required();\n                goto label_0283;\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var temp54 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp54 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp54;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else if (var0 == 0xf059cf2b) {\n                // Dispatch table entry for spentToday()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = spentToday();\n                goto label_0283;\n            } else { goto label_0151; }\n        }\n    }\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var1 = arg0;\n        var var2 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var3 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] & ~0xff;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function calcMaxWithdraw() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (block.timestamp <= storage[0x07] + 0x015180) { return storage[0x06] - storage[0x08]; }\n        else { return storage[0x06]; }\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x05]) {\n        label_0AA1:\n            return var0;\n        } else {\n        label_0A49:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_0A8B; }\n                else { goto label_0A6D; }\n            } else if (var2) {\n            label_0A8B:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0A3E:\n                \n                    if (var1 >= storage[0x05]) { goto label_0AA1; }\n                    else { goto label_0A49; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0A3E;\n                }\n            } else {\n            label_0A6D:\n                var2 = arg1;\n            \n                if (!var2) { goto label_0A8B; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_0A8B;\n            }\n        }\n    }\n    \n    function dailyLimit() returns (var r0) { return storage[0x06]; }\n    \n    function lastDay() returns (var r0) { return storage[0x07]; }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var0 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x32;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_0B36; }\n            else { goto label_0B33; }\n        } else if (var4) {\n        label_0B36:\n        \n            if (var4) {\n            label_0B3F:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_0B49:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var var5 = storage[0x03];\n                var4 = 0x03;\n                var var6 = var5 + 0x01;\n                var var7 = 0x0b81;\n                var var8 = var4;\n                var var9 = var6;\n                func_1728(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = var5 + keccak256(memory[0x00:0x20]);\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                var temp3 = arg0 & temp2;\n                storage[temp1] = (storage[temp1] & ~temp2) | temp3;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n            label_0B3C:\n            \n                if (var2) { goto label_0B49; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0B33:\n            var4 = !var3;\n        \n            if (var4) { goto label_0B3F; }\n            else { goto label_0B3C; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= storage[0x03]) {\n        label_0C76:\n            return var0;\n        } else {\n        label_0BFA:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var5 = 0x03;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff) {\n                var temp1 = var1 + 0x01;\n                var1 = temp1;\n            \n                if (var1 != storage[0x04]) { goto label_0C6D; }\n                else { goto label_0C65; }\n            } else if (var1 != storage[0x04]) {\n            label_0C6D:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_0C76; }\n                else { goto label_0BFA; }\n            } else {\n            label_0C65:\n                var0 = 0x01;\n                goto label_0C76;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x03]) {\n        label_0CF6:\n            return var0;\n        } else {\n        label_0C8D:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var4 = 0x03;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_0C82:\n            \n                if (var1 >= storage[0x03]) { goto label_0CF6; }\n                else { goto label_0C8D; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_0C82;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        return arg0, r1, r2, r3;\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x0d39;\n        var0 = func_177C();\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_0D8F:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp4 + 0x01;\n            var6 = temp2 + 0x20;\n        \n            if (var4 <= var6) { goto label_0D8F; }\n        \n        label_0D71:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_0D71; }\n            else { goto label_0D8F; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x0da2;\n        var0 = func_177C();\n        var var1 = 0x0daa;\n        var1 = func_177C();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_0E55:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_0EBC:\n                        return var0;\n                    } else {\n                    label_0E86:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_0EBC; }\n                        else { goto label_0E86; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_0EBC; }\n                    else { goto label_0E86; }\n                }\n            } else {\n            label_0DE5:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_0E27; }\n                    else { goto label_0E09; }\n                } else if (var4) {\n                label_0E27:\n                \n                    if (!var4) {\n                    label_0E4C:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_0E55; }\n                        else { goto label_0DE5; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3;\n                        var2 = var2 + 0x01;\n                        goto label_0E4C;\n                    }\n                } else {\n                label_0E09:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_0E27; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_0E27;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_0E55; }\n            else { goto label_0DE5; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x0ed0;\n        var0 = func_177C();\n        var var1 = 0x0ed8;\n        var1 = func_177C();\n        var var2 = 0x00;\n        var var4 = storage[0x03];\n        var var3 = var2;\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_0FD0:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_1041:\n                        return var0;\n                    } else {\n                    label_1000:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_1041; }\n                        else { goto label_1000; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_1041; }\n                    else { goto label_1000; }\n                }\n            } else {\n            label_0F15:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var6 = 0x03;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp6 + 0x40])] & 0xff)) {\n                label_0FC7:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_0FD0; }\n                    else { goto label_0F15; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                    var3 = var3;\n                    var2 = var2 + 0x01;\n                    goto label_0FC7;\n                }\n            }\n        } else {\n            var temp7 = MSIZE();\n            var temp8 = var4;\n            memory[temp7:temp7 + 0x20] = temp8;\n            memory[0x40:0x60] = temp7 + temp8 * 0x20 + 0x20;\n            var1 = temp7;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_0FD0; }\n            else { goto label_0F15; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x32;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_108B; }\n            else { goto label_1088; }\n        } else if (var2) {\n        label_108B:\n        \n            if (var2) {\n            label_1094:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_109E:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_1091:\n            \n                if (var0) { goto label_109E; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_1088:\n            var2 = !var1;\n        \n            if (var2) { goto label_1094; }\n            else { goto label_1091; }\n        }\n    }\n    \n    function changeDailyLimit(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        storage[0x06] = temp0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xc71bdc6afaf9b1aa90a7078191d4fc1adf3bf680fca3183697df6b0dc226bca2]);\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var2 = arg1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1373:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = ~0xff;\n            storage[temp2] = temp3 & storage[temp2];\n            var temp4 = arg1;\n            memory[0x00:0x20] = temp4 & temp0;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = (temp3 & storage[temp5]) | 0x01;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n        label_12DB:\n            var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var3) {\n                var2 = var2;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1373; }\n                else { goto label_12DB; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp8 = var5 + keccak256(memory[0x00:0x20]);\n                storage[temp8] = (var3 & 0x02 ** 0xa0 - 0x01) | (storage[temp8] & ~(0x02 ** 0xa0 - 0x01));\n                goto label_1373;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = var0;\n        var var1 = var0;\n        var var2 = arg0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n        var var3 = 0x1455;\n        var var4 = arg0;\n        var3 = isConfirmed(var4);\n        var1 = var3;\n        var3 = var1;\n    \n        if (var3) {\n        label_1488:\n        \n            if (!var3) {\n            label_09D8:\n                return;\n            } else {\n                var temp0 = var0 + 0x03;\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n            \n                if (var1) {\n                    var temp1 = var0;\n                    var3 = storage[temp1] & 0x02 ** 0xa0 - 0x01;\n                    var4 = storage[temp1 + 0x01];\n                    var var5 = temp1 + 0x02;\n                    var var6 = memory[0x40:0x60];\n                    var var7 = var6;\n                    var var8 = var5;\n                    var temp2 = storage[var8];\n                    var var9 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n                \n                    if (!var9) {\n                    label_1530:\n                        var temp3 = memory[0x40:0x60];\n                        var temp4;\n                        temp4, memory[temp3:temp3 + 0x00] = address(var3).call.gas(msg.gas - 0x8796).value(var4)(memory[temp3:temp3 + var7 - temp3]);\n                    \n                        if (!temp4) {\n                            var temp5 = memory[0x40:0x60];\n                            log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-4]]);\n                            var temp6 = var0 + 0x03;\n                            storage[temp6] = storage[temp6] & ~0xff;\n                        \n                            if (var1) { goto label_09D8; }\n                        \n                            storage[0x08] = storage[0x08] - storage[var0 + 0x01];\n                            return;\n                        } else {\n                            var temp7 = memory[0x40:0x60];\n                            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-4]]);\n                            goto label_09D8;\n                        }\n                    } else {\n                    label_14EA:\n                    \n                        if (0x1f < var9) {\n                            var temp8 = var7;\n                            var temp9 = temp8 + var9;\n                            var7 = temp9;\n                            memory[0x00:0x20] = var8;\n                            var temp10 = keccak256(memory[0x00:0x20]);\n                            memory[temp8:temp8 + 0x20] = storage[temp10];\n                            var8 = temp10 + 0x01;\n                            var9 = temp8 + 0x20;\n                        \n                            if (var7 <= var9) { goto label_1527; }\n                        \n                        label_1513:\n                            var temp11 = var8;\n                            var temp12 = var9;\n                            memory[temp12:temp12 + 0x20] = storage[temp11];\n                            var8 = temp11 + 0x01;\n                            var9 = temp12 + 0x20;\n                        \n                            if (var7 > var9) { goto label_1513; }\n                        \n                        label_1527:\n                            var temp13 = var7;\n                            var temp14 = temp13 + (var9 - temp13 & 0x1f);\n                            var9 = temp13;\n                            var7 = temp14;\n                            goto label_1530;\n                        } else {\n                            var temp15 = var7;\n                            memory[temp15:temp15 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n                            var7 = temp15 + 0x20;\n                            var9 = var9;\n                            goto label_1530;\n                        }\n                    }\n                } else {\n                    var temp16 = var0;\n                    storage[0x08] = storage[temp16 + 0x01] + storage[0x08];\n                    var4 = storage[temp16 + 0x01];\n                    var3 = storage[temp16] & 0x02 ** 0xa0 - 0x01;\n                    var5 = temp16 + 0x02;\n                    var6 = memory[0x40:0x60];\n                    var7 = var6;\n                    var8 = var5;\n                    var temp17 = storage[var8];\n                    var9 = (!(temp17 & 0x01) * 0x0100 - 0x01 & temp17) / 0x02;\n                \n                    if (!var9) { goto label_1530; }\n                    else { goto label_14EA; }\n                }\n            }\n        } else {\n            var temp18 = storage[var0 + 0x02];\n            var3 = !((!(temp18 & 0x01) * 0x0100 + ~0x00 & temp18) / 0x02);\n        \n            if (!var3) { goto label_1488; }\n        \n            var3 = 0x1488;\n            var4 = storage[var0 + 0x01];\n            var3 = func_16E0(var4);\n            goto label_1488;\n        }\n    }\n    \n    function spentToday() returns (var r0) { return storage[0x08]; }\n    \n    function func_16E0(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (block.timestamp <= storage[0x07] + 0x015180) {\n            var var1 = storage[0x08] + arg0 > storage[0x06];\n        \n            if (var1) {\n            label_1712:\n            \n                if (!var1) {\n                label_171F:\n                    return 0x01;\n                } else {\n                label_1718:\n                    return 0x00;\n                }\n            } else {\n            label_170A:\n                var temp0 = storage[0x08];\n            \n                if (temp0 + arg0 >= temp0) { goto label_171F; }\n                else { goto label_1718; }\n            }\n        } else {\n            storage[0x07] = block.timestamp;\n            storage[0x08] = 0x00;\n            var1 = storage[0x08] + arg0 > storage[0x06];\n        \n            if (var1) { goto label_1712; }\n            else { goto label_170A; }\n        }\n    }\n    \n    function func_1728(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) { return; }\n    \n        memory[0x00:0x20] = arg0;\n        var temp3 = keccak256(memory[0x00:0x20]);\n        var temp4 = var0;\n        var0 = 0x08f6;\n        var var1 = temp3 + temp4;\n        var var2 = arg1 + temp3;\n        var temp5 = var1;\n        var1 = 0x0a37;\n        var temp6 = var2;\n        var var3 = temp6;\n        var2 = temp5;\n    \n        if (var2 <= var3) {\n            var1 = func_181B(var2, var3);\n            var0 = var1;\n            // Error: Could not resolve jump destination!\n        } else {\n        label_182E:\n            var temp7 = var3;\n            storage[temp7] = 0x00;\n            var3 = temp7 + 0x01;\n        \n            if (var2 > var3) { goto label_182E; }\n        \n            var1 = func_181B(var2, var3);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_177C() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_181B(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0151:\n        \n            if (msg.value <= 0x00) { stop(); }\n        \n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = msg.value;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n            stop();\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x01b2;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var var3 = 0x00;\n            \n                if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var var4 = var2;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                storage[temp4] = storage[temp4] & ~0xff;\n                var3 = 0x00;\n            \n                if (var3 >= storage[0x03] + ~0x00) {\n                label_0892:\n                    var var5 = storage[0x03] + ~0x00;\n                    var var6 = 0x08a5;\n                    var var7 = 0x03;\n                    var var8 = var5;\n                    func_1728(var7, var8);\n                \n                    if (storage[0x04] <= storage[0x03]) {\n                    label_08BE:\n                        var temp5 = memory[0x40:0x60];\n                        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        var6 = storage[0x03];\n                        var5 = 0x08be;\n                        changeRequirement(var6);\n                        goto label_08BE;\n                    }\n                } else {\n                label_07C9:\n                    var5 = var2 & 0x02 ** 0xa0 - 0x01;\n                    var6 = 0x03;\n                    var7 = var3;\n                \n                    if (var7 >= storage[var6]) { assert(); }\n                \n                    memory[0x00:0x20] = var6;\n                \n                    if (storage[var7 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var5) {\n                        var4 = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x03] + ~0x00) { goto label_0892; }\n                        else { goto label_07C9; }\n                    } else {\n                        var5 = 0x03;\n                        var temp6 = storage[var5];\n                        var6 = temp6 + ~0x00;\n                    \n                        if (var6 >= temp6) { assert(); }\n                    \n                        memory[0x00:0x20] = var5;\n                        var5 = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                        var6 = 0x03;\n                        var7 = var3;\n                    \n                        if (var7 >= storage[var6]) { assert(); }\n                    \n                        memory[0x00:0x20] = var6;\n                        var temp7 = var7 + keccak256(memory[0x00:0x20]);\n                        storage[temp7] = (var5 & 0x02 ** 0xa0 - 0x01) | (storage[temp7] & ~(0x02 ** 0xa0 - 0x01));\n                        goto label_0892;\n                    }\n                }\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0226;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = isOwner(var2);\n            \n            label_0226:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var2;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0226;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var2 = confirmations(var2, var3);\n                goto label_0226;\n            } else if (var0 == 0x4bc9fdc2) {\n                // Dispatch table entry for calcMaxWithdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var1 = calcMaxWithdraw();\n            \n            label_0283:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n                goto label_0283;\n            } else if (var0 == 0x67eeba0c) {\n                // Dispatch table entry for dailyLimit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = dailyLimit();\n                goto label_0283;\n            } else if (var0 == 0x6b0c932d) {\n                // Dispatch table entry for lastDay()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = lastDay();\n                goto label_0283;\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0226;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                goto label_0226;\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                goto label_0283;\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0397;\n                var2 = msg.data[0x04:0x24];\n                var2, var3, var4, var5 = transactions(var2);\n                var temp12 = memory[0x40:0x60];\n                var6 = temp12;\n                memory[var6:var6 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[var6 + 0x20:var6 + 0x20 + 0x20] = var3;\n                memory[var6 + 0x60:var6 + 0x60 + 0x20] = !!var5;\n                memory[var6 + 0x40:var6 + 0x40 + 0x20] = 0x80;\n                var temp13 = storage[var4];\n                var temp14 = (temp13 & !(temp13 & 0x01) * 0x0100 + ~0x00) / 0x02;\n                memory[var6 + 0x80:var6 + 0x80 + 0x20] = temp14;\n                var7 = var6 + 0x40;\n                var8 = var6 + 0xa0;\n                var var10 = temp14;\n                var var9 = var4;\n            \n                if (!var10) {\n                label_042E:\n                    var temp15 = memory[0x40:0x60];\n                    return memory[temp15:temp15 + var8 - temp15];\n                } else if (0x1f < var10) {\n                    var temp16 = var8;\n                    var temp17 = temp16 + var10;\n                    var8 = temp17;\n                    memory[0x00:0x20] = var9;\n                    var temp18 = keccak256(memory[0x00:0x20]);\n                    memory[temp16:temp16 + 0x20] = storage[temp18];\n                    var9 = temp18 + 0x01;\n                    var10 = temp16 + 0x20;\n                \n                    if (var8 <= var10) { goto label_0425; }\n                \n                label_0411:\n                    var temp19 = var9;\n                    var temp20 = var10;\n                    memory[temp20:temp20 + 0x20] = storage[temp19];\n                    var9 = temp19 + 0x01;\n                    var10 = temp20 + 0x20;\n                \n                    if (var8 > var10) { goto label_0411; }\n                \n                label_0425:\n                    var temp21 = var8;\n                    var temp22 = temp21 + (var10 - temp21 & 0x1f);\n                    var10 = temp21;\n                    var8 = temp22;\n                    goto label_042E;\n                } else {\n                    var temp23 = var8;\n                    memory[temp23:temp23 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                    var10 = var10;\n                    var8 = temp23 + 0x20;\n                    goto label_042E;\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0453;\n                var1 = getOwners();\n            \n            label_0453:\n                var temp24 = memory[0x40:0x60];\n                var2 = temp24;\n                memory[var2:var2 + 0x20] = 0x20;\n                var3 = var2;\n                var temp25 = var3 + 0x20;\n                var temp26 = var1;\n                memory[temp25:temp25 + 0x20] = memory[temp26:temp26 + 0x20];\n                var4 = temp25 + 0x20;\n                var5 = temp26 + 0x20;\n                var6 = memory[temp26:temp26 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_0493:\n                    var temp27 = memory[0x40:0x60];\n                    return memory[temp27:temp27 + (var6 + var4) - temp27];\n                } else {\n                label_0483:\n                    var temp28 = var10;\n                    memory[var8 + temp28:var8 + temp28 + 0x20] = memory[var9 + temp28:var9 + temp28 + 0x20];\n                    var10 = temp28 + 0x20;\n                \n                    if (var10 >= var7) { goto label_0493; }\n                    else { goto label_0483; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0453;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                goto label_0453;\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0453;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                goto label_0453;\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = transactionCount();\n                goto label_0283;\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.sender;\n                memory[0x00:0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x00;\n                var4 = var2;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x01;\n                var temp29 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp29;\n                var5 = var2;\n                var6 = msg.sender;\n            \n                if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n            \n                var temp30 = var2;\n                memory[0x00:0x20] = temp30;\n                memory[0x20:0x40] = 0x01;\n                var temp31 = keccak256(memory[0x00:0x40]);\n                var temp32 = msg.sender;\n                memory[0x00:0x20] = temp32;\n                memory[0x20:0x40] = temp31;\n                var temp33 = keccak256(memory[0x00:0x40]);\n                storage[temp33] = (storage[temp33] & ~0xff) | 0x01;\n                var temp34 = memory[0x40:0x60];\n                log(memory[temp34:temp34 + memory[0x40:0x60] - temp34], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n                var7 = 0x09d5;\n                var8 = temp30;\n                executeTransaction(var8);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var temp35 = msg.data[0x44:0x64];\n                var temp36 = msg.data[temp35 + 0x04:temp35 + 0x04 + 0x20];\n                var temp37 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp37 + (temp36 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp37:temp37 + 0x20] = temp36;\n                memory[temp37 + 0x20:temp37 + 0x20 + temp36] = msg.data[temp35 + 0x24:temp35 + 0x24 + temp36];\n                var4 = temp37;\n                var5 = 0x00;\n                var6 = 0x11dd;\n                var7 = var2;\n                var8 = var3;\n                var9 = var4;\n                var10 = 0x00;\n                var var11 = var7;\n            \n                if (!(var11 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                var10 = storage[0x05];\n                var temp38 = memory[0x40:0x60];\n                var var12 = temp38;\n                memory[0x40:0x60] = var12 + 0x80;\n                memory[var12:var12 + 0x20] = var7 & 0x02 ** 0xa0 - 0x01;\n                memory[var12 + 0x20:var12 + 0x20 + 0x20] = var8;\n                memory[var12 + 0x40:var12 + 0x40 + 0x20] = var9;\n                memory[var12 + 0x60:var12 + 0x60 + 0x20] = 0x00;\n                memory[0x00:0x20] = var10;\n                memory[0x20:0x40] = 0x00;\n                var temp39 = keccak256(memory[0x00:0x40]);\n                var var13 = temp39;\n                storage[var13] = (memory[var12:var12 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[var13] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                storage[var13 + 0x01] = memory[var12 + 0x20:var12 + 0x20 + 0x20];\n                var temp40 = memory[var12 + 0x40:var12 + 0x40 + 0x20];\n                var var14 = 0x1684;\n                var var15 = var13 + 0x02;\n                var var17 = memory[temp40:temp40 + 0x20];\n                var var16 = temp40 + 0x20;\n                var temp41 = var15;\n                var temp42 = storage[temp41];\n                memory[0x00:0x20] = temp41;\n                var var18 = keccak256(memory[0x00:0x20]);\n                var temp43 = var16;\n                var16 = var18 + ((!(temp42 & 0x01) * 0x0100 - 0x01 & temp42) / 0x02 + 0x1f) / 0x20;\n                var var19 = temp43;\n            \n                if (0x1f < var17) {\n                    var temp44 = var17;\n                    storage[var15] = temp44 + temp44 + 0x01;\n                \n                    if (!temp44) {\n                    label_180E:\n                        var temp45 = var16;\n                        var16 = 0x181b;\n                        var17 = temp45;\n                        var temp46 = var17;\n                        var17 = 0x0a37;\n                        var temp47 = var18;\n                        var19 = temp47;\n                        var18 = temp46;\n                    \n                        if (var18 <= var19) {\n                            var17 = func_181B(var18, var19);\n                            var16 = var17;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                        label_182E:\n                            var temp48 = var19;\n                            storage[temp48] = 0x00;\n                            var19 = temp48 + 0x01;\n                        \n                            if (var18 > var19) { goto label_182E; }\n                        \n                            var17 = func_181B(var18, var19);\n                            // Error: Could not resolve method call return address!\n                        }\n                    } else {\n                        var temp49 = var17;\n                        var temp50 = var19;\n                        var17 = temp50;\n                        var19 = var17 + temp49;\n                    \n                        if (var19 <= var17) { goto label_180E; }\n                    \n                    label_17FC:\n                        var temp51 = var17;\n                        var temp52 = var18;\n                        storage[temp52] = memory[temp51:temp51 + 0x20];\n                        var17 = temp51 + 0x20;\n                        var19 = var19;\n                        var18 = temp52 + 0x01;\n                    \n                        if (var19 <= var17) { goto label_180E; }\n                        else { goto label_17FC; }\n                    }\n                } else {\n                    var temp53 = var17;\n                    storage[var15] = temp53 + temp53 | (memory[var19:var19 + 0x20] & ~0xff);\n                    goto label_180E;\n                }\n            } else if (var0 == 0xcea08621) {\n                // Dispatch table entry for changeDailyLimit(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24];\n                changeDailyLimit(var2);\n                stop();\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = MAX_OWNER_COUNT();\n                goto label_0283;\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = required();\n                goto label_0283;\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var temp54 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp54 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp54;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0199;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else if (var0 == 0xf059cf2b) {\n                // Dispatch table entry for spentToday()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0283;\n                var2 = spentToday();\n                goto label_0283;\n            } else { goto label_0151; }\n        }\n    }\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var1 = arg0;\n        var var2 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var3 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] & ~0xff;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function calcMaxWithdraw() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (block.timestamp <= storage[0x07] + 0x015180) { return storage[0x06] - storage[0x08]; }\n        else { return storage[0x06]; }\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x05]) {\n        label_0AA1:\n            return var0;\n        } else {\n        label_0A49:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_0A8B; }\n                else { goto label_0A6D; }\n            } else if (var2) {\n            label_0A8B:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0A3E:\n                \n                    if (var1 >= storage[0x05]) { goto label_0AA1; }\n                    else { goto label_0A49; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0A3E;\n                }\n            } else {\n            label_0A6D:\n                var2 = arg1;\n            \n                if (!var2) { goto label_0A8B; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_0A8B;\n            }\n        }\n    }\n    \n    function dailyLimit() returns (var r0) { return storage[0x06]; }\n    \n    function lastDay() returns (var r0) { return storage[0x07]; }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var0 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x32;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_0B36; }\n            else { goto label_0B33; }\n        } else if (var4) {\n        label_0B36:\n        \n            if (var4) {\n            label_0B3F:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_0B49:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var var5 = storage[0x03];\n                var4 = 0x03;\n                var var6 = var5 + 0x01;\n                var var7 = 0x0b81;\n                var var8 = var4;\n                var var9 = var6;\n                func_1728(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = var5 + keccak256(memory[0x00:0x20]);\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                var temp3 = arg0 & temp2;\n                storage[temp1] = (storage[temp1] & ~temp2) | temp3;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n            label_0B3C:\n            \n                if (var2) { goto label_0B49; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0B33:\n            var4 = !var3;\n        \n            if (var4) { goto label_0B3F; }\n            else { goto label_0B3C; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= storage[0x03]) {\n        label_0C76:\n            return var0;\n        } else {\n        label_0BFA:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var5 = 0x03;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff) {\n                var temp1 = var1 + 0x01;\n                var1 = temp1;\n            \n                if (var1 != storage[0x04]) { goto label_0C6D; }\n                else { goto label_0C65; }\n            } else if (var1 != storage[0x04]) {\n            label_0C6D:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_0C76; }\n                else { goto label_0BFA; }\n            } else {\n            label_0C65:\n                var0 = 0x01;\n                goto label_0C76;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x03]) {\n        label_0CF6:\n            return var0;\n        } else {\n        label_0C8D:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var4 = 0x03;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_0C82:\n            \n                if (var1 >= storage[0x03]) { goto label_0CF6; }\n                else { goto label_0C8D; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_0C82;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        return arg0, r1, r2, r3;\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x0d39;\n        var0 = func_177C();\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_0D8F:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp4 + 0x01;\n            var6 = temp2 + 0x20;\n        \n            if (var4 <= var6) { goto label_0D8F; }\n        \n        label_0D71:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_0D71; }\n            else { goto label_0D8F; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x0da2;\n        var0 = func_177C();\n        var var1 = 0x0daa;\n        var1 = func_177C();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_0E55:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_0EBC:\n                        return var0;\n                    } else {\n                    label_0E86:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_0EBC; }\n                        else { goto label_0E86; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_0EBC; }\n                    else { goto label_0E86; }\n                }\n            } else {\n            label_0DE5:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_0E27; }\n                    else { goto label_0E09; }\n                } else if (var4) {\n                label_0E27:\n                \n                    if (!var4) {\n                    label_0E4C:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_0E55; }\n                        else { goto label_0DE5; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3;\n                        var2 = var2 + 0x01;\n                        goto label_0E4C;\n                    }\n                } else {\n                label_0E09:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_0E27; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_0E27;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_0E55; }\n            else { goto label_0DE5; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x0ed0;\n        var0 = func_177C();\n        var var1 = 0x0ed8;\n        var1 = func_177C();\n        var var2 = 0x00;\n        var var4 = storage[0x03];\n        var var3 = var2;\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_0FD0:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_1041:\n                        return var0;\n                    } else {\n                    label_1000:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_1041; }\n                        else { goto label_1000; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_1041; }\n                    else { goto label_1000; }\n                }\n            } else {\n            label_0F15:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var6 = 0x03;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp6 + 0x40])] & 0xff)) {\n                label_0FC7:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_0FD0; }\n                    else { goto label_0F15; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                    var3 = var3;\n                    var2 = var2 + 0x01;\n                    goto label_0FC7;\n                }\n            }\n        } else {\n            var temp7 = MSIZE();\n            var temp8 = var4;\n            memory[temp7:temp7 + 0x20] = temp8;\n            memory[0x40:0x60] = temp7 + temp8 * 0x20 + 0x20;\n            var1 = temp7;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_0FD0; }\n            else { goto label_0F15; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x32;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_108B; }\n            else { goto label_1088; }\n        } else if (var2) {\n        label_108B:\n        \n            if (var2) {\n            label_1094:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_109E:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_1091:\n            \n                if (var0) { goto label_109E; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_1088:\n            var2 = !var1;\n        \n            if (var2) { goto label_1094; }\n            else { goto label_1091; }\n        }\n    }\n    \n    function changeDailyLimit(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        storage[0x06] = temp0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xc71bdc6afaf9b1aa90a7078191d4fc1adf3bf680fca3183697df6b0dc226bca2]);\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var2 = arg1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1373:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = ~0xff;\n            storage[temp2] = temp3 & storage[temp2];\n            var temp4 = arg1;\n            memory[0x00:0x20] = temp4 & temp0;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = (temp3 & storage[temp5]) | 0x01;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n        label_12DB:\n            var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var3) {\n                var2 = var2;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1373; }\n                else { goto label_12DB; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp8 = var5 + keccak256(memory[0x00:0x20]);\n                storage[temp8] = (var3 & 0x02 ** 0xa0 - 0x01) | (storage[temp8] & ~(0x02 ** 0xa0 - 0x01));\n                goto label_1373;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = var0;\n        var var1 = var0;\n        var var2 = arg0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n        var var3 = 0x1455;\n        var var4 = arg0;\n        var3 = isConfirmed(var4);\n        var1 = var3;\n        var3 = var1;\n    \n        if (var3) {\n        label_1488:\n        \n            if (!var3) {\n            label_09D8:\n                return;\n            } else {\n                var temp0 = var0 + 0x03;\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n            \n                if (var1) {\n                    var temp1 = var0;\n                    var3 = storage[temp1] & 0x02 ** 0xa0 - 0x01;\n                    var4 = storage[temp1 + 0x01];\n                    var var5 = temp1 + 0x02;\n                    var var6 = memory[0x40:0x60];\n                    var var7 = var6;\n                    var var8 = var5;\n                    var temp2 = storage[var8];\n                    var var9 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n                \n                    if (!var9) {\n                    label_1530:\n                        var temp3 = memory[0x40:0x60];\n                        var temp4;\n                        temp4, memory[temp3:temp3 + 0x00] = address(var3).call.gas(msg.gas - 0x8796).value(var4)(memory[temp3:temp3 + var7 - temp3]);\n                    \n                        if (!temp4) {\n                            var temp5 = memory[0x40:0x60];\n                            log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-4]]);\n                            var temp6 = var0 + 0x03;\n                            storage[temp6] = storage[temp6] & ~0xff;\n                        \n                            if (var1) { goto label_09D8; }\n                        \n                            storage[0x08] = storage[0x08] - storage[var0 + 0x01];\n                            return;\n                        } else {\n                            var temp7 = memory[0x40:0x60];\n                            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-4]]);\n                            goto label_09D8;\n                        }\n                    } else {\n                    label_14EA:\n                    \n                        if (0x1f < var9) {\n                            var temp8 = var7;\n                            var temp9 = temp8 + var9;\n                            var7 = temp9;\n                            memory[0x00:0x20] = var8;\n                            var temp10 = keccak256(memory[0x00:0x20]);\n                            memory[temp8:temp8 + 0x20] = storage[temp10];\n                            var8 = temp10 + 0x01;\n                            var9 = temp8 + 0x20;\n                        \n                            if (var7 <= var9) { goto label_1527; }\n                        \n                        label_1513:\n                            var temp11 = var8;\n                            var temp12 = var9;\n                            memory[temp12:temp12 + 0x20] = storage[temp11];\n                            var8 = temp11 + 0x01;\n                            var9 = temp12 + 0x20;\n                        \n                            if (var7 > var9) { goto label_1513; }\n                        \n                        label_1527:\n                            var temp13 = var7;\n                            var temp14 = temp13 + (var9 - temp13 & 0x1f);\n                            var9 = temp13;\n                            var7 = temp14;\n                            goto label_1530;\n                        } else {\n                            var temp15 = var7;\n                            memory[temp15:temp15 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n                            var7 = temp15 + 0x20;\n                            var9 = var9;\n                            goto label_1530;\n                        }\n                    }\n                } else {\n                    var temp16 = var0;\n                    storage[0x08] = storage[temp16 + 0x01] + storage[0x08];\n                    var4 = storage[temp16 + 0x01];\n                    var3 = storage[temp16] & 0x02 ** 0xa0 - 0x01;\n                    var5 = temp16 + 0x02;\n                    var6 = memory[0x40:0x60];\n                    var7 = var6;\n                    var8 = var5;\n                    var temp17 = storage[var8];\n                    var9 = (!(temp17 & 0x01) * 0x0100 - 0x01 & temp17) / 0x02;\n                \n                    if (!var9) { goto label_1530; }\n                    else { goto label_14EA; }\n                }\n            }\n        } else {\n            var temp18 = storage[var0 + 0x02];\n            var3 = !((!(temp18 & 0x01) * 0x0100 + ~0x00 & temp18) / 0x02);\n        \n            if (!var3) { goto label_1488; }\n        \n            var3 = 0x1488;\n            var4 = storage[var0 + 0x01];\n            var3 = func_16E0(var4);\n            goto label_1488;\n        }\n    }\n    \n    function spentToday() returns (var r0) { return storage[0x08]; }\n    \n    function func_16E0(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (block.timestamp <= storage[0x07] + 0x015180) {\n            var var1 = storage[0x08] + arg0 > storage[0x06];\n        \n            if (var1) {\n            label_1712:\n            \n                if (!var1) {\n                label_171F:\n                    return 0x01;\n                } else {\n                label_1718:\n                    return 0x00;\n                }\n            } else {\n            label_170A:\n                var temp0 = storage[0x08];\n            \n                if (temp0 + arg0 >= temp0) { goto label_171F; }\n                else { goto label_1718; }\n            }\n        } else {\n            storage[0x07] = block.timestamp;\n            storage[0x08] = 0x00;\n            var1 = storage[0x08] + arg0 > storage[0x06];\n        \n            if (var1) { goto label_1712; }\n            else { goto label_170A; }\n        }\n    }\n    \n    function func_1728(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) { return; }\n    \n        memory[0x00:0x20] = arg0;\n        var temp3 = keccak256(memory[0x00:0x20]);\n        var temp4 = var0;\n        var0 = 0x08f6;\n        var var1 = temp3 + temp4;\n        var var2 = arg1 + temp3;\n        var temp5 = var1;\n        var1 = 0x0a37;\n        var temp6 = var2;\n        var var3 = temp6;\n        var2 = temp5;\n    \n        if (var2 <= var3) {\n            var1 = func_181B(var2, var3);\n            var0 = var1;\n            // Error: Could not resolve jump destination!\n        } else {\n        label_182E:\n            var temp7 = var3;\n            storage[temp7] = 0x00;\n            var3 = temp7 + 0x01;\n        \n            if (var2 > var3) { goto label_182E; }\n        \n            var1 = func_181B(var2, var3);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_177C() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_181B(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 53.846399784088135,
	"usage": {
		"completion_tokens": 534,
		"prompt_tokens": 16310,
		"total_tokens": 16844
	}
}