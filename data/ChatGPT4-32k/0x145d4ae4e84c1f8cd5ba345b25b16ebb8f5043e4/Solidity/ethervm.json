{
	"address": "0x145d4ae4e84c1f8cd5ba345b25b16ebb8f5043e4",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "In order to rewrite the given decompiled code in Solidity, we need to carefully examine the function calls, method dispatch patterns, and exact logic of the operations. The given code seems to be a part of a contract that represents a token (ERC20-like behavior is visible) and has some additional features like bot management, owner management and trading.\n\nNote that the decompiled code is not a fully defined contract, it's missing some parts. The recreated contract will not be identical, but will give an idea of how it could look like in Solidity:\n\n```solidity\npragma solidity ^0.7.0;\n\ncontract MyContract {\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowances;\n    mapping (address => bool) public bots;\n    address public owner;\n    uint256 public totalSupply;\n    uint256 public maxTxAmount;\n    uint256 public maxWalletSize;\n    bool public tradingOpen;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowances[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(allowances[_from][msg.sender] >= _value);\n        require(balances[_from] >= _value);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowances[_from][msg.sender] -= _value;\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function addBots(address[] memory _bots) public onlyOwner {\n        for (uint256 i = 0; i < _bots.length; i++) {\n            bots[_bots[i]] = true;\n        }\n    }\n\n    function delBots(address[] memory _bots) public onlyOwner {\n        for (uint256 i = 0; i < _bots.length; i++) {\n            bots[_bots[i]] = false;\n        }\n    }\n\n    function openTrading() public onlyOwner {\n        tradingOpen = true;\n    }\n}\n```\n\nPlease, note this code snippet is a simplified version of the decompiled bytecode and may not include all the original features, it's just for illustration. It is always challenging to recreate the original Solidity code from EVM Bytecode as some information like variable names, comments, etc., are lost during the compilation process.",
				"role": "assistant"
			}
		}
	],
	"created": 1700632069,
	"id": "chatcmpl-8NaNR5zdfvybuYtNS7uRgHk3826Oi",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (0x751039fc > var0) {\n                if (0x313ce567 > var0) {\n                    if (var0 == 0x06fdde03) {\n                        // Dispatch table entry for name()\n                    label_012F:\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var temp0 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp0 + 0x40;\n                        memory[temp0:temp0 + 0x20] = 0x06;\n                        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x2820a1a6a0a7 << 0xd1;\n                        var1 = 0x0164;\n                        var var2 = temp0;\n                        var var3 = memory[0x40:0x60];\n                        var1 = name(var2, var3);\n                    \n                    label_0164:\n                        var temp1 = memory[0x40:0x60];\n                        return memory[temp1:temp1 + var1 - temp1];\n                    } else if (var0 == 0x095ea7b3) {\n                        // Dispatch table entry for approve(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x018d;\n                        var2 = 0x0188;\n                        var3 = msg.data.length;\n                        var var4 = 0x04;\n                        var2, var3 = func_15E7(var3, var4);\n                        var4 = 0x00;\n                        var var5 = 0x03df;\n                        var var6 = msg.sender;\n                        var var7 = var2;\n                        var var8 = var3;\n                        func_0A97(var6, var7, var8);\n                    \n                    label_03DF:\n                        var4 = 0x01;\n                        var1 = var4;\n                        // Error: Could not resolve jump destination!\n                    } else if (var0 == 0x0faee56f) {\n                        // Dispatch table entry for 0x0faee56f (unknown)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x01b3;\n                        var2 = storage[0x12];\n                    \n                    label_01B3:\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = var2;\n                        var2 = temp2 + 0x20;\n                        goto label_0164;\n                    } else if (var0 == 0x18160ddd) {\n                        // Dispatch table entry for totalSupply()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x01b3;\n                        var1 = totalSupply();\n                        goto label_01B3;\n                    } else if (var0 == 0x23b872dd) {\n                        // Dispatch table entry for transferFrom(address,address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x018d;\n                        var2 = 0x01f1;\n                        var3 = msg.data.length;\n                        var4 = 0x04;\n                        var2, var3, var4 = func_1613(var3, var4);\n                        var5 = 0x00;\n                        var6 = 0x0417;\n                        var7 = var2;\n                        var8 = var3;\n                        var var9 = var4;\n                        func_0BBB(var7, var8, var9);\n                        var6 = 0x0469;\n                        var7 = var2;\n                        var8 = msg.sender;\n                        var9 = 0x0464;\n                        var temp3 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp3 + 0x60;\n                        memory[temp3:temp3 + 0x20] = 0x28;\n                        memory[temp3 + 0x20:temp3 + 0x20 + 0x28] = code[0x1a30:0x1a58];\n                        memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x02;\n                        var temp4 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp4;\n                        var var10 = storage[keccak256(memory[0x00:0x40])];\n                        var var11 = var4;\n                        var var12 = temp3;\n                        var9 = func_11D4(var10, var11, var12);\n                        func_0A97(var7, var8, var9);\n                        // Error: Could not resolve method call return address!\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x313ce567) {\n                    // Dispatch table entry for decimals()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0x09;\n                    var1 = temp5 + 0x20;\n                    goto label_0164;\n                } else if (var0 == 0x31c2d847) {\n                    // Dispatch table entry for delBots(address[])\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0232;\n                    var2 = 0x022d;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_166A(var3, var4);\n                    func_022D(var2);\n                    stop();\n                } else if (var0 == 0x3bbac579) {\n                    // Dispatch table entry for isBot(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x018d;\n                    var2 = 0x024f;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_172F(var3, var4);\n                    var1 = func_024F(var2);\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = !!var1;\n                    var1 = temp6 + 0x20;\n                    goto label_0164;\n                } else if (var0 == 0x70a08231) {\n                    // Dispatch table entry for balanceOf(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b3;\n                    var2 = 0x0288;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_172F(var3, var4);\n                    var1 = func_0288(var2);\n                    goto label_01B3;\n                } else if (var0 == 0x715018a6) {\n                    // Dispatch table entry for renounceOwnership()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0232;\n                    renounceOwnership();\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0xa9059cbb > var0) {\n                if (var0 == 0x751039fc) {\n                    // Dispatch table entry for removeLimits()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0232;\n                    removeLimits();\n                    stop();\n                } else if (var0 == 0x7d1db4a5) {\n                    // Dispatch table entry for _maxTxAmount()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b3;\n                    var2 = storage[0x0f];\n                    goto label_01B3;\n                } else if (var0 == 0x8da5cb5b) {\n                    // Dispatch table entry for owner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = storage[0x00] & (0x01 << 0xa0) - 0x01;\n                    var1 = temp7 + 0x20;\n                    goto label_0164;\n                } else if (var0 == 0x8f9a55c0) {\n                    // Dispatch table entry for _maxWalletSize()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b3;\n                    var2 = storage[0x10];\n                    goto label_01B3;\n                } else if (var0 == 0x95d89b41) { goto label_012F; }\n                    // Dispatch table entry for symbol()\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018d;\n                var2 = 0x033c;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_15E7(var3, var4);\n                var4 = 0x00;\n                var5 = 0x03df;\n                var6 = msg.sender;\n                var7 = var2;\n                var8 = var3;\n                func_0BBB(var6, var7, var8);\n                goto label_03DF;\n            } else if (var0 == 0xbf474bed) {\n                // Dispatch table entry for 0xbf474bed (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b3;\n                var2 = storage[0x11];\n                goto label_01B3;\n            } else if (var0 == 0xc9567bf9) {\n                // Dispatch table entry for openTrading()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0232;\n            \n                if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n                    var temp16 = memory[0x40:0x60];\n                    memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;\n                    var3 = temp16 + 0x04;\n                    var2 = 0x049d;\n                    var2 = func_18A5(var3);\n                    goto label_049D;\n                } else if (!(storage[0x14] / (0x01 << 0xa0) & 0xff)) {\n                    storage[0x13] = (storage[0x13] & ~((0x01 << 0xa0) - 0x01)) | 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                    var2 = 0x0712;\n                    var3 = address(this);\n                    var4 = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                    var5 = 0x0704;\n                    var6 = 0x09;\n                    var7 = 0x0a;\n                    var5 = func_187F(var6, var7);\n                    func_0704(var3, var4, var5);\n                    var2 = storage[0x13] & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                    var3 = 0xc45a0155;\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n                    var4 = temp8 + 0x04;\n                    var temp9 = memory[0x40:0x60];\n                    var temp10;\n                    temp10, memory[temp9:temp9 + 0x20] = address(var2).staticcall.gas(msg.gas)(memory[temp9:temp9 + var4 - temp9]);\n                    var5 = !temp10;\n                \n                    if (!var5) {\n                        var temp11 = memory[0x40:0x60];\n                        var temp12 = returndata.length;\n                        memory[0x40:0x60] = temp11 + (temp12 + 0x1f & ~0x1f);\n                        var2 = 0x0789;\n                        var4 = temp11;\n                        var3 = var4 + temp12;\n                        var5 = 0x00;\n                    \n                        if (var3 - var4 i< 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var6 = memory[var4:var4 + 0x20];\n                        var7 = 0x1290;\n                        var8 = var6;\n                        func_15BF(var8);\n                        var2 = var6;\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        var temp13 = returndata.length;\n                        memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp14 = memory[0x40:0x60];\n                    memory[temp14:temp14 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp14 + 0x04:temp14 + 0x04 + 0x20] = 0x20;\n                    memory[temp14 + 0x24:temp14 + 0x24 + 0x20] = 0x17;\n                    memory[temp14 + 0x44:temp14 + 0x44 + 0x20] = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n                    var2 = temp14 + 0x64;\n                \n                label_049D:\n                    var temp15 = memory[0x40:0x60];\n                    revert(memory[temp15:temp15 + var2 - temp15]);\n                }\n            } else if (var0 == 0xd34628cc) {\n                // Dispatch table entry for addBots(address[])\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0232;\n                var2 = 0x0387;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_166A(var3, var4);\n                func_0387(var2);\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b3;\n                var2 = 0x03a7;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_174C(var3, var4);\n                var1 = func_03A7(var2, var3);\n                goto label_01B3;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (msg.data.length) { revert(memory[0x00:0x00]); }\n        else { stop(); }\n    }\n    \n    function func_022D(var arg0) {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x00;\n        \n            if (var0 >= memory[arg0:arg0 + 0x20]) {\n            label_050E:\n                return;\n            } else {\n            label_04B3:\n                var var1 = 0x00;\n                var var2 = 0x04;\n                var var3 = 0x00;\n                var var4 = arg0;\n                var var5 = var0;\n            \n                if (var5 < memory[var4:var4 + 0x20]) {\n                    var temp0 = var3;\n                    memory[temp0:temp0 + 0x20] = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20] & (0x01 << 0xa0) - 0x01;\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n                    var temp1 = keccak256(memory[0x00:0x00 + temp0 + 0x40]);\n                    storage[temp1] = !!var1 | (storage[temp1] & ~0xff);\n                    var1 = var0;\n                    var2 = 0x0506;\n                    var3 = var1;\n                    var2 = func_18F0(var3);\n                    var0 = var2;\n                \n                    if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_050E; }\n                    else { goto label_04B3; }\n                } else {\n                    var var6 = 0x04ca;\n                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x049d;\n            var1 = temp2 + 0x04;\n            var0 = func_18A5(var1);\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function func_024F(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_0288(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0387(var arg0) {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x00;\n        \n            if (var0 >= memory[arg0:arg0 + 0x20]) {\n            label_050E:\n                return;\n            } else {\n            label_0A3C:\n                var var1 = 0x01;\n                var var2 = 0x04;\n                var var3 = 0x00;\n                var var4 = arg0;\n                var var5 = var0;\n            \n                if (var5 < memory[var4:var4 + 0x20]) {\n                    var temp0 = var3;\n                    memory[temp0:temp0 + 0x20] = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20] & (0x01 << 0xa0) - 0x01;\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n                    var temp1 = keccak256(memory[0x00:0x00 + temp0 + 0x40]);\n                    storage[temp1] = !!var1 | (storage[temp1] & ~0xff);\n                    var1 = var0;\n                    var2 = 0x0a8f;\n                    var3 = var1;\n                    var2 = func_18F0(var3);\n                    var0 = var2;\n                \n                    if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_050E; }\n                    else { goto label_0A3C; }\n                } else {\n                    var var6 = 0x0a53;\n                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp2 + 0x04;\n            var0 = 0x049d;\n            var0 = func_18A5(var1);\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function func_03A7(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function totalSupply() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x03f7;\n        var var2 = 0x09;\n        var var3 = 0x0a;\n        var1 = func_187F(var2, var3);\n        var2 = var1;\n        var1 = 0x0405;\n        var3 = 0x3b9aca00;\n        return func_188E(var2, var3);\n    }\n    \n    function renounceOwnership() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & (0x01 << 0xa0) - 0x01, 0x00]);\n            storage[0x00] = storage[0x00] & ~((0x01 << 0xa0) - 0x01);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var var0 = 0x049d;\n            var var1 = temp0 + 0x04;\n            var0 = func_18A5(var1);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function removeLimits() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x05bc;\n            var var1 = 0x09;\n            var var2 = 0x0a;\n            var0 = func_187F(var1, var2);\n            var1 = var0;\n            var0 = 0x05ca;\n            var2 = 0x3b9aca00;\n            var0 = func_188E(var1, var2);\n            storage[0x0f] = var0;\n            var0 = 0x05d9;\n            var1 = 0x09;\n            var2 = 0x0a;\n            var0 = func_187F(var1, var2);\n            var temp0 = var0;\n            var0 = 0x05e7;\n            var1 = temp0;\n            var2 = 0x3b9aca00;\n            var0 = func_188E(var1, var2);\n            storage[0x10] = var0;\n            var0 = 0x947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf;\n            var1 = 0x0617;\n            var2 = 0x09;\n            var var3 = 0x0a;\n            var1 = func_187F(var2, var3);\n            var2 = var1;\n            var1 = 0x0625;\n            var3 = 0x3b9aca00;\n            var1 = func_188E(var2, var3);\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = var1;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-2]]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x049d;\n            var1 = temp3 + 0x04;\n            var0 = func_18A5(var1);\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + var0 - temp4]);\n        }\n    }\n    \n    function func_0704(var arg0, var arg1, var arg2) {\n        var temp0 = arg2;\n        arg2 = 0x0464;\n        var var0 = temp0;\n        var var1 = 0x3b9aca00;\n        arg2 = func_188E(var0, var1);\n        func_0A97(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0A97(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x24;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = 0x72657373 << 0xe0;\n            var0 = temp9 + 0x84;\n            goto label_049D;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = temp0 & arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x22;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7373 << 0xf0;\n            var var0 = temp7 + 0x84;\n        \n        label_049D:\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_0BBB(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x25;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n            memory[temp17 + 0x64:temp17 + 0x64 + 0x20] = 0x6472657373 << 0xd8;\n            var0 = temp17 + 0x84;\n            goto label_049D;\n        } else if (!(arg1 & (0x01 << 0xa0) - 0x01)) {\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = 0x20;\n            memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x23;\n            memory[temp16 + 0x44:temp16 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n            memory[temp16 + 0x64:temp16 + 0x64 + 0x20] = 0x657373 << 0xe8;\n            var0 = temp16 + 0x84;\n            goto label_049D;\n        } else if (arg2 > 0x00) {\n            var var0 = 0x00;\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var var1 = storage[var0] & temp0 == temp0 & arg0;\n        \n            if (storage[var0] & temp0 == temp0 & arg0) {\n                var temp14 = (0x01 << 0xa0) - 0x01;\n            \n                if (storage[0x00] & temp14 == temp14 & arg1) { goto label_1091; }\n                else { goto label_0D16; }\n            } else if (!var1) {\n            label_1091:\n            \n                if (!var0) {\n                label_110B:\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    var1 = 0x112e;\n                    var var2 = storage[keccak256(memory[0x00:0x40])];\n                    var var3 = arg2;\n                    var1 = func_1501(var2, var3);\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var1 = 0x1173;\n                    var2 = 0x1154;\n                    var3 = arg2;\n                    var var4 = var0;\n                    var2 = func_1501(var3, var4);\n                    var1 = func_1154(arg1, var2);\n                    var temp1 = (0x01 << 0xa0) - 0x01;\n                    memory[0x00:0x20] = arg1 & temp1;\n                    memory[0x20:0x40] = 0x01;\n                    var temp2 = var1;\n                    var1 = arg1 & temp1;\n                    storage[keccak256(memory[0x00:0x40])] = temp2;\n                    var2 = arg0 & temp1;\n                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                    var4 = 0x11bd;\n                    var var5 = arg2;\n                    var var6 = var0;\n                    var4 = func_1501(var5, var6);\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var4;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [stack[-2], stack[-3], stack[-4]]);\n                    return;\n                } else {\n                    memory[0x00:0x20] = address(this);\n                    memory[0x20:0x40] = 0x01;\n                    var2 = storage[keccak256(memory[0x00:0x40])];\n                    var1 = 0x10b1;\n                    var3 = var0;\n                    var1 = func_14A2(var2, var3);\n                    memory[0x00:0x20] = address(this);\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var1 = address(this);\n                    var temp5 = memory[0x40:0x60];\n                    var2 = arg0 & (0x01 << 0xa0) - 0x01;\n                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                    memory[temp5:temp5 + 0x20] = var0;\n                    var4 = temp5 + 0x20;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + var4 - temp6], [stack[-2], stack[-3], stack[-4]]);\n                    goto label_110B;\n                }\n            } else {\n            label_0D16:\n                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x04;\n                var1 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n            \n                if (var1) {\n                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                \n                    if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { goto label_0D60; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (var1) {\n                label_0D60:\n                    var1 = 0x0d8c;\n                    var2 = 0x64;\n                    var3 = 0x0d86;\n                \n                    if (storage[0x0e] > storage[0x0b]) {\n                        var5 = storage[0x09];\n                        var4 = arg2;\n                        var6 = 0x00;\n                    \n                        if (0x00 - var4) {\n                            var var7 = 0x00;\n                            var var8 = 0x122c;\n                            var var9 = var5;\n                            var var10 = var4;\n                            var8 = func_188E(var9, var10);\n                            var temp7 = var8;\n                            var7 = temp7;\n                            var8 = var5;\n                            var9 = 0x1239;\n                            var10 = var4;\n                            var var11 = var7;\n                            var9 = func_199C(var10, var11);\n                        \n                            if (var9 == var8) {\n                                var3 = var7;\n                                // Error: Could not resolve jump destination!\n                            } else {\n                                var temp8 = memory[0x40:0x60];\n                                memory[temp8:temp8 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n                                memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x21;\n                                memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n                                memory[temp8 + 0x64:temp8 + 0x64 + 0x20] = 0x77 << 0xf8;\n                                var8 = temp8 + 0x84;\n                            \n                            label_049D:\n                                var temp9 = memory[0x40:0x60];\n                                revert(memory[temp9:temp9 + var8 - temp9]);\n                            }\n                        } else {\n                            var6 = 0x00;\n                            var3 = var6;\n                            // Error: Could not resolve jump destination!\n                        }\n                    } else {\n                        var3 = func_0D74(arg2);\n                    \n                    label_0D86:\n                        var temp10 = var2;\n                        var2 = var3;\n                        var3 = temp10;\n                        var4 = 0x00;\n                        var5 = 0x1290;\n                        var6 = var2;\n                        var7 = var3;\n                        var temp11 = memory[0x40:0x60];\n                        var8 = temp11;\n                        memory[0x40:0x60] = var8 + 0x40;\n                        memory[var8:var8 + 0x20] = 0x1a;\n                        memory[var8 + 0x20:var8 + 0x20 + 0x20] = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n                        var9 = 0x00;\n                        var10 = var8;\n                    \n                        if (var7) {\n                            var10 = 0x00;\n                            var11 = 0x1205;\n                            var var12 = var7;\n                            var var13 = var6;\n                            var11 = func_199C(var12, var13);\n                            var5 = var11;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            var temp12 = memory[0x40:0x60];\n                            memory[temp12:temp12 + 0x20] = 0x461bcd << 0xe5;\n                            var temp13 = var10;\n                            var10 = 0x049d;\n                            var12 = temp12 + 0x04;\n                            var11 = temp13;\n                            var10 = name(var11, var12);\n                            goto label_049D;\n                        }\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n            memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x29;\n            memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n            memory[temp15 + 0x64:temp15 + 0x64 + 0x20] = 0x7468616e207a65726f << 0xb8;\n            var0 = temp15 + 0x84;\n            goto label_049D;\n        }\n    }\n    \n    function func_0D74(var arg0) returns (var r0) {\n        var var0 = storage[0x07];\n        var temp0 = var0;\n        var0 = arg0;\n        var var1 = temp0;\n        var var2 = 0x00;\n    \n        if (!(0x00 - var0)) { return 0x00; }\n    \n        var var3 = 0x00;\n        var var4 = 0x122c;\n        var var5 = var1;\n        var var6 = var0;\n        var4 = func_188E(var5, var6);\n        var temp1 = var4;\n        var3 = temp1;\n        var4 = var1;\n        var5 = 0x1239;\n        var6 = var0;\n        var var7 = var3;\n        var5 = func_199C(var6, var7);\n    \n        if (var5 == var4) { return var3; }\n    \n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n        memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x21;\n        memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = 0x77 << 0xf8;\n        var4 = temp2 + 0x84;\n        var temp3 = memory[0x40:0x60];\n        revert(memory[temp3:temp3 + var4 - temp3]);\n    }\n    \n    function func_1154(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var var0 = arg1;\n        arg1 = storage[keccak256(memory[0x00:0x40])];\n        r0 = func_14A2(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_11D4(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) {\n            var1 = 0x00;\n            var var2 = 0x1205;\n            var var3 = arg1;\n            var var4 = arg0;\n            return func_1989(var3, var4);\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = var1;\n            var1 = 0x049d;\n            var2 = temp1;\n            var3 = temp0 + 0x04;\n            var1 = name(var2, var3);\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + var1 - temp2]);\n        }\n    }\n    \n    function func_14A2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x14af;\n        var var3 = arg1;\n        var var4 = arg0;\n        var2 = func_1976(var3, var4);\n        var1 = var2;\n    \n        if (var1 >= arg0) { return var1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1b;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var2 = temp0 + 0x64;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + var2 - temp1]);\n    }\n    \n    function func_1501(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1290;\n        var var2 = arg0;\n        var var3 = arg1;\n        var temp0 = memory[0x40:0x60];\n        var var4 = temp0;\n        memory[0x40:0x60] = var4 + 0x40;\n        memory[var4:var4 + 0x20] = 0x1e;\n        memory[var4 + 0x20:var4 + 0x20 + 0x20] = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        return func_11D4(var2, var3, var4);\n    }\n    \n    function name(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = 0x00;\n    \n        if (var3 >= var2) {\n        label_159E:\n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = 0x00;\n            return temp3 + (temp2 + 0x1f & ~0x1f) + 0x40;\n        } else {\n        label_158B:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_159E; }\n            else { goto label_158B; }\n        }\n    }\n    \n    function func_15BF(var arg0) {\n        var temp0 = arg0;\n    \n        if (temp0 == temp0 & (0x01 << 0xa0) - 0x01) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_15D7(var arg0) returns (var r0) {\n        var var0 = msg.data[arg0:arg0 + 0x20];\n        var var1 = 0x15e2;\n        var var2 = var0;\n        func_15BF(var2);\n        return var0;\n    }\n    \n    function func_15E7(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x1605;\n        var var4 = var2;\n        func_15BF(var4);\n        r0 = var2;\n        arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_1613(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var var3 = msg.data[arg1:arg1 + 0x20];\n        var var4 = 0x1633;\n        var var5 = var3;\n        func_15BF(var5);\n        var0 = var3;\n        var3 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var4 = 0x1643;\n        var5 = var3;\n        func_15BF(var5);\n        r0 = var0;\n        arg0 = var3;\n        arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n        return r0, arg0, arg1;\n    }\n    \n    function func_166A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n    \n        if (arg0 - arg1 i< var1) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0xffffffffffffffff;\n    \n        if (var2 > var3) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1 + var2;\n        var2 = temp0;\n    \n        if (var2 + 0x1f i>= arg0) { revert(memory[0x00:0x00]); }\n    \n        var var4 = msg.data[var2:var2 + 0x20];\n    \n        if (var4 <= var3) {\n            var var5 = var4 << 0x05;\n            var temp1 = memory[0x40:0x60];\n            var var6 = temp1;\n            var temp2 = var6 + (var5 + 0x3f & ~0x1f);\n            var var7 = temp2;\n        \n            if (!((var7 > var3) | (var7 < var6))) {\n                memory[0x40:0x60] = var7;\n                var temp3 = var6;\n                memory[temp3:temp3 + 0x20] = var4;\n                var temp4 = var1;\n                var3 = temp3 + temp4;\n                var4 = temp4 + var5 + var2;\n                var6 = temp3;\n            \n                if (var4 > arg0) { revert(memory[0x00:0x00]); }\n            \n                var temp5 = var1 + var2;\n                var2 = temp5;\n                var6 = var6;\n            \n                if (var2 >= var4) {\n                label_1723:\n                    return var6;\n                } else {\n                label_170C:\n                    var7 = 0x1714;\n                    var var8 = var2;\n                    var7 = func_15D7(var8);\n                    var temp6 = var3;\n                    memory[temp6:temp6 + 0x20] = var7;\n                    var temp7 = var1;\n                    var2 = temp7 + var2;\n                    var6 = var6;\n                    var3 = temp7 + temp6;\n                \n                    if (var2 >= var4) { goto label_1723; }\n                    else { goto label_170C; }\n                }\n            } else {\n                var8 = 0x16e0;\n            \n            label_1654:\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x41;\n                revert(memory[0x00:0x24]);\n            }\n        } else {\n            var5 = 0x16bb;\n            goto label_1654;\n        }\n    }\n    \n    function func_172F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var2 = 0x1290;\n        var var3 = var1;\n        func_15BF(var3);\n        return var1;\n    }\n    \n    function func_174C(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x176a;\n        var var4 = var2;\n        func_15BF(var4);\n        var0 = var2;\n        var2 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var3 = 0x177a;\n        var4 = var2;\n        func_15BF(var4);\n        arg0 = var2;\n        r0 = var0;\n        return r0, arg0;\n    }\n    \n    function func_179B(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x01;\n        var var1 = arg1;\n        var var2 = var0;\n    \n        if (arg0 <= var2) {\n        label_17D6:\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n        label_17A9:\n            var temp0 = var1;\n        \n            if (temp0 > ~0x00 / temp0) {\n                var var3 = 0x17bc;\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            } else if (!(arg0 & var2)) {\n                arg0 = arg0 >> var2;\n                var temp1 = var1;\n                var2 = var2;\n                var1 = temp1 * temp1;\n            \n            label_17A0:\n            \n                if (arg0 <= var2) { goto label_17D6; }\n                else { goto label_17A9; }\n            } else {\n                var temp2 = var1;\n                var0 = temp2 * var0;\n                arg0 = arg0 >> var2;\n                var1 = temp2 * temp2;\n                var2 = var2;\n                goto label_17A0;\n            }\n        }\n    }\n    \n    function func_17DE(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg0) {\n            var0 = 0x01;\n            goto label_03E3;\n        } else if (arg1) {\n            var var1 = arg1;\n        \n            if (var1 == 0x01) {\n                var0 = 0x01;\n            \n            label_03E3:\n                return var0;\n            } else if (var1 != 0x02) {\n                var temp0 = arg0;\n                var temp1 = arg1;\n            \n                if (!(((temp1 < 0x0b) & (temp0 < 0x4e)) | ((temp1 < 0x0133) & (temp0 < 0x20)))) {\n                    var1 = 0x1863;\n                    var2 = arg0;\n                    var var3 = arg1;\n                    var1, var2 = func_179B(var2, var3);\n                \n                    if (var1 <= ~0x00 / var2) { return var2 * var1; }\n                \n                    var3 = 0x1877;\n                    goto label_1785;\n                } else {\n                    var0 = arg1 ** arg0;\n                    goto label_03E3;\n                }\n            } else if (arg0 <= 0xff) {\n                var0 = 0x01 << arg0;\n                goto label_03E3;\n            } else {\n                var var2 = 0x182b;\n            \n            label_1785:\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_03E3;\n        }\n    }\n    \n    function func_187F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1290;\n        var var2 = arg0 & 0xff;\n        var var3 = arg1;\n        var1 = func_17DE(var2, var3);\n    \n    label_1290:\n        return var1;\n    }\n    \n    function func_188E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg0;\n        var var0 = temp1 * temp0;\n    \n        if ((temp1 == var0 / temp0) | !temp0) { return var0; }\n    \n        var var1 = 0x03e3;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_18A5(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x20;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        return temp0 + 0x60;\n    }\n    \n    function func_18F0(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 + 0x01) { return arg0 + 0x01; }\n    \n        var var1 = 0x1902;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_1976(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = arg0 + temp0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var var1 = 0x03e3;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_1989(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 - arg0;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var var1 = 0x03e3;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_199C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) { return arg1 / arg0; }\n    \n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x12;\n        revert(memory[0x00:0x24]);\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (0x751039fc > var0) {\n                if (0x313ce567 > var0) {\n                    if (var0 == 0x06fdde03) {\n                        // Dispatch table entry for name()\n                    label_012F:\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var temp0 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp0 + 0x40;\n                        memory[temp0:temp0 + 0x20] = 0x06;\n                        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x2820a1a6a0a7 << 0xd1;\n                        var1 = 0x0164;\n                        var var2 = temp0;\n                        var var3 = memory[0x40:0x60];\n                        var1 = name(var2, var3);\n                    \n                    label_0164:\n                        var temp1 = memory[0x40:0x60];\n                        return memory[temp1:temp1 + var1 - temp1];\n                    } else if (var0 == 0x095ea7b3) {\n                        // Dispatch table entry for approve(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x018d;\n                        var2 = 0x0188;\n                        var3 = msg.data.length;\n                        var var4 = 0x04;\n                        var2, var3 = func_15E7(var3, var4);\n                        var4 = 0x00;\n                        var var5 = 0x03df;\n                        var var6 = msg.sender;\n                        var var7 = var2;\n                        var var8 = var3;\n                        func_0A97(var6, var7, var8);\n                    \n                    label_03DF:\n                        var4 = 0x01;\n                        var1 = var4;\n                        // Error: Could not resolve jump destination!\n                    } else if (var0 == 0x0faee56f) {\n                        // Dispatch table entry for 0x0faee56f (unknown)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x01b3;\n                        var2 = storage[0x12];\n                    \n                    label_01B3:\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = var2;\n                        var2 = temp2 + 0x20;\n                        goto label_0164;\n                    } else if (var0 == 0x18160ddd) {\n                        // Dispatch table entry for totalSupply()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x01b3;\n                        var1 = totalSupply();\n                        goto label_01B3;\n                    } else if (var0 == 0x23b872dd) {\n                        // Dispatch table entry for transferFrom(address,address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x018d;\n                        var2 = 0x01f1;\n                        var3 = msg.data.length;\n                        var4 = 0x04;\n                        var2, var3, var4 = func_1613(var3, var4);\n                        var5 = 0x00;\n                        var6 = 0x0417;\n                        var7 = var2;\n                        var8 = var3;\n                        var var9 = var4;\n                        func_0BBB(var7, var8, var9);\n                        var6 = 0x0469;\n                        var7 = var2;\n                        var8 = msg.sender;\n                        var9 = 0x0464;\n                        var temp3 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp3 + 0x60;\n                        memory[temp3:temp3 + 0x20] = 0x28;\n                        memory[temp3 + 0x20:temp3 + 0x20 + 0x28] = code[0x1a30:0x1a58];\n                        memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x02;\n                        var temp4 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp4;\n                        var var10 = storage[keccak256(memory[0x00:0x40])];\n                        var var11 = var4;\n                        var var12 = temp3;\n                        var9 = func_11D4(var10, var11, var12);\n                        func_0A97(var7, var8, var9);\n                        // Error: Could not resolve method call return address!\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x313ce567) {\n                    // Dispatch table entry for decimals()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0x09;\n                    var1 = temp5 + 0x20;\n                    goto label_0164;\n                } else if (var0 == 0x31c2d847) {\n                    // Dispatch table entry for delBots(address[])\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0232;\n                    var2 = 0x022d;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_166A(var3, var4);\n                    func_022D(var2);\n                    stop();\n                } else if (var0 == 0x3bbac579) {\n                    // Dispatch table entry for isBot(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x018d;\n                    var2 = 0x024f;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_172F(var3, var4);\n                    var1 = func_024F(var2);\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = !!var1;\n                    var1 = temp6 + 0x20;\n                    goto label_0164;\n                } else if (var0 == 0x70a08231) {\n                    // Dispatch table entry for balanceOf(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b3;\n                    var2 = 0x0288;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_172F(var3, var4);\n                    var1 = func_0288(var2);\n                    goto label_01B3;\n                } else if (var0 == 0x715018a6) {\n                    // Dispatch table entry for renounceOwnership()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0232;\n                    renounceOwnership();\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0xa9059cbb > var0) {\n                if (var0 == 0x751039fc) {\n                    // Dispatch table entry for removeLimits()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0232;\n                    removeLimits();\n                    stop();\n                } else if (var0 == 0x7d1db4a5) {\n                    // Dispatch table entry for _maxTxAmount()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b3;\n                    var2 = storage[0x0f];\n                    goto label_01B3;\n                } else if (var0 == 0x8da5cb5b) {\n                    // Dispatch table entry for owner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = storage[0x00] & (0x01 << 0xa0) - 0x01;\n                    var1 = temp7 + 0x20;\n                    goto label_0164;\n                } else if (var0 == 0x8f9a55c0) {\n                    // Dispatch table entry for _maxWalletSize()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b3;\n                    var2 = storage[0x10];\n                    goto label_01B3;\n                } else if (var0 == 0x95d89b41) { goto label_012F; }\n                    // Dispatch table entry for symbol()\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018d;\n                var2 = 0x033c;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_15E7(var3, var4);\n                var4 = 0x00;\n                var5 = 0x03df;\n                var6 = msg.sender;\n                var7 = var2;\n                var8 = var3;\n                func_0BBB(var6, var7, var8);\n                goto label_03DF;\n            } else if (var0 == 0xbf474bed) {\n                // Dispatch table entry for 0xbf474bed (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b3;\n                var2 = storage[0x11];\n                goto label_01B3;\n            } else if (var0 == 0xc9567bf9) {\n                // Dispatch table entry for openTrading()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0232;\n            \n                if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n                    var temp16 = memory[0x40:0x60];\n                    memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;\n                    var3 = temp16 + 0x04;\n                    var2 = 0x049d;\n                    var2 = func_18A5(var3);\n                    goto label_049D;\n                } else if (!(storage[0x14] / (0x01 << 0xa0) & 0xff)) {\n                    storage[0x13] = (storage[0x13] & ~((0x01 << 0xa0) - 0x01)) | 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                    var2 = 0x0712;\n                    var3 = address(this);\n                    var4 = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                    var5 = 0x0704;\n                    var6 = 0x09;\n                    var7 = 0x0a;\n                    var5 = func_187F(var6, var7);\n                    func_0704(var3, var4, var5);\n                    var2 = storage[0x13] & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                    var3 = 0xc45a0155;\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n                    var4 = temp8 + 0x04;\n                    var temp9 = memory[0x40:0x60];\n                    var temp10;\n                    temp10, memory[temp9:temp9 + 0x20] = address(var2).staticcall.gas(msg.gas)(memory[temp9:temp9 + var4 - temp9]);\n                    var5 = !temp10;\n                \n                    if (!var5) {\n                        var temp11 = memory[0x40:0x60];\n                        var temp12 = returndata.length;\n                        memory[0x40:0x60] = temp11 + (temp12 + 0x1f & ~0x1f);\n                        var2 = 0x0789;\n                        var4 = temp11;\n                        var3 = var4 + temp12;\n                        var5 = 0x00;\n                    \n                        if (var3 - var4 i< 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var6 = memory[var4:var4 + 0x20];\n                        var7 = 0x1290;\n                        var8 = var6;\n                        func_15BF(var8);\n                        var2 = var6;\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        var temp13 = returndata.length;\n                        memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp14 = memory[0x40:0x60];\n                    memory[temp14:temp14 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp14 + 0x04:temp14 + 0x04 + 0x20] = 0x20;\n                    memory[temp14 + 0x24:temp14 + 0x24 + 0x20] = 0x17;\n                    memory[temp14 + 0x44:temp14 + 0x44 + 0x20] = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n                    var2 = temp14 + 0x64;\n                \n                label_049D:\n                    var temp15 = memory[0x40:0x60];\n                    revert(memory[temp15:temp15 + var2 - temp15]);\n                }\n            } else if (var0 == 0xd34628cc) {\n                // Dispatch table entry for addBots(address[])\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0232;\n                var2 = 0x0387;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_166A(var3, var4);\n                func_0387(var2);\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b3;\n                var2 = 0x03a7;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_174C(var3, var4);\n                var1 = func_03A7(var2, var3);\n                goto label_01B3;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (msg.data.length) { revert(memory[0x00:0x00]); }\n        else { stop(); }\n    }\n    \n    function func_022D(var arg0) {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x00;\n        \n            if (var0 >= memory[arg0:arg0 + 0x20]) {\n            label_050E:\n                return;\n            } else {\n            label_04B3:\n                var var1 = 0x00;\n                var var2 = 0x04;\n                var var3 = 0x00;\n                var var4 = arg0;\n                var var5 = var0;\n            \n                if (var5 < memory[var4:var4 + 0x20]) {\n                    var temp0 = var3;\n                    memory[temp0:temp0 + 0x20] = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20] & (0x01 << 0xa0) - 0x01;\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n                    var temp1 = keccak256(memory[0x00:0x00 + temp0 + 0x40]);\n                    storage[temp1] = !!var1 | (storage[temp1] & ~0xff);\n                    var1 = var0;\n                    var2 = 0x0506;\n                    var3 = var1;\n                    var2 = func_18F0(var3);\n                    var0 = var2;\n                \n                    if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_050E; }\n                    else { goto label_04B3; }\n                } else {\n                    var var6 = 0x04ca;\n                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x049d;\n            var1 = temp2 + 0x04;\n            var0 = func_18A5(var1);\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function func_024F(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_0288(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0387(var arg0) {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x00;\n        \n            if (var0 >= memory[arg0:arg0 + 0x20]) {\n            label_050E:\n                return;\n            } else {\n            label_0A3C:\n                var var1 = 0x01;\n                var var2 = 0x04;\n                var var3 = 0x00;\n                var var4 = arg0;\n                var var5 = var0;\n            \n                if (var5 < memory[var4:var4 + 0x20]) {\n                    var temp0 = var3;\n                    memory[temp0:temp0 + 0x20] = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20] & (0x01 << 0xa0) - 0x01;\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n                    var temp1 = keccak256(memory[0x00:0x00 + temp0 + 0x40]);\n                    storage[temp1] = !!var1 | (storage[temp1] & ~0xff);\n                    var1 = var0;\n                    var2 = 0x0a8f;\n                    var3 = var1;\n                    var2 = func_18F0(var3);\n                    var0 = var2;\n                \n                    if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_050E; }\n                    else { goto label_0A3C; }\n                } else {\n                    var var6 = 0x0a53;\n                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp2 + 0x04;\n            var0 = 0x049d;\n            var0 = func_18A5(var1);\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function func_03A7(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function totalSupply() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x03f7;\n        var var2 = 0x09;\n        var var3 = 0x0a;\n        var1 = func_187F(var2, var3);\n        var2 = var1;\n        var1 = 0x0405;\n        var3 = 0x3b9aca00;\n        return func_188E(var2, var3);\n    }\n    \n    function renounceOwnership() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & (0x01 << 0xa0) - 0x01, 0x00]);\n            storage[0x00] = storage[0x00] & ~((0x01 << 0xa0) - 0x01);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var var0 = 0x049d;\n            var var1 = temp0 + 0x04;\n            var0 = func_18A5(var1);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function removeLimits() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x05bc;\n            var var1 = 0x09;\n            var var2 = 0x0a;\n            var0 = func_187F(var1, var2);\n            var1 = var0;\n            var0 = 0x05ca;\n            var2 = 0x3b9aca00;\n            var0 = func_188E(var1, var2);\n            storage[0x0f] = var0;\n            var0 = 0x05d9;\n            var1 = 0x09;\n            var2 = 0x0a;\n            var0 = func_187F(var1, var2);\n            var temp0 = var0;\n            var0 = 0x05e7;\n            var1 = temp0;\n            var2 = 0x3b9aca00;\n            var0 = func_188E(var1, var2);\n            storage[0x10] = var0;\n            var0 = 0x947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf;\n            var1 = 0x0617;\n            var2 = 0x09;\n            var var3 = 0x0a;\n            var1 = func_187F(var2, var3);\n            var2 = var1;\n            var1 = 0x0625;\n            var3 = 0x3b9aca00;\n            var1 = func_188E(var2, var3);\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = var1;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-2]]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x049d;\n            var1 = temp3 + 0x04;\n            var0 = func_18A5(var1);\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + var0 - temp4]);\n        }\n    }\n    \n    function func_0704(var arg0, var arg1, var arg2) {\n        var temp0 = arg2;\n        arg2 = 0x0464;\n        var var0 = temp0;\n        var var1 = 0x3b9aca00;\n        arg2 = func_188E(var0, var1);\n        func_0A97(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0A97(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x24;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = 0x72657373 << 0xe0;\n            var0 = temp9 + 0x84;\n            goto label_049D;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = temp0 & arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x22;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7373 << 0xf0;\n            var var0 = temp7 + 0x84;\n        \n        label_049D:\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_0BBB(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x25;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n            memory[temp17 + 0x64:temp17 + 0x64 + 0x20] = 0x6472657373 << 0xd8;\n            var0 = temp17 + 0x84;\n            goto label_049D;\n        } else if (!(arg1 & (0x01 << 0xa0) - 0x01)) {\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = 0x20;\n            memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x23;\n            memory[temp16 + 0x44:temp16 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n            memory[temp16 + 0x64:temp16 + 0x64 + 0x20] = 0x657373 << 0xe8;\n            var0 = temp16 + 0x84;\n            goto label_049D;\n        } else if (arg2 > 0x00) {\n            var var0 = 0x00;\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var var1 = storage[var0] & temp0 == temp0 & arg0;\n        \n            if (storage[var0] & temp0 == temp0 & arg0) {\n                var temp14 = (0x01 << 0xa0) - 0x01;\n            \n                if (storage[0x00] & temp14 == temp14 & arg1) { goto label_1091; }\n                else { goto label_0D16; }\n            } else if (!var1) {\n            label_1091:\n            \n                if (!var0) {\n                label_110B:\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    var1 = 0x112e;\n                    var var2 = storage[keccak256(memory[0x00:0x40])];\n                    var var3 = arg2;\n                    var1 = func_1501(var2, var3);\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var1 = 0x1173;\n                    var2 = 0x1154;\n                    var3 = arg2;\n                    var var4 = var0;\n                    var2 = func_1501(var3, var4);\n                    var1 = func_1154(arg1, var2);\n                    var temp1 = (0x01 << 0xa0) - 0x01;\n                    memory[0x00:0x20] = arg1 & temp1;\n                    memory[0x20:0x40] = 0x01;\n                    var temp2 = var1;\n                    var1 = arg1 & temp1;\n                    storage[keccak256(memory[0x00:0x40])] = temp2;\n                    var2 = arg0 & temp1;\n                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                    var4 = 0x11bd;\n                    var var5 = arg2;\n                    var var6 = var0;\n                    var4 = func_1501(var5, var6);\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var4;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [stack[-2], stack[-3], stack[-4]]);\n                    return;\n                } else {\n                    memory[0x00:0x20] = address(this);\n                    memory[0x20:0x40] = 0x01;\n                    var2 = storage[keccak256(memory[0x00:0x40])];\n                    var1 = 0x10b1;\n                    var3 = var0;\n                    var1 = func_14A2(var2, var3);\n                    memory[0x00:0x20] = address(this);\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var1 = address(this);\n                    var temp5 = memory[0x40:0x60];\n                    var2 = arg0 & (0x01 << 0xa0) - 0x01;\n                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                    memory[temp5:temp5 + 0x20] = var0;\n                    var4 = temp5 + 0x20;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + var4 - temp6], [stack[-2], stack[-3], stack[-4]]);\n                    goto label_110B;\n                }\n            } else {\n            label_0D16:\n                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x04;\n                var1 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n            \n                if (var1) {\n                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                \n                    if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { goto label_0D60; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (var1) {\n                label_0D60:\n                    var1 = 0x0d8c;\n                    var2 = 0x64;\n                    var3 = 0x0d86;\n                \n                    if (storage[0x0e] > storage[0x0b]) {\n                        var5 = storage[0x09];\n                        var4 = arg2;\n                        var6 = 0x00;\n                    \n                        if (0x00 - var4) {\n                            var var7 = 0x00;\n                            var var8 = 0x122c;\n                            var var9 = var5;\n                            var var10 = var4;\n                            var8 = func_188E(var9, var10);\n                            var temp7 = var8;\n                            var7 = temp7;\n                            var8 = var5;\n                            var9 = 0x1239;\n                            var10 = var4;\n                            var var11 = var7;\n                            var9 = func_199C(var10, var11);\n                        \n                            if (var9 == var8) {\n                                var3 = var7;\n                                // Error: Could not resolve jump destination!\n                            } else {\n                                var temp8 = memory[0x40:0x60];\n                                memory[temp8:temp8 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n                                memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x21;\n                                memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n                                memory[temp8 + 0x64:temp8 + 0x64 + 0x20] = 0x77 << 0xf8;\n                                var8 = temp8 + 0x84;\n                            \n                            label_049D:\n                                var temp9 = memory[0x40:0x60];\n                                revert(memory[temp9:temp9 + var8 - temp9]);\n                            }\n                        } else {\n                            var6 = 0x00;\n                            var3 = var6;\n                            // Error: Could not resolve jump destination!\n                        }\n                    } else {\n                        var3 = func_0D74(arg2);\n                    \n                    label_0D86:\n                        var temp10 = var2;\n                        var2 = var3;\n                        var3 = temp10;\n                        var4 = 0x00;\n                        var5 = 0x1290;\n                        var6 = var2;\n                        var7 = var3;\n                        var temp11 = memory[0x40:0x60];\n                        var8 = temp11;\n                        memory[0x40:0x60] = var8 + 0x40;\n                        memory[var8:var8 + 0x20] = 0x1a;\n                        memory[var8 + 0x20:var8 + 0x20 + 0x20] = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n                        var9 = 0x00;\n                        var10 = var8;\n                    \n                        if (var7) {\n                            var10 = 0x00;\n                            var11 = 0x1205;\n                            var var12 = var7;\n                            var var13 = var6;\n                            var11 = func_199C(var12, var13);\n                            var5 = var11;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            var temp12 = memory[0x40:0x60];\n                            memory[temp12:temp12 + 0x20] = 0x461bcd << 0xe5;\n                            var temp13 = var10;\n                            var10 = 0x049d;\n                            var12 = temp12 + 0x04;\n                            var11 = temp13;\n                            var10 = name(var11, var12);\n                            goto label_049D;\n                        }\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n            memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x29;\n            memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n            memory[temp15 + 0x64:temp15 + 0x64 + 0x20] = 0x7468616e207a65726f << 0xb8;\n            var0 = temp15 + 0x84;\n            goto label_049D;\n        }\n    }\n    \n    function func_0D74(var arg0) returns (var r0) {\n        var var0 = storage[0x07];\n        var temp0 = var0;\n        var0 = arg0;\n        var var1 = temp0;\n        var var2 = 0x00;\n    \n        if (!(0x00 - var0)) { return 0x00; }\n    \n        var var3 = 0x00;\n        var var4 = 0x122c;\n        var var5 = var1;\n        var var6 = var0;\n        var4 = func_188E(var5, var6);\n        var temp1 = var4;\n        var3 = temp1;\n        var4 = var1;\n        var5 = 0x1239;\n        var6 = var0;\n        var var7 = var3;\n        var5 = func_199C(var6, var7);\n    \n        if (var5 == var4) { return var3; }\n    \n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n        memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x21;\n        memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = 0x77 << 0xf8;\n        var4 = temp2 + 0x84;\n        var temp3 = memory[0x40:0x60];\n        revert(memory[temp3:temp3 + var4 - temp3]);\n    }\n    \n    function func_1154(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var var0 = arg1;\n        arg1 = storage[keccak256(memory[0x00:0x40])];\n        r0 = func_14A2(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_11D4(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) {\n            var1 = 0x00;\n            var var2 = 0x1205;\n            var var3 = arg1;\n            var var4 = arg0;\n            return func_1989(var3, var4);\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = var1;\n            var1 = 0x049d;\n            var2 = temp1;\n            var3 = temp0 + 0x04;\n            var1 = name(var2, var3);\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + var1 - temp2]);\n        }\n    }\n    \n    function func_14A2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x14af;\n        var var3 = arg1;\n        var var4 = arg0;\n        var2 = func_1976(var3, var4);\n        var1 = var2;\n    \n        if (var1 >= arg0) { return var1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1b;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var2 = temp0 + 0x64;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + var2 - temp1]);\n    }\n    \n    function func_1501(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1290;\n        var var2 = arg0;\n        var var3 = arg1;\n        var temp0 = memory[0x40:0x60];\n        var var4 = temp0;\n        memory[0x40:0x60] = var4 + 0x40;\n        memory[var4:var4 + 0x20] = 0x1e;\n        memory[var4 + 0x20:var4 + 0x20 + 0x20] = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        return func_11D4(var2, var3, var4);\n    }\n    \n    function name(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = 0x00;\n    \n        if (var3 >= var2) {\n        label_159E:\n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = 0x00;\n            return temp3 + (temp2 + 0x1f & ~0x1f) + 0x40;\n        } else {\n        label_158B:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_159E; }\n            else { goto label_158B; }\n        }\n    }\n    \n    function func_15BF(var arg0) {\n        var temp0 = arg0;\n    \n        if (temp0 == temp0 & (0x01 << 0xa0) - 0x01) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_15D7(var arg0) returns (var r0) {\n        var var0 = msg.data[arg0:arg0 + 0x20];\n        var var1 = 0x15e2;\n        var var2 = var0;\n        func_15BF(var2);\n        return var0;\n    }\n    \n    function func_15E7(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x1605;\n        var var4 = var2;\n        func_15BF(var4);\n        r0 = var2;\n        arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_1613(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var var3 = msg.data[arg1:arg1 + 0x20];\n        var var4 = 0x1633;\n        var var5 = var3;\n        func_15BF(var5);\n        var0 = var3;\n        var3 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var4 = 0x1643;\n        var5 = var3;\n        func_15BF(var5);\n        r0 = var0;\n        arg0 = var3;\n        arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n        return r0, arg0, arg1;\n    }\n    \n    function func_166A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n    \n        if (arg0 - arg1 i< var1) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0xffffffffffffffff;\n    \n        if (var2 > var3) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1 + var2;\n        var2 = temp0;\n    \n        if (var2 + 0x1f i>= arg0) { revert(memory[0x00:0x00]); }\n    \n        var var4 = msg.data[var2:var2 + 0x20];\n    \n        if (var4 <= var3) {\n            var var5 = var4 << 0x05;\n            var temp1 = memory[0x40:0x60];\n            var var6 = temp1;\n            var temp2 = var6 + (var5 + 0x3f & ~0x1f);\n            var var7 = temp2;\n        \n            if (!((var7 > var3) | (var7 < var6))) {\n                memory[0x40:0x60] = var7;\n                var temp3 = var6;\n                memory[temp3:temp3 + 0x20] = var4;\n                var temp4 = var1;\n                var3 = temp3 + temp4;\n                var4 = temp4 + var5 + var2;\n                var6 = temp3;\n            \n                if (var4 > arg0) { revert(memory[0x00:0x00]); }\n            \n                var temp5 = var1 + var2;\n                var2 = temp5;\n                var6 = var6;\n            \n                if (var2 >= var4) {\n                label_1723:\n                    return var6;\n                } else {\n                label_170C:\n                    var7 = 0x1714;\n                    var var8 = var2;\n                    var7 = func_15D7(var8);\n                    var temp6 = var3;\n                    memory[temp6:temp6 + 0x20] = var7;\n                    var temp7 = var1;\n                    var2 = temp7 + var2;\n                    var6 = var6;\n                    var3 = temp7 + temp6;\n                \n                    if (var2 >= var4) { goto label_1723; }\n                    else { goto label_170C; }\n                }\n            } else {\n                var8 = 0x16e0;\n            \n            label_1654:\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x41;\n                revert(memory[0x00:0x24]);\n            }\n        } else {\n            var5 = 0x16bb;\n            goto label_1654;\n        }\n    }\n    \n    function func_172F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var2 = 0x1290;\n        var var3 = var1;\n        func_15BF(var3);\n        return var1;\n    }\n    \n    function func_174C(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x176a;\n        var var4 = var2;\n        func_15BF(var4);\n        var0 = var2;\n        var2 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var3 = 0x177a;\n        var4 = var2;\n        func_15BF(var4);\n        arg0 = var2;\n        r0 = var0;\n        return r0, arg0;\n    }\n    \n    function func_179B(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x01;\n        var var1 = arg1;\n        var var2 = var0;\n    \n        if (arg0 <= var2) {\n        label_17D6:\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n        label_17A9:\n            var temp0 = var1;\n        \n            if (temp0 > ~0x00 / temp0) {\n                var var3 = 0x17bc;\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            } else if (!(arg0 & var2)) {\n                arg0 = arg0 >> var2;\n                var temp1 = var1;\n                var2 = var2;\n                var1 = temp1 * temp1;\n            \n            label_17A0:\n            \n                if (arg0 <= var2) { goto label_17D6; }\n                else { goto label_17A9; }\n            } else {\n                var temp2 = var1;\n                var0 = temp2 * var0;\n                arg0 = arg0 >> var2;\n                var1 = temp2 * temp2;\n                var2 = var2;\n                goto label_17A0;\n            }\n        }\n    }\n    \n    function func_17DE(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg0) {\n            var0 = 0x01;\n            goto label_03E3;\n        } else if (arg1) {\n            var var1 = arg1;\n        \n            if (var1 == 0x01) {\n                var0 = 0x01;\n            \n            label_03E3:\n                return var0;\n            } else if (var1 != 0x02) {\n                var temp0 = arg0;\n                var temp1 = arg1;\n            \n                if (!(((temp1 < 0x0b) & (temp0 < 0x4e)) | ((temp1 < 0x0133) & (temp0 < 0x20)))) {\n                    var1 = 0x1863;\n                    var2 = arg0;\n                    var var3 = arg1;\n                    var1, var2 = func_179B(var2, var3);\n                \n                    if (var1 <= ~0x00 / var2) { return var2 * var1; }\n                \n                    var3 = 0x1877;\n                    goto label_1785;\n                } else {\n                    var0 = arg1 ** arg0;\n                    goto label_03E3;\n                }\n            } else if (arg0 <= 0xff) {\n                var0 = 0x01 << arg0;\n                goto label_03E3;\n            } else {\n                var var2 = 0x182b;\n            \n            label_1785:\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_03E3;\n        }\n    }\n    \n    function func_187F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1290;\n        var var2 = arg0 & 0xff;\n        var var3 = arg1;\n        var1 = func_17DE(var2, var3);\n    \n    label_1290:\n        return var1;\n    }\n    \n    function func_188E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg0;\n        var var0 = temp1 * temp0;\n    \n        if ((temp1 == var0 / temp0) | !temp0) { return var0; }\n    \n        var var1 = 0x03e3;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_18A5(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x20;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        return temp0 + 0x60;\n    }\n    \n    function func_18F0(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 + 0x01) { return arg0 + 0x01; }\n    \n        var var1 = 0x1902;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_1976(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = arg0 + temp0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var var1 = 0x03e3;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_1989(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 - arg0;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var var1 = 0x03e3;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_199C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) { return arg1 / arg0; }\n    \n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x12;\n        revert(memory[0x00:0x24]);\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length >= 0x04) {\n            var var0 = msg.data[0x00:0x20] >> 0xe0;\n        \n            if (0x751039fc > var0) {\n                if (0x313ce567 > var0) {\n                    if (var0 == 0x06fdde03) {\n                        // Dispatch table entry for name()\n                    label_012F:\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var temp0 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp0 + 0x40;\n                        memory[temp0:temp0 + 0x20] = 0x06;\n                        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x2820a1a6a0a7 << 0xd1;\n                        var1 = 0x0164;\n                        var var2 = temp0;\n                        var var3 = memory[0x40:0x60];\n                        var1 = name(var2, var3);\n                    \n                    label_0164:\n                        var temp1 = memory[0x40:0x60];\n                        return memory[temp1:temp1 + var1 - temp1];\n                    } else if (var0 == 0x095ea7b3) {\n                        // Dispatch table entry for approve(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x018d;\n                        var2 = 0x0188;\n                        var3 = msg.data.length;\n                        var var4 = 0x04;\n                        var2, var3 = func_15E7(var3, var4);\n                        var4 = 0x00;\n                        var var5 = 0x03df;\n                        var var6 = msg.sender;\n                        var var7 = var2;\n                        var var8 = var3;\n                        func_0A97(var6, var7, var8);\n                    \n                    label_03DF:\n                        var4 = 0x01;\n                        var1 = var4;\n                        // Error: Could not resolve jump destination!\n                    } else if (var0 == 0x0faee56f) {\n                        // Dispatch table entry for 0x0faee56f (unknown)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x01b3;\n                        var2 = storage[0x12];\n                    \n                    label_01B3:\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = var2;\n                        var2 = temp2 + 0x20;\n                        goto label_0164;\n                    } else if (var0 == 0x18160ddd) {\n                        // Dispatch table entry for totalSupply()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x01b3;\n                        var1 = totalSupply();\n                        goto label_01B3;\n                    } else if (var0 == 0x23b872dd) {\n                        // Dispatch table entry for transferFrom(address,address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x018d;\n                        var2 = 0x01f1;\n                        var3 = msg.data.length;\n                        var4 = 0x04;\n                        var2, var3, var4 = func_1613(var3, var4);\n                        var5 = 0x00;\n                        var6 = 0x0417;\n                        var7 = var2;\n                        var8 = var3;\n                        var var9 = var4;\n                        func_0BBB(var7, var8, var9);\n                        var6 = 0x0469;\n                        var7 = var2;\n                        var8 = msg.sender;\n                        var9 = 0x0464;\n                        var temp3 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp3 + 0x60;\n                        memory[temp3:temp3 + 0x20] = 0x28;\n                        memory[temp3 + 0x20:temp3 + 0x20 + 0x28] = code[0x1a30:0x1a58];\n                        memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x02;\n                        var temp4 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp4;\n                        var var10 = storage[keccak256(memory[0x00:0x40])];\n                        var var11 = var4;\n                        var var12 = temp3;\n                        var9 = func_11D4(var10, var11, var12);\n                        func_0A97(var7, var8, var9);\n                        // Error: Could not resolve method call return address!\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x313ce567) {\n                    // Dispatch table entry for decimals()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0x09;\n                    var1 = temp5 + 0x20;\n                    goto label_0164;\n                } else if (var0 == 0x31c2d847) {\n                    // Dispatch table entry for delBots(address[])\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0232;\n                    var2 = 0x022d;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_166A(var3, var4);\n                    func_022D(var2);\n                    stop();\n                } else if (var0 == 0x3bbac579) {\n                    // Dispatch table entry for isBot(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x018d;\n                    var2 = 0x024f;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_172F(var3, var4);\n                    var1 = func_024F(var2);\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = !!var1;\n                    var1 = temp6 + 0x20;\n                    goto label_0164;\n                } else if (var0 == 0x70a08231) {\n                    // Dispatch table entry for balanceOf(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b3;\n                    var2 = 0x0288;\n                    var3 = msg.data.length;\n                    var4 = 0x04;\n                    var2 = func_172F(var3, var4);\n                    var1 = func_0288(var2);\n                    goto label_01B3;\n                } else if (var0 == 0x715018a6) {\n                    // Dispatch table entry for renounceOwnership()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0232;\n                    renounceOwnership();\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0xa9059cbb > var0) {\n                if (var0 == 0x751039fc) {\n                    // Dispatch table entry for removeLimits()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0232;\n                    removeLimits();\n                    stop();\n                } else if (var0 == 0x7d1db4a5) {\n                    // Dispatch table entry for _maxTxAmount()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b3;\n                    var2 = storage[0x0f];\n                    goto label_01B3;\n                } else if (var0 == 0x8da5cb5b) {\n                    // Dispatch table entry for owner()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = storage[0x00] & (0x01 << 0xa0) - 0x01;\n                    var1 = temp7 + 0x20;\n                    goto label_0164;\n                } else if (var0 == 0x8f9a55c0) {\n                    // Dispatch table entry for _maxWalletSize()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01b3;\n                    var2 = storage[0x10];\n                    goto label_01B3;\n                } else if (var0 == 0x95d89b41) { goto label_012F; }\n                    // Dispatch table entry for symbol()\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018d;\n                var2 = 0x033c;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_15E7(var3, var4);\n                var4 = 0x00;\n                var5 = 0x03df;\n                var6 = msg.sender;\n                var7 = var2;\n                var8 = var3;\n                func_0BBB(var6, var7, var8);\n                goto label_03DF;\n            } else if (var0 == 0xbf474bed) {\n                // Dispatch table entry for 0xbf474bed (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b3;\n                var2 = storage[0x11];\n                goto label_01B3;\n            } else if (var0 == 0xc9567bf9) {\n                // Dispatch table entry for openTrading()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0232;\n            \n                if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n                    var temp16 = memory[0x40:0x60];\n                    memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;\n                    var3 = temp16 + 0x04;\n                    var2 = 0x049d;\n                    var2 = func_18A5(var3);\n                    goto label_049D;\n                } else if (!(storage[0x14] / (0x01 << 0xa0) & 0xff)) {\n                    storage[0x13] = (storage[0x13] & ~((0x01 << 0xa0) - 0x01)) | 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                    var2 = 0x0712;\n                    var3 = address(this);\n                    var4 = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                    var5 = 0x0704;\n                    var6 = 0x09;\n                    var7 = 0x0a;\n                    var5 = func_187F(var6, var7);\n                    func_0704(var3, var4, var5);\n                    var2 = storage[0x13] & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;\n                    var3 = 0xc45a0155;\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n                    var4 = temp8 + 0x04;\n                    var temp9 = memory[0x40:0x60];\n                    var temp10;\n                    temp10, memory[temp9:temp9 + 0x20] = address(var2).staticcall.gas(msg.gas)(memory[temp9:temp9 + var4 - temp9]);\n                    var5 = !temp10;\n                \n                    if (!var5) {\n                        var temp11 = memory[0x40:0x60];\n                        var temp12 = returndata.length;\n                        memory[0x40:0x60] = temp11 + (temp12 + 0x1f & ~0x1f);\n                        var2 = 0x0789;\n                        var4 = temp11;\n                        var3 = var4 + temp12;\n                        var5 = 0x00;\n                    \n                        if (var3 - var4 i< 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var6 = memory[var4:var4 + 0x20];\n                        var7 = 0x1290;\n                        var8 = var6;\n                        func_15BF(var8);\n                        var2 = var6;\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        var temp13 = returndata.length;\n                        memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp14 = memory[0x40:0x60];\n                    memory[temp14:temp14 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp14 + 0x04:temp14 + 0x04 + 0x20] = 0x20;\n                    memory[temp14 + 0x24:temp14 + 0x24 + 0x20] = 0x17;\n                    memory[temp14 + 0x44:temp14 + 0x44 + 0x20] = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n                    var2 = temp14 + 0x64;\n                \n                label_049D:\n                    var temp15 = memory[0x40:0x60];\n                    revert(memory[temp15:temp15 + var2 - temp15]);\n                }\n            } else if (var0 == 0xd34628cc) {\n                // Dispatch table entry for addBots(address[])\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0232;\n                var2 = 0x0387;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_166A(var3, var4);\n                func_0387(var2);\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b3;\n                var2 = 0x03a7;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_174C(var3, var4);\n                var1 = func_03A7(var2, var3);\n                goto label_01B3;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (msg.data.length) { revert(memory[0x00:0x00]); }\n        else { stop(); }\n    }\n    \n    function func_022D(var arg0) {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x00;\n        \n            if (var0 >= memory[arg0:arg0 + 0x20]) {\n            label_050E:\n                return;\n            } else {\n            label_04B3:\n                var var1 = 0x00;\n                var var2 = 0x04;\n                var var3 = 0x00;\n                var var4 = arg0;\n                var var5 = var0;\n            \n                if (var5 < memory[var4:var4 + 0x20]) {\n                    var temp0 = var3;\n                    memory[temp0:temp0 + 0x20] = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20] & (0x01 << 0xa0) - 0x01;\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n                    var temp1 = keccak256(memory[0x00:0x00 + temp0 + 0x40]);\n                    storage[temp1] = !!var1 | (storage[temp1] & ~0xff);\n                    var1 = var0;\n                    var2 = 0x0506;\n                    var3 = var1;\n                    var2 = func_18F0(var3);\n                    var0 = var2;\n                \n                    if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_050E; }\n                    else { goto label_04B3; }\n                } else {\n                    var var6 = 0x04ca;\n                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x049d;\n            var1 = temp2 + 0x04;\n            var0 = func_18A5(var1);\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function func_024F(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_0288(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0387(var arg0) {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x00;\n        \n            if (var0 >= memory[arg0:arg0 + 0x20]) {\n            label_050E:\n                return;\n            } else {\n            label_0A3C:\n                var var1 = 0x01;\n                var var2 = 0x04;\n                var var3 = 0x00;\n                var var4 = arg0;\n                var var5 = var0;\n            \n                if (var5 < memory[var4:var4 + 0x20]) {\n                    var temp0 = var3;\n                    memory[temp0:temp0 + 0x20] = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20] & (0x01 << 0xa0) - 0x01;\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n                    var temp1 = keccak256(memory[0x00:0x00 + temp0 + 0x40]);\n                    storage[temp1] = !!var1 | (storage[temp1] & ~0xff);\n                    var1 = var0;\n                    var2 = 0x0a8f;\n                    var3 = var1;\n                    var2 = func_18F0(var3);\n                    var0 = var2;\n                \n                    if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_050E; }\n                    else { goto label_0A3C; }\n                } else {\n                    var var6 = 0x0a53;\n                    memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp2 + 0x04;\n            var0 = 0x049d;\n            var0 = func_18A5(var1);\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function func_03A7(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function totalSupply() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x03f7;\n        var var2 = 0x09;\n        var var3 = 0x0a;\n        var1 = func_187F(var2, var3);\n        var2 = var1;\n        var1 = 0x0405;\n        var3 = 0x3b9aca00;\n        return func_188E(var2, var3);\n    }\n    \n    function renounceOwnership() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & (0x01 << 0xa0) - 0x01, 0x00]);\n            storage[0x00] = storage[0x00] & ~((0x01 << 0xa0) - 0x01);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var var0 = 0x049d;\n            var var1 = temp0 + 0x04;\n            var0 = func_18A5(var1);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function removeLimits() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x05bc;\n            var var1 = 0x09;\n            var var2 = 0x0a;\n            var0 = func_187F(var1, var2);\n            var1 = var0;\n            var0 = 0x05ca;\n            var2 = 0x3b9aca00;\n            var0 = func_188E(var1, var2);\n            storage[0x0f] = var0;\n            var0 = 0x05d9;\n            var1 = 0x09;\n            var2 = 0x0a;\n            var0 = func_187F(var1, var2);\n            var temp0 = var0;\n            var0 = 0x05e7;\n            var1 = temp0;\n            var2 = 0x3b9aca00;\n            var0 = func_188E(var1, var2);\n            storage[0x10] = var0;\n            var0 = 0x947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf;\n            var1 = 0x0617;\n            var2 = 0x09;\n            var var3 = 0x0a;\n            var1 = func_187F(var2, var3);\n            var2 = var1;\n            var1 = 0x0625;\n            var3 = 0x3b9aca00;\n            var1 = func_188E(var2, var3);\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = var1;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-2]]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x049d;\n            var1 = temp3 + 0x04;\n            var0 = func_18A5(var1);\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + var0 - temp4]);\n        }\n    }\n    \n    function func_0704(var arg0, var arg1, var arg2) {\n        var temp0 = arg2;\n        arg2 = 0x0464;\n        var var0 = temp0;\n        var var1 = 0x3b9aca00;\n        arg2 = func_188E(var0, var1);\n        func_0A97(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0A97(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x24;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = 0x72657373 << 0xe0;\n            var0 = temp9 + 0x84;\n            goto label_049D;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = temp0 & arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x22;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7373 << 0xf0;\n            var var0 = temp7 + 0x84;\n        \n        label_049D:\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_0BBB(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x25;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n            memory[temp17 + 0x64:temp17 + 0x64 + 0x20] = 0x6472657373 << 0xd8;\n            var0 = temp17 + 0x84;\n            goto label_049D;\n        } else if (!(arg1 & (0x01 << 0xa0) - 0x01)) {\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = 0x20;\n            memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x23;\n            memory[temp16 + 0x44:temp16 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n            memory[temp16 + 0x64:temp16 + 0x64 + 0x20] = 0x657373 << 0xe8;\n            var0 = temp16 + 0x84;\n            goto label_049D;\n        } else if (arg2 > 0x00) {\n            var var0 = 0x00;\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var var1 = storage[var0] & temp0 == temp0 & arg0;\n        \n            if (storage[var0] & temp0 == temp0 & arg0) {\n                var temp14 = (0x01 << 0xa0) - 0x01;\n            \n                if (storage[0x00] & temp14 == temp14 & arg1) { goto label_1091; }\n                else { goto label_0D16; }\n            } else if (!var1) {\n            label_1091:\n            \n                if (!var0) {\n                label_110B:\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    var1 = 0x112e;\n                    var var2 = storage[keccak256(memory[0x00:0x40])];\n                    var var3 = arg2;\n                    var1 = func_1501(var2, var3);\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var1 = 0x1173;\n                    var2 = 0x1154;\n                    var3 = arg2;\n                    var var4 = var0;\n                    var2 = func_1501(var3, var4);\n                    var1 = func_1154(arg1, var2);\n                    var temp1 = (0x01 << 0xa0) - 0x01;\n                    memory[0x00:0x20] = arg1 & temp1;\n                    memory[0x20:0x40] = 0x01;\n                    var temp2 = var1;\n                    var1 = arg1 & temp1;\n                    storage[keccak256(memory[0x00:0x40])] = temp2;\n                    var2 = arg0 & temp1;\n                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                    var4 = 0x11bd;\n                    var var5 = arg2;\n                    var var6 = var0;\n                    var4 = func_1501(var5, var6);\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var4;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [stack[-2], stack[-3], stack[-4]]);\n                    return;\n                } else {\n                    memory[0x00:0x20] = address(this);\n                    memory[0x20:0x40] = 0x01;\n                    var2 = storage[keccak256(memory[0x00:0x40])];\n                    var1 = 0x10b1;\n                    var3 = var0;\n                    var1 = func_14A2(var2, var3);\n                    memory[0x00:0x20] = address(this);\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var1 = address(this);\n                    var temp5 = memory[0x40:0x60];\n                    var2 = arg0 & (0x01 << 0xa0) - 0x01;\n                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                    memory[temp5:temp5 + 0x20] = var0;\n                    var4 = temp5 + 0x20;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + var4 - temp6], [stack[-2], stack[-3], stack[-4]]);\n                    goto label_110B;\n                }\n            } else {\n            label_0D16:\n                memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x04;\n                var1 = !(storage[keccak256(memory[0x00:0x40])] & 0xff);\n            \n                if (var1) {\n                    memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x04;\n                \n                    if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { goto label_0D60; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (var1) {\n                label_0D60:\n                    var1 = 0x0d8c;\n                    var2 = 0x64;\n                    var3 = 0x0d86;\n                \n                    if (storage[0x0e] > storage[0x0b]) {\n                        var5 = storage[0x09];\n                        var4 = arg2;\n                        var6 = 0x00;\n                    \n                        if (0x00 - var4) {\n                            var var7 = 0x00;\n                            var var8 = 0x122c;\n                            var var9 = var5;\n                            var var10 = var4;\n                            var8 = func_188E(var9, var10);\n                            var temp7 = var8;\n                            var7 = temp7;\n                            var8 = var5;\n                            var9 = 0x1239;\n                            var10 = var4;\n                            var var11 = var7;\n                            var9 = func_199C(var10, var11);\n                        \n                            if (var9 == var8) {\n                                var3 = var7;\n                                // Error: Could not resolve jump destination!\n                            } else {\n                                var temp8 = memory[0x40:0x60];\n                                memory[temp8:temp8 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n                                memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x21;\n                                memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n                                memory[temp8 + 0x64:temp8 + 0x64 + 0x20] = 0x77 << 0xf8;\n                                var8 = temp8 + 0x84;\n                            \n                            label_049D:\n                                var temp9 = memory[0x40:0x60];\n                                revert(memory[temp9:temp9 + var8 - temp9]);\n                            }\n                        } else {\n                            var6 = 0x00;\n                            var3 = var6;\n                            // Error: Could not resolve jump destination!\n                        }\n                    } else {\n                        var3 = func_0D74(arg2);\n                    \n                    label_0D86:\n                        var temp10 = var2;\n                        var2 = var3;\n                        var3 = temp10;\n                        var4 = 0x00;\n                        var5 = 0x1290;\n                        var6 = var2;\n                        var7 = var3;\n                        var temp11 = memory[0x40:0x60];\n                        var8 = temp11;\n                        memory[0x40:0x60] = var8 + 0x40;\n                        memory[var8:var8 + 0x20] = 0x1a;\n                        memory[var8 + 0x20:var8 + 0x20 + 0x20] = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n                        var9 = 0x00;\n                        var10 = var8;\n                    \n                        if (var7) {\n                            var10 = 0x00;\n                            var11 = 0x1205;\n                            var var12 = var7;\n                            var var13 = var6;\n                            var11 = func_199C(var12, var13);\n                            var5 = var11;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            var temp12 = memory[0x40:0x60];\n                            memory[temp12:temp12 + 0x20] = 0x461bcd << 0xe5;\n                            var temp13 = var10;\n                            var10 = 0x049d;\n                            var12 = temp12 + 0x04;\n                            var11 = temp13;\n                            var10 = name(var11, var12);\n                            goto label_049D;\n                        }\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n            memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x29;\n            memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n            memory[temp15 + 0x64:temp15 + 0x64 + 0x20] = 0x7468616e207a65726f << 0xb8;\n            var0 = temp15 + 0x84;\n            goto label_049D;\n        }\n    }\n    \n    function func_0D74(var arg0) returns (var r0) {\n        var var0 = storage[0x07];\n        var temp0 = var0;\n        var0 = arg0;\n        var var1 = temp0;\n        var var2 = 0x00;\n    \n        if (!(0x00 - var0)) { return 0x00; }\n    \n        var var3 = 0x00;\n        var var4 = 0x122c;\n        var var5 = var1;\n        var var6 = var0;\n        var4 = func_188E(var5, var6);\n        var temp1 = var4;\n        var3 = temp1;\n        var4 = var1;\n        var5 = 0x1239;\n        var6 = var0;\n        var var7 = var3;\n        var5 = func_199C(var6, var7);\n    \n        if (var5 == var4) { return var3; }\n    \n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n        memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x21;\n        memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = 0x77 << 0xf8;\n        var4 = temp2 + 0x84;\n        var temp3 = memory[0x40:0x60];\n        revert(memory[temp3:temp3 + var4 - temp3]);\n    }\n    \n    function func_1154(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var var0 = arg1;\n        arg1 = storage[keccak256(memory[0x00:0x40])];\n        r0 = func_14A2(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_11D4(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) {\n            var1 = 0x00;\n            var var2 = 0x1205;\n            var var3 = arg1;\n            var var4 = arg0;\n            return func_1989(var3, var4);\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = var1;\n            var1 = 0x049d;\n            var2 = temp1;\n            var3 = temp0 + 0x04;\n            var1 = name(var2, var3);\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + var1 - temp2]);\n        }\n    }\n    \n    function func_14A2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x14af;\n        var var3 = arg1;\n        var var4 = arg0;\n        var2 = func_1976(var3, var4);\n        var1 = var2;\n    \n        if (var1 >= arg0) { return var1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1b;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var2 = temp0 + 0x64;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + var2 - temp1]);\n    }\n    \n    function func_1501(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1290;\n        var var2 = arg0;\n        var var3 = arg1;\n        var temp0 = memory[0x40:0x60];\n        var var4 = temp0;\n        memory[0x40:0x60] = var4 + 0x40;\n        memory[var4:var4 + 0x20] = 0x1e;\n        memory[var4 + 0x20:var4 + 0x20 + 0x20] = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        return func_11D4(var2, var3, var4);\n    }\n    \n    function name(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = 0x00;\n    \n        if (var3 >= var2) {\n        label_159E:\n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = 0x00;\n            return temp3 + (temp2 + 0x1f & ~0x1f) + 0x40;\n        } else {\n        label_158B:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_159E; }\n            else { goto label_158B; }\n        }\n    }\n    \n    function func_15BF(var arg0) {\n        var temp0 = arg0;\n    \n        if (temp0 == temp0 & (0x01 << 0xa0) - 0x01) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_15D7(var arg0) returns (var r0) {\n        var var0 = msg.data[arg0:arg0 + 0x20];\n        var var1 = 0x15e2;\n        var var2 = var0;\n        func_15BF(var2);\n        return var0;\n    }\n    \n    function func_15E7(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x1605;\n        var var4 = var2;\n        func_15BF(var4);\n        r0 = var2;\n        arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_1613(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var var3 = msg.data[arg1:arg1 + 0x20];\n        var var4 = 0x1633;\n        var var5 = var3;\n        func_15BF(var5);\n        var0 = var3;\n        var3 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var4 = 0x1643;\n        var5 = var3;\n        func_15BF(var5);\n        r0 = var0;\n        arg0 = var3;\n        arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n        return r0, arg0, arg1;\n    }\n    \n    function func_166A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n    \n        if (arg0 - arg1 i< var1) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0xffffffffffffffff;\n    \n        if (var2 > var3) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1 + var2;\n        var2 = temp0;\n    \n        if (var2 + 0x1f i>= arg0) { revert(memory[0x00:0x00]); }\n    \n        var var4 = msg.data[var2:var2 + 0x20];\n    \n        if (var4 <= var3) {\n            var var5 = var4 << 0x05;\n            var temp1 = memory[0x40:0x60];\n            var var6 = temp1;\n            var temp2 = var6 + (var5 + 0x3f & ~0x1f);\n            var var7 = temp2;\n        \n            if (!((var7 > var3) | (var7 < var6))) {\n                memory[0x40:0x60] = var7;\n                var temp3 = var6;\n                memory[temp3:temp3 + 0x20] = var4;\n                var temp4 = var1;\n                var3 = temp3 + temp4;\n                var4 = temp4 + var5 + var2;\n                var6 = temp3;\n            \n                if (var4 > arg0) { revert(memory[0x00:0x00]); }\n            \n                var temp5 = var1 + var2;\n                var2 = temp5;\n                var6 = var6;\n            \n                if (var2 >= var4) {\n                label_1723:\n                    return var6;\n                } else {\n                label_170C:\n                    var7 = 0x1714;\n                    var var8 = var2;\n                    var7 = func_15D7(var8);\n                    var temp6 = var3;\n                    memory[temp6:temp6 + 0x20] = var7;\n                    var temp7 = var1;\n                    var2 = temp7 + var2;\n                    var6 = var6;\n                    var3 = temp7 + temp6;\n                \n                    if (var2 >= var4) { goto label_1723; }\n                    else { goto label_170C; }\n                }\n            } else {\n                var8 = 0x16e0;\n            \n            label_1654:\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x41;\n                revert(memory[0x00:0x24]);\n            }\n        } else {\n            var5 = 0x16bb;\n            goto label_1654;\n        }\n    }\n    \n    function func_172F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var2 = 0x1290;\n        var var3 = var1;\n        func_15BF(var3);\n        return var1;\n    }\n    \n    function func_174C(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = msg.data[arg1:arg1 + 0x20];\n        var var3 = 0x176a;\n        var var4 = var2;\n        func_15BF(var4);\n        var0 = var2;\n        var2 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        var3 = 0x177a;\n        var4 = var2;\n        func_15BF(var4);\n        arg0 = var2;\n        r0 = var0;\n        return r0, arg0;\n    }\n    \n    function func_179B(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x01;\n        var var1 = arg1;\n        var var2 = var0;\n    \n        if (arg0 <= var2) {\n        label_17D6:\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n        label_17A9:\n            var temp0 = var1;\n        \n            if (temp0 > ~0x00 / temp0) {\n                var var3 = 0x17bc;\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            } else if (!(arg0 & var2)) {\n                arg0 = arg0 >> var2;\n                var temp1 = var1;\n                var2 = var2;\n                var1 = temp1 * temp1;\n            \n            label_17A0:\n            \n                if (arg0 <= var2) { goto label_17D6; }\n                else { goto label_17A9; }\n            } else {\n                var temp2 = var1;\n                var0 = temp2 * var0;\n                arg0 = arg0 >> var2;\n                var1 = temp2 * temp2;\n                var2 = var2;\n                goto label_17A0;\n            }\n        }\n    }\n    \n    function func_17DE(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg0) {\n            var0 = 0x01;\n            goto label_03E3;\n        } else if (arg1) {\n            var var1 = arg1;\n        \n            if (var1 == 0x01) {\n                var0 = 0x01;\n            \n            label_03E3:\n                return var0;\n            } else if (var1 != 0x02) {\n                var temp0 = arg0;\n                var temp1 = arg1;\n            \n                if (!(((temp1 < 0x0b) & (temp0 < 0x4e)) | ((temp1 < 0x0133) & (temp0 < 0x20)))) {\n                    var1 = 0x1863;\n                    var2 = arg0;\n                    var var3 = arg1;\n                    var1, var2 = func_179B(var2, var3);\n                \n                    if (var1 <= ~0x00 / var2) { return var2 * var1; }\n                \n                    var3 = 0x1877;\n                    goto label_1785;\n                } else {\n                    var0 = arg1 ** arg0;\n                    goto label_03E3;\n                }\n            } else if (arg0 <= 0xff) {\n                var0 = 0x01 << arg0;\n                goto label_03E3;\n            } else {\n                var var2 = 0x182b;\n            \n            label_1785:\n                memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n                memory[0x04:0x24] = 0x11;\n                revert(memory[0x00:0x24]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_03E3;\n        }\n    }\n    \n    function func_187F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1290;\n        var var2 = arg0 & 0xff;\n        var var3 = arg1;\n        var1 = func_17DE(var2, var3);\n    \n    label_1290:\n        return var1;\n    }\n    \n    function func_188E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg0;\n        var var0 = temp1 * temp0;\n    \n        if ((temp1 == var0 / temp0) | !temp0) { return var0; }\n    \n        var var1 = 0x03e3;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_18A5(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x20;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        return temp0 + 0x60;\n    }\n    \n    function func_18F0(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 + 0x01) { return arg0 + 0x01; }\n    \n        var var1 = 0x1902;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_1976(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = arg0 + temp0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var var1 = 0x03e3;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_1989(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 - arg0;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var var1 = 0x03e3;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_199C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) { return arg1 / arg0; }\n    \n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x12;\n        revert(memory[0x00:0x24]);\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 30.167550325393677,
	"usage": {
		"completion_tokens": 583,
		"prompt_tokens": 14927,
		"total_tokens": 15510
	}
}