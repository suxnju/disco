{
	"address": "0xb6bbf89c3dbba20cb4d5cabaa4a386acbbab455e",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity contract code corresponding to the decompiled EVM bytecode could look something like this:\n\n```solidity\npragma solidity ^0.7.0;\n\ncontract ZoneContract {\n    address private contractOwner;\n    uint256 private stor_0;\n    \n    mapping (address => uint256) private _getBalance;\n    mapping (uint256 => Zone) private _sellZone;\n\n    struct Zone {\n        uint256 id;\n        address owner;\n        uint256 price;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == contractOwner, \"Only owner can call this function.\");\n        _;\n    }\n\n    function getBalance() public view returns (uint256) {\n        return _getBalance[msg.sender];\n    }\n\n    function sellZone(uint256 id, uint256 price) public {\n        require(id >= 1 && id <= 178);\n        require(msg.sender == _sellZone[id].owner);\n        _sellZone[id].price = price;\n    }\n\n    function withdraw() public {\n        _getBalance[msg.sender] = 0;\n        msg.sender.transfer(_getBalance[msg.sender]);\n    }\n\n    function transferZone(uint256 id, address newOwner) public {\n        require(id >= 1 && id <= 178);\n        require(msg.sender == _sellZone[id].owner);\n        _sellZone[id].owner = newOwner;\n    }\n\n    function transferContractOwnership(address newOwner) public onlyOwner {\n        contractOwner = newOwner;\n    }\n\n    function buyZone(uint256 id) public payable {\n        require(id >= 1 && id <= 178);\n        require(msg.value >= _sellZone[id].price);\n        _getBalance[contractOwner] += msg.value;\n        _sellZone[id].owner = msg.sender;\n        _sellZone[id].price = 0;\n    }\n\n    function computeInitialPrice(uint256 id) public view returns (uint256) {\n        require(id >= 1 && id <= 178);\n        return stor_0 + (id - 1) * (stor_0 >> 1);\n    }\n\n    function getZone(uint256 id) public view returns (uint256, address, uint256) {\n        require(id >= 1 && id <= 178);\n        return (_sellZone[id].id, _sellZone[id].owner, _sellZone[id].price);\n    }\n}\n```\n\nThis code is an interpretation of the decompiled code and may not exactly replicate the functionality of the original contract. It is also important to note that the original contract may contain other functionalities that are not visible in the decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1698039741,
	"id": "chatcmpl-8ChzhcRyQMRyAd8WBLJDWuCaJDWMZ",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 23:27 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_0; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _getBalance; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _sellZone; // STORAGE[0x3]\naddress _transferContractOwnership; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction getBalance() public nonPayable { \n    return _getBalance[msg.sender];\n}\n\nfunction sellZone(uint256 varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg0 >= 1;\n    if (v1) {\n        v0 = v2 = varg0 <= 178;\n    }\n    require(v0);\n    require(msg.sender == address(_sellZone[varg0][1]));\n    _sellZone[varg0][2] = varg1;\n    return 1;\n}\n\nfunction withdraw() public nonPayable { \n    _getBalance[msg.sender] = 0;\n    v0 = msg.sender.call().value(_getBalance[msg.sender]).gas(!_getBalance[msg.sender] * 2300);\n    require(v0);\n    return 1;\n}\n\nfunction transferZone(uint256 varg0, address varg1) public nonPayable { \n    v0 = v1 = varg0 >= 1;\n    if (v1) {\n        v0 = v2 = varg0 <= 178;\n    }\n    require(v0);\n    require(msg.sender == address(_sellZone[varg0][1]));\n    _sellZone[varg0][1] = varg1 | ~0xffffffffffffffffffffffffffffffffffffffff & _sellZone[varg0][0x1];\n    return 1;\n}\n\nfunction transferContractOwnership(address varg0) public nonPayable { \n    require(msg.sender == _transferContractOwnership);\n    _transferContractOwnership = varg0;\n    return 1;\n}\n\nfunction buyZone(uint256 varg0) public payable { \n    v0 = v1 = varg0 >= 1;\n    if (v1) {\n        v0 = v2 = varg0 <= 178;\n    }\n    require(v0);\n    if (address(_sellZone[varg0][1]) != 0) {\n        require(_sellZone[varg0][2] != 0);\n    }\n    if (address(_sellZone[varg0][1]) == 0) {\n        v3 = v4 = 0xa92(varg0);\n    } else {\n        v3 = v5 = _sellZone[varg0][2];\n    }\n    require(msg.value >= v3);\n    if (address(_sellZone[varg0][1]) != 0) {\n        _getBalance[_transferContractOwnership] = _getBalance[_transferContractOwnership] + msg.value * 200 / 10000;\n        _sellZone[address(_sellZone[_transferContractOwnership][1])] = _sellZone[address(_sellZone[_transferContractOwnership][1])] + (msg.value - msg.value * 200 / 10000);\n    } else {\n        _getBalance[_transferContractOwnership] = _getBalance[_transferContractOwnership] + msg.value;\n        _sellZone[_transferContractOwnership][0] = varg0;\n    }\n    _sellZone[varg0][1] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & _sellZone[varg0][0x1];\n    _sellZone[varg0][2] = 0;\n    return 1;\n}\n\nfunction computeInitialPrice(uint256 varg0) public nonPayable { \n    v0 = 0xa92(varg0);\n    return v0;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction getZone(uint256 varg0) public nonPayable { \n    v0 = v1 = varg0 >= 1;\n    if (v1) {\n        v0 = v2 = varg0 <= 178;\n    }\n    require(v0);\n    return _sellZone[varg0][0], address(_sellZone[varg0][1]), _sellZone[varg0][2];\n}\n\nfunction 0xa92(uint256 varg0) private { \n    v0 = v1 = varg0 >= 1;\n    if (v1) {\n        v0 = v2 = varg0 <= 178;\n    }\n    require(v0);\n    return stor_0 + (varg0 - 1) * (stor_0 >> 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x11ee0ec5 == function_selector) {\n            getZone(uint256);\n        } else if (0x12065fe0 == function_selector) {\n            getBalance();\n        } else if (0x159d3c24 == function_selector) {\n            sellZone(uint256,uint256);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x88806b37 == function_selector) {\n            transferZone(uint256,address);\n        } else if (0xa843c51f == function_selector) {\n            transferContractOwnership(address);\n        } else if (0xbee712da == function_selector) {\n            buyZone(uint256);\n        } else if (0xcd066fd6 == function_selector) {\n            computeInitialPrice(uint256);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 23:27 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_0; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _getBalance; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _sellZone; // STORAGE[0x3]\naddress _transferContractOwnership; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction getBalance() public nonPayable { \n    return _getBalance[msg.sender];\n}\n\nfunction sellZone(uint256 varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg0 >= 1;\n    if (v1) {\n        v0 = v2 = varg0 <= 178;\n    }\n    require(v0);\n    require(msg.sender == address(_sellZone[varg0][1]));\n    _sellZone[varg0][2] = varg1;\n    return 1;\n}\n\nfunction withdraw() public nonPayable { \n    _getBalance[msg.sender] = 0;\n    v0 = msg.sender.call().value(_getBalance[msg.sender]).gas(!_getBalance[msg.sender] * 2300);\n    require(v0);\n    return 1;\n}\n\nfunction transferZone(uint256 varg0, address varg1) public nonPayable { \n    v0 = v1 = varg0 >= 1;\n    if (v1) {\n        v0 = v2 = varg0 <= 178;\n    }\n    require(v0);\n    require(msg.sender == address(_sellZone[varg0][1]));\n    _sellZone[varg0][1] = varg1 | ~0xffffffffffffffffffffffffffffffffffffffff & _sellZone[varg0][0x1];\n    return 1;\n}\n\nfunction transferContractOwnership(address varg0) public nonPayable { \n    require(msg.sender == _transferContractOwnership);\n    _transferContractOwnership = varg0;\n    return 1;\n}\n\nfunction buyZone(uint256 varg0) public payable { \n    v0 = v1 = varg0 >= 1;\n    if (v1) {\n        v0 = v2 = varg0 <= 178;\n    }\n    require(v0);\n    if (address(_sellZone[varg0][1]) != 0) {\n        require(_sellZone[varg0][2] != 0);\n    }\n    if (address(_sellZone[varg0][1]) == 0) {\n        v3 = v4 = 0xa92(varg0);\n    } else {\n        v3 = v5 = _sellZone[varg0][2];\n    }\n    require(msg.value >= v3);\n    if (address(_sellZone[varg0][1]) != 0) {\n        _getBalance[_transferContractOwnership] = _getBalance[_transferContractOwnership] + msg.value * 200 / 10000;\n        _sellZone[address(_sellZone[_transferContractOwnership][1])] = _sellZone[address(_sellZone[_transferContractOwnership][1])] + (msg.value - msg.value * 200 / 10000);\n    } else {\n        _getBalance[_transferContractOwnership] = _getBalance[_transferContractOwnership] + msg.value;\n        _sellZone[_transferContractOwnership][0] = varg0;\n    }\n    _sellZone[varg0][1] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & _sellZone[varg0][0x1];\n    _sellZone[varg0][2] = 0;\n    return 1;\n}\n\nfunction computeInitialPrice(uint256 varg0) public nonPayable { \n    v0 = 0xa92(varg0);\n    return v0;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction getZone(uint256 varg0) public nonPayable { \n    v0 = v1 = varg0 >= 1;\n    if (v1) {\n        v0 = v2 = varg0 <= 178;\n    }\n    require(v0);\n    return _sellZone[varg0][0], address(_sellZone[varg0][1]), _sellZone[varg0][2];\n}\n\nfunction 0xa92(uint256 varg0) private { \n    v0 = v1 = varg0 >= 1;\n    if (v1) {\n        v0 = v2 = varg0 <= 178;\n    }\n    require(v0);\n    return stor_0 + (varg0 - 1) * (stor_0 >> 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x11ee0ec5 == function_selector) {\n            getZone(uint256);\n        } else if (0x12065fe0 == function_selector) {\n            getBalance();\n        } else if (0x159d3c24 == function_selector) {\n            sellZone(uint256,uint256);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x88806b37 == function_selector) {\n            transferZone(uint256,address);\n        } else if (0xa843c51f == function_selector) {\n            transferContractOwnership(address);\n        } else if (0xbee712da == function_selector) {\n            buyZone(uint256);\n        } else if (0xcd066fd6 == function_selector) {\n            computeInitialPrice(uint256);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 23:27 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_0; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _getBalance; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _sellZone; // STORAGE[0x3]\naddress _transferContractOwnership; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction getBalance() public nonPayable { \n    return _getBalance[msg.sender];\n}\n\nfunction sellZone(uint256 varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg0 >= 1;\n    if (v1) {\n        v0 = v2 = varg0 <= 178;\n    }\n    require(v0);\n    require(msg.sender == address(_sellZone[varg0][1]));\n    _sellZone[varg0][2] = varg1;\n    return 1;\n}\n\nfunction withdraw() public nonPayable { \n    _getBalance[msg.sender] = 0;\n    v0 = msg.sender.call().value(_getBalance[msg.sender]).gas(!_getBalance[msg.sender] * 2300);\n    require(v0);\n    return 1;\n}\n\nfunction transferZone(uint256 varg0, address varg1) public nonPayable { \n    v0 = v1 = varg0 >= 1;\n    if (v1) {\n        v0 = v2 = varg0 <= 178;\n    }\n    require(v0);\n    require(msg.sender == address(_sellZone[varg0][1]));\n    _sellZone[varg0][1] = varg1 | ~0xffffffffffffffffffffffffffffffffffffffff & _sellZone[varg0][0x1];\n    return 1;\n}\n\nfunction transferContractOwnership(address varg0) public nonPayable { \n    require(msg.sender == _transferContractOwnership);\n    _transferContractOwnership = varg0;\n    return 1;\n}\n\nfunction buyZone(uint256 varg0) public payable { \n    v0 = v1 = varg0 >= 1;\n    if (v1) {\n        v0 = v2 = varg0 <= 178;\n    }\n    require(v0);\n    if (address(_sellZone[varg0][1]) != 0) {\n        require(_sellZone[varg0][2] != 0);\n    }\n    if (address(_sellZone[varg0][1]) == 0) {\n        v3 = v4 = 0xa92(varg0);\n    } else {\n        v3 = v5 = _sellZone[varg0][2];\n    }\n    require(msg.value >= v3);\n    if (address(_sellZone[varg0][1]) != 0) {\n        _getBalance[_transferContractOwnership] = _getBalance[_transferContractOwnership] + msg.value * 200 / 10000;\n        _sellZone[address(_sellZone[_transferContractOwnership][1])] = _sellZone[address(_sellZone[_transferContractOwnership][1])] + (msg.value - msg.value * 200 / 10000);\n    } else {\n        _getBalance[_transferContractOwnership] = _getBalance[_transferContractOwnership] + msg.value;\n        _sellZone[_transferContractOwnership][0] = varg0;\n    }\n    _sellZone[varg0][1] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & _sellZone[varg0][0x1];\n    _sellZone[varg0][2] = 0;\n    return 1;\n}\n\nfunction computeInitialPrice(uint256 varg0) public nonPayable { \n    v0 = 0xa92(varg0);\n    return v0;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction getZone(uint256 varg0) public nonPayable { \n    v0 = v1 = varg0 >= 1;\n    if (v1) {\n        v0 = v2 = varg0 <= 178;\n    }\n    require(v0);\n    return _sellZone[varg0][0], address(_sellZone[varg0][1]), _sellZone[varg0][2];\n}\n\nfunction 0xa92(uint256 varg0) private { \n    v0 = v1 = varg0 >= 1;\n    if (v1) {\n        v0 = v2 = varg0 <= 178;\n    }\n    require(v0);\n    return stor_0 + (varg0 - 1) * (stor_0 >> 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x11ee0ec5 == function_selector) {\n            getZone(uint256);\n        } else if (0x12065fe0 == function_selector) {\n            getBalance();\n        } else if (0x159d3c24 == function_selector) {\n            sellZone(uint256,uint256);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x88806b37 == function_selector) {\n            transferZone(uint256,address);\n        } else if (0xa843c51f == function_selector) {\n            transferContractOwnership(address);\n        } else if (0xbee712da == function_selector) {\n            buyZone(uint256);\n        } else if (0xcd066fd6 == function_selector) {\n            computeInitialPrice(uint256);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 24.715662002563477,
	"usage": {
		"completion_tokens": 528,
		"prompt_tokens": 1296,
		"total_tokens": 1824
	}
}