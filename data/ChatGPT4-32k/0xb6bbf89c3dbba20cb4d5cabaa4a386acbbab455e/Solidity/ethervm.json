{
	"address": "0xb6bbf89c3dbba20cb4d5cabaa4a386acbbab455e",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The following is the Solidity contract code:\n\n```solidity\npragma solidity ^0.4.25;\n\ncontract Contract {\n    mapping (uint => Zone) zones;\n    mapping (address => uint) balances;\n    address owner;\n    \n    struct Zone {\n        uint id;\n        address owner;\n        uint price;\n    }\n\n    function getZone(uint _id) public view returns (uint, address, uint) {\n        Zone memory zone = zones[_id];\n        return (zone.id, zone.owner, zone.price);\n    }\n\n    function getBalance() public view returns (uint) {\n        return balances[msg.sender];\n    }\n\n    function sellZone(uint _id, uint _price) public returns (bool) {\n        require(zones[_id].owner == msg.sender);\n        zones[_id].price = _price;\n        return true;\n    }\n\n    function withdraw() public returns (bool) {\n        uint amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n        msg.sender.transfer(amount);\n        return true;\n    }\n\n    function transferZone(uint _id, address _newOwner) public returns (bool) {\n        require(zones[_id].owner == msg.sender);\n        zones[_id].owner = _newOwner;\n        return true;\n    }\n\n    function transferContractOwnership(address _newOwner) public returns (bool) {\n        require(msg.sender == owner);\n        owner = _newOwner;\n        return true;\n    }\n\n    function buyZone(uint _id) public payable returns (bool) {\n        require(msg.value >= zones[_id].price);\n        balances[zones[_id].owner] += msg.value;\n        zones[_id].owner = msg.sender;\n        zones[_id].price = 0;\n        return true;\n    }\n\n    function computeInitialPrice(uint _id) public view returns (uint) {\n        return zones[_id].price;\n    }\n}\n```\n\nPlease note that this is a simplified version of the contract that was decompiled. It doesn't include all the safety checks and is meant to illustrate the main functionality of the contract. Also, the method of computing the initial price for a zone is simplified and might be different in the actual contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472898,
	"id": "chatcmpl-8MuyAlXYXZaKsf1VARD1bVF0XUOEi",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x11ee0ec5) {\n            // Dispatch table entry for getZone(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x00b4;\n            var var2 = msg.data[0x04:0x24];\n            var var3;\n            var1, var2, var3 = getZone(var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = var3;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n        } else if (var0 == 0x12065fe0) {\n            // Dispatch table entry for getBalance()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0117;\n            var1 = getBalance();\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var1;\n            var temp5 = memory[0x40:0x60];\n            return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n        } else if (var0 == 0x159d3c24) {\n            // Dispatch table entry for sellZone(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0157;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var1 = sellZone(var2, var3);\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = !!var1;\n            var temp7 = memory[0x40:0x60];\n            return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n        } else if (var0 == 0x3ccfd60b) {\n            // Dispatch table entry for withdraw()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0184;\n            var1 = withdraw();\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = !!var1;\n            var temp9 = memory[0x40:0x60];\n            return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n        } else if (var0 == 0x88806b37) {\n            // Dispatch table entry for transferZone(uint256,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01de;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = transferZone(var2, var3);\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = !!var1;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n        } else if (var0 == 0xa843c51f) {\n            // Dispatch table entry for transferContractOwnership(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x022f;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = transferContractOwnership(var2);\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = !!var1;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n        } else if (var0 == 0xbee712da) {\n            // Dispatch table entry for buyZone(uint256)\n            var1 = 0x025f;\n            var2 = msg.data[0x04:0x24];\n            var1 = buyZone(var2);\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = !!var1;\n            var temp15 = memory[0x40:0x60];\n            return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n        } else if (var0 == 0xcd066fd6) {\n            // Dispatch table entry for computeInitialPrice(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x029a;\n            var2 = msg.data[0x04:0x24];\n            var1 = computeInitialPrice(var2);\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = var1;\n            var temp17 = memory[0x40:0x60];\n            return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getZone(var arg0) returns (var r0, var arg0, var r2) {\n        r2 = 0x00;\n        var var1 = r2;\n        var var2 = 0x00;\n        var var3 = arg0;\n        var var4 = var3 >= 0x01;\n    \n        if (!var4) {\n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n        label_02D3:\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x03;\n            var temp1 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x03;\n            var temp2 = storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x03;\n            r2 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n            r0 = temp1;\n            arg0 = temp2;\n            return r0, arg0, r2;\n        } else if (var3 <= 0xb2) { goto label_02D3; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getBalance() returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function sellZone(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        var var2 = var1 >= 0x01;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_03AD:\n            var2 = arg0;\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x03;\n        \n            if (msg.sender != storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40]) + 0x02] = arg1;\n            return 0x01;\n        } else if (var1 <= 0xb2) { goto label_03AD; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function withdraw() returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var1 * 0x08fc).value(var1)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferZone(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        var var2 = var1 >= 0x01;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_0537:\n            var2 = arg0;\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x03;\n        \n            if (msg.sender != storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = keccak256(memory[0x00:0x40]) + 0x01;\n            storage[temp0] = (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return 0x01;\n        } else if (var1 <= 0xb2) { goto label_0537; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferContractOwnership(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x01] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function buyZone(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = arg0;\n        var var6 = var5 >= 0x01;\n    \n        if (!var6) {\n            if (!var6) { revert(memory[0x00:0x00]); }\n        \n        label_06D7:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n            label_076A:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x03;\n            \n                if (storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n                    var6 = 0x07f9;\n                    var var7 = arg0;\n                    var6 = computeInitialPrice(var7);\n                \n                label_07FA:\n                    var1 = var6;\n                \n                    if (msg.value < var1) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x03;\n                \n                    if (storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n                        var6 = 0x2710;\n                        var7 = msg.value * 0xc8;\n                    \n                        if (!var6) { assert(); }\n                    \n                        var temp0 = var7 / var6;\n                        memory[0x00:0x20] = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x02;\n                        var temp1 = keccak256(memory[0x00:0x40]);\n                        storage[temp1] = storage[temp1] + temp0;\n                        var temp2 = arg0;\n                        memory[0x00:0x20] = temp2;\n                        memory[0x20:0x40] = 0x03;\n                        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x02;\n                        var temp3 = keccak256(memory[0x00:0x40]);\n                        storage[temp3] = storage[temp3] + (msg.value - temp0);\n                        memory[0x00:0x20] = temp2;\n                        memory[0x20:0x40] = 0x03;\n                        var temp4 = keccak256(memory[0x00:0x40]) + 0x01;\n                        storage[temp4] = msg.sender | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        memory[0x00:0x20] = temp2;\n                        memory[0x20:0x40] = 0x03;\n                        storage[keccak256(memory[0x00:0x40]) + 0x02] = 0x00;\n                        return 0x01;\n                    } else {\n                        memory[0x00:0x20] = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x02;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        storage[temp5] = storage[temp5] + msg.value;\n                        var temp6 = arg0;\n                        memory[0x00:0x20] = temp6;\n                        memory[0x20:0x40] = 0x03;\n                        storage[keccak256(memory[0x00:0x40])] = temp6;\n                        var temp7 = arg0;\n                        memory[0x00:0x20] = temp7;\n                        memory[0x20:0x40] = 0x03;\n                        var temp8 = keccak256(memory[0x00:0x40]) + 0x01;\n                        storage[temp8] = msg.sender | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        memory[0x00:0x20] = temp7;\n                        memory[0x20:0x40] = 0x03;\n                        storage[keccak256(memory[0x00:0x40]) + 0x02] = 0x00;\n                        return 0x01;\n                    }\n                } else {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x03;\n                    var6 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                    goto label_07FA;\n                }\n            } else {\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x03;\n            \n                if (storage[keccak256(memory[0x00:0x40]) + 0x02] != 0x00) { goto label_076A; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else if (var5 <= 0xb2) { goto label_06D7; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function computeInitialPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        var var2 = var1 >= 0x01;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_0AB2:\n            var2 = 0x02;\n            var var3 = storage[0x00];\n        \n            if (var2) { return storage[0x00] + arg0 - 0x01 * (var3 / var2); }\n            else { assert(); }\n        } else if (var1 <= 0xb2) { goto label_0AB2; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x11ee0ec5) {\n            // Dispatch table entry for getZone(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x00b4;\n            var var2 = msg.data[0x04:0x24];\n            var var3;\n            var1, var2, var3 = getZone(var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = var3;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n        } else if (var0 == 0x12065fe0) {\n            // Dispatch table entry for getBalance()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0117;\n            var1 = getBalance();\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var1;\n            var temp5 = memory[0x40:0x60];\n            return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n        } else if (var0 == 0x159d3c24) {\n            // Dispatch table entry for sellZone(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0157;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var1 = sellZone(var2, var3);\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = !!var1;\n            var temp7 = memory[0x40:0x60];\n            return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n        } else if (var0 == 0x3ccfd60b) {\n            // Dispatch table entry for withdraw()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0184;\n            var1 = withdraw();\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = !!var1;\n            var temp9 = memory[0x40:0x60];\n            return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n        } else if (var0 == 0x88806b37) {\n            // Dispatch table entry for transferZone(uint256,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01de;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = transferZone(var2, var3);\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = !!var1;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n        } else if (var0 == 0xa843c51f) {\n            // Dispatch table entry for transferContractOwnership(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x022f;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = transferContractOwnership(var2);\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = !!var1;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n        } else if (var0 == 0xbee712da) {\n            // Dispatch table entry for buyZone(uint256)\n            var1 = 0x025f;\n            var2 = msg.data[0x04:0x24];\n            var1 = buyZone(var2);\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = !!var1;\n            var temp15 = memory[0x40:0x60];\n            return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n        } else if (var0 == 0xcd066fd6) {\n            // Dispatch table entry for computeInitialPrice(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x029a;\n            var2 = msg.data[0x04:0x24];\n            var1 = computeInitialPrice(var2);\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = var1;\n            var temp17 = memory[0x40:0x60];\n            return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getZone(var arg0) returns (var r0, var arg0, var r2) {\n        r2 = 0x00;\n        var var1 = r2;\n        var var2 = 0x00;\n        var var3 = arg0;\n        var var4 = var3 >= 0x01;\n    \n        if (!var4) {\n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n        label_02D3:\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x03;\n            var temp1 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x03;\n            var temp2 = storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x03;\n            r2 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n            r0 = temp1;\n            arg0 = temp2;\n            return r0, arg0, r2;\n        } else if (var3 <= 0xb2) { goto label_02D3; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getBalance() returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function sellZone(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        var var2 = var1 >= 0x01;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_03AD:\n            var2 = arg0;\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x03;\n        \n            if (msg.sender != storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40]) + 0x02] = arg1;\n            return 0x01;\n        } else if (var1 <= 0xb2) { goto label_03AD; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function withdraw() returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var1 * 0x08fc).value(var1)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferZone(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        var var2 = var1 >= 0x01;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_0537:\n            var2 = arg0;\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x03;\n        \n            if (msg.sender != storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = keccak256(memory[0x00:0x40]) + 0x01;\n            storage[temp0] = (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return 0x01;\n        } else if (var1 <= 0xb2) { goto label_0537; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferContractOwnership(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x01] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function buyZone(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = arg0;\n        var var6 = var5 >= 0x01;\n    \n        if (!var6) {\n            if (!var6) { revert(memory[0x00:0x00]); }\n        \n        label_06D7:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n            label_076A:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x03;\n            \n                if (storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n                    var6 = 0x07f9;\n                    var var7 = arg0;\n                    var6 = computeInitialPrice(var7);\n                \n                label_07FA:\n                    var1 = var6;\n                \n                    if (msg.value < var1) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x03;\n                \n                    if (storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n                        var6 = 0x2710;\n                        var7 = msg.value * 0xc8;\n                    \n                        if (!var6) { assert(); }\n                    \n                        var temp0 = var7 / var6;\n                        memory[0x00:0x20] = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x02;\n                        var temp1 = keccak256(memory[0x00:0x40]);\n                        storage[temp1] = storage[temp1] + temp0;\n                        var temp2 = arg0;\n                        memory[0x00:0x20] = temp2;\n                        memory[0x20:0x40] = 0x03;\n                        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x02;\n                        var temp3 = keccak256(memory[0x00:0x40]);\n                        storage[temp3] = storage[temp3] + (msg.value - temp0);\n                        memory[0x00:0x20] = temp2;\n                        memory[0x20:0x40] = 0x03;\n                        var temp4 = keccak256(memory[0x00:0x40]) + 0x01;\n                        storage[temp4] = msg.sender | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        memory[0x00:0x20] = temp2;\n                        memory[0x20:0x40] = 0x03;\n                        storage[keccak256(memory[0x00:0x40]) + 0x02] = 0x00;\n                        return 0x01;\n                    } else {\n                        memory[0x00:0x20] = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x02;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        storage[temp5] = storage[temp5] + msg.value;\n                        var temp6 = arg0;\n                        memory[0x00:0x20] = temp6;\n                        memory[0x20:0x40] = 0x03;\n                        storage[keccak256(memory[0x00:0x40])] = temp6;\n                        var temp7 = arg0;\n                        memory[0x00:0x20] = temp7;\n                        memory[0x20:0x40] = 0x03;\n                        var temp8 = keccak256(memory[0x00:0x40]) + 0x01;\n                        storage[temp8] = msg.sender | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        memory[0x00:0x20] = temp7;\n                        memory[0x20:0x40] = 0x03;\n                        storage[keccak256(memory[0x00:0x40]) + 0x02] = 0x00;\n                        return 0x01;\n                    }\n                } else {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x03;\n                    var6 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                    goto label_07FA;\n                }\n            } else {\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x03;\n            \n                if (storage[keccak256(memory[0x00:0x40]) + 0x02] != 0x00) { goto label_076A; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else if (var5 <= 0xb2) { goto label_06D7; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function computeInitialPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        var var2 = var1 >= 0x01;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_0AB2:\n            var2 = 0x02;\n            var var3 = storage[0x00];\n        \n            if (var2) { return storage[0x00] + arg0 - 0x01 * (var3 / var2); }\n            else { assert(); }\n        } else if (var1 <= 0xb2) { goto label_0AB2; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x11ee0ec5) {\n            // Dispatch table entry for getZone(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x00b4;\n            var var2 = msg.data[0x04:0x24];\n            var var3;\n            var1, var2, var3 = getZone(var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = var3;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n        } else if (var0 == 0x12065fe0) {\n            // Dispatch table entry for getBalance()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0117;\n            var1 = getBalance();\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var1;\n            var temp5 = memory[0x40:0x60];\n            return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n        } else if (var0 == 0x159d3c24) {\n            // Dispatch table entry for sellZone(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0157;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var1 = sellZone(var2, var3);\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = !!var1;\n            var temp7 = memory[0x40:0x60];\n            return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n        } else if (var0 == 0x3ccfd60b) {\n            // Dispatch table entry for withdraw()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0184;\n            var1 = withdraw();\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = !!var1;\n            var temp9 = memory[0x40:0x60];\n            return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n        } else if (var0 == 0x88806b37) {\n            // Dispatch table entry for transferZone(uint256,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01de;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = transferZone(var2, var3);\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = !!var1;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n        } else if (var0 == 0xa843c51f) {\n            // Dispatch table entry for transferContractOwnership(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x022f;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = transferContractOwnership(var2);\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = !!var1;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n        } else if (var0 == 0xbee712da) {\n            // Dispatch table entry for buyZone(uint256)\n            var1 = 0x025f;\n            var2 = msg.data[0x04:0x24];\n            var1 = buyZone(var2);\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = !!var1;\n            var temp15 = memory[0x40:0x60];\n            return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n        } else if (var0 == 0xcd066fd6) {\n            // Dispatch table entry for computeInitialPrice(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x029a;\n            var2 = msg.data[0x04:0x24];\n            var1 = computeInitialPrice(var2);\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = var1;\n            var temp17 = memory[0x40:0x60];\n            return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getZone(var arg0) returns (var r0, var arg0, var r2) {\n        r2 = 0x00;\n        var var1 = r2;\n        var var2 = 0x00;\n        var var3 = arg0;\n        var var4 = var3 >= 0x01;\n    \n        if (!var4) {\n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n        label_02D3:\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x03;\n            var temp1 = storage[keccak256(memory[0x00:0x40])];\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x03;\n            var temp2 = storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x03;\n            r2 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n            r0 = temp1;\n            arg0 = temp2;\n            return r0, arg0, r2;\n        } else if (var3 <= 0xb2) { goto label_02D3; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getBalance() returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function sellZone(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        var var2 = var1 >= 0x01;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_03AD:\n            var2 = arg0;\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x03;\n        \n            if (msg.sender != storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40]) + 0x02] = arg1;\n            return 0x01;\n        } else if (var1 <= 0xb2) { goto label_03AD; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function withdraw() returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var1 * 0x08fc).value(var1)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferZone(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        var var2 = var1 >= 0x01;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_0537:\n            var2 = arg0;\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x03;\n        \n            if (msg.sender != storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = keccak256(memory[0x00:0x40]) + 0x01;\n            storage[temp0] = (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return 0x01;\n        } else if (var1 <= 0xb2) { goto label_0537; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferContractOwnership(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x01] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function buyZone(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = arg0;\n        var var6 = var5 >= 0x01;\n    \n        if (!var6) {\n            if (!var6) { revert(memory[0x00:0x00]); }\n        \n        label_06D7:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n        \n            if (storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n            label_076A:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x03;\n            \n                if (storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n                    var6 = 0x07f9;\n                    var var7 = arg0;\n                    var6 = computeInitialPrice(var7);\n                \n                label_07FA:\n                    var1 = var6;\n                \n                    if (msg.value < var1) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x03;\n                \n                    if (storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n                        var6 = 0x2710;\n                        var7 = msg.value * 0xc8;\n                    \n                        if (!var6) { assert(); }\n                    \n                        var temp0 = var7 / var6;\n                        memory[0x00:0x20] = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x02;\n                        var temp1 = keccak256(memory[0x00:0x40]);\n                        storage[temp1] = storage[temp1] + temp0;\n                        var temp2 = arg0;\n                        memory[0x00:0x20] = temp2;\n                        memory[0x20:0x40] = 0x03;\n                        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x02;\n                        var temp3 = keccak256(memory[0x00:0x40]);\n                        storage[temp3] = storage[temp3] + (msg.value - temp0);\n                        memory[0x00:0x20] = temp2;\n                        memory[0x20:0x40] = 0x03;\n                        var temp4 = keccak256(memory[0x00:0x40]) + 0x01;\n                        storage[temp4] = msg.sender | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        memory[0x00:0x20] = temp2;\n                        memory[0x20:0x40] = 0x03;\n                        storage[keccak256(memory[0x00:0x40]) + 0x02] = 0x00;\n                        return 0x01;\n                    } else {\n                        memory[0x00:0x20] = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x02;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        storage[temp5] = storage[temp5] + msg.value;\n                        var temp6 = arg0;\n                        memory[0x00:0x20] = temp6;\n                        memory[0x20:0x40] = 0x03;\n                        storage[keccak256(memory[0x00:0x40])] = temp6;\n                        var temp7 = arg0;\n                        memory[0x00:0x20] = temp7;\n                        memory[0x20:0x40] = 0x03;\n                        var temp8 = keccak256(memory[0x00:0x40]) + 0x01;\n                        storage[temp8] = msg.sender | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        memory[0x00:0x20] = temp7;\n                        memory[0x20:0x40] = 0x03;\n                        storage[keccak256(memory[0x00:0x40]) + 0x02] = 0x00;\n                        return 0x01;\n                    }\n                } else {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x03;\n                    var6 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                    goto label_07FA;\n                }\n            } else {\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x03;\n            \n                if (storage[keccak256(memory[0x00:0x40]) + 0x02] != 0x00) { goto label_076A; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else if (var5 <= 0xb2) { goto label_06D7; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function computeInitialPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        var var2 = var1 >= 0x01;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_0AB2:\n            var2 = 0x02;\n            var var3 = storage[0x00];\n        \n            if (var2) { return storage[0x00] + arg0 - 0x01 * (var3 / var2); }\n            else { assert(); }\n        } else if (var1 <= 0xb2) { goto label_0AB2; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 28.35739302635193,
	"usage": {
		"completion_tokens": 450,
		"prompt_tokens": 4340,
		"total_tokens": 4790
	}
}