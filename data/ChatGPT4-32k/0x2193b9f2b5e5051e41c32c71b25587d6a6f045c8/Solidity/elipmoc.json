{
	"address": "0x2193b9f2b5e5051e41c32c71b25587d6a6f045c8",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract based on the provided decompiled EVM Bytecode:\n\n```solidity\npragma solidity ^0.8.7;\n\ncontract Token {\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    string public name;\n    string public symbol;\n    string public version;\n    uint256 public unitsOneEthCanBuy;\n    uint256 public totalEthInWei;\n    uint256 public totalSupply;\n    uint8 public decimals;\n    address public fundsWallet;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        string memory _version,\n        uint256 _unitsOneEthCanBuy, \n        address _fundsWallet\n    ) {\n        decimals = 18;\n        totalSupply = 1000000 * (10 ** uint256(decimals));\n        balanceOf[msg.sender] = totalSupply;\n        name = _name;\n        symbol = _symbol;\n        version = _version;\n        fundsWallet = _fundsWallet;\n        unitsOneEthCanBuy = _unitsOneEthCanBuy;\n        totalEthInWei = 0;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balanceOf[_from]);\n        require(_value <= allowance[_from][msg.sender]);\n\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balanceOf[msg.sender]);\n\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    fallback() external payable {\n        totalEthInWei += msg.value;\n        uint256 amount = msg.value * unitsOneEthCanBuy;\n        require(balanceOf[fundsWallet] >= amount);\n\n        balanceOf[fundsWallet] -= amount;\n        balanceOf[msg.sender] += amount;\n\n        emit Transfer(fundsWallet, msg.sender, amount);\n\n        //Transfer eth to fundsWallet\n        payable(fundsWallet).transfer(msg.value);\n    }\n}\n```\nPlease note that the above code simplifies the strings handling of `name`, `symbol`, `version` and removes the `approveAndCall` function as it is generally replaced by `approve` and `transferFrom` functions in the ERC20 standard. The `unitsOneEthCanBuy` and `totalEthInWei` variables are added to the constructor for initialization. The `fallback` function is also adjusted to meet Solidity's latest syntax.",
				"role": "assistant"
			}
		}
	],
	"created": 1701456670,
	"id": "chatcmpl-8R2tS1NPwjTHNXPhPUKqOccA9I1ck",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.24 12:46 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x5]\nuint256[] _version; // STORAGE[0x6]\nuint256 _unitsOneEthCanBuy; // STORAGE[0x7]\nuint256 _totalEthInWei; // STORAGE[0x8]\nuint256 _totalSupply; // STORAGE[0xa]\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\naddress _fundsWallet; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction fundsWallet() public nonPayable { \n    return _fundsWallet;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = varg2 <= _balanceOf[varg0];\n    if (varg2 <= _balanceOf[varg0]) {\n        v0 = v2 = varg2 <= _allowance[msg.sender];\n    }\n    if (v0) {\n        v0 = varg2 > 0;\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        _balanceOf[varg1] += varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v3 = v5 = 1;\n    }\n    return v3;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction version() public nonPayable { \n    v0 = new bytes[]((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) {\n        if (31 < (_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction unitsOneEthCanBuy() public nonPayable { \n    return _unitsOneEthCanBuy;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction totalEthInWei() public nonPayable { \n    return _totalEthInWei;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1 <= _balanceOf[msg.sender];\n    if (varg1 <= _balanceOf[msg.sender]) {\n        v0 = varg1 > 0;\n    }\n    if (!v0) {\n        v2 = v3 = 0;\n        goto 0x5240x710B0x38d;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v2 = v4 = 1;\n    }\n    return v2;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        MEM[v2 + (100 + MEM[64])] = MEM[v2 + v0.data];\n        v2 += 32;\n    }\n    v4 = v5 = v0.length + (100 + MEM[64]);\n    if (0x1f & v0.length) {\n        MEM[v5 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v5 - (0x1f & v0.length)];\n    }\n    v6 = varg0.receiveApproval(msg.sender, varg1, address(this)).gas(msg.gas);\n    require(v6);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction fallback() public payable { \n    _totalEthInWei += msg.value;\n    if (msg.value + _unitsOneEthCanBuy - msg.value <= _balanceOf[_fundsWallet]) {\n        _balanceOf[_fundsWallet] = _balanceOf[_fundsWallet] - (msg.value + _unitsOneEthCanBuy - msg.value);\n        _balanceOf[msg.sender] += msg.value + _unitsOneEthCanBuy - msg.value;\n        emit Transfer(_fundsWallet, msg.sender, msg.value + _unitsOneEthCanBuy - msg.value);\n        v0 = _fundsWallet.call().value(msg.value).gas(2300 * !msg.value);\n        require(v0); // checks call status, propagates error data on error\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == uint32(function_selector >> 224)) {\n            approve(address,uint256);\n        } else if (0x18160ddd == uint32(function_selector >> 224)) {\n            totalSupply();\n        } else if (0x2194f3a2 == uint32(function_selector >> 224)) {\n            fundsWallet();\n        } else if (0x23b872dd == uint32(function_selector >> 224)) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == uint32(function_selector >> 224)) {\n            decimals();\n        } else if (0x54fd4d50 == uint32(function_selector >> 224)) {\n            version();\n        } else if (0x65f2bc2e == uint32(function_selector >> 224)) {\n            unitsOneEthCanBuy();\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x933ba413 == uint32(function_selector >> 224)) {\n            totalEthInWei();\n        } else if (0x95d89b41 == uint32(function_selector >> 224)) {\n            symbol();\n        } else if (0xa9059cbb == uint32(function_selector >> 224)) {\n            transfer(address,uint256);\n        } else if (0xcae9ca51 == uint32(function_selector >> 224)) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xdd62ed3e == uint32(function_selector >> 224)) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 12:46 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x5]\nuint256[] _version; // STORAGE[0x6]\nuint256 _unitsOneEthCanBuy; // STORAGE[0x7]\nuint256 _totalEthInWei; // STORAGE[0x8]\nuint256 _totalSupply; // STORAGE[0xa]\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\naddress _fundsWallet; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction fundsWallet() public nonPayable { \n    return _fundsWallet;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = varg2 <= _balanceOf[varg0];\n    if (varg2 <= _balanceOf[varg0]) {\n        v0 = v2 = varg2 <= _allowance[msg.sender];\n    }\n    if (v0) {\n        v0 = varg2 > 0;\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        _balanceOf[varg1] += varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v3 = v5 = 1;\n    }\n    return v3;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction version() public nonPayable { \n    v0 = new bytes[]((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) {\n        if (31 < (_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction unitsOneEthCanBuy() public nonPayable { \n    return _unitsOneEthCanBuy;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction totalEthInWei() public nonPayable { \n    return _totalEthInWei;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1 <= _balanceOf[msg.sender];\n    if (varg1 <= _balanceOf[msg.sender]) {\n        v0 = varg1 > 0;\n    }\n    if (!v0) {\n        v2 = v3 = 0;\n        goto 0x5240x710B0x38d;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v2 = v4 = 1;\n    }\n    return v2;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        MEM[v2 + (100 + MEM[64])] = MEM[v2 + v0.data];\n        v2 += 32;\n    }\n    v4 = v5 = v0.length + (100 + MEM[64]);\n    if (0x1f & v0.length) {\n        MEM[v5 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v5 - (0x1f & v0.length)];\n    }\n    v6 = varg0.receiveApproval(msg.sender, varg1, address(this)).gas(msg.gas);\n    require(v6);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction fallback() public payable { \n    _totalEthInWei += msg.value;\n    if (msg.value + _unitsOneEthCanBuy - msg.value <= _balanceOf[_fundsWallet]) {\n        _balanceOf[_fundsWallet] = _balanceOf[_fundsWallet] - (msg.value + _unitsOneEthCanBuy - msg.value);\n        _balanceOf[msg.sender] += msg.value + _unitsOneEthCanBuy - msg.value;\n        emit Transfer(_fundsWallet, msg.sender, msg.value + _unitsOneEthCanBuy - msg.value);\n        v0 = _fundsWallet.call().value(msg.value).gas(2300 * !msg.value);\n        require(v0); // checks call status, propagates error data on error\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == uint32(function_selector >> 224)) {\n            approve(address,uint256);\n        } else if (0x18160ddd == uint32(function_selector >> 224)) {\n            totalSupply();\n        } else if (0x2194f3a2 == uint32(function_selector >> 224)) {\n            fundsWallet();\n        } else if (0x23b872dd == uint32(function_selector >> 224)) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == uint32(function_selector >> 224)) {\n            decimals();\n        } else if (0x54fd4d50 == uint32(function_selector >> 224)) {\n            version();\n        } else if (0x65f2bc2e == uint32(function_selector >> 224)) {\n            unitsOneEthCanBuy();\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x933ba413 == uint32(function_selector >> 224)) {\n            totalEthInWei();\n        } else if (0x95d89b41 == uint32(function_selector >> 224)) {\n            symbol();\n        } else if (0xa9059cbb == uint32(function_selector >> 224)) {\n            transfer(address,uint256);\n        } else if (0xcae9ca51 == uint32(function_selector >> 224)) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xdd62ed3e == uint32(function_selector >> 224)) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 12:46 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x5]\nuint256[] _version; // STORAGE[0x6]\nuint256 _unitsOneEthCanBuy; // STORAGE[0x7]\nuint256 _totalEthInWei; // STORAGE[0x8]\nuint256 _totalSupply; // STORAGE[0xa]\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\naddress _fundsWallet; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction fundsWallet() public nonPayable { \n    return _fundsWallet;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = varg2 <= _balanceOf[varg0];\n    if (varg2 <= _balanceOf[varg0]) {\n        v0 = v2 = varg2 <= _allowance[msg.sender];\n    }\n    if (v0) {\n        v0 = varg2 > 0;\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        _balanceOf[varg1] += varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v3 = v5 = 1;\n    }\n    return v3;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction version() public nonPayable { \n    v0 = new bytes[]((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) {\n        if (31 < (_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_version.length & ~0 + (!(_version.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction unitsOneEthCanBuy() public nonPayable { \n    return _unitsOneEthCanBuy;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction totalEthInWei() public nonPayable { \n    return _totalEthInWei;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1 <= _balanceOf[msg.sender];\n    if (varg1 <= _balanceOf[msg.sender]) {\n        v0 = varg1 > 0;\n    }\n    if (!v0) {\n        v2 = v3 = 0;\n        goto 0x5240x710B0x38d;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v2 = v4 = 1;\n    }\n    return v2;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        MEM[v2 + (100 + MEM[64])] = MEM[v2 + v0.data];\n        v2 += 32;\n    }\n    v4 = v5 = v0.length + (100 + MEM[64]);\n    if (0x1f & v0.length) {\n        MEM[v5 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v5 - (0x1f & v0.length)];\n    }\n    v6 = varg0.receiveApproval(msg.sender, varg1, address(this)).gas(msg.gas);\n    require(v6);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction fallback() public payable { \n    _totalEthInWei += msg.value;\n    if (msg.value + _unitsOneEthCanBuy - msg.value <= _balanceOf[_fundsWallet]) {\n        _balanceOf[_fundsWallet] = _balanceOf[_fundsWallet] - (msg.value + _unitsOneEthCanBuy - msg.value);\n        _balanceOf[msg.sender] += msg.value + _unitsOneEthCanBuy - msg.value;\n        emit Transfer(_fundsWallet, msg.sender, msg.value + _unitsOneEthCanBuy - msg.value);\n        v0 = _fundsWallet.call().value(msg.value).gas(2300 * !msg.value);\n        require(v0); // checks call status, propagates error data on error\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == uint32(function_selector >> 224)) {\n            approve(address,uint256);\n        } else if (0x18160ddd == uint32(function_selector >> 224)) {\n            totalSupply();\n        } else if (0x2194f3a2 == uint32(function_selector >> 224)) {\n            fundsWallet();\n        } else if (0x23b872dd == uint32(function_selector >> 224)) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == uint32(function_selector >> 224)) {\n            decimals();\n        } else if (0x54fd4d50 == uint32(function_selector >> 224)) {\n            version();\n        } else if (0x65f2bc2e == uint32(function_selector >> 224)) {\n            unitsOneEthCanBuy();\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x933ba413 == uint32(function_selector >> 224)) {\n            totalEthInWei();\n        } else if (0x95d89b41 == uint32(function_selector >> 224)) {\n            symbol();\n        } else if (0xa9059cbb == uint32(function_selector >> 224)) {\n            transfer(address,uint256);\n        } else if (0xcae9ca51 == uint32(function_selector >> 224)) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xdd62ed3e == uint32(function_selector >> 224)) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 27.7450852394104,
	"usage": {
		"completion_tokens": 666,
		"prompt_tokens": 2733,
		"total_tokens": 3399
	}
}