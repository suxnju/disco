{
	"address": "0xd64b1bf6fcab5add75041c89f61816c2b3d5e711",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity code that represents the decompiled contract:\n\n```Solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 10000 * (uint256(10) ** decimals);\n    string public name = \"Contract\";\n    string public symbol = \"CON\";\n    uint8 public decimals = 2;\n    string public version = 'H1.0';\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    constructor() public {\n        balanceOf[msg.sender] = totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balanceOf[_from]);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n}\n```\n\nThis Solidity contract is a simple token contract which follows the ERC-20 standard. It includes a total supply of the token, the name of the token, the symbol of the token, and the number of decimals the token uses.\n\nThe contract includes functions for transferring tokens, approving other addresses to spend tokens on behalf of the sender, and transferring tokens from one address to another.\n\nThe contract also emits a Transfer event whenever tokens are transferred. This is a standard event in ERC-20 token contracts which allows token transfers to be tracked by external entities.\n\nThe actual contract could vary in the implementation based on the decompiled EVM Bytecode, and may include additional features or nuances not captured in this general representation.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471736,
	"id": "chatcmpl-8MufQ8uEo9ZUsnaZu8LB5Tqp8aIet",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x0c68ba21) {\n            // Dispatch table entry for isGuardian(address)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00d4;\n            var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = isGuardian(var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = !!var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x1201b4bd) {\n            // Dispatch table entry for 0x1201b4bd (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00fd;\n            var2 = func_0379();\n        \n        label_00FD:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var2;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n        } else if (var0 == 0x3ffbd47f) {\n            // Dispatch table entry for register(string,string)\n            var1 = 0x012e;\n            var temp4 = msg.data[0x04:0x24];\n            var2 = temp4 + 0x24;\n            var var3 = msg.data[temp4 + 0x04:temp4 + 0x04 + 0x20];\n            var temp5 = msg.data[0x24:0x44];\n            var var4 = temp5 + 0x24;\n            var var5 = msg.data[temp5 + 0x04:temp5 + 0x04 + 0x20];\n            var var6 = 0x00;\n            var var7 = var6;\n            var var8 = 0x038b;\n            var var9 = msg.sender;\n            var8 = func_1087(var9);\n        \n            if (!var8) {\n                var6 = msg.sender;\n            \n                if (var3 <= 0x00) {\n                    var temp35 = memory[0x40:0x60];\n                    memory[temp35:temp35 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp35 + 0x04:temp35 + 0x04 + 0x20] = 0x20;\n                    memory[temp35 + 0x24:temp35 + 0x24 + 0x20] = 0x1b;\n                    memory[temp35 + 0x44:temp35 + 0x44 + 0x20] = 0x506c656173652070726f7669646520612076616c6964206e616d650000000000;\n                    var temp36 = memory[0x40:0x60];\n                    revert(memory[temp36:temp36 + temp35 - temp36 + 0x64]);\n                } else if (var5 > 0x00) {\n                    var8 = 0x04a9;\n                    var9 = var6;\n                    var8 = isGuardian(var9);\n                \n                    if (var8) {\n                        var temp31 = memory[0x40:0x60];\n                        memory[temp31:temp31 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp31 + 0x04:temp31 + 0x04 + 0x20] = 0x20;\n                        memory[temp31 + 0x24:temp31 + 0x24 + 0x20] = 0x14;\n                        memory[temp31 + 0x44:temp31 + 0x44 + 0x20] = 0x43616e6e6f74206265206120677561726469616e000000000000000000000000;\n                        var temp32 = memory[0x40:0x60];\n                        revert(memory[temp32:temp32 + temp31 - temp32 + 0x64]);\n                    } else if (msg.value == storage[0x00]) {\n                        var temp6 = storage[0x02];\n                        storage[0x02] = temp6 + 0x01;\n                        var7 = temp6;\n                        memory[0x00:0x20] = 0x02;\n                        var temp7 = var7 + 0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace;\n                        var temp8 = var6;\n                        storage[temp7] = (temp8 & 0x02 ** 0xa0 - 0x01) | (storage[temp7] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        var temp9 = memory[0x40:0x60];\n                        var temp10 = var3;\n                        memory[0x40:0x60] = temp9 + (temp10 + 0x1f) / 0x20 * 0x20 + 0xe0;\n                        var temp11 = temp9 + 0xc0;\n                        memory[temp11:temp11 + 0x20] = temp10;\n                        var8 = temp9;\n                        memory[var8 + 0xe0:var8 + 0xe0 + temp10] = msg.data[var2:var2 + temp10];\n                        memory[var8:var8 + 0x20] = temp11;\n                        var temp12 = var8 + 0x20;\n                        var temp13 = var5;\n                        var temp14 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp14 + (temp13 + 0x1f) / 0x20 * 0x20 + 0x20;\n                        memory[temp14:temp14 + 0x20] = temp13;\n                        memory[temp14 + 0x20:temp14 + 0x20 + temp13] = msg.data[var4:var4 + temp13];\n                        memory[temp12:temp12 + 0x20] = temp14;\n                        var temp15 = temp12 + 0x20;\n                        memory[temp15:temp15 + 0x20] = var7;\n                        var temp16 = temp15 + 0x20;\n                        memory[temp16:temp16 + 0x20] = block.number;\n                        var temp17 = temp16 + 0x20;\n                        memory[temp17:temp17 + 0x20] = block.number;\n                        memory[temp17 + 0x20:temp17 + 0x20 + 0x20] = block.timestamp;\n                        memory[0x00:0x20] = temp8 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var9 = keccak256(memory[0x00:0x40]);\n                        var temp18 = memory[var8:var8 + 0x20];\n                        var var10 = 0x06a6;\n                        var var11 = var9;\n                        var var12 = temp18 + 0x20;\n                        var var13 = memory[temp18:temp18 + 0x20];\n                        var temp19 = var11;\n                        var temp20 = storage[temp19];\n                        memory[0x00:0x20] = temp19;\n                        var var14 = keccak256(memory[0x00:0x20]);\n                        var temp21 = var12;\n                        var12 = var14 + ((!(temp20 & 0x01) * 0x0100 - 0x01 & temp20) / 0x02 + 0x1f) / 0x20;\n                        var var15 = temp21;\n                    \n                        if (0x1f < var13) {\n                            var temp22 = var13;\n                            storage[var11] = temp22 + temp22 + 0x01;\n                        \n                            if (!temp22) {\n                            label_112D:\n                                var temp23 = var12;\n                                var12 = 0x1139;\n                                var13 = temp23;\n                                var12 = func_121B(var13, var14);\n                                var10 = func_1139(var11, var12);\n                                // Error: Could not resolve method call return address!\n                            } else {\n                                var temp24 = var13;\n                                var temp25 = var15;\n                                var13 = temp25;\n                                var15 = var13 + temp24;\n                            \n                                if (var15 <= var13) { goto label_112D; }\n                            \n                            label_111B:\n                                var temp26 = var13;\n                                var temp27 = var14;\n                                storage[temp27] = memory[temp26:temp26 + 0x20];\n                                var13 = temp26 + 0x20;\n                                var15 = var15;\n                                var14 = temp27 + 0x01;\n                            \n                                if (var15 <= var13) { goto label_112D; }\n                                else { goto label_111B; }\n                            }\n                        } else {\n                            var temp28 = var13;\n                            storage[var11] = temp28 + temp28 | (memory[var15:var15 + 0x20] & ~0xff);\n                            goto label_112D;\n                        }\n                    } else {\n                        var temp29 = memory[0x40:0x60];\n                        memory[temp29:temp29 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp29 + 0x04:temp29 + 0x04 + 0x20] = 0x20;\n                        memory[temp29 + 0x24:temp29 + 0x24 + 0x20] = 0x2d;\n                        memory[temp29 + 0x44:temp29 + 0x44 + 0x20] = 0x506c656173652070726f76696465207468652065786163742072656769737472;\n                        memory[temp29 + 0x64:temp29 + 0x64 + 0x20] = 0x6174696f6e206465706f73697400000000000000000000000000000000000000;\n                        var temp30 = memory[0x40:0x60];\n                        revert(memory[temp30:temp30 + temp29 - temp30 + 0x84]);\n                    }\n                } else {\n                    var temp33 = memory[0x40:0x60];\n                    memory[temp33:temp33 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp33 + 0x04:temp33 + 0x04 + 0x20] = 0x20;\n                    memory[temp33 + 0x24:temp33 + 0x24 + 0x20] = 0x1e;\n                    memory[temp33 + 0x44:temp33 + 0x44 + 0x20] = 0x506c656173652070726f7669646520612076616c696420776562736974650000;\n                    var temp34 = memory[0x40:0x60];\n                    revert(memory[temp34:temp34 + temp33 - temp34 + 0x64]);\n                }\n            } else {\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp37 + 0x04:temp37 + 0x04 + 0x20] = 0x20;\n                memory[temp37 + 0x24:temp37 + 0x24 + 0x20] = 0x21;\n                memory[temp37 + 0x44:temp37 + 0x44 + 0x20] = 0x4f6e6c7920454f41206d61792072656769737465722061732047756172646961;\n                memory[temp37 + 0x64:temp37 + 0x64 + 0x20] = 0x37 * 0x02 ** 0xf9;\n                var temp38 = memory[0x40:0x60];\n                revert(memory[temp38:temp38 + temp37 - temp38 + 0x84]);\n            }\n        } else if (var0 == 0x4b139a47) {\n            // Dispatch table entry for getGuardianData(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0151;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1, var2 = getGuardianData(var2);\n            var temp39 = memory[0x40:0x60];\n            var3 = temp39;\n            var4 = var3;\n            var5 = var4 + 0x20;\n            var temp40 = var5 + 0x20;\n            memory[var4:var4 + 0x20] = temp40 - var4;\n            var temp41 = var1;\n            memory[temp40:temp40 + 0x20] = memory[temp41:temp41 + 0x20];\n            var6 = temp40 + 0x20;\n            var8 = memory[temp41:temp41 + 0x20];\n            var7 = temp41 + 0x20;\n            var9 = var8;\n            var10 = var6;\n            var11 = var7;\n            var12 = 0x00;\n        \n            if (var12 >= var9) {\n            label_0192:\n                var temp42 = var8;\n                var6 = temp42 + var6;\n                var7 = temp42 & 0x1f;\n            \n                if (!var7) {\n                    var temp43 = var6;\n                    memory[var5:var5 + 0x20] = temp43 - var3;\n                    var temp44 = var2;\n                    memory[temp43:temp43 + 0x20] = memory[temp44:temp44 + 0x20];\n                    var6 = temp43 + 0x20;\n                    var8 = memory[temp44:temp44 + 0x20];\n                    var7 = temp44 + 0x20;\n                    var9 = var8;\n                    var10 = var6;\n                    var11 = var7;\n                    var12 = 0x00;\n                \n                    if (var12 >= var9) {\n                    label_01F2:\n                        var temp45 = var8;\n                        var6 = temp45 + var6;\n                        var7 = temp45 & 0x1f;\n                    \n                        if (!var7) {\n                            var temp46 = memory[0x40:0x60];\n                            return memory[temp46:temp46 + var6 - temp46];\n                        } else {\n                            var temp47 = var7;\n                            var temp48 = var6 - temp47;\n                            memory[temp48:temp48 + 0x20] = ~(0x0100 ** (0x20 - temp47) - 0x01) & memory[temp48:temp48 + 0x20];\n                            var temp49 = memory[0x40:0x60];\n                            return memory[temp49:temp49 + (temp48 + 0x20) - temp49];\n                        }\n                    } else {\n                    label_01E3:\n                        var temp50 = var12;\n                        memory[temp50 + var10:temp50 + var10 + 0x20] = memory[temp50 + var11:temp50 + var11 + 0x20];\n                        var12 = temp50 + 0x20;\n                    \n                        if (var12 >= var9) { goto label_01F2; }\n                        else { goto label_01E3; }\n                    }\n                } else {\n                    var temp51 = var7;\n                    var temp52 = var6 - temp51;\n                    memory[temp52:temp52 + 0x20] = ~(0x0100 ** (0x20 - temp51) - 0x01) & memory[temp52:temp52 + 0x20];\n                    var temp53 = temp52 + 0x20;\n                    memory[var5:var5 + 0x20] = temp53 - var3;\n                    var temp54 = var2;\n                    memory[temp53:temp53 + 0x20] = memory[temp54:temp54 + 0x20];\n                    var6 = temp53 + 0x20;\n                    var8 = memory[temp54:temp54 + 0x20];\n                    var7 = temp54 + 0x20;\n                    var9 = var8;\n                    var10 = var6;\n                    var11 = var7;\n                    var12 = 0x00;\n                \n                    if (var12 >= var9) { goto label_01F2; }\n                    else { goto label_01E3; }\n                }\n            } else {\n            label_0183:\n                var temp55 = var12;\n                memory[temp55 + var10:temp55 + var10 + 0x20] = memory[temp55 + var11:temp55 + var11 + 0x20];\n                var12 = temp55 + 0x20;\n            \n                if (var12 >= var9) { goto label_0192; }\n                else { goto label_0183; }\n            }\n        } else if (var0 == 0x4cf1f60b) {\n            // Dispatch table entry for 0x4cf1f60b (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x024a;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var1 = func_08F3(var2, var3);\n        \n        label_024A:\n            var temp56 = memory[0x40:0x60];\n            memory[temp56:temp56 + 0x20] = 0x20;\n            var temp57 = var1;\n            memory[temp56 + 0x20:temp56 + 0x20 + 0x20] = memory[temp57:temp57 + 0x20];\n            var2 = temp56;\n            var3 = var2;\n            var4 = var3 + 0x40;\n            var5 = temp57 + 0x20;\n            var6 = memory[temp57:temp57 + 0x20] * 0x20;\n            var7 = var6;\n            var8 = var4;\n            var9 = var5;\n            var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_0286:\n                var temp58 = memory[0x40:0x60];\n                return memory[temp58:temp58 + (var6 + var4) - temp58];\n            } else {\n            label_0277:\n                var temp59 = var10;\n                memory[temp59 + var8:temp59 + var8 + 0x20] = memory[temp59 + var9:temp59 + var9 + 0x20];\n                var10 = temp59 + 0x20;\n            \n                if (var10 >= var7) { goto label_0286; }\n                else { goto label_0277; }\n            }\n        } else if (var0 == 0x50d8f786) {\n            // Dispatch table entry for 0x50d8f786 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02bb;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1, var2 = func_09AA(var2);\n            var temp60 = memory[0x40:0x60];\n            memory[temp60:temp60 + 0x20] = var1;\n            memory[temp60 + 0x20:temp60 + 0x20 + 0x20] = var2;\n            var temp61 = memory[0x40:0x60];\n            return memory[temp61:temp61 + temp60 - temp61 + 0x40];\n        } else if (var0 == 0xd66d9e19) {\n            // Dispatch table entry for leave()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x012e;\n            leave();\n            stop();\n        } else if (var0 == 0xd93d7d29) {\n            // Dispatch table entry for 0xd93d7d29 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x024a;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var1 = func_0D56(var2, var3);\n            goto label_024A;\n        } else if (var0 == 0xf4c84d19) {\n            // Dispatch table entry for update(string,string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x012e;\n            var temp62 = msg.data[0x04:0x24];\n            var2 = temp62 + 0x24;\n            var3 = msg.data[temp62 + 0x04:temp62 + 0x04 + 0x20];\n            var temp63 = msg.data[0x24:0x44];\n            var4 = temp63 + 0x24;\n            var5 = msg.data[temp63 + 0x04:temp63 + 0x04 + 0x20];\n            var6 = 0x00;\n            var7 = 0x0e65;\n            var8 = msg.sender;\n            var7 = isGuardian(var8);\n        \n            if (var7) {\n                var7 = 0x0ed1;\n                var8 = msg.sender;\n                var7 = func_1087(var8);\n            \n                if (!var7) {\n                    var6 = msg.sender;\n                \n                    if (var3 <= 0x00) {\n                        var temp75 = memory[0x40:0x60];\n                        memory[temp75:temp75 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp75 + 0x04:temp75 + 0x04 + 0x20] = 0x20;\n                        memory[temp75 + 0x24:temp75 + 0x24 + 0x20] = 0x1b;\n                        memory[temp75 + 0x44:temp75 + 0x44 + 0x20] = 0x506c656173652070726f7669646520612076616c6964206e616d650000000000;\n                        var temp76 = memory[0x40:0x60];\n                        revert(memory[temp76:temp76 + temp75 - temp76 + 0x64]);\n                    } else if (var5 > 0x00) {\n                        memory[0x00:0x20] = var6 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var7 = 0x1008;\n                        var8 = keccak256(memory[0x00:0x40]);\n                        var9 = var2;\n                        var10 = var3;\n                        var temp64 = var8;\n                        var temp65 = storage[temp64];\n                        memory[0x00:0x20] = temp64;\n                        var11 = keccak256(memory[0x00:0x20]);\n                        var temp66 = var9;\n                        var9 = var11 + ((!(temp65 & 0x01) * 0x0100 - 0x01 & temp65) / 0x02 + 0x1f) / 0x20;\n                        var12 = temp66;\n                    \n                        if (0x1f < var10) {\n                            var temp67 = var10;\n                            storage[var8] = temp67 + temp67 + 0x01;\n                        \n                            if (!temp67) { goto label_112D; }\n                        \n                            var temp68 = var10;\n                            var temp69 = var12;\n                            var10 = temp69;\n                            var12 = var10 + temp68;\n                        \n                            if (var12 <= var10) { goto label_112D; }\n                        \n                        label_1209:\n                            var temp70 = var10;\n                            var temp71 = var11;\n                            storage[temp71] = msg.data[temp70:temp70 + 0x20];\n                            var10 = temp70 + 0x20;\n                            var12 = var12;\n                            var11 = temp71 + 0x01;\n                        \n                            if (var12 <= var10) { goto label_112D; }\n                            else { goto label_1209; }\n                        } else {\n                            var temp72 = var10;\n                            storage[var8] = (msg.data[var12:var12 + 0x20] & ~0xff) | temp72 + temp72;\n                            goto label_112D;\n                        }\n                    } else {\n                        var temp73 = memory[0x40:0x60];\n                        memory[temp73:temp73 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp73 + 0x04:temp73 + 0x04 + 0x20] = 0x20;\n                        memory[temp73 + 0x24:temp73 + 0x24 + 0x20] = 0x1e;\n                        memory[temp73 + 0x44:temp73 + 0x44 + 0x20] = 0x506c656173652070726f7669646520612076616c696420776562736974650000;\n                        var temp74 = memory[0x40:0x60];\n                        revert(memory[temp74:temp74 + temp73 - temp74 + 0x64]);\n                    }\n                } else {\n                    var temp77 = memory[0x40:0x60];\n                    memory[temp77:temp77 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp77 + 0x04:temp77 + 0x04 + 0x20] = 0x20;\n                    memory[temp77 + 0x24:temp77 + 0x24 + 0x20] = 0x21;\n                    memory[temp77 + 0x44:temp77 + 0x44 + 0x20] = 0x4f6e6c7920454f41206d61792072656769737465722061732047756172646961;\n                    memory[temp77 + 0x64:temp77 + 0x64 + 0x20] = 0x37 * 0x02 ** 0xf9;\n                    var temp78 = memory[0x40:0x60];\n                    revert(memory[temp78:temp78 + temp77 - temp78 + 0x84]);\n                }\n            } else {\n                var temp79 = memory[0x40:0x60];\n                memory[temp79:temp79 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp79 + 0x04:temp79 + 0x04 + 0x20] = 0x20;\n                memory[temp79 + 0x24:temp79 + 0x24 + 0x20] = 0x21;\n                memory[temp79 + 0x44:temp79 + 0x44 + 0x20] = 0x596f75206d757374206265206120726567697374657265642067756172646961;\n                memory[temp79 + 0x64:temp79 + 0x64 + 0x20] = 0x37 * 0x02 ** 0xf9;\n                var temp80 = memory[0x40:0x60];\n                revert(memory[temp80:temp80 + temp79 - temp80 + 0x84]);\n            }\n        } else if (var0 == 0xf5660650) {\n            // Dispatch table entry for 0xf5660650 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00fd;\n            var2 = func_107C();\n            goto label_00FD;\n        } else if (var0 == 0xffa1ad74) {\n            // Dispatch table entry for VERSION()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00fd;\n            var2 = VERSION();\n            goto label_00FD;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function isGuardian(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        return storage[keccak256(memory[0x00:0x40]) + 0x03] > 0x00;\n    }\n    \n    function func_0379() returns (var r0) { return storage[0x00]; }\n    \n    function getGuardianData(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var var2 = 0x0731;\n        var var3 = arg0;\n        var2 = isGuardian(var3);\n    \n        if (var2) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = storage[temp0];\n            var temp2 = memory[0x40:0x60];\n            var temp3 = (temp1 & !(temp1 & 0x01) * 0x0100 + ~0x00) / 0x02;\n            var2 = temp2;\n            memory[0x40:0x60] = var2 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[var2:var2 + 0x20] = temp3;\n            var var4 = temp3;\n            var3 = temp0;\n            var var5 = var2 + 0x20;\n            var var6 = var3;\n            var var7 = var4;\n        \n            if (!var7) {\n            label_0824:\n                var0 = var2;\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n                var temp4 = keccak256(memory[0x00:0x40]) + 0x01;\n                var temp5 = storage[temp4];\n                var temp6 = (!(temp5 & 0x01) * 0x0100 - 0x01 & temp5) / 0x02;\n                var temp7 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n                var2 = temp7;\n                var3 = temp4;\n                var4 = temp6;\n                memory[var2:var2 + 0x20] = var4;\n                var5 = var2 + 0x20;\n                var6 = var3;\n                var temp8 = storage[var6];\n                var7 = (!(temp8 & 0x01) * 0x0100 - 0x01 & temp8) / 0x02;\n            \n                if (!var7) {\n                label_08E7:\n                    arg0 = var2;\n                    r0 = var0;\n                    return r0, arg0;\n                } else if (0x1f < var7) {\n                    var temp9 = var5;\n                    var temp10 = temp9 + var7;\n                    var5 = temp10;\n                    memory[0x00:0x20] = var6;\n                    var temp11 = keccak256(memory[0x00:0x20]);\n                    memory[temp9:temp9 + 0x20] = storage[temp11];\n                    var6 = temp11 + 0x01;\n                    var7 = temp9 + 0x20;\n                \n                    if (var5 <= var7) { goto label_08DE; }\n                \n                label_08CA:\n                    var temp12 = var6;\n                    var temp13 = var7;\n                    memory[temp13:temp13 + 0x20] = storage[temp12];\n                    var6 = temp12 + 0x01;\n                    var7 = temp13 + 0x20;\n                \n                    if (var5 > var7) { goto label_08CA; }\n                \n                label_08DE:\n                    var temp14 = var5;\n                    var temp15 = temp14 + (var7 - temp14 & 0x1f);\n                    var7 = temp14;\n                    var5 = temp15;\n                    goto label_08E7;\n                } else {\n                    var temp16 = var5;\n                    memory[temp16:temp16 + 0x20] = storage[var6] / 0x0100 * 0x0100;\n                    var5 = temp16 + 0x20;\n                    var7 = var7;\n                    goto label_08E7;\n                }\n            } else if (0x1f < var7) {\n                var temp17 = var5;\n                var temp18 = temp17 + var7;\n                var5 = temp18;\n                memory[0x00:0x20] = var6;\n                var temp19 = keccak256(memory[0x00:0x20]);\n                memory[temp17:temp17 + 0x20] = storage[temp19];\n                var6 = temp19 + 0x01;\n                var7 = temp17 + 0x20;\n            \n                if (var5 <= var7) { goto label_081B; }\n            \n            label_0807:\n                var temp20 = var6;\n                var temp21 = var7;\n                memory[temp21:temp21 + 0x20] = storage[temp20];\n                var6 = temp20 + 0x01;\n                var7 = temp21 + 0x20;\n            \n                if (var5 > var7) { goto label_0807; }\n            \n            label_081B:\n                var temp22 = var5;\n                var temp23 = temp22 + (var7 - temp22 & 0x1f);\n                var7 = temp22;\n                var5 = temp23;\n                goto label_0824;\n            } else {\n                var temp24 = var5;\n                memory[temp24:temp24 + 0x20] = storage[var6] / 0x0100 * 0x0100;\n                var5 = temp24 + 0x20;\n                var7 = var7;\n                goto label_0824;\n            }\n        } else {\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = 0x20;\n            memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = 0x20;\n            memory[temp25 + 0x44:temp25 + 0x44 + 0x20] = 0x506c656173652070726f766964652061206c697374656420477561726469616e;\n            var temp26 = memory[0x40:0x60];\n            revert(memory[temp26:temp26 + temp25 - temp26 + 0x64]);\n        }\n    }\n    \n    function func_08F3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x60;\n        var var4 = 0x00;\n        var var5 = 0x0906;\n        var var6 = arg0;\n        var var7 = arg1;\n        var5 = func_0D56(var6, var7);\n        var1 = var5;\n        var temp0 = memory[var1:var1 + 0x20];\n        var2 = temp0;\n        var temp1 = memory[0x40:0x60];\n        var6 = var2;\n        var5 = temp1;\n        memory[var5:var5 + 0x20] = var6;\n        memory[0x40:0x60] = var5 + var6 * 0x20 + 0x20;\n    \n        if (!var6) {\n            var3 = var5;\n            var4 = 0x00;\n        \n            if (var4 >= var2) {\n            label_09A0:\n                return var3;\n            } else {\n            label_0947:\n                var5 = var1;\n                var6 = var4;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                var5 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] * 0x01000000000000000000000000;\n                var6 = var3;\n                var7 = var4;\n            \n                if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n            \n                memory[var6 + var7 * 0x20 + 0x20:var6 + var7 * 0x20 + 0x20 + 0x20] = var5 & ~0xffffffffffffffffffffffff;\n                var4 = var4 + 0x01;\n            \n                if (var4 >= var2) { goto label_09A0; }\n                else { goto label_0947; }\n            }\n        } else {\n            var temp2 = var6 * 0x20;\n            memory[var5 + 0x20:var5 + 0x20 + temp2] = code[code.length:code.length + temp2];\n            var3 = var5;\n            var4 = 0x00;\n        \n            if (var4 >= var2) { goto label_09A0; }\n            else { goto label_0947; }\n        }\n    }\n    \n    function func_09AA(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x09b8;\n        var var4 = arg0;\n        var3 = isGuardian(var4);\n    \n        if (var3) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            arg0 = storage[temp0 + 0x04];\n            r0 = storage[temp0 + 0x03];\n            return r0, arg0;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x20;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x506c656173652070726f766964652061206c697374656420477561726469616e;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function leave() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0a45;\n        var var3 = msg.sender;\n        var2 = isGuardian(var3);\n    \n        if (var2) {\n            var2 = 0x0ab1;\n            var3 = msg.sender;\n            var2 = func_1087(var3);\n        \n            if (!var2) {\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x03;\n                var3 = storage[keccak256(memory[0x00:0x40]) + 0x05];\n                var0 = msg.sender;\n                var2 = 0x0b3b;\n                var var4 = storage[0x01];\n                var2 = func_108F(var3, var4);\n            \n                if (block.timestamp >= var2) {\n                    memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                    var1 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                    var2 = var0 & 0x02 ** 0xa0 - 0x01;\n                    var3 = 0x02;\n                    var4 = var1;\n                \n                    if (var4 >= storage[var3]) { assert(); }\n                \n                    memory[0x00:0x20] = var3;\n                \n                    if (storage[keccak256(memory[0x00:0x20]) + var4] & 0x02 ** 0xa0 - 0x01 != var2) { assert(); }\n                \n                    var2 = 0x02;\n                    var temp0 = storage[var2];\n                    var3 = temp0 + ~0x00;\n                \n                    if (var3 >= temp0) { assert(); }\n                \n                    memory[0x00:0x20] = var2;\n                    var temp1 = storage[keccak256(memory[0x00:0x20]) + var3];\n                    var3 = 0x02;\n                    var2 = temp1 & 0x02 ** 0xa0 - 0x01;\n                    var4 = var1;\n                \n                    if (var4 >= storage[var3]) { assert(); }\n                \n                    memory[0x00:0x20] = var3;\n                    var temp2 = keccak256(memory[0x00:0x20]) + var4;\n                    storage[temp2] = (var2 & 0x02 ** 0xa0 - 0x01) | (storage[temp2] & ~(0x02 ** 0xa0 - 0x01));\n                    var2 = var1;\n                    var3 = 0x03;\n                    var4 = 0x00;\n                    var var5 = 0x02;\n                    var var6 = var2;\n                \n                    if (var6 >= storage[var5]) { assert(); }\n                \n                    memory[0x00:0x20] = var5;\n                    var temp3 = var4;\n                    memory[temp3:temp3 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                    memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var3;\n                    storage[keccak256(memory[0x00:0x00 + temp3 + 0x40]) + 0x02] = var2;\n                    var2 = storage[0x02];\n                    var4 = 0x02;\n                    var3 = 0x0c95;\n                    var5 = var2 + ~0x00;\n                    func_113D(var4, var5);\n                    memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                    var3 = 0x00;\n                    var2 = keccak256(memory[var3:var3 + 0x40]);\n                    var4 = 0x0cb9;\n                    var5 = var2;\n                    var6 = var3;\n                    func_1166(var5, var6);\n                    var4 = 0x0cc7;\n                    var5 = var2 + 0x01;\n                    var6 = 0x00;\n                    func_1166(var5, var6);\n                    var temp4 = var2;\n                    storage[temp4 + 0x02] = 0x00;\n                    storage[temp4 + 0x03] = 0x00;\n                    storage[temp4 + 0x04] = 0x00;\n                    storage[temp4 + 0x05] = 0x00;\n                    var temp5 = storage[0x00];\n                    var temp6 = memory[0x40:0x60];\n                    var temp7;\n                    temp7, memory[temp6:temp6 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp5 * 0x08fc).value(temp5)(memory[temp6:temp6 + 0x00]);\n                    var2 = !temp7;\n                \n                    if (!var2) {\n                        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x30e7885e5f0fc1d648230d0e9245d45333c7158885df954f0a2f0fb442be0f65, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                        return;\n                    } else {\n                        var temp8 = returndata.length;\n                        memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                    memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x20;\n                    memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x4d696e696d616c20677561726469616e2074696d65206469646e742070617373;\n                    var temp10 = memory[0x40:0x60];\n                    revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n                }\n            } else {\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n                memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x21;\n                memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = 0x4f6e6c7920454f41206d61792072656769737465722061732047756172646961;\n                memory[temp11 + 0x64:temp11 + 0x64 + 0x20] = 0x37 * 0x02 ** 0xf9;\n                var temp12 = memory[0x40:0x60];\n                revert(memory[temp12:temp12 + temp11 - temp12 + 0x84]);\n            }\n        } else {\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x21;\n            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x596f75206d757374206265206120726567697374657265642067756172646961;\n            memory[temp13 + 0x64:temp13 + 0x64 + 0x20] = 0x37 * 0x02 ** 0xf9;\n            var temp14 = memory[0x40:0x60];\n            revert(memory[temp14:temp14 + temp13 - temp14 + 0x84]);\n        }\n    }\n    \n    function func_0D56(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 < storage[0x02]) {\n            var var4 = storage[0x02];\n            var var5 = 0x0d92;\n            var var6 = arg0;\n            var var7 = arg1;\n            var5 = func_108F(var6, var7);\n        \n            if (var5 <= var4) {\n            label_0DAE:\n                var temp0 = arg1;\n                var temp1 = memory[0x40:0x60];\n                var4 = temp1;\n                var5 = temp0;\n                memory[var4:var4 + 0x20] = var5;\n                memory[0x40:0x60] = var4 + var5 * 0x20 + 0x20;\n            \n                if (!var5) {\n                    var1 = var4;\n                    var2 = memory[var1:var1 + 0x20];\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_0E4D:\n                        var0 = var1;\n                    \n                    label_0E51:\n                        return var0;\n                    } else {\n                    label_0DED:\n                        var4 = 0x02;\n                        var5 = 0x0dfe;\n                        var6 = arg0;\n                        var7 = var3;\n                        var5 = func_108F(var6, var7);\n                    \n                        if (var5 >= storage[var4]) { assert(); }\n                    \n                        memory[0x00:0x20] = var4;\n                        var4 = storage[keccak256(memory[0x00:0x20]) + var5] & 0x02 ** 0xa0 - 0x01;\n                        var5 = var1;\n                        var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_0E4D; }\n                        else { goto label_0DED; }\n                    }\n                } else {\n                    var temp2 = var4;\n                    var temp3 = var5 * 0x20;\n                    memory[temp2 + 0x20:temp2 + 0x20 + temp3] = code[code.length:code.length + temp3];\n                    var1 = temp2;\n                    var2 = memory[var1:var1 + 0x20];\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_0E4D; }\n                    else { goto label_0DED; }\n                }\n            } else {\n                var4 = 0x0dab;\n                var5 = storage[0x02];\n                var6 = arg0;\n                var4 = func_10A8(var5, var6);\n                arg1 = var4;\n                goto label_0DAE;\n            }\n        } else {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x00;\n            memory[0x40:0x60] = temp4 + 0x20;\n            var0 = temp4;\n            goto label_0E51;\n        }\n    }\n    \n    function func_107C() returns (var r0) { return storage[0x01]; }\n    \n    function VERSION() returns (var r0) { return 0x01; }\n    \n    function func_1087(var arg0) returns (var r0) { return address(arg0).code.length > 0x00; }\n    \n    function func_108F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_10A8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1139(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_113D(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_1161:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x1161;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_121B(var1, var2);\n            goto label_1161;\n        }\n    }\n    \n    function func_1166(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        arg1 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        storage[temp0] = 0x00;\n    \n        if (0x1f >= arg1) { goto label_11AA; }\n    \n        memory[0x00:0x20] = arg0;\n        arg0 = 0x11aa;\n        arg1 = keccak256(memory[0x00:0x20]) + (arg1 + 0x1f) / 0x20;\n        var var0 = keccak256(memory[0x00:0x20]);\n        arg0 = func_121B(arg1, var0);\n    \n    label_11AA:\n    }\n    \n    function func_121B(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1235;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_1139(arg1, var0); }\n    \n    label_122A:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_122A; }\n    \n        arg0 = func_1139(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x0c68ba21) {\n            // Dispatch table entry for isGuardian(address)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00d4;\n            var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = isGuardian(var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = !!var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x1201b4bd) {\n            // Dispatch table entry for 0x1201b4bd (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00fd;\n            var2 = func_0379();\n        \n        label_00FD:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var2;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n        } else if (var0 == 0x3ffbd47f) {\n            // Dispatch table entry for register(string,string)\n            var1 = 0x012e;\n            var temp4 = msg.data[0x04:0x24];\n            var2 = temp4 + 0x24;\n            var var3 = msg.data[temp4 + 0x04:temp4 + 0x04 + 0x20];\n            var temp5 = msg.data[0x24:0x44];\n            var var4 = temp5 + 0x24;\n            var var5 = msg.data[temp5 + 0x04:temp5 + 0x04 + 0x20];\n            var var6 = 0x00;\n            var var7 = var6;\n            var var8 = 0x038b;\n            var var9 = msg.sender;\n            var8 = func_1087(var9);\n        \n            if (!var8) {\n                var6 = msg.sender;\n            \n                if (var3 <= 0x00) {\n                    var temp35 = memory[0x40:0x60];\n                    memory[temp35:temp35 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp35 + 0x04:temp35 + 0x04 + 0x20] = 0x20;\n                    memory[temp35 + 0x24:temp35 + 0x24 + 0x20] = 0x1b;\n                    memory[temp35 + 0x44:temp35 + 0x44 + 0x20] = 0x506c656173652070726f7669646520612076616c6964206e616d650000000000;\n                    var temp36 = memory[0x40:0x60];\n                    revert(memory[temp36:temp36 + temp35 - temp36 + 0x64]);\n                } else if (var5 > 0x00) {\n                    var8 = 0x04a9;\n                    var9 = var6;\n                    var8 = isGuardian(var9);\n                \n                    if (var8) {\n                        var temp31 = memory[0x40:0x60];\n                        memory[temp31:temp31 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp31 + 0x04:temp31 + 0x04 + 0x20] = 0x20;\n                        memory[temp31 + 0x24:temp31 + 0x24 + 0x20] = 0x14;\n                        memory[temp31 + 0x44:temp31 + 0x44 + 0x20] = 0x43616e6e6f74206265206120677561726469616e000000000000000000000000;\n                        var temp32 = memory[0x40:0x60];\n                        revert(memory[temp32:temp32 + temp31 - temp32 + 0x64]);\n                    } else if (msg.value == storage[0x00]) {\n                        var temp6 = storage[0x02];\n                        storage[0x02] = temp6 + 0x01;\n                        var7 = temp6;\n                        memory[0x00:0x20] = 0x02;\n                        var temp7 = var7 + 0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace;\n                        var temp8 = var6;\n                        storage[temp7] = (temp8 & 0x02 ** 0xa0 - 0x01) | (storage[temp7] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        var temp9 = memory[0x40:0x60];\n                        var temp10 = var3;\n                        memory[0x40:0x60] = temp9 + (temp10 + 0x1f) / 0x20 * 0x20 + 0xe0;\n                        var temp11 = temp9 + 0xc0;\n                        memory[temp11:temp11 + 0x20] = temp10;\n                        var8 = temp9;\n                        memory[var8 + 0xe0:var8 + 0xe0 + temp10] = msg.data[var2:var2 + temp10];\n                        memory[var8:var8 + 0x20] = temp11;\n                        var temp12 = var8 + 0x20;\n                        var temp13 = var5;\n                        var temp14 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp14 + (temp13 + 0x1f) / 0x20 * 0x20 + 0x20;\n                        memory[temp14:temp14 + 0x20] = temp13;\n                        memory[temp14 + 0x20:temp14 + 0x20 + temp13] = msg.data[var4:var4 + temp13];\n                        memory[temp12:temp12 + 0x20] = temp14;\n                        var temp15 = temp12 + 0x20;\n                        memory[temp15:temp15 + 0x20] = var7;\n                        var temp16 = temp15 + 0x20;\n                        memory[temp16:temp16 + 0x20] = block.number;\n                        var temp17 = temp16 + 0x20;\n                        memory[temp17:temp17 + 0x20] = block.number;\n                        memory[temp17 + 0x20:temp17 + 0x20 + 0x20] = block.timestamp;\n                        memory[0x00:0x20] = temp8 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var9 = keccak256(memory[0x00:0x40]);\n                        var temp18 = memory[var8:var8 + 0x20];\n                        var var10 = 0x06a6;\n                        var var11 = var9;\n                        var var12 = temp18 + 0x20;\n                        var var13 = memory[temp18:temp18 + 0x20];\n                        var temp19 = var11;\n                        var temp20 = storage[temp19];\n                        memory[0x00:0x20] = temp19;\n                        var var14 = keccak256(memory[0x00:0x20]);\n                        var temp21 = var12;\n                        var12 = var14 + ((!(temp20 & 0x01) * 0x0100 - 0x01 & temp20) / 0x02 + 0x1f) / 0x20;\n                        var var15 = temp21;\n                    \n                        if (0x1f < var13) {\n                            var temp22 = var13;\n                            storage[var11] = temp22 + temp22 + 0x01;\n                        \n                            if (!temp22) {\n                            label_112D:\n                                var temp23 = var12;\n                                var12 = 0x1139;\n                                var13 = temp23;\n                                var12 = func_121B(var13, var14);\n                                var10 = func_1139(var11, var12);\n                                // Error: Could not resolve method call return address!\n                            } else {\n                                var temp24 = var13;\n                                var temp25 = var15;\n                                var13 = temp25;\n                                var15 = var13 + temp24;\n                            \n                                if (var15 <= var13) { goto label_112D; }\n                            \n                            label_111B:\n                                var temp26 = var13;\n                                var temp27 = var14;\n                                storage[temp27] = memory[temp26:temp26 + 0x20];\n                                var13 = temp26 + 0x20;\n                                var15 = var15;\n                                var14 = temp27 + 0x01;\n                            \n                                if (var15 <= var13) { goto label_112D; }\n                                else { goto label_111B; }\n                            }\n                        } else {\n                            var temp28 = var13;\n                            storage[var11] = temp28 + temp28 | (memory[var15:var15 + 0x20] & ~0xff);\n                            goto label_112D;\n                        }\n                    } else {\n                        var temp29 = memory[0x40:0x60];\n                        memory[temp29:temp29 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp29 + 0x04:temp29 + 0x04 + 0x20] = 0x20;\n                        memory[temp29 + 0x24:temp29 + 0x24 + 0x20] = 0x2d;\n                        memory[temp29 + 0x44:temp29 + 0x44 + 0x20] = 0x506c656173652070726f76696465207468652065786163742072656769737472;\n                        memory[temp29 + 0x64:temp29 + 0x64 + 0x20] = 0x6174696f6e206465706f73697400000000000000000000000000000000000000;\n                        var temp30 = memory[0x40:0x60];\n                        revert(memory[temp30:temp30 + temp29 - temp30 + 0x84]);\n                    }\n                } else {\n                    var temp33 = memory[0x40:0x60];\n                    memory[temp33:temp33 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp33 + 0x04:temp33 + 0x04 + 0x20] = 0x20;\n                    memory[temp33 + 0x24:temp33 + 0x24 + 0x20] = 0x1e;\n                    memory[temp33 + 0x44:temp33 + 0x44 + 0x20] = 0x506c656173652070726f7669646520612076616c696420776562736974650000;\n                    var temp34 = memory[0x40:0x60];\n                    revert(memory[temp34:temp34 + temp33 - temp34 + 0x64]);\n                }\n            } else {\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp37 + 0x04:temp37 + 0x04 + 0x20] = 0x20;\n                memory[temp37 + 0x24:temp37 + 0x24 + 0x20] = 0x21;\n                memory[temp37 + 0x44:temp37 + 0x44 + 0x20] = 0x4f6e6c7920454f41206d61792072656769737465722061732047756172646961;\n                memory[temp37 + 0x64:temp37 + 0x64 + 0x20] = 0x37 * 0x02 ** 0xf9;\n                var temp38 = memory[0x40:0x60];\n                revert(memory[temp38:temp38 + temp37 - temp38 + 0x84]);\n            }\n        } else if (var0 == 0x4b139a47) {\n            // Dispatch table entry for getGuardianData(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0151;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1, var2 = getGuardianData(var2);\n            var temp39 = memory[0x40:0x60];\n            var3 = temp39;\n            var4 = var3;\n            var5 = var4 + 0x20;\n            var temp40 = var5 + 0x20;\n            memory[var4:var4 + 0x20] = temp40 - var4;\n            var temp41 = var1;\n            memory[temp40:temp40 + 0x20] = memory[temp41:temp41 + 0x20];\n            var6 = temp40 + 0x20;\n            var8 = memory[temp41:temp41 + 0x20];\n            var7 = temp41 + 0x20;\n            var9 = var8;\n            var10 = var6;\n            var11 = var7;\n            var12 = 0x00;\n        \n            if (var12 >= var9) {\n            label_0192:\n                var temp42 = var8;\n                var6 = temp42 + var6;\n                var7 = temp42 & 0x1f;\n            \n                if (!var7) {\n                    var temp43 = var6;\n                    memory[var5:var5 + 0x20] = temp43 - var3;\n                    var temp44 = var2;\n                    memory[temp43:temp43 + 0x20] = memory[temp44:temp44 + 0x20];\n                    var6 = temp43 + 0x20;\n                    var8 = memory[temp44:temp44 + 0x20];\n                    var7 = temp44 + 0x20;\n                    var9 = var8;\n                    var10 = var6;\n                    var11 = var7;\n                    var12 = 0x00;\n                \n                    if (var12 >= var9) {\n                    label_01F2:\n                        var temp45 = var8;\n                        var6 = temp45 + var6;\n                        var7 = temp45 & 0x1f;\n                    \n                        if (!var7) {\n                            var temp46 = memory[0x40:0x60];\n                            return memory[temp46:temp46 + var6 - temp46];\n                        } else {\n                            var temp47 = var7;\n                            var temp48 = var6 - temp47;\n                            memory[temp48:temp48 + 0x20] = ~(0x0100 ** (0x20 - temp47) - 0x01) & memory[temp48:temp48 + 0x20];\n                            var temp49 = memory[0x40:0x60];\n                            return memory[temp49:temp49 + (temp48 + 0x20) - temp49];\n                        }\n                    } else {\n                    label_01E3:\n                        var temp50 = var12;\n                        memory[temp50 + var10:temp50 + var10 + 0x20] = memory[temp50 + var11:temp50 + var11 + 0x20];\n                        var12 = temp50 + 0x20;\n                    \n                        if (var12 >= var9) { goto label_01F2; }\n                        else { goto label_01E3; }\n                    }\n                } else {\n                    var temp51 = var7;\n                    var temp52 = var6 - temp51;\n                    memory[temp52:temp52 + 0x20] = ~(0x0100 ** (0x20 - temp51) - 0x01) & memory[temp52:temp52 + 0x20];\n                    var temp53 = temp52 + 0x20;\n                    memory[var5:var5 + 0x20] = temp53 - var3;\n                    var temp54 = var2;\n                    memory[temp53:temp53 + 0x20] = memory[temp54:temp54 + 0x20];\n                    var6 = temp53 + 0x20;\n                    var8 = memory[temp54:temp54 + 0x20];\n                    var7 = temp54 + 0x20;\n                    var9 = var8;\n                    var10 = var6;\n                    var11 = var7;\n                    var12 = 0x00;\n                \n                    if (var12 >= var9) { goto label_01F2; }\n                    else { goto label_01E3; }\n                }\n            } else {\n            label_0183:\n                var temp55 = var12;\n                memory[temp55 + var10:temp55 + var10 + 0x20] = memory[temp55 + var11:temp55 + var11 + 0x20];\n                var12 = temp55 + 0x20;\n            \n                if (var12 >= var9) { goto label_0192; }\n                else { goto label_0183; }\n            }\n        } else if (var0 == 0x4cf1f60b) {\n            // Dispatch table entry for 0x4cf1f60b (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x024a;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var1 = func_08F3(var2, var3);\n        \n        label_024A:\n            var temp56 = memory[0x40:0x60];\n            memory[temp56:temp56 + 0x20] = 0x20;\n            var temp57 = var1;\n            memory[temp56 + 0x20:temp56 + 0x20 + 0x20] = memory[temp57:temp57 + 0x20];\n            var2 = temp56;\n            var3 = var2;\n            var4 = var3 + 0x40;\n            var5 = temp57 + 0x20;\n            var6 = memory[temp57:temp57 + 0x20] * 0x20;\n            var7 = var6;\n            var8 = var4;\n            var9 = var5;\n            var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_0286:\n                var temp58 = memory[0x40:0x60];\n                return memory[temp58:temp58 + (var6 + var4) - temp58];\n            } else {\n            label_0277:\n                var temp59 = var10;\n                memory[temp59 + var8:temp59 + var8 + 0x20] = memory[temp59 + var9:temp59 + var9 + 0x20];\n                var10 = temp59 + 0x20;\n            \n                if (var10 >= var7) { goto label_0286; }\n                else { goto label_0277; }\n            }\n        } else if (var0 == 0x50d8f786) {\n            // Dispatch table entry for 0x50d8f786 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02bb;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1, var2 = func_09AA(var2);\n            var temp60 = memory[0x40:0x60];\n            memory[temp60:temp60 + 0x20] = var1;\n            memory[temp60 + 0x20:temp60 + 0x20 + 0x20] = var2;\n            var temp61 = memory[0x40:0x60];\n            return memory[temp61:temp61 + temp60 - temp61 + 0x40];\n        } else if (var0 == 0xd66d9e19) {\n            // Dispatch table entry for leave()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x012e;\n            leave();\n            stop();\n        } else if (var0 == 0xd93d7d29) {\n            // Dispatch table entry for 0xd93d7d29 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x024a;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var1 = func_0D56(var2, var3);\n            goto label_024A;\n        } else if (var0 == 0xf4c84d19) {\n            // Dispatch table entry for update(string,string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x012e;\n            var temp62 = msg.data[0x04:0x24];\n            var2 = temp62 + 0x24;\n            var3 = msg.data[temp62 + 0x04:temp62 + 0x04 + 0x20];\n            var temp63 = msg.data[0x24:0x44];\n            var4 = temp63 + 0x24;\n            var5 = msg.data[temp63 + 0x04:temp63 + 0x04 + 0x20];\n            var6 = 0x00;\n            var7 = 0x0e65;\n            var8 = msg.sender;\n            var7 = isGuardian(var8);\n        \n            if (var7) {\n                var7 = 0x0ed1;\n                var8 = msg.sender;\n                var7 = func_1087(var8);\n            \n                if (!var7) {\n                    var6 = msg.sender;\n                \n                    if (var3 <= 0x00) {\n                        var temp75 = memory[0x40:0x60];\n                        memory[temp75:temp75 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp75 + 0x04:temp75 + 0x04 + 0x20] = 0x20;\n                        memory[temp75 + 0x24:temp75 + 0x24 + 0x20] = 0x1b;\n                        memory[temp75 + 0x44:temp75 + 0x44 + 0x20] = 0x506c656173652070726f7669646520612076616c6964206e616d650000000000;\n                        var temp76 = memory[0x40:0x60];\n                        revert(memory[temp76:temp76 + temp75 - temp76 + 0x64]);\n                    } else if (var5 > 0x00) {\n                        memory[0x00:0x20] = var6 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var7 = 0x1008;\n                        var8 = keccak256(memory[0x00:0x40]);\n                        var9 = var2;\n                        var10 = var3;\n                        var temp64 = var8;\n                        var temp65 = storage[temp64];\n                        memory[0x00:0x20] = temp64;\n                        var11 = keccak256(memory[0x00:0x20]);\n                        var temp66 = var9;\n                        var9 = var11 + ((!(temp65 & 0x01) * 0x0100 - 0x01 & temp65) / 0x02 + 0x1f) / 0x20;\n                        var12 = temp66;\n                    \n                        if (0x1f < var10) {\n                            var temp67 = var10;\n                            storage[var8] = temp67 + temp67 + 0x01;\n                        \n                            if (!temp67) { goto label_112D; }\n                        \n                            var temp68 = var10;\n                            var temp69 = var12;\n                            var10 = temp69;\n                            var12 = var10 + temp68;\n                        \n                            if (var12 <= var10) { goto label_112D; }\n                        \n                        label_1209:\n                            var temp70 = var10;\n                            var temp71 = var11;\n                            storage[temp71] = msg.data[temp70:temp70 + 0x20];\n                            var10 = temp70 + 0x20;\n                            var12 = var12;\n                            var11 = temp71 + 0x01;\n                        \n                            if (var12 <= var10) { goto label_112D; }\n                            else { goto label_1209; }\n                        } else {\n                            var temp72 = var10;\n                            storage[var8] = (msg.data[var12:var12 + 0x20] & ~0xff) | temp72 + temp72;\n                            goto label_112D;\n                        }\n                    } else {\n                        var temp73 = memory[0x40:0x60];\n                        memory[temp73:temp73 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp73 + 0x04:temp73 + 0x04 + 0x20] = 0x20;\n                        memory[temp73 + 0x24:temp73 + 0x24 + 0x20] = 0x1e;\n                        memory[temp73 + 0x44:temp73 + 0x44 + 0x20] = 0x506c656173652070726f7669646520612076616c696420776562736974650000;\n                        var temp74 = memory[0x40:0x60];\n                        revert(memory[temp74:temp74 + temp73 - temp74 + 0x64]);\n                    }\n                } else {\n                    var temp77 = memory[0x40:0x60];\n                    memory[temp77:temp77 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp77 + 0x04:temp77 + 0x04 + 0x20] = 0x20;\n                    memory[temp77 + 0x24:temp77 + 0x24 + 0x20] = 0x21;\n                    memory[temp77 + 0x44:temp77 + 0x44 + 0x20] = 0x4f6e6c7920454f41206d61792072656769737465722061732047756172646961;\n                    memory[temp77 + 0x64:temp77 + 0x64 + 0x20] = 0x37 * 0x02 ** 0xf9;\n                    var temp78 = memory[0x40:0x60];\n                    revert(memory[temp78:temp78 + temp77 - temp78 + 0x84]);\n                }\n            } else {\n                var temp79 = memory[0x40:0x60];\n                memory[temp79:temp79 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp79 + 0x04:temp79 + 0x04 + 0x20] = 0x20;\n                memory[temp79 + 0x24:temp79 + 0x24 + 0x20] = 0x21;\n                memory[temp79 + 0x44:temp79 + 0x44 + 0x20] = 0x596f75206d757374206265206120726567697374657265642067756172646961;\n                memory[temp79 + 0x64:temp79 + 0x64 + 0x20] = 0x37 * 0x02 ** 0xf9;\n                var temp80 = memory[0x40:0x60];\n                revert(memory[temp80:temp80 + temp79 - temp80 + 0x84]);\n            }\n        } else if (var0 == 0xf5660650) {\n            // Dispatch table entry for 0xf5660650 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00fd;\n            var2 = func_107C();\n            goto label_00FD;\n        } else if (var0 == 0xffa1ad74) {\n            // Dispatch table entry for VERSION()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00fd;\n            var2 = VERSION();\n            goto label_00FD;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function isGuardian(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        return storage[keccak256(memory[0x00:0x40]) + 0x03] > 0x00;\n    }\n    \n    function func_0379() returns (var r0) { return storage[0x00]; }\n    \n    function getGuardianData(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var var2 = 0x0731;\n        var var3 = arg0;\n        var2 = isGuardian(var3);\n    \n        if (var2) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = storage[temp0];\n            var temp2 = memory[0x40:0x60];\n            var temp3 = (temp1 & !(temp1 & 0x01) * 0x0100 + ~0x00) / 0x02;\n            var2 = temp2;\n            memory[0x40:0x60] = var2 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[var2:var2 + 0x20] = temp3;\n            var var4 = temp3;\n            var3 = temp0;\n            var var5 = var2 + 0x20;\n            var var6 = var3;\n            var var7 = var4;\n        \n            if (!var7) {\n            label_0824:\n                var0 = var2;\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n                var temp4 = keccak256(memory[0x00:0x40]) + 0x01;\n                var temp5 = storage[temp4];\n                var temp6 = (!(temp5 & 0x01) * 0x0100 - 0x01 & temp5) / 0x02;\n                var temp7 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n                var2 = temp7;\n                var3 = temp4;\n                var4 = temp6;\n                memory[var2:var2 + 0x20] = var4;\n                var5 = var2 + 0x20;\n                var6 = var3;\n                var temp8 = storage[var6];\n                var7 = (!(temp8 & 0x01) * 0x0100 - 0x01 & temp8) / 0x02;\n            \n                if (!var7) {\n                label_08E7:\n                    arg0 = var2;\n                    r0 = var0;\n                    return r0, arg0;\n                } else if (0x1f < var7) {\n                    var temp9 = var5;\n                    var temp10 = temp9 + var7;\n                    var5 = temp10;\n                    memory[0x00:0x20] = var6;\n                    var temp11 = keccak256(memory[0x00:0x20]);\n                    memory[temp9:temp9 + 0x20] = storage[temp11];\n                    var6 = temp11 + 0x01;\n                    var7 = temp9 + 0x20;\n                \n                    if (var5 <= var7) { goto label_08DE; }\n                \n                label_08CA:\n                    var temp12 = var6;\n                    var temp13 = var7;\n                    memory[temp13:temp13 + 0x20] = storage[temp12];\n                    var6 = temp12 + 0x01;\n                    var7 = temp13 + 0x20;\n                \n                    if (var5 > var7) { goto label_08CA; }\n                \n                label_08DE:\n                    var temp14 = var5;\n                    var temp15 = temp14 + (var7 - temp14 & 0x1f);\n                    var7 = temp14;\n                    var5 = temp15;\n                    goto label_08E7;\n                } else {\n                    var temp16 = var5;\n                    memory[temp16:temp16 + 0x20] = storage[var6] / 0x0100 * 0x0100;\n                    var5 = temp16 + 0x20;\n                    var7 = var7;\n                    goto label_08E7;\n                }\n            } else if (0x1f < var7) {\n                var temp17 = var5;\n                var temp18 = temp17 + var7;\n                var5 = temp18;\n                memory[0x00:0x20] = var6;\n                var temp19 = keccak256(memory[0x00:0x20]);\n                memory[temp17:temp17 + 0x20] = storage[temp19];\n                var6 = temp19 + 0x01;\n                var7 = temp17 + 0x20;\n            \n                if (var5 <= var7) { goto label_081B; }\n            \n            label_0807:\n                var temp20 = var6;\n                var temp21 = var7;\n                memory[temp21:temp21 + 0x20] = storage[temp20];\n                var6 = temp20 + 0x01;\n                var7 = temp21 + 0x20;\n            \n                if (var5 > var7) { goto label_0807; }\n            \n            label_081B:\n                var temp22 = var5;\n                var temp23 = temp22 + (var7 - temp22 & 0x1f);\n                var7 = temp22;\n                var5 = temp23;\n                goto label_0824;\n            } else {\n                var temp24 = var5;\n                memory[temp24:temp24 + 0x20] = storage[var6] / 0x0100 * 0x0100;\n                var5 = temp24 + 0x20;\n                var7 = var7;\n                goto label_0824;\n            }\n        } else {\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = 0x20;\n            memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = 0x20;\n            memory[temp25 + 0x44:temp25 + 0x44 + 0x20] = 0x506c656173652070726f766964652061206c697374656420477561726469616e;\n            var temp26 = memory[0x40:0x60];\n            revert(memory[temp26:temp26 + temp25 - temp26 + 0x64]);\n        }\n    }\n    \n    function func_08F3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x60;\n        var var4 = 0x00;\n        var var5 = 0x0906;\n        var var6 = arg0;\n        var var7 = arg1;\n        var5 = func_0D56(var6, var7);\n        var1 = var5;\n        var temp0 = memory[var1:var1 + 0x20];\n        var2 = temp0;\n        var temp1 = memory[0x40:0x60];\n        var6 = var2;\n        var5 = temp1;\n        memory[var5:var5 + 0x20] = var6;\n        memory[0x40:0x60] = var5 + var6 * 0x20 + 0x20;\n    \n        if (!var6) {\n            var3 = var5;\n            var4 = 0x00;\n        \n            if (var4 >= var2) {\n            label_09A0:\n                return var3;\n            } else {\n            label_0947:\n                var5 = var1;\n                var6 = var4;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                var5 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] * 0x01000000000000000000000000;\n                var6 = var3;\n                var7 = var4;\n            \n                if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n            \n                memory[var6 + var7 * 0x20 + 0x20:var6 + var7 * 0x20 + 0x20 + 0x20] = var5 & ~0xffffffffffffffffffffffff;\n                var4 = var4 + 0x01;\n            \n                if (var4 >= var2) { goto label_09A0; }\n                else { goto label_0947; }\n            }\n        } else {\n            var temp2 = var6 * 0x20;\n            memory[var5 + 0x20:var5 + 0x20 + temp2] = code[code.length:code.length + temp2];\n            var3 = var5;\n            var4 = 0x00;\n        \n            if (var4 >= var2) { goto label_09A0; }\n            else { goto label_0947; }\n        }\n    }\n    \n    function func_09AA(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x09b8;\n        var var4 = arg0;\n        var3 = isGuardian(var4);\n    \n        if (var3) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            arg0 = storage[temp0 + 0x04];\n            r0 = storage[temp0 + 0x03];\n            return r0, arg0;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x20;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x506c656173652070726f766964652061206c697374656420477561726469616e;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function leave() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0a45;\n        var var3 = msg.sender;\n        var2 = isGuardian(var3);\n    \n        if (var2) {\n            var2 = 0x0ab1;\n            var3 = msg.sender;\n            var2 = func_1087(var3);\n        \n            if (!var2) {\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x03;\n                var3 = storage[keccak256(memory[0x00:0x40]) + 0x05];\n                var0 = msg.sender;\n                var2 = 0x0b3b;\n                var var4 = storage[0x01];\n                var2 = func_108F(var3, var4);\n            \n                if (block.timestamp >= var2) {\n                    memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                    var1 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                    var2 = var0 & 0x02 ** 0xa0 - 0x01;\n                    var3 = 0x02;\n                    var4 = var1;\n                \n                    if (var4 >= storage[var3]) { assert(); }\n                \n                    memory[0x00:0x20] = var3;\n                \n                    if (storage[keccak256(memory[0x00:0x20]) + var4] & 0x02 ** 0xa0 - 0x01 != var2) { assert(); }\n                \n                    var2 = 0x02;\n                    var temp0 = storage[var2];\n                    var3 = temp0 + ~0x00;\n                \n                    if (var3 >= temp0) { assert(); }\n                \n                    memory[0x00:0x20] = var2;\n                    var temp1 = storage[keccak256(memory[0x00:0x20]) + var3];\n                    var3 = 0x02;\n                    var2 = temp1 & 0x02 ** 0xa0 - 0x01;\n                    var4 = var1;\n                \n                    if (var4 >= storage[var3]) { assert(); }\n                \n                    memory[0x00:0x20] = var3;\n                    var temp2 = keccak256(memory[0x00:0x20]) + var4;\n                    storage[temp2] = (var2 & 0x02 ** 0xa0 - 0x01) | (storage[temp2] & ~(0x02 ** 0xa0 - 0x01));\n                    var2 = var1;\n                    var3 = 0x03;\n                    var4 = 0x00;\n                    var var5 = 0x02;\n                    var var6 = var2;\n                \n                    if (var6 >= storage[var5]) { assert(); }\n                \n                    memory[0x00:0x20] = var5;\n                    var temp3 = var4;\n                    memory[temp3:temp3 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                    memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var3;\n                    storage[keccak256(memory[0x00:0x00 + temp3 + 0x40]) + 0x02] = var2;\n                    var2 = storage[0x02];\n                    var4 = 0x02;\n                    var3 = 0x0c95;\n                    var5 = var2 + ~0x00;\n                    func_113D(var4, var5);\n                    memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                    var3 = 0x00;\n                    var2 = keccak256(memory[var3:var3 + 0x40]);\n                    var4 = 0x0cb9;\n                    var5 = var2;\n                    var6 = var3;\n                    func_1166(var5, var6);\n                    var4 = 0x0cc7;\n                    var5 = var2 + 0x01;\n                    var6 = 0x00;\n                    func_1166(var5, var6);\n                    var temp4 = var2;\n                    storage[temp4 + 0x02] = 0x00;\n                    storage[temp4 + 0x03] = 0x00;\n                    storage[temp4 + 0x04] = 0x00;\n                    storage[temp4 + 0x05] = 0x00;\n                    var temp5 = storage[0x00];\n                    var temp6 = memory[0x40:0x60];\n                    var temp7;\n                    temp7, memory[temp6:temp6 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp5 * 0x08fc).value(temp5)(memory[temp6:temp6 + 0x00]);\n                    var2 = !temp7;\n                \n                    if (!var2) {\n                        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x30e7885e5f0fc1d648230d0e9245d45333c7158885df954f0a2f0fb442be0f65, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                        return;\n                    } else {\n                        var temp8 = returndata.length;\n                        memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                    memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x20;\n                    memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x4d696e696d616c20677561726469616e2074696d65206469646e742070617373;\n                    var temp10 = memory[0x40:0x60];\n                    revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n                }\n            } else {\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n                memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x21;\n                memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = 0x4f6e6c7920454f41206d61792072656769737465722061732047756172646961;\n                memory[temp11 + 0x64:temp11 + 0x64 + 0x20] = 0x37 * 0x02 ** 0xf9;\n                var temp12 = memory[0x40:0x60];\n                revert(memory[temp12:temp12 + temp11 - temp12 + 0x84]);\n            }\n        } else {\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x21;\n            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x596f75206d757374206265206120726567697374657265642067756172646961;\n            memory[temp13 + 0x64:temp13 + 0x64 + 0x20] = 0x37 * 0x02 ** 0xf9;\n            var temp14 = memory[0x40:0x60];\n            revert(memory[temp14:temp14 + temp13 - temp14 + 0x84]);\n        }\n    }\n    \n    function func_0D56(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 < storage[0x02]) {\n            var var4 = storage[0x02];\n            var var5 = 0x0d92;\n            var var6 = arg0;\n            var var7 = arg1;\n            var5 = func_108F(var6, var7);\n        \n            if (var5 <= var4) {\n            label_0DAE:\n                var temp0 = arg1;\n                var temp1 = memory[0x40:0x60];\n                var4 = temp1;\n                var5 = temp0;\n                memory[var4:var4 + 0x20] = var5;\n                memory[0x40:0x60] = var4 + var5 * 0x20 + 0x20;\n            \n                if (!var5) {\n                    var1 = var4;\n                    var2 = memory[var1:var1 + 0x20];\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_0E4D:\n                        var0 = var1;\n                    \n                    label_0E51:\n                        return var0;\n                    } else {\n                    label_0DED:\n                        var4 = 0x02;\n                        var5 = 0x0dfe;\n                        var6 = arg0;\n                        var7 = var3;\n                        var5 = func_108F(var6, var7);\n                    \n                        if (var5 >= storage[var4]) { assert(); }\n                    \n                        memory[0x00:0x20] = var4;\n                        var4 = storage[keccak256(memory[0x00:0x20]) + var5] & 0x02 ** 0xa0 - 0x01;\n                        var5 = var1;\n                        var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_0E4D; }\n                        else { goto label_0DED; }\n                    }\n                } else {\n                    var temp2 = var4;\n                    var temp3 = var5 * 0x20;\n                    memory[temp2 + 0x20:temp2 + 0x20 + temp3] = code[code.length:code.length + temp3];\n                    var1 = temp2;\n                    var2 = memory[var1:var1 + 0x20];\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_0E4D; }\n                    else { goto label_0DED; }\n                }\n            } else {\n                var4 = 0x0dab;\n                var5 = storage[0x02];\n                var6 = arg0;\n                var4 = func_10A8(var5, var6);\n                arg1 = var4;\n                goto label_0DAE;\n            }\n        } else {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x00;\n            memory[0x40:0x60] = temp4 + 0x20;\n            var0 = temp4;\n            goto label_0E51;\n        }\n    }\n    \n    function func_107C() returns (var r0) { return storage[0x01]; }\n    \n    function VERSION() returns (var r0) { return 0x01; }\n    \n    function func_1087(var arg0) returns (var r0) { return address(arg0).code.length > 0x00; }\n    \n    function func_108F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_10A8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1139(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_113D(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_1161:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x1161;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_121B(var1, var2);\n            goto label_1161;\n        }\n    }\n    \n    function func_1166(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        arg1 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        storage[temp0] = 0x00;\n    \n        if (0x1f >= arg1) { goto label_11AA; }\n    \n        memory[0x00:0x20] = arg0;\n        arg0 = 0x11aa;\n        arg1 = keccak256(memory[0x00:0x20]) + (arg1 + 0x1f) / 0x20;\n        var var0 = keccak256(memory[0x00:0x20]);\n        arg0 = func_121B(arg1, var0);\n    \n    label_11AA:\n    }\n    \n    function func_121B(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1235;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_1139(arg1, var0); }\n    \n    label_122A:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_122A; }\n    \n        arg0 = func_1139(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x0c68ba21) {\n            // Dispatch table entry for isGuardian(address)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00d4;\n            var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = isGuardian(var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = !!var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x1201b4bd) {\n            // Dispatch table entry for 0x1201b4bd (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00fd;\n            var2 = func_0379();\n        \n        label_00FD:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var2;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n        } else if (var0 == 0x3ffbd47f) {\n            // Dispatch table entry for register(string,string)\n            var1 = 0x012e;\n            var temp4 = msg.data[0x04:0x24];\n            var2 = temp4 + 0x24;\n            var var3 = msg.data[temp4 + 0x04:temp4 + 0x04 + 0x20];\n            var temp5 = msg.data[0x24:0x44];\n            var var4 = temp5 + 0x24;\n            var var5 = msg.data[temp5 + 0x04:temp5 + 0x04 + 0x20];\n            var var6 = 0x00;\n            var var7 = var6;\n            var var8 = 0x038b;\n            var var9 = msg.sender;\n            var8 = func_1087(var9);\n        \n            if (!var8) {\n                var6 = msg.sender;\n            \n                if (var3 <= 0x00) {\n                    var temp35 = memory[0x40:0x60];\n                    memory[temp35:temp35 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp35 + 0x04:temp35 + 0x04 + 0x20] = 0x20;\n                    memory[temp35 + 0x24:temp35 + 0x24 + 0x20] = 0x1b;\n                    memory[temp35 + 0x44:temp35 + 0x44 + 0x20] = 0x506c656173652070726f7669646520612076616c6964206e616d650000000000;\n                    var temp36 = memory[0x40:0x60];\n                    revert(memory[temp36:temp36 + temp35 - temp36 + 0x64]);\n                } else if (var5 > 0x00) {\n                    var8 = 0x04a9;\n                    var9 = var6;\n                    var8 = isGuardian(var9);\n                \n                    if (var8) {\n                        var temp31 = memory[0x40:0x60];\n                        memory[temp31:temp31 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp31 + 0x04:temp31 + 0x04 + 0x20] = 0x20;\n                        memory[temp31 + 0x24:temp31 + 0x24 + 0x20] = 0x14;\n                        memory[temp31 + 0x44:temp31 + 0x44 + 0x20] = 0x43616e6e6f74206265206120677561726469616e000000000000000000000000;\n                        var temp32 = memory[0x40:0x60];\n                        revert(memory[temp32:temp32 + temp31 - temp32 + 0x64]);\n                    } else if (msg.value == storage[0x00]) {\n                        var temp6 = storage[0x02];\n                        storage[0x02] = temp6 + 0x01;\n                        var7 = temp6;\n                        memory[0x00:0x20] = 0x02;\n                        var temp7 = var7 + 0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace;\n                        var temp8 = var6;\n                        storage[temp7] = (temp8 & 0x02 ** 0xa0 - 0x01) | (storage[temp7] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        var temp9 = memory[0x40:0x60];\n                        var temp10 = var3;\n                        memory[0x40:0x60] = temp9 + (temp10 + 0x1f) / 0x20 * 0x20 + 0xe0;\n                        var temp11 = temp9 + 0xc0;\n                        memory[temp11:temp11 + 0x20] = temp10;\n                        var8 = temp9;\n                        memory[var8 + 0xe0:var8 + 0xe0 + temp10] = msg.data[var2:var2 + temp10];\n                        memory[var8:var8 + 0x20] = temp11;\n                        var temp12 = var8 + 0x20;\n                        var temp13 = var5;\n                        var temp14 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp14 + (temp13 + 0x1f) / 0x20 * 0x20 + 0x20;\n                        memory[temp14:temp14 + 0x20] = temp13;\n                        memory[temp14 + 0x20:temp14 + 0x20 + temp13] = msg.data[var4:var4 + temp13];\n                        memory[temp12:temp12 + 0x20] = temp14;\n                        var temp15 = temp12 + 0x20;\n                        memory[temp15:temp15 + 0x20] = var7;\n                        var temp16 = temp15 + 0x20;\n                        memory[temp16:temp16 + 0x20] = block.number;\n                        var temp17 = temp16 + 0x20;\n                        memory[temp17:temp17 + 0x20] = block.number;\n                        memory[temp17 + 0x20:temp17 + 0x20 + 0x20] = block.timestamp;\n                        memory[0x00:0x20] = temp8 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var9 = keccak256(memory[0x00:0x40]);\n                        var temp18 = memory[var8:var8 + 0x20];\n                        var var10 = 0x06a6;\n                        var var11 = var9;\n                        var var12 = temp18 + 0x20;\n                        var var13 = memory[temp18:temp18 + 0x20];\n                        var temp19 = var11;\n                        var temp20 = storage[temp19];\n                        memory[0x00:0x20] = temp19;\n                        var var14 = keccak256(memory[0x00:0x20]);\n                        var temp21 = var12;\n                        var12 = var14 + ((!(temp20 & 0x01) * 0x0100 - 0x01 & temp20) / 0x02 + 0x1f) / 0x20;\n                        var var15 = temp21;\n                    \n                        if (0x1f < var13) {\n                            var temp22 = var13;\n                            storage[var11] = temp22 + temp22 + 0x01;\n                        \n                            if (!temp22) {\n                            label_112D:\n                                var temp23 = var12;\n                                var12 = 0x1139;\n                                var13 = temp23;\n                                var12 = func_121B(var13, var14);\n                                var10 = func_1139(var11, var12);\n                                // Error: Could not resolve method call return address!\n                            } else {\n                                var temp24 = var13;\n                                var temp25 = var15;\n                                var13 = temp25;\n                                var15 = var13 + temp24;\n                            \n                                if (var15 <= var13) { goto label_112D; }\n                            \n                            label_111B:\n                                var temp26 = var13;\n                                var temp27 = var14;\n                                storage[temp27] = memory[temp26:temp26 + 0x20];\n                                var13 = temp26 + 0x20;\n                                var15 = var15;\n                                var14 = temp27 + 0x01;\n                            \n                                if (var15 <= var13) { goto label_112D; }\n                                else { goto label_111B; }\n                            }\n                        } else {\n                            var temp28 = var13;\n                            storage[var11] = temp28 + temp28 | (memory[var15:var15 + 0x20] & ~0xff);\n                            goto label_112D;\n                        }\n                    } else {\n                        var temp29 = memory[0x40:0x60];\n                        memory[temp29:temp29 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp29 + 0x04:temp29 + 0x04 + 0x20] = 0x20;\n                        memory[temp29 + 0x24:temp29 + 0x24 + 0x20] = 0x2d;\n                        memory[temp29 + 0x44:temp29 + 0x44 + 0x20] = 0x506c656173652070726f76696465207468652065786163742072656769737472;\n                        memory[temp29 + 0x64:temp29 + 0x64 + 0x20] = 0x6174696f6e206465706f73697400000000000000000000000000000000000000;\n                        var temp30 = memory[0x40:0x60];\n                        revert(memory[temp30:temp30 + temp29 - temp30 + 0x84]);\n                    }\n                } else {\n                    var temp33 = memory[0x40:0x60];\n                    memory[temp33:temp33 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp33 + 0x04:temp33 + 0x04 + 0x20] = 0x20;\n                    memory[temp33 + 0x24:temp33 + 0x24 + 0x20] = 0x1e;\n                    memory[temp33 + 0x44:temp33 + 0x44 + 0x20] = 0x506c656173652070726f7669646520612076616c696420776562736974650000;\n                    var temp34 = memory[0x40:0x60];\n                    revert(memory[temp34:temp34 + temp33 - temp34 + 0x64]);\n                }\n            } else {\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp37 + 0x04:temp37 + 0x04 + 0x20] = 0x20;\n                memory[temp37 + 0x24:temp37 + 0x24 + 0x20] = 0x21;\n                memory[temp37 + 0x44:temp37 + 0x44 + 0x20] = 0x4f6e6c7920454f41206d61792072656769737465722061732047756172646961;\n                memory[temp37 + 0x64:temp37 + 0x64 + 0x20] = 0x37 * 0x02 ** 0xf9;\n                var temp38 = memory[0x40:0x60];\n                revert(memory[temp38:temp38 + temp37 - temp38 + 0x84]);\n            }\n        } else if (var0 == 0x4b139a47) {\n            // Dispatch table entry for getGuardianData(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0151;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1, var2 = getGuardianData(var2);\n            var temp39 = memory[0x40:0x60];\n            var3 = temp39;\n            var4 = var3;\n            var5 = var4 + 0x20;\n            var temp40 = var5 + 0x20;\n            memory[var4:var4 + 0x20] = temp40 - var4;\n            var temp41 = var1;\n            memory[temp40:temp40 + 0x20] = memory[temp41:temp41 + 0x20];\n            var6 = temp40 + 0x20;\n            var8 = memory[temp41:temp41 + 0x20];\n            var7 = temp41 + 0x20;\n            var9 = var8;\n            var10 = var6;\n            var11 = var7;\n            var12 = 0x00;\n        \n            if (var12 >= var9) {\n            label_0192:\n                var temp42 = var8;\n                var6 = temp42 + var6;\n                var7 = temp42 & 0x1f;\n            \n                if (!var7) {\n                    var temp43 = var6;\n                    memory[var5:var5 + 0x20] = temp43 - var3;\n                    var temp44 = var2;\n                    memory[temp43:temp43 + 0x20] = memory[temp44:temp44 + 0x20];\n                    var6 = temp43 + 0x20;\n                    var8 = memory[temp44:temp44 + 0x20];\n                    var7 = temp44 + 0x20;\n                    var9 = var8;\n                    var10 = var6;\n                    var11 = var7;\n                    var12 = 0x00;\n                \n                    if (var12 >= var9) {\n                    label_01F2:\n                        var temp45 = var8;\n                        var6 = temp45 + var6;\n                        var7 = temp45 & 0x1f;\n                    \n                        if (!var7) {\n                            var temp46 = memory[0x40:0x60];\n                            return memory[temp46:temp46 + var6 - temp46];\n                        } else {\n                            var temp47 = var7;\n                            var temp48 = var6 - temp47;\n                            memory[temp48:temp48 + 0x20] = ~(0x0100 ** (0x20 - temp47) - 0x01) & memory[temp48:temp48 + 0x20];\n                            var temp49 = memory[0x40:0x60];\n                            return memory[temp49:temp49 + (temp48 + 0x20) - temp49];\n                        }\n                    } else {\n                    label_01E3:\n                        var temp50 = var12;\n                        memory[temp50 + var10:temp50 + var10 + 0x20] = memory[temp50 + var11:temp50 + var11 + 0x20];\n                        var12 = temp50 + 0x20;\n                    \n                        if (var12 >= var9) { goto label_01F2; }\n                        else { goto label_01E3; }\n                    }\n                } else {\n                    var temp51 = var7;\n                    var temp52 = var6 - temp51;\n                    memory[temp52:temp52 + 0x20] = ~(0x0100 ** (0x20 - temp51) - 0x01) & memory[temp52:temp52 + 0x20];\n                    var temp53 = temp52 + 0x20;\n                    memory[var5:var5 + 0x20] = temp53 - var3;\n                    var temp54 = var2;\n                    memory[temp53:temp53 + 0x20] = memory[temp54:temp54 + 0x20];\n                    var6 = temp53 + 0x20;\n                    var8 = memory[temp54:temp54 + 0x20];\n                    var7 = temp54 + 0x20;\n                    var9 = var8;\n                    var10 = var6;\n                    var11 = var7;\n                    var12 = 0x00;\n                \n                    if (var12 >= var9) { goto label_01F2; }\n                    else { goto label_01E3; }\n                }\n            } else {\n            label_0183:\n                var temp55 = var12;\n                memory[temp55 + var10:temp55 + var10 + 0x20] = memory[temp55 + var11:temp55 + var11 + 0x20];\n                var12 = temp55 + 0x20;\n            \n                if (var12 >= var9) { goto label_0192; }\n                else { goto label_0183; }\n            }\n        } else if (var0 == 0x4cf1f60b) {\n            // Dispatch table entry for 0x4cf1f60b (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x024a;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var1 = func_08F3(var2, var3);\n        \n        label_024A:\n            var temp56 = memory[0x40:0x60];\n            memory[temp56:temp56 + 0x20] = 0x20;\n            var temp57 = var1;\n            memory[temp56 + 0x20:temp56 + 0x20 + 0x20] = memory[temp57:temp57 + 0x20];\n            var2 = temp56;\n            var3 = var2;\n            var4 = var3 + 0x40;\n            var5 = temp57 + 0x20;\n            var6 = memory[temp57:temp57 + 0x20] * 0x20;\n            var7 = var6;\n            var8 = var4;\n            var9 = var5;\n            var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_0286:\n                var temp58 = memory[0x40:0x60];\n                return memory[temp58:temp58 + (var6 + var4) - temp58];\n            } else {\n            label_0277:\n                var temp59 = var10;\n                memory[temp59 + var8:temp59 + var8 + 0x20] = memory[temp59 + var9:temp59 + var9 + 0x20];\n                var10 = temp59 + 0x20;\n            \n                if (var10 >= var7) { goto label_0286; }\n                else { goto label_0277; }\n            }\n        } else if (var0 == 0x50d8f786) {\n            // Dispatch table entry for 0x50d8f786 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02bb;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1, var2 = func_09AA(var2);\n            var temp60 = memory[0x40:0x60];\n            memory[temp60:temp60 + 0x20] = var1;\n            memory[temp60 + 0x20:temp60 + 0x20 + 0x20] = var2;\n            var temp61 = memory[0x40:0x60];\n            return memory[temp61:temp61 + temp60 - temp61 + 0x40];\n        } else if (var0 == 0xd66d9e19) {\n            // Dispatch table entry for leave()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x012e;\n            leave();\n            stop();\n        } else if (var0 == 0xd93d7d29) {\n            // Dispatch table entry for 0xd93d7d29 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x024a;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var1 = func_0D56(var2, var3);\n            goto label_024A;\n        } else if (var0 == 0xf4c84d19) {\n            // Dispatch table entry for update(string,string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x012e;\n            var temp62 = msg.data[0x04:0x24];\n            var2 = temp62 + 0x24;\n            var3 = msg.data[temp62 + 0x04:temp62 + 0x04 + 0x20];\n            var temp63 = msg.data[0x24:0x44];\n            var4 = temp63 + 0x24;\n            var5 = msg.data[temp63 + 0x04:temp63 + 0x04 + 0x20];\n            var6 = 0x00;\n            var7 = 0x0e65;\n            var8 = msg.sender;\n            var7 = isGuardian(var8);\n        \n            if (var7) {\n                var7 = 0x0ed1;\n                var8 = msg.sender;\n                var7 = func_1087(var8);\n            \n                if (!var7) {\n                    var6 = msg.sender;\n                \n                    if (var3 <= 0x00) {\n                        var temp75 = memory[0x40:0x60];\n                        memory[temp75:temp75 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp75 + 0x04:temp75 + 0x04 + 0x20] = 0x20;\n                        memory[temp75 + 0x24:temp75 + 0x24 + 0x20] = 0x1b;\n                        memory[temp75 + 0x44:temp75 + 0x44 + 0x20] = 0x506c656173652070726f7669646520612076616c6964206e616d650000000000;\n                        var temp76 = memory[0x40:0x60];\n                        revert(memory[temp76:temp76 + temp75 - temp76 + 0x64]);\n                    } else if (var5 > 0x00) {\n                        memory[0x00:0x20] = var6 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x03;\n                        var7 = 0x1008;\n                        var8 = keccak256(memory[0x00:0x40]);\n                        var9 = var2;\n                        var10 = var3;\n                        var temp64 = var8;\n                        var temp65 = storage[temp64];\n                        memory[0x00:0x20] = temp64;\n                        var11 = keccak256(memory[0x00:0x20]);\n                        var temp66 = var9;\n                        var9 = var11 + ((!(temp65 & 0x01) * 0x0100 - 0x01 & temp65) / 0x02 + 0x1f) / 0x20;\n                        var12 = temp66;\n                    \n                        if (0x1f < var10) {\n                            var temp67 = var10;\n                            storage[var8] = temp67 + temp67 + 0x01;\n                        \n                            if (!temp67) { goto label_112D; }\n                        \n                            var temp68 = var10;\n                            var temp69 = var12;\n                            var10 = temp69;\n                            var12 = var10 + temp68;\n                        \n                            if (var12 <= var10) { goto label_112D; }\n                        \n                        label_1209:\n                            var temp70 = var10;\n                            var temp71 = var11;\n                            storage[temp71] = msg.data[temp70:temp70 + 0x20];\n                            var10 = temp70 + 0x20;\n                            var12 = var12;\n                            var11 = temp71 + 0x01;\n                        \n                            if (var12 <= var10) { goto label_112D; }\n                            else { goto label_1209; }\n                        } else {\n                            var temp72 = var10;\n                            storage[var8] = (msg.data[var12:var12 + 0x20] & ~0xff) | temp72 + temp72;\n                            goto label_112D;\n                        }\n                    } else {\n                        var temp73 = memory[0x40:0x60];\n                        memory[temp73:temp73 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp73 + 0x04:temp73 + 0x04 + 0x20] = 0x20;\n                        memory[temp73 + 0x24:temp73 + 0x24 + 0x20] = 0x1e;\n                        memory[temp73 + 0x44:temp73 + 0x44 + 0x20] = 0x506c656173652070726f7669646520612076616c696420776562736974650000;\n                        var temp74 = memory[0x40:0x60];\n                        revert(memory[temp74:temp74 + temp73 - temp74 + 0x64]);\n                    }\n                } else {\n                    var temp77 = memory[0x40:0x60];\n                    memory[temp77:temp77 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp77 + 0x04:temp77 + 0x04 + 0x20] = 0x20;\n                    memory[temp77 + 0x24:temp77 + 0x24 + 0x20] = 0x21;\n                    memory[temp77 + 0x44:temp77 + 0x44 + 0x20] = 0x4f6e6c7920454f41206d61792072656769737465722061732047756172646961;\n                    memory[temp77 + 0x64:temp77 + 0x64 + 0x20] = 0x37 * 0x02 ** 0xf9;\n                    var temp78 = memory[0x40:0x60];\n                    revert(memory[temp78:temp78 + temp77 - temp78 + 0x84]);\n                }\n            } else {\n                var temp79 = memory[0x40:0x60];\n                memory[temp79:temp79 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp79 + 0x04:temp79 + 0x04 + 0x20] = 0x20;\n                memory[temp79 + 0x24:temp79 + 0x24 + 0x20] = 0x21;\n                memory[temp79 + 0x44:temp79 + 0x44 + 0x20] = 0x596f75206d757374206265206120726567697374657265642067756172646961;\n                memory[temp79 + 0x64:temp79 + 0x64 + 0x20] = 0x37 * 0x02 ** 0xf9;\n                var temp80 = memory[0x40:0x60];\n                revert(memory[temp80:temp80 + temp79 - temp80 + 0x84]);\n            }\n        } else if (var0 == 0xf5660650) {\n            // Dispatch table entry for 0xf5660650 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00fd;\n            var2 = func_107C();\n            goto label_00FD;\n        } else if (var0 == 0xffa1ad74) {\n            // Dispatch table entry for VERSION()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00fd;\n            var2 = VERSION();\n            goto label_00FD;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function isGuardian(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        return storage[keccak256(memory[0x00:0x40]) + 0x03] > 0x00;\n    }\n    \n    function func_0379() returns (var r0) { return storage[0x00]; }\n    \n    function getGuardianData(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var var2 = 0x0731;\n        var var3 = arg0;\n        var2 = isGuardian(var3);\n    \n        if (var2) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = storage[temp0];\n            var temp2 = memory[0x40:0x60];\n            var temp3 = (temp1 & !(temp1 & 0x01) * 0x0100 + ~0x00) / 0x02;\n            var2 = temp2;\n            memory[0x40:0x60] = var2 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[var2:var2 + 0x20] = temp3;\n            var var4 = temp3;\n            var3 = temp0;\n            var var5 = var2 + 0x20;\n            var var6 = var3;\n            var var7 = var4;\n        \n            if (!var7) {\n            label_0824:\n                var0 = var2;\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n                var temp4 = keccak256(memory[0x00:0x40]) + 0x01;\n                var temp5 = storage[temp4];\n                var temp6 = (!(temp5 & 0x01) * 0x0100 - 0x01 & temp5) / 0x02;\n                var temp7 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n                var2 = temp7;\n                var3 = temp4;\n                var4 = temp6;\n                memory[var2:var2 + 0x20] = var4;\n                var5 = var2 + 0x20;\n                var6 = var3;\n                var temp8 = storage[var6];\n                var7 = (!(temp8 & 0x01) * 0x0100 - 0x01 & temp8) / 0x02;\n            \n                if (!var7) {\n                label_08E7:\n                    arg0 = var2;\n                    r0 = var0;\n                    return r0, arg0;\n                } else if (0x1f < var7) {\n                    var temp9 = var5;\n                    var temp10 = temp9 + var7;\n                    var5 = temp10;\n                    memory[0x00:0x20] = var6;\n                    var temp11 = keccak256(memory[0x00:0x20]);\n                    memory[temp9:temp9 + 0x20] = storage[temp11];\n                    var6 = temp11 + 0x01;\n                    var7 = temp9 + 0x20;\n                \n                    if (var5 <= var7) { goto label_08DE; }\n                \n                label_08CA:\n                    var temp12 = var6;\n                    var temp13 = var7;\n                    memory[temp13:temp13 + 0x20] = storage[temp12];\n                    var6 = temp12 + 0x01;\n                    var7 = temp13 + 0x20;\n                \n                    if (var5 > var7) { goto label_08CA; }\n                \n                label_08DE:\n                    var temp14 = var5;\n                    var temp15 = temp14 + (var7 - temp14 & 0x1f);\n                    var7 = temp14;\n                    var5 = temp15;\n                    goto label_08E7;\n                } else {\n                    var temp16 = var5;\n                    memory[temp16:temp16 + 0x20] = storage[var6] / 0x0100 * 0x0100;\n                    var5 = temp16 + 0x20;\n                    var7 = var7;\n                    goto label_08E7;\n                }\n            } else if (0x1f < var7) {\n                var temp17 = var5;\n                var temp18 = temp17 + var7;\n                var5 = temp18;\n                memory[0x00:0x20] = var6;\n                var temp19 = keccak256(memory[0x00:0x20]);\n                memory[temp17:temp17 + 0x20] = storage[temp19];\n                var6 = temp19 + 0x01;\n                var7 = temp17 + 0x20;\n            \n                if (var5 <= var7) { goto label_081B; }\n            \n            label_0807:\n                var temp20 = var6;\n                var temp21 = var7;\n                memory[temp21:temp21 + 0x20] = storage[temp20];\n                var6 = temp20 + 0x01;\n                var7 = temp21 + 0x20;\n            \n                if (var5 > var7) { goto label_0807; }\n            \n            label_081B:\n                var temp22 = var5;\n                var temp23 = temp22 + (var7 - temp22 & 0x1f);\n                var7 = temp22;\n                var5 = temp23;\n                goto label_0824;\n            } else {\n                var temp24 = var5;\n                memory[temp24:temp24 + 0x20] = storage[var6] / 0x0100 * 0x0100;\n                var5 = temp24 + 0x20;\n                var7 = var7;\n                goto label_0824;\n            }\n        } else {\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = 0x20;\n            memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = 0x20;\n            memory[temp25 + 0x44:temp25 + 0x44 + 0x20] = 0x506c656173652070726f766964652061206c697374656420477561726469616e;\n            var temp26 = memory[0x40:0x60];\n            revert(memory[temp26:temp26 + temp25 - temp26 + 0x64]);\n        }\n    }\n    \n    function func_08F3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x60;\n        var var4 = 0x00;\n        var var5 = 0x0906;\n        var var6 = arg0;\n        var var7 = arg1;\n        var5 = func_0D56(var6, var7);\n        var1 = var5;\n        var temp0 = memory[var1:var1 + 0x20];\n        var2 = temp0;\n        var temp1 = memory[0x40:0x60];\n        var6 = var2;\n        var5 = temp1;\n        memory[var5:var5 + 0x20] = var6;\n        memory[0x40:0x60] = var5 + var6 * 0x20 + 0x20;\n    \n        if (!var6) {\n            var3 = var5;\n            var4 = 0x00;\n        \n            if (var4 >= var2) {\n            label_09A0:\n                return var3;\n            } else {\n            label_0947:\n                var5 = var1;\n                var6 = var4;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                var5 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] * 0x01000000000000000000000000;\n                var6 = var3;\n                var7 = var4;\n            \n                if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n            \n                memory[var6 + var7 * 0x20 + 0x20:var6 + var7 * 0x20 + 0x20 + 0x20] = var5 & ~0xffffffffffffffffffffffff;\n                var4 = var4 + 0x01;\n            \n                if (var4 >= var2) { goto label_09A0; }\n                else { goto label_0947; }\n            }\n        } else {\n            var temp2 = var6 * 0x20;\n            memory[var5 + 0x20:var5 + 0x20 + temp2] = code[code.length:code.length + temp2];\n            var3 = var5;\n            var4 = 0x00;\n        \n            if (var4 >= var2) { goto label_09A0; }\n            else { goto label_0947; }\n        }\n    }\n    \n    function func_09AA(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x09b8;\n        var var4 = arg0;\n        var3 = isGuardian(var4);\n    \n        if (var3) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            arg0 = storage[temp0 + 0x04];\n            r0 = storage[temp0 + 0x03];\n            return r0, arg0;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x20;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x506c656173652070726f766964652061206c697374656420477561726469616e;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function leave() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0a45;\n        var var3 = msg.sender;\n        var2 = isGuardian(var3);\n    \n        if (var2) {\n            var2 = 0x0ab1;\n            var3 = msg.sender;\n            var2 = func_1087(var3);\n        \n            if (!var2) {\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x03;\n                var3 = storage[keccak256(memory[0x00:0x40]) + 0x05];\n                var0 = msg.sender;\n                var2 = 0x0b3b;\n                var var4 = storage[0x01];\n                var2 = func_108F(var3, var4);\n            \n                if (block.timestamp >= var2) {\n                    memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                    var1 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                    var2 = var0 & 0x02 ** 0xa0 - 0x01;\n                    var3 = 0x02;\n                    var4 = var1;\n                \n                    if (var4 >= storage[var3]) { assert(); }\n                \n                    memory[0x00:0x20] = var3;\n                \n                    if (storage[keccak256(memory[0x00:0x20]) + var4] & 0x02 ** 0xa0 - 0x01 != var2) { assert(); }\n                \n                    var2 = 0x02;\n                    var temp0 = storage[var2];\n                    var3 = temp0 + ~0x00;\n                \n                    if (var3 >= temp0) { assert(); }\n                \n                    memory[0x00:0x20] = var2;\n                    var temp1 = storage[keccak256(memory[0x00:0x20]) + var3];\n                    var3 = 0x02;\n                    var2 = temp1 & 0x02 ** 0xa0 - 0x01;\n                    var4 = var1;\n                \n                    if (var4 >= storage[var3]) { assert(); }\n                \n                    memory[0x00:0x20] = var3;\n                    var temp2 = keccak256(memory[0x00:0x20]) + var4;\n                    storage[temp2] = (var2 & 0x02 ** 0xa0 - 0x01) | (storage[temp2] & ~(0x02 ** 0xa0 - 0x01));\n                    var2 = var1;\n                    var3 = 0x03;\n                    var4 = 0x00;\n                    var var5 = 0x02;\n                    var var6 = var2;\n                \n                    if (var6 >= storage[var5]) { assert(); }\n                \n                    memory[0x00:0x20] = var5;\n                    var temp3 = var4;\n                    memory[temp3:temp3 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                    memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var3;\n                    storage[keccak256(memory[0x00:0x00 + temp3 + 0x40]) + 0x02] = var2;\n                    var2 = storage[0x02];\n                    var4 = 0x02;\n                    var3 = 0x0c95;\n                    var5 = var2 + ~0x00;\n                    func_113D(var4, var5);\n                    memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                    var3 = 0x00;\n                    var2 = keccak256(memory[var3:var3 + 0x40]);\n                    var4 = 0x0cb9;\n                    var5 = var2;\n                    var6 = var3;\n                    func_1166(var5, var6);\n                    var4 = 0x0cc7;\n                    var5 = var2 + 0x01;\n                    var6 = 0x00;\n                    func_1166(var5, var6);\n                    var temp4 = var2;\n                    storage[temp4 + 0x02] = 0x00;\n                    storage[temp4 + 0x03] = 0x00;\n                    storage[temp4 + 0x04] = 0x00;\n                    storage[temp4 + 0x05] = 0x00;\n                    var temp5 = storage[0x00];\n                    var temp6 = memory[0x40:0x60];\n                    var temp7;\n                    temp7, memory[temp6:temp6 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp5 * 0x08fc).value(temp5)(memory[temp6:temp6 + 0x00]);\n                    var2 = !temp7;\n                \n                    if (!var2) {\n                        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x30e7885e5f0fc1d648230d0e9245d45333c7158885df954f0a2f0fb442be0f65, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                        return;\n                    } else {\n                        var temp8 = returndata.length;\n                        memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                    memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x20;\n                    memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x4d696e696d616c20677561726469616e2074696d65206469646e742070617373;\n                    var temp10 = memory[0x40:0x60];\n                    revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n                }\n            } else {\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n                memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x21;\n                memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = 0x4f6e6c7920454f41206d61792072656769737465722061732047756172646961;\n                memory[temp11 + 0x64:temp11 + 0x64 + 0x20] = 0x37 * 0x02 ** 0xf9;\n                var temp12 = memory[0x40:0x60];\n                revert(memory[temp12:temp12 + temp11 - temp12 + 0x84]);\n            }\n        } else {\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x21;\n            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x596f75206d757374206265206120726567697374657265642067756172646961;\n            memory[temp13 + 0x64:temp13 + 0x64 + 0x20] = 0x37 * 0x02 ** 0xf9;\n            var temp14 = memory[0x40:0x60];\n            revert(memory[temp14:temp14 + temp13 - temp14 + 0x84]);\n        }\n    }\n    \n    function func_0D56(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 < storage[0x02]) {\n            var var4 = storage[0x02];\n            var var5 = 0x0d92;\n            var var6 = arg0;\n            var var7 = arg1;\n            var5 = func_108F(var6, var7);\n        \n            if (var5 <= var4) {\n            label_0DAE:\n                var temp0 = arg1;\n                var temp1 = memory[0x40:0x60];\n                var4 = temp1;\n                var5 = temp0;\n                memory[var4:var4 + 0x20] = var5;\n                memory[0x40:0x60] = var4 + var5 * 0x20 + 0x20;\n            \n                if (!var5) {\n                    var1 = var4;\n                    var2 = memory[var1:var1 + 0x20];\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_0E4D:\n                        var0 = var1;\n                    \n                    label_0E51:\n                        return var0;\n                    } else {\n                    label_0DED:\n                        var4 = 0x02;\n                        var5 = 0x0dfe;\n                        var6 = arg0;\n                        var7 = var3;\n                        var5 = func_108F(var6, var7);\n                    \n                        if (var5 >= storage[var4]) { assert(); }\n                    \n                        memory[0x00:0x20] = var4;\n                        var4 = storage[keccak256(memory[0x00:0x20]) + var5] & 0x02 ** 0xa0 - 0x01;\n                        var5 = var1;\n                        var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_0E4D; }\n                        else { goto label_0DED; }\n                    }\n                } else {\n                    var temp2 = var4;\n                    var temp3 = var5 * 0x20;\n                    memory[temp2 + 0x20:temp2 + 0x20 + temp3] = code[code.length:code.length + temp3];\n                    var1 = temp2;\n                    var2 = memory[var1:var1 + 0x20];\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_0E4D; }\n                    else { goto label_0DED; }\n                }\n            } else {\n                var4 = 0x0dab;\n                var5 = storage[0x02];\n                var6 = arg0;\n                var4 = func_10A8(var5, var6);\n                arg1 = var4;\n                goto label_0DAE;\n            }\n        } else {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x00;\n            memory[0x40:0x60] = temp4 + 0x20;\n            var0 = temp4;\n            goto label_0E51;\n        }\n    }\n    \n    function func_107C() returns (var r0) { return storage[0x01]; }\n    \n    function VERSION() returns (var r0) { return 0x01; }\n    \n    function func_1087(var arg0) returns (var r0) { return address(arg0).code.length > 0x00; }\n    \n    function func_108F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_10A8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1139(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_113D(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_1161:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x1161;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_121B(var1, var2);\n            goto label_1161;\n        }\n    }\n    \n    function func_1166(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        arg1 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        storage[temp0] = 0x00;\n    \n        if (0x1f >= arg1) { goto label_11AA; }\n    \n        memory[0x00:0x20] = arg0;\n        arg0 = 0x11aa;\n        arg1 = keccak256(memory[0x00:0x20]) + (arg1 + 0x1f) / 0x20;\n        var var0 = keccak256(memory[0x00:0x20]);\n        arg0 = func_121B(arg1, var0);\n    \n    label_11AA:\n    }\n    \n    function func_121B(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1235;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_1139(arg1, var0); }\n    \n    label_122A:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_122A; }\n    \n        arg0 = func_1139(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 31.610473155975342,
	"usage": {
		"completion_tokens": 490,
		"prompt_tokens": 13079,
		"total_tokens": 13569
	}
}