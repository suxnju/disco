{
	"address": "0x4aea7cf559f67cedcad07e12ae6bc00f07e8cf65",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\ndef storage:\n  balanceOf is mapping of uint256 at storage 0\n  stor1 is mapping of uint256 at storage 1\n  feeAccount is addr at storage 2\n  feeMake is uint256 at storage 3\n  feeTake is uint256 at storage 4\n  stor99 is mapping of uint256 at storage 99\n\ndef feeMake() payable: \n  return feeMake\n\ndef feeAccount() payable: \n  return feeAccount\n\ndef feeTake() payable: \n  return feeTake\n\ndef balanceOf(address _owner, address _debtor) payable: \n  return balanceOf[addr(_owner)][addr(_debtor)]\n\n#\n#  Regular functions\n#\n\ndef _fallback() payable: # default function\n  revert \n\ndef deposit() payable: \n  require call.value + stor[code.data[3999 len 32]][caller] >= stor[code.data[3999 len 32]][caller]\n  require call.value + stor[code.data[3999 len 32]][caller] >= call.value\n  stor[code.data[3999 len 32]][caller] += call.value\n  log Deposit(\n        address token=0,\n        address user=caller,\n        uint256 amount=call.value,\n        uint256 balance=call.value + stor[code.data[3999 len 32]][caller])\n\ndef order(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s) payable: \n  require call.value <= 0\n  log Order(\n        address tokenBuy=addr(_tokenGet),\n        uint256 amountBuy=_amountGet,\n        address tokenSell=addr(_tokenGive),\n        uint256 amountSell=_amountGive,\n        uint256 expires=_expires,\n        uint256 nonce=_nonce,\n        address user=caller,\n        uint8 v=_v << 248,\n        bytes32 r=_r,\n        bytes32 s=_s)\n\ndef withdraw(uint256 _amount) payable: \n  require call.value <= 0\n  require stor[code.data[3999 len 32]][caller] >= _amount\n  require _amount <= stor[code.data[3999 len 32]][caller]\n  stor[code.data[3999 len 32]][caller] -= _amount\n  call caller with:\n     value _amount wei\n       gas gas_remaining - 34050 wei\n  require ext_call.success\n  log Withdraw(\n        address token=0,\n        address user=caller,\n        uint256 amount=_amount,\n        uint256 balance=stor[code.data[3999 len 32]][caller])\n\ndef withdrawToken(address _token, uint256 _amount) payable: \n  require call.value <= 0\n  require _token\n  require balanceOf[addr(_token)][caller] >= _amount\n  require _amount <= balanceOf[addr(_token)][caller]\n  balanceOf[addr(_token)][caller] -= _amount\n  require ext_code.size(_token)\n  call _token.transfer(address to, uint256 tokens) with:\n       gas gas_remaining - 25050 wei\n      args caller, _amount\n  require ext_call.success\n  require ext_call.return_data[0]\n  log Withdraw(\n        address token=addr(_token),\n        address user=caller,\n        uint256 amount=_amount,\n        uint256 balance=balanceOf[addr(_token)][caller])\n\ndef depositToken(address _token, uint256 _amount) payable: \n  require call.value <= 0\n  require _token\n  require ext_code.size(_token)\n  call _token.transferFrom(address from, address to, uint256 tokens) with:\n       gas gas_remaining - 25050 wei\n      args caller, addr(this.address), _amount\n  require ext_call.success\n  require ext_call.return_data[0]\n  require _amount + balanceOf[addr(_token)][caller] >= balanceOf[addr(_token)][caller]\n  require _amount + balanceOf[addr(_token)][caller] >= _amount\n  balanceOf[addr(_token)][caller] += _amount\n  log Deposit(\n        address token=addr(_token),\n        address user=caller,\n        uint256 amount=_amount,\n        uint256 balance=_amount + balanceOf[addr(_token)][caller])\n\ndef cancelOrder(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s) payable: \n  require call.value <= 0\n  hash = sha256hash(addr(_tokenGet), addr(_amountGet), _tokenGive, _amountGive, _expires, _nonce) # precompiled\n  require sha256hash.result\n  signer = erecover(hash, _v << 248, _r, _s) # precompiled\n  require erecover.result\n  require addr(signer) == caller\n  stor1[hash] = _amountGet\n  log Cancel(\n        address tokenBuy=addr(_tokenGet),\n        uint256 amountBuy=_amountGet,\n        address tokenSell=addr(_tokenGive),\n        uint256 amountSell=_amountGive,\n        uint256 expires=_expires,\n        uint256 nonce=_nonce,\n        address user=caller,\n        uint8 v=_v << 248,\n        bytes32 r=_r,\n        bytes32 s=_s)\n\ndef availableVolume(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _user, uint8 _v, bytes32 _r, bytes32 _s) payable: \n  hash = sha256hash(addr(_tokenGet), addr(_amountGet), _tokenGive, _amountGive, _expires, _nonce) # precompiled\n  require sha256hash.result\n  signer = erecover(hash, _v << 248, _r, _s) # precompiled\n  require erecover.result\n  if addr(signer) != _user:\n      return 0\n  if block.number > _expires:\n      return 0\n  require stor1[hash] <= _amountGet\n  if balanceOf[addr(_tokenGive)][addr(_user)]:\n      require balanceOf[addr(_tokenGive)][addr(_user)]\n      require _amountGet * balanceOf[addr(_tokenGive)][addr(_user)] / balanceOf[addr(_tokenGive)][addr(_user)] == _amountGet\n  require _amountGive\n  if _amountGet - stor1[hash] >= _amountGet * balanceOf[addr(_tokenGive)][addr(_user)] / _amountGive:\n      return (_amountGet * balanceOf[addr(_tokenGive)][addr(_user)] / _amountGive)\n  return (_amountGet - stor1[hash])\n\ndef testTrade(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _user, uint8 _v, bytes32 _r, bytes32 _s, uint256 _amount, address _sender) payable: \n  if balanceOf[addr(_tokenGet)][addr(_sender)] >= _amount:\n      hash = sha256hash(addr(_tokenGet), addr(_amountGet), _tokenGive, _amountGive, _expires, _nonce) # precompiled\n      require sha256hash.result\n      signer = erecover(hash, _v << 248, _r, _s) # precompiled\n      require erecover.result\n      if addr(signer) != _user:\n          if 0 >= _amount:\n              return 1\n      else:\n          if block.number > _expires:\n              if 0 >= _amount:\n                  return 1\n          else:\n              require stor1[hash] <= _amountGet\n              if balanceOf[addr(_tokenGive)][addr(_user)]:\n                  require balanceOf[addr(_tokenGive)][addr(_user)]\n                  require _amountGet * balanceOf[addr(_tokenGive)][addr(_user)] / balanceOf[addr(_tokenGive)][addr(_user)] == _amountGet\n              require _amountGive\n              if _amountGet - stor1[hash] >= _amountGet * balanceOf[addr(_tokenGive)][addr(_user)] / _amountGive:\n                  if _amountGet * balanceOf[addr(_tokenGive)][addr(_user)] / _amountGive >= _amount:\n                      return 1\n              else:\n                  if _amountGet - stor1[hash] >= _amount:\n                      return 1\n      return 0\n  else:\n      return 0\n\ndef trade(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _user, uint8 _v, bytes32 _r, bytes32 _s, uint256 _amount) payable: \n  require call.value <= 0\n  hash = sha256hash(addr(_tokenGet), addr(_amountGet), _tokenGive, _amountGive, _expires, _nonce) # precompiled\n  require sha256hash.result\n  signer = erecover(hash, _v << 248, _r, _s) # precompiled\n  require erecover.result\n  require addr(signer) == _user\n  require block.number <= _expires\n  require _amount + stor1[hash] >= stor1[hash]\n  require _amount + stor1[hash] >= _amount\n  require _amount + stor1[hash] <= _amountGet\n  require balanceOf[addr(_tokenGet)][caller] >= _amount\n  if not _amountGive:\n      require _amountGet\n      require balanceOf[addr(_tokenGive)][addr(_user)] >= _amount * _amountGive / _amountGet\n      require _amount <= balanceOf[addr(_tokenGet)][caller]\n      balanceOf[addr(_tokenGet)][caller] -= _amount\n      if not _amount:\n          require ((10^18 * _amount) - (feeMake * _amount) / 10^18) + balanceOf[addr(_tokenGet)][_user] >= balanceOf[addr(_tokenGet)][_user]\n          require ((10^18 * _amount) - (feeMake * _amount) / 10^18) + balanceOf[addr(_tokenGet)][_user] >= (10^18 * _amount) - (feeMake * _amount) / 10^18\n          balanceOf[addr(_tokenGet)][addr(_user)] = ((10^18 * _amount) - (feeMake * _amount) / 10^18) + balanceOf[addr(_tokenGet)][_user]\n          if not _amount:\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= balanceOf[addr(_tokenGet)][stor2]\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= feeMake * _amount / 10^18\n              balanceOf[addr(_tokenGet)][stor2] += feeMake * _amount / 10^18\n              if not _amountGive:\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n                  balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not -feeTake + 10^18:\n                      if (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                      require _amountGet\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                      if feeTake:\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                      if _amountGive * feeTake:\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require -feeTake + 10^18\n                  require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n                  if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                      require _amountGet\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                      if feeTake:\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                      if _amountGive * feeTake:\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require (10^18 * _amountGive) - (feeTake * _amountGive)\n                  require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                  require _amountGet\n                  require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                  require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                  balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                  if not feeTake:\n                      if _amountGive * feeTake:\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require feeTake\n                  require _amountGive * feeTake / feeTake == _amountGive\n                  if not _amountGive * feeTake:\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require _amountGive * feeTake\n                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                  require _amountGet\n                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require _amountGive\n              require _amount * _amountGive / _amountGive == _amount\n              require _amountGet\n              require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n              balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n              if not -feeTake + 10^18:\n                  if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                      require _amountGet\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                      if feeTake:\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                      if _amountGive * feeTake:\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require (10^18 * _amountGive) - (feeTake * _amountGive)\n                  require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                  require _amountGet\n                  require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                  require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                  balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                  if not feeTake:\n                      if _amountGive * feeTake:\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require feeTake\n                  require _amountGive * feeTake / feeTake == _amountGive\n                  if not _amountGive * feeTake:\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require _amountGive * feeTake\n                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                  require _amountGet\n                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require -feeTake + 10^18\n              require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n              if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                  require _amountGet\n                  require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                  require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                  balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                  if not feeTake:\n                      if _amountGive * feeTake:\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require feeTake\n                  require _amountGive * feeTake / feeTake == _amountGive\n                  if not _amountGive * feeTake:\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require _amountGive * feeTake\n                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                  require _amountGet\n                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require (10^18 * _amountGive) - (feeTake * _amountGive)\n              require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n              require _amountGet\n              require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n              require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n              balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n              if not feeTake:\n                  if not _amountGive * feeTake:\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require _amountGive * feeTake\n                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                  require _amountGet\n                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require feeTake\n              require _amountGive * feeTake / feeTake == _amountGive\n              if not _amountGive * feeTake:\n                  require _amountGet\n                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require _amountGive * feeTake\n              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n              require _amountGet\n              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n          else:\n              require _amount\n              require feeMake * _amount / _amount == feeMake\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= balanceOf[addr(_tokenGet)][stor2]\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= feeMake * _amount / 10^18\n              balanceOf[addr(_tokenGet)][stor2] += feeMake * _amount / 10^18\n              if not _amountGive:\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n                  balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not -feeTake + 10^18:\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if feeTake:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                          if _amountGive * feeTake:\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (10^18 * _amountGive) - (feeTake * _amountGive)\n                      require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                      require _amountGet\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                      if not feeTake:\n                          if _amountGive * feeTake:\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require feeTake\n                      require _amountGive * feeTake / feeTake == _amountGive\n                      if not _amountGive * feeTake:\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive * feeTake\n                      require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require -feeTake + 10^18\n                  require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n                  if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                      require _amountGet\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                      if not feeTake:\n                          if _amountGive * feeTake:\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require feeTake\n                      require _amountGive * feeTake / feeTake == _amountGive\n                      if not _amountGive * feeTake:\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive * feeTake\n                      require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require (10^18 * _amountGive) - (feeTake * _amountGive)\n                  require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                  require _amountGet\n                  require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                  require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                  balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                  if not feeTake:\n                      if not _amountGive * feeTake:\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive * feeTake\n                      require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require feeTake\n                  require _amountGive * feeTake / feeTake == _amountGive\n                  if not _amountGive * feeTake:\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require _amountGive * feeTake\n                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                  require _amountGet\n                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n              else:\n                  require _amountGive\n                  require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n                  balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not -feeTake + 10^18:\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if _amountGive * feeTake:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (10^18 * _amountGive) - (feeTake * _amountGive)\n                      require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                      require _amountGet\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                      if not feeTake:\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require feeTake\n                      require _amountGive * feeTake / feeTake == _amountGive\n                      if not _amountGive * feeTake:\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive * feeTake\n                      require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                  else:\n                      require -feeTake + 10^18\n                      require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n      else:\n          require _amount\n          require (10^18 * _amount) - (feeMake * _amount) / _amount == -feeMake + 10^18\n          require ((10^18 * _amount) - (feeMake * _amount) / 10^18) + balanceOf[addr(_tokenGet)][_user] >= balanceOf[addr(_tokenGet)][_user]\n          require ((10^18 * _amount) - (feeMake * _amount) / 10^18) + balanceOf[addr(_tokenGet)][_user] >= (10^18 * _amount) - (feeMake * _amount) / 10^18\n          balanceOf[addr(_tokenGet)][addr(_user)] = ((10^18 * _amount) - (feeMake * _amount) / 10^18) + balanceOf[addr(_tokenGet)][_user]\n          if not _amount:\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= balanceOf[addr(_tokenGet)][stor2]\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= feeMake * _amount / 10^18\n              balanceOf[addr(_tokenGet)][stor2] += feeMake * _amount / 10^18\n              if not _amountGive:\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n                  balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not -feeTake + 10^18:\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if feeTake:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                          if _amountGive * feeTake:\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (10^18 * _amountGive) - (feeTake * _amountGive)\n                      require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                      require _amountGet\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                      if not feeTake:\n                          if _amountGive * feeTake:\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require feeTake\n                      require _amountGive * feeTake / feeTake == _amountGive\n                      if not _amountGive * feeTake:\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive * feeTake\n                      require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require -feeTake + 10^18\n                  require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n                  if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                      require _amountGet\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                      if not feeTake:\n                          if _amountGive * feeTake:\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require feeTake\n                      require _amountGive * feeTake / feeTake == _amountGive\n                      if not _amountGive * feeTake:\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive * feeTake\n                      require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require (10^18 * _amountGive) - (feeTake * _amountGive)\n                  require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                  require _amountGet\n                  require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                  require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                  balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                  if not feeTake:\n                      if not _amountGive * feeTake:\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive * feeTake\n                      require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require feeTake\n                  require _amountGive * feeTake / feeTake == _amountGive\n                  if not _amountGive * feeTake:\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require _amountGive * feeTake\n                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                  require _amountGet\n                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n              else:\n                  require _amountGive\n                  require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n                  balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not -feeTake + 10^18:\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if _amountGive * feeTake:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (10^18 * _amountGive) - (feeTake * _amountGive)\n                      require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                      require _amountGet\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                      if not feeTake:\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require feeTake\n                      require _amountGive * feeTake / feeTake == _amountGive\n                      if not _amountGive * feeTake:\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive * feeTake\n                      require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                  else:\n                      require -feeTake + 10^18\n                      require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n          else:\n              require _amount\n              require feeMake * _amount / _amount == feeMake\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= balanceOf[addr(_tokenGet)][stor2]\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= feeMake * _amount / 10^18\n              balanceOf[addr(_tokenGet)][stor2] += feeMake * _amount / 10^18\n              if not _amountGive:\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n                  balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not -feeTake + 10^18:\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if _amountGive * feeTake:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (10^18 * _amountGive) - (feeTake * _amountGive)\n                      require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                      require _amountGet\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                      if not feeTake:\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require feeTake\n                      require _amountGive * feeTake / feeTake == _amountGive\n                      if not _amountGive * feeTake:\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive * feeTake\n                      require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                  else:\n                      require -feeTake + 10^18\n                      require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n              else:\n                  require _amountGive\n                  require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n                  balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not -feeTake + 10^18:\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                  else:\n                      require -feeTake + 10^18\n                      require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n  else:\n      require _amountGive\n      require _amount * _amountGive / _amountGive == _amount\n      require _amountGet\n      require balanceOf[addr(_tokenGive)][addr(_user)] >= _amount * _amountGive / _amountGet\n      require _amount <= balanceOf[addr(_tokenGet)][caller]\n      balanceOf[addr(_tokenGet)][caller] -= _amount\n      if not _amount:\n          require ((10^18 * _amount) - (feeMake * _amount) / 10^18) + balanceOf[addr(_tokenGet)][_user] >= balanceOf[addr(_tokenGet)][_user]\n          require ((10^18 * _amount) - (feeMake * _amount) / 10^18) + balanceOf[addr(_tokenGet)][_user] >= (10^18 * _amount) - (feeMake * _amount) / 10^18\n          balanceOf[addr(_tokenGet)][addr(_user)] = ((10^18 * _amount) - (feeMake * _amount) / 10^18) + balanceOf[addr(_tokenGet)][_user]\n          if not _amount:\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= balanceOf[addr(_tokenGet)][stor2]\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= feeMake * _amount / 10^18\n              balanceOf[addr(_tokenGet)][stor2] += feeMake * _amount / 10^18\n              if not _amountGive:\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n                  balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not -feeTake + 10^18:\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if feeTake:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                          if _amountGive * feeTake:\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (10^18 * _amountGive) - (feeTake * _amountGive)\n                      require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                      require _amountGet\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                      if not feeTake:\n                          if _amountGive * feeTake:\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require feeTake\n                      require _amountGive * feeTake / feeTake == _amountGive\n                      if not _amountGive * feeTake:\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive * feeTake\n                      require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require -feeTake + 10^18\n                  require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n                  if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                      require _amountGet\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                      if not feeTake:\n                          if _amountGive * feeTake:\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require feeTake\n                      require _amountGive * feeTake / feeTake == _amountGive\n                      if not _amountGive * feeTake:\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive * feeTake\n                      require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require (10^18 * _amountGive) - (feeTake * _amountGive)\n                  require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                  require _amountGet\n                  require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                  require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                  balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                  if not feeTake:\n                      if not _amountGive * feeTake:\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive * feeTake\n                      require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require feeTake\n                  require _amountGive * feeTake / feeTake == _amountGive\n                  if not _amountGive * feeTake:\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require _amountGive * feeTake\n                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                  require _amountGet\n                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n              else:\n                  require _amountGive\n                  require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n                  balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not -feeTake + 10^18:\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if _amountGive * feeTake:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (10^18 * _amountGive) - (feeTake * _amountGive)\n                      require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                      require _amountGet\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                      if not feeTake:\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require feeTake\n                      require _amountGive * feeTake / feeTake == _amountGive\n                      if not _amountGive * feeTake:\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive * feeTake\n                      require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                  else:\n                      require -feeTake + 10^18\n                      require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n          else:\n              require _amount\n              require feeMake * _amount / _amount == feeMake\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= balanceOf[addr(_tokenGet)][stor2]\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= feeMake * _amount / 10^18\n              balanceOf[addr(_tokenGet)][stor2] += feeMake * _amount / 10^18\n              if not _amountGive:\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n                  balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not -feeTake + 10^18:\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if _amountGive * feeTake:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (10^18 * _amountGive) - (feeTake * _amountGive)\n                      require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                      require _amountGet\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                      if not feeTake:\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require feeTake\n                      require _amountGive * feeTake / feeTake == _amountGive\n                      if not _amountGive * feeTake:\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive * feeTake\n                      require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                  else:\n                      require -feeTake + 10^18\n                      require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n              else:\n                  require _amountGive\n                  require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n                  balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not -feeTake + 10^18:\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                  else:\n                      require -feeTake + 10^18\n                      require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n      else:\n          require _amount\n          require (10^18 * _amount) - (feeMake * _amount) / _amount == -feeMake + 10^18\n          require ((10^18 * _amount) - (feeMake * _amount) / 10^18) + balanceOf[addr(_tokenGet)][_user] >= balanceOf[addr(_tokenGet)][_user]\n          require ((10^18 * _amount) - (feeMake * _amount) / 10^18) + balanceOf[addr(_tokenGet)][_user] >= (10^18 * _amount) - (feeMake * _amount) / 10^18\n          balanceOf[addr(_tokenGet)][addr(_user)] = ((10^18 * _amount) - (feeMake * _amount) / 10^18) + balanceOf[addr(_tokenGet)][_user]\n          if not _amount:\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= balanceOf[addr(_tokenGet)][stor2]\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= feeMake * _amount / 10^18\n              balanceOf[addr(_tokenGet)][stor2] += feeMake * _amount / 10^18\n              if not _amountGive:\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n                  balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not -feeTake + 10^18:\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if _amountGive * feeTake:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (10^18 * _amountGive) - (feeTake * _amountGive)\n                      require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                      require _amountGet\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                      require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                      balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                      if not feeTake:\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require feeTake\n                      require _amountGive * feeTake / feeTake == _amountGive\n                      if not _amountGive * feeTake:\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive * feeTake\n                      require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                      require _amountGet\n                      require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                  else:\n                      require -feeTake + 10^18\n                      require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n              else:\n                  require _amountGive\n                  require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n                  balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not -feeTake + 10^18:\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                  else:\n                      require -feeTake + 10^18\n                      require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n          else:\n              require _amount\n              require feeMake * _amount / _amount == feeMake\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= balanceOf[addr(_tokenGet)][stor2]\n              require (feeMake * _amount / 10^18) + balanceOf[addr(_tokenGet)][stor2] >= feeMake * _amount / 10^18\n              balanceOf[addr(_tokenGet)][stor2] += feeMake * _amount / 10^18\n              if not _amountGive:\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n                  balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not -feeTake + 10^18:\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  balanceOf[addr(_tokenGive)][stor2] += _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require feeTake\n                          require _amountGive * feeTake / feeTake == _amountGive\n                          if not _amountGive * feeTake:\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive * feeTake\n                          require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                          require _amountGet\n                          require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                  else:\n                      require -feeTake + 10^18\n                      require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n              else:\n                  require _amountGive\n                  require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= balanceOf[addr(_tokenGive)][addr(_user)]\n                  balanceOf[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not -feeTake + 10^18:\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= _amount * _amountGive * feeTake / _amountGet / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive * feeTake\n                              require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n                              require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                  else:\n                      require -feeTake + 10^18\n                      require (10^18 * _amountGive) - (feeTake * _amountGive) / -feeTake + 10^18 == _amountGive\n                      if not (10^18 * _amountGive) - (feeTake * _amountGive):\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  require (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                      else:\n                          require (10^18 * _amountGive) - (feeTake * _amountGive)\n                          require (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / (10^18 * _amountGive) - (feeTake * _amountGive) == _amount\n                          require _amountGet\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= balanceOf[addr(_tokenGive)][caller]\n                          require ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller] >= (10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18\n                          balanceOf[addr(_tokenGive)][caller] = ((10^18 * _amountGive * _amount) - (feeTake * _amountGive * _amount) / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][caller]\n                          if not feeTake:\n                              if not _amountGive * feeTake:\n                                  require _amountGet\n                                  if (_amount * _amountGive * feeTake / _amountGet / 10^18) + balanceOf[addr(_tokenGive)][stor2] >= balanceOf[addr(_tokenGive)][stor2]:\n                              else:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                                  require _amountGet\n                          else:\n                              require feeTake\n                              require _amountGive * feeTake / feeTake == _amountGive\n                              if _amountGive * feeTake:\n                                  require _amountGive * feeTake\n                                  require _amount * _amountGive * feeTake / _amountGive * feeTake == _amount\n                              require _amountGet\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 50082 tokens. Please reduce the length of the messages."
}