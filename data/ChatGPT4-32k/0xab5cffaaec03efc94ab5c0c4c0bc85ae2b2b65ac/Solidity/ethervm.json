{
	"address": "0xab5cffaaec03efc94ab5c0c4c0bc85ae2b2b65ac",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code:\n\n```solidity\npragma solidity 0.5.16;\n\ncontract Contract {\n    address owner;\n    uint256 balance;\n    uint256 winnerId;\n    uint256 pool3Id;\n    uint256 jackpotId;\n\n    function getPool3id() public view returns (uint256) {\n        return pool3Id;\n    }\n\n    function sendPendingBalance(uint256 amount) public {\n        require(msg.value == 0, \"You are not authorized\");\n        require(msg.sender == owner, \"You are not authorized\");\n        require(amount <= getEthBalance(), \"Insufficient balance\");\n\n        msg.sender.transfer(amount);\n    }\n\n    function getJackpotId() public view returns (uint256) {\n        return jackpotId;\n    }\n\n    function jackpotWinner() public {\n        require(msg.sender == owner, \"You are not authorized\");\n        winnerId = 0;\n    }\n\n    function getEthBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function owner() public view returns (address) {\n        return owner;\n    }\n\n    function depositeFund() public payable {\n        balance += msg.value;\n    }\n\n    function updatePool3id(uint256 newId) public {\n        require(msg.sender == owner, \"You are not authorized\");\n        pool3Id = newId;\n    }\n\n    function updateJackpotId(uint256 newId) public {\n        require(msg.sender == owner, \"You are not authorized\");\n        jackpotId = newId;\n    }\n\n    function setWinner(uint256 winner) public {\n        require(msg.sender == owner, \"You are not authorized\");\n        winnerId = winner;\n    }\n}\n```\n\nPlease note that the decompiled code was in a low-level format which doesn't exactly provide a 1:1 mapping to Solidity. I have made assumptions and simplifications in some places to translate it to high-level Solidity code.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471977,
	"id": "chatcmpl-8MujJxjbnnokn4fIqv6A0HmZwogBx",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x5646aa0d > var0) {\n            if (var0 == 0x0fffaf08) {\n                // Dispatch table entry for getPool3id()\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00a0;\n                var1 = getPool3id();\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x18879d81) {\n                // Dispatch table entry for sendPendingBalance(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00ef;\n                var var2 = 0x04;\n                var var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                sendPendingBalance(var2, var3);\n                stop();\n            } else if (var0 == 0x2b36b1b0) {\n                // Dispatch table entry for 0x2b36b1b0 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0140;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var var4;\n                var2, var3, var4 = func_0114(var2, var3);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = !!var2;\n                var temp3 = temp2 + 0x20;\n                memory[temp3:temp3 + 0x20] = !!var3;\n                var temp4 = temp3 + 0x20;\n                memory[temp4:temp4 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x4cc4668a) {\n                // Dispatch table entry for getJackpotId()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ad;\n                var1 = getJackpotId();\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x5646aa0d) {\n            // Dispatch table entry for 0x5646aa0d (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01d8;\n            var2 = func_05D8();\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = var2;\n            var temp9 = memory[0x40:0x60];\n            return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n        } else if (var0 == 0x679ab22f) {\n            // Dispatch table entry for jackpotWinner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0203;\n            jackpotWinner();\n            stop();\n        } else if (var0 == 0x70ed0ada) {\n            // Dispatch table entry for getEthBalance()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x021a;\n            var1 = getEthBalance();\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = var1;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0245;\n            var2 = owner();\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n        } else if (var0 == 0xaf1e30b5) {\n            // Dispatch table entry for depositeFund()\n            var1 = 0x028f;\n            depositeFund();\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function sendPendingBalance(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n    \n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp3 = temp2 + 0x04;\n            var temp4 = temp3 + 0x20;\n            memory[temp3:temp3 + 0x20] = temp4 - temp3;\n            memory[temp4:temp4 + 0x20] = 0x16;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = 0x596f7520617265206e6f7420617574686f72697a656400000000000000000000;\n            var temp6 = memory[0x40:0x60];\n            revert(memory[temp6:temp6 + (temp5 + 0x20) - temp6]);\n        } else if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) {\n        label_04C7:\n            return;\n        } else {\n            arg1 = arg0 > 0x00;\n        \n            if (!arg1) {\n            label_0469:\n            \n                if (!arg1) { goto label_04C7; }\n            \n                var temp0 = arg0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x00] = address(storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n                goto label_04C7;\n            } else {\n                arg1 = 0x0465;\n                arg1 = getEthBalance();\n                arg1 = arg0 <= arg1;\n                goto label_0469;\n            }\n        }\n    }\n    \n    function func_0114(var arg0, var arg1) returns (var arg0, var arg1, var r2) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xff;\n        arg1 = storage[temp0] / 0x0100 ** 0x01 & 0xff;\n        r2 = storage[temp0] / 0x0100 ** 0x02 & 0xffffffffffffffffffffffffffffffffffffffff;\n        return arg0, arg1, r2;\n    }\n    \n    function getPool3id() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0x3cae9fcc;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) << 0xe0;\n        var var3 = temp0 + 0x04;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = var1;\n        var var9 = !address(var8).code.length;\n    \n        if (var9) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var5:var5 + var4] = address(var8).staticcall.gas(msg.gas)(memory[var7:var7 + var6]);\n        var4 = !temp1;\n    \n        if (!var4) {\n            var1 = memory[0x40:0x60];\n            var2 = returndata.length;\n        \n            if (var2 >= 0x20) { return memory[var1:var1 + 0x20]; }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function getJackpotId() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0xe6d4798b;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) << 0xe0;\n        var var3 = temp0 + 0x04;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = var1;\n        var var9 = !address(var8).code.length;\n    \n        if (var9) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var5:var5 + var4] = address(var8).staticcall.gas(msg.gas)(memory[var7:var7 + var6]);\n        var4 = !temp1;\n    \n        if (!var4) {\n            var1 = memory[0x40:0x60];\n            var2 = returndata.length;\n        \n            if (var2 >= 0x20) { return memory[var1:var1 + 0x20]; }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_05D8() returns (var r0) { return storage[0x02]; }\n    \n    function jackpotWinner() {\n        if (msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) {\n            storage[0x03] = 0x00;\n            var var0 = 0x06b0;\n            func_0737();\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            var temp2 = temp1 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp2 - temp1;\n            memory[temp2:temp2 + 0x20] = 0x16;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = 0x596f7520617265206e6f7420617574686f72697a656400000000000000000000;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + (temp3 + 0x20) - temp4]);\n        }\n    }\n    \n    function getEthBalance() returns (var r0) { return address(this).balance; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function depositeFund() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = block.timestamp;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x155fe951c9521574444886119c82a99a7c9cfc6673a7ae1074c37112256dd4c6]);\n    }\n    \n    function func_0737() {\n        var var0 = 0x00;\n        var var1 = 0x0741;\n        var1 = getJackpotId();\n        var0 = var1;\n        var1 = 0x00;\n        var var2 = 0x074d;\n        var2 = getPool3id();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x00;\n    \n        if (var1 < (storage[0x02] + 0x01) * 0x03e8) {\n        label_0C49:\n        \n            if (var2) { return; }\n        \n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp2 = temp1 + 0x04;\n            var temp3 = temp2 + 0x20;\n            memory[temp2:temp2 + 0x20] = temp3 - temp2;\n            memory[temp3:temp3 + 0x20] = 0x34;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x34] = code[0x0ce0:0x0d14];\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + (temp4 + 0x40) - temp5]);\n        } else {\n            var var3 = 0x01;\n            var var4 = 0x00;\n            var var5 = var3;\n            var var6 = var0 - var5 + 0x01;\n            var var7 = block.timestamp;\n        \n            if (!var6) { assert(); }\n        \n            var temp6 = var7 % var6 + var5;\n            var4 = temp6;\n            var5 = 0x00;\n            var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var7 = 0x613e8614;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n            var temp8 = temp7 + 0x04;\n            memory[temp8:temp8 + 0x20] = var4;\n            var var8 = temp8 + 0x20;\n            var var9 = 0x20;\n            var var10 = memory[0x40:0x60];\n            var var11 = var8 - var10;\n            var var12 = var10;\n            var var13 = var6;\n            var var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var temp9;\n            temp9, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);\n            var9 = !temp9;\n        \n            if (!var9) {\n                var6 = memory[0x40:0x60];\n                var7 = returndata.length;\n            \n                if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var5 = memory[var6:var6 + 0x20];\n                memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n            \n                if (storage[keccak256(memory[0x00:0x40])] / 0x0100 ** 0x01 & 0xff) {\n                    storage[0x03] = storage[0x03] + 0x01;\n                    var6 = 0x0c44;\n                    func_0737();\n                \n                label_0C45:\n                    goto label_0C49;\n                } else if (var5 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n                    var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var7 = 0x613e8614;\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                    var temp11 = temp10 + 0x04;\n                    memory[temp11:temp11 + 0x20] = var4;\n                    var8 = temp11 + 0x20;\n                    var9 = 0x20;\n                    var10 = memory[0x40:0x60];\n                    var11 = var8 - var10;\n                    var12 = var10;\n                    var13 = var6;\n                    var14 = !address(var13).code.length;\n                \n                    if (var14) { revert(memory[0x00:0x00]); }\n                \n                    var temp12;\n                    temp12, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);\n                    var9 = !temp12;\n                \n                    if (!var9) {\n                        var6 = memory[0x40:0x60];\n                        var7 = returndata.length;\n                    \n                        if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var temp13 = memory[0x40:0x60];\n                        var temp14;\n                        temp14, memory[temp13:temp13 + 0x00] = address(memory[var6:var6 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(0x00).value(0x0579a814e10a740000)(memory[temp13:temp13 + memory[0x40:0x60] - temp13]);\n                    \n                        if (temp14) {\n                            storage[0x02] = storage[0x02] + 0x01;\n                            var6 = 0x0a34;\n                            var6 = func_0CA4();\n                            var temp20 = memory[0x40:0x60];\n                            memory[0x40:0x60] = temp20 + 0x60;\n                            memory[temp20:temp20 + 0x20] = !!0x01;\n                            var temp21 = temp20 + 0x20;\n                            memory[temp21:temp21 + 0x20] = !!0x01;\n                            var temp22 = var5;\n                            memory[temp21 + 0x20:temp21 + 0x20 + 0x20] = temp22 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x00:0x20] = temp22 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x04;\n                            var temp23 = keccak256(memory[0x00:0x40]);\n                            var temp24 = temp23;\n                            storage[temp24] = !!memory[temp20:temp20 + 0x20] | (storage[temp24] & ~0xff);\n                            var temp25 = temp23;\n                            storage[temp25] = !!memory[temp20 + 0x20:temp20 + 0x20 + 0x20] * 0x0100 ** 0x01 | (storage[temp25] & ~(0xff * 0x0100 ** 0x01));\n                            var temp26 = temp23;\n                            storage[temp26] = (memory[temp20 + 0x40:temp20 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100 ** 0x02 | (storage[temp26] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x02));\n                            var temp27 = memory[0x40:0x60];\n                            memory[temp27:temp27 + 0x20] = var4;\n                            var temp28 = temp27 + 0x20;\n                            memory[temp28:temp28 + 0x20] = block.timestamp;\n                            var temp29 = temp28 + 0x20;\n                            memory[temp29:temp29 + 0x20] = temp22 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var temp30 = memory[0x40:0x60];\n                            log(memory[temp30:temp30 + (temp29 + 0x20) - temp30], [0x782732c32ed29ecd5b56192acdf24a69cdc255996ccb806866caf1d05eca9702]);\n                            goto label_0C45;\n                        } else if (0x00) { goto label_0C45; }\n                        else {\n                            var temp15 = memory[0x40:0x60];\n                            memory[temp15:temp15 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp16 = temp15 + 0x04;\n                            var temp17 = temp16 + 0x20;\n                            memory[temp16:temp16 + 0x20] = temp17 - temp16;\n                            memory[temp17:temp17 + 0x20] = 0x1c;\n                            var temp18 = temp17 + 0x20;\n                            memory[temp18:temp18 + 0x20] = 0x4572726f72206f636375726564207768696c65207472616e7366657200000000;\n                            var temp19 = memory[0x40:0x60];\n                            revert(memory[temp19:temp19 + (temp18 + 0x20) - temp19]);\n                        }\n                    } else {\n                        var temp31 = returndata.length;\n                        memory[0x00:0x00 + temp31] = returndata[0x00:0x00 + temp31];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp32 = memory[0x40:0x60];\n                    memory[temp32:temp32 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp33 = temp32 + 0x04;\n                    var temp34 = temp33 + 0x20;\n                    memory[temp33:temp33 + 0x20] = temp34 - temp33;\n                    memory[temp34:temp34 + 0x20] = 0x10;\n                    var temp35 = temp34 + 0x20;\n                    memory[temp35:temp35 + 0x20] = 0x6164647265737320696e76616c69642000000000000000000000000000000000;\n                    var temp36 = memory[0x40:0x60];\n                    revert(memory[temp36:temp36 + (temp35 + 0x20) - temp36]);\n                }\n            } else {\n                var temp37 = returndata.length;\n                memory[0x00:0x00 + temp37] = returndata[0x00:0x00 + temp37];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        }\n    }\n    \n    function func_0CA4() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x60;\n        memory[temp0:temp0 + 0x20] = !!0x00;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = !!0x00;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        return temp0;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x5646aa0d > var0) {\n            if (var0 == 0x0fffaf08) {\n                // Dispatch table entry for getPool3id()\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00a0;\n                var1 = getPool3id();\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x18879d81) {\n                // Dispatch table entry for sendPendingBalance(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00ef;\n                var var2 = 0x04;\n                var var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                sendPendingBalance(var2, var3);\n                stop();\n            } else if (var0 == 0x2b36b1b0) {\n                // Dispatch table entry for 0x2b36b1b0 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0140;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var var4;\n                var2, var3, var4 = func_0114(var2, var3);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = !!var2;\n                var temp3 = temp2 + 0x20;\n                memory[temp3:temp3 + 0x20] = !!var3;\n                var temp4 = temp3 + 0x20;\n                memory[temp4:temp4 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x4cc4668a) {\n                // Dispatch table entry for getJackpotId()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ad;\n                var1 = getJackpotId();\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x5646aa0d) {\n            // Dispatch table entry for 0x5646aa0d (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01d8;\n            var2 = func_05D8();\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = var2;\n            var temp9 = memory[0x40:0x60];\n            return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n        } else if (var0 == 0x679ab22f) {\n            // Dispatch table entry for jackpotWinner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0203;\n            jackpotWinner();\n            stop();\n        } else if (var0 == 0x70ed0ada) {\n            // Dispatch table entry for getEthBalance()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x021a;\n            var1 = getEthBalance();\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = var1;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0245;\n            var2 = owner();\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n        } else if (var0 == 0xaf1e30b5) {\n            // Dispatch table entry for depositeFund()\n            var1 = 0x028f;\n            depositeFund();\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function sendPendingBalance(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n    \n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp3 = temp2 + 0x04;\n            var temp4 = temp3 + 0x20;\n            memory[temp3:temp3 + 0x20] = temp4 - temp3;\n            memory[temp4:temp4 + 0x20] = 0x16;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = 0x596f7520617265206e6f7420617574686f72697a656400000000000000000000;\n            var temp6 = memory[0x40:0x60];\n            revert(memory[temp6:temp6 + (temp5 + 0x20) - temp6]);\n        } else if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) {\n        label_04C7:\n            return;\n        } else {\n            arg1 = arg0 > 0x00;\n        \n            if (!arg1) {\n            label_0469:\n            \n                if (!arg1) { goto label_04C7; }\n            \n                var temp0 = arg0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x00] = address(storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n                goto label_04C7;\n            } else {\n                arg1 = 0x0465;\n                arg1 = getEthBalance();\n                arg1 = arg0 <= arg1;\n                goto label_0469;\n            }\n        }\n    }\n    \n    function func_0114(var arg0, var arg1) returns (var arg0, var arg1, var r2) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xff;\n        arg1 = storage[temp0] / 0x0100 ** 0x01 & 0xff;\n        r2 = storage[temp0] / 0x0100 ** 0x02 & 0xffffffffffffffffffffffffffffffffffffffff;\n        return arg0, arg1, r2;\n    }\n    \n    function getPool3id() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0x3cae9fcc;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) << 0xe0;\n        var var3 = temp0 + 0x04;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = var1;\n        var var9 = !address(var8).code.length;\n    \n        if (var9) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var5:var5 + var4] = address(var8).staticcall.gas(msg.gas)(memory[var7:var7 + var6]);\n        var4 = !temp1;\n    \n        if (!var4) {\n            var1 = memory[0x40:0x60];\n            var2 = returndata.length;\n        \n            if (var2 >= 0x20) { return memory[var1:var1 + 0x20]; }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function getJackpotId() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0xe6d4798b;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) << 0xe0;\n        var var3 = temp0 + 0x04;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = var1;\n        var var9 = !address(var8).code.length;\n    \n        if (var9) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var5:var5 + var4] = address(var8).staticcall.gas(msg.gas)(memory[var7:var7 + var6]);\n        var4 = !temp1;\n    \n        if (!var4) {\n            var1 = memory[0x40:0x60];\n            var2 = returndata.length;\n        \n            if (var2 >= 0x20) { return memory[var1:var1 + 0x20]; }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_05D8() returns (var r0) { return storage[0x02]; }\n    \n    function jackpotWinner() {\n        if (msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) {\n            storage[0x03] = 0x00;\n            var var0 = 0x06b0;\n            func_0737();\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            var temp2 = temp1 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp2 - temp1;\n            memory[temp2:temp2 + 0x20] = 0x16;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = 0x596f7520617265206e6f7420617574686f72697a656400000000000000000000;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + (temp3 + 0x20) - temp4]);\n        }\n    }\n    \n    function getEthBalance() returns (var r0) { return address(this).balance; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function depositeFund() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = block.timestamp;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x155fe951c9521574444886119c82a99a7c9cfc6673a7ae1074c37112256dd4c6]);\n    }\n    \n    function func_0737() {\n        var var0 = 0x00;\n        var var1 = 0x0741;\n        var1 = getJackpotId();\n        var0 = var1;\n        var1 = 0x00;\n        var var2 = 0x074d;\n        var2 = getPool3id();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x00;\n    \n        if (var1 < (storage[0x02] + 0x01) * 0x03e8) {\n        label_0C49:\n        \n            if (var2) { return; }\n        \n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp2 = temp1 + 0x04;\n            var temp3 = temp2 + 0x20;\n            memory[temp2:temp2 + 0x20] = temp3 - temp2;\n            memory[temp3:temp3 + 0x20] = 0x34;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x34] = code[0x0ce0:0x0d14];\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + (temp4 + 0x40) - temp5]);\n        } else {\n            var var3 = 0x01;\n            var var4 = 0x00;\n            var var5 = var3;\n            var var6 = var0 - var5 + 0x01;\n            var var7 = block.timestamp;\n        \n            if (!var6) { assert(); }\n        \n            var temp6 = var7 % var6 + var5;\n            var4 = temp6;\n            var5 = 0x00;\n            var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var7 = 0x613e8614;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n            var temp8 = temp7 + 0x04;\n            memory[temp8:temp8 + 0x20] = var4;\n            var var8 = temp8 + 0x20;\n            var var9 = 0x20;\n            var var10 = memory[0x40:0x60];\n            var var11 = var8 - var10;\n            var var12 = var10;\n            var var13 = var6;\n            var var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var temp9;\n            temp9, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);\n            var9 = !temp9;\n        \n            if (!var9) {\n                var6 = memory[0x40:0x60];\n                var7 = returndata.length;\n            \n                if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var5 = memory[var6:var6 + 0x20];\n                memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n            \n                if (storage[keccak256(memory[0x00:0x40])] / 0x0100 ** 0x01 & 0xff) {\n                    storage[0x03] = storage[0x03] + 0x01;\n                    var6 = 0x0c44;\n                    func_0737();\n                \n                label_0C45:\n                    goto label_0C49;\n                } else if (var5 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n                    var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var7 = 0x613e8614;\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                    var temp11 = temp10 + 0x04;\n                    memory[temp11:temp11 + 0x20] = var4;\n                    var8 = temp11 + 0x20;\n                    var9 = 0x20;\n                    var10 = memory[0x40:0x60];\n                    var11 = var8 - var10;\n                    var12 = var10;\n                    var13 = var6;\n                    var14 = !address(var13).code.length;\n                \n                    if (var14) { revert(memory[0x00:0x00]); }\n                \n                    var temp12;\n                    temp12, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);\n                    var9 = !temp12;\n                \n                    if (!var9) {\n                        var6 = memory[0x40:0x60];\n                        var7 = returndata.length;\n                    \n                        if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var temp13 = memory[0x40:0x60];\n                        var temp14;\n                        temp14, memory[temp13:temp13 + 0x00] = address(memory[var6:var6 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(0x00).value(0x0579a814e10a740000)(memory[temp13:temp13 + memory[0x40:0x60] - temp13]);\n                    \n                        if (temp14) {\n                            storage[0x02] = storage[0x02] + 0x01;\n                            var6 = 0x0a34;\n                            var6 = func_0CA4();\n                            var temp20 = memory[0x40:0x60];\n                            memory[0x40:0x60] = temp20 + 0x60;\n                            memory[temp20:temp20 + 0x20] = !!0x01;\n                            var temp21 = temp20 + 0x20;\n                            memory[temp21:temp21 + 0x20] = !!0x01;\n                            var temp22 = var5;\n                            memory[temp21 + 0x20:temp21 + 0x20 + 0x20] = temp22 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x00:0x20] = temp22 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x04;\n                            var temp23 = keccak256(memory[0x00:0x40]);\n                            var temp24 = temp23;\n                            storage[temp24] = !!memory[temp20:temp20 + 0x20] | (storage[temp24] & ~0xff);\n                            var temp25 = temp23;\n                            storage[temp25] = !!memory[temp20 + 0x20:temp20 + 0x20 + 0x20] * 0x0100 ** 0x01 | (storage[temp25] & ~(0xff * 0x0100 ** 0x01));\n                            var temp26 = temp23;\n                            storage[temp26] = (memory[temp20 + 0x40:temp20 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100 ** 0x02 | (storage[temp26] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x02));\n                            var temp27 = memory[0x40:0x60];\n                            memory[temp27:temp27 + 0x20] = var4;\n                            var temp28 = temp27 + 0x20;\n                            memory[temp28:temp28 + 0x20] = block.timestamp;\n                            var temp29 = temp28 + 0x20;\n                            memory[temp29:temp29 + 0x20] = temp22 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var temp30 = memory[0x40:0x60];\n                            log(memory[temp30:temp30 + (temp29 + 0x20) - temp30], [0x782732c32ed29ecd5b56192acdf24a69cdc255996ccb806866caf1d05eca9702]);\n                            goto label_0C45;\n                        } else if (0x00) { goto label_0C45; }\n                        else {\n                            var temp15 = memory[0x40:0x60];\n                            memory[temp15:temp15 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp16 = temp15 + 0x04;\n                            var temp17 = temp16 + 0x20;\n                            memory[temp16:temp16 + 0x20] = temp17 - temp16;\n                            memory[temp17:temp17 + 0x20] = 0x1c;\n                            var temp18 = temp17 + 0x20;\n                            memory[temp18:temp18 + 0x20] = 0x4572726f72206f636375726564207768696c65207472616e7366657200000000;\n                            var temp19 = memory[0x40:0x60];\n                            revert(memory[temp19:temp19 + (temp18 + 0x20) - temp19]);\n                        }\n                    } else {\n                        var temp31 = returndata.length;\n                        memory[0x00:0x00 + temp31] = returndata[0x00:0x00 + temp31];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp32 = memory[0x40:0x60];\n                    memory[temp32:temp32 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp33 = temp32 + 0x04;\n                    var temp34 = temp33 + 0x20;\n                    memory[temp33:temp33 + 0x20] = temp34 - temp33;\n                    memory[temp34:temp34 + 0x20] = 0x10;\n                    var temp35 = temp34 + 0x20;\n                    memory[temp35:temp35 + 0x20] = 0x6164647265737320696e76616c69642000000000000000000000000000000000;\n                    var temp36 = memory[0x40:0x60];\n                    revert(memory[temp36:temp36 + (temp35 + 0x20) - temp36]);\n                }\n            } else {\n                var temp37 = returndata.length;\n                memory[0x00:0x00 + temp37] = returndata[0x00:0x00 + temp37];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        }\n    }\n    \n    function func_0CA4() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x60;\n        memory[temp0:temp0 + 0x20] = !!0x00;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = !!0x00;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        return temp0;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x5646aa0d > var0) {\n            if (var0 == 0x0fffaf08) {\n                // Dispatch table entry for getPool3id()\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00a0;\n                var1 = getPool3id();\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x18879d81) {\n                // Dispatch table entry for sendPendingBalance(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00ef;\n                var var2 = 0x04;\n                var var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                sendPendingBalance(var2, var3);\n                stop();\n            } else if (var0 == 0x2b36b1b0) {\n                // Dispatch table entry for 0x2b36b1b0 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0140;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var var4;\n                var2, var3, var4 = func_0114(var2, var3);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = !!var2;\n                var temp3 = temp2 + 0x20;\n                memory[temp3:temp3 + 0x20] = !!var3;\n                var temp4 = temp3 + 0x20;\n                memory[temp4:temp4 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x4cc4668a) {\n                // Dispatch table entry for getJackpotId()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ad;\n                var1 = getJackpotId();\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x5646aa0d) {\n            // Dispatch table entry for 0x5646aa0d (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01d8;\n            var2 = func_05D8();\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = var2;\n            var temp9 = memory[0x40:0x60];\n            return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n        } else if (var0 == 0x679ab22f) {\n            // Dispatch table entry for jackpotWinner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0203;\n            jackpotWinner();\n            stop();\n        } else if (var0 == 0x70ed0ada) {\n            // Dispatch table entry for getEthBalance()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x021a;\n            var1 = getEthBalance();\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = var1;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0245;\n            var2 = owner();\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n        } else if (var0 == 0xaf1e30b5) {\n            // Dispatch table entry for depositeFund()\n            var1 = 0x028f;\n            depositeFund();\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function sendPendingBalance(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n    \n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp3 = temp2 + 0x04;\n            var temp4 = temp3 + 0x20;\n            memory[temp3:temp3 + 0x20] = temp4 - temp3;\n            memory[temp4:temp4 + 0x20] = 0x16;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = 0x596f7520617265206e6f7420617574686f72697a656400000000000000000000;\n            var temp6 = memory[0x40:0x60];\n            revert(memory[temp6:temp6 + (temp5 + 0x20) - temp6]);\n        } else if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) {\n        label_04C7:\n            return;\n        } else {\n            arg1 = arg0 > 0x00;\n        \n            if (!arg1) {\n            label_0469:\n            \n                if (!arg1) { goto label_04C7; }\n            \n                var temp0 = arg0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x00] = address(storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n                goto label_04C7;\n            } else {\n                arg1 = 0x0465;\n                arg1 = getEthBalance();\n                arg1 = arg0 <= arg1;\n                goto label_0469;\n            }\n        }\n    }\n    \n    function func_0114(var arg0, var arg1) returns (var arg0, var arg1, var r2) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xff;\n        arg1 = storage[temp0] / 0x0100 ** 0x01 & 0xff;\n        r2 = storage[temp0] / 0x0100 ** 0x02 & 0xffffffffffffffffffffffffffffffffffffffff;\n        return arg0, arg1, r2;\n    }\n    \n    function getPool3id() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0x3cae9fcc;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) << 0xe0;\n        var var3 = temp0 + 0x04;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = var1;\n        var var9 = !address(var8).code.length;\n    \n        if (var9) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var5:var5 + var4] = address(var8).staticcall.gas(msg.gas)(memory[var7:var7 + var6]);\n        var4 = !temp1;\n    \n        if (!var4) {\n            var1 = memory[0x40:0x60];\n            var2 = returndata.length;\n        \n            if (var2 >= 0x20) { return memory[var1:var1 + 0x20]; }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function getJackpotId() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0xe6d4798b;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) << 0xe0;\n        var var3 = temp0 + 0x04;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = var1;\n        var var9 = !address(var8).code.length;\n    \n        if (var9) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var5:var5 + var4] = address(var8).staticcall.gas(msg.gas)(memory[var7:var7 + var6]);\n        var4 = !temp1;\n    \n        if (!var4) {\n            var1 = memory[0x40:0x60];\n            var2 = returndata.length;\n        \n            if (var2 >= 0x20) { return memory[var1:var1 + 0x20]; }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_05D8() returns (var r0) { return storage[0x02]; }\n    \n    function jackpotWinner() {\n        if (msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) {\n            storage[0x03] = 0x00;\n            var var0 = 0x06b0;\n            func_0737();\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            var temp2 = temp1 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp2 - temp1;\n            memory[temp2:temp2 + 0x20] = 0x16;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = 0x596f7520617265206e6f7420617574686f72697a656400000000000000000000;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + (temp3 + 0x20) - temp4]);\n        }\n    }\n    \n    function getEthBalance() returns (var r0) { return address(this).balance; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function depositeFund() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = block.timestamp;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x155fe951c9521574444886119c82a99a7c9cfc6673a7ae1074c37112256dd4c6]);\n    }\n    \n    function func_0737() {\n        var var0 = 0x00;\n        var var1 = 0x0741;\n        var1 = getJackpotId();\n        var0 = var1;\n        var1 = 0x00;\n        var var2 = 0x074d;\n        var2 = getPool3id();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x00;\n    \n        if (var1 < (storage[0x02] + 0x01) * 0x03e8) {\n        label_0C49:\n        \n            if (var2) { return; }\n        \n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp2 = temp1 + 0x04;\n            var temp3 = temp2 + 0x20;\n            memory[temp2:temp2 + 0x20] = temp3 - temp2;\n            memory[temp3:temp3 + 0x20] = 0x34;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x34] = code[0x0ce0:0x0d14];\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + (temp4 + 0x40) - temp5]);\n        } else {\n            var var3 = 0x01;\n            var var4 = 0x00;\n            var var5 = var3;\n            var var6 = var0 - var5 + 0x01;\n            var var7 = block.timestamp;\n        \n            if (!var6) { assert(); }\n        \n            var temp6 = var7 % var6 + var5;\n            var4 = temp6;\n            var5 = 0x00;\n            var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var7 = 0x613e8614;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n            var temp8 = temp7 + 0x04;\n            memory[temp8:temp8 + 0x20] = var4;\n            var var8 = temp8 + 0x20;\n            var var9 = 0x20;\n            var var10 = memory[0x40:0x60];\n            var var11 = var8 - var10;\n            var var12 = var10;\n            var var13 = var6;\n            var var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var temp9;\n            temp9, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);\n            var9 = !temp9;\n        \n            if (!var9) {\n                var6 = memory[0x40:0x60];\n                var7 = returndata.length;\n            \n                if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var5 = memory[var6:var6 + 0x20];\n                memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n            \n                if (storage[keccak256(memory[0x00:0x40])] / 0x0100 ** 0x01 & 0xff) {\n                    storage[0x03] = storage[0x03] + 0x01;\n                    var6 = 0x0c44;\n                    func_0737();\n                \n                label_0C45:\n                    goto label_0C49;\n                } else if (var5 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n                    var6 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var7 = 0x613e8614;\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = (var7 & 0xffffffff) << 0xe0;\n                    var temp11 = temp10 + 0x04;\n                    memory[temp11:temp11 + 0x20] = var4;\n                    var8 = temp11 + 0x20;\n                    var9 = 0x20;\n                    var10 = memory[0x40:0x60];\n                    var11 = var8 - var10;\n                    var12 = var10;\n                    var13 = var6;\n                    var14 = !address(var13).code.length;\n                \n                    if (var14) { revert(memory[0x00:0x00]); }\n                \n                    var temp12;\n                    temp12, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);\n                    var9 = !temp12;\n                \n                    if (!var9) {\n                        var6 = memory[0x40:0x60];\n                        var7 = returndata.length;\n                    \n                        if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var temp13 = memory[0x40:0x60];\n                        var temp14;\n                        temp14, memory[temp13:temp13 + 0x00] = address(memory[var6:var6 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(0x00).value(0x0579a814e10a740000)(memory[temp13:temp13 + memory[0x40:0x60] - temp13]);\n                    \n                        if (temp14) {\n                            storage[0x02] = storage[0x02] + 0x01;\n                            var6 = 0x0a34;\n                            var6 = func_0CA4();\n                            var temp20 = memory[0x40:0x60];\n                            memory[0x40:0x60] = temp20 + 0x60;\n                            memory[temp20:temp20 + 0x20] = !!0x01;\n                            var temp21 = temp20 + 0x20;\n                            memory[temp21:temp21 + 0x20] = !!0x01;\n                            var temp22 = var5;\n                            memory[temp21 + 0x20:temp21 + 0x20 + 0x20] = temp22 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x00:0x20] = temp22 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x04;\n                            var temp23 = keccak256(memory[0x00:0x40]);\n                            var temp24 = temp23;\n                            storage[temp24] = !!memory[temp20:temp20 + 0x20] | (storage[temp24] & ~0xff);\n                            var temp25 = temp23;\n                            storage[temp25] = !!memory[temp20 + 0x20:temp20 + 0x20 + 0x20] * 0x0100 ** 0x01 | (storage[temp25] & ~(0xff * 0x0100 ** 0x01));\n                            var temp26 = temp23;\n                            storage[temp26] = (memory[temp20 + 0x40:temp20 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100 ** 0x02 | (storage[temp26] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x02));\n                            var temp27 = memory[0x40:0x60];\n                            memory[temp27:temp27 + 0x20] = var4;\n                            var temp28 = temp27 + 0x20;\n                            memory[temp28:temp28 + 0x20] = block.timestamp;\n                            var temp29 = temp28 + 0x20;\n                            memory[temp29:temp29 + 0x20] = temp22 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var temp30 = memory[0x40:0x60];\n                            log(memory[temp30:temp30 + (temp29 + 0x20) - temp30], [0x782732c32ed29ecd5b56192acdf24a69cdc255996ccb806866caf1d05eca9702]);\n                            goto label_0C45;\n                        } else if (0x00) { goto label_0C45; }\n                        else {\n                            var temp15 = memory[0x40:0x60];\n                            memory[temp15:temp15 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp16 = temp15 + 0x04;\n                            var temp17 = temp16 + 0x20;\n                            memory[temp16:temp16 + 0x20] = temp17 - temp16;\n                            memory[temp17:temp17 + 0x20] = 0x1c;\n                            var temp18 = temp17 + 0x20;\n                            memory[temp18:temp18 + 0x20] = 0x4572726f72206f636375726564207768696c65207472616e7366657200000000;\n                            var temp19 = memory[0x40:0x60];\n                            revert(memory[temp19:temp19 + (temp18 + 0x20) - temp19]);\n                        }\n                    } else {\n                        var temp31 = returndata.length;\n                        memory[0x00:0x00 + temp31] = returndata[0x00:0x00 + temp31];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp32 = memory[0x40:0x60];\n                    memory[temp32:temp32 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp33 = temp32 + 0x04;\n                    var temp34 = temp33 + 0x20;\n                    memory[temp33:temp33 + 0x20] = temp34 - temp33;\n                    memory[temp34:temp34 + 0x20] = 0x10;\n                    var temp35 = temp34 + 0x20;\n                    memory[temp35:temp35 + 0x20] = 0x6164647265737320696e76616c69642000000000000000000000000000000000;\n                    var temp36 = memory[0x40:0x60];\n                    revert(memory[temp36:temp36 + (temp35 + 0x20) - temp36]);\n                }\n            } else {\n                var temp37 = returndata.length;\n                memory[0x00:0x00 + temp37] = returndata[0x00:0x00 + temp37];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        }\n    }\n    \n    function func_0CA4() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x60;\n        memory[temp0:temp0 + 0x20] = !!0x00;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = !!0x00;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        return temp0;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 19.96805214881897,
	"usage": {
		"completion_tokens": 395,
		"prompt_tokens": 6082,
		"total_tokens": 6477
	}
}