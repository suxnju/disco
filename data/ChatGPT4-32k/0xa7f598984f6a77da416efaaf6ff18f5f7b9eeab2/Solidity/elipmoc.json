{
	"address": "0xa7f598984f6a77da416efaaf6ff18f5f7b9eeab2",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the decompiled code, here is the Solidity contract code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Creatures {\n    mapping (uint256 => uint256) private _creatureCosts;\n    address private _getOwner;\n    address private _getStorageAddress;\n    address private _getCaller;\n\n    constructor(address owner) {\n        _getOwner = owner;\n    }\n\n    function withdrawBalance() public {\n        require(msg.sender == _getOwner);\n        payable(_getOwner).transfer(address(this).balance);\n    }\n\n    function addCreature(uint16 varg0, uint8 varg1, uint8 varg2) public payable { \n        require(varg0 == 0);\n        require(_creatureCosts[uint8(varg1)] > 0);\n        require(msg.value >= _creatureCosts[uint8(varg1)]);\n        require(_getStorageAddress.code.length > 0);\n        _getStorageAddress.call{value: msg.value, gas: gasleft() - 710}(abi.encodeWithSignature(\"add(address,uint16,uint8,uint8)\", msg.sender, varg0, varg1, varg2));\n    }\n\n    function getOwner() public view returns (address) {\n        return _getOwner;\n    }\n\n    function newStorage(address varg0) public {\n        require(msg.sender == _getOwner);\n        if (varg0 != address(0)) {\n            _getStorageAddress = varg0;\n        }\n    }\n\n    function getCaller() public view returns (address) {\n        return _getCaller;\n    }\n\n    function creatureCosts(uint8 varg0) public view returns (uint256) {\n        return _creatureCosts[varg0];\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _getOwner);\n        if (newOwner != address(0)) {\n            _getOwner = newOwner;\n        }\n    }\n\n    function getStorageAddress() public view returns (address) {\n        return _getStorageAddress;\n    }\n\n    function newCaller(address varg0) public {\n        require(msg.sender == _getOwner);\n        if (varg0 != address(0)) {\n            _getCaller = varg0;\n        }\n    }\n}\n```\nPlease note that the reconstructed Solidity code might not be 100% accurate to the original Solidity code that compiled into the provided EVM bytecode. This is due to the fact that EVM bytecode loses some high-level language features that are present in Solidity.",
				"role": "assistant"
			}
		}
	],
	"created": 1701460778,
	"id": "chatcmpl-8R3xi8RQ2j6xG9Xe65cFLbDuc8Rk6",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.23 01:29 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _creatureCosts; // STORAGE[0x3]\naddress _getOwner; // STORAGE[0x0] bytes 0 to 19\naddress _getStorageAddress; // STORAGE[0x1] bytes 0 to 19\nuint160 _getCaller; // STORAGE[0x2] bytes 0 to 19\n\n\nfunction withdrawBalance() public nonPayable { \n    require(msg.sender == _getOwner);\n    v0 = _getOwner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0);\n}\n\nfunction addCreature(uint16 varg0, uint8 varg1, uint8 varg2) public payable { \n    require(varg0 == 0);\n    require(_creatureCosts[0xff & (0xff & (0xff & varg1))] > 0);\n    require(msg.value >= _creatureCosts[0xff & (0xff & (0xff & varg1))]);\n    require(_getStorageAddress.code.size);\n    v0 = _getStorageAddress.add(msg.sender, varg0, 0xff & (0xff & (0xff & varg1)), 0xff & (0xff & (0xff & varg2))).gas(msg.gas - 710);\n    require(v0);\n}\n\nfunction getOwner() public nonPayable { \n    return _getOwner;\n}\n\nfunction newStorage(address varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    if (varg0 != 0) {\n        _getStorageAddress = varg0;\n    }\n}\n\nfunction getCaller() public nonPayable { \n    return _getCaller;\n}\n\nfunction creatureCosts(uint8 varg0) public nonPayable { \n    return _creatureCosts[0xff & varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    if (varg0 != 0) {\n        _getOwner = varg0;\n    }\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction getStorageAddress() public nonPayable { \n    return _getStorageAddress;\n}\n\nfunction newCaller(address varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    if (varg0 != 0) {\n        _getCaller = varg0;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x393a4d34 == function_selector) {\n            getStorageAddress();\n        } else if (0x3ff33185 == function_selector) {\n            newCaller(address);\n        } else if (0x5fd8c710 == function_selector) {\n            withdrawBalance();\n        } else if (0x7b8f2e07 == function_selector) {\n            addCreature(uint16,uint8,uint8);\n        } else if (0x893d20e8 == function_selector) {\n            getOwner();\n        } else if (0x8ff9b84e == function_selector) {\n            newStorage(address);\n        } else if (0xab470f05 == function_selector) {\n            getCaller();\n        } else if (0xea08bb89 == function_selector) {\n            creatureCosts(uint8);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 01:29 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _creatureCosts; // STORAGE[0x3]\naddress _getOwner; // STORAGE[0x0] bytes 0 to 19\naddress _getStorageAddress; // STORAGE[0x1] bytes 0 to 19\nuint160 _getCaller; // STORAGE[0x2] bytes 0 to 19\n\n\nfunction withdrawBalance() public nonPayable { \n    require(msg.sender == _getOwner);\n    v0 = _getOwner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0);\n}\n\nfunction addCreature(uint16 varg0, uint8 varg1, uint8 varg2) public payable { \n    require(varg0 == 0);\n    require(_creatureCosts[0xff & (0xff & (0xff & varg1))] > 0);\n    require(msg.value >= _creatureCosts[0xff & (0xff & (0xff & varg1))]);\n    require(_getStorageAddress.code.size);\n    v0 = _getStorageAddress.add(msg.sender, varg0, 0xff & (0xff & (0xff & varg1)), 0xff & (0xff & (0xff & varg2))).gas(msg.gas - 710);\n    require(v0);\n}\n\nfunction getOwner() public nonPayable { \n    return _getOwner;\n}\n\nfunction newStorage(address varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    if (varg0 != 0) {\n        _getStorageAddress = varg0;\n    }\n}\n\nfunction getCaller() public nonPayable { \n    return _getCaller;\n}\n\nfunction creatureCosts(uint8 varg0) public nonPayable { \n    return _creatureCosts[0xff & varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    if (varg0 != 0) {\n        _getOwner = varg0;\n    }\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction getStorageAddress() public nonPayable { \n    return _getStorageAddress;\n}\n\nfunction newCaller(address varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    if (varg0 != 0) {\n        _getCaller = varg0;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x393a4d34 == function_selector) {\n            getStorageAddress();\n        } else if (0x3ff33185 == function_selector) {\n            newCaller(address);\n        } else if (0x5fd8c710 == function_selector) {\n            withdrawBalance();\n        } else if (0x7b8f2e07 == function_selector) {\n            addCreature(uint16,uint8,uint8);\n        } else if (0x893d20e8 == function_selector) {\n            getOwner();\n        } else if (0x8ff9b84e == function_selector) {\n            newStorage(address);\n        } else if (0xab470f05 == function_selector) {\n            getCaller();\n        } else if (0xea08bb89 == function_selector) {\n            creatureCosts(uint8);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 01:29 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _creatureCosts; // STORAGE[0x3]\naddress _getOwner; // STORAGE[0x0] bytes 0 to 19\naddress _getStorageAddress; // STORAGE[0x1] bytes 0 to 19\nuint160 _getCaller; // STORAGE[0x2] bytes 0 to 19\n\n\nfunction withdrawBalance() public nonPayable { \n    require(msg.sender == _getOwner);\n    v0 = _getOwner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0);\n}\n\nfunction addCreature(uint16 varg0, uint8 varg1, uint8 varg2) public payable { \n    require(varg0 == 0);\n    require(_creatureCosts[0xff & (0xff & (0xff & varg1))] > 0);\n    require(msg.value >= _creatureCosts[0xff & (0xff & (0xff & varg1))]);\n    require(_getStorageAddress.code.size);\n    v0 = _getStorageAddress.add(msg.sender, varg0, 0xff & (0xff & (0xff & varg1)), 0xff & (0xff & (0xff & varg2))).gas(msg.gas - 710);\n    require(v0);\n}\n\nfunction getOwner() public nonPayable { \n    return _getOwner;\n}\n\nfunction newStorage(address varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    if (varg0 != 0) {\n        _getStorageAddress = varg0;\n    }\n}\n\nfunction getCaller() public nonPayable { \n    return _getCaller;\n}\n\nfunction creatureCosts(uint8 varg0) public nonPayable { \n    return _creatureCosts[0xff & varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    if (varg0 != 0) {\n        _getOwner = varg0;\n    }\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction getStorageAddress() public nonPayable { \n    return _getStorageAddress;\n}\n\nfunction newCaller(address varg0) public nonPayable { \n    require(msg.sender == _getOwner);\n    if (varg0 != 0) {\n        _getCaller = varg0;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x393a4d34 == function_selector) {\n            getStorageAddress();\n        } else if (0x3ff33185 == function_selector) {\n            newCaller(address);\n        } else if (0x5fd8c710 == function_selector) {\n            withdrawBalance();\n        } else if (0x7b8f2e07 == function_selector) {\n            addCreature(uint16,uint8,uint8);\n        } else if (0x893d20e8 == function_selector) {\n            getOwner();\n        } else if (0x8ff9b84e == function_selector) {\n            newStorage(address);\n        } else if (0xab470f05 == function_selector) {\n            getCaller();\n        } else if (0xea08bb89 == function_selector) {\n            creatureCosts(uint8);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 22.984839916229248,
	"usage": {
		"completion_tokens": 527,
		"prompt_tokens": 879,
		"total_tokens": 1406
	}
}