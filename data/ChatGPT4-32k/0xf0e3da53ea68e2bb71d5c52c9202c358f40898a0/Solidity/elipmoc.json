{
	"address": "0xf0e3da53ea68e2bb71d5c52c9202c358f40898a0",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the recompiled Solidity code based on the given decompiled code:\n\n```solidity\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    uint256 private _totalSupply;\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    uint256 private _payoutRound;\n    uint256 private _payoutProfit;\n    uint256 private _lastPayoutTime;\n    mapping (address => uint256) private owner_9;\n    bool private _payoutOpen;\n    address private _owner;\n    address private _affiliate;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event PayoutStatus(bool status);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event EthReceived(address indexed sender, uint256 amount);\n\n    fallback() external payable {\n        (bool success,) = msg.sender.call{value: msg.value}(\"\");\n        require(success);\n    }\n\n    function name() public pure returns (string memory) {\n        return \"Fortunity Owners Token\";\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function openPayout() public {\n        require(msg.sender == _owner || msg.sender == _affiliate);\n        require(!_payoutOpen);\n        _payoutRound++;\n        _payoutOpen = true;\n        _payoutProfit = address(this).balance;\n        _lastPayoutTime = block.timestamp;\n        emit PayoutStatus(_payoutOpen);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(!_payoutOpen);\n        require(to != address(0));\n        require(value <= _balanceOf[from]);\n        _balanceOf[from] -= value;\n        require(value <= _allowance[msg.sender][from]);\n        _allowance[msg.sender][from] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    function receiveFromGame() public payable {\n        emit EthReceived(msg.sender, msg.value);\n    }\n\n    function affiliate() public view returns (address) {\n        return _affiliate;\n    }\n\n    function payoutOpen() public view returns (bool) {\n        return _payoutOpen;\n    }\n\n    function lastPayoutTime() public view returns (uint256) {\n        return _lastPayoutTime;\n    }\n\n    function closePayout() public {\n        require(msg.sender == _owner || msg.sender == _affiliate);\n        require(_lastPayoutTime < block.timestamp);\n        _payoutOpen = false;\n        emit PayoutStatus(_payoutOpen);\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balanceOf[account];\n    }\n\n    function payoutProfit() public view returns (uint256) {\n        return _payoutProfit;\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"FXT\";\n    }\n\n    function payoutRound() public view returns (uint256) {\n        return _payoutRound;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(!_payoutOpen);\n        require(to != address(0));\n        require(value <= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function requestDividendPayout() public {\n        require(_payoutOpen);\n        require(owner_9[msg.sender] != _payoutRound);\n        owner_9[msg.sender] = _payoutRound;\n        require(_totalSupply > 0);\n        (bool success,) = msg.sender.call{value: _payoutProfit * owner_9[msg.sender] / _totalSupply}(\"\");\n        require(success);\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function takeAll() public {\n        require(msg.sender == _owner || msg.sender == _affiliate);\n        (bool success,) = msg.sender.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    function changeAffiliate(address newAffiliate) public {\n        require(msg.sender == _owner || msg.sender == _affiliate);\n        require(newAffiliate != address(0));\n        _affiliate = newAffiliate;\n    }\n}\n```\n\nPlease note that this code is not complete and may need further adjustments based on the original contract's behavior. Also, it's recommended to test it thoroughly before deploying it into a production environment.",
				"role": "assistant"
			}
		}
	],
	"created": 1701457645,
	"id": "chatcmpl-8R39BOJtwSdQYO2UWSxyu0clo12Ql",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 19:00 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nuint8 stor_0_0_0; // STORAGE[0x0] bytes 0 to 0\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _payoutRound; // STORAGE[0x5]\nuint256 _payoutProfit; // STORAGE[0x7]\nuint256 _lastPayoutTime; // STORAGE[0x8]\nmapping (uint256 => [uint256]) owner_9; // STORAGE[0x9]\nuint8 _payoutOpen; // STORAGE[0x6] bytes 0 to 0\naddress _owner; // STORAGE[0x3] bytes 0 to 19\naddress _affiliate; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nPayoutStatus(bool);\nTransfer(address, address, uint256);\nEthReceived(address, uint256);\n\nfunction fallback() public payable { \n    v0 = msg.sender.call().value(msg.value).gas(!msg.value * 2300);\n    require(v0);\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (22) {\n        MEM[v0.data] = ~0xffffffffffffffffffff & 'Fortunity Owners Token';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction openPayout() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == _affiliate;\n    }\n    require(v0);\n    require(!_payoutOpen);\n    _payoutRound = _payoutRound + 1;\n    _payoutOpen = 1;\n    _payoutProfit = (address(this)).balance;\n    _lastPayoutTime = block.timestamp;\n    emit PayoutStatus(_payoutOpen);\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!_payoutOpen);\n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    require(_allowance[varg1] + varg2 >= _allowance[varg1]);\n    _balanceOf[varg1] = _allowance[varg1] + varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction receiveFromGame() public payable { \n    emit EthReceived(msg.sender, msg.value);\n}\n\nfunction affiliate() public nonPayable { \n    return _affiliate;\n}\n\nfunction payoutOpen() public nonPayable { \n    return _payoutOpen;\n}\n\nfunction lastPayoutTime() public nonPayable { \n    return _lastPayoutTime;\n}\n\nfunction closePayout() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == _affiliate;\n    }\n    require(v0);\n    require(block.timestamp + 0x93a80 >= block.timestamp);\n    require(_lastPayoutTime < block.timestamp + 0x93a80);\n    _payoutOpen = 0;\n    emit PayoutStatus(_payoutOpen);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction payoutProfit() public nonPayable { \n    return _payoutProfit;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4658540000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction payoutRound() public nonPayable { \n    return _payoutRound;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!_payoutOpen);\n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    require(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction requestDividendPayout() public nonPayable { \n    require(_payoutOpen);\n    require(owner_9[msg.sender] != _payoutRound);\n    owner_9[msg.sender] = _payoutRound;\n    v0 = v1 = _payoutProfit == 0;\n    if (_payoutProfit != 0) {\n        assert(_payoutProfit);\n        v0 = _payoutProfit * owner_9[msg.sender] / _payoutProfit == owner_9[msg.sender];\n    }\n    require(v0);\n    require(_totalSupply > 0);\n    assert(stor_0_0_0);\n    v2 = msg.sender.call().value(_payoutProfit * owner_9[msg.sender] / _totalSupply).gas(!(_payoutProfit * owner_9[msg.sender] / _totalSupply) * 2300);\n    require(v2);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction takeAll() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = msg.sender == _affiliate;\n    }\n    require(v0);\n    v2 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v2);\n}\n\nfunction changeAffiliate(address varg0) public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == _affiliate;\n    }\n    require(v0);\n    require(varg0 != 0);\n    _affiliate = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xe38e573 == function_selector) {\n            openPayout();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x386304e4 == function_selector) {\n            receiveFromGame();\n        } else if (0x45e05f43 == function_selector) {\n            affiliate();\n        } else if (0x57db989f == function_selector) {\n            payoutOpen();\n        } else if (0x58a1cabf == function_selector) {\n            lastPayoutTime();\n        } else if (0x63f76f1b == function_selector) {\n            closePayout();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8c281b15 == function_selector) {\n            payoutProfit();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x9a71f55c == function_selector) {\n            payoutRound();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xc6aa0522 == function_selector) {\n            requestDividendPayout();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xde3bcb97 == function_selector) {\n            takeAll();\n        } else if (0xfdb985f1 == function_selector) {\n            changeAffiliate(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 19:00 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nuint8 stor_0_0_0; // STORAGE[0x0] bytes 0 to 0\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _payoutRound; // STORAGE[0x5]\nuint256 _payoutProfit; // STORAGE[0x7]\nuint256 _lastPayoutTime; // STORAGE[0x8]\nmapping (uint256 => [uint256]) owner_9; // STORAGE[0x9]\nuint8 _payoutOpen; // STORAGE[0x6] bytes 0 to 0\naddress _owner; // STORAGE[0x3] bytes 0 to 19\naddress _affiliate; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nPayoutStatus(bool);\nTransfer(address, address, uint256);\nEthReceived(address, uint256);\n\nfunction fallback() public payable { \n    v0 = msg.sender.call().value(msg.value).gas(!msg.value * 2300);\n    require(v0);\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (22) {\n        MEM[v0.data] = ~0xffffffffffffffffffff & 'Fortunity Owners Token';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction openPayout() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == _affiliate;\n    }\n    require(v0);\n    require(!_payoutOpen);\n    _payoutRound = _payoutRound + 1;\n    _payoutOpen = 1;\n    _payoutProfit = (address(this)).balance;\n    _lastPayoutTime = block.timestamp;\n    emit PayoutStatus(_payoutOpen);\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!_payoutOpen);\n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    require(_allowance[varg1] + varg2 >= _allowance[varg1]);\n    _balanceOf[varg1] = _allowance[varg1] + varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction receiveFromGame() public payable { \n    emit EthReceived(msg.sender, msg.value);\n}\n\nfunction affiliate() public nonPayable { \n    return _affiliate;\n}\n\nfunction payoutOpen() public nonPayable { \n    return _payoutOpen;\n}\n\nfunction lastPayoutTime() public nonPayable { \n    return _lastPayoutTime;\n}\n\nfunction closePayout() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == _affiliate;\n    }\n    require(v0);\n    require(block.timestamp + 0x93a80 >= block.timestamp);\n    require(_lastPayoutTime < block.timestamp + 0x93a80);\n    _payoutOpen = 0;\n    emit PayoutStatus(_payoutOpen);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction payoutProfit() public nonPayable { \n    return _payoutProfit;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4658540000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction payoutRound() public nonPayable { \n    return _payoutRound;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!_payoutOpen);\n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    require(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction requestDividendPayout() public nonPayable { \n    require(_payoutOpen);\n    require(owner_9[msg.sender] != _payoutRound);\n    owner_9[msg.sender] = _payoutRound;\n    v0 = v1 = _payoutProfit == 0;\n    if (_payoutProfit != 0) {\n        assert(_payoutProfit);\n        v0 = _payoutProfit * owner_9[msg.sender] / _payoutProfit == owner_9[msg.sender];\n    }\n    require(v0);\n    require(_totalSupply > 0);\n    assert(stor_0_0_0);\n    v2 = msg.sender.call().value(_payoutProfit * owner_9[msg.sender] / _totalSupply).gas(!(_payoutProfit * owner_9[msg.sender] / _totalSupply) * 2300);\n    require(v2);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction takeAll() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = msg.sender == _affiliate;\n    }\n    require(v0);\n    v2 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v2);\n}\n\nfunction changeAffiliate(address varg0) public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == _affiliate;\n    }\n    require(v0);\n    require(varg0 != 0);\n    _affiliate = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xe38e573 == function_selector) {\n            openPayout();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x386304e4 == function_selector) {\n            receiveFromGame();\n        } else if (0x45e05f43 == function_selector) {\n            affiliate();\n        } else if (0x57db989f == function_selector) {\n            payoutOpen();\n        } else if (0x58a1cabf == function_selector) {\n            lastPayoutTime();\n        } else if (0x63f76f1b == function_selector) {\n            closePayout();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8c281b15 == function_selector) {\n            payoutProfit();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x9a71f55c == function_selector) {\n            payoutRound();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xc6aa0522 == function_selector) {\n            requestDividendPayout();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xde3bcb97 == function_selector) {\n            takeAll();\n        } else if (0xfdb985f1 == function_selector) {\n            changeAffiliate(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 19:00 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nuint8 stor_0_0_0; // STORAGE[0x0] bytes 0 to 0\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _payoutRound; // STORAGE[0x5]\nuint256 _payoutProfit; // STORAGE[0x7]\nuint256 _lastPayoutTime; // STORAGE[0x8]\nmapping (uint256 => [uint256]) owner_9; // STORAGE[0x9]\nuint8 _payoutOpen; // STORAGE[0x6] bytes 0 to 0\naddress _owner; // STORAGE[0x3] bytes 0 to 19\naddress _affiliate; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nPayoutStatus(bool);\nTransfer(address, address, uint256);\nEthReceived(address, uint256);\n\nfunction fallback() public payable { \n    v0 = msg.sender.call().value(msg.value).gas(!msg.value * 2300);\n    require(v0);\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (22) {\n        MEM[v0.data] = ~0xffffffffffffffffffff & 'Fortunity Owners Token';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction openPayout() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == _affiliate;\n    }\n    require(v0);\n    require(!_payoutOpen);\n    _payoutRound = _payoutRound + 1;\n    _payoutOpen = 1;\n    _payoutProfit = (address(this)).balance;\n    _lastPayoutTime = block.timestamp;\n    emit PayoutStatus(_payoutOpen);\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!_payoutOpen);\n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    require(_allowance[varg1] + varg2 >= _allowance[varg1]);\n    _balanceOf[varg1] = _allowance[varg1] + varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction receiveFromGame() public payable { \n    emit EthReceived(msg.sender, msg.value);\n}\n\nfunction affiliate() public nonPayable { \n    return _affiliate;\n}\n\nfunction payoutOpen() public nonPayable { \n    return _payoutOpen;\n}\n\nfunction lastPayoutTime() public nonPayable { \n    return _lastPayoutTime;\n}\n\nfunction closePayout() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == _affiliate;\n    }\n    require(v0);\n    require(block.timestamp + 0x93a80 >= block.timestamp);\n    require(_lastPayoutTime < block.timestamp + 0x93a80);\n    _payoutOpen = 0;\n    emit PayoutStatus(_payoutOpen);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction payoutProfit() public nonPayable { \n    return _payoutProfit;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4658540000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction payoutRound() public nonPayable { \n    return _payoutRound;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!_payoutOpen);\n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    require(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction requestDividendPayout() public nonPayable { \n    require(_payoutOpen);\n    require(owner_9[msg.sender] != _payoutRound);\n    owner_9[msg.sender] = _payoutRound;\n    v0 = v1 = _payoutProfit == 0;\n    if (_payoutProfit != 0) {\n        assert(_payoutProfit);\n        v0 = _payoutProfit * owner_9[msg.sender] / _payoutProfit == owner_9[msg.sender];\n    }\n    require(v0);\n    require(_totalSupply > 0);\n    assert(stor_0_0_0);\n    v2 = msg.sender.call().value(_payoutProfit * owner_9[msg.sender] / _totalSupply).gas(!(_payoutProfit * owner_9[msg.sender] / _totalSupply) * 2300);\n    require(v2);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction takeAll() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = msg.sender == _affiliate;\n    }\n    require(v0);\n    v2 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v2);\n}\n\nfunction changeAffiliate(address varg0) public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == _affiliate;\n    }\n    require(v0);\n    require(varg0 != 0);\n    _affiliate = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xe38e573 == function_selector) {\n            openPayout();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x386304e4 == function_selector) {\n            receiveFromGame();\n        } else if (0x45e05f43 == function_selector) {\n            affiliate();\n        } else if (0x57db989f == function_selector) {\n            payoutOpen();\n        } else if (0x58a1cabf == function_selector) {\n            lastPayoutTime();\n        } else if (0x63f76f1b == function_selector) {\n            closePayout();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8c281b15 == function_selector) {\n            payoutProfit();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x9a71f55c == function_selector) {\n            payoutRound();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xc6aa0522 == function_selector) {\n            requestDividendPayout();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xde3bcb97 == function_selector) {\n            takeAll();\n        } else if (0xfdb985f1 == function_selector) {\n            changeAffiliate(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 40.96921992301941,
	"usage": {
		"completion_tokens": 1072,
		"prompt_tokens": 2211,
		"total_tokens": 3283
	}
}