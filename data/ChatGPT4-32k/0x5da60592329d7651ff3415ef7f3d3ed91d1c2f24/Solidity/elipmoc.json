{
	"address": "0x5da60592329d7651ff3415ef7f3d3ed91d1c2f24",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity version of the above decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    address private _owner;\n\n    event Transfer(address indexed from, uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Withdraw(address indexed beneficiary, uint256 value);\n    \n    constructor() {\n        _owner = msg.sender;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner, \"Only the owner can transfer ownership\");\n        require(newOwner != address(0), \"New owner cannot be zero address\");\n        \n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function withdraw(address to, uint256 amount) public {\n        require(msg.sender == _owner, \"Only the owner can withdraw\");\n        require(amount > 0, \"Withdrawal amount must be greater than 0\");\n        require(address(this).balance >= amount, \"Not enough balance to withdraw\");\n        require(to != address(0), \"Withdrawal address cannot be zero address\");\n        \n        (bool success, ) = to.call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n\n        emit Withdraw(to, amount);\n    }\n\n    receive() external payable {\n        require(msg.value > 0, \"Must send positive value\");\n        require(msg.sender != address(0), \"Sender cannot be zero address\");\n        \n        emit Transfer(msg.sender, msg.value);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n}\n```\nPlease note that this contract is using Solidity version 0.8.0 and the `pragma solidity ^0.8.0;` line at the top of the contract specifies that. The version might need to be updated depending on the version your development environment is using.\n\nAlso, note that I've removed the `__function_selector__` function as it's not necessary in Solidity contracts. The EVM automatically handles function selection based on the function signature.",
				"role": "assistant"
			}
		}
	],
	"created": 1701455703,
	"id": "chatcmpl-8R2drTxjA9xKPxFl6KEkF99r2q6KP",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.12 20:12 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _owner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nTransfer(address, uint256);\nOwnershipTransferred(address, address);\nWithdraw(address, uint256);\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction withdraw(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg1 > 0);\n    require((address(this)).balance >= varg1);\n    require(varg0 != 0);\n    v0 = varg0.call().value(varg1).gas(!varg1 * 2300);\n    require(v0); // checks call status, propagates error data on error\n    emit Withdraw(varg0, varg1);\n}\n\nfunction fallback() public payable { \n    require(msg.value > 0);\n    require(msg.sender != 0);\n    emit Transfer(msg.sender, msg.value);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf3fef3a3 == function_selector) {\n            withdraw(address,uint256);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.12 20:12 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _owner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nTransfer(address, uint256);\nOwnershipTransferred(address, address);\nWithdraw(address, uint256);\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction withdraw(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg1 > 0);\n    require((address(this)).balance >= varg1);\n    require(varg0 != 0);\n    v0 = varg0.call().value(varg1).gas(!varg1 * 2300);\n    require(v0); // checks call status, propagates error data on error\n    emit Withdraw(varg0, varg1);\n}\n\nfunction fallback() public payable { \n    require(msg.value > 0);\n    require(msg.sender != 0);\n    emit Transfer(msg.sender, msg.value);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf3fef3a3 == function_selector) {\n            withdraw(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.12 20:12 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _owner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nTransfer(address, uint256);\nOwnershipTransferred(address, address);\nWithdraw(address, uint256);\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction withdraw(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg1 > 0);\n    require((address(this)).balance >= varg1);\n    require(varg0 != 0);\n    v0 = varg0.call().value(varg1).gas(!varg1 * 2300);\n    require(v0); // checks call status, propagates error data on error\n    emit Withdraw(varg0, varg1);\n}\n\nfunction fallback() public payable { \n    require(msg.value > 0);\n    require(msg.sender != 0);\n    emit Transfer(msg.sender, msg.value);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf3fef3a3 == function_selector) {\n            withdraw(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 15.489029884338379,
	"usage": {
		"completion_tokens": 425,
		"prompt_tokens": 472,
		"total_tokens": 897
	}
}