{
	"address": "0x5f4599a9512372552d2b3abeeb9f9095c7514576",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the decompiled code provided, the Solidity contract would look something like this:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract DecodedContract {\n    uint256 private _votestoreplace = 0;\n    uint256 private _votestosend = 0;\n    uint256 private _initiatereplacevote = 0;\n    uint256 private _initiatesendtoevote = 0;\n    uint256 private _amounttosend = 0;\n    uint256 private _areownerscreated = 0;\n    uint256 private _totalowners = 0;\n    uint256 private _isethsent = 0;\n    uint256 private _istokensent = 0;\n    uint256 private _sendwithhex = 0;\n    uint256 private _theFunction = 0;\n\n    // ... other private variables go here ...\n\n    mapping (address => uint256) private _ownerbyvotetoreplace;\n    mapping (address => uint256) private _ownerbyvotetosend;\n    mapping (address => uint256) private _ownerbyaddress;\n    mapping (address => uint256) private _ownerbyid;\n\n    address private _newownerinsteadofoldowner;\n    address private _oldownertoreplace;\n    address private _sendto;\n    address private _contractaddress;\n    address private _tokensaddress;\n\n    // ... other mappings and addresses go here ...\n\n    function fallback() external payable { }\n\n    function ownerbyvotetoreplace(address varg0) external view returns (uint256) { \n        return _ownerbyvotetoreplace[varg0];\n    }\n\n    function totalowners() external view returns (uint256) { \n        return _totalowners;\n    }\n\n    function ownerbyvotetosend(address varg0) external view returns (uint256) { \n        return _ownerbyvotetosend[varg0];\n    }\n\n    function a() external view returns (uint256) { \n        return _a;\n    }\n\n    // ... other getter functions go here ...\n\n    function VoteToSend() external payable { \n        require(_ownerbyaddress[msg.sender] == msg.sender);\n        bool condition1 = _initiatereplacevote == 0 && _totalowners == 5;\n        bool condition2 = _initiatesendtoevote == 1;\n        bool condition3 = _ownerbyvotetosend[msg.sender] == 0;\n        require(condition1 && condition2 && condition3);\n\n        // ... rest of the function code goes here ...\n    }\n\n    // ... other functions go here ...\n}\n```\n\nPlease note that this is a simplified representation of the decompiled code. The actual implementation might involve more complex logic and additional features. The logic inside functions is also simplified and may not entirely match the decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701468363,
	"id": "chatcmpl-8R5w3RXA5PbhlV0Tlp2pniV9FyYTI",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 23:21 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _votestoreplace; // STORAGE[0x6]\nuint256 _votestosend; // STORAGE[0x7]\nuint256 _initiatereplacevote; // STORAGE[0x8]\nuint256 _initiatesendtoevote; // STORAGE[0x9]\nuint256 _amounttosend; // STORAGE[0xa]\nuint256 _areownerscreated; // STORAGE[0xb]\nuint256 _totalowners; // STORAGE[0xc]\nuint256 _isethsent; // STORAGE[0xd]\nuint256 _istokensent; // STORAGE[0xe]\nuint256 _sendwithhex; // STORAGE[0xf]\nuint256 _theFunction; // STORAGE[0x10]\nuint256 _depositype; // STORAGE[0x11]\nuint256 _a; // STORAGE[0x12]\nuint256 _b; // STORAGE[0x13]\nuint256 _c; // STORAGE[0x14]\nuint256 _e; // STORAGE[0x15]\nuint256 _f; // STORAGE[0x16]\nuint256 _g; // STORAGE[0x17]\nmapping (uint256 => [uint256]) _ownerbyvotetoreplace; // STORAGE[0x18]\nmapping (uint256 => [uint256]) _ownerbyvotetosend; // STORAGE[0x19]\nuint160 _newownerinsteadofoldowner; // STORAGE[0x0] bytes 0 to 19\nmapping (uint256 => [uint256]) _ownerbyaddress; // STORAGE[0x1a]\nmapping (uint256 => [uint256]) _ownerbyid; // STORAGE[0x1b]\naddress _oldownertoreplace; // STORAGE[0x1] bytes 0 to 19\naddress _sendto; // STORAGE[0x2] bytes 0 to 19\nuint160 _d; // STORAGE[0x3] bytes 0 to 19\naddress _contractaddress; // STORAGE[0x4] bytes 0 to 19\naddress _tokensaddress; // STORAGE[0x5] bytes 0 to 19\n\n\nfunction fallback() public payable { \n}\n\nfunction ownerbyvotetoreplace(address varg0) public nonPayable { \n    return _ownerbyvotetoreplace[varg0];\n}\n\nfunction totalowners() public nonPayable { \n    return _totalowners;\n}\n\nfunction ownerbyvotetosend(address varg0) public nonPayable { \n    return _ownerbyvotetosend[varg0];\n}\n\nfunction a() public nonPayable { \n    return _a;\n}\n\nfunction ownerbyaddress(address varg0) public nonPayable { \n    return address(_ownerbyaddress[varg0]);\n}\n\nfunction f() public nonPayable { \n    return _f;\n}\n\nfunction votestoreplace() public nonPayable { \n    return _votestoreplace;\n}\n\nfunction GetWalletDataTwo() public nonPayable { \n    return _tokensaddress, _depositype, _istokensent;\n}\n\nfunction VoteToSend() public payable { \n    require(address(_ownerbyaddress[address(address(msg.sender))]) == msg.sender);\n    v0 = v1 = _initiatereplacevote == 0;\n    if (v1) {\n        v0 = v2 = _totalowners == 5;\n    }\n    if (v0) {\n        v0 = v3 = _initiatesendtoevote == 1;\n    }\n    if (v0) {\n        v0 = _ownerbyvotetosend[msg.sender] == 0;\n    }\n    require(v0);\n    _votestosend = _votestosend + 1;\n    _ownerbyvotetosend[msg.sender] = 1;\n    if (_votestosend == 3) {\n        if (_sendwithhex != 1) {\n            if (_depositype != 1) {\n                require(_tokensaddress.code.size);\n                v4, v5 = _tokensaddress.transfer(_sendto, _amounttosend).gas(msg.gas);\n                require(v4); // checks call status, propagates error data on error\n                require(RETURNDATASIZE() >= 32);\n                _istokensent = 1;\n            } else {\n                v6 = _sendto.call().value(_amounttosend).gas(!_amounttosend * 2300);\n                require(v6); // checks call status, propagates error data on error\n                _isethsent = 1;\n            }\n        } else {\n            v7 = _sendto.call().value(_amounttosend).gas(!_amounttosend * 2300);\n            require(v7); // checks call status, propagates error data on error\n            if (_theFunction != 1) {\n                if (_theFunction != 2) {\n                    if (_theFunction != 3) {\n                        if (_theFunction != 4) {\n                            if (_theFunction != 5) {\n                                if (_theFunction != 6) {\n                                    if (_theFunction != 7) {\n                                        if (_theFunction != 8) {\n                                            if (_theFunction != 9) {\n                                                if (_theFunction != 10) {\n                                                    if (_theFunction != 11) {\n                                                        if (_theFunction != 12) {\n                                                            if (_theFunction != 13) {\n                                                                if (_theFunction != 14) {\n                                                                    if (_theFunction != 15) {\n                                                                        if (_theFunction == 16) {\n                                                                            MEM[64] += 164;\n                                                                            v8 = v9 = 0;\n                                                                            while (v8 < 132) {\n                                                                                MEM[MEM[64] + v8] = MEM[32 + MEM[64] + v8];\n                                                                                v8 = v8 + 32;\n                                                                            }\n                                                                            v10 = v11 = 132 + MEM[64];\n                                                                            if (4) {\n                                                                            }\n                                                                            v12 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x8763ba3700000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x8763ba3700000000000000000000000000000000000000000000000000000000, _b, _c, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _d).gas(msg.gas);\n                                                                            require(v12);\n                                                                        }\n                                                                    } else {\n                                                                        MEM[64] += 68;\n                                                                        v13 = v14 = 0;\n                                                                        while (v13 < 36) {\n                                                                            MEM[MEM[64] + v13] = MEM[32 + MEM[64] + v13];\n                                                                            v13 = v13 + 32;\n                                                                        }\n                                                                        v15 = v16 = 36 + MEM[64];\n                                                                        if (4) {\n                                                                        }\n                                                                        v17 = _sendto.call(_d & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x49339f0f00000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _d).gas(msg.gas);\n                                                                        require(v17);\n                                                                    }\n                                                                } else {\n                                                                    MEM[64] += 100;\n                                                                    v18 = v19 = 0;\n                                                                    while (v18 < 68) {\n                                                                        MEM[MEM[64] + v18] = MEM[32 + MEM[64] + v18];\n                                                                        v18 = v18 + 32;\n                                                                    }\n                                                                    v20 = v21 = 68 + MEM[64];\n                                                                    if (4) {\n                                                                    }\n                                                                    v22 = _sendto.call(_d & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x4a992a4200000000000000000000000000000000000000000000000000000000, _d & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x4a992a4200000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                                                    require(v22);\n                                                                }\n                                                            } else {\n                                                                MEM[64] += 100;\n                                                                v23 = v24 = 0;\n                                                                while (v23 < 68) {\n                                                                    MEM[MEM[64] + v23] = MEM[32 + MEM[64] + v23];\n                                                                    v23 = v23 + 32;\n                                                                }\n                                                                v25 = v26 = 68 + MEM[64];\n                                                                if (4) {\n                                                                }\n                                                                v27 = _sendto.call(_d & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x8100b1500000000000000000000000000000000000000000000000000000000, _d & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x8100b1500000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                                                require(v27);\n                                                            }\n                                                        } else {\n                                                            MEM[64] += 100;\n                                                            v28 = v29 = 0;\n                                                            while (v28 < 68) {\n                                                                MEM[MEM[64] + v28] = MEM[32 + MEM[64] + v28];\n                                                                v28 = v28 + 32;\n                                                            }\n                                                            v30 = v31 = 68 + MEM[64];\n                                                            if (4) {\n                                                            }\n                                                            v32 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xed4fbf0200000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xed4fbf0200000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _d).gas(msg.gas);\n                                                            require(v32);\n                                                        }\n                                                    } else {\n                                                        MEM[64] += 100;\n                                                        v33 = v34 = 0;\n                                                        while (v33 < 68) {\n                                                            MEM[MEM[64] + v33] = MEM[32 + MEM[64] + v33];\n                                                            v33 = v33 + 32;\n                                                        }\n                                                        v35 = v36 = 68 + MEM[64];\n                                                        if (4) {\n                                                        }\n                                                        v37 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x482f385a00000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x482f385a00000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _d).gas(msg.gas);\n                                                        require(v37);\n                                                    }\n                                                } else {\n                                                    MEM[64] += 164;\n                                                    v38 = v39 = 0;\n                                                    while (v38 < 132) {\n                                                        MEM[MEM[64] + v38] = MEM[32 + MEM[64] + v38];\n                                                        v38 = v38 + 32;\n                                                    }\n                                                    v40 = v41 = 132 + MEM[64];\n                                                    if (4) {\n                                                    }\n                                                    v42 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xc98357e100000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xc98357e100000000000000000000000000000000000000000000000000000000, _d, _c, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _b).gas(msg.gas);\n                                                    require(v42);\n                                                }\n                                            } else {\n                                                MEM[64] += 196;\n                                                v43 = v44 = 0;\n                                                while (v43 < 164) {\n                                                    MEM[MEM[64] + v43] = MEM[32 + MEM[64] + v43];\n                                                    v43 = v43 + 32;\n                                                }\n                                                v45 = v46 = 164 + MEM[64];\n                                                if (4) {\n                                                }\n                                                v47 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x27736cbe00000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x27736cbe00000000000000000000000000000000000000000000000000000000, _d, _c, _b, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _e).gas(msg.gas);\n                                                require(v47);\n                                            }\n                                        } else {\n                                            MEM[64] += 68;\n                                            v48 = v49 = 0;\n                                            while (v48 < 36) {\n                                                MEM[MEM[64] + v48] = MEM[32 + MEM[64] + v48];\n                                                v48 = v48 + 32;\n                                            }\n                                            v50 = v51 = 36 + MEM[64];\n                                            if (4) {\n                                            }\n                                            v52 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x6488cfe800000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                            require(v52);\n                                        }\n                                    } else {\n                                        MEM[64] += 68;\n                                        v53 = v54 = 0;\n                                        while (v53 < 36) {\n                                            MEM[MEM[64] + v53] = MEM[32 + MEM[64] + v53];\n                                            v53 = v53 + 32;\n                                        }\n                                        v55 = v56 = 36 + MEM[64];\n                                        if (4) {\n                                        }\n                                        v57 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x2e8abe2e00000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                        require(v57);\n                                    }\n                                } else {\n                                    MEM[64] += 68;\n                                    v58 = v59 = 0;\n                                    while (v58 < 36) {\n                                        MEM[MEM[64] + v58] = MEM[32 + MEM[64] + v58];\n                                        v58 = v58 + 32;\n                                    }\n                                    v60 = v61 = 36 + MEM[64];\n                                    if (4) {\n                                    }\n                                    v62 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xfa90f51a00000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                    require(v62);\n                                }\n                            } else {\n                                MEM[64] += 68;\n                                v63 = v64 = 0;\n                                while (v63 < 36) {\n                                    MEM[MEM[64] + v63] = MEM[32 + MEM[64] + v63];\n                                    v63 = v63 + 32;\n                                }\n                                v65 = v66 = 36 + MEM[64];\n                                if (4) {\n                                }\n                                v67 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xeb27d29900000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                require(v67);\n                            }\n                        } else {\n                            MEM[64] += 36;\n                            v68 = v69 = 0;\n                            while (v68 < 4) {\n                                MEM[MEM[64] + v68] = MEM[32 + MEM[64] + v68];\n                                v68 = v68 + 32;\n                            }\n                            v70 = v71 = 4 + MEM[64];\n                            if (4) {\n                            }\n                            v72 = _sendto.call(~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & (MEM[MEM[64] + 32] & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x468c9dd800000000000000000000000000000000000000000000000000000000)).gas(msg.gas);\n                            require(v72);\n                        }\n                    } else {\n                        MEM[64] += 228;\n                        v73 = v74 = 0;\n                        while (v73 < 196) {\n                            MEM[MEM[64] + v73] = MEM[32 + MEM[64] + v73];\n                            v73 = v73 + 32;\n                        }\n                        v75 = v76 = 196 + MEM[64];\n                        if (4) {\n                        }\n                        v77 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x9e0d8fca00000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x9e0d8fca00000000000000000000000000000000000000000000000000000000, _b, _c, _d, _e, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _f).gas(msg.gas);\n                        require(v77);\n                    }\n                } else {\n                    MEM[64] += 260;\n                    v78 = v79 = 0;\n                    while (v78 < 228) {\n                        MEM[MEM[64] + v78] = MEM[32 + MEM[64] + v78];\n                        v78 = v78 + 32;\n                    }\n                    v80 = v81 = 228 + MEM[64];\n                    if (4) {\n                    }\n                    v82 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xdcabe03900000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xdcabe03900000000000000000000000000000000000000000000000000000000, _b, _c, _d, _e, _f, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _g).gas(msg.gas);\n                    require(v82);\n                }\n            } else {\n                MEM[64] += 36;\n                v83 = v84 = 0;\n                while (v83 < 4) {\n                    MEM[MEM[64] + v83] = MEM[32 + MEM[64] + v83];\n                    v83 = v83 + 32;\n                }\n                v85 = v86 = 4 + MEM[64];\n                if (4) {\n                }\n                v87 = _sendto.call(~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & (MEM[MEM[64] + 32] & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xab1d693f00000000000000000000000000000000000000000000000000000000)).gas(msg.gas);\n                require(v87);\n            }\n        }\n        _ownerbyid[address(_ownerbyid[1])] = 0;\n        _ownerbyid[address(_ownerbyid[2])] = 0;\n        _ownerbyid[address(_ownerbyid[3])] = 0;\n        _ownerbyid[address(_ownerbyid[4])] = 0;\n        _ownerbyid[address(_ownerbyid[5])] = 0;\n        _votestosend = 0;\n        _initiatesendtoevote = 0;\n    }\n}\n\nfunction getTokenBalance(address varg0) public nonPayable { \n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction depositype() public nonPayable { \n    return _depositype;\n}\n\nfunction b() public nonPayable { \n    return _b;\n}\n\nfunction GetFunctionData() public nonPayable { \n    return _a, _b, _c, _d, _e, _f, _g;\n}\n\nfunction VoteToReplaceOwner() public payable { \n    require(address(_ownerbyaddress[address(address(msg.sender))]) == msg.sender);\n    v0 = v1 = _initiatereplacevote == 1;\n    if (v1) {\n        v0 = v2 = _totalowners == 5;\n    }\n    if (v0) {\n        v0 = v3 = _oldownertoreplace != msg.sender;\n    }\n    if (v0) {\n        v0 = v4 = _ownerbyvotetoreplace[msg.sender] == 0;\n    }\n    if (v0) {\n        v0 = _initiatesendtoevote == 0;\n    }\n    require(v0);\n    _ownerbyvotetoreplace[msg.sender] = 1;\n    _votestoreplace = _votestoreplace + 1;\n    if (_votestoreplace == 3) {\n        _ownerbyvotetoreplace[_oldownertoreplace] = 0;\n        _ownerbyvotetosend[_oldownertoreplace] = 0;\n        _ownerbyaddress[_oldownertoreplace] = ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[_oldownertoreplace];\n        _ownerbyaddress[_newownerinsteadofoldowner] = 0;\n        _ownerbyaddress[_newownerinsteadofoldowner] = 0;\n        if (address(_ownerbyid[1]) != _oldownertoreplace) {\n            if (address(_ownerbyid[2]) != _oldownertoreplace) {\n                if (address(_ownerbyid[3]) != _oldownertoreplace) {\n                    if (address(_ownerbyid[4]) != _oldownertoreplace) {\n                        if (address(_ownerbyid[5]) == _oldownertoreplace) {\n                            _ownerbyid[5] = _newownerinsteadofoldowner | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x5];\n                        }\n                    } else {\n                        _ownerbyid[4] = _newownerinsteadofoldowner | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x4];\n                    }\n                } else {\n                    _ownerbyid[3] = _newownerinsteadofoldowner | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x3];\n                }\n            } else {\n                _ownerbyid[2] = _newownerinsteadofoldowner | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x2];\n            }\n        } else {\n            _ownerbyid[1] = _newownerinsteadofoldowner | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x1];\n        }\n        _ownerbyid[address(_ownerbyid[1])] = 0;\n        _ownerbyid[address(_ownerbyid[2])] = 0;\n        _ownerbyid[address(_ownerbyid[3])] = 0;\n        _ownerbyid[address(_ownerbyid[4])] = 0;\n        _ownerbyid[address(_ownerbyid[5])] = 0;\n        _votestoreplace = 0;\n        _initiatereplacevote = 0;\n    }\n}\n\nfunction areownerscreated() public nonPayable { \n    return _areownerscreated;\n}\n\nfunction initiatereplacevote() public nonPayable { \n    return _initiatereplacevote;\n}\n\nfunction oldownertoreplace() public nonPayable { \n    return _oldownertoreplace;\n}\n\nfunction amounttosend() public nonPayable { \n    return _amounttosend;\n}\n\nfunction initiateSendTransaction(address varg0, uint256 varg1, uint256 varg2, uint256 varg3, address varg4, uint256 varg5) public payable { \n    require(address(_ownerbyaddress[address(address(msg.sender))]) == msg.sender);\n    v0 = v1 = _totalowners == 5;\n    if (v1) {\n        v0 = v2 = _initiatereplacevote == 0;\n    }\n    if (v0) {\n        v0 = v3 = _initiatesendtoevote == 0;\n    }\n    if (v0) {\n        v0 = v4 = (address(this)).balance >= varg2;\n    }\n    require(v0);\n    if (varg3 == 1) {\n        _theFunction = varg1;\n        _sendwithhex = varg3;\n    }\n    _sendto = varg0;\n    _amounttosend = varg2;\n    _tokensaddress = varg4;\n    _depositype = varg5;\n    _votestosend = 1;\n    _initiatesendtoevote = 1;\n    _ownerbyvotetosend[msg.sender] = 1;\n}\n\nfunction votestosend() public nonPayable { \n    return _votestosend;\n}\n\nfunction newownerinsteadofoldowner() public nonPayable { \n    return _newownerinsteadofoldowner;\n}\n\nfunction d() public nonPayable { \n    return _d;\n}\n\nfunction CreateOwners(address varg0, address varg1, address varg2, address varg3, address varg4) public payable { \n    require(_areownerscreated == 0);\n    _areownerscreated = 1;\n    _totalowners = 5;\n    _ownerbyaddress[varg0] = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[varg0];\n    _ownerbyaddress[varg1] = varg1 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[varg1];\n    _ownerbyaddress[varg2] = varg2 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[varg2];\n    _ownerbyaddress[varg3] = varg3 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[varg3];\n    _ownerbyaddress[varg4] = varg4 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[varg4];\n    _ownerbyid[1] = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x1];\n    _ownerbyid[2] = varg1 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x2];\n    _ownerbyid[3] = varg2 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x3];\n    _ownerbyid[4] = varg3 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x4];\n    _ownerbyid[5] = varg4 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x5];\n    _contractaddress = this;\n}\n\nfunction Deposit(address varg0, uint256 varg1, uint256 varg2) public payable { \n    if (varg2 != 1) {\n        require(varg1 == msg.value);\n    } else {\n        require(varg0.code.size);\n        v0, v1 = varg0.transferFrom(msg.sender, _contractaddress, varg1).gas(msg.gas);\n        require(v0); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n    }\n}\n\nfunction setCallContractValues(uint256 varg0, uint256 varg1, uint256 varg2, address varg3, uint256 varg4, uint256 varg5, uint256 varg6) public payable { \n    require(address(_ownerbyaddress[address(address(msg.sender))]) == msg.sender);\n    _a = varg0;\n    _b = varg1;\n    _c = varg2;\n    _d = varg3;\n    _e = varg4;\n    _f = varg5;\n    _g = varg6;\n}\n\nfunction GetWalletData() public nonPayable { \n    return _contractaddress, address(_ownerbyid[1]), address(_ownerbyid[2]), address(_ownerbyid[3]), address(_ownerbyid[4]), address(_ownerbyid[5]), _amounttosend, _votestosend, _votestoreplace, _sendto, _newownerinsteadofoldowner, _oldownertoreplace, _sendwithhex, _theFunction;\n}\n\nfunction istokensent() public nonPayable { \n    return _istokensent;\n}\n\nfunction initiateReplaceOwner(address varg0, address varg1) public payable { \n    require(address(_ownerbyaddress[address(address(msg.sender))]) == msg.sender);\n    v0 = v1 = varg1 != msg.sender;\n    if (v1) {\n        v0 = v2 = varg0 != msg.sender;\n    }\n    if (v0) {\n        v0 = v3 = _totalowners == 5;\n    }\n    if (v0) {\n        v0 = v4 = _initiatereplacevote == 0;\n    }\n    if (v0) {\n        v0 = v5 = _initiatesendtoevote == 0;\n    }\n    require(v0);\n    _newownerinsteadofoldowner = varg0;\n    _oldownertoreplace = varg1;\n    _initiatereplacevote = 1;\n    _ownerbyvotetoreplace[msg.sender] = 1;\n    _votestoreplace = _votestoreplace + 1;\n}\n\nfunction theFunction() public nonPayable { \n    return _theFunction;\n}\n\nfunction isethsent() public nonPayable { \n    return _isethsent;\n}\n\nfunction sendwithhex() public nonPayable { \n    return _sendwithhex;\n}\n\nfunction tokensaddress() public nonPayable { \n    return _tokensaddress;\n}\n\nfunction c() public nonPayable { \n    return _c;\n}\n\nfunction contractaddress() public nonPayable { \n    return _contractaddress;\n}\n\nfunction g() public nonPayable { \n    return _g;\n}\n\nfunction sendto() public nonPayable { \n    return _sendto;\n}\n\nfunction initiatesendtoevote() public nonPayable { \n    return _initiatesendtoevote;\n}\n\nfunction ownerbyid(uint256 varg0) public nonPayable { \n    return address(_ownerbyid[varg0]);\n}\n\nfunction GetBalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction e() public nonPayable { \n    return _e;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x2e93ee3 == function_selector) {\n            ownerbyvotetoreplace(address);\n        } else if (0x3a61bfc == function_selector) {\n            totalowners();\n        } else if (0x9b4c4c7 == function_selector) {\n            ownerbyvotetosend(address);\n        } else if (0xdbe671f == function_selector) {\n            a();\n        } else if (0x13205ed0 == function_selector) {\n            ownerbyaddress(address);\n        } else if (0x26121ff0 == function_selector) {\n            f();\n        } else if (0x2e5d3453 == function_selector) {\n            votestoreplace();\n        } else if (0x39471487 == function_selector) {\n            GetWalletDataTwo();\n        } else if (0x3abc607e == function_selector) {\n            VoteToSend();\n        } else if (0x3aecd0e3 == function_selector) {\n            getTokenBalance(address);\n        } else if (0x44e75e93 == function_selector) {\n            depositype();\n        } else if (0x4df7e3d0 == function_selector) {\n            b();\n        } else if (0x511b3983 == function_selector) {\n            GetFunctionData();\n        } else if (0x57fd8a4a == function_selector) {\n            VoteToReplaceOwner();\n        } else if (0x60372c98 == function_selector) {\n            areownerscreated();\n        } else if (0x6093def3 == function_selector) {\n            initiatereplacevote();\n        } else if (0x62e1d9d3 == function_selector) {\n            oldownertoreplace();\n        } else if (0x68a8a51f == function_selector) {\n            amounttosend();\n        } else if (0x691594f0 == function_selector) {\n            initiateSendTransaction(address,uint256,uint256,uint256,address,uint256);\n        } else if (0x76b82637 == function_selector) {\n            votestosend();\n        } else if (0x89a403e4 == function_selector) {\n            newownerinsteadofoldowner();\n        } else if (0x8a054ac2 == function_selector) {\n            d();\n        } else if (0x8d947097 == function_selector) {\n            CreateOwners(address,address,address,address,address);\n        } else if (0x90890809 == function_selector) {\n            Deposit(address,uint256,uint256);\n        } else if (0x9666fe3c == function_selector) {\n            setCallContractValues(uint256,uint256,uint256,address,uint256,uint256,uint256);\n        } else if (0xa5272afd == function_selector) {\n            GetWalletData();\n        } else if (0xa96d8fec == function_selector) {\n            istokensent();\n        } else if (0xabc9890b == function_selector) {\n            initiateReplaceOwner(address,address);\n        } else if (0xb6868a69 == function_selector) {\n            theFunction();\n        } else if (0xb8c572db == function_selector) {\n            isethsent();\n        } else if (0xb9ece431 == function_selector) {\n            sendwithhex();\n        } else if (0xbe2ea6f1 == function_selector) {\n            tokensaddress();\n        } else if (0xc3da42b8 == function_selector) {\n            c();\n        } else if (0xdb7fbc86 == function_selector) {\n            contractaddress();\n        } else if (0xe2179b8e == function_selector) {\n            g();\n        } else if (0xe749e123 == function_selector) {\n            sendto();\n        } else if (0xf66ffc06 == function_selector) {\n            initiatesendtoevote();\n        } else if (0xf702e4c4 == function_selector) {\n            ownerbyid(uint256);\n        } else if (0xf8f8a912 == function_selector) {\n            GetBalance();\n        } else if (0xffae15ba == function_selector) {\n            e();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 23:21 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _votestoreplace; // STORAGE[0x6]\nuint256 _votestosend; // STORAGE[0x7]\nuint256 _initiatereplacevote; // STORAGE[0x8]\nuint256 _initiatesendtoevote; // STORAGE[0x9]\nuint256 _amounttosend; // STORAGE[0xa]\nuint256 _areownerscreated; // STORAGE[0xb]\nuint256 _totalowners; // STORAGE[0xc]\nuint256 _isethsent; // STORAGE[0xd]\nuint256 _istokensent; // STORAGE[0xe]\nuint256 _sendwithhex; // STORAGE[0xf]\nuint256 _theFunction; // STORAGE[0x10]\nuint256 _depositype; // STORAGE[0x11]\nuint256 _a; // STORAGE[0x12]\nuint256 _b; // STORAGE[0x13]\nuint256 _c; // STORAGE[0x14]\nuint256 _e; // STORAGE[0x15]\nuint256 _f; // STORAGE[0x16]\nuint256 _g; // STORAGE[0x17]\nmapping (uint256 => [uint256]) _ownerbyvotetoreplace; // STORAGE[0x18]\nmapping (uint256 => [uint256]) _ownerbyvotetosend; // STORAGE[0x19]\nuint160 _newownerinsteadofoldowner; // STORAGE[0x0] bytes 0 to 19\nmapping (uint256 => [uint256]) _ownerbyaddress; // STORAGE[0x1a]\nmapping (uint256 => [uint256]) _ownerbyid; // STORAGE[0x1b]\naddress _oldownertoreplace; // STORAGE[0x1] bytes 0 to 19\naddress _sendto; // STORAGE[0x2] bytes 0 to 19\nuint160 _d; // STORAGE[0x3] bytes 0 to 19\naddress _contractaddress; // STORAGE[0x4] bytes 0 to 19\naddress _tokensaddress; // STORAGE[0x5] bytes 0 to 19\n\n\nfunction fallback() public payable { \n}\n\nfunction ownerbyvotetoreplace(address varg0) public nonPayable { \n    return _ownerbyvotetoreplace[varg0];\n}\n\nfunction totalowners() public nonPayable { \n    return _totalowners;\n}\n\nfunction ownerbyvotetosend(address varg0) public nonPayable { \n    return _ownerbyvotetosend[varg0];\n}\n\nfunction a() public nonPayable { \n    return _a;\n}\n\nfunction ownerbyaddress(address varg0) public nonPayable { \n    return address(_ownerbyaddress[varg0]);\n}\n\nfunction f() public nonPayable { \n    return _f;\n}\n\nfunction votestoreplace() public nonPayable { \n    return _votestoreplace;\n}\n\nfunction GetWalletDataTwo() public nonPayable { \n    return _tokensaddress, _depositype, _istokensent;\n}\n\nfunction VoteToSend() public payable { \n    require(address(_ownerbyaddress[address(address(msg.sender))]) == msg.sender);\n    v0 = v1 = _initiatereplacevote == 0;\n    if (v1) {\n        v0 = v2 = _totalowners == 5;\n    }\n    if (v0) {\n        v0 = v3 = _initiatesendtoevote == 1;\n    }\n    if (v0) {\n        v0 = _ownerbyvotetosend[msg.sender] == 0;\n    }\n    require(v0);\n    _votestosend = _votestosend + 1;\n    _ownerbyvotetosend[msg.sender] = 1;\n    if (_votestosend == 3) {\n        if (_sendwithhex != 1) {\n            if (_depositype != 1) {\n                require(_tokensaddress.code.size);\n                v4, v5 = _tokensaddress.transfer(_sendto, _amounttosend).gas(msg.gas);\n                require(v4); // checks call status, propagates error data on error\n                require(RETURNDATASIZE() >= 32);\n                _istokensent = 1;\n            } else {\n                v6 = _sendto.call().value(_amounttosend).gas(!_amounttosend * 2300);\n                require(v6); // checks call status, propagates error data on error\n                _isethsent = 1;\n            }\n        } else {\n            v7 = _sendto.call().value(_amounttosend).gas(!_amounttosend * 2300);\n            require(v7); // checks call status, propagates error data on error\n            if (_theFunction != 1) {\n                if (_theFunction != 2) {\n                    if (_theFunction != 3) {\n                        if (_theFunction != 4) {\n                            if (_theFunction != 5) {\n                                if (_theFunction != 6) {\n                                    if (_theFunction != 7) {\n                                        if (_theFunction != 8) {\n                                            if (_theFunction != 9) {\n                                                if (_theFunction != 10) {\n                                                    if (_theFunction != 11) {\n                                                        if (_theFunction != 12) {\n                                                            if (_theFunction != 13) {\n                                                                if (_theFunction != 14) {\n                                                                    if (_theFunction != 15) {\n                                                                        if (_theFunction == 16) {\n                                                                            MEM[64] += 164;\n                                                                            v8 = v9 = 0;\n                                                                            while (v8 < 132) {\n                                                                                MEM[MEM[64] + v8] = MEM[32 + MEM[64] + v8];\n                                                                                v8 = v8 + 32;\n                                                                            }\n                                                                            v10 = v11 = 132 + MEM[64];\n                                                                            if (4) {\n                                                                            }\n                                                                            v12 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x8763ba3700000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x8763ba3700000000000000000000000000000000000000000000000000000000, _b, _c, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _d).gas(msg.gas);\n                                                                            require(v12);\n                                                                        }\n                                                                    } else {\n                                                                        MEM[64] += 68;\n                                                                        v13 = v14 = 0;\n                                                                        while (v13 < 36) {\n                                                                            MEM[MEM[64] + v13] = MEM[32 + MEM[64] + v13];\n                                                                            v13 = v13 + 32;\n                                                                        }\n                                                                        v15 = v16 = 36 + MEM[64];\n                                                                        if (4) {\n                                                                        }\n                                                                        v17 = _sendto.call(_d & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x49339f0f00000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _d).gas(msg.gas);\n                                                                        require(v17);\n                                                                    }\n                                                                } else {\n                                                                    MEM[64] += 100;\n                                                                    v18 = v19 = 0;\n                                                                    while (v18 < 68) {\n                                                                        MEM[MEM[64] + v18] = MEM[32 + MEM[64] + v18];\n                                                                        v18 = v18 + 32;\n                                                                    }\n                                                                    v20 = v21 = 68 + MEM[64];\n                                                                    if (4) {\n                                                                    }\n                                                                    v22 = _sendto.call(_d & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x4a992a4200000000000000000000000000000000000000000000000000000000, _d & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x4a992a4200000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                                                    require(v22);\n                                                                }\n                                                            } else {\n                                                                MEM[64] += 100;\n                                                                v23 = v24 = 0;\n                                                                while (v23 < 68) {\n                                                                    MEM[MEM[64] + v23] = MEM[32 + MEM[64] + v23];\n                                                                    v23 = v23 + 32;\n                                                                }\n                                                                v25 = v26 = 68 + MEM[64];\n                                                                if (4) {\n                                                                }\n                                                                v27 = _sendto.call(_d & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x8100b1500000000000000000000000000000000000000000000000000000000, _d & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x8100b1500000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                                                require(v27);\n                                                            }\n                                                        } else {\n                                                            MEM[64] += 100;\n                                                            v28 = v29 = 0;\n                                                            while (v28 < 68) {\n                                                                MEM[MEM[64] + v28] = MEM[32 + MEM[64] + v28];\n                                                                v28 = v28 + 32;\n                                                            }\n                                                            v30 = v31 = 68 + MEM[64];\n                                                            if (4) {\n                                                            }\n                                                            v32 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xed4fbf0200000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xed4fbf0200000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _d).gas(msg.gas);\n                                                            require(v32);\n                                                        }\n                                                    } else {\n                                                        MEM[64] += 100;\n                                                        v33 = v34 = 0;\n                                                        while (v33 < 68) {\n                                                            MEM[MEM[64] + v33] = MEM[32 + MEM[64] + v33];\n                                                            v33 = v33 + 32;\n                                                        }\n                                                        v35 = v36 = 68 + MEM[64];\n                                                        if (4) {\n                                                        }\n                                                        v37 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x482f385a00000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x482f385a00000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _d).gas(msg.gas);\n                                                        require(v37);\n                                                    }\n                                                } else {\n                                                    MEM[64] += 164;\n                                                    v38 = v39 = 0;\n                                                    while (v38 < 132) {\n                                                        MEM[MEM[64] + v38] = MEM[32 + MEM[64] + v38];\n                                                        v38 = v38 + 32;\n                                                    }\n                                                    v40 = v41 = 132 + MEM[64];\n                                                    if (4) {\n                                                    }\n                                                    v42 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xc98357e100000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xc98357e100000000000000000000000000000000000000000000000000000000, _d, _c, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _b).gas(msg.gas);\n                                                    require(v42);\n                                                }\n                                            } else {\n                                                MEM[64] += 196;\n                                                v43 = v44 = 0;\n                                                while (v43 < 164) {\n                                                    MEM[MEM[64] + v43] = MEM[32 + MEM[64] + v43];\n                                                    v43 = v43 + 32;\n                                                }\n                                                v45 = v46 = 164 + MEM[64];\n                                                if (4) {\n                                                }\n                                                v47 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x27736cbe00000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x27736cbe00000000000000000000000000000000000000000000000000000000, _d, _c, _b, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _e).gas(msg.gas);\n                                                require(v47);\n                                            }\n                                        } else {\n                                            MEM[64] += 68;\n                                            v48 = v49 = 0;\n                                            while (v48 < 36) {\n                                                MEM[MEM[64] + v48] = MEM[32 + MEM[64] + v48];\n                                                v48 = v48 + 32;\n                                            }\n                                            v50 = v51 = 36 + MEM[64];\n                                            if (4) {\n                                            }\n                                            v52 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x6488cfe800000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                            require(v52);\n                                        }\n                                    } else {\n                                        MEM[64] += 68;\n                                        v53 = v54 = 0;\n                                        while (v53 < 36) {\n                                            MEM[MEM[64] + v53] = MEM[32 + MEM[64] + v53];\n                                            v53 = v53 + 32;\n                                        }\n                                        v55 = v56 = 36 + MEM[64];\n                                        if (4) {\n                                        }\n                                        v57 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x2e8abe2e00000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                        require(v57);\n                                    }\n                                } else {\n                                    MEM[64] += 68;\n                                    v58 = v59 = 0;\n                                    while (v58 < 36) {\n                                        MEM[MEM[64] + v58] = MEM[32 + MEM[64] + v58];\n                                        v58 = v58 + 32;\n                                    }\n                                    v60 = v61 = 36 + MEM[64];\n                                    if (4) {\n                                    }\n                                    v62 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xfa90f51a00000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                    require(v62);\n                                }\n                            } else {\n                                MEM[64] += 68;\n                                v63 = v64 = 0;\n                                while (v63 < 36) {\n                                    MEM[MEM[64] + v63] = MEM[32 + MEM[64] + v63];\n                                    v63 = v63 + 32;\n                                }\n                                v65 = v66 = 36 + MEM[64];\n                                if (4) {\n                                }\n                                v67 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xeb27d29900000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                require(v67);\n                            }\n                        } else {\n                            MEM[64] += 36;\n                            v68 = v69 = 0;\n                            while (v68 < 4) {\n                                MEM[MEM[64] + v68] = MEM[32 + MEM[64] + v68];\n                                v68 = v68 + 32;\n                            }\n                            v70 = v71 = 4 + MEM[64];\n                            if (4) {\n                            }\n                            v72 = _sendto.call(~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & (MEM[MEM[64] + 32] & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x468c9dd800000000000000000000000000000000000000000000000000000000)).gas(msg.gas);\n                            require(v72);\n                        }\n                    } else {\n                        MEM[64] += 228;\n                        v73 = v74 = 0;\n                        while (v73 < 196) {\n                            MEM[MEM[64] + v73] = MEM[32 + MEM[64] + v73];\n                            v73 = v73 + 32;\n                        }\n                        v75 = v76 = 196 + MEM[64];\n                        if (4) {\n                        }\n                        v77 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x9e0d8fca00000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x9e0d8fca00000000000000000000000000000000000000000000000000000000, _b, _c, _d, _e, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _f).gas(msg.gas);\n                        require(v77);\n                    }\n                } else {\n                    MEM[64] += 260;\n                    v78 = v79 = 0;\n                    while (v78 < 228) {\n                        MEM[MEM[64] + v78] = MEM[32 + MEM[64] + v78];\n                        v78 = v78 + 32;\n                    }\n                    v80 = v81 = 228 + MEM[64];\n                    if (4) {\n                    }\n                    v82 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xdcabe03900000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xdcabe03900000000000000000000000000000000000000000000000000000000, _b, _c, _d, _e, _f, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _g).gas(msg.gas);\n                    require(v82);\n                }\n            } else {\n                MEM[64] += 36;\n                v83 = v84 = 0;\n                while (v83 < 4) {\n                    MEM[MEM[64] + v83] = MEM[32 + MEM[64] + v83];\n                    v83 = v83 + 32;\n                }\n                v85 = v86 = 4 + MEM[64];\n                if (4) {\n                }\n                v87 = _sendto.call(~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & (MEM[MEM[64] + 32] & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xab1d693f00000000000000000000000000000000000000000000000000000000)).gas(msg.gas);\n                require(v87);\n            }\n        }\n        _ownerbyid[address(_ownerbyid[1])] = 0;\n        _ownerbyid[address(_ownerbyid[2])] = 0;\n        _ownerbyid[address(_ownerbyid[3])] = 0;\n        _ownerbyid[address(_ownerbyid[4])] = 0;\n        _ownerbyid[address(_ownerbyid[5])] = 0;\n        _votestosend = 0;\n        _initiatesendtoevote = 0;\n    }\n}\n\nfunction getTokenBalance(address varg0) public nonPayable { \n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction depositype() public nonPayable { \n    return _depositype;\n}\n\nfunction b() public nonPayable { \n    return _b;\n}\n\nfunction GetFunctionData() public nonPayable { \n    return _a, _b, _c, _d, _e, _f, _g;\n}\n\nfunction VoteToReplaceOwner() public payable { \n    require(address(_ownerbyaddress[address(address(msg.sender))]) == msg.sender);\n    v0 = v1 = _initiatereplacevote == 1;\n    if (v1) {\n        v0 = v2 = _totalowners == 5;\n    }\n    if (v0) {\n        v0 = v3 = _oldownertoreplace != msg.sender;\n    }\n    if (v0) {\n        v0 = v4 = _ownerbyvotetoreplace[msg.sender] == 0;\n    }\n    if (v0) {\n        v0 = _initiatesendtoevote == 0;\n    }\n    require(v0);\n    _ownerbyvotetoreplace[msg.sender] = 1;\n    _votestoreplace = _votestoreplace + 1;\n    if (_votestoreplace == 3) {\n        _ownerbyvotetoreplace[_oldownertoreplace] = 0;\n        _ownerbyvotetosend[_oldownertoreplace] = 0;\n        _ownerbyaddress[_oldownertoreplace] = ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[_oldownertoreplace];\n        _ownerbyaddress[_newownerinsteadofoldowner] = 0;\n        _ownerbyaddress[_newownerinsteadofoldowner] = 0;\n        if (address(_ownerbyid[1]) != _oldownertoreplace) {\n            if (address(_ownerbyid[2]) != _oldownertoreplace) {\n                if (address(_ownerbyid[3]) != _oldownertoreplace) {\n                    if (address(_ownerbyid[4]) != _oldownertoreplace) {\n                        if (address(_ownerbyid[5]) == _oldownertoreplace) {\n                            _ownerbyid[5] = _newownerinsteadofoldowner | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x5];\n                        }\n                    } else {\n                        _ownerbyid[4] = _newownerinsteadofoldowner | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x4];\n                    }\n                } else {\n                    _ownerbyid[3] = _newownerinsteadofoldowner | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x3];\n                }\n            } else {\n                _ownerbyid[2] = _newownerinsteadofoldowner | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x2];\n            }\n        } else {\n            _ownerbyid[1] = _newownerinsteadofoldowner | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x1];\n        }\n        _ownerbyid[address(_ownerbyid[1])] = 0;\n        _ownerbyid[address(_ownerbyid[2])] = 0;\n        _ownerbyid[address(_ownerbyid[3])] = 0;\n        _ownerbyid[address(_ownerbyid[4])] = 0;\n        _ownerbyid[address(_ownerbyid[5])] = 0;\n        _votestoreplace = 0;\n        _initiatereplacevote = 0;\n    }\n}\n\nfunction areownerscreated() public nonPayable { \n    return _areownerscreated;\n}\n\nfunction initiatereplacevote() public nonPayable { \n    return _initiatereplacevote;\n}\n\nfunction oldownertoreplace() public nonPayable { \n    return _oldownertoreplace;\n}\n\nfunction amounttosend() public nonPayable { \n    return _amounttosend;\n}\n\nfunction initiateSendTransaction(address varg0, uint256 varg1, uint256 varg2, uint256 varg3, address varg4, uint256 varg5) public payable { \n    require(address(_ownerbyaddress[address(address(msg.sender))]) == msg.sender);\n    v0 = v1 = _totalowners == 5;\n    if (v1) {\n        v0 = v2 = _initiatereplacevote == 0;\n    }\n    if (v0) {\n        v0 = v3 = _initiatesendtoevote == 0;\n    }\n    if (v0) {\n        v0 = v4 = (address(this)).balance >= varg2;\n    }\n    require(v0);\n    if (varg3 == 1) {\n        _theFunction = varg1;\n        _sendwithhex = varg3;\n    }\n    _sendto = varg0;\n    _amounttosend = varg2;\n    _tokensaddress = varg4;\n    _depositype = varg5;\n    _votestosend = 1;\n    _initiatesendtoevote = 1;\n    _ownerbyvotetosend[msg.sender] = 1;\n}\n\nfunction votestosend() public nonPayable { \n    return _votestosend;\n}\n\nfunction newownerinsteadofoldowner() public nonPayable { \n    return _newownerinsteadofoldowner;\n}\n\nfunction d() public nonPayable { \n    return _d;\n}\n\nfunction CreateOwners(address varg0, address varg1, address varg2, address varg3, address varg4) public payable { \n    require(_areownerscreated == 0);\n    _areownerscreated = 1;\n    _totalowners = 5;\n    _ownerbyaddress[varg0] = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[varg0];\n    _ownerbyaddress[varg1] = varg1 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[varg1];\n    _ownerbyaddress[varg2] = varg2 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[varg2];\n    _ownerbyaddress[varg3] = varg3 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[varg3];\n    _ownerbyaddress[varg4] = varg4 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[varg4];\n    _ownerbyid[1] = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x1];\n    _ownerbyid[2] = varg1 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x2];\n    _ownerbyid[3] = varg2 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x3];\n    _ownerbyid[4] = varg3 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x4];\n    _ownerbyid[5] = varg4 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x5];\n    _contractaddress = this;\n}\n\nfunction Deposit(address varg0, uint256 varg1, uint256 varg2) public payable { \n    if (varg2 != 1) {\n        require(varg1 == msg.value);\n    } else {\n        require(varg0.code.size);\n        v0, v1 = varg0.transferFrom(msg.sender, _contractaddress, varg1).gas(msg.gas);\n        require(v0); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n    }\n}\n\nfunction setCallContractValues(uint256 varg0, uint256 varg1, uint256 varg2, address varg3, uint256 varg4, uint256 varg5, uint256 varg6) public payable { \n    require(address(_ownerbyaddress[address(address(msg.sender))]) == msg.sender);\n    _a = varg0;\n    _b = varg1;\n    _c = varg2;\n    _d = varg3;\n    _e = varg4;\n    _f = varg5;\n    _g = varg6;\n}\n\nfunction GetWalletData() public nonPayable { \n    return _contractaddress, address(_ownerbyid[1]), address(_ownerbyid[2]), address(_ownerbyid[3]), address(_ownerbyid[4]), address(_ownerbyid[5]), _amounttosend, _votestosend, _votestoreplace, _sendto, _newownerinsteadofoldowner, _oldownertoreplace, _sendwithhex, _theFunction;\n}\n\nfunction istokensent() public nonPayable { \n    return _istokensent;\n}\n\nfunction initiateReplaceOwner(address varg0, address varg1) public payable { \n    require(address(_ownerbyaddress[address(address(msg.sender))]) == msg.sender);\n    v0 = v1 = varg1 != msg.sender;\n    if (v1) {\n        v0 = v2 = varg0 != msg.sender;\n    }\n    if (v0) {\n        v0 = v3 = _totalowners == 5;\n    }\n    if (v0) {\n        v0 = v4 = _initiatereplacevote == 0;\n    }\n    if (v0) {\n        v0 = v5 = _initiatesendtoevote == 0;\n    }\n    require(v0);\n    _newownerinsteadofoldowner = varg0;\n    _oldownertoreplace = varg1;\n    _initiatereplacevote = 1;\n    _ownerbyvotetoreplace[msg.sender] = 1;\n    _votestoreplace = _votestoreplace + 1;\n}\n\nfunction theFunction() public nonPayable { \n    return _theFunction;\n}\n\nfunction isethsent() public nonPayable { \n    return _isethsent;\n}\n\nfunction sendwithhex() public nonPayable { \n    return _sendwithhex;\n}\n\nfunction tokensaddress() public nonPayable { \n    return _tokensaddress;\n}\n\nfunction c() public nonPayable { \n    return _c;\n}\n\nfunction contractaddress() public nonPayable { \n    return _contractaddress;\n}\n\nfunction g() public nonPayable { \n    return _g;\n}\n\nfunction sendto() public nonPayable { \n    return _sendto;\n}\n\nfunction initiatesendtoevote() public nonPayable { \n    return _initiatesendtoevote;\n}\n\nfunction ownerbyid(uint256 varg0) public nonPayable { \n    return address(_ownerbyid[varg0]);\n}\n\nfunction GetBalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction e() public nonPayable { \n    return _e;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x2e93ee3 == function_selector) {\n            ownerbyvotetoreplace(address);\n        } else if (0x3a61bfc == function_selector) {\n            totalowners();\n        } else if (0x9b4c4c7 == function_selector) {\n            ownerbyvotetosend(address);\n        } else if (0xdbe671f == function_selector) {\n            a();\n        } else if (0x13205ed0 == function_selector) {\n            ownerbyaddress(address);\n        } else if (0x26121ff0 == function_selector) {\n            f();\n        } else if (0x2e5d3453 == function_selector) {\n            votestoreplace();\n        } else if (0x39471487 == function_selector) {\n            GetWalletDataTwo();\n        } else if (0x3abc607e == function_selector) {\n            VoteToSend();\n        } else if (0x3aecd0e3 == function_selector) {\n            getTokenBalance(address);\n        } else if (0x44e75e93 == function_selector) {\n            depositype();\n        } else if (0x4df7e3d0 == function_selector) {\n            b();\n        } else if (0x511b3983 == function_selector) {\n            GetFunctionData();\n        } else if (0x57fd8a4a == function_selector) {\n            VoteToReplaceOwner();\n        } else if (0x60372c98 == function_selector) {\n            areownerscreated();\n        } else if (0x6093def3 == function_selector) {\n            initiatereplacevote();\n        } else if (0x62e1d9d3 == function_selector) {\n            oldownertoreplace();\n        } else if (0x68a8a51f == function_selector) {\n            amounttosend();\n        } else if (0x691594f0 == function_selector) {\n            initiateSendTransaction(address,uint256,uint256,uint256,address,uint256);\n        } else if (0x76b82637 == function_selector) {\n            votestosend();\n        } else if (0x89a403e4 == function_selector) {\n            newownerinsteadofoldowner();\n        } else if (0x8a054ac2 == function_selector) {\n            d();\n        } else if (0x8d947097 == function_selector) {\n            CreateOwners(address,address,address,address,address);\n        } else if (0x90890809 == function_selector) {\n            Deposit(address,uint256,uint256);\n        } else if (0x9666fe3c == function_selector) {\n            setCallContractValues(uint256,uint256,uint256,address,uint256,uint256,uint256);\n        } else if (0xa5272afd == function_selector) {\n            GetWalletData();\n        } else if (0xa96d8fec == function_selector) {\n            istokensent();\n        } else if (0xabc9890b == function_selector) {\n            initiateReplaceOwner(address,address);\n        } else if (0xb6868a69 == function_selector) {\n            theFunction();\n        } else if (0xb8c572db == function_selector) {\n            isethsent();\n        } else if (0xb9ece431 == function_selector) {\n            sendwithhex();\n        } else if (0xbe2ea6f1 == function_selector) {\n            tokensaddress();\n        } else if (0xc3da42b8 == function_selector) {\n            c();\n        } else if (0xdb7fbc86 == function_selector) {\n            contractaddress();\n        } else if (0xe2179b8e == function_selector) {\n            g();\n        } else if (0xe749e123 == function_selector) {\n            sendto();\n        } else if (0xf66ffc06 == function_selector) {\n            initiatesendtoevote();\n        } else if (0xf702e4c4 == function_selector) {\n            ownerbyid(uint256);\n        } else if (0xf8f8a912 == function_selector) {\n            GetBalance();\n        } else if (0xffae15ba == function_selector) {\n            e();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 23:21 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _votestoreplace; // STORAGE[0x6]\nuint256 _votestosend; // STORAGE[0x7]\nuint256 _initiatereplacevote; // STORAGE[0x8]\nuint256 _initiatesendtoevote; // STORAGE[0x9]\nuint256 _amounttosend; // STORAGE[0xa]\nuint256 _areownerscreated; // STORAGE[0xb]\nuint256 _totalowners; // STORAGE[0xc]\nuint256 _isethsent; // STORAGE[0xd]\nuint256 _istokensent; // STORAGE[0xe]\nuint256 _sendwithhex; // STORAGE[0xf]\nuint256 _theFunction; // STORAGE[0x10]\nuint256 _depositype; // STORAGE[0x11]\nuint256 _a; // STORAGE[0x12]\nuint256 _b; // STORAGE[0x13]\nuint256 _c; // STORAGE[0x14]\nuint256 _e; // STORAGE[0x15]\nuint256 _f; // STORAGE[0x16]\nuint256 _g; // STORAGE[0x17]\nmapping (uint256 => [uint256]) _ownerbyvotetoreplace; // STORAGE[0x18]\nmapping (uint256 => [uint256]) _ownerbyvotetosend; // STORAGE[0x19]\nuint160 _newownerinsteadofoldowner; // STORAGE[0x0] bytes 0 to 19\nmapping (uint256 => [uint256]) _ownerbyaddress; // STORAGE[0x1a]\nmapping (uint256 => [uint256]) _ownerbyid; // STORAGE[0x1b]\naddress _oldownertoreplace; // STORAGE[0x1] bytes 0 to 19\naddress _sendto; // STORAGE[0x2] bytes 0 to 19\nuint160 _d; // STORAGE[0x3] bytes 0 to 19\naddress _contractaddress; // STORAGE[0x4] bytes 0 to 19\naddress _tokensaddress; // STORAGE[0x5] bytes 0 to 19\n\n\nfunction fallback() public payable { \n}\n\nfunction ownerbyvotetoreplace(address varg0) public nonPayable { \n    return _ownerbyvotetoreplace[varg0];\n}\n\nfunction totalowners() public nonPayable { \n    return _totalowners;\n}\n\nfunction ownerbyvotetosend(address varg0) public nonPayable { \n    return _ownerbyvotetosend[varg0];\n}\n\nfunction a() public nonPayable { \n    return _a;\n}\n\nfunction ownerbyaddress(address varg0) public nonPayable { \n    return address(_ownerbyaddress[varg0]);\n}\n\nfunction f() public nonPayable { \n    return _f;\n}\n\nfunction votestoreplace() public nonPayable { \n    return _votestoreplace;\n}\n\nfunction GetWalletDataTwo() public nonPayable { \n    return _tokensaddress, _depositype, _istokensent;\n}\n\nfunction VoteToSend() public payable { \n    require(address(_ownerbyaddress[address(address(msg.sender))]) == msg.sender);\n    v0 = v1 = _initiatereplacevote == 0;\n    if (v1) {\n        v0 = v2 = _totalowners == 5;\n    }\n    if (v0) {\n        v0 = v3 = _initiatesendtoevote == 1;\n    }\n    if (v0) {\n        v0 = _ownerbyvotetosend[msg.sender] == 0;\n    }\n    require(v0);\n    _votestosend = _votestosend + 1;\n    _ownerbyvotetosend[msg.sender] = 1;\n    if (_votestosend == 3) {\n        if (_sendwithhex != 1) {\n            if (_depositype != 1) {\n                require(_tokensaddress.code.size);\n                v4, v5 = _tokensaddress.transfer(_sendto, _amounttosend).gas(msg.gas);\n                require(v4); // checks call status, propagates error data on error\n                require(RETURNDATASIZE() >= 32);\n                _istokensent = 1;\n            } else {\n                v6 = _sendto.call().value(_amounttosend).gas(!_amounttosend * 2300);\n                require(v6); // checks call status, propagates error data on error\n                _isethsent = 1;\n            }\n        } else {\n            v7 = _sendto.call().value(_amounttosend).gas(!_amounttosend * 2300);\n            require(v7); // checks call status, propagates error data on error\n            if (_theFunction != 1) {\n                if (_theFunction != 2) {\n                    if (_theFunction != 3) {\n                        if (_theFunction != 4) {\n                            if (_theFunction != 5) {\n                                if (_theFunction != 6) {\n                                    if (_theFunction != 7) {\n                                        if (_theFunction != 8) {\n                                            if (_theFunction != 9) {\n                                                if (_theFunction != 10) {\n                                                    if (_theFunction != 11) {\n                                                        if (_theFunction != 12) {\n                                                            if (_theFunction != 13) {\n                                                                if (_theFunction != 14) {\n                                                                    if (_theFunction != 15) {\n                                                                        if (_theFunction == 16) {\n                                                                            MEM[64] += 164;\n                                                                            v8 = v9 = 0;\n                                                                            while (v8 < 132) {\n                                                                                MEM[MEM[64] + v8] = MEM[32 + MEM[64] + v8];\n                                                                                v8 = v8 + 32;\n                                                                            }\n                                                                            v10 = v11 = 132 + MEM[64];\n                                                                            if (4) {\n                                                                            }\n                                                                            v12 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x8763ba3700000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x8763ba3700000000000000000000000000000000000000000000000000000000, _b, _c, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _d).gas(msg.gas);\n                                                                            require(v12);\n                                                                        }\n                                                                    } else {\n                                                                        MEM[64] += 68;\n                                                                        v13 = v14 = 0;\n                                                                        while (v13 < 36) {\n                                                                            MEM[MEM[64] + v13] = MEM[32 + MEM[64] + v13];\n                                                                            v13 = v13 + 32;\n                                                                        }\n                                                                        v15 = v16 = 36 + MEM[64];\n                                                                        if (4) {\n                                                                        }\n                                                                        v17 = _sendto.call(_d & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x49339f0f00000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _d).gas(msg.gas);\n                                                                        require(v17);\n                                                                    }\n                                                                } else {\n                                                                    MEM[64] += 100;\n                                                                    v18 = v19 = 0;\n                                                                    while (v18 < 68) {\n                                                                        MEM[MEM[64] + v18] = MEM[32 + MEM[64] + v18];\n                                                                        v18 = v18 + 32;\n                                                                    }\n                                                                    v20 = v21 = 68 + MEM[64];\n                                                                    if (4) {\n                                                                    }\n                                                                    v22 = _sendto.call(_d & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x4a992a4200000000000000000000000000000000000000000000000000000000, _d & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x4a992a4200000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                                                    require(v22);\n                                                                }\n                                                            } else {\n                                                                MEM[64] += 100;\n                                                                v23 = v24 = 0;\n                                                                while (v23 < 68) {\n                                                                    MEM[MEM[64] + v23] = MEM[32 + MEM[64] + v23];\n                                                                    v23 = v23 + 32;\n                                                                }\n                                                                v25 = v26 = 68 + MEM[64];\n                                                                if (4) {\n                                                                }\n                                                                v27 = _sendto.call(_d & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x8100b1500000000000000000000000000000000000000000000000000000000, _d & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x8100b1500000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                                                require(v27);\n                                                            }\n                                                        } else {\n                                                            MEM[64] += 100;\n                                                            v28 = v29 = 0;\n                                                            while (v28 < 68) {\n                                                                MEM[MEM[64] + v28] = MEM[32 + MEM[64] + v28];\n                                                                v28 = v28 + 32;\n                                                            }\n                                                            v30 = v31 = 68 + MEM[64];\n                                                            if (4) {\n                                                            }\n                                                            v32 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xed4fbf0200000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xed4fbf0200000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _d).gas(msg.gas);\n                                                            require(v32);\n                                                        }\n                                                    } else {\n                                                        MEM[64] += 100;\n                                                        v33 = v34 = 0;\n                                                        while (v33 < 68) {\n                                                            MEM[MEM[64] + v33] = MEM[32 + MEM[64] + v33];\n                                                            v33 = v33 + 32;\n                                                        }\n                                                        v35 = v36 = 68 + MEM[64];\n                                                        if (4) {\n                                                        }\n                                                        v37 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x482f385a00000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x482f385a00000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _d).gas(msg.gas);\n                                                        require(v37);\n                                                    }\n                                                } else {\n                                                    MEM[64] += 164;\n                                                    v38 = v39 = 0;\n                                                    while (v38 < 132) {\n                                                        MEM[MEM[64] + v38] = MEM[32 + MEM[64] + v38];\n                                                        v38 = v38 + 32;\n                                                    }\n                                                    v40 = v41 = 132 + MEM[64];\n                                                    if (4) {\n                                                    }\n                                                    v42 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xc98357e100000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xc98357e100000000000000000000000000000000000000000000000000000000, _d, _c, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _b).gas(msg.gas);\n                                                    require(v42);\n                                                }\n                                            } else {\n                                                MEM[64] += 196;\n                                                v43 = v44 = 0;\n                                                while (v43 < 164) {\n                                                    MEM[MEM[64] + v43] = MEM[32 + MEM[64] + v43];\n                                                    v43 = v43 + 32;\n                                                }\n                                                v45 = v46 = 164 + MEM[64];\n                                                if (4) {\n                                                }\n                                                v47 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x27736cbe00000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x27736cbe00000000000000000000000000000000000000000000000000000000, _d, _c, _b, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _e).gas(msg.gas);\n                                                require(v47);\n                                            }\n                                        } else {\n                                            MEM[64] += 68;\n                                            v48 = v49 = 0;\n                                            while (v48 < 36) {\n                                                MEM[MEM[64] + v48] = MEM[32 + MEM[64] + v48];\n                                                v48 = v48 + 32;\n                                            }\n                                            v50 = v51 = 36 + MEM[64];\n                                            if (4) {\n                                            }\n                                            v52 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x6488cfe800000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                            require(v52);\n                                        }\n                                    } else {\n                                        MEM[64] += 68;\n                                        v53 = v54 = 0;\n                                        while (v53 < 36) {\n                                            MEM[MEM[64] + v53] = MEM[32 + MEM[64] + v53];\n                                            v53 = v53 + 32;\n                                        }\n                                        v55 = v56 = 36 + MEM[64];\n                                        if (4) {\n                                        }\n                                        v57 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x2e8abe2e00000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                        require(v57);\n                                    }\n                                } else {\n                                    MEM[64] += 68;\n                                    v58 = v59 = 0;\n                                    while (v58 < 36) {\n                                        MEM[MEM[64] + v58] = MEM[32 + MEM[64] + v58];\n                                        v58 = v58 + 32;\n                                    }\n                                    v60 = v61 = 36 + MEM[64];\n                                    if (4) {\n                                    }\n                                    v62 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xfa90f51a00000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                    require(v62);\n                                }\n                            } else {\n                                MEM[64] += 68;\n                                v63 = v64 = 0;\n                                while (v63 < 36) {\n                                    MEM[MEM[64] + v63] = MEM[32 + MEM[64] + v63];\n                                    v63 = v63 + 32;\n                                }\n                                v65 = v66 = 36 + MEM[64];\n                                if (4) {\n                                }\n                                v67 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xeb27d29900000000000000000000000000000000000000000000000000000000, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _a).gas(msg.gas);\n                                require(v67);\n                            }\n                        } else {\n                            MEM[64] += 36;\n                            v68 = v69 = 0;\n                            while (v68 < 4) {\n                                MEM[MEM[64] + v68] = MEM[32 + MEM[64] + v68];\n                                v68 = v68 + 32;\n                            }\n                            v70 = v71 = 4 + MEM[64];\n                            if (4) {\n                            }\n                            v72 = _sendto.call(~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & (MEM[MEM[64] + 32] & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x468c9dd800000000000000000000000000000000000000000000000000000000)).gas(msg.gas);\n                            require(v72);\n                        }\n                    } else {\n                        MEM[64] += 228;\n                        v73 = v74 = 0;\n                        while (v73 < 196) {\n                            MEM[MEM[64] + v73] = MEM[32 + MEM[64] + v73];\n                            v73 = v73 + 32;\n                        }\n                        v75 = v76 = 196 + MEM[64];\n                        if (4) {\n                        }\n                        v77 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x9e0d8fca00000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0x9e0d8fca00000000000000000000000000000000000000000000000000000000, _b, _c, _d, _e, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _f).gas(msg.gas);\n                        require(v77);\n                    }\n                } else {\n                    MEM[64] += 260;\n                    v78 = v79 = 0;\n                    while (v78 < 228) {\n                        MEM[MEM[64] + v78] = MEM[32 + MEM[64] + v78];\n                        v78 = v78 + 32;\n                    }\n                    v80 = v81 = 228 + MEM[64];\n                    if (4) {\n                    }\n                    v82 = _sendto.call(_a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xdcabe03900000000000000000000000000000000000000000000000000000000, _a & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xdcabe03900000000000000000000000000000000000000000000000000000000, _b, _c, _d, _e, _f, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & _g).gas(msg.gas);\n                    require(v82);\n                }\n            } else {\n                MEM[64] += 36;\n                v83 = v84 = 0;\n                while (v83 < 4) {\n                    MEM[MEM[64] + v83] = MEM[32 + MEM[64] + v83];\n                    v83 = v83 + 32;\n                }\n                v85 = v86 = 4 + MEM[64];\n                if (4) {\n                }\n                v87 = _sendto.call(~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & (MEM[MEM[64] + 32] & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff | 0xab1d693f00000000000000000000000000000000000000000000000000000000)).gas(msg.gas);\n                require(v87);\n            }\n        }\n        _ownerbyid[address(_ownerbyid[1])] = 0;\n        _ownerbyid[address(_ownerbyid[2])] = 0;\n        _ownerbyid[address(_ownerbyid[3])] = 0;\n        _ownerbyid[address(_ownerbyid[4])] = 0;\n        _ownerbyid[address(_ownerbyid[5])] = 0;\n        _votestosend = 0;\n        _initiatesendtoevote = 0;\n    }\n}\n\nfunction getTokenBalance(address varg0) public nonPayable { \n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction depositype() public nonPayable { \n    return _depositype;\n}\n\nfunction b() public nonPayable { \n    return _b;\n}\n\nfunction GetFunctionData() public nonPayable { \n    return _a, _b, _c, _d, _e, _f, _g;\n}\n\nfunction VoteToReplaceOwner() public payable { \n    require(address(_ownerbyaddress[address(address(msg.sender))]) == msg.sender);\n    v0 = v1 = _initiatereplacevote == 1;\n    if (v1) {\n        v0 = v2 = _totalowners == 5;\n    }\n    if (v0) {\n        v0 = v3 = _oldownertoreplace != msg.sender;\n    }\n    if (v0) {\n        v0 = v4 = _ownerbyvotetoreplace[msg.sender] == 0;\n    }\n    if (v0) {\n        v0 = _initiatesendtoevote == 0;\n    }\n    require(v0);\n    _ownerbyvotetoreplace[msg.sender] = 1;\n    _votestoreplace = _votestoreplace + 1;\n    if (_votestoreplace == 3) {\n        _ownerbyvotetoreplace[_oldownertoreplace] = 0;\n        _ownerbyvotetosend[_oldownertoreplace] = 0;\n        _ownerbyaddress[_oldownertoreplace] = ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[_oldownertoreplace];\n        _ownerbyaddress[_newownerinsteadofoldowner] = 0;\n        _ownerbyaddress[_newownerinsteadofoldowner] = 0;\n        if (address(_ownerbyid[1]) != _oldownertoreplace) {\n            if (address(_ownerbyid[2]) != _oldownertoreplace) {\n                if (address(_ownerbyid[3]) != _oldownertoreplace) {\n                    if (address(_ownerbyid[4]) != _oldownertoreplace) {\n                        if (address(_ownerbyid[5]) == _oldownertoreplace) {\n                            _ownerbyid[5] = _newownerinsteadofoldowner | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x5];\n                        }\n                    } else {\n                        _ownerbyid[4] = _newownerinsteadofoldowner | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x4];\n                    }\n                } else {\n                    _ownerbyid[3] = _newownerinsteadofoldowner | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x3];\n                }\n            } else {\n                _ownerbyid[2] = _newownerinsteadofoldowner | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x2];\n            }\n        } else {\n            _ownerbyid[1] = _newownerinsteadofoldowner | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x1];\n        }\n        _ownerbyid[address(_ownerbyid[1])] = 0;\n        _ownerbyid[address(_ownerbyid[2])] = 0;\n        _ownerbyid[address(_ownerbyid[3])] = 0;\n        _ownerbyid[address(_ownerbyid[4])] = 0;\n        _ownerbyid[address(_ownerbyid[5])] = 0;\n        _votestoreplace = 0;\n        _initiatereplacevote = 0;\n    }\n}\n\nfunction areownerscreated() public nonPayable { \n    return _areownerscreated;\n}\n\nfunction initiatereplacevote() public nonPayable { \n    return _initiatereplacevote;\n}\n\nfunction oldownertoreplace() public nonPayable { \n    return _oldownertoreplace;\n}\n\nfunction amounttosend() public nonPayable { \n    return _amounttosend;\n}\n\nfunction initiateSendTransaction(address varg0, uint256 varg1, uint256 varg2, uint256 varg3, address varg4, uint256 varg5) public payable { \n    require(address(_ownerbyaddress[address(address(msg.sender))]) == msg.sender);\n    v0 = v1 = _totalowners == 5;\n    if (v1) {\n        v0 = v2 = _initiatereplacevote == 0;\n    }\n    if (v0) {\n        v0 = v3 = _initiatesendtoevote == 0;\n    }\n    if (v0) {\n        v0 = v4 = (address(this)).balance >= varg2;\n    }\n    require(v0);\n    if (varg3 == 1) {\n        _theFunction = varg1;\n        _sendwithhex = varg3;\n    }\n    _sendto = varg0;\n    _amounttosend = varg2;\n    _tokensaddress = varg4;\n    _depositype = varg5;\n    _votestosend = 1;\n    _initiatesendtoevote = 1;\n    _ownerbyvotetosend[msg.sender] = 1;\n}\n\nfunction votestosend() public nonPayable { \n    return _votestosend;\n}\n\nfunction newownerinsteadofoldowner() public nonPayable { \n    return _newownerinsteadofoldowner;\n}\n\nfunction d() public nonPayable { \n    return _d;\n}\n\nfunction CreateOwners(address varg0, address varg1, address varg2, address varg3, address varg4) public payable { \n    require(_areownerscreated == 0);\n    _areownerscreated = 1;\n    _totalowners = 5;\n    _ownerbyaddress[varg0] = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[varg0];\n    _ownerbyaddress[varg1] = varg1 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[varg1];\n    _ownerbyaddress[varg2] = varg2 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[varg2];\n    _ownerbyaddress[varg3] = varg3 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[varg3];\n    _ownerbyaddress[varg4] = varg4 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyaddress[varg4];\n    _ownerbyid[1] = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x1];\n    _ownerbyid[2] = varg1 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x2];\n    _ownerbyid[3] = varg2 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x3];\n    _ownerbyid[4] = varg3 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x4];\n    _ownerbyid[5] = varg4 | ~0xffffffffffffffffffffffffffffffffffffffff & _ownerbyid[0x5];\n    _contractaddress = this;\n}\n\nfunction Deposit(address varg0, uint256 varg1, uint256 varg2) public payable { \n    if (varg2 != 1) {\n        require(varg1 == msg.value);\n    } else {\n        require(varg0.code.size);\n        v0, v1 = varg0.transferFrom(msg.sender, _contractaddress, varg1).gas(msg.gas);\n        require(v0); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n    }\n}\n\nfunction setCallContractValues(uint256 varg0, uint256 varg1, uint256 varg2, address varg3, uint256 varg4, uint256 varg5, uint256 varg6) public payable { \n    require(address(_ownerbyaddress[address(address(msg.sender))]) == msg.sender);\n    _a = varg0;\n    _b = varg1;\n    _c = varg2;\n    _d = varg3;\n    _e = varg4;\n    _f = varg5;\n    _g = varg6;\n}\n\nfunction GetWalletData() public nonPayable { \n    return _contractaddress, address(_ownerbyid[1]), address(_ownerbyid[2]), address(_ownerbyid[3]), address(_ownerbyid[4]), address(_ownerbyid[5]), _amounttosend, _votestosend, _votestoreplace, _sendto, _newownerinsteadofoldowner, _oldownertoreplace, _sendwithhex, _theFunction;\n}\n\nfunction istokensent() public nonPayable { \n    return _istokensent;\n}\n\nfunction initiateReplaceOwner(address varg0, address varg1) public payable { \n    require(address(_ownerbyaddress[address(address(msg.sender))]) == msg.sender);\n    v0 = v1 = varg1 != msg.sender;\n    if (v1) {\n        v0 = v2 = varg0 != msg.sender;\n    }\n    if (v0) {\n        v0 = v3 = _totalowners == 5;\n    }\n    if (v0) {\n        v0 = v4 = _initiatereplacevote == 0;\n    }\n    if (v0) {\n        v0 = v5 = _initiatesendtoevote == 0;\n    }\n    require(v0);\n    _newownerinsteadofoldowner = varg0;\n    _oldownertoreplace = varg1;\n    _initiatereplacevote = 1;\n    _ownerbyvotetoreplace[msg.sender] = 1;\n    _votestoreplace = _votestoreplace + 1;\n}\n\nfunction theFunction() public nonPayable { \n    return _theFunction;\n}\n\nfunction isethsent() public nonPayable { \n    return _isethsent;\n}\n\nfunction sendwithhex() public nonPayable { \n    return _sendwithhex;\n}\n\nfunction tokensaddress() public nonPayable { \n    return _tokensaddress;\n}\n\nfunction c() public nonPayable { \n    return _c;\n}\n\nfunction contractaddress() public nonPayable { \n    return _contractaddress;\n}\n\nfunction g() public nonPayable { \n    return _g;\n}\n\nfunction sendto() public nonPayable { \n    return _sendto;\n}\n\nfunction initiatesendtoevote() public nonPayable { \n    return _initiatesendtoevote;\n}\n\nfunction ownerbyid(uint256 varg0) public nonPayable { \n    return address(_ownerbyid[varg0]);\n}\n\nfunction GetBalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction e() public nonPayable { \n    return _e;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x2e93ee3 == function_selector) {\n            ownerbyvotetoreplace(address);\n        } else if (0x3a61bfc == function_selector) {\n            totalowners();\n        } else if (0x9b4c4c7 == function_selector) {\n            ownerbyvotetosend(address);\n        } else if (0xdbe671f == function_selector) {\n            a();\n        } else if (0x13205ed0 == function_selector) {\n            ownerbyaddress(address);\n        } else if (0x26121ff0 == function_selector) {\n            f();\n        } else if (0x2e5d3453 == function_selector) {\n            votestoreplace();\n        } else if (0x39471487 == function_selector) {\n            GetWalletDataTwo();\n        } else if (0x3abc607e == function_selector) {\n            VoteToSend();\n        } else if (0x3aecd0e3 == function_selector) {\n            getTokenBalance(address);\n        } else if (0x44e75e93 == function_selector) {\n            depositype();\n        } else if (0x4df7e3d0 == function_selector) {\n            b();\n        } else if (0x511b3983 == function_selector) {\n            GetFunctionData();\n        } else if (0x57fd8a4a == function_selector) {\n            VoteToReplaceOwner();\n        } else if (0x60372c98 == function_selector) {\n            areownerscreated();\n        } else if (0x6093def3 == function_selector) {\n            initiatereplacevote();\n        } else if (0x62e1d9d3 == function_selector) {\n            oldownertoreplace();\n        } else if (0x68a8a51f == function_selector) {\n            amounttosend();\n        } else if (0x691594f0 == function_selector) {\n            initiateSendTransaction(address,uint256,uint256,uint256,address,uint256);\n        } else if (0x76b82637 == function_selector) {\n            votestosend();\n        } else if (0x89a403e4 == function_selector) {\n            newownerinsteadofoldowner();\n        } else if (0x8a054ac2 == function_selector) {\n            d();\n        } else if (0x8d947097 == function_selector) {\n            CreateOwners(address,address,address,address,address);\n        } else if (0x90890809 == function_selector) {\n            Deposit(address,uint256,uint256);\n        } else if (0x9666fe3c == function_selector) {\n            setCallContractValues(uint256,uint256,uint256,address,uint256,uint256,uint256);\n        } else if (0xa5272afd == function_selector) {\n            GetWalletData();\n        } else if (0xa96d8fec == function_selector) {\n            istokensent();\n        } else if (0xabc9890b == function_selector) {\n            initiateReplaceOwner(address,address);\n        } else if (0xb6868a69 == function_selector) {\n            theFunction();\n        } else if (0xb8c572db == function_selector) {\n            isethsent();\n        } else if (0xb9ece431 == function_selector) {\n            sendwithhex();\n        } else if (0xbe2ea6f1 == function_selector) {\n            tokensaddress();\n        } else if (0xc3da42b8 == function_selector) {\n            c();\n        } else if (0xdb7fbc86 == function_selector) {\n            contractaddress();\n        } else if (0xe2179b8e == function_selector) {\n            g();\n        } else if (0xe749e123 == function_selector) {\n            sendto();\n        } else if (0xf66ffc06 == function_selector) {\n            initiatesendtoevote();\n        } else if (0xf702e4c4 == function_selector) {\n            ownerbyid(uint256);\n        } else if (0xf8f8a912 == function_selector) {\n            GetBalance();\n        } else if (0xffae15ba == function_selector) {\n            e();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 32.858471393585205,
	"usage": {
		"completion_tokens": 594,
		"prompt_tokens": 7858,
		"total_tokens": 8452
	}
}