{
	"address": "0x833ede3050c27d88e5da6922a312e3fdc15be29b",
	"choices": {
		"finish_reason": "stop",
		"index": 0,
		"logprobs": null,
		"message": {
			"content": "Based on the decompiled EVM Bytecode, here's a Solidity version of the smart contract:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _deposited;\n    address private _owner;\n    address payable private _wallet;\n    uint8 private _state;\n\n    event Closed();\n    event RefundsEnabled();\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Refunded(address indexed beneficiary, uint256 refund);\n\n    constructor(address payable wallet) public {\n        _owner = msg.sender;\n        _wallet = wallet;\n        _state = 0;\n    }\n\n    function state() public view returns (uint8) {\n        return _state;\n    }\n\n    function deposited(address account) public view returns (uint256) {\n        return _deposited[account];\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner);\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function deposit(address account) public payable {\n        require(msg.sender == _owner);\n        require(_state == 0);\n        _deposited[account] += msg.value;\n    }\n\n    function refund(address payable account) public {\n        require(msg.sender == _owner);\n        require(_state == 1);\n        uint256 refund = _deposited[account];\n        _deposited[account] = 0;\n        account.transfer(refund);\n        emit Refunded(account, refund);\n    }\n\n    function close() public {\n        require(msg.sender == _owner);\n        require(_state == 0);\n        _state = 2;\n        emit Closed();\n        _wallet.transfer(address(this).balance);\n    }\n\n    function wallet() public view returns (address) {\n        return _wallet;\n    }\n\n    function enableRefunds() public {\n        require(msg.sender == _owner);\n        require(_state == 0);\n        _state = 1;\n        emit RefundsEnabled();\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n}\n```\n\nThe contract includes functions for depositing and refunding ether, transferring ownership, closing the contract, and enabling refunds. State changes and important actions are announced with events.",
			"function_call": null,
			"role": "assistant",
			"tool_calls": null
		}
	},
	"created": 1711531699,
	"id": "chatcmpl-97Jrv3qnjHRFcoei4wFdu3W9MIYDd",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2022.11.16 13:30 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\nuint256 _owner; // STORAGE[0x0] bytes 0 to 19\nuint256 _wallet; // STORAGE[0x2] bytes 0 to 19\nuint256 _state; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nClosed();\nRefundsEnabled();\nOwnershipTransferred(address, address);\nRefunded(address, uint256);\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction deposit(address varg0) public payable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    assert(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n}\n\nfunction refund(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0);\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction close() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    emit Closed();\n    v0 = _wallet.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\nfunction enableRefunds() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (uint32(function_selector >> 224) == 0x43d726d6) {\n            close();\n        } else if (0x521eb273 == uint32(function_selector >> 224)) {\n            wallet();\n        } else if (0x8c52dc41 == uint32(function_selector >> 224)) {\n            enableRefunds();\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            owner();\n        } else if (0xc19d93fb == uint32(function_selector >> 224)) {\n            state();\n        } else if (0xcb13cddb == uint32(function_selector >> 224)) {\n            deposited(address);\n        } else if (0xf2fde38b == uint32(function_selector >> 224)) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == uint32(function_selector >> 224)) {\n            deposit(address);\n        } else if (0xfa89401a == uint32(function_selector >> 224)) {\n            refund(address);\n        }\n    }\n    revert();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.11.16 13:30 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\nuint256 _owner; // STORAGE[0x0] bytes 0 to 19\nuint256 _wallet; // STORAGE[0x2] bytes 0 to 19\nuint256 _state; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nClosed();\nRefundsEnabled();\nOwnershipTransferred(address, address);\nRefunded(address, uint256);\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction deposit(address varg0) public payable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    assert(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n}\n\nfunction refund(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0);\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction close() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    emit Closed();\n    v0 = _wallet.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\nfunction enableRefunds() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (uint32(function_selector >> 224) == 0x43d726d6) {\n            close();\n        } else if (0x521eb273 == uint32(function_selector >> 224)) {\n            wallet();\n        } else if (0x8c52dc41 == uint32(function_selector >> 224)) {\n            enableRefunds();\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            owner();\n        } else if (0xc19d93fb == uint32(function_selector >> 224)) {\n            state();\n        } else if (0xcb13cddb == uint32(function_selector >> 224)) {\n            deposited(address);\n        } else if (0xf2fde38b == uint32(function_selector >> 224)) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == uint32(function_selector >> 224)) {\n            deposit(address);\n        } else if (0xfa89401a == uint32(function_selector >> 224)) {\n            refund(address);\n        }\n    }\n    revert();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.11.16 13:30 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\nuint256 _owner; // STORAGE[0x0] bytes 0 to 19\nuint256 _wallet; // STORAGE[0x2] bytes 0 to 19\nuint256 _state; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nClosed();\nRefundsEnabled();\nOwnershipTransferred(address, address);\nRefunded(address, uint256);\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction deposit(address varg0) public payable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    assert(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n}\n\nfunction refund(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0);\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction close() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    emit Closed();\n    v0 = _wallet.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\nfunction enableRefunds() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (uint32(function_selector >> 224) == 0x43d726d6) {\n            close();\n        } else if (0x521eb273 == uint32(function_selector >> 224)) {\n            wallet();\n        } else if (0x8c52dc41 == uint32(function_selector >> 224)) {\n            enableRefunds();\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            owner();\n        } else if (0xc19d93fb == uint32(function_selector >> 224)) {\n            state();\n        } else if (0xcb13cddb == uint32(function_selector >> 224)) {\n            deposited(address);\n        } else if (0xf2fde38b == uint32(function_selector >> 224)) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == uint32(function_selector >> 224)) {\n            deposit(address);\n        } else if (0xfa89401a == uint32(function_selector >> 224)) {\n            refund(address);\n        }\n    }\n    revert();\n}\n.",
	"status": "1",
	"time_cost": 151.99584126472473,
	"usage": {
		"completion_tokens": 489,
		"prompt_tokens": 906,
		"total_tokens": 1395
	}
}