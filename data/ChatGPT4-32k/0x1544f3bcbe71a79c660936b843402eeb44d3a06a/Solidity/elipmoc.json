{
	"address": "0x1544f3bcbe71a79c660936b843402eeb44d3a06a",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the decompiled code, the equivalent Solidity code would be something like this:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    uint256[] private _name;\n    uint256[] private _symbol;\n    uint256 private _totalSupply;\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    uint256 private _airAmount;\n    uint256 private _airBegintime;\n    uint256 private _airEndtime;\n    mapping (address => uint256) private _airCountOf;\n    uint256 private _icoRatio;\n    uint256 private _icoBegintime;\n    uint256 private _icoEndtime;\n    uint8 private _decimals;\n    address private _airSender;\n    address private _icoSender;\n    address private _icoHolder;\n    uint32 private _airLimitCount;\n\n    event Airdrop(address indexed _airSender, uint32 _airLimitCount, uint256 _airAmount);\n    event ICO(address indexed _icoSender, uint256 value, uint256 _icoRatio);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Withdraw(address indexed _icoHolder, address indexed _icoSender, uint256 balance);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() public view returns (uint256[]) {\n        return _name;\n    }\n\n    function symbol() public view returns (uint256[]) {\n        return _symbol;\n    }\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n    \n    function balanceOf(address owner) public view returns (uint256 balance) {\n        return _balanceOf[owner];\n    }\n    \n    function allowance(address owner, address spender) public view returns (uint256 remaining) {\n        return _allowance[owner][spender];\n    }\n    \n    function approve(address spender, uint256 value) public returns (bool success) {\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n    \n    function transfer(address to, uint256 value) public returns (bool success) {\n        require(_balanceOf[msg.sender] >= value);\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n        require(_balanceOf[from] >= value);\n        require(_allowance[from][msg.sender] >= value);\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        _allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n    \n    //Insert additional functions here as per the decompiled code\n}\n```\n\nPlease note that this is a basic implementation of the ERC-20 token standard based on the decompiled code. The final version would depend on the specifics of your use case and additional functions in the decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701467563,
	"id": "chatcmpl-8R5j9YiipJPEORiUecU757RMTWQY4",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.13 22:57 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x5]\nuint256 _airAmount; // STORAGE[0x6]\nuint256 _airBegintime; // STORAGE[0x7]\nuint256 _airEndtime; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _airCountOf; // STORAGE[0xa]\nuint256 _icoRatio; // STORAGE[0xb]\nuint256 _icoBegintime; // STORAGE[0xc]\nuint256 _icoEndtime; // STORAGE[0xd]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint160 _airSender; // STORAGE[0x9] bytes 0 to 19\nuint160 _icoSender; // STORAGE[0xe] bytes 0 to 19\naddress _icoHolder; // STORAGE[0xf] bytes 0 to 19\nuint32 _airLimitCount; // STORAGE[0x9] bytes 20 to 23\n\n// Events\nAirdrop(address, uint32, uint256);\nICO(address, uint256, uint256);\nApproval(address, address, uint256);\nWithdraw(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    0x42c();\n}\n\nfunction ico() public payable { \n    v0 = v1 = block.timestamp >= _icoBegintime;\n    if (v1) {\n        v0 = v2 = block.timestamp <= _icoEndtime;\n    }\n    require(v0);\n    v3 = v4 = !(_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000);\n    if (_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000) {\n        v3 = v5 = _balanceOf[_icoSender] < _icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000;\n    }\n    require(!v3);\n    0x96d(_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000, msg.sender, _icoSender);\n    emit ICO(msg.sender, msg.value, _icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction airAmount() public nonPayable { \n    return _airAmount;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x96d(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction airdrop() public payable { \n    0x42c();\n}\n\nfunction withdraw() public nonPayable { \n    v0 = _icoHolder.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n    emit Withdraw(msg.sender, _icoHolder, (address(this)).balance);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction airSender() public nonPayable { \n    return _airSender;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction icoHolder() public nonPayable { \n    return _icoHolder;\n}\n\nfunction airCountOf(address varg0) public nonPayable { \n    return uint32(_airCountOf[varg0]);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x96d(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction airEndtime() public nonPayable { \n    return _airEndtime;\n}\n\nfunction icoRatio() public nonPayable { \n    return _icoRatio;\n}\n\nfunction icoEndtime() public nonPayable { \n    return _icoEndtime;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction icoSender() public nonPayable { \n    return _icoSender;\n}\n\nfunction icoBegintime() public nonPayable { \n    return _icoBegintime;\n}\n\nfunction airBegintime() public nonPayable { \n    return _airBegintime;\n}\n\nfunction airLimitCount() public nonPayable { \n    return _airLimitCount;\n}\n\nfunction 0x42c() private { \n    v0 = v1 = block.timestamp >= _airBegintime;\n    if (v1) {\n        v0 = v2 = block.timestamp <= _airEndtime;\n    }\n    require(v0);\n    require(!msg.value);\n    v3 = v4 = _airLimitCount > 0;\n    if (v4) {\n        v3 = v5 = uint32(_airCountOf[address(msg.sender)]) >= _airLimitCount;\n    }\n    require(!v3);\n    0x96d(_airAmount, msg.sender, _airSender);\n    _airCountOf[msg.sender] = uint32(uint32(_airCountOf[msg.sender]) + 1) | _airCountOf[msg.sender] & ~0xffffffff;\n    emit Airdrop(msg.sender, uint32(uint32(uint32(_airCountOf[msg.sender]) + 1) | _airCountOf[msg.sender] & ~0xffffffff), _airAmount);\n    return ;\n}\n\nfunction 0x96d(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    v4 = varg0 + _balanceOf[v2];\n    _balanceOf[v2] = v4;\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v3] + v4);\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x7cc6051 == function_selector) {\n            airAmount();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3884d635 == function_selector) {\n            airdrop();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x5d452201 == function_selector) {\n            ico();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7d720296 == function_selector) {\n            airSender();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa2ebb20b == function_selector) {\n            icoHolder();\n        } else if (0xa3fe1ade == function_selector) {\n            airCountOf(address);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb0f85a10 == function_selector) {\n            airEndtime();\n        } else if (0xb3b8c620 == function_selector) {\n            icoRatio();\n        } else if (0xd211fe86 == function_selector) {\n            icoEndtime();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xde28fc1d == function_selector) {\n            icoSender();\n        } else if (0xe6136d84 == function_selector) {\n            icoBegintime();\n        } else if (0xe67ad254 == function_selector) {\n            airBegintime();\n        } else if (0xe779a8cf == function_selector) {\n            airLimitCount();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 22:57 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x5]\nuint256 _airAmount; // STORAGE[0x6]\nuint256 _airBegintime; // STORAGE[0x7]\nuint256 _airEndtime; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _airCountOf; // STORAGE[0xa]\nuint256 _icoRatio; // STORAGE[0xb]\nuint256 _icoBegintime; // STORAGE[0xc]\nuint256 _icoEndtime; // STORAGE[0xd]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint160 _airSender; // STORAGE[0x9] bytes 0 to 19\nuint160 _icoSender; // STORAGE[0xe] bytes 0 to 19\naddress _icoHolder; // STORAGE[0xf] bytes 0 to 19\nuint32 _airLimitCount; // STORAGE[0x9] bytes 20 to 23\n\n// Events\nAirdrop(address, uint32, uint256);\nICO(address, uint256, uint256);\nApproval(address, address, uint256);\nWithdraw(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    0x42c();\n}\n\nfunction ico() public payable { \n    v0 = v1 = block.timestamp >= _icoBegintime;\n    if (v1) {\n        v0 = v2 = block.timestamp <= _icoEndtime;\n    }\n    require(v0);\n    v3 = v4 = !(_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000);\n    if (_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000) {\n        v3 = v5 = _balanceOf[_icoSender] < _icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000;\n    }\n    require(!v3);\n    0x96d(_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000, msg.sender, _icoSender);\n    emit ICO(msg.sender, msg.value, _icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction airAmount() public nonPayable { \n    return _airAmount;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x96d(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction airdrop() public payable { \n    0x42c();\n}\n\nfunction withdraw() public nonPayable { \n    v0 = _icoHolder.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n    emit Withdraw(msg.sender, _icoHolder, (address(this)).balance);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction airSender() public nonPayable { \n    return _airSender;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction icoHolder() public nonPayable { \n    return _icoHolder;\n}\n\nfunction airCountOf(address varg0) public nonPayable { \n    return uint32(_airCountOf[varg0]);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x96d(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction airEndtime() public nonPayable { \n    return _airEndtime;\n}\n\nfunction icoRatio() public nonPayable { \n    return _icoRatio;\n}\n\nfunction icoEndtime() public nonPayable { \n    return _icoEndtime;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction icoSender() public nonPayable { \n    return _icoSender;\n}\n\nfunction icoBegintime() public nonPayable { \n    return _icoBegintime;\n}\n\nfunction airBegintime() public nonPayable { \n    return _airBegintime;\n}\n\nfunction airLimitCount() public nonPayable { \n    return _airLimitCount;\n}\n\nfunction 0x42c() private { \n    v0 = v1 = block.timestamp >= _airBegintime;\n    if (v1) {\n        v0 = v2 = block.timestamp <= _airEndtime;\n    }\n    require(v0);\n    require(!msg.value);\n    v3 = v4 = _airLimitCount > 0;\n    if (v4) {\n        v3 = v5 = uint32(_airCountOf[address(msg.sender)]) >= _airLimitCount;\n    }\n    require(!v3);\n    0x96d(_airAmount, msg.sender, _airSender);\n    _airCountOf[msg.sender] = uint32(uint32(_airCountOf[msg.sender]) + 1) | _airCountOf[msg.sender] & ~0xffffffff;\n    emit Airdrop(msg.sender, uint32(uint32(uint32(_airCountOf[msg.sender]) + 1) | _airCountOf[msg.sender] & ~0xffffffff), _airAmount);\n    return ;\n}\n\nfunction 0x96d(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    v4 = varg0 + _balanceOf[v2];\n    _balanceOf[v2] = v4;\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v3] + v4);\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x7cc6051 == function_selector) {\n            airAmount();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3884d635 == function_selector) {\n            airdrop();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x5d452201 == function_selector) {\n            ico();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7d720296 == function_selector) {\n            airSender();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa2ebb20b == function_selector) {\n            icoHolder();\n        } else if (0xa3fe1ade == function_selector) {\n            airCountOf(address);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb0f85a10 == function_selector) {\n            airEndtime();\n        } else if (0xb3b8c620 == function_selector) {\n            icoRatio();\n        } else if (0xd211fe86 == function_selector) {\n            icoEndtime();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xde28fc1d == function_selector) {\n            icoSender();\n        } else if (0xe6136d84 == function_selector) {\n            icoBegintime();\n        } else if (0xe67ad254 == function_selector) {\n            airBegintime();\n        } else if (0xe779a8cf == function_selector) {\n            airLimitCount();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 22:57 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x5]\nuint256 _airAmount; // STORAGE[0x6]\nuint256 _airBegintime; // STORAGE[0x7]\nuint256 _airEndtime; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _airCountOf; // STORAGE[0xa]\nuint256 _icoRatio; // STORAGE[0xb]\nuint256 _icoBegintime; // STORAGE[0xc]\nuint256 _icoEndtime; // STORAGE[0xd]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint160 _airSender; // STORAGE[0x9] bytes 0 to 19\nuint160 _icoSender; // STORAGE[0xe] bytes 0 to 19\naddress _icoHolder; // STORAGE[0xf] bytes 0 to 19\nuint32 _airLimitCount; // STORAGE[0x9] bytes 20 to 23\n\n// Events\nAirdrop(address, uint32, uint256);\nICO(address, uint256, uint256);\nApproval(address, address, uint256);\nWithdraw(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    0x42c();\n}\n\nfunction ico() public payable { \n    v0 = v1 = block.timestamp >= _icoBegintime;\n    if (v1) {\n        v0 = v2 = block.timestamp <= _icoEndtime;\n    }\n    require(v0);\n    v3 = v4 = !(_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000);\n    if (_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000) {\n        v3 = v5 = _balanceOf[_icoSender] < _icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000;\n    }\n    require(!v3);\n    0x96d(_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000, msg.sender, _icoSender);\n    emit ICO(msg.sender, msg.value, _icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction airAmount() public nonPayable { \n    return _airAmount;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x96d(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction airdrop() public payable { \n    0x42c();\n}\n\nfunction withdraw() public nonPayable { \n    v0 = _icoHolder.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n    emit Withdraw(msg.sender, _icoHolder, (address(this)).balance);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction airSender() public nonPayable { \n    return _airSender;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction icoHolder() public nonPayable { \n    return _icoHolder;\n}\n\nfunction airCountOf(address varg0) public nonPayable { \n    return uint32(_airCountOf[varg0]);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x96d(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction airEndtime() public nonPayable { \n    return _airEndtime;\n}\n\nfunction icoRatio() public nonPayable { \n    return _icoRatio;\n}\n\nfunction icoEndtime() public nonPayable { \n    return _icoEndtime;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction icoSender() public nonPayable { \n    return _icoSender;\n}\n\nfunction icoBegintime() public nonPayable { \n    return _icoBegintime;\n}\n\nfunction airBegintime() public nonPayable { \n    return _airBegintime;\n}\n\nfunction airLimitCount() public nonPayable { \n    return _airLimitCount;\n}\n\nfunction 0x42c() private { \n    v0 = v1 = block.timestamp >= _airBegintime;\n    if (v1) {\n        v0 = v2 = block.timestamp <= _airEndtime;\n    }\n    require(v0);\n    require(!msg.value);\n    v3 = v4 = _airLimitCount > 0;\n    if (v4) {\n        v3 = v5 = uint32(_airCountOf[address(msg.sender)]) >= _airLimitCount;\n    }\n    require(!v3);\n    0x96d(_airAmount, msg.sender, _airSender);\n    _airCountOf[msg.sender] = uint32(uint32(_airCountOf[msg.sender]) + 1) | _airCountOf[msg.sender] & ~0xffffffff;\n    emit Airdrop(msg.sender, uint32(uint32(uint32(_airCountOf[msg.sender]) + 1) | _airCountOf[msg.sender] & ~0xffffffff), _airAmount);\n    return ;\n}\n\nfunction 0x96d(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    v4 = varg0 + _balanceOf[v2];\n    _balanceOf[v2] = v4;\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v3] + v4);\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x7cc6051 == function_selector) {\n            airAmount();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3884d635 == function_selector) {\n            airdrop();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x5d452201 == function_selector) {\n            ico();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7d720296 == function_selector) {\n            airSender();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa2ebb20b == function_selector) {\n            icoHolder();\n        } else if (0xa3fe1ade == function_selector) {\n            airCountOf(address);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb0f85a10 == function_selector) {\n            airEndtime();\n        } else if (0xb3b8c620 == function_selector) {\n            icoRatio();\n        } else if (0xd211fe86 == function_selector) {\n            icoEndtime();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xde28fc1d == function_selector) {\n            icoSender();\n        } else if (0xe6136d84 == function_selector) {\n            icoBegintime();\n        } else if (0xe67ad254 == function_selector) {\n            airBegintime();\n        } else if (0xe779a8cf == function_selector) {\n            airLimitCount();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 28.541772603988647,
	"usage": {
		"completion_tokens": 667,
		"prompt_tokens": 2711,
		"total_tokens": 3378
	}
}