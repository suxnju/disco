{
	"address": "0xe0b7927c4af23765cb51314a0e0521a9645f0e2a",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity code for the provided decompiled EVM bytecode is as follows:\n\n```solidity\npragma solidity >=0.4.22 <0.7.0;\n\ncontract MyContract {\n    address private _owner;\n    address private _dao;\n    uint256 private _totalSupply;\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    mapping (address => bool) private _isSeller;\n    uint160 private _config;\n    address private _badgeLedger;\n    uint8 private _locked;\n\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n\n    function approve(address spender, uint256 tokens) public returns (bool success) {\n        _allowance[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    function setOwner(address newOwner) public {\n        require(msg.sender == _dao, \"Only DAO can set owner\");\n        _owner = newOwner;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\n        require(_balanceOf[from] >= tokens, \"Insufficient balance\");\n        require(_allowance[from][msg.sender] >= tokens, \"Insufficient allowance\");\n        _balanceOf[from] -= tokens;\n        _balanceOf[to] += tokens;\n        _allowance[from][msg.sender] -= tokens;\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    function registerDao(address dao) public {\n        require(msg.sender == _owner, \"Only owner can register DAO\");\n        _dao = dao;\n        _locked = 1;\n    }\n\n    function registerSeller(address seller) public {\n        require(msg.sender == _dao, \"Only DAO can register seller\");\n        _isSeller[seller] = true;\n    }\n\n    function mint(address to, uint256 tokens) public {\n        require(_isSeller[msg.sender], \"Only sellers can mint tokens\");\n        _totalSupply += tokens;\n        _balanceOf[to] += tokens;\n    }\n\n    function dao() public view returns (address) {\n        return _dao;\n    }\n\n    function badgeLedger() public view returns (address) {\n        return _badgeLedger;\n    }\n\n    function setDao(address dao) public {\n        require(msg.sender == _dao, \"Only DAO can set DAO\");\n        _dao = dao;\n    }\n\n    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\n        return _balanceOf[tokenOwner];\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function transfer(address to, uint256 tokens) public returns (bool success) {\n        require(_balanceOf[msg.sender] >= tokens, \"Insufficient balance\");\n        _balanceOf[msg.sender] -= tokens;\n        _balanceOf[to] += tokens;\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    function unregisterSeller(address seller) public {\n        require(msg.sender == _dao, \"Only DAO can unregister seller\");\n        _isSeller[seller] = false;\n    }\n\n    function locked() public view returns (uint8) {\n        return _locked;\n    }\n\n    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {\n        return _allowance[tokenOwner][spender];\n    }\n\n    function isSeller(address seller) public view returns (bool) {\n        return _isSeller[seller];\n    }\n}\n```\nPlease note that this is a high-level interpretation of the code. The actual implementation may vary based on the specific business logic and requirements of your application. Additionally, the `_badgeLedger` variable and its usage would need further code as it seems to refer to an external contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1698040478,
	"id": "chatcmpl-8CiBa7Qk9rXuYtZchTOIV38WRnE0T",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.24 15:57 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _owner; // STORAGE[0x0]\nuint256 _dao; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _isSeller; // STORAGE[0x7]\nuint160 _config; // STORAGE[0x1] bytes 0 to 19\naddress _badgeLedger; // STORAGE[0x3] bytes 0 to 19\nuint8 _locked; // STORAGE[0x1] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction setOwner(address varg0) public payable { \n    assert(msg.sender == address(_dao));\n    v0, v1 = _badgeLedger.setOwner(varg0).gas(msg.gas - 25050);\n    assert(v0);\n    if (!v1) {\n        v2 = v3 = 0;\n    } else {\n        _owner = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _owner;\n        v2 = v4 = 1;\n    }\n    return v2;\n}\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    v0 = v1 = _balanceOf[varg0] >= varg2;\n    if (_balanceOf[varg0] >= varg2) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = v3 = varg2 > 0;\n    }\n    if (!v0) {\n        v4 = v5 = 0;\n    } else {\n        v6 = _SafeAdd(varg2, _balanceOf[varg1]);\n        _balanceOf[varg1] = v6;\n        v7 = _SafeSub(varg2, _balanceOf[varg0]);\n        _balanceOf[varg0] = v7;\n        v8 = _SafeSub(varg2, _allowance[msg.sender]);\n        _allowance[msg.sender] = v8;\n        emit Transfer(varg0, varg1, varg2);\n        v4 = v9 = 1;\n        goto 0x5ad;\n    }\n    return v4;\n}\n\nfunction registerDao(address varg0) public payable { \n    assert(msg.sender == address(_owner));\n    if (_locked != 1) {\n        _dao = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _dao;\n        v0 = v1 = 1;\n        _locked = 1;\n        goto 0x34a0x23d;\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction subtractSafely(uint256 varg0, uint256 varg1) public payable { \n    assert(varg1 <= varg0);\n    return varg0 - varg1;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\nfunction registerSeller(address varg0) public payable { \n    assert(msg.sender == address(_dao));\n    _isSeller[varg0] = 0x1 | ~0xff & _isSeller[varg0];\n    return 1;\n}\n\nfunction mint(address varg0, uint256 varg1) public payable { \n    assert(0xff & _isSeller[msg.sender]);\n    v0 = _SafeAdd(_totalSupply, varg1);\n    _totalSupply = v0;\n    v1 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v1;\n    return 1;\n}\n\nfunction dao() public payable { \n    return address(_dao);\n}\n\nfunction badgeLedger() public payable { \n    return _badgeLedger;\n}\n\nfunction safeToAdd(uint256 varg0, uint256 varg1) public payable { \n    return varg1 + varg0 >= varg0;\n}\n\nfunction setDao(address varg0) public payable { \n    assert(msg.sender == address(_dao));\n    _dao = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _dao;\n    return 1;\n}\n\nfunction balanceOf(address varg0) public payable { \n    return _balanceOf[varg0];\n}\n\nfunction config() public payable { \n    return _config;\n}\n\nfunction owner() public payable { \n    return address(_owner);\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (_balanceOf[msg.sender] >= varg1) {\n        v0 = v2 = varg1 > 0;\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        v5 = _SafeSub(varg1, _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = v5;\n        v6 = _SafeAdd(varg1, _balanceOf[varg0]);\n        _balanceOf[varg0] = v6;\n        emit Transfer(msg.sender, varg0, varg1);\n        v3 = v7 = 1;\n        goto 0x514;\n    }\n    return v3;\n}\n\nfunction unregisterSeller(address varg0) public payable { \n    assert(msg.sender == address(_dao));\n    _isSeller[varg0] = ~0xff & _isSeller[varg0];\n    return 1;\n}\n\nfunction addSafely(uint256 varg0, uint256 varg1) public payable { \n    assert(varg1 + varg0 >= varg0);\n    return varg1 + varg0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    assert(varg0 + varg1 >= varg1);\n    return varg0 + varg1;\n}\n\nfunction locked() public payable { \n    return _locked;\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    return _allowance[varg1];\n}\n\nfunction mintBadge(address varg0, uint256 varg1) public payable { \n    assert(0xff & _isSeller[msg.sender]);\n    v0, v1 = _badgeLedger.mint(varg0, varg1).gas(msg.gas - 25050);\n    assert(v0);\n    if (v1) {\n        v2 = v3 = 1;\n        goto 0x1820x44f;\n    } else {\n        v2 = v4 = 0;\n    }\n    return v2;\n}\n\nfunction safeToSubtract(uint256 varg0, uint256 varg1) public payable { \n    return varg1 <= varg0;\n}\n\nfunction isSeller(address varg0) public payable { \n    return 0xff & _isSeller[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        v0 = function_selector >> 224;\n        if (v0 == 0x95ea7b3) {\n            approve(address,uint256);\n        } else if (0x13af4035 == v0) {\n            setOwner(address);\n        } else if (0x18160ddd == v0) {\n            totalSupply();\n        } else if (0x23b872dd == v0) {\n            transferFrom(address,address,uint256);\n        } else if (0x2b297f9e == v0) {\n            registerDao(address);\n        } else if (0x3416f9d4 == v0) {\n            subtractSafely(uint256,uint256);\n        } else if (0x3f2965f0 == v0) {\n            registerSeller(address);\n        } else if (0x40c10f19 == v0) {\n            mint(address,uint256);\n        } else if (0x4162169f == v0) {\n            dao();\n        } else if (0x4230bb10 == v0) {\n            badgeLedger();\n        } else if (0x4e30a66c == v0) {\n            safeToAdd(uint256,uint256);\n        } else if (0x6637b882 == v0) {\n            setDao(address);\n        } else if (0x70a08231 == v0) {\n            balanceOf(address);\n        } else if (0x79502c55 == v0) {\n            config();\n        } else if (0x8da5cb5b == v0) {\n            owner();\n        } else if (0xa9059cbb == v0) {\n            transfer(address,uint256);\n        } else if (0xac900c2d == v0) {\n            unregisterSeller(address);\n        } else if (0xc74c251f == v0) {\n            addSafely(uint256,uint256);\n        } else if (0xcf309012 == v0) {\n            locked();\n        } else if (0xdd62ed3e == v0) {\n            allowance(address,address);\n        } else if (0xe42bff66 == v0) {\n            mintBadge(address,uint256);\n        } else if (0xe74b9d11 == v0) {\n            safeToSubtract(uint256,uint256);\n        } else if (0xee95feaf == v0) {\n            isSeller(address);\n        }\n    }\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 15:57 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _owner; // STORAGE[0x0]\nuint256 _dao; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _isSeller; // STORAGE[0x7]\nuint160 _config; // STORAGE[0x1] bytes 0 to 19\naddress _badgeLedger; // STORAGE[0x3] bytes 0 to 19\nuint8 _locked; // STORAGE[0x1] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction setOwner(address varg0) public payable { \n    assert(msg.sender == address(_dao));\n    v0, v1 = _badgeLedger.setOwner(varg0).gas(msg.gas - 25050);\n    assert(v0);\n    if (!v1) {\n        v2 = v3 = 0;\n    } else {\n        _owner = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _owner;\n        v2 = v4 = 1;\n    }\n    return v2;\n}\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    v0 = v1 = _balanceOf[varg0] >= varg2;\n    if (_balanceOf[varg0] >= varg2) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = v3 = varg2 > 0;\n    }\n    if (!v0) {\n        v4 = v5 = 0;\n    } else {\n        v6 = _SafeAdd(varg2, _balanceOf[varg1]);\n        _balanceOf[varg1] = v6;\n        v7 = _SafeSub(varg2, _balanceOf[varg0]);\n        _balanceOf[varg0] = v7;\n        v8 = _SafeSub(varg2, _allowance[msg.sender]);\n        _allowance[msg.sender] = v8;\n        emit Transfer(varg0, varg1, varg2);\n        v4 = v9 = 1;\n        goto 0x5ad;\n    }\n    return v4;\n}\n\nfunction registerDao(address varg0) public payable { \n    assert(msg.sender == address(_owner));\n    if (_locked != 1) {\n        _dao = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _dao;\n        v0 = v1 = 1;\n        _locked = 1;\n        goto 0x34a0x23d;\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction subtractSafely(uint256 varg0, uint256 varg1) public payable { \n    assert(varg1 <= varg0);\n    return varg0 - varg1;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\nfunction registerSeller(address varg0) public payable { \n    assert(msg.sender == address(_dao));\n    _isSeller[varg0] = 0x1 | ~0xff & _isSeller[varg0];\n    return 1;\n}\n\nfunction mint(address varg0, uint256 varg1) public payable { \n    assert(0xff & _isSeller[msg.sender]);\n    v0 = _SafeAdd(_totalSupply, varg1);\n    _totalSupply = v0;\n    v1 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v1;\n    return 1;\n}\n\nfunction dao() public payable { \n    return address(_dao);\n}\n\nfunction badgeLedger() public payable { \n    return _badgeLedger;\n}\n\nfunction safeToAdd(uint256 varg0, uint256 varg1) public payable { \n    return varg1 + varg0 >= varg0;\n}\n\nfunction setDao(address varg0) public payable { \n    assert(msg.sender == address(_dao));\n    _dao = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _dao;\n    return 1;\n}\n\nfunction balanceOf(address varg0) public payable { \n    return _balanceOf[varg0];\n}\n\nfunction config() public payable { \n    return _config;\n}\n\nfunction owner() public payable { \n    return address(_owner);\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (_balanceOf[msg.sender] >= varg1) {\n        v0 = v2 = varg1 > 0;\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        v5 = _SafeSub(varg1, _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = v5;\n        v6 = _SafeAdd(varg1, _balanceOf[varg0]);\n        _balanceOf[varg0] = v6;\n        emit Transfer(msg.sender, varg0, varg1);\n        v3 = v7 = 1;\n        goto 0x514;\n    }\n    return v3;\n}\n\nfunction unregisterSeller(address varg0) public payable { \n    assert(msg.sender == address(_dao));\n    _isSeller[varg0] = ~0xff & _isSeller[varg0];\n    return 1;\n}\n\nfunction addSafely(uint256 varg0, uint256 varg1) public payable { \n    assert(varg1 + varg0 >= varg0);\n    return varg1 + varg0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    assert(varg0 + varg1 >= varg1);\n    return varg0 + varg1;\n}\n\nfunction locked() public payable { \n    return _locked;\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    return _allowance[varg1];\n}\n\nfunction mintBadge(address varg0, uint256 varg1) public payable { \n    assert(0xff & _isSeller[msg.sender]);\n    v0, v1 = _badgeLedger.mint(varg0, varg1).gas(msg.gas - 25050);\n    assert(v0);\n    if (v1) {\n        v2 = v3 = 1;\n        goto 0x1820x44f;\n    } else {\n        v2 = v4 = 0;\n    }\n    return v2;\n}\n\nfunction safeToSubtract(uint256 varg0, uint256 varg1) public payable { \n    return varg1 <= varg0;\n}\n\nfunction isSeller(address varg0) public payable { \n    return 0xff & _isSeller[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        v0 = function_selector >> 224;\n        if (v0 == 0x95ea7b3) {\n            approve(address,uint256);\n        } else if (0x13af4035 == v0) {\n            setOwner(address);\n        } else if (0x18160ddd == v0) {\n            totalSupply();\n        } else if (0x23b872dd == v0) {\n            transferFrom(address,address,uint256);\n        } else if (0x2b297f9e == v0) {\n            registerDao(address);\n        } else if (0x3416f9d4 == v0) {\n            subtractSafely(uint256,uint256);\n        } else if (0x3f2965f0 == v0) {\n            registerSeller(address);\n        } else if (0x40c10f19 == v0) {\n            mint(address,uint256);\n        } else if (0x4162169f == v0) {\n            dao();\n        } else if (0x4230bb10 == v0) {\n            badgeLedger();\n        } else if (0x4e30a66c == v0) {\n            safeToAdd(uint256,uint256);\n        } else if (0x6637b882 == v0) {\n            setDao(address);\n        } else if (0x70a08231 == v0) {\n            balanceOf(address);\n        } else if (0x79502c55 == v0) {\n            config();\n        } else if (0x8da5cb5b == v0) {\n            owner();\n        } else if (0xa9059cbb == v0) {\n            transfer(address,uint256);\n        } else if (0xac900c2d == v0) {\n            unregisterSeller(address);\n        } else if (0xc74c251f == v0) {\n            addSafely(uint256,uint256);\n        } else if (0xcf309012 == v0) {\n            locked();\n        } else if (0xdd62ed3e == v0) {\n            allowance(address,address);\n        } else if (0xe42bff66 == v0) {\n            mintBadge(address,uint256);\n        } else if (0xe74b9d11 == v0) {\n            safeToSubtract(uint256,uint256);\n        } else if (0xee95feaf == v0) {\n            isSeller(address);\n        }\n    }\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 15:57 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _owner; // STORAGE[0x0]\nuint256 _dao; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _isSeller; // STORAGE[0x7]\nuint160 _config; // STORAGE[0x1] bytes 0 to 19\naddress _badgeLedger; // STORAGE[0x3] bytes 0 to 19\nuint8 _locked; // STORAGE[0x1] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction setOwner(address varg0) public payable { \n    assert(msg.sender == address(_dao));\n    v0, v1 = _badgeLedger.setOwner(varg0).gas(msg.gas - 25050);\n    assert(v0);\n    if (!v1) {\n        v2 = v3 = 0;\n    } else {\n        _owner = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _owner;\n        v2 = v4 = 1;\n    }\n    return v2;\n}\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    v0 = v1 = _balanceOf[varg0] >= varg2;\n    if (_balanceOf[varg0] >= varg2) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = v3 = varg2 > 0;\n    }\n    if (!v0) {\n        v4 = v5 = 0;\n    } else {\n        v6 = _SafeAdd(varg2, _balanceOf[varg1]);\n        _balanceOf[varg1] = v6;\n        v7 = _SafeSub(varg2, _balanceOf[varg0]);\n        _balanceOf[varg0] = v7;\n        v8 = _SafeSub(varg2, _allowance[msg.sender]);\n        _allowance[msg.sender] = v8;\n        emit Transfer(varg0, varg1, varg2);\n        v4 = v9 = 1;\n        goto 0x5ad;\n    }\n    return v4;\n}\n\nfunction registerDao(address varg0) public payable { \n    assert(msg.sender == address(_owner));\n    if (_locked != 1) {\n        _dao = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _dao;\n        v0 = v1 = 1;\n        _locked = 1;\n        goto 0x34a0x23d;\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction subtractSafely(uint256 varg0, uint256 varg1) public payable { \n    assert(varg1 <= varg0);\n    return varg0 - varg1;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\nfunction registerSeller(address varg0) public payable { \n    assert(msg.sender == address(_dao));\n    _isSeller[varg0] = 0x1 | ~0xff & _isSeller[varg0];\n    return 1;\n}\n\nfunction mint(address varg0, uint256 varg1) public payable { \n    assert(0xff & _isSeller[msg.sender]);\n    v0 = _SafeAdd(_totalSupply, varg1);\n    _totalSupply = v0;\n    v1 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v1;\n    return 1;\n}\n\nfunction dao() public payable { \n    return address(_dao);\n}\n\nfunction badgeLedger() public payable { \n    return _badgeLedger;\n}\n\nfunction safeToAdd(uint256 varg0, uint256 varg1) public payable { \n    return varg1 + varg0 >= varg0;\n}\n\nfunction setDao(address varg0) public payable { \n    assert(msg.sender == address(_dao));\n    _dao = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _dao;\n    return 1;\n}\n\nfunction balanceOf(address varg0) public payable { \n    return _balanceOf[varg0];\n}\n\nfunction config() public payable { \n    return _config;\n}\n\nfunction owner() public payable { \n    return address(_owner);\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (_balanceOf[msg.sender] >= varg1) {\n        v0 = v2 = varg1 > 0;\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        v5 = _SafeSub(varg1, _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = v5;\n        v6 = _SafeAdd(varg1, _balanceOf[varg0]);\n        _balanceOf[varg0] = v6;\n        emit Transfer(msg.sender, varg0, varg1);\n        v3 = v7 = 1;\n        goto 0x514;\n    }\n    return v3;\n}\n\nfunction unregisterSeller(address varg0) public payable { \n    assert(msg.sender == address(_dao));\n    _isSeller[varg0] = ~0xff & _isSeller[varg0];\n    return 1;\n}\n\nfunction addSafely(uint256 varg0, uint256 varg1) public payable { \n    assert(varg1 + varg0 >= varg0);\n    return varg1 + varg0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    assert(varg0 + varg1 >= varg1);\n    return varg0 + varg1;\n}\n\nfunction locked() public payable { \n    return _locked;\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    return _allowance[varg1];\n}\n\nfunction mintBadge(address varg0, uint256 varg1) public payable { \n    assert(0xff & _isSeller[msg.sender]);\n    v0, v1 = _badgeLedger.mint(varg0, varg1).gas(msg.gas - 25050);\n    assert(v0);\n    if (v1) {\n        v2 = v3 = 1;\n        goto 0x1820x44f;\n    } else {\n        v2 = v4 = 0;\n    }\n    return v2;\n}\n\nfunction safeToSubtract(uint256 varg0, uint256 varg1) public payable { \n    return varg1 <= varg0;\n}\n\nfunction isSeller(address varg0) public payable { \n    return 0xff & _isSeller[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        v0 = function_selector >> 224;\n        if (v0 == 0x95ea7b3) {\n            approve(address,uint256);\n        } else if (0x13af4035 == v0) {\n            setOwner(address);\n        } else if (0x18160ddd == v0) {\n            totalSupply();\n        } else if (0x23b872dd == v0) {\n            transferFrom(address,address,uint256);\n        } else if (0x2b297f9e == v0) {\n            registerDao(address);\n        } else if (0x3416f9d4 == v0) {\n            subtractSafely(uint256,uint256);\n        } else if (0x3f2965f0 == v0) {\n            registerSeller(address);\n        } else if (0x40c10f19 == v0) {\n            mint(address,uint256);\n        } else if (0x4162169f == v0) {\n            dao();\n        } else if (0x4230bb10 == v0) {\n            badgeLedger();\n        } else if (0x4e30a66c == v0) {\n            safeToAdd(uint256,uint256);\n        } else if (0x6637b882 == v0) {\n            setDao(address);\n        } else if (0x70a08231 == v0) {\n            balanceOf(address);\n        } else if (0x79502c55 == v0) {\n            config();\n        } else if (0x8da5cb5b == v0) {\n            owner();\n        } else if (0xa9059cbb == v0) {\n            transfer(address,uint256);\n        } else if (0xac900c2d == v0) {\n            unregisterSeller(address);\n        } else if (0xc74c251f == v0) {\n            addSafely(uint256,uint256);\n        } else if (0xcf309012 == v0) {\n            locked();\n        } else if (0xdd62ed3e == v0) {\n            allowance(address,address);\n        } else if (0xe42bff66 == v0) {\n            mintBadge(address,uint256);\n        } else if (0xe74b9d11 == v0) {\n            safeToSubtract(uint256,uint256);\n        } else if (0xee95feaf == v0) {\n            isSeller(address);\n        }\n    }\n}\n.",
	"status": "1",
	"time_cost": 38.833253622055054,
	"usage": {
		"completion_tokens": 825,
		"prompt_tokens": 2282,
		"total_tokens": 3107
	}
}