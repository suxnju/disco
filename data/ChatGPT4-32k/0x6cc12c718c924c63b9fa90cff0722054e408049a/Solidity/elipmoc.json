{
	"address": "0x6cc12c718c924c63b9fa90cff0722054e408049a",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the equivalent Solidity code for the given decompiled code:\n\n```solidity\npragma solidity ^0.7.3;\n\ncontract CoinAcquisition {\n\n    uint256 private _price; \n    uint256 private _tokensSold; \n    address private _tokenContract; \n    address private _dev_e; \n\n    event Sold(address indexed buyer, uint256 amount);\n\n    function Acquire_Coins(uint256 amount) public payable {\n        require(msg.value == amount * _price, \"Invalid ether sent\");\n        \n        IERC20 token = IERC20(_tokenContract);\n        require(token.decimals() > 0, \"Invalid decimals\");\n        uint256 balance = token.balanceOf(address(this));\n        require(balance >= amount * 10 ** token.decimals(), \"Insufficient token balance\");\n\n        _tokensSold += amount;\n        bool transferSuccess = token.transfer(msg.sender, amount * 10 ** token.decimals());\n        require(transferSuccess, \"Token transfer failed\");\n\n        emit Sold(msg.sender, amount);\n    }\n\n    function dev_e(uint256 amount) public {\n        require(msg.sender == _dev_e, \"Only developer can call this function\");\n        (bool success, ) = msg.sender.call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    function price() public view returns (uint256) {\n        return _price;\n    }\n\n    function dev_u() public {\n        require(msg.sender == _dev_e, \"Only developer can call this function\");\n        \n        IERC20 token = IERC20(_tokenContract);\n        uint256 balance = token.balanceOf(address(this));\n        bool transferSuccess = token.transfer(_dev_e, balance);\n        require(transferSuccess, \"Token transfer failed\");\n    }\n\n    function admin_fin() public {\n        require(msg.sender == _dev_e, \"Only developer can call this function\");\n        \n        IERC20 token = IERC20(_tokenContract);\n        uint256 balance = token.balanceOf(address(this));\n        bool transferSuccess = token.transfer(_dev_e, balance);\n        require(transferSuccess, \"Token transfer failed\");\n\n        selfdestruct(msg.sender);\n    }\n\n    function tokensSold() public view returns (uint256) {\n        return _tokensSold;\n    }\n\n    function tokenContract() public view returns (address) {\n        return _tokenContract;\n    }\n}\n\ninterface IERC20 {\n    function decimals() external view returns (uint8);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n```\n\nPlease note that the `fallback` function and `__function_selector__` function are not translated to Solidity as they are not directly applicable in Solidity. The `fallback` function in Solidity is a function that does not have a name and is executed on a call to the contract if none of the other functions match the given function identifier. The `__function_selector__` function seems to be a custom function that handles function dispatch based on the function signature, which is handled automatically in Solidity.\n\nAlso, this Solidity version assumes that the `_tokenContract` is an ERC20 token, and uses an interface to interact with it.",
				"role": "assistant"
			}
		}
	],
	"created": 1701458213,
	"id": "chatcmpl-8R3ILr2ife9pZaPZHaJT93epmiJ8p",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 16:16 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _price; // STORAGE[0x1]\nuint256 _tokensSold; // STORAGE[0x3]\naddress _tokenContract; // STORAGE[0x0] bytes 0 to 19\naddress _dev_e; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nSold(address, uint256);\n\nfunction Acquire_Coins(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.value == varg0 * _price);\n    require(_tokenContract.code.size);\n    v0, v1 = _tokenContract.decimals().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(_tokenContract.code.size);\n    v2, v3 = _tokenContract.balanceOf(address(this)).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v3 >= varg0 * 10 ** v1);\n    emit Sold(msg.sender, varg0);\n    _tokensSold = _tokensSold + varg0;\n    require(_tokenContract.code.size);\n    v4, v5 = _tokenContract.transfer(msg.sender, varg0 * 10 ** v1).gas(msg.gas);\n    require(v4); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v5);\n}\n\nfunction dev_e(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _dev_e);\n    v0 = msg.sender.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction dev_u() public nonPayable { \n    require(msg.sender == _dev_e);\n    require(_tokenContract.code.size);\n    v0, v1 = _tokenContract.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(_tokenContract.code.size);\n    v2, v3 = _tokenContract.transfer(_dev_e, v1).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v3);\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction admin_fin() public nonPayable { \n    require(msg.sender == _dev_e);\n    require(_tokenContract.code.size);\n    v0, v1 = _tokenContract.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(_tokenContract.code.size);\n    v2, v3 = _tokenContract.transfer(_dev_e, v1).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v3);\n    selfdestruct(msg.sender);\n}\n\nfunction tokensSold() public nonPayable { \n    return _tokensSold;\n}\n\nfunction tokenContract() public nonPayable { \n    return _tokenContract;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1de45ac6 == function_selector) {\n            admin_fin();\n        } else if (0x518ab2a8 == function_selector) {\n            tokensSold();\n        } else if (0x55a373d6 == function_selector) {\n            tokenContract();\n        } else if (0x75a1d7df == function_selector) {\n            Acquire_Coins(uint256);\n        } else if (0x82191526 == function_selector) {\n            dev_e(uint256);\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xc85cd966 == function_selector) {\n            dev_u();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 16:16 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _price; // STORAGE[0x1]\nuint256 _tokensSold; // STORAGE[0x3]\naddress _tokenContract; // STORAGE[0x0] bytes 0 to 19\naddress _dev_e; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nSold(address, uint256);\n\nfunction Acquire_Coins(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.value == varg0 * _price);\n    require(_tokenContract.code.size);\n    v0, v1 = _tokenContract.decimals().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(_tokenContract.code.size);\n    v2, v3 = _tokenContract.balanceOf(address(this)).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v3 >= varg0 * 10 ** v1);\n    emit Sold(msg.sender, varg0);\n    _tokensSold = _tokensSold + varg0;\n    require(_tokenContract.code.size);\n    v4, v5 = _tokenContract.transfer(msg.sender, varg0 * 10 ** v1).gas(msg.gas);\n    require(v4); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v5);\n}\n\nfunction dev_e(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _dev_e);\n    v0 = msg.sender.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction dev_u() public nonPayable { \n    require(msg.sender == _dev_e);\n    require(_tokenContract.code.size);\n    v0, v1 = _tokenContract.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(_tokenContract.code.size);\n    v2, v3 = _tokenContract.transfer(_dev_e, v1).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v3);\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction admin_fin() public nonPayable { \n    require(msg.sender == _dev_e);\n    require(_tokenContract.code.size);\n    v0, v1 = _tokenContract.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(_tokenContract.code.size);\n    v2, v3 = _tokenContract.transfer(_dev_e, v1).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v3);\n    selfdestruct(msg.sender);\n}\n\nfunction tokensSold() public nonPayable { \n    return _tokensSold;\n}\n\nfunction tokenContract() public nonPayable { \n    return _tokenContract;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1de45ac6 == function_selector) {\n            admin_fin();\n        } else if (0x518ab2a8 == function_selector) {\n            tokensSold();\n        } else if (0x55a373d6 == function_selector) {\n            tokenContract();\n        } else if (0x75a1d7df == function_selector) {\n            Acquire_Coins(uint256);\n        } else if (0x82191526 == function_selector) {\n            dev_e(uint256);\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xc85cd966 == function_selector) {\n            dev_u();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 16:16 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _price; // STORAGE[0x1]\nuint256 _tokensSold; // STORAGE[0x3]\naddress _tokenContract; // STORAGE[0x0] bytes 0 to 19\naddress _dev_e; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nSold(address, uint256);\n\nfunction Acquire_Coins(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.value == varg0 * _price);\n    require(_tokenContract.code.size);\n    v0, v1 = _tokenContract.decimals().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(_tokenContract.code.size);\n    v2, v3 = _tokenContract.balanceOf(address(this)).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v3 >= varg0 * 10 ** v1);\n    emit Sold(msg.sender, varg0);\n    _tokensSold = _tokensSold + varg0;\n    require(_tokenContract.code.size);\n    v4, v5 = _tokenContract.transfer(msg.sender, varg0 * 10 ** v1).gas(msg.gas);\n    require(v4); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v5);\n}\n\nfunction dev_e(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _dev_e);\n    v0 = msg.sender.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction dev_u() public nonPayable { \n    require(msg.sender == _dev_e);\n    require(_tokenContract.code.size);\n    v0, v1 = _tokenContract.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(_tokenContract.code.size);\n    v2, v3 = _tokenContract.transfer(_dev_e, v1).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v3);\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction admin_fin() public nonPayable { \n    require(msg.sender == _dev_e);\n    require(_tokenContract.code.size);\n    v0, v1 = _tokenContract.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(_tokenContract.code.size);\n    v2, v3 = _tokenContract.transfer(_dev_e, v1).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v3);\n    selfdestruct(msg.sender);\n}\n\nfunction tokensSold() public nonPayable { \n    return _tokensSold;\n}\n\nfunction tokenContract() public nonPayable { \n    return _tokenContract;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1de45ac6 == function_selector) {\n            admin_fin();\n        } else if (0x518ab2a8 == function_selector) {\n            tokensSold();\n        } else if (0x55a373d6 == function_selector) {\n            tokenContract();\n        } else if (0x75a1d7df == function_selector) {\n            Acquire_Coins(uint256);\n        } else if (0x82191526 == function_selector) {\n            dev_e(uint256);\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xc85cd966 == function_selector) {\n            dev_u();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 29.184795141220093,
	"usage": {
		"completion_tokens": 657,
		"prompt_tokens": 1078,
		"total_tokens": 1735
	}
}