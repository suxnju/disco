{
	"address": "0xd75fc946fb601ab28f3958ce1a29be9afae1acfd",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity contract code that matches the provided decompiled code:\n\n```solidity\npragma solidity >=0.6.0 <0.9.0;\n\ncontract Contract {\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 totalSupply;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n        balances[msg.sender] = _initialAmount;\n        totalSupply = _initialAmount;\n        name = _tokenName;\n        decimals = _decimalUnits;\n        symbol = _tokenSymbol;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value, \"Insufficient balance.\");\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value, \"Transfer not allowed.\");\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n   }\n}\n```\n\nPlease note that the provided decompiled code doesn't cover all the functions of the Solidity code. This contract is a basic example of an ERC20 token contract with main functions such as `transfer`, `transferFrom`, `balanceOf`, `approve`, and `allowance`. However, it does not include more advanced features that a complete ERC20 token contract might have, such as a `burn` function for reducing the supply of tokens or a `mint` function for increasing it. The data types and access modifiers (public, private) are guessed based on the common practices and the functionality of the methods, and may not be entirely accurate. \n\nMoreover, the provided decompiled code is quite complex and it\u2019s not directly mapping to Solidity language. It's using a lot of low-level operations, working with memory, stack and storage directly, which is not common for high-level Solidity code.",
				"role": "assistant"
			}
		}
	],
	"created": 1700631812,
	"id": "chatcmpl-8NaJIxUTQ0uR0O8zH3k6nXNaqCKyA",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x70a08231 > var0) {\n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = 0x00dc;\n                var1 = name();\n            \n            label_00DC:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var1;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var var2 = temp0;\n                var var3 = var2;\n                var var4 = var3 + 0x40;\n                var var5 = temp1 + 0x20;\n                var var6 = memory[temp1:temp1 + 0x20];\n                var var7 = var6;\n                var var8 = var4;\n                var var9 = var5;\n                var var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_0116:\n                    var temp2 = var6;\n                    var4 = temp2 + var4;\n                    var5 = temp2 & 0x1f;\n                \n                    if (!var5) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var4 - temp3];\n                    } else {\n                        var temp4 = var5;\n                        var temp5 = var4 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_0107:\n                    var temp7 = var10;\n                    memory[temp7 + var8:temp7 + var8 + 0x20] = memory[temp7 + var9:temp7 + var9 + 0x20];\n                    var10 = temp7 + 0x20;\n                \n                    if (var10 >= var7) { goto label_0116; }\n                    else { goto label_0107; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = 0x017d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = approve(var2, var3);\n            \n            label_017D:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = 0x0199;\n                var1 = totalSupply();\n            \n            label_0199:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = 0x017d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = transferFrom(var2, var3);\n                goto label_017D;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = 0x01e9;\n                var1 = decimals();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1 & 0xff;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n            } else if (var0 == 0x39509351) {\n                // Dispatch table entry for increaseAllowance(address,uint256)\n                var1 = 0x017d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var temp14 = var2;\n                var2 = msg.data[temp14:temp14 + 0x20] & (0x01 << 0xa0) - 0x01;\n                var3 = msg.data[temp14 + 0x20:temp14 + 0x20 + 0x20];\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x05;\n                var temp15 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = temp15;\n                var6 = msg.sender;\n                var4 = 0x00;\n                var5 = 0x0418;\n                var7 = var2;\n                var8 = 0x0481;\n                var9 = storage[keccak256(memory[var4:var4 + 0x40])];\n                var10 = var3;\n                var8 = func_0BA2(var9, var10);\n                func_0481(var6, var7, var8);\n            \n            label_0418:\n                var1 = 0x01;\n                // Error: Could not resolve jump destination!\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xa457c2d7 > var0) {\n            if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = 0x0199;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = balanceOf(var2, var3);\n                goto label_0199;\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = 0x0259;\n                var1 = owner();\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var1 & (0x01 << 0xa0) - 0x01;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + temp16 - temp17 + 0x20];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = 0x00dc;\n                var1 = symbol();\n                goto label_00DC;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xa457c2d7) {\n            // Dispatch table entry for decreaseAllowance(address,uint256)\n            var1 = 0x017d;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var temp18 = var2;\n            var2 = msg.data[temp18:temp18 + 0x20] & (0x01 << 0xa0) - 0x01;\n            var3 = msg.data[temp18 + 0x20:temp18 + 0x20 + 0x20];\n            var4 = 0x00;\n            var5 = 0x0418;\n            var6 = msg.sender;\n            var7 = var2;\n            var8 = 0x0481;\n            var temp19 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp19 + 0x60;\n            memory[temp19:temp19 + 0x20] = 0x25;\n            memory[temp19 + 0x20:temp19 + 0x20 + 0x25] = code[0x0cf0:0x0d15];\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x05;\n            var temp20 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = temp20;\n            var9 = storage[keccak256(memory[0x00:0x40])];\n            var10 = var3;\n            var var11 = temp19;\n            var8 = func_0B0B(var9, var10, var11);\n            func_0481(var6, var7, var8);\n            goto label_0418;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = 0x017d;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var temp21 = var2;\n            var2 = msg.data[temp21:temp21 + 0x20] & (0x01 << 0xa0) - 0x01;\n            var3 = msg.data[temp21 + 0x20:temp21 + 0x20 + 0x20];\n            var4 = 0x00;\n            var5 = 0x0418;\n            var6 = msg.sender;\n            var7 = var2;\n            var8 = var3;\n            transfer(var6, var7, var8);\n            goto label_0418;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x0199;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = allowance(var2, var3);\n            goto label_0199;\n        } else if (var0 == 0xf353da24) {\n            // Dispatch table entry for 0xf353da24 (unknown)\n            var1 = 0x0373;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            func_0319(var2, var3);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x0418;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_07C0(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transferFrom(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var0 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n        var var1 = 0x00;\n        var var2 = 0x0434;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = var0;\n        transfer(var3, var4, var5);\n        var2 = 0x0486;\n        var3 = arg0;\n        var4 = msg.sender;\n        var5 = 0x0481;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + 0x60;\n        memory[temp2:temp2 + 0x20] = 0x28;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x28] = code[0x0c7f:0x0ca7];\n        memory[0x00:0x20] = var3 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp3;\n        var var6 = storage[keccak256(memory[0x00:0x40])];\n        var var7 = var0;\n        var var8 = temp2;\n        var5 = func_0B0B(var6, var7, var8);\n        func_0481(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x00;\n        var var0 = arg0;\n        var var1 = 0x04d9;\n        var var2 = var0;\n        var var3 = 0x06;\n        var1 = func_0C03(var2, var3);\n        var2 = 0x04e4;\n        var3 = var0;\n        var var4 = 0x04;\n        var2 = func_0C03(var3, var4);\n        return var2 + var1;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20] & temp0;\n        var temp2 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp2 & arg0;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & arg1;\n        memory[0x20:0x40] = temp3;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0319(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 * 0x20 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        arg0 = var0;\n        arg1 = var1;\n        var0 = msg.data[var2:var2 + 0x20];\n        var1 = 0x2dfadbad8e08966063eebbfc760bed02f5228c0d179c9e8937c1095598015282;\n        var2 = msg.sender;\n        var var3 = 0x00;\n        var var4 = 0x01;\n        var temp5 = memory[0x40:0x60] + 0x20;\n        var var5 = temp5;\n        memory[var5:var5 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n        var temp6 = var5 + 0x20;\n        var var6 = temp6;\n        var var7 = var6 + 0x20;\n        var temp7 = var7 + 0x20;\n        memory[var6:var6 + 0x20] = temp7 - var5;\n        var var9 = var3;\n        var temp8 = storage[var9];\n        memory[temp7:temp7 + 0x20] = (!(temp8 & 0x01) * 0x0100 - 0x01 & temp8) / 0x02;\n        var var8 = temp7 + 0x20;\n        var temp9 = storage[var9];\n        var var10 = (!(temp9 & 0x01) * 0x0100 - 0x01 & temp9) / 0x02;\n    \n        if (!var10) {\n        label_06A7:\n            var temp10 = var8;\n            memory[var7:var7 + 0x20] = temp10 - var5;\n            var temp11 = storage[var4];\n            var temp12 = (temp11 & !(temp11 & 0x01) * 0x0100 + ~0x00) / 0x02;\n            memory[temp10:temp10 + 0x20] = temp12;\n            var8 = temp10 + 0x20;\n            var9 = var4;\n            var10 = temp12;\n        \n            if (!var10) {\n            label_071B:\n                var temp13 = var8;\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = temp13 - temp14 - 0x20;\n                memory[0x40:0x60] = temp13;\n            \n                if (keccak256(memory[temp14 + 0x20:temp14 + 0x20 + memory[temp14:temp14 + 0x20]]) != var1) { goto label_07BB; }\n            \n                var1 = 0x00;\n                var2 = var1;\n                var3 = 0x00;\n                var4 = arg0;\n                var5 = arg1;\n                var6 = 0x00;\n            \n                if (var6 >= var5) { assert(); }\n            \n                var4 = msg.data[var6 * 0x20 + var4:var6 * 0x20 + var4 + 0x20];\n                var5 = arg0;\n                var6 = arg1;\n                var7 = 0x01;\n            \n                if (var7 >= var6) { assert(); }\n            \n                var5 = msg.data[var7 * 0x20 + var5:var7 * 0x20 + var5 + 0x20];\n                var6 = arg0;\n                var7 = arg1;\n                var8 = 0x02;\n            \n                if (var8 >= var7) { assert(); }\n            \n                var3 = msg.data[var8 * 0x20 + var6:var8 * 0x20 + var6 + 0x20];\n                var temp15 = var5;\n                var2 = temp15;\n                var1 = var4;\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n            \n                if (var2 != 0x00) {\n                label_07BB:\n                    return;\n                } else {\n                    memory[0x00:0x20] = var1;\n                    memory[0x20:0x40] = 0x06;\n                    storage[keccak256(memory[0x00:0x40])] = var3;\n                    goto label_07BB;\n                }\n            } else if (0x1f < var10) {\n                var temp16 = var8;\n                var temp17 = temp16 + var10;\n                var8 = temp17;\n                memory[0x00:0x20] = var9;\n                var temp18 = keccak256(memory[0x00:0x20]);\n                memory[temp16:temp16 + 0x20] = storage[temp18];\n                var9 = temp18 + 0x01;\n                var10 = temp16 + 0x20;\n            \n                if (var8 <= var10) { goto label_0712; }\n            \n            label_06FE:\n                var temp19 = var9;\n                var temp20 = var10;\n                memory[temp20:temp20 + 0x20] = storage[temp19];\n                var9 = temp19 + 0x01;\n                var10 = temp20 + 0x20;\n            \n                if (var8 > var10) { goto label_06FE; }\n            \n            label_0712:\n                var temp21 = var8;\n                var temp22 = temp21 + (var10 - temp21 & 0x1f);\n                var10 = temp21;\n                var8 = temp22;\n                goto label_071B;\n            } else {\n                var temp23 = var8;\n                memory[temp23:temp23 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                var8 = temp23 + 0x20;\n                var10 = var10;\n                goto label_071B;\n            }\n        } else if (0x1f < var10) {\n            var temp24 = var8;\n            var temp25 = temp24 + var10;\n            var8 = temp25;\n            memory[0x00:0x20] = var9;\n            var temp26 = keccak256(memory[0x00:0x20]);\n            memory[temp24:temp24 + 0x20] = storage[temp26];\n            var9 = temp26 + 0x01;\n            var10 = temp24 + 0x20;\n        \n            if (var8 <= var10) { goto label_069E; }\n        \n        label_068A:\n            var temp27 = var9;\n            var temp28 = var10;\n            memory[temp28:temp28 + 0x20] = storage[temp27];\n            var9 = temp27 + 0x01;\n            var10 = temp28 + 0x20;\n        \n            if (var8 > var10) { goto label_068A; }\n        \n        label_069E:\n            var temp29 = var8;\n            var temp30 = temp29 + (var10 - temp29 & 0x1f);\n            var10 = temp29;\n            var8 = temp30;\n            goto label_06A7;\n        } else {\n            var temp31 = var8;\n            memory[temp31:temp31 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n            var8 = temp31 + 0x20;\n            var10 = var10;\n            goto label_06A7;\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x00;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_0401:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_03F8; }\n        \n        label_03E4:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_03E4; }\n        \n        label_03F8:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0401;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp10 + 0x20;\n            goto label_0401;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function func_0481(var arg0, var arg1, var arg2) {\n        func_07C0(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function owner() returns (var r0) { return storage[0x03] & (0x01 << 0xa0) - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x01;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_0401:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_03F8; }\n        \n        label_03E4:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_03E4; }\n        \n        label_03F8:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0401;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0401;\n        }\n    }\n    \n    function func_07C0(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd << 0xe5;\n            var temp13 = temp12 + 0x04;\n            var temp14 = temp13 + 0x20;\n            memory[temp13:temp13 + 0x20] = temp14 - temp13;\n            memory[temp14:temp14 + 0x20] = 0x24;\n            var temp15 = temp14 + 0x20;\n            memory[temp15:temp15 + 0x24] = code[0x0ccc:0x0cf0];\n            var temp16 = memory[0x40:0x60];\n            revert(memory[temp16:temp16 + (temp15 + 0x40) - temp16]);\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x05;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            var temp8 = temp7 + 0x04;\n            var temp9 = temp8 + 0x20;\n            memory[temp8:temp8 + 0x20] = temp9 - temp8;\n            memory[temp9:temp9 + 0x20] = 0x22;\n            var temp10 = temp9 + 0x20;\n            memory[temp10:temp10 + 0x22] = code[0x0c37:0x0c59];\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + (temp10 + 0x40) - temp11]);\n        }\n    }\n    \n    function transfer(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;\n            var temp17 = temp16 + 0x04;\n            var temp18 = temp17 + 0x20;\n            memory[temp17:temp17 + 0x20] = temp18 - temp17;\n            memory[temp18:temp18 + 0x20] = 0x25;\n            var temp19 = temp18 + 0x20;\n            memory[temp19:temp19 + 0x25] = code[0x0ca7:0x0ccc];\n            var temp20 = memory[0x40:0x60];\n            revert(memory[temp20:temp20 + (temp19 + 0x40) - temp20]);\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x00;\n            var var1 = (0x01 << 0xa0) - 0x01 & 0x0000000000000000000000005491305204daca75317a0bc8c332dd61dbb77bc8;\n            var var2 = 0x70a08231;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) << 0xe0;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n            var var3 = temp1 + 0x20;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = var1;\n            var var9 = !address(var8).code.length;\n        \n            if (var9) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var5:var5 + var4] = address(var8).staticcall.gas(msg.gas)(memory[var7:var7 + var6]);\n            var4 = !temp2;\n        \n            if (!var4) {\n                var1 = memory[0x40:0x60];\n                var2 = returndata.length;\n            \n                if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp3 = memory[var1:var1 + 0x20];\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x06;\n                var1 = storage[keccak256(memory[0x00:0x40])];\n                var0 = temp3;\n                var2 = !!var1;\n            \n                if (!var1) {\n                    if (!var2) {\n                    label_0A33:\n                        var2 = 0x0a70;\n                        var temp4 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp4 + 0x60;\n                        memory[temp4:temp4 + 0x20] = 0x26;\n                        memory[temp4 + 0x20:temp4 + 0x20 + 0x26] = code[0x0c59:0x0c7f];\n                        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                        var3 = storage[keccak256(memory[0x00:0x40])];\n                        var4 = arg2;\n                        var5 = temp4;\n                        var2 = func_0B0B(var3, var4, var5);\n                        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                        storage[keccak256(memory[0x00:0x40])] = var2;\n                        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                        var3 = storage[keccak256(memory[0x00:0x40])];\n                        var2 = 0x0aad;\n                        var4 = arg2;\n                        var2 = func_0BA2(var3, var4);\n                    \n                    label_0AAD:\n                        var temp5 = (0x01 << 0xa0) - 0x01;\n                        var temp6 = arg1 & temp5;\n                        memory[0x00:0x20] = temp6;\n                        memory[0x20:0x40] = 0x04;\n                        storage[keccak256(memory[0x00:0x40])] = var2;\n                        var temp7 = memory[0x40:0x60];\n                        memory[temp7:temp7 + 0x20] = arg2;\n                        var temp8 = memory[0x40:0x60];\n                        log(memory[temp8:temp8 + temp7 - temp8 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-6] & (0x01 << 0xa0) - 0x01, stack[-5] & (0x01 << 0xa0) - 0x01]);\n                        return;\n                    } else {\n                    label_09F8:\n                        var2 = 0x00;\n                        var3 = 0x0a1e;\n                        var temp9 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp9 + 0x60;\n                        memory[temp9:temp9 + 0x20] = 0x26;\n                        memory[temp9 + 0x20:temp9 + 0x20 + 0x26] = code[0x0c59:0x0c7f];\n                        var4 = var1;\n                        var5 = arg2;\n                        var6 = temp9;\n                        var3 = func_0B0B(var4, var5, var6);\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x06;\n                        storage[keccak256(memory[0x00:0x40])] = var3;\n                        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                        var2 = 0x0aad;\n                        var3 = storage[keccak256(memory[0x00:0x40])];\n                        var4 = arg2;\n                        var2 = func_0BA2(var3, var4);\n                        goto label_0AAD;\n                    }\n                } else if (var0 <= 0x00) { goto label_0A33; }\n                else { goto label_09F8; }\n            } else {\n                var temp10 = returndata.length;\n                memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = 0x461bcd << 0xe5;\n            var temp12 = temp11 + 0x04;\n            var temp13 = temp12 + 0x20;\n            memory[temp12:temp12 + 0x20] = temp13 - temp12;\n            memory[temp13:temp13 + 0x20] = 0x23;\n            var temp14 = temp13 + 0x20;\n            memory[temp14:temp14 + 0x23] = code[0x0c14:0x0c37];\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + (temp14 + 0x40) - temp15]);\n        }\n    }\n    \n    function func_0B0B(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = temp0 + 0x04;\n        var var2 = temp1;\n        var var3 = var2;\n        var temp2 = var3 + 0x20;\n        memory[var3:var3 + 0x20] = temp2 - var3;\n        var temp3 = var1;\n        memory[temp2:temp2 + 0x20] = memory[temp3:temp3 + 0x20];\n        var var4 = temp2 + 0x20;\n        var var6 = memory[temp3:temp3 + 0x20];\n        var var5 = temp3 + 0x20;\n        var var7 = var6;\n        var var8 = var4;\n        var var9 = var5;\n        var var10 = 0x00;\n    \n        if (var10 >= var7) {\n        label_0B5F:\n            var temp4 = var6;\n            var4 = temp4 + var4;\n            var5 = temp4 & 0x1f;\n        \n            if (!var5) {\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + var4 - temp5]);\n            } else {\n                var temp6 = var5;\n                var temp7 = var4 - temp6;\n                memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                var temp8 = memory[0x40:0x60];\n                revert(memory[temp8:temp8 + (temp7 + 0x20) - temp8]);\n            }\n        } else {\n        label_0B50:\n            var temp9 = var10;\n            memory[temp9 + var8:temp9 + var8 + 0x20] = memory[temp9 + var9:temp9 + var9 + 0x20];\n            var10 = temp9 + 0x20;\n        \n            if (var10 >= var7) { goto label_0B5F; }\n            else { goto label_0B50; }\n        }\n    }\n    \n    function func_0BA2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1b;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_0C03(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x70a08231 > var0) {\n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = 0x00dc;\n                var1 = name();\n            \n            label_00DC:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var1;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var var2 = temp0;\n                var var3 = var2;\n                var var4 = var3 + 0x40;\n                var var5 = temp1 + 0x20;\n                var var6 = memory[temp1:temp1 + 0x20];\n                var var7 = var6;\n                var var8 = var4;\n                var var9 = var5;\n                var var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_0116:\n                    var temp2 = var6;\n                    var4 = temp2 + var4;\n                    var5 = temp2 & 0x1f;\n                \n                    if (!var5) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var4 - temp3];\n                    } else {\n                        var temp4 = var5;\n                        var temp5 = var4 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_0107:\n                    var temp7 = var10;\n                    memory[temp7 + var8:temp7 + var8 + 0x20] = memory[temp7 + var9:temp7 + var9 + 0x20];\n                    var10 = temp7 + 0x20;\n                \n                    if (var10 >= var7) { goto label_0116; }\n                    else { goto label_0107; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = 0x017d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = approve(var2, var3);\n            \n            label_017D:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = 0x0199;\n                var1 = totalSupply();\n            \n            label_0199:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = 0x017d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = transferFrom(var2, var3);\n                goto label_017D;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = 0x01e9;\n                var1 = decimals();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1 & 0xff;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n            } else if (var0 == 0x39509351) {\n                // Dispatch table entry for increaseAllowance(address,uint256)\n                var1 = 0x017d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var temp14 = var2;\n                var2 = msg.data[temp14:temp14 + 0x20] & (0x01 << 0xa0) - 0x01;\n                var3 = msg.data[temp14 + 0x20:temp14 + 0x20 + 0x20];\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x05;\n                var temp15 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = temp15;\n                var6 = msg.sender;\n                var4 = 0x00;\n                var5 = 0x0418;\n                var7 = var2;\n                var8 = 0x0481;\n                var9 = storage[keccak256(memory[var4:var4 + 0x40])];\n                var10 = var3;\n                var8 = func_0BA2(var9, var10);\n                func_0481(var6, var7, var8);\n            \n            label_0418:\n                var1 = 0x01;\n                // Error: Could not resolve jump destination!\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xa457c2d7 > var0) {\n            if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = 0x0199;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = balanceOf(var2, var3);\n                goto label_0199;\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = 0x0259;\n                var1 = owner();\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var1 & (0x01 << 0xa0) - 0x01;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + temp16 - temp17 + 0x20];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = 0x00dc;\n                var1 = symbol();\n                goto label_00DC;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xa457c2d7) {\n            // Dispatch table entry for decreaseAllowance(address,uint256)\n            var1 = 0x017d;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var temp18 = var2;\n            var2 = msg.data[temp18:temp18 + 0x20] & (0x01 << 0xa0) - 0x01;\n            var3 = msg.data[temp18 + 0x20:temp18 + 0x20 + 0x20];\n            var4 = 0x00;\n            var5 = 0x0418;\n            var6 = msg.sender;\n            var7 = var2;\n            var8 = 0x0481;\n            var temp19 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp19 + 0x60;\n            memory[temp19:temp19 + 0x20] = 0x25;\n            memory[temp19 + 0x20:temp19 + 0x20 + 0x25] = code[0x0cf0:0x0d15];\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x05;\n            var temp20 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = temp20;\n            var9 = storage[keccak256(memory[0x00:0x40])];\n            var10 = var3;\n            var var11 = temp19;\n            var8 = func_0B0B(var9, var10, var11);\n            func_0481(var6, var7, var8);\n            goto label_0418;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = 0x017d;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var temp21 = var2;\n            var2 = msg.data[temp21:temp21 + 0x20] & (0x01 << 0xa0) - 0x01;\n            var3 = msg.data[temp21 + 0x20:temp21 + 0x20 + 0x20];\n            var4 = 0x00;\n            var5 = 0x0418;\n            var6 = msg.sender;\n            var7 = var2;\n            var8 = var3;\n            transfer(var6, var7, var8);\n            goto label_0418;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x0199;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = allowance(var2, var3);\n            goto label_0199;\n        } else if (var0 == 0xf353da24) {\n            // Dispatch table entry for 0xf353da24 (unknown)\n            var1 = 0x0373;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            func_0319(var2, var3);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x0418;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_07C0(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transferFrom(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var0 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n        var var1 = 0x00;\n        var var2 = 0x0434;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = var0;\n        transfer(var3, var4, var5);\n        var2 = 0x0486;\n        var3 = arg0;\n        var4 = msg.sender;\n        var5 = 0x0481;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + 0x60;\n        memory[temp2:temp2 + 0x20] = 0x28;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x28] = code[0x0c7f:0x0ca7];\n        memory[0x00:0x20] = var3 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp3;\n        var var6 = storage[keccak256(memory[0x00:0x40])];\n        var var7 = var0;\n        var var8 = temp2;\n        var5 = func_0B0B(var6, var7, var8);\n        func_0481(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x00;\n        var var0 = arg0;\n        var var1 = 0x04d9;\n        var var2 = var0;\n        var var3 = 0x06;\n        var1 = func_0C03(var2, var3);\n        var2 = 0x04e4;\n        var3 = var0;\n        var var4 = 0x04;\n        var2 = func_0C03(var3, var4);\n        return var2 + var1;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20] & temp0;\n        var temp2 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp2 & arg0;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & arg1;\n        memory[0x20:0x40] = temp3;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0319(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 * 0x20 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        arg0 = var0;\n        arg1 = var1;\n        var0 = msg.data[var2:var2 + 0x20];\n        var1 = 0x2dfadbad8e08966063eebbfc760bed02f5228c0d179c9e8937c1095598015282;\n        var2 = msg.sender;\n        var var3 = 0x00;\n        var var4 = 0x01;\n        var temp5 = memory[0x40:0x60] + 0x20;\n        var var5 = temp5;\n        memory[var5:var5 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n        var temp6 = var5 + 0x20;\n        var var6 = temp6;\n        var var7 = var6 + 0x20;\n        var temp7 = var7 + 0x20;\n        memory[var6:var6 + 0x20] = temp7 - var5;\n        var var9 = var3;\n        var temp8 = storage[var9];\n        memory[temp7:temp7 + 0x20] = (!(temp8 & 0x01) * 0x0100 - 0x01 & temp8) / 0x02;\n        var var8 = temp7 + 0x20;\n        var temp9 = storage[var9];\n        var var10 = (!(temp9 & 0x01) * 0x0100 - 0x01 & temp9) / 0x02;\n    \n        if (!var10) {\n        label_06A7:\n            var temp10 = var8;\n            memory[var7:var7 + 0x20] = temp10 - var5;\n            var temp11 = storage[var4];\n            var temp12 = (temp11 & !(temp11 & 0x01) * 0x0100 + ~0x00) / 0x02;\n            memory[temp10:temp10 + 0x20] = temp12;\n            var8 = temp10 + 0x20;\n            var9 = var4;\n            var10 = temp12;\n        \n            if (!var10) {\n            label_071B:\n                var temp13 = var8;\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = temp13 - temp14 - 0x20;\n                memory[0x40:0x60] = temp13;\n            \n                if (keccak256(memory[temp14 + 0x20:temp14 + 0x20 + memory[temp14:temp14 + 0x20]]) != var1) { goto label_07BB; }\n            \n                var1 = 0x00;\n                var2 = var1;\n                var3 = 0x00;\n                var4 = arg0;\n                var5 = arg1;\n                var6 = 0x00;\n            \n                if (var6 >= var5) { assert(); }\n            \n                var4 = msg.data[var6 * 0x20 + var4:var6 * 0x20 + var4 + 0x20];\n                var5 = arg0;\n                var6 = arg1;\n                var7 = 0x01;\n            \n                if (var7 >= var6) { assert(); }\n            \n                var5 = msg.data[var7 * 0x20 + var5:var7 * 0x20 + var5 + 0x20];\n                var6 = arg0;\n                var7 = arg1;\n                var8 = 0x02;\n            \n                if (var8 >= var7) { assert(); }\n            \n                var3 = msg.data[var8 * 0x20 + var6:var8 * 0x20 + var6 + 0x20];\n                var temp15 = var5;\n                var2 = temp15;\n                var1 = var4;\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n            \n                if (var2 != 0x00) {\n                label_07BB:\n                    return;\n                } else {\n                    memory[0x00:0x20] = var1;\n                    memory[0x20:0x40] = 0x06;\n                    storage[keccak256(memory[0x00:0x40])] = var3;\n                    goto label_07BB;\n                }\n            } else if (0x1f < var10) {\n                var temp16 = var8;\n                var temp17 = temp16 + var10;\n                var8 = temp17;\n                memory[0x00:0x20] = var9;\n                var temp18 = keccak256(memory[0x00:0x20]);\n                memory[temp16:temp16 + 0x20] = storage[temp18];\n                var9 = temp18 + 0x01;\n                var10 = temp16 + 0x20;\n            \n                if (var8 <= var10) { goto label_0712; }\n            \n            label_06FE:\n                var temp19 = var9;\n                var temp20 = var10;\n                memory[temp20:temp20 + 0x20] = storage[temp19];\n                var9 = temp19 + 0x01;\n                var10 = temp20 + 0x20;\n            \n                if (var8 > var10) { goto label_06FE; }\n            \n            label_0712:\n                var temp21 = var8;\n                var temp22 = temp21 + (var10 - temp21 & 0x1f);\n                var10 = temp21;\n                var8 = temp22;\n                goto label_071B;\n            } else {\n                var temp23 = var8;\n                memory[temp23:temp23 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                var8 = temp23 + 0x20;\n                var10 = var10;\n                goto label_071B;\n            }\n        } else if (0x1f < var10) {\n            var temp24 = var8;\n            var temp25 = temp24 + var10;\n            var8 = temp25;\n            memory[0x00:0x20] = var9;\n            var temp26 = keccak256(memory[0x00:0x20]);\n            memory[temp24:temp24 + 0x20] = storage[temp26];\n            var9 = temp26 + 0x01;\n            var10 = temp24 + 0x20;\n        \n            if (var8 <= var10) { goto label_069E; }\n        \n        label_068A:\n            var temp27 = var9;\n            var temp28 = var10;\n            memory[temp28:temp28 + 0x20] = storage[temp27];\n            var9 = temp27 + 0x01;\n            var10 = temp28 + 0x20;\n        \n            if (var8 > var10) { goto label_068A; }\n        \n        label_069E:\n            var temp29 = var8;\n            var temp30 = temp29 + (var10 - temp29 & 0x1f);\n            var10 = temp29;\n            var8 = temp30;\n            goto label_06A7;\n        } else {\n            var temp31 = var8;\n            memory[temp31:temp31 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n            var8 = temp31 + 0x20;\n            var10 = var10;\n            goto label_06A7;\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x00;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_0401:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_03F8; }\n        \n        label_03E4:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_03E4; }\n        \n        label_03F8:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0401;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp10 + 0x20;\n            goto label_0401;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function func_0481(var arg0, var arg1, var arg2) {\n        func_07C0(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function owner() returns (var r0) { return storage[0x03] & (0x01 << 0xa0) - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x01;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_0401:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_03F8; }\n        \n        label_03E4:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_03E4; }\n        \n        label_03F8:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0401;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0401;\n        }\n    }\n    \n    function func_07C0(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd << 0xe5;\n            var temp13 = temp12 + 0x04;\n            var temp14 = temp13 + 0x20;\n            memory[temp13:temp13 + 0x20] = temp14 - temp13;\n            memory[temp14:temp14 + 0x20] = 0x24;\n            var temp15 = temp14 + 0x20;\n            memory[temp15:temp15 + 0x24] = code[0x0ccc:0x0cf0];\n            var temp16 = memory[0x40:0x60];\n            revert(memory[temp16:temp16 + (temp15 + 0x40) - temp16]);\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x05;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            var temp8 = temp7 + 0x04;\n            var temp9 = temp8 + 0x20;\n            memory[temp8:temp8 + 0x20] = temp9 - temp8;\n            memory[temp9:temp9 + 0x20] = 0x22;\n            var temp10 = temp9 + 0x20;\n            memory[temp10:temp10 + 0x22] = code[0x0c37:0x0c59];\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + (temp10 + 0x40) - temp11]);\n        }\n    }\n    \n    function transfer(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;\n            var temp17 = temp16 + 0x04;\n            var temp18 = temp17 + 0x20;\n            memory[temp17:temp17 + 0x20] = temp18 - temp17;\n            memory[temp18:temp18 + 0x20] = 0x25;\n            var temp19 = temp18 + 0x20;\n            memory[temp19:temp19 + 0x25] = code[0x0ca7:0x0ccc];\n            var temp20 = memory[0x40:0x60];\n            revert(memory[temp20:temp20 + (temp19 + 0x40) - temp20]);\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x00;\n            var var1 = (0x01 << 0xa0) - 0x01 & 0x0000000000000000000000005491305204daca75317a0bc8c332dd61dbb77bc8;\n            var var2 = 0x70a08231;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) << 0xe0;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n            var var3 = temp1 + 0x20;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = var1;\n            var var9 = !address(var8).code.length;\n        \n            if (var9) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var5:var5 + var4] = address(var8).staticcall.gas(msg.gas)(memory[var7:var7 + var6]);\n            var4 = !temp2;\n        \n            if (!var4) {\n                var1 = memory[0x40:0x60];\n                var2 = returndata.length;\n            \n                if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp3 = memory[var1:var1 + 0x20];\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x06;\n                var1 = storage[keccak256(memory[0x00:0x40])];\n                var0 = temp3;\n                var2 = !!var1;\n            \n                if (!var1) {\n                    if (!var2) {\n                    label_0A33:\n                        var2 = 0x0a70;\n                        var temp4 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp4 + 0x60;\n                        memory[temp4:temp4 + 0x20] = 0x26;\n                        memory[temp4 + 0x20:temp4 + 0x20 + 0x26] = code[0x0c59:0x0c7f];\n                        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                        var3 = storage[keccak256(memory[0x00:0x40])];\n                        var4 = arg2;\n                        var5 = temp4;\n                        var2 = func_0B0B(var3, var4, var5);\n                        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                        storage[keccak256(memory[0x00:0x40])] = var2;\n                        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                        var3 = storage[keccak256(memory[0x00:0x40])];\n                        var2 = 0x0aad;\n                        var4 = arg2;\n                        var2 = func_0BA2(var3, var4);\n                    \n                    label_0AAD:\n                        var temp5 = (0x01 << 0xa0) - 0x01;\n                        var temp6 = arg1 & temp5;\n                        memory[0x00:0x20] = temp6;\n                        memory[0x20:0x40] = 0x04;\n                        storage[keccak256(memory[0x00:0x40])] = var2;\n                        var temp7 = memory[0x40:0x60];\n                        memory[temp7:temp7 + 0x20] = arg2;\n                        var temp8 = memory[0x40:0x60];\n                        log(memory[temp8:temp8 + temp7 - temp8 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-6] & (0x01 << 0xa0) - 0x01, stack[-5] & (0x01 << 0xa0) - 0x01]);\n                        return;\n                    } else {\n                    label_09F8:\n                        var2 = 0x00;\n                        var3 = 0x0a1e;\n                        var temp9 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp9 + 0x60;\n                        memory[temp9:temp9 + 0x20] = 0x26;\n                        memory[temp9 + 0x20:temp9 + 0x20 + 0x26] = code[0x0c59:0x0c7f];\n                        var4 = var1;\n                        var5 = arg2;\n                        var6 = temp9;\n                        var3 = func_0B0B(var4, var5, var6);\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x06;\n                        storage[keccak256(memory[0x00:0x40])] = var3;\n                        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                        var2 = 0x0aad;\n                        var3 = storage[keccak256(memory[0x00:0x40])];\n                        var4 = arg2;\n                        var2 = func_0BA2(var3, var4);\n                        goto label_0AAD;\n                    }\n                } else if (var0 <= 0x00) { goto label_0A33; }\n                else { goto label_09F8; }\n            } else {\n                var temp10 = returndata.length;\n                memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = 0x461bcd << 0xe5;\n            var temp12 = temp11 + 0x04;\n            var temp13 = temp12 + 0x20;\n            memory[temp12:temp12 + 0x20] = temp13 - temp12;\n            memory[temp13:temp13 + 0x20] = 0x23;\n            var temp14 = temp13 + 0x20;\n            memory[temp14:temp14 + 0x23] = code[0x0c14:0x0c37];\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + (temp14 + 0x40) - temp15]);\n        }\n    }\n    \n    function func_0B0B(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = temp0 + 0x04;\n        var var2 = temp1;\n        var var3 = var2;\n        var temp2 = var3 + 0x20;\n        memory[var3:var3 + 0x20] = temp2 - var3;\n        var temp3 = var1;\n        memory[temp2:temp2 + 0x20] = memory[temp3:temp3 + 0x20];\n        var var4 = temp2 + 0x20;\n        var var6 = memory[temp3:temp3 + 0x20];\n        var var5 = temp3 + 0x20;\n        var var7 = var6;\n        var var8 = var4;\n        var var9 = var5;\n        var var10 = 0x00;\n    \n        if (var10 >= var7) {\n        label_0B5F:\n            var temp4 = var6;\n            var4 = temp4 + var4;\n            var5 = temp4 & 0x1f;\n        \n            if (!var5) {\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + var4 - temp5]);\n            } else {\n                var temp6 = var5;\n                var temp7 = var4 - temp6;\n                memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                var temp8 = memory[0x40:0x60];\n                revert(memory[temp8:temp8 + (temp7 + 0x20) - temp8]);\n            }\n        } else {\n        label_0B50:\n            var temp9 = var10;\n            memory[temp9 + var8:temp9 + var8 + 0x20] = memory[temp9 + var9:temp9 + var9 + 0x20];\n            var10 = temp9 + 0x20;\n        \n            if (var10 >= var7) { goto label_0B5F; }\n            else { goto label_0B50; }\n        }\n    }\n    \n    function func_0BA2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1b;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_0C03(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x70a08231 > var0) {\n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = 0x00dc;\n                var1 = name();\n            \n            label_00DC:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var1;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var var2 = temp0;\n                var var3 = var2;\n                var var4 = var3 + 0x40;\n                var var5 = temp1 + 0x20;\n                var var6 = memory[temp1:temp1 + 0x20];\n                var var7 = var6;\n                var var8 = var4;\n                var var9 = var5;\n                var var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_0116:\n                    var temp2 = var6;\n                    var4 = temp2 + var4;\n                    var5 = temp2 & 0x1f;\n                \n                    if (!var5) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var4 - temp3];\n                    } else {\n                        var temp4 = var5;\n                        var temp5 = var4 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_0107:\n                    var temp7 = var10;\n                    memory[temp7 + var8:temp7 + var8 + 0x20] = memory[temp7 + var9:temp7 + var9 + 0x20];\n                    var10 = temp7 + 0x20;\n                \n                    if (var10 >= var7) { goto label_0116; }\n                    else { goto label_0107; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = 0x017d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = approve(var2, var3);\n            \n            label_017D:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = 0x0199;\n                var1 = totalSupply();\n            \n            label_0199:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = 0x017d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = transferFrom(var2, var3);\n                goto label_017D;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = 0x01e9;\n                var1 = decimals();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1 & 0xff;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n            } else if (var0 == 0x39509351) {\n                // Dispatch table entry for increaseAllowance(address,uint256)\n                var1 = 0x017d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var temp14 = var2;\n                var2 = msg.data[temp14:temp14 + 0x20] & (0x01 << 0xa0) - 0x01;\n                var3 = msg.data[temp14 + 0x20:temp14 + 0x20 + 0x20];\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x05;\n                var temp15 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = temp15;\n                var6 = msg.sender;\n                var4 = 0x00;\n                var5 = 0x0418;\n                var7 = var2;\n                var8 = 0x0481;\n                var9 = storage[keccak256(memory[var4:var4 + 0x40])];\n                var10 = var3;\n                var8 = func_0BA2(var9, var10);\n                func_0481(var6, var7, var8);\n            \n            label_0418:\n                var1 = 0x01;\n                // Error: Could not resolve jump destination!\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xa457c2d7 > var0) {\n            if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = 0x0199;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = balanceOf(var2, var3);\n                goto label_0199;\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = 0x0259;\n                var1 = owner();\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var1 & (0x01 << 0xa0) - 0x01;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + temp16 - temp17 + 0x20];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = 0x00dc;\n                var1 = symbol();\n                goto label_00DC;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xa457c2d7) {\n            // Dispatch table entry for decreaseAllowance(address,uint256)\n            var1 = 0x017d;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var temp18 = var2;\n            var2 = msg.data[temp18:temp18 + 0x20] & (0x01 << 0xa0) - 0x01;\n            var3 = msg.data[temp18 + 0x20:temp18 + 0x20 + 0x20];\n            var4 = 0x00;\n            var5 = 0x0418;\n            var6 = msg.sender;\n            var7 = var2;\n            var8 = 0x0481;\n            var temp19 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp19 + 0x60;\n            memory[temp19:temp19 + 0x20] = 0x25;\n            memory[temp19 + 0x20:temp19 + 0x20 + 0x25] = code[0x0cf0:0x0d15];\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x05;\n            var temp20 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = temp20;\n            var9 = storage[keccak256(memory[0x00:0x40])];\n            var10 = var3;\n            var var11 = temp19;\n            var8 = func_0B0B(var9, var10, var11);\n            func_0481(var6, var7, var8);\n            goto label_0418;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = 0x017d;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var temp21 = var2;\n            var2 = msg.data[temp21:temp21 + 0x20] & (0x01 << 0xa0) - 0x01;\n            var3 = msg.data[temp21 + 0x20:temp21 + 0x20 + 0x20];\n            var4 = 0x00;\n            var5 = 0x0418;\n            var6 = msg.sender;\n            var7 = var2;\n            var8 = var3;\n            transfer(var6, var7, var8);\n            goto label_0418;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x0199;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = allowance(var2, var3);\n            goto label_0199;\n        } else if (var0 == 0xf353da24) {\n            // Dispatch table entry for 0xf353da24 (unknown)\n            var1 = 0x0373;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            func_0319(var2, var3);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x0418;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_07C0(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transferFrom(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var0 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n        var var1 = 0x00;\n        var var2 = 0x0434;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = var0;\n        transfer(var3, var4, var5);\n        var2 = 0x0486;\n        var3 = arg0;\n        var4 = msg.sender;\n        var5 = 0x0481;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + 0x60;\n        memory[temp2:temp2 + 0x20] = 0x28;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x28] = code[0x0c7f:0x0ca7];\n        memory[0x00:0x20] = var3 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp3;\n        var var6 = storage[keccak256(memory[0x00:0x40])];\n        var var7 = var0;\n        var var8 = temp2;\n        var5 = func_0B0B(var6, var7, var8);\n        func_0481(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x00;\n        var var0 = arg0;\n        var var1 = 0x04d9;\n        var var2 = var0;\n        var var3 = 0x06;\n        var1 = func_0C03(var2, var3);\n        var2 = 0x04e4;\n        var3 = var0;\n        var var4 = 0x04;\n        var2 = func_0C03(var3, var4);\n        return var2 + var1;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20] & temp0;\n        var temp2 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp2 & arg0;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & arg1;\n        memory[0x20:0x40] = temp3;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0319(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 * 0x20 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        arg0 = var0;\n        arg1 = var1;\n        var0 = msg.data[var2:var2 + 0x20];\n        var1 = 0x2dfadbad8e08966063eebbfc760bed02f5228c0d179c9e8937c1095598015282;\n        var2 = msg.sender;\n        var var3 = 0x00;\n        var var4 = 0x01;\n        var temp5 = memory[0x40:0x60] + 0x20;\n        var var5 = temp5;\n        memory[var5:var5 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n        var temp6 = var5 + 0x20;\n        var var6 = temp6;\n        var var7 = var6 + 0x20;\n        var temp7 = var7 + 0x20;\n        memory[var6:var6 + 0x20] = temp7 - var5;\n        var var9 = var3;\n        var temp8 = storage[var9];\n        memory[temp7:temp7 + 0x20] = (!(temp8 & 0x01) * 0x0100 - 0x01 & temp8) / 0x02;\n        var var8 = temp7 + 0x20;\n        var temp9 = storage[var9];\n        var var10 = (!(temp9 & 0x01) * 0x0100 - 0x01 & temp9) / 0x02;\n    \n        if (!var10) {\n        label_06A7:\n            var temp10 = var8;\n            memory[var7:var7 + 0x20] = temp10 - var5;\n            var temp11 = storage[var4];\n            var temp12 = (temp11 & !(temp11 & 0x01) * 0x0100 + ~0x00) / 0x02;\n            memory[temp10:temp10 + 0x20] = temp12;\n            var8 = temp10 + 0x20;\n            var9 = var4;\n            var10 = temp12;\n        \n            if (!var10) {\n            label_071B:\n                var temp13 = var8;\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = temp13 - temp14 - 0x20;\n                memory[0x40:0x60] = temp13;\n            \n                if (keccak256(memory[temp14 + 0x20:temp14 + 0x20 + memory[temp14:temp14 + 0x20]]) != var1) { goto label_07BB; }\n            \n                var1 = 0x00;\n                var2 = var1;\n                var3 = 0x00;\n                var4 = arg0;\n                var5 = arg1;\n                var6 = 0x00;\n            \n                if (var6 >= var5) { assert(); }\n            \n                var4 = msg.data[var6 * 0x20 + var4:var6 * 0x20 + var4 + 0x20];\n                var5 = arg0;\n                var6 = arg1;\n                var7 = 0x01;\n            \n                if (var7 >= var6) { assert(); }\n            \n                var5 = msg.data[var7 * 0x20 + var5:var7 * 0x20 + var5 + 0x20];\n                var6 = arg0;\n                var7 = arg1;\n                var8 = 0x02;\n            \n                if (var8 >= var7) { assert(); }\n            \n                var3 = msg.data[var8 * 0x20 + var6:var8 * 0x20 + var6 + 0x20];\n                var temp15 = var5;\n                var2 = temp15;\n                var1 = var4;\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n            \n                if (var2 != 0x00) {\n                label_07BB:\n                    return;\n                } else {\n                    memory[0x00:0x20] = var1;\n                    memory[0x20:0x40] = 0x06;\n                    storage[keccak256(memory[0x00:0x40])] = var3;\n                    goto label_07BB;\n                }\n            } else if (0x1f < var10) {\n                var temp16 = var8;\n                var temp17 = temp16 + var10;\n                var8 = temp17;\n                memory[0x00:0x20] = var9;\n                var temp18 = keccak256(memory[0x00:0x20]);\n                memory[temp16:temp16 + 0x20] = storage[temp18];\n                var9 = temp18 + 0x01;\n                var10 = temp16 + 0x20;\n            \n                if (var8 <= var10) { goto label_0712; }\n            \n            label_06FE:\n                var temp19 = var9;\n                var temp20 = var10;\n                memory[temp20:temp20 + 0x20] = storage[temp19];\n                var9 = temp19 + 0x01;\n                var10 = temp20 + 0x20;\n            \n                if (var8 > var10) { goto label_06FE; }\n            \n            label_0712:\n                var temp21 = var8;\n                var temp22 = temp21 + (var10 - temp21 & 0x1f);\n                var10 = temp21;\n                var8 = temp22;\n                goto label_071B;\n            } else {\n                var temp23 = var8;\n                memory[temp23:temp23 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                var8 = temp23 + 0x20;\n                var10 = var10;\n                goto label_071B;\n            }\n        } else if (0x1f < var10) {\n            var temp24 = var8;\n            var temp25 = temp24 + var10;\n            var8 = temp25;\n            memory[0x00:0x20] = var9;\n            var temp26 = keccak256(memory[0x00:0x20]);\n            memory[temp24:temp24 + 0x20] = storage[temp26];\n            var9 = temp26 + 0x01;\n            var10 = temp24 + 0x20;\n        \n            if (var8 <= var10) { goto label_069E; }\n        \n        label_068A:\n            var temp27 = var9;\n            var temp28 = var10;\n            memory[temp28:temp28 + 0x20] = storage[temp27];\n            var9 = temp27 + 0x01;\n            var10 = temp28 + 0x20;\n        \n            if (var8 > var10) { goto label_068A; }\n        \n        label_069E:\n            var temp29 = var8;\n            var temp30 = temp29 + (var10 - temp29 & 0x1f);\n            var10 = temp29;\n            var8 = temp30;\n            goto label_06A7;\n        } else {\n            var temp31 = var8;\n            memory[temp31:temp31 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n            var8 = temp31 + 0x20;\n            var10 = var10;\n            goto label_06A7;\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x00;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_0401:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_03F8; }\n        \n        label_03E4:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_03E4; }\n        \n        label_03F8:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0401;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp10 + 0x20;\n            goto label_0401;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function func_0481(var arg0, var arg1, var arg2) {\n        func_07C0(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function owner() returns (var r0) { return storage[0x03] & (0x01 << 0xa0) - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x01;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_0401:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_03F8; }\n        \n        label_03E4:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_03E4; }\n        \n        label_03F8:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0401;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0401;\n        }\n    }\n    \n    function func_07C0(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd << 0xe5;\n            var temp13 = temp12 + 0x04;\n            var temp14 = temp13 + 0x20;\n            memory[temp13:temp13 + 0x20] = temp14 - temp13;\n            memory[temp14:temp14 + 0x20] = 0x24;\n            var temp15 = temp14 + 0x20;\n            memory[temp15:temp15 + 0x24] = code[0x0ccc:0x0cf0];\n            var temp16 = memory[0x40:0x60];\n            revert(memory[temp16:temp16 + (temp15 + 0x40) - temp16]);\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x05;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            var temp8 = temp7 + 0x04;\n            var temp9 = temp8 + 0x20;\n            memory[temp8:temp8 + 0x20] = temp9 - temp8;\n            memory[temp9:temp9 + 0x20] = 0x22;\n            var temp10 = temp9 + 0x20;\n            memory[temp10:temp10 + 0x22] = code[0x0c37:0x0c59];\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + (temp10 + 0x40) - temp11]);\n        }\n    }\n    \n    function transfer(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;\n            var temp17 = temp16 + 0x04;\n            var temp18 = temp17 + 0x20;\n            memory[temp17:temp17 + 0x20] = temp18 - temp17;\n            memory[temp18:temp18 + 0x20] = 0x25;\n            var temp19 = temp18 + 0x20;\n            memory[temp19:temp19 + 0x25] = code[0x0ca7:0x0ccc];\n            var temp20 = memory[0x40:0x60];\n            revert(memory[temp20:temp20 + (temp19 + 0x40) - temp20]);\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x00;\n            var var1 = (0x01 << 0xa0) - 0x01 & 0x0000000000000000000000005491305204daca75317a0bc8c332dd61dbb77bc8;\n            var var2 = 0x70a08231;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) << 0xe0;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n            var var3 = temp1 + 0x20;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = var1;\n            var var9 = !address(var8).code.length;\n        \n            if (var9) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var5:var5 + var4] = address(var8).staticcall.gas(msg.gas)(memory[var7:var7 + var6]);\n            var4 = !temp2;\n        \n            if (!var4) {\n                var1 = memory[0x40:0x60];\n                var2 = returndata.length;\n            \n                if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp3 = memory[var1:var1 + 0x20];\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x06;\n                var1 = storage[keccak256(memory[0x00:0x40])];\n                var0 = temp3;\n                var2 = !!var1;\n            \n                if (!var1) {\n                    if (!var2) {\n                    label_0A33:\n                        var2 = 0x0a70;\n                        var temp4 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp4 + 0x60;\n                        memory[temp4:temp4 + 0x20] = 0x26;\n                        memory[temp4 + 0x20:temp4 + 0x20 + 0x26] = code[0x0c59:0x0c7f];\n                        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                        var3 = storage[keccak256(memory[0x00:0x40])];\n                        var4 = arg2;\n                        var5 = temp4;\n                        var2 = func_0B0B(var3, var4, var5);\n                        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                        storage[keccak256(memory[0x00:0x40])] = var2;\n                        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                        var3 = storage[keccak256(memory[0x00:0x40])];\n                        var2 = 0x0aad;\n                        var4 = arg2;\n                        var2 = func_0BA2(var3, var4);\n                    \n                    label_0AAD:\n                        var temp5 = (0x01 << 0xa0) - 0x01;\n                        var temp6 = arg1 & temp5;\n                        memory[0x00:0x20] = temp6;\n                        memory[0x20:0x40] = 0x04;\n                        storage[keccak256(memory[0x00:0x40])] = var2;\n                        var temp7 = memory[0x40:0x60];\n                        memory[temp7:temp7 + 0x20] = arg2;\n                        var temp8 = memory[0x40:0x60];\n                        log(memory[temp8:temp8 + temp7 - temp8 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-6] & (0x01 << 0xa0) - 0x01, stack[-5] & (0x01 << 0xa0) - 0x01]);\n                        return;\n                    } else {\n                    label_09F8:\n                        var2 = 0x00;\n                        var3 = 0x0a1e;\n                        var temp9 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp9 + 0x60;\n                        memory[temp9:temp9 + 0x20] = 0x26;\n                        memory[temp9 + 0x20:temp9 + 0x20 + 0x26] = code[0x0c59:0x0c7f];\n                        var4 = var1;\n                        var5 = arg2;\n                        var6 = temp9;\n                        var3 = func_0B0B(var4, var5, var6);\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x06;\n                        storage[keccak256(memory[0x00:0x40])] = var3;\n                        memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                        var2 = 0x0aad;\n                        var3 = storage[keccak256(memory[0x00:0x40])];\n                        var4 = arg2;\n                        var2 = func_0BA2(var3, var4);\n                        goto label_0AAD;\n                    }\n                } else if (var0 <= 0x00) { goto label_0A33; }\n                else { goto label_09F8; }\n            } else {\n                var temp10 = returndata.length;\n                memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = 0x461bcd << 0xe5;\n            var temp12 = temp11 + 0x04;\n            var temp13 = temp12 + 0x20;\n            memory[temp12:temp12 + 0x20] = temp13 - temp12;\n            memory[temp13:temp13 + 0x20] = 0x23;\n            var temp14 = temp13 + 0x20;\n            memory[temp14:temp14 + 0x23] = code[0x0c14:0x0c37];\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + (temp14 + 0x40) - temp15]);\n        }\n    }\n    \n    function func_0B0B(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = temp0 + 0x04;\n        var var2 = temp1;\n        var var3 = var2;\n        var temp2 = var3 + 0x20;\n        memory[var3:var3 + 0x20] = temp2 - var3;\n        var temp3 = var1;\n        memory[temp2:temp2 + 0x20] = memory[temp3:temp3 + 0x20];\n        var var4 = temp2 + 0x20;\n        var var6 = memory[temp3:temp3 + 0x20];\n        var var5 = temp3 + 0x20;\n        var var7 = var6;\n        var var8 = var4;\n        var var9 = var5;\n        var var10 = 0x00;\n    \n        if (var10 >= var7) {\n        label_0B5F:\n            var temp4 = var6;\n            var4 = temp4 + var4;\n            var5 = temp4 & 0x1f;\n        \n            if (!var5) {\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + var4 - temp5]);\n            } else {\n                var temp6 = var5;\n                var temp7 = var4 - temp6;\n                memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                var temp8 = memory[0x40:0x60];\n                revert(memory[temp8:temp8 + (temp7 + 0x20) - temp8]);\n            }\n        } else {\n        label_0B50:\n            var temp9 = var10;\n            memory[temp9 + var8:temp9 + var8 + 0x20] = memory[temp9 + var9:temp9 + var9 + 0x20];\n            var10 = temp9 + 0x20;\n        \n            if (var10 >= var7) { goto label_0B5F; }\n            else { goto label_0B50; }\n        }\n    }\n    \n    function func_0BA2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1b;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_0C03(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 43.94693183898926,
	"usage": {
		"completion_tokens": 648,
		"prompt_tokens": 10646,
		"total_tokens": 11294
	}
}