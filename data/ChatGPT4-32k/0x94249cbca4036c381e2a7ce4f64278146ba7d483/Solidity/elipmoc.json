{
	"address": "0x94249cbca4036c381e2a7ce4f64278146ba7d483",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code equivalent of the given decompiled EVM Bytecode:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract TokenContract {\n    uint256 private _totalSupply;\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    mapping (address => bool) private _recycle;\n    mapping (address => bool) private owner_5;\n    mapping (address => bool) private owner_6;\n    uint256 private _transfer;\n    uint256 private stor_9;\n    uint256 private stor_a;\n    mapping (address => bool) private _transferAgents;\n    mapping (address => bool) private _mintAgents;\n    mapping (address => bool) private owner_e;\n    uint256 private _airDrop;\n    uint256 private stor_10;\n    uint256 private _totalAirDrop;\n    uint256 private _crowdDistribution;\n    uint256 private _totalCrowdCoin;\n    uint256 private stor_15;\n    uint256 private _totalDevCoin;\n    uint256 private stor_17;\n    uint256 private _totalFoundCoin;\n    uint256 private stor_19;\n    string private _name;\n    string private _symbol;\n    uint256 private _decimals;\n    bool private _mintingFinished;\n    bool private _finishCrowdCoin;\n    address private _setTotalAirDrop;\n    address private _releaseAgent;\n    bool private _released;\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event AirDrop(address indexed _from, address indexed _to, uint256 _value);\n    event MintingAgentChanged(address indexed _agent, bool _status);\n    event UpdatedTokenInformation(string _newName, string _newSymbol);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    modifier onlyOwner {\n        require(msg.sender == _setTotalAirDrop, \"Not contract owner\");\n        _;\n    }\n\n    function setTransferAgent(address _address, bool _status) public onlyOwner {\n        _transferAgents[_address] = _status;\n    }\n\n    function withdrawAmount(uint256 _amount) public onlyOwner {\n        require(_setTotalAirDrop.send(_amount), \"Transfer failed\");\n    }\n\n    function mintingFinished() public view returns (bool) {\n        return _mintingFinished;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        _allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function addFound(address _address) public onlyOwner {\n        owner_6[_address] = true;\n    }\n\n    function distributeToDev(address _address, uint256 _value) public onlyOwner {\n        require(_balanceOf[_setTotalAirDrop] >= _value, \"Insufficient balance\");\n        _balanceOf[_setTotalAirDrop] -= _value;\n        _balanceOf[_address] += _value;\n        owner_5[_address] = true;\n        stor_15 += _value;\n        emit Transfer(address(0), _address, _value);\n    }\n\n    function setMaxTranferLimit(uint256 _limit1, uint256 _limit2, uint256 _limit3) public onlyOwner {\n        _transfer = _limit1;\n        stor_9 = _limit2;\n        stor_a = _limit3;\n    }\n\n    function removeAdmin(address _address) public onlyOwner {\n        _recycle[_address] = false;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function distributeToFound(address _address, uint256 _value) public onlyOwner {\n        require(_balanceOf[_setTotalAirDrop] >= _value, \"Insufficient balance\");\n        _balanceOf[_setTotalAirDrop] -= _value;\n        _balanceOf[_address] += _value;\n        owner_6[_address] = true;\n        stor_17 += _value;\n        emit Transfer(address(0), _address, _value);\n    }\n\n    function addDeveloper(address _address) public onlyOwner {\n        owner_5[_address] = true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= _allowance[_from][msg.sender], \"Insufficient allowance\");\n        _allowance[_from][msg.sender] -= _value;\n        require(_value <= _balanceOf[_from], \"Insufficient balance\");\n        _balanceOf[_from] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function setReleaseAgent(address _address) public onlyOwner {\n        _releaseAgent = _address;\n    }\n\n    function decimals() public view returns (uint256) {\n        return _decimals;\n    }\n\n    function airDrop(address _from, address _to, uint256 _value) public {\n        require(owner_e[msg.sender], \"Not authorized\");\n        require(_value <= _airDrop, \"Insufficient airdrop balance\");\n        _airDrop -= _value;\n        stor_10 += _value;\n        require(_balanceOf[_from] >= _value, \"Insufficient balance\");\n        _balanceOf[_from] -= _value;\n        _balanceOf[_to] += _value;\n        emit AirDrop(_from, _to, _value);\n    }\n\n    function mint(address _to, uint256 _value) public {\n        require(_mintAgents[msg.sender], \"Not authorized\");\n        require(!_mintingFinished, \"Minting finished\");\n        require(_balanceOf[_setTotalAirDrop] >= _value, \"Insufficient balance\");\n        _balanceOf[_setTotalAirDrop] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(address(0), _to, _value);\n    }\n\n    function mintAgents(address _address) public view returns (bool) {\n        return _mintAgents[_address];\n    }\n\n    function setMintAgent(address _address, bool _status) public onlyOwner {\n        _mintAgents[_address] = _status;\n        emit MintingAgentChanged(_address, _status);\n    }\n\n    function enableMint() public onlyOwner {\n        _mintingFinished = false;\n    }\n\n    function setTokenInformation(string memory _newName, string memory _newSymbol) public onlyOwner {\n        _name = _newName;\n        _symbol = _newSymbol;\n        emit UpdatedTokenInformation(_newName, _newSymbol);\n    }\n\n    function crowdDistribution() public payable {\n        // Placeholder for the decompiled crowdDistribution() function\n    }\n\n    function setDistributeAgent(address _address, bool _status) public onlyOwner {\n        owner_e[_address] = _status;\n    }\n\n    function recycle(address _address, uint256 _value) public {\n        require(_recycle[msg.sender], \"Not authorized\");\n        require(_balanceOf[_address] >= _value, \"Insufficient balance\");\n        _balanceOf[_address] -= _value;\n        _balanceOf[_setTotalAirDrop] += _value;\n        emit Transfer(_address, _setTotalAirDrop, _value);\n    }\n\n    function releaseTokenTransfer() public {\n        require(msg.sender == _releaseAgent, \"Not authorized\");\n        _released = true;\n    }\n\n    function tokenName() public view returns (string memory) {\n        return _name;\n    }\n\n    function totalCrowdCoin() public view returns (uint256) {\n        return _totalCrowdCoin;\n    }\n\n    function addAdmin(address _address) public onlyOwner {\n        _recycle[_address] = true;\n    }\n\n    function balanceOf(address _address) public view returns (uint256) {\n        return _balanceOf[_address];\n    }\n\n    function withdrawAll() public onlyOwner {\n        require(_setTotalAirDrop.send(address(this).balance), \"Transfer failed\");\n    }\n\n    function transferAgents(address _address) public view returns (bool) {\n        return _transferAgents[_address];\n    }\n\n    function getOwner() public view returns (address) {\n        return _setTotalAirDrop;\n    }\n\n    function owner() public view returns (address) {\n        return _setTotalAirDrop;\n    }\n\n    function totalFoundCoin() public view returns (uint256) {\n        return _totalFoundCoin;\n    }\n\n    function setTotalAirDrop(uint256 _value) public onlyOwner {\n        _totalAirDrop = _value;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function released() public view returns (bool) {\n        return _released;\n    }\n\n    function removeDeveloper(address _address) public onlyOwner {\n        owner_5[_address] = false;\n    }\n\n    function finishCrowdCoin() public view returns (bool) {\n        return _finishCrowdCoin;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_value <= _balanceOf[msg.sender], \"Insufficient balance\");\n        _balanceOf[msg.sender] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function totalDevCoin() public view returns (uint256) {\n        return _totalDevCoin;\n    }\n\n    function getTotalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function releaseAgent() public view returns (address) {\n        return _releaseAgent;\n    }\n\n    function removeFound(address _address) public onlyOwner {\n        owner_6[_address] = false;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return _allowance[_owner][_spender];\n    }\n\n    function isToken() public pure returns (bool) {\n        return true;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _setTotalAirDrop = _newOwner;\n    }\n\n    function totalAirDrop() public view returns (uint256) {\n        return _totalAirDrop;\n    }\n}\n```\n\nPlease note that the crowdDistribution() function is a placeholder. The actual implementation would need to be added based on the logic of the original contract. The decompiled code did not provide enough information to create a meaningful implementation.",
				"role": "assistant"
			}
		}
	],
	"created": 1702473520,
	"id": "chatcmpl-8VJQGuDZZ9gVKKUcicfq6HYQhVxsg",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 12:02 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _recycle; // STORAGE[0x4]\nmapping (uint256 => [uint256]) owner_5; // STORAGE[0x5]\nmapping (uint256 => [uint256]) owner_6; // STORAGE[0x6]\nuint256 _transfer; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _transferAgents; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _mintAgents; // STORAGE[0xd]\nmapping (uint256 => [uint256]) owner_e; // STORAGE[0xe]\nuint256 _airDrop; // STORAGE[0xf]\nuint256 stor_10; // STORAGE[0x10]\nuint256 _totalAirDrop; // STORAGE[0x11]\nuint256 _crowdDistribution; // STORAGE[0x13]\nuint256 _totalCrowdCoin; // STORAGE[0x14]\nuint256 stor_15; // STORAGE[0x15]\nuint256 _totalDevCoin; // STORAGE[0x16]\nuint256 stor_17; // STORAGE[0x17]\nuint256 _totalFoundCoin; // STORAGE[0x18]\nuint256 stor_19; // STORAGE[0x19]\nuint256[] _name; // STORAGE[0x1a]\nuint256[] _symbol; // STORAGE[0x1b]\nuint256 _decimals; // STORAGE[0x1c]\nuint8 _mintingFinished; // STORAGE[0xc] bytes 0 to 0\nuint8 _finishCrowdCoin; // STORAGE[0x12] bytes 0 to 0\naddress _setTotalAirDrop; // STORAGE[0x3] bytes 0 to 19\naddress _releaseAgent; // STORAGE[0x7] bytes 0 to 19\nuint8 _released; // STORAGE[0x7] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nAirDrop(address, address, uint256);\nMintingAgentChanged(address, bool);\nUpdatedTokenInformation(string, string);\nTransfer(address, address, uint256);\n\nfunction 0x1ae5(uint256 varg0) private { \n    if (0 != stor_19) {\n        if (1 != stor_19) {\n            if (2 != stor_19) {\n                if (3 != stor_19) {\n                    if (4 != stor_19) {\n                        return 0;\n                    } else {\n                        v0 = v1 = _SafeMul(10000, varg0);\n                    }\n                } else {\n                    v0 = v2 = _SafeMul(15000, varg0);\n                }\n            } else {\n                v0 = v3 = _SafeMul(20000, varg0);\n            }\n        } else {\n            v0 = v4 = _SafeMul(30000, varg0);\n        }\n    } else {\n        v0 = v5 = _SafeMul(50000, varg0);\n    }\n    return v0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    v1 = v0 < varg1;\n    v2 = v3 = v0 >= varg1;\n    if (v0 >= varg1) {\n        v2 = v4 = v0 >= varg0;\n    }\n    require(v2);\n    return v0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * varg1;\n    v1 = !varg1;\n    if (v1) {\n        require(!varg1);\n    } else {\n        assert(varg1);\n        require(v0 / varg1 == varg0);\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction setTransferAgent(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(!_released);\n    _transferAgents[varg0] = varg1 | ~0xff & _transferAgents[varg0];\n}\n\nfunction withdrawAmount(uint256 varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    v0 = _setTotalAirDrop.call().value(varg0).gas(2300 * !varg0);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction mintingFinished() public nonPayable { \n    return _mintingFinished;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1;\n    if (varg1) {\n        v0 = v2 = _allowance[varg0];\n    }\n    require(!v0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction addFound(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    owner_6[varg0] = 0x1 | ~0xff & owner_6[varg0];\n}\n\nfunction distributeToDev(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(varg1 + stor_15 < _totalDevCoin);\n    require(varg1 <= _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = _balanceOf[_setTotalAirDrop] - varg1;\n    require(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    require(varg1 + stor_15 >= stor_15);\n    stor_15 += varg1;\n    require(msg.sender == _setTotalAirDrop);\n    owner_5[varg0] = 0x1 | ~0xff & owner_5[varg0];\n    emit Transfer(0, varg0, varg1);\n    return varg1;\n}\n\nfunction setMaxTranferLimit(uint256 varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(varg0 < _totalSupply);\n    require(varg1 < _totalSupply);\n    require(varg2 < _totalSupply);\n    _transfer = varg0;\n    stor_9 = varg1;\n    stor_a = varg2;\n}\n\nfunction removeAdmin(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    _recycle[varg0] = ~0xff & _recycle[varg0];\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction distributeToFound(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(varg1 + stor_17 < _totalFoundCoin);\n    require(varg1 <= _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = _balanceOf[_setTotalAirDrop] - varg1;\n    require(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    require(varg1 + stor_17 >= stor_17);\n    stor_17 += varg1;\n    require(msg.sender == _setTotalAirDrop);\n    owner_6[varg0] = 0x1 | ~0xff & owner_6[varg0];\n    emit Transfer(0, varg0, varg1);\n    return varg1;\n}\n\nfunction addDeveloper(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    owner_5[varg0] = 0x1 | ~0xff & owner_5[varg0];\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    if (_setTotalAirDrop != varg0) {\n        if (!(0xff & owner_5[msg.sender])) {\n            if (!(0xff & owner_6[msg.sender])) {\n                if (stor_a) {\n                    require(varg2 < stor_a);\n                }\n            } else {\n                require(varg2 < stor_9);\n            }\n        } else {\n            require(varg2 < _transfer);\n        }\n        if (!_released) {\n            require(0xff & _transferAgents[varg0]);\n        }\n    }\n    require(_allowance[msg.sender] >= varg2);\n    require(varg2 >= 0);\n    v0 = _SafeAdd(varg2, _balanceOf[varg1]);\n    _balanceOf[varg1] = v0;\n    require(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction setReleaseAgent(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(!_released);\n    _releaseAgent = varg0;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction airDrop(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1);\n    require(varg2 <= _airDrop);\n    require(varg2 + stor_10 < _totalAirDrop);\n    require(1 == 0xff & owner_e[msg.sender]);\n    require(varg2 <= _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = _balanceOf[_setTotalAirDrop] - varg2;\n    require(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    require(varg2 + stor_10 >= stor_10);\n    stor_10 += varg2;\n    emit AirDrop(0, varg1, varg2);\n    return varg2;\n}\n\nfunction mint(address varg0, uint256 varg1) public nonPayable { \n    require(0xff & _mintAgents[msg.sender]);\n    require(!_mintingFinished);\n    require(varg1 <= _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = _balanceOf[_setTotalAirDrop] - varg1;\n    require(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(0, varg0, varg1);\n}\n\nfunction mintAgents(address varg0) public nonPayable { \n    return 0xff & _mintAgents[varg0];\n}\n\nfunction setMintAgent(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(!_mintingFinished);\n    _mintAgents[varg0] = varg1 | ~0xff & _mintAgents[varg0];\n    emit MintingAgentChanged(varg0, varg1);\n}\n\nfunction enableMint() public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    _mintingFinished = 0;\n}\n\nfunction setTokenInformation(string varg0, string varg1) public nonPayable { \n    v0 = new bytes[](varg0.length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg0, varg0.length);\n    v2 = new bytes[](varg1.length);\n    CALLDATACOPY(v2.data, 36 + varg1, varg1.length);\n    require(msg.sender == _setTotalAirDrop);\n    v3 = v4 = v0.data;\n    if (31 < v0.length) {\n        _name.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v4 + v0.length > v3) {\n                STORAGE[v5] = MEM[v3];\n                v3 += 32;\n                v5 += 1;\n            }\n        }\n    } else {\n        _name.length = v0.length + v0.length | ~0xff & MEM[v4];\n    }\n    while (v6 + (31 + _name.length >> 5) > v5) {\n        STORAGE[v5] = 0;\n        v5 += 1;\n    }\n    v7 = v8 = 5170;\n    if (31 < MEM[5138]) {\n        _symbol.length = 1 + (MEM[5138] + MEM[5138]);\n        if (MEM[5138]) {\n            while (v8 + MEM[5138] > v7) {\n                STORAGE[v9] = MEM[v7];\n                v7 += 32;\n                v9 += 1;\n            }\n        }\n    } else {\n        _symbol.length = MEM[5138] + MEM[5138] | ~0xff & MEM[v8];\n    }\n    while (v10 + (31 + _symbol.length >> 5) > v9) {\n        STORAGE[v9] = 0;\n        v9 += 1;\n    }\n    v11 = new array[]((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1);\n    v12 = v13 = v11.data;\n    if ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v12] = STORAGE[v14];\n                v14 += 1;\n                v12 += 32;\n            } while (v13 + ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) <= v12);\n        } else {\n            MEM[v13] = _name.length >> 8 << 8;\n        }\n    }\n    v12 = new array[]((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1);\n    v15 = v16 = v12.data;\n    if ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v15] = STORAGE[v17];\n                v17 += 1;\n                v15 += 32;\n            } while (v16 + ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) <= v15);\n        } else {\n            MEM[v16] = _symbol.length >> 8 << 8;\n        }\n    }\n    emit UpdatedTokenInformation(v11, v12);\n}\n\nfunction crowdDistribution() public payable { \n    require(msg.sender);\n    require(msg.sender.code.size <= 0);\n    require(msg.value);\n    require(_totalCrowdCoin > _crowdDistribution);\n    require(!_finishCrowdCoin);\n    v0 = 0x1ae5(msg.value);\n    require(v0);\n    require(v0 + _crowdDistribution >= _crowdDistribution);\n    _crowdDistribution += v0;\n    require(v0 <= _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = _balanceOf[_setTotalAirDrop] - v0;\n    require(v0 + _balanceOf[msg.sender] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] += v0;\n    v1 = v2 = 7086;\n    v3 = v4 = 100;\n    v5 = v6 = _SafeMul(10, _totalCrowdCoin);\n    while (v3 <= 0) {\n        require(v3 > 0);\n        if (v3) {\n            break;\n        }\n        assert(v3);\n        v7 = v5 / v3;\n        if (v3) {\n            break;\n        }\n        assert(v3);\n        if (v5 == v3 * v7 + v5 % v3) {\n            break;\n        }\n        require(v5 == v3 * v7 + v5 % v3);\n        if (_crowdDistribution >= _totalCrowdCoin) {\n            _finishCrowdCoin = 1;\n            goto 0x13ceB0x5f2;\n        }\n        emit 0xdd4c9ffc7228ed4c6bef4371026f1539b2ab7fda1670bd62174406b068e0417(0, msg.sender, v0);\n        return v0;\n        if (_crowdDistribution < v7) {\n            stor_19 = 4;\n        }\n        goto {'0x1c65B0x13b6B0x5f2', '0x1baeB0x13b6B0x5f2', '0x1bdbB0x13b6B0x5f2', '0x1c09B0x13b6B0x5f2', '0x1c37B0x13b6B0x5f2'};\n        if (_crowdDistribution >= v7) {\n            v1 = v8 = 7131;\n            v3 = v9 = 100;\n            v5 = v10 = _SafeMul(20, _totalCrowdCoin);\n        } else {\n            stor_19 = 0;\n        }\n        if (_crowdDistribution >= v7) {\n            v1 = v11 = 7177;\n            v3 = v12 = 100;\n            v5 = v13 = _SafeMul(30, _totalCrowdCoin);\n        } else {\n            stor_19 = 1;\n            goto 0x1c74B0x13b6B0x5f2;\n        }\n        if (_crowdDistribution >= v7) {\n            v1 = v14 = 7223;\n            v3 = v15 = 100;\n            v5 = v16 = _SafeMul(40, _totalCrowdCoin);\n        } else {\n            stor_19 = 2;\n            goto 0x1c74B0x13b6B0x5f2;\n        }\n        if (_crowdDistribution >= v7) {\n            v1 = 7269;\n            v3 = 100;\n            v5 = _SafeMul(50, _totalCrowdCoin);\n        } else {\n            stor_19 = 3;\n            goto 0x1c74B0x13b6B0x5f2;\n        }\n    }\n}\n\nfunction setDistributeAgent(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(varg0);\n    owner_e[varg0] = varg1 | ~0xff & owner_e[varg0];\n}\n\nfunction recycle(address varg0, uint256 varg1) public nonPayable { \n    require(0xff & _recycle[msg.sender]);\n    require(varg0);\n    require(varg1 <= _balanceOf[varg0]);\n    v0 = _SafeAdd(varg1, _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = v0;\n    require(varg1 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    emit Transfer(varg0, _setTotalAirDrop, varg1);\n}\n\nfunction releaseTokenTransfer() public nonPayable { \n    require(msg.sender == _releaseAgent);\n    require(msg.sender == _releaseAgent);\n    _released = 1;\n}\n\nfunction tokenName() public nonPayable { \n    v0 = new bytes[]((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction totalCrowdCoin() public nonPayable { \n    return _totalCrowdCoin;\n}\n\nfunction addAdmin(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    _recycle[varg0] = 0x1 | ~0xff & _recycle[varg0];\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction withdrawAll() public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    v0 = _setTotalAirDrop.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction transferAgents(address varg0) public nonPayable { \n    return 0xff & _transferAgents[varg0];\n}\n\nfunction getOwner() public nonPayable { \n    return _setTotalAirDrop;\n}\n\nfunction owner() public nonPayable { \n    return _setTotalAirDrop;\n}\n\nfunction totalFoundCoin() public nonPayable { \n    return _totalFoundCoin;\n}\n\nfunction setTotalAirDrop(uint256 varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    _totalAirDrop = varg0;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction released() public nonPayable { \n    return _released;\n}\n\nfunction removeDeveloper(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    owner_5[varg0] = ~0xff & owner_5[varg0];\n}\n\nfunction finishCrowdCoin() public nonPayable { \n    return _finishCrowdCoin;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    if (msg.sender != _setTotalAirDrop) {\n        if (!(0xff & owner_5[msg.sender])) {\n            if (!(0xff & owner_6[msg.sender])) {\n                if (stor_a) {\n                    require(varg1 < stor_a);\n                }\n            } else {\n                require(varg1 < stor_9);\n            }\n        } else {\n            require(varg1 < _transfer);\n        }\n        if (!_released) {\n            require(0xff & _transferAgents[msg.sender]);\n        }\n    }\n    require(msg.data.length >= 68);\n    require(varg1 >= 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    v0 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v0;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalDevCoin() public nonPayable { \n    return _totalDevCoin;\n}\n\nfunction getTotalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction releaseAgent() public nonPayable { \n    return _releaseAgent;\n}\n\nfunction removeFound(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    owner_6[varg0] = ~0xff & owner_6[varg0];\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction isToken() public nonPayable { \n    return 1;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    if (varg0) {\n        _setTotalAirDrop = varg0;\n        goto 0x2700x88e;\n    }\n}\n\nfunction totalAirDrop() public nonPayable { \n    return _totalAirDrop;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x2f652a3) {\n            setTransferAgent(address,bool);\n        } else if (0x562b9f7 == function_selector) {\n            withdrawAmount(uint256);\n        } else if (0x5d2035b == function_selector) {\n            mintingFinished();\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xbc311ea == function_selector) {\n            addFound(address);\n        } else if (0xf67f3f7 == function_selector) {\n            distributeToDev(address,uint256);\n        } else if (0x12136918 == function_selector) {\n            setMaxTranferLimit(uint256,uint256,uint256);\n        } else if (0x1785f53c == function_selector) {\n            removeAdmin(address);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x185917c5 == function_selector) {\n            distributeToFound(address,uint256);\n        } else if (0x22fbf1e8 == function_selector) {\n            addDeveloper(address);\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x29ff4f53 == function_selector) {\n            setReleaseAgent(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x32c0fba5 == function_selector) {\n            airDrop(address,address,uint256);\n        } else if (0x40c10f19 == function_selector) {\n            mint(address,uint256);\n        } else if (0x42c1867b == function_selector) {\n            mintAgents(address);\n        } else if (0x43214675 == function_selector) {\n            setMintAgent(address,bool);\n        } else if (0x44b28d59 == function_selector) {\n            enableMint();\n        } else if (0x4eee966f == function_selector) {\n            setTokenInformation(string,string);\n        } else if (0x4efeb2cf == function_selector) {\n            crowdDistribution();\n        } else if (0x56963c31 == function_selector) {\n            setDistributeAgent(address,bool);\n        } else if (0x5d36d182 == function_selector) {\n            recycle(address,uint256);\n        } else if (0x5f412d4f == function_selector) {\n            releaseTokenTransfer();\n        } else if (0x6c02a931 == function_selector) {\n            tokenName();\n        } else if (0x6e224034 == function_selector) {\n            totalCrowdCoin();\n        } else if (0x70480275 == function_selector) {\n            addAdmin(address);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x853828b6 == function_selector) {\n            withdrawAll();\n        } else if (0x867c2857 == function_selector) {\n            transferAgents(address);\n        } else if (0x893d20e8 == function_selector) {\n            getOwner();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x8fbe382c == function_selector) {\n            totalFoundCoin();\n        } else if (0x92a69395 == function_selector) {\n            setTotalAirDrop(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x96132521 == function_selector) {\n            released();\n        } else if (0x9e23c209 == function_selector) {\n            removeDeveloper(address);\n        } else if (0xa0cde1f0 == function_selector) {\n            finishCrowdCoin();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb77da4a0 == function_selector) {\n            totalDevCoin();\n        } else if (0xc4e41b22 == function_selector) {\n            getTotalSupply();\n        } else if (0xd1f276d3 == function_selector) {\n            releaseAgent();\n        } else if (0xd3e6dda7 == function_selector) {\n            removeFound(address);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xeefa597b == function_selector) {\n            isToken();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfb6b18c0 == function_selector) {\n            totalAirDrop();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 12:02 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _recycle; // STORAGE[0x4]\nmapping (uint256 => [uint256]) owner_5; // STORAGE[0x5]\nmapping (uint256 => [uint256]) owner_6; // STORAGE[0x6]\nuint256 _transfer; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _transferAgents; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _mintAgents; // STORAGE[0xd]\nmapping (uint256 => [uint256]) owner_e; // STORAGE[0xe]\nuint256 _airDrop; // STORAGE[0xf]\nuint256 stor_10; // STORAGE[0x10]\nuint256 _totalAirDrop; // STORAGE[0x11]\nuint256 _crowdDistribution; // STORAGE[0x13]\nuint256 _totalCrowdCoin; // STORAGE[0x14]\nuint256 stor_15; // STORAGE[0x15]\nuint256 _totalDevCoin; // STORAGE[0x16]\nuint256 stor_17; // STORAGE[0x17]\nuint256 _totalFoundCoin; // STORAGE[0x18]\nuint256 stor_19; // STORAGE[0x19]\nuint256[] _name; // STORAGE[0x1a]\nuint256[] _symbol; // STORAGE[0x1b]\nuint256 _decimals; // STORAGE[0x1c]\nuint8 _mintingFinished; // STORAGE[0xc] bytes 0 to 0\nuint8 _finishCrowdCoin; // STORAGE[0x12] bytes 0 to 0\naddress _setTotalAirDrop; // STORAGE[0x3] bytes 0 to 19\naddress _releaseAgent; // STORAGE[0x7] bytes 0 to 19\nuint8 _released; // STORAGE[0x7] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nAirDrop(address, address, uint256);\nMintingAgentChanged(address, bool);\nUpdatedTokenInformation(string, string);\nTransfer(address, address, uint256);\n\nfunction 0x1ae5(uint256 varg0) private { \n    if (0 != stor_19) {\n        if (1 != stor_19) {\n            if (2 != stor_19) {\n                if (3 != stor_19) {\n                    if (4 != stor_19) {\n                        return 0;\n                    } else {\n                        v0 = v1 = _SafeMul(10000, varg0);\n                    }\n                } else {\n                    v0 = v2 = _SafeMul(15000, varg0);\n                }\n            } else {\n                v0 = v3 = _SafeMul(20000, varg0);\n            }\n        } else {\n            v0 = v4 = _SafeMul(30000, varg0);\n        }\n    } else {\n        v0 = v5 = _SafeMul(50000, varg0);\n    }\n    return v0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    v1 = v0 < varg1;\n    v2 = v3 = v0 >= varg1;\n    if (v0 >= varg1) {\n        v2 = v4 = v0 >= varg0;\n    }\n    require(v2);\n    return v0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * varg1;\n    v1 = !varg1;\n    if (v1) {\n        require(!varg1);\n    } else {\n        assert(varg1);\n        require(v0 / varg1 == varg0);\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction setTransferAgent(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(!_released);\n    _transferAgents[varg0] = varg1 | ~0xff & _transferAgents[varg0];\n}\n\nfunction withdrawAmount(uint256 varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    v0 = _setTotalAirDrop.call().value(varg0).gas(2300 * !varg0);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction mintingFinished() public nonPayable { \n    return _mintingFinished;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1;\n    if (varg1) {\n        v0 = v2 = _allowance[varg0];\n    }\n    require(!v0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction addFound(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    owner_6[varg0] = 0x1 | ~0xff & owner_6[varg0];\n}\n\nfunction distributeToDev(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(varg1 + stor_15 < _totalDevCoin);\n    require(varg1 <= _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = _balanceOf[_setTotalAirDrop] - varg1;\n    require(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    require(varg1 + stor_15 >= stor_15);\n    stor_15 += varg1;\n    require(msg.sender == _setTotalAirDrop);\n    owner_5[varg0] = 0x1 | ~0xff & owner_5[varg0];\n    emit Transfer(0, varg0, varg1);\n    return varg1;\n}\n\nfunction setMaxTranferLimit(uint256 varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(varg0 < _totalSupply);\n    require(varg1 < _totalSupply);\n    require(varg2 < _totalSupply);\n    _transfer = varg0;\n    stor_9 = varg1;\n    stor_a = varg2;\n}\n\nfunction removeAdmin(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    _recycle[varg0] = ~0xff & _recycle[varg0];\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction distributeToFound(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(varg1 + stor_17 < _totalFoundCoin);\n    require(varg1 <= _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = _balanceOf[_setTotalAirDrop] - varg1;\n    require(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    require(varg1 + stor_17 >= stor_17);\n    stor_17 += varg1;\n    require(msg.sender == _setTotalAirDrop);\n    owner_6[varg0] = 0x1 | ~0xff & owner_6[varg0];\n    emit Transfer(0, varg0, varg1);\n    return varg1;\n}\n\nfunction addDeveloper(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    owner_5[varg0] = 0x1 | ~0xff & owner_5[varg0];\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    if (_setTotalAirDrop != varg0) {\n        if (!(0xff & owner_5[msg.sender])) {\n            if (!(0xff & owner_6[msg.sender])) {\n                if (stor_a) {\n                    require(varg2 < stor_a);\n                }\n            } else {\n                require(varg2 < stor_9);\n            }\n        } else {\n            require(varg2 < _transfer);\n        }\n        if (!_released) {\n            require(0xff & _transferAgents[varg0]);\n        }\n    }\n    require(_allowance[msg.sender] >= varg2);\n    require(varg2 >= 0);\n    v0 = _SafeAdd(varg2, _balanceOf[varg1]);\n    _balanceOf[varg1] = v0;\n    require(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction setReleaseAgent(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(!_released);\n    _releaseAgent = varg0;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction airDrop(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1);\n    require(varg2 <= _airDrop);\n    require(varg2 + stor_10 < _totalAirDrop);\n    require(1 == 0xff & owner_e[msg.sender]);\n    require(varg2 <= _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = _balanceOf[_setTotalAirDrop] - varg2;\n    require(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    require(varg2 + stor_10 >= stor_10);\n    stor_10 += varg2;\n    emit AirDrop(0, varg1, varg2);\n    return varg2;\n}\n\nfunction mint(address varg0, uint256 varg1) public nonPayable { \n    require(0xff & _mintAgents[msg.sender]);\n    require(!_mintingFinished);\n    require(varg1 <= _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = _balanceOf[_setTotalAirDrop] - varg1;\n    require(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(0, varg0, varg1);\n}\n\nfunction mintAgents(address varg0) public nonPayable { \n    return 0xff & _mintAgents[varg0];\n}\n\nfunction setMintAgent(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(!_mintingFinished);\n    _mintAgents[varg0] = varg1 | ~0xff & _mintAgents[varg0];\n    emit MintingAgentChanged(varg0, varg1);\n}\n\nfunction enableMint() public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    _mintingFinished = 0;\n}\n\nfunction setTokenInformation(string varg0, string varg1) public nonPayable { \n    v0 = new bytes[](varg0.length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg0, varg0.length);\n    v2 = new bytes[](varg1.length);\n    CALLDATACOPY(v2.data, 36 + varg1, varg1.length);\n    require(msg.sender == _setTotalAirDrop);\n    v3 = v4 = v0.data;\n    if (31 < v0.length) {\n        _name.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v4 + v0.length > v3) {\n                STORAGE[v5] = MEM[v3];\n                v3 += 32;\n                v5 += 1;\n            }\n        }\n    } else {\n        _name.length = v0.length + v0.length | ~0xff & MEM[v4];\n    }\n    while (v6 + (31 + _name.length >> 5) > v5) {\n        STORAGE[v5] = 0;\n        v5 += 1;\n    }\n    v7 = v8 = 5170;\n    if (31 < MEM[5138]) {\n        _symbol.length = 1 + (MEM[5138] + MEM[5138]);\n        if (MEM[5138]) {\n            while (v8 + MEM[5138] > v7) {\n                STORAGE[v9] = MEM[v7];\n                v7 += 32;\n                v9 += 1;\n            }\n        }\n    } else {\n        _symbol.length = MEM[5138] + MEM[5138] | ~0xff & MEM[v8];\n    }\n    while (v10 + (31 + _symbol.length >> 5) > v9) {\n        STORAGE[v9] = 0;\n        v9 += 1;\n    }\n    v11 = new array[]((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1);\n    v12 = v13 = v11.data;\n    if ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v12] = STORAGE[v14];\n                v14 += 1;\n                v12 += 32;\n            } while (v13 + ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) <= v12);\n        } else {\n            MEM[v13] = _name.length >> 8 << 8;\n        }\n    }\n    v12 = new array[]((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1);\n    v15 = v16 = v12.data;\n    if ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v15] = STORAGE[v17];\n                v17 += 1;\n                v15 += 32;\n            } while (v16 + ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) <= v15);\n        } else {\n            MEM[v16] = _symbol.length >> 8 << 8;\n        }\n    }\n    emit UpdatedTokenInformation(v11, v12);\n}\n\nfunction crowdDistribution() public payable { \n    require(msg.sender);\n    require(msg.sender.code.size <= 0);\n    require(msg.value);\n    require(_totalCrowdCoin > _crowdDistribution);\n    require(!_finishCrowdCoin);\n    v0 = 0x1ae5(msg.value);\n    require(v0);\n    require(v0 + _crowdDistribution >= _crowdDistribution);\n    _crowdDistribution += v0;\n    require(v0 <= _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = _balanceOf[_setTotalAirDrop] - v0;\n    require(v0 + _balanceOf[msg.sender] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] += v0;\n    v1 = v2 = 7086;\n    v3 = v4 = 100;\n    v5 = v6 = _SafeMul(10, _totalCrowdCoin);\n    while (v3 <= 0) {\n        require(v3 > 0);\n        if (v3) {\n            break;\n        }\n        assert(v3);\n        v7 = v5 / v3;\n        if (v3) {\n            break;\n        }\n        assert(v3);\n        if (v5 == v3 * v7 + v5 % v3) {\n            break;\n        }\n        require(v5 == v3 * v7 + v5 % v3);\n        if (_crowdDistribution >= _totalCrowdCoin) {\n            _finishCrowdCoin = 1;\n            goto 0x13ceB0x5f2;\n        }\n        emit 0xdd4c9ffc7228ed4c6bef4371026f1539b2ab7fda1670bd62174406b068e0417(0, msg.sender, v0);\n        return v0;\n        if (_crowdDistribution < v7) {\n            stor_19 = 4;\n        }\n        goto {'0x1c65B0x13b6B0x5f2', '0x1baeB0x13b6B0x5f2', '0x1bdbB0x13b6B0x5f2', '0x1c09B0x13b6B0x5f2', '0x1c37B0x13b6B0x5f2'};\n        if (_crowdDistribution >= v7) {\n            v1 = v8 = 7131;\n            v3 = v9 = 100;\n            v5 = v10 = _SafeMul(20, _totalCrowdCoin);\n        } else {\n            stor_19 = 0;\n        }\n        if (_crowdDistribution >= v7) {\n            v1 = v11 = 7177;\n            v3 = v12 = 100;\n            v5 = v13 = _SafeMul(30, _totalCrowdCoin);\n        } else {\n            stor_19 = 1;\n            goto 0x1c74B0x13b6B0x5f2;\n        }\n        if (_crowdDistribution >= v7) {\n            v1 = v14 = 7223;\n            v3 = v15 = 100;\n            v5 = v16 = _SafeMul(40, _totalCrowdCoin);\n        } else {\n            stor_19 = 2;\n            goto 0x1c74B0x13b6B0x5f2;\n        }\n        if (_crowdDistribution >= v7) {\n            v1 = 7269;\n            v3 = 100;\n            v5 = _SafeMul(50, _totalCrowdCoin);\n        } else {\n            stor_19 = 3;\n            goto 0x1c74B0x13b6B0x5f2;\n        }\n    }\n}\n\nfunction setDistributeAgent(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(varg0);\n    owner_e[varg0] = varg1 | ~0xff & owner_e[varg0];\n}\n\nfunction recycle(address varg0, uint256 varg1) public nonPayable { \n    require(0xff & _recycle[msg.sender]);\n    require(varg0);\n    require(varg1 <= _balanceOf[varg0]);\n    v0 = _SafeAdd(varg1, _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = v0;\n    require(varg1 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    emit Transfer(varg0, _setTotalAirDrop, varg1);\n}\n\nfunction releaseTokenTransfer() public nonPayable { \n    require(msg.sender == _releaseAgent);\n    require(msg.sender == _releaseAgent);\n    _released = 1;\n}\n\nfunction tokenName() public nonPayable { \n    v0 = new bytes[]((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction totalCrowdCoin() public nonPayable { \n    return _totalCrowdCoin;\n}\n\nfunction addAdmin(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    _recycle[varg0] = 0x1 | ~0xff & _recycle[varg0];\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction withdrawAll() public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    v0 = _setTotalAirDrop.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction transferAgents(address varg0) public nonPayable { \n    return 0xff & _transferAgents[varg0];\n}\n\nfunction getOwner() public nonPayable { \n    return _setTotalAirDrop;\n}\n\nfunction owner() public nonPayable { \n    return _setTotalAirDrop;\n}\n\nfunction totalFoundCoin() public nonPayable { \n    return _totalFoundCoin;\n}\n\nfunction setTotalAirDrop(uint256 varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    _totalAirDrop = varg0;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction released() public nonPayable { \n    return _released;\n}\n\nfunction removeDeveloper(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    owner_5[varg0] = ~0xff & owner_5[varg0];\n}\n\nfunction finishCrowdCoin() public nonPayable { \n    return _finishCrowdCoin;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    if (msg.sender != _setTotalAirDrop) {\n        if (!(0xff & owner_5[msg.sender])) {\n            if (!(0xff & owner_6[msg.sender])) {\n                if (stor_a) {\n                    require(varg1 < stor_a);\n                }\n            } else {\n                require(varg1 < stor_9);\n            }\n        } else {\n            require(varg1 < _transfer);\n        }\n        if (!_released) {\n            require(0xff & _transferAgents[msg.sender]);\n        }\n    }\n    require(msg.data.length >= 68);\n    require(varg1 >= 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    v0 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v0;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalDevCoin() public nonPayable { \n    return _totalDevCoin;\n}\n\nfunction getTotalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction releaseAgent() public nonPayable { \n    return _releaseAgent;\n}\n\nfunction removeFound(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    owner_6[varg0] = ~0xff & owner_6[varg0];\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction isToken() public nonPayable { \n    return 1;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    if (varg0) {\n        _setTotalAirDrop = varg0;\n        goto 0x2700x88e;\n    }\n}\n\nfunction totalAirDrop() public nonPayable { \n    return _totalAirDrop;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x2f652a3) {\n            setTransferAgent(address,bool);\n        } else if (0x562b9f7 == function_selector) {\n            withdrawAmount(uint256);\n        } else if (0x5d2035b == function_selector) {\n            mintingFinished();\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xbc311ea == function_selector) {\n            addFound(address);\n        } else if (0xf67f3f7 == function_selector) {\n            distributeToDev(address,uint256);\n        } else if (0x12136918 == function_selector) {\n            setMaxTranferLimit(uint256,uint256,uint256);\n        } else if (0x1785f53c == function_selector) {\n            removeAdmin(address);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x185917c5 == function_selector) {\n            distributeToFound(address,uint256);\n        } else if (0x22fbf1e8 == function_selector) {\n            addDeveloper(address);\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x29ff4f53 == function_selector) {\n            setReleaseAgent(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x32c0fba5 == function_selector) {\n            airDrop(address,address,uint256);\n        } else if (0x40c10f19 == function_selector) {\n            mint(address,uint256);\n        } else if (0x42c1867b == function_selector) {\n            mintAgents(address);\n        } else if (0x43214675 == function_selector) {\n            setMintAgent(address,bool);\n        } else if (0x44b28d59 == function_selector) {\n            enableMint();\n        } else if (0x4eee966f == function_selector) {\n            setTokenInformation(string,string);\n        } else if (0x4efeb2cf == function_selector) {\n            crowdDistribution();\n        } else if (0x56963c31 == function_selector) {\n            setDistributeAgent(address,bool);\n        } else if (0x5d36d182 == function_selector) {\n            recycle(address,uint256);\n        } else if (0x5f412d4f == function_selector) {\n            releaseTokenTransfer();\n        } else if (0x6c02a931 == function_selector) {\n            tokenName();\n        } else if (0x6e224034 == function_selector) {\n            totalCrowdCoin();\n        } else if (0x70480275 == function_selector) {\n            addAdmin(address);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x853828b6 == function_selector) {\n            withdrawAll();\n        } else if (0x867c2857 == function_selector) {\n            transferAgents(address);\n        } else if (0x893d20e8 == function_selector) {\n            getOwner();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x8fbe382c == function_selector) {\n            totalFoundCoin();\n        } else if (0x92a69395 == function_selector) {\n            setTotalAirDrop(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x96132521 == function_selector) {\n            released();\n        } else if (0x9e23c209 == function_selector) {\n            removeDeveloper(address);\n        } else if (0xa0cde1f0 == function_selector) {\n            finishCrowdCoin();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb77da4a0 == function_selector) {\n            totalDevCoin();\n        } else if (0xc4e41b22 == function_selector) {\n            getTotalSupply();\n        } else if (0xd1f276d3 == function_selector) {\n            releaseAgent();\n        } else if (0xd3e6dda7 == function_selector) {\n            removeFound(address);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xeefa597b == function_selector) {\n            isToken();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfb6b18c0 == function_selector) {\n            totalAirDrop();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 12:02 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _recycle; // STORAGE[0x4]\nmapping (uint256 => [uint256]) owner_5; // STORAGE[0x5]\nmapping (uint256 => [uint256]) owner_6; // STORAGE[0x6]\nuint256 _transfer; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _transferAgents; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _mintAgents; // STORAGE[0xd]\nmapping (uint256 => [uint256]) owner_e; // STORAGE[0xe]\nuint256 _airDrop; // STORAGE[0xf]\nuint256 stor_10; // STORAGE[0x10]\nuint256 _totalAirDrop; // STORAGE[0x11]\nuint256 _crowdDistribution; // STORAGE[0x13]\nuint256 _totalCrowdCoin; // STORAGE[0x14]\nuint256 stor_15; // STORAGE[0x15]\nuint256 _totalDevCoin; // STORAGE[0x16]\nuint256 stor_17; // STORAGE[0x17]\nuint256 _totalFoundCoin; // STORAGE[0x18]\nuint256 stor_19; // STORAGE[0x19]\nuint256[] _name; // STORAGE[0x1a]\nuint256[] _symbol; // STORAGE[0x1b]\nuint256 _decimals; // STORAGE[0x1c]\nuint8 _mintingFinished; // STORAGE[0xc] bytes 0 to 0\nuint8 _finishCrowdCoin; // STORAGE[0x12] bytes 0 to 0\naddress _setTotalAirDrop; // STORAGE[0x3] bytes 0 to 19\naddress _releaseAgent; // STORAGE[0x7] bytes 0 to 19\nuint8 _released; // STORAGE[0x7] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nAirDrop(address, address, uint256);\nMintingAgentChanged(address, bool);\nUpdatedTokenInformation(string, string);\nTransfer(address, address, uint256);\n\nfunction 0x1ae5(uint256 varg0) private { \n    if (0 != stor_19) {\n        if (1 != stor_19) {\n            if (2 != stor_19) {\n                if (3 != stor_19) {\n                    if (4 != stor_19) {\n                        return 0;\n                    } else {\n                        v0 = v1 = _SafeMul(10000, varg0);\n                    }\n                } else {\n                    v0 = v2 = _SafeMul(15000, varg0);\n                }\n            } else {\n                v0 = v3 = _SafeMul(20000, varg0);\n            }\n        } else {\n            v0 = v4 = _SafeMul(30000, varg0);\n        }\n    } else {\n        v0 = v5 = _SafeMul(50000, varg0);\n    }\n    return v0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    v1 = v0 < varg1;\n    v2 = v3 = v0 >= varg1;\n    if (v0 >= varg1) {\n        v2 = v4 = v0 >= varg0;\n    }\n    require(v2);\n    return v0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * varg1;\n    v1 = !varg1;\n    if (v1) {\n        require(!varg1);\n    } else {\n        assert(varg1);\n        require(v0 / varg1 == varg0);\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction setTransferAgent(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(!_released);\n    _transferAgents[varg0] = varg1 | ~0xff & _transferAgents[varg0];\n}\n\nfunction withdrawAmount(uint256 varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    v0 = _setTotalAirDrop.call().value(varg0).gas(2300 * !varg0);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction mintingFinished() public nonPayable { \n    return _mintingFinished;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1;\n    if (varg1) {\n        v0 = v2 = _allowance[varg0];\n    }\n    require(!v0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction addFound(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    owner_6[varg0] = 0x1 | ~0xff & owner_6[varg0];\n}\n\nfunction distributeToDev(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(varg1 + stor_15 < _totalDevCoin);\n    require(varg1 <= _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = _balanceOf[_setTotalAirDrop] - varg1;\n    require(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    require(varg1 + stor_15 >= stor_15);\n    stor_15 += varg1;\n    require(msg.sender == _setTotalAirDrop);\n    owner_5[varg0] = 0x1 | ~0xff & owner_5[varg0];\n    emit Transfer(0, varg0, varg1);\n    return varg1;\n}\n\nfunction setMaxTranferLimit(uint256 varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(varg0 < _totalSupply);\n    require(varg1 < _totalSupply);\n    require(varg2 < _totalSupply);\n    _transfer = varg0;\n    stor_9 = varg1;\n    stor_a = varg2;\n}\n\nfunction removeAdmin(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    _recycle[varg0] = ~0xff & _recycle[varg0];\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction distributeToFound(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(varg1 + stor_17 < _totalFoundCoin);\n    require(varg1 <= _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = _balanceOf[_setTotalAirDrop] - varg1;\n    require(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    require(varg1 + stor_17 >= stor_17);\n    stor_17 += varg1;\n    require(msg.sender == _setTotalAirDrop);\n    owner_6[varg0] = 0x1 | ~0xff & owner_6[varg0];\n    emit Transfer(0, varg0, varg1);\n    return varg1;\n}\n\nfunction addDeveloper(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    owner_5[varg0] = 0x1 | ~0xff & owner_5[varg0];\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    if (_setTotalAirDrop != varg0) {\n        if (!(0xff & owner_5[msg.sender])) {\n            if (!(0xff & owner_6[msg.sender])) {\n                if (stor_a) {\n                    require(varg2 < stor_a);\n                }\n            } else {\n                require(varg2 < stor_9);\n            }\n        } else {\n            require(varg2 < _transfer);\n        }\n        if (!_released) {\n            require(0xff & _transferAgents[varg0]);\n        }\n    }\n    require(_allowance[msg.sender] >= varg2);\n    require(varg2 >= 0);\n    v0 = _SafeAdd(varg2, _balanceOf[varg1]);\n    _balanceOf[varg1] = v0;\n    require(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction setReleaseAgent(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(!_released);\n    _releaseAgent = varg0;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction airDrop(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1);\n    require(varg2 <= _airDrop);\n    require(varg2 + stor_10 < _totalAirDrop);\n    require(1 == 0xff & owner_e[msg.sender]);\n    require(varg2 <= _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = _balanceOf[_setTotalAirDrop] - varg2;\n    require(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    require(varg2 + stor_10 >= stor_10);\n    stor_10 += varg2;\n    emit AirDrop(0, varg1, varg2);\n    return varg2;\n}\n\nfunction mint(address varg0, uint256 varg1) public nonPayable { \n    require(0xff & _mintAgents[msg.sender]);\n    require(!_mintingFinished);\n    require(varg1 <= _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = _balanceOf[_setTotalAirDrop] - varg1;\n    require(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(0, varg0, varg1);\n}\n\nfunction mintAgents(address varg0) public nonPayable { \n    return 0xff & _mintAgents[varg0];\n}\n\nfunction setMintAgent(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(!_mintingFinished);\n    _mintAgents[varg0] = varg1 | ~0xff & _mintAgents[varg0];\n    emit MintingAgentChanged(varg0, varg1);\n}\n\nfunction enableMint() public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    _mintingFinished = 0;\n}\n\nfunction setTokenInformation(string varg0, string varg1) public nonPayable { \n    v0 = new bytes[](varg0.length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg0, varg0.length);\n    v2 = new bytes[](varg1.length);\n    CALLDATACOPY(v2.data, 36 + varg1, varg1.length);\n    require(msg.sender == _setTotalAirDrop);\n    v3 = v4 = v0.data;\n    if (31 < v0.length) {\n        _name.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v4 + v0.length > v3) {\n                STORAGE[v5] = MEM[v3];\n                v3 += 32;\n                v5 += 1;\n            }\n        }\n    } else {\n        _name.length = v0.length + v0.length | ~0xff & MEM[v4];\n    }\n    while (v6 + (31 + _name.length >> 5) > v5) {\n        STORAGE[v5] = 0;\n        v5 += 1;\n    }\n    v7 = v8 = 5170;\n    if (31 < MEM[5138]) {\n        _symbol.length = 1 + (MEM[5138] + MEM[5138]);\n        if (MEM[5138]) {\n            while (v8 + MEM[5138] > v7) {\n                STORAGE[v9] = MEM[v7];\n                v7 += 32;\n                v9 += 1;\n            }\n        }\n    } else {\n        _symbol.length = MEM[5138] + MEM[5138] | ~0xff & MEM[v8];\n    }\n    while (v10 + (31 + _symbol.length >> 5) > v9) {\n        STORAGE[v9] = 0;\n        v9 += 1;\n    }\n    v11 = new array[]((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1);\n    v12 = v13 = v11.data;\n    if ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v12] = STORAGE[v14];\n                v14 += 1;\n                v12 += 32;\n            } while (v13 + ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) <= v12);\n        } else {\n            MEM[v13] = _name.length >> 8 << 8;\n        }\n    }\n    v12 = new array[]((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1);\n    v15 = v16 = v12.data;\n    if ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v15] = STORAGE[v17];\n                v17 += 1;\n                v15 += 32;\n            } while (v16 + ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) <= v15);\n        } else {\n            MEM[v16] = _symbol.length >> 8 << 8;\n        }\n    }\n    emit UpdatedTokenInformation(v11, v12);\n}\n\nfunction crowdDistribution() public payable { \n    require(msg.sender);\n    require(msg.sender.code.size <= 0);\n    require(msg.value);\n    require(_totalCrowdCoin > _crowdDistribution);\n    require(!_finishCrowdCoin);\n    v0 = 0x1ae5(msg.value);\n    require(v0);\n    require(v0 + _crowdDistribution >= _crowdDistribution);\n    _crowdDistribution += v0;\n    require(v0 <= _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = _balanceOf[_setTotalAirDrop] - v0;\n    require(v0 + _balanceOf[msg.sender] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] += v0;\n    v1 = v2 = 7086;\n    v3 = v4 = 100;\n    v5 = v6 = _SafeMul(10, _totalCrowdCoin);\n    while (v3 <= 0) {\n        require(v3 > 0);\n        if (v3) {\n            break;\n        }\n        assert(v3);\n        v7 = v5 / v3;\n        if (v3) {\n            break;\n        }\n        assert(v3);\n        if (v5 == v3 * v7 + v5 % v3) {\n            break;\n        }\n        require(v5 == v3 * v7 + v5 % v3);\n        if (_crowdDistribution >= _totalCrowdCoin) {\n            _finishCrowdCoin = 1;\n            goto 0x13ceB0x5f2;\n        }\n        emit 0xdd4c9ffc7228ed4c6bef4371026f1539b2ab7fda1670bd62174406b068e0417(0, msg.sender, v0);\n        return v0;\n        if (_crowdDistribution < v7) {\n            stor_19 = 4;\n        }\n        goto {'0x1c65B0x13b6B0x5f2', '0x1baeB0x13b6B0x5f2', '0x1bdbB0x13b6B0x5f2', '0x1c09B0x13b6B0x5f2', '0x1c37B0x13b6B0x5f2'};\n        if (_crowdDistribution >= v7) {\n            v1 = v8 = 7131;\n            v3 = v9 = 100;\n            v5 = v10 = _SafeMul(20, _totalCrowdCoin);\n        } else {\n            stor_19 = 0;\n        }\n        if (_crowdDistribution >= v7) {\n            v1 = v11 = 7177;\n            v3 = v12 = 100;\n            v5 = v13 = _SafeMul(30, _totalCrowdCoin);\n        } else {\n            stor_19 = 1;\n            goto 0x1c74B0x13b6B0x5f2;\n        }\n        if (_crowdDistribution >= v7) {\n            v1 = v14 = 7223;\n            v3 = v15 = 100;\n            v5 = v16 = _SafeMul(40, _totalCrowdCoin);\n        } else {\n            stor_19 = 2;\n            goto 0x1c74B0x13b6B0x5f2;\n        }\n        if (_crowdDistribution >= v7) {\n            v1 = 7269;\n            v3 = 100;\n            v5 = _SafeMul(50, _totalCrowdCoin);\n        } else {\n            stor_19 = 3;\n            goto 0x1c74B0x13b6B0x5f2;\n        }\n    }\n}\n\nfunction setDistributeAgent(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    require(varg0);\n    owner_e[varg0] = varg1 | ~0xff & owner_e[varg0];\n}\n\nfunction recycle(address varg0, uint256 varg1) public nonPayable { \n    require(0xff & _recycle[msg.sender]);\n    require(varg0);\n    require(varg1 <= _balanceOf[varg0]);\n    v0 = _SafeAdd(varg1, _balanceOf[_setTotalAirDrop]);\n    _balanceOf[_setTotalAirDrop] = v0;\n    require(varg1 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    emit Transfer(varg0, _setTotalAirDrop, varg1);\n}\n\nfunction releaseTokenTransfer() public nonPayable { \n    require(msg.sender == _releaseAgent);\n    require(msg.sender == _releaseAgent);\n    _released = 1;\n}\n\nfunction tokenName() public nonPayable { \n    v0 = new bytes[]((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction totalCrowdCoin() public nonPayable { \n    return _totalCrowdCoin;\n}\n\nfunction addAdmin(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    _recycle[varg0] = 0x1 | ~0xff & _recycle[varg0];\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction withdrawAll() public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    v0 = _setTotalAirDrop.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction transferAgents(address varg0) public nonPayable { \n    return 0xff & _transferAgents[varg0];\n}\n\nfunction getOwner() public nonPayable { \n    return _setTotalAirDrop;\n}\n\nfunction owner() public nonPayable { \n    return _setTotalAirDrop;\n}\n\nfunction totalFoundCoin() public nonPayable { \n    return _totalFoundCoin;\n}\n\nfunction setTotalAirDrop(uint256 varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    _totalAirDrop = varg0;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction released() public nonPayable { \n    return _released;\n}\n\nfunction removeDeveloper(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    owner_5[varg0] = ~0xff & owner_5[varg0];\n}\n\nfunction finishCrowdCoin() public nonPayable { \n    return _finishCrowdCoin;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    if (msg.sender != _setTotalAirDrop) {\n        if (!(0xff & owner_5[msg.sender])) {\n            if (!(0xff & owner_6[msg.sender])) {\n                if (stor_a) {\n                    require(varg1 < stor_a);\n                }\n            } else {\n                require(varg1 < stor_9);\n            }\n        } else {\n            require(varg1 < _transfer);\n        }\n        if (!_released) {\n            require(0xff & _transferAgents[msg.sender]);\n        }\n    }\n    require(msg.data.length >= 68);\n    require(varg1 >= 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    v0 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v0;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalDevCoin() public nonPayable { \n    return _totalDevCoin;\n}\n\nfunction getTotalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction releaseAgent() public nonPayable { \n    return _releaseAgent;\n}\n\nfunction removeFound(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    owner_6[varg0] = ~0xff & owner_6[varg0];\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction isToken() public nonPayable { \n    return 1;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _setTotalAirDrop);\n    if (varg0) {\n        _setTotalAirDrop = varg0;\n        goto 0x2700x88e;\n    }\n}\n\nfunction totalAirDrop() public nonPayable { \n    return _totalAirDrop;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x2f652a3) {\n            setTransferAgent(address,bool);\n        } else if (0x562b9f7 == function_selector) {\n            withdrawAmount(uint256);\n        } else if (0x5d2035b == function_selector) {\n            mintingFinished();\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xbc311ea == function_selector) {\n            addFound(address);\n        } else if (0xf67f3f7 == function_selector) {\n            distributeToDev(address,uint256);\n        } else if (0x12136918 == function_selector) {\n            setMaxTranferLimit(uint256,uint256,uint256);\n        } else if (0x1785f53c == function_selector) {\n            removeAdmin(address);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x185917c5 == function_selector) {\n            distributeToFound(address,uint256);\n        } else if (0x22fbf1e8 == function_selector) {\n            addDeveloper(address);\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x29ff4f53 == function_selector) {\n            setReleaseAgent(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x32c0fba5 == function_selector) {\n            airDrop(address,address,uint256);\n        } else if (0x40c10f19 == function_selector) {\n            mint(address,uint256);\n        } else if (0x42c1867b == function_selector) {\n            mintAgents(address);\n        } else if (0x43214675 == function_selector) {\n            setMintAgent(address,bool);\n        } else if (0x44b28d59 == function_selector) {\n            enableMint();\n        } else if (0x4eee966f == function_selector) {\n            setTokenInformation(string,string);\n        } else if (0x4efeb2cf == function_selector) {\n            crowdDistribution();\n        } else if (0x56963c31 == function_selector) {\n            setDistributeAgent(address,bool);\n        } else if (0x5d36d182 == function_selector) {\n            recycle(address,uint256);\n        } else if (0x5f412d4f == function_selector) {\n            releaseTokenTransfer();\n        } else if (0x6c02a931 == function_selector) {\n            tokenName();\n        } else if (0x6e224034 == function_selector) {\n            totalCrowdCoin();\n        } else if (0x70480275 == function_selector) {\n            addAdmin(address);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x853828b6 == function_selector) {\n            withdrawAll();\n        } else if (0x867c2857 == function_selector) {\n            transferAgents(address);\n        } else if (0x893d20e8 == function_selector) {\n            getOwner();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x8fbe382c == function_selector) {\n            totalFoundCoin();\n        } else if (0x92a69395 == function_selector) {\n            setTotalAirDrop(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x96132521 == function_selector) {\n            released();\n        } else if (0x9e23c209 == function_selector) {\n            removeDeveloper(address);\n        } else if (0xa0cde1f0 == function_selector) {\n            finishCrowdCoin();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb77da4a0 == function_selector) {\n            totalDevCoin();\n        } else if (0xc4e41b22 == function_selector) {\n            getTotalSupply();\n        } else if (0xd1f276d3 == function_selector) {\n            releaseAgent();\n        } else if (0xd3e6dda7 == function_selector) {\n            removeFound(address);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xeefa597b == function_selector) {\n            isToken();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfb6b18c0 == function_selector) {\n            totalAirDrop();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 104.14621591567993,
	"usage": {
		"completion_tokens": 2233,
		"prompt_tokens": 7552,
		"total_tokens": 9785
	}
}