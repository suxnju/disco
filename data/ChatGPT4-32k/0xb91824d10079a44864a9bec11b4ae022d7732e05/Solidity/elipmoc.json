{
	"address": "0xb91824d10079a44864a9bec11b4ae022d7732e05",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a simplified solidity version of the provided decompiled code. Please note that the actual solidity code might be different because the decompiled code does not contain all high-level structures such as structs, enums, or events. Also, it is not possible to retrieve the original function and variable names, or comments:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Crowdsale {\n    uint256[] private _name;\n    uint256[] private _symbol;\n    uint256 private _totalSupply;\n    mapping (address => uint256) private _balanceOf;\n    uint256 private _fundingGoal;\n    uint256 private _amountRaised;\n    uint256 private _deadline;\n    uint256 private _price;\n    uint8 private _decimals;\n    bool private _fundingGoalReached;\n    bool private _crowdsaleClosed;\n    address payable private _beneficiary;\n\n    event FundTransfer(address indexed _backer, uint _amount, bool _isContribution);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event GoalReached(address _beneficiary, uint256 _amountRaised);\n\n    function checkGoalReached() public { \n        if (block.timestamp >= _deadline) {\n            if (_amountRaised >= _fundingGoal) {\n                _fundingGoalReached = true;\n                emit GoalReached(_beneficiary, _amountRaised);\n            }\n            _crowdsaleClosed = true;\n        }\n    }\n\n    function name() public view returns (uint256[] memory) { \n        return _name;\n    }\n\n    function totalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n\n    function deadline() public view returns (uint256) { \n        return _deadline;\n    }\n\n    function decimals() public view returns (uint8) { \n        return _decimals;\n    }\n\n    function beneficiary() public view returns (address) { \n        return _beneficiary;\n    }\n\n    function balanceOf(address account) public view returns (uint256) { \n        return _balanceOf[account];\n    }\n\n    function fundingGoal() public view returns (uint256) { \n        return _fundingGoal;\n    }\n\n    function amountRaised() public view returns (uint256) { \n        return _amountRaised;\n    }\n\n    function issue(address account, uint256 amount) public { \n        _totalSupply += amount;\n        _balanceOf[account] += amount;\n        emit Transfer(address(this), account, amount);\n    }\n\n    function symbol() public view returns (uint256[] memory) { \n        return _symbol;\n    }\n\n    function price() public view returns (uint256) { \n        return _price;\n    }\n\n    function transfer(address recipient, uint256 amount) public { \n        _balanceOf[msg.sender] -= amount;\n        _balanceOf[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n    }\n\n    function crowdsaleClosed() public view returns (bool) { \n        return _crowdsaleClosed;\n    }\n\n    function fundingGoalReached() public view returns (bool) { \n        return _fundingGoalReached;\n    }\n\n    function balance(address account) public view returns (uint256) {\n        return _balanceOf[account];\n    }\n\n    function safeWithdrawal() public {\n        if (block.timestamp >= _deadline && !_fundingGoalReached) {\n            uint256 amount = _balanceOf[msg.sender];\n            if (amount > 0) {\n                (bool success,) = msg.sender.call{value:amount}(\"\");\n                require(success);\n                emit FundTransfer(msg.sender, amount, false);\n                _balanceOf[msg.sender] = 0;\n            }\n        }\n        if (_fundingGoalReached && _beneficiary == msg.sender) {\n            (bool success,) = _beneficiary.call{value:_amountRaised}(\"\");\n            require(success);\n            emit FundTransfer(_beneficiary, _amountRaised, false);\n        }\n    }\n\n    fallback () external payable {\n        require(!_crowdsaleClosed);\n        _balanceOf[msg.sender] += msg.value;\n        _amountRaised += msg.value;\n        _totalSupply += msg.value / _price;\n        _balanceOf[msg.sender] += msg.value / _price;\n        emit Transfer(address(this), msg.sender, msg.value / _price);\n        emit FundTransfer(msg.sender, msg.value, true);\n    }\n}\n```\nPlease note that contract security measures are not addressed in this code. For a production-ready contract, it is recommended to include checks, effects, and interactions patterns and take care of reentrancy, arithmetic overflows/underflows issues and safe Ether transfer methods.",
				"role": "assistant"
			}
		}
	],
	"created": 1701462268,
	"id": "chatcmpl-8R4LkEYPb2LjF5Kbw0Z8OFab0jxt3",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.23 16:08 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nuint256 _fundingGoal; // STORAGE[0x6]\nuint256 _amountRaised; // STORAGE[0x7]\nuint256 _deadline; // STORAGE[0x8]\nuint256 _price; // STORAGE[0x9]\nmapping (uint256 => [uint256]) _balance; // STORAGE[0xb]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint8 stor_9_0_0; // STORAGE[0x9] bytes 0 to 0\nuint8 _fundingGoalReached; // STORAGE[0xa] bytes 0 to 0\nuint8 _crowdsaleClosed; // STORAGE[0xa] bytes 1 to 1\naddress _beneficiary; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nTransfer(address, address, uint256);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            _fundingGoalReached = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _crowdsaleClosed = 1;\n    }\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction issue(address varg0, uint256 varg1) public nonPayable { \n    _totalSupply += varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction crowdsaleClosed() public nonPayable { \n    return _crowdsaleClosed;\n}\n\nfunction fundingGoalReached() public nonPayable { \n    return _fundingGoalReached;\n}\n\nfunction balance(address varg0) public nonPayable { \n    return _balance[varg0];\n}\n\nfunction safeWithdrawal() public nonPayable { \n    v0 = v1 = 0;\n    if (block.timestamp >= _deadline) {\n        if (!_fundingGoalReached) {\n            v0 = _balance[msg.sender];\n            if (v0 > 0) {\n                v2 = msg.sender.call().value(v0).gas(2300 * !v0);\n                require(v2);\n                emit FundTransfer(msg.sender, v0, 0);\n                _balance[msg.sender] = 0;\n            }\n        }\n        v3 = v4 = _fundingGoalReached;\n        if (v4) {\n            v3 = _beneficiary == msg.sender;\n        }\n        if (v3) {\n            v5 = _beneficiary.call().value(_amountRaised).gas(2300 * !_amountRaised);\n            require(v5);\n            emit FundTransfer(_beneficiary, v0, 0);\n        }\n    }\n}\n\nfunction fallback() public payable { \n    require(!_crowdsaleClosed);\n    _balance[msg.sender] += msg.value;\n    _amountRaised += msg.value;\n    assert(stor_9_0_0);\n    _totalSupply += msg.value / _price * 10 ** _decimals;\n    _balanceOf[msg.sender] += msg.value / _price * 10 ** _decimals;\n    emit Transfer(address(this), msg.sender, msg.value / _price * 10 ** _decimals);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x1cb3b20) {\n            checkGoalReached();\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0x867904b4 == function_selector) {\n            issue(address,uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xccb07cef == function_selector) {\n            crowdsaleClosed();\n        } else if (0xd424f628 == function_selector) {\n            fundingGoalReached();\n        } else if (0xe3d670d7 == function_selector) {\n            balance(address);\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 16:08 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nuint256 _fundingGoal; // STORAGE[0x6]\nuint256 _amountRaised; // STORAGE[0x7]\nuint256 _deadline; // STORAGE[0x8]\nuint256 _price; // STORAGE[0x9]\nmapping (uint256 => [uint256]) _balance; // STORAGE[0xb]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint8 stor_9_0_0; // STORAGE[0x9] bytes 0 to 0\nuint8 _fundingGoalReached; // STORAGE[0xa] bytes 0 to 0\nuint8 _crowdsaleClosed; // STORAGE[0xa] bytes 1 to 1\naddress _beneficiary; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nTransfer(address, address, uint256);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            _fundingGoalReached = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _crowdsaleClosed = 1;\n    }\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction issue(address varg0, uint256 varg1) public nonPayable { \n    _totalSupply += varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction crowdsaleClosed() public nonPayable { \n    return _crowdsaleClosed;\n}\n\nfunction fundingGoalReached() public nonPayable { \n    return _fundingGoalReached;\n}\n\nfunction balance(address varg0) public nonPayable { \n    return _balance[varg0];\n}\n\nfunction safeWithdrawal() public nonPayable { \n    v0 = v1 = 0;\n    if (block.timestamp >= _deadline) {\n        if (!_fundingGoalReached) {\n            v0 = _balance[msg.sender];\n            if (v0 > 0) {\n                v2 = msg.sender.call().value(v0).gas(2300 * !v0);\n                require(v2);\n                emit FundTransfer(msg.sender, v0, 0);\n                _balance[msg.sender] = 0;\n            }\n        }\n        v3 = v4 = _fundingGoalReached;\n        if (v4) {\n            v3 = _beneficiary == msg.sender;\n        }\n        if (v3) {\n            v5 = _beneficiary.call().value(_amountRaised).gas(2300 * !_amountRaised);\n            require(v5);\n            emit FundTransfer(_beneficiary, v0, 0);\n        }\n    }\n}\n\nfunction fallback() public payable { \n    require(!_crowdsaleClosed);\n    _balance[msg.sender] += msg.value;\n    _amountRaised += msg.value;\n    assert(stor_9_0_0);\n    _totalSupply += msg.value / _price * 10 ** _decimals;\n    _balanceOf[msg.sender] += msg.value / _price * 10 ** _decimals;\n    emit Transfer(address(this), msg.sender, msg.value / _price * 10 ** _decimals);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x1cb3b20) {\n            checkGoalReached();\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0x867904b4 == function_selector) {\n            issue(address,uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xccb07cef == function_selector) {\n            crowdsaleClosed();\n        } else if (0xd424f628 == function_selector) {\n            fundingGoalReached();\n        } else if (0xe3d670d7 == function_selector) {\n            balance(address);\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 16:08 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nuint256 _fundingGoal; // STORAGE[0x6]\nuint256 _amountRaised; // STORAGE[0x7]\nuint256 _deadline; // STORAGE[0x8]\nuint256 _price; // STORAGE[0x9]\nmapping (uint256 => [uint256]) _balance; // STORAGE[0xb]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint8 stor_9_0_0; // STORAGE[0x9] bytes 0 to 0\nuint8 _fundingGoalReached; // STORAGE[0xa] bytes 0 to 0\nuint8 _crowdsaleClosed; // STORAGE[0xa] bytes 1 to 1\naddress _beneficiary; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nTransfer(address, address, uint256);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            _fundingGoalReached = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _crowdsaleClosed = 1;\n    }\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction issue(address varg0, uint256 varg1) public nonPayable { \n    _totalSupply += varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction crowdsaleClosed() public nonPayable { \n    return _crowdsaleClosed;\n}\n\nfunction fundingGoalReached() public nonPayable { \n    return _fundingGoalReached;\n}\n\nfunction balance(address varg0) public nonPayable { \n    return _balance[varg0];\n}\n\nfunction safeWithdrawal() public nonPayable { \n    v0 = v1 = 0;\n    if (block.timestamp >= _deadline) {\n        if (!_fundingGoalReached) {\n            v0 = _balance[msg.sender];\n            if (v0 > 0) {\n                v2 = msg.sender.call().value(v0).gas(2300 * !v0);\n                require(v2);\n                emit FundTransfer(msg.sender, v0, 0);\n                _balance[msg.sender] = 0;\n            }\n        }\n        v3 = v4 = _fundingGoalReached;\n        if (v4) {\n            v3 = _beneficiary == msg.sender;\n        }\n        if (v3) {\n            v5 = _beneficiary.call().value(_amountRaised).gas(2300 * !_amountRaised);\n            require(v5);\n            emit FundTransfer(_beneficiary, v0, 0);\n        }\n    }\n}\n\nfunction fallback() public payable { \n    require(!_crowdsaleClosed);\n    _balance[msg.sender] += msg.value;\n    _amountRaised += msg.value;\n    assert(stor_9_0_0);\n    _totalSupply += msg.value / _price * 10 ** _decimals;\n    _balanceOf[msg.sender] += msg.value / _price * 10 ** _decimals;\n    emit Transfer(address(this), msg.sender, msg.value / _price * 10 ** _decimals);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x1cb3b20) {\n            checkGoalReached();\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0x867904b4 == function_selector) {\n            issue(address,uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xccb07cef == function_selector) {\n            crowdsaleClosed();\n        } else if (0xd424f628 == function_selector) {\n            fundingGoalReached();\n        } else if (0xe3d670d7 == function_selector) {\n            balance(address);\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 40.035749673843384,
	"usage": {
		"completion_tokens": 965,
		"prompt_tokens": 1996,
		"total_tokens": 2961
	}
}