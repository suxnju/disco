{
	"address": "0x352b962bb3d7d2dec513cb6bb5a870367baceb17",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code according to the decompiled code:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    mapping(address => uint256) balances;\n    mapping(address => mapping (address => uint256)) allowed;\n    uint256 totalSupply;\n    address owner;\n    string name;\n    string symbol;\n    uint8 decimals = 8;\n    address newOwner;\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n   \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value && _value > 0);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n```\n\nPlease note that there's no guarantee that the generated Solidity code is correct. The decompiled code you've provided contains some methods and logic that do not seem to be directly translatable to Solidity, such as the use of explicit memory operations and raw log generation. This might be due to the use of inline assembly in the original Solidity code, or machine-level optimizations performed by the Solidity compiler, or even because the original contract was not written in Solidity in the first place.\n\nAlso, note that the original contract might have had additional features that are not captured in the decompiled code, and therefore the generated Solidity code. For example, it might have had additional modifiers, events, or inherited from other contracts. The contract could also have been part of a multi-contract system, and the behavior of this contract could depend on the state of other contracts in the system.",
				"role": "assistant"
			}
		}
	],
	"created": 1700632065,
	"id": "chatcmpl-8NaNNGV448mfcxg8WBStUMduclPSR",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x8da5cb5b > var0) {\n            if (0x313ce567 > var0) {\n                if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var var1 = 0x010d;\n                    var1 = func_0349();\n                    var temp0 = var1;\n                    var1 = 0x011a;\n                    var var2 = temp0;\n                    var var3 = memory[0x40:0x60];\n                    var1 = func_12E8(var2, var3);\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + var1 - temp1];\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = 0x013d;\n                    var2 = 0x0138;\n                    var var4 = 0x04;\n                    var3 = var4 + (msg.data.length - var4);\n                    var2, var3 = func_13B2(var3, var4);\n                    var1 = func_0138(var2, var3);\n                    var temp2 = var1;\n                    var1 = 0x014a;\n                    var2 = temp2;\n                    var3 = memory[0x40:0x60];\n                    var1 = func_140D(var2, var3);\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + var1 - temp3];\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = 0x015b;\n                    var1 = func_03FE();\n                    var temp4 = var1;\n                    var1 = 0x0168;\n                    var3 = memory[0x40:0x60];\n                    var2 = temp4;\n                    var1 = func_1437(var2, var3);\n                    var temp5 = memory[0x40:0x60];\n                    return memory[temp5:temp5 + var1 - temp5];\n                } else if (var0 == 0x23b872dd) {\n                    // Dispatch table entry for transferFrom(address,address,uint256)\n                    var1 = 0x018b;\n                    var2 = 0x0186;\n                    var4 = 0x04;\n                    var3 = var4 + (msg.data.length - var4);\n                    var2, var3, var4 = func_1452(var3, var4);\n                    var1 = func_0186(var2, var3, var4);\n                    var temp6 = var1;\n                    var1 = 0x0198;\n                    var2 = temp6;\n                    var3 = memory[0x40:0x60];\n                    var1 = func_140D(var2, var3);\n                    var temp7 = memory[0x40:0x60];\n                    return memory[temp7:temp7 + var1 - temp7];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = 0x01a9;\n                var1 = func_0437();\n                var temp8 = var1;\n                var1 = 0x01b6;\n                var2 = temp8;\n                var3 = memory[0x40:0x60];\n                var1 = func_14C1(var2, var3);\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + var1 - temp9];\n            } else if (var0 == 0x618a2f5e) {\n                // Dispatch table entry for 0x618a2f5e (unknown)\n                var1 = 0x01d9;\n                var2 = 0x01d4;\n                var4 = 0x04;\n                var3 = var4 + (msg.data.length - var4);\n                var var5;\n                var2, var3, var4, var5 = func_1624(var3, var4);\n                var1 = func_01D4(var2, var3, var4, var5);\n                var temp10 = var1;\n                var1 = 0x01e6;\n                var2 = temp10;\n                var3 = memory[0x40:0x60];\n                var1 = func_140D(var2, var3);\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + var1 - temp11];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = 0x0209;\n                var2 = 0x0204;\n                var4 = 0x04;\n                var3 = var4 + (msg.data.length - var4);\n                var2 = func_16A7(var3, var4);\n                var1 = func_0204(var2);\n                var temp12 = var1;\n                var1 = 0x0216;\n                var2 = temp12;\n                var3 = memory[0x40:0x60];\n                var1 = func_1437(var2, var3);\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + var1 - temp13];\n            } else if (var0 == 0x715018a6) {\n                // Dispatch table entry for renounceOwnership()\n                var1 = 0x0227;\n                renounceOwnership();\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xbeabacc8 > var0) {\n            if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = 0x0231;\n                var1 = func_0696();\n                var temp14 = var1;\n                var1 = 0x023e;\n                var2 = temp14;\n                var3 = memory[0x40:0x60];\n                var1 = func_16E3(var2, var3);\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + var1 - temp15];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = 0x024f;\n                var1 = func_06BF();\n                var temp16 = var1;\n                var1 = 0x025c;\n                var2 = temp16;\n                var3 = memory[0x40:0x60];\n                var1 = func_12E8(var2, var3);\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + var1 - temp17];\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = 0x027f;\n                var2 = 0x027a;\n                var4 = 0x04;\n                var3 = var4 + (msg.data.length - var4);\n                var2, var3 = func_13B2(var3, var4);\n                var1 = func_027A(var2, var3);\n                var temp18 = var1;\n                var1 = 0x028c;\n                var2 = temp18;\n                var3 = memory[0x40:0x60];\n                var1 = func_140D(var2, var3);\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + var1 - temp19];\n            } else if (var0 == 0xaafe62d1) {\n                // Dispatch table entry for 0xaafe62d1 (unknown)\n                var1 = 0x02af;\n                var2 = 0x02aa;\n                var3 = msg.data.length - 0x04 + 0x04;\n                var4 = 0x04;\n                var2, var3, var4, var5 = func_1759(var3, var4);\n                func_02AA(var2, var3, var4, var5);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xbeabacc8) {\n            // Dispatch table entry for transfer(address,address,uint256)\n            var1 = 0x02cb;\n            var2 = 0x02c6;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2, var3, var4 = func_1452(var3, var4);\n            func_02C6(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xcb205583) {\n            // Dispatch table entry for 0xcb205583 (unknown)\n            var1 = 0x02e7;\n            var2 = 0x02e2;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2 = func_16A7(var3, var4);\n            var1 = func_02E2(var2);\n            var temp20 = var1;\n            var1 = 0x02f4;\n            var2 = temp20;\n            var3 = memory[0x40:0x60];\n            var1 = func_140D(var2, var3);\n            var temp21 = memory[0x40:0x60];\n            return memory[temp21:temp21 + var1 - temp21];\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x0317;\n            var2 = 0x0312;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2, var3 = func_17CD(var3, var4);\n            var1 = func_0312(var2, var3);\n            var temp22 = var1;\n            var1 = 0x0324;\n            var2 = temp22;\n            var3 = memory[0x40:0x60];\n            var1 = func_1437(var2, var3);\n            var temp23 = memory[0x40:0x60];\n            return memory[temp23:temp23 + var1 - temp23];\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = 0x0347;\n            var2 = 0x0342;\n            var3 = msg.data.length - 0x04 + 0x04;\n            var4 = 0x04;\n            var2 = func_16A7(var3, var4);\n            func_0342(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0138(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x03e6;\n        var2 = func_0AEC();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x03f3;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_0AF4(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_0186(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0413;\n        var2 = func_0AEC();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x0420;\n        var var3 = arg0;\n        var var4 = var1;\n        var var5 = arg2;\n        func_0CBD(var3, var4, var5);\n        var2 = 0x042b;\n        var3 = arg0;\n        var4 = arg1;\n        var5 = arg2;\n        func_0D49(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_01D4(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= memory[arg1:arg1 + 0x20]) {\n        label_062C:\n            return 0x01;\n        } else {\n        label_0452:\n            var var2 = arg1;\n            var var3 = var1;\n        \n            if (var3 < memory[var2:var2 + 0x20]) {\n                var2 = memory[var3 * 0x20 + 0x20 + var2:var3 * 0x20 + 0x20 + var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var var4 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                var var5 = 0x04c8;\n                var var7 = memory[0x40:0x60];\n                var var6 = arg2;\n                var5 = func_1437(var6, var7);\n                var temp0 = memory[0x40:0x60];\n                log(memory[temp0:temp0 + var5 - temp0], [stack[-2], stack[-3], stack[-4]]);\n                var2 = arg1;\n                var3 = var1;\n            \n                if (var3 < memory[var2:var2 + 0x20]) {\n                    var2 = memory[var3 * 0x20 + 0x20 + var2:var3 * 0x20 + 0x20 + var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var3 = 0xffffffffffffffffffffffffffffffffffffffff & 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                    var4 = 0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822;\n                    var5 = 0x0562;\n                    var6 = arg2;\n                    var7 = 0x00;\n                    var var8 = var7;\n                    var var9 = arg3;\n                    var var10 = memory[0x40:0x60];\n                    var5 = func_18E1(var6, var7, var8, var9, var10);\n                    var temp1 = memory[0x40:0x60];\n                    log(memory[temp1:temp1 + var5 - temp1], [stack[-2], stack[-3], stack[-4]]);\n                    var2 = 0xffffffffffffffffffffffffffffffffffffffff & 0xafd54595986ede4976d6717fcead8b36978edc17;\n                    var3 = 0xe156b1b6;\n                    var4 = arg1;\n                    var5 = var1;\n                \n                    if (var5 < memory[var4:var4 + 0x20]) {\n                        var temp2 = memory[var5 * 0x20 + 0x20 + var4:var5 * 0x20 + 0x20 + var4 + 0x20];\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n                        var4 = 0x05d5;\n                        var5 = temp2;\n                        var6 = arg0;\n                        var8 = temp3 + 0x04;\n                        var7 = arg3;\n                        var4 = func_1926(var5, var6, var7, var8);\n                        var temp4 = memory[0x40:0x60];\n                        var temp5;\n                        temp5, memory[temp4:temp4 + 0x20] = address(var2).call.gas(msg.gas)(memory[temp4:temp4 + var4 - temp4]);\n                        var5 = !temp5;\n                    \n                        if (!var5) {\n                            var temp6 = memory[0x40:0x60];\n                            var temp7 = returndata.length;\n                            memory[0x40:0x60] = temp6 + (temp7 + 0x1f & ~0x1f);\n                            var2 = 0x0618;\n                            var4 = temp6;\n                            var3 = var4 + temp7;\n                            var2 = func_1989(var3, var4);\n                            var2 = var1;\n                            var4 = var2;\n                            var3 = 0x0624;\n                            var3 = func_19E5(var4);\n                            var1 = var3;\n                        \n                            if (var1 >= memory[arg1:arg1 + 0x20]) { goto label_062C; }\n                            else { goto label_0452; }\n                        } else {\n                            var temp8 = returndata.length;\n                            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var6 = 0x05ac;\n                    \n                    label_186D:\n                        memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        memory[0x04:0x24] = 0x32;\n                        revert(memory[0x00:0x24]);\n                    }\n                } else {\n                    var4 = 0x04e2;\n                    goto label_186D;\n                }\n            } else {\n                var4 = 0x0463;\n                goto label_186D;\n            }\n        }\n    }\n    \n    function func_0204(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_027A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x075c;\n        var2 = func_0AEC();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x0769;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_0D49(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_02AA(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = 0x00;\n    \n        if (var0 >= arg1) {\n        label_08D6:\n            return;\n        } else {\n        label_0783:\n            var var1 = arg0;\n            var var2 = arg1;\n            var var3 = var0;\n        \n            if (var3 < var2) {\n                var temp0 = var3 * 0x20 + var1;\n                var temp1 = temp0 + 0x20;\n                var1 = 0x07aa;\n                var3 = temp0;\n                var2 = temp1;\n                var1 = func_16A7(var2, var3);\n                var1 = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = arg3 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = 0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822;\n                var var4 = 0x080d;\n                var var5 = arg2;\n                var var6 = 0x00;\n                var var7 = var6;\n                var var9 = memory[0x40:0x60];\n                var var8 = var5;\n                var4 = func_18E1(var5, var6, var7, var8, var9);\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + var4 - temp2], [stack[-2], stack[-3], stack[-4]]);\n                var1 = arg0;\n                var2 = arg1;\n                var3 = var0;\n            \n                if (var3 < var2) {\n                    var temp3 = var3 * 0x20 + var1;\n                    var temp4 = temp3 + 0x20;\n                    var1 = 0x083d;\n                    var2 = temp4;\n                    var3 = temp3;\n                    var1 = func_16A7(var2, var3);\n                    var1 = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var2 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                    var4 = 0x08bb;\n                    var6 = memory[0x40:0x60];\n                    var5 = arg2;\n                    var4 = func_1437(var5, var6);\n                    var temp5 = memory[0x40:0x60];\n                    log(memory[temp5:temp5 + var4 - temp5], [stack[-2], stack[-3], stack[-4]]);\n                    var1 = var0;\n                    var3 = var1;\n                    var2 = 0x08ce;\n                    var2 = func_19E5(var3);\n                    var0 = var2;\n                \n                    if (var0 >= arg1) { goto label_08D6; }\n                    else { goto label_0783; }\n                } else {\n                    var4 = 0x0827;\n                \n                label_186D:\n                    memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            } else {\n                var4 = 0x0794;\n                goto label_186D;\n            }\n        }\n    }\n    \n    function func_02C6(var arg0, var arg1, var arg2) {\n        var var0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var1 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n        var var3 = 0x093a;\n        var var5 = memory[0x40:0x60];\n        var var4 = arg2;\n        var3 = func_1437(var4, var5);\n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + var3 - temp0], [stack[-2], stack[-3], stack[-4]]);\n    }\n    \n    function func_02E2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0xffffffffffffffffffffffffffffffffffffffff & 0xc8156a1639e694b7e0e5bd9319eacf02df12bc16;\n        var var2 = 0x097c;\n        var2 = func_0AEC();\n    \n        if ((var2 & 0xffffffffffffffffffffffffffffffffffffffff) - var1) { return 0x01; }\n    \n        storage[0x06] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x06] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function func_0312(var arg0, var arg1) returns (var r0) {\n        r0 = func_09E2(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0342(var arg0) {\n        var var0 = 0x0a71;\n        func_1111();\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var0 = 0x0ae9;\n            var var1 = arg0;\n            func_118F(var1);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var0 = 0x0ad7;\n            var1 = temp0 + 0x04;\n            var0 = func_1A9F(var1);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_0349() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x04;\n        var var2 = 0x0358;\n        var var3 = storage[var1];\n        var2 = func_183C(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0384;\n        var6 = func_183C(var7);\n    \n        if (!var6) {\n        label_03D1:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_03C8; }\n        \n        label_03B4:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_03B4; }\n        \n        label_03C8:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_03D1;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_03D1;\n        }\n    }\n    \n    function func_03FE() returns (var r0) { return storage[0x03]; }\n    \n    function func_0437() returns (var r0) { return 0x08; }\n    \n    function renounceOwnership() {\n        var var0 = 0x068a;\n        func_1111();\n        var0 = 0x0694;\n        var var1 = 0x00;\n        func_118F(var1);\n    }\n    \n    function func_0696() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_06BF() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x05;\n        var var2 = 0x06ce;\n        var var3 = storage[var1];\n        var2 = func_183C(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x06fa;\n        var6 = func_183C(var7);\n    \n        if (!var6) {\n        label_0747:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_073E; }\n        \n        label_072A:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_072A; }\n        \n        label_073E:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0747;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0747;\n        }\n    }\n    \n    function func_09E2(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0AEC() returns (var r0) { return msg.sender; }\n    \n    function func_0AF4(var arg0, var arg1, var arg2) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var0 = 0x0b5a;\n            var1 = temp6 + 0x04;\n            var0 = func_1B31(var1);\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + var0 - temp7]);\n        } else if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = arg2;\n            var var0 = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var2 = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\n            var var3 = 0x0cb0;\n            var var5 = memory[0x40:0x60];\n            var var4 = arg2;\n            var3 = func_1437(var4, var5);\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + var3 - temp3], [stack[-2], stack[-3], stack[-4]]);\n            return;\n        } else {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp4 + 0x04;\n            var0 = 0x0bc9;\n            var0 = func_1BC3(var1);\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + var0 - temp5]);\n        }\n    }\n    \n    function func_0CBD(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = 0x0cc9;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_09E2(var2, var3);\n        var0 = var1;\n    \n        if (var0 == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n        label_0D43:\n            return;\n        } else if (var0 >= arg2) {\n            var1 = 0x0d42;\n            var2 = arg0;\n            var3 = arg1;\n            var var4 = var0 - arg2;\n            func_0AF4(var2, var3, var4);\n            goto label_0D43;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var2 = temp0 + 0x04;\n            var1 = 0x0d2c;\n            var1 = func_1C2F(var2);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var1 - temp1]);\n        }\n    }\n    \n    function func_0D49(var arg0, var arg1, var arg2) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp9 + 0x04;\n            var0 = 0x0daf;\n            var0 = func_1CC1(var1);\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + var0 - temp10]);\n        } else if (!(arg1 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp7 + 0x04;\n            var0 = 0x0e1e;\n            var0 = func_1D53(var1);\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        } else if (storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n        label_0F81:\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var var0 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var0 >= arg2) {\n                var temp0 = arg2;\n                var temp1 = arg0;\n                memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x01;\n                storage[keccak256(memory[0x00:0x40])] = var0 - temp0;\n                var temp2 = arg1;\n                memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x01;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] + temp0;\n                var var1 = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var var2 = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                var var4 = 0x10f8;\n                var var6 = memory[0x40:0x60];\n                var var5 = temp0;\n                var4 = func_1437(var5, var6);\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + var4 - temp4], [stack[-2], stack[-3], stack[-4]]);\n                var1 = 0x110b;\n                var2 = arg0;\n                var3 = arg1;\n                var4 = arg2;\n                func_1253(var2, var3, var4);\n                return;\n            } else {\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var2 = temp5 + 0x04;\n                var1 = 0x0fff;\n                var1 = func_1DE5(var2);\n                var temp6 = memory[0x40:0x60];\n                revert(memory[temp6:temp6 + var1 - temp6]);\n            }\n        } else {\n            var0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (!var0) {\n            label_0F64:\n            \n                if (!var0) {\n                label_0F80:\n                    goto label_0F81;\n                } else {\n                    var0 = 0x00;\n                \n                    if (var0) {\n                    label_0F7E:\n                        goto label_0F80;\n                    } else if (arg2 < 0x64) { goto label_0F7E; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n                var0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0xb8cae8788e8aec58a504f5bb4482e4fa5d382f47;\n            \n                if (var0) {\n                    var0 = !var0;\n                    goto label_0F64;\n                } else {\n                    var0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0xde212260a0235a782368b1eb7417efcdbdb5585d;\n                    goto label_0F64;\n                }\n            }\n        }\n    }\n    \n    function func_1111() {\n        var var0 = 0x1119;\n        var0 = func_0AEC();\n        var0 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var1 = 0x1137;\n        var1 = func_0696();\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == var0) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var0 = 0x1184;\n        var1 = temp0 + 0x04;\n        var0 = func_1E51(var1);\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + var0 - temp1]);\n    }\n    \n    function func_118F(var arg0) {\n        var temp0 = storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp1 = arg0;\n        storage[0x00] = (temp1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + memory[0x40:0x60] - temp2], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1253(var arg0, var arg1, var arg2) {}\n    \n    function func_1258(var arg0) returns (var r0) { return memory[arg0:arg0 + 0x20]; }\n    \n    function func_1263(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0;\n        return temp0 + 0x20;\n    }\n    \n    function func_1274(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n    \n        if (var0 >= arg0) {\n        label_1292:\n            memory[arg1 + arg0:arg1 + arg0 + 0x20] = 0x00;\n            return;\n        } else {\n        label_1280:\n            var temp0 = var0;\n            memory[arg1 + temp0:arg1 + temp0 + 0x20] = memory[arg2 + temp0:arg2 + temp0 + 0x20];\n            var0 = temp0 + 0x20;\n        \n            if (var0 >= arg0) { goto label_1292; }\n            else { goto label_1280; }\n        }\n    }\n    \n    function func_129E(var arg0) returns (var r0) { return arg0 + 0x1f & ~0x1f; }\n    \n    function func_12AF(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x12ba;\n        var var2 = arg1;\n        var1 = func_1258(var2);\n        var2 = 0x12c4;\n        var var3 = var1;\n        var var4 = arg0;\n        var2 = func_1263(var3, var4);\n        var temp0 = var2;\n        arg0 = temp0;\n        var2 = 0x12d4;\n        var3 = var1;\n        var4 = arg0;\n        var var5 = arg1 + 0x20;\n        func_1274(var3, var4, var5);\n        var2 = 0x12dd;\n        var3 = var1;\n        var2 = func_129E(var3);\n        return arg0 + var2;\n    }\n    \n    function func_12E8(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1302;\n        var var2 = var0;\n        var var3 = arg0;\n        return func_12AF(var2, var3);\n    }\n    \n    function func_130A() returns (var r0) { return memory[0x40:0x60]; }\n    \n    function func_131E(var arg0) returns (var r0) { return arg0 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_133E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1349;\n        var var2 = arg0;\n        return func_131E(var2);\n    }\n    \n    function func_1350(var arg0) {\n        var var0 = 0x1359;\n        var var1 = arg0;\n        var0 = func_133E(var1);\n    \n        if (arg0 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1367(var arg0, var arg1) returns (var r0) {\n        var var0 = msg.data[arg1:arg1 + 0x20];\n        var var1 = 0x1376;\n        var var2 = var0;\n        func_1350(var2);\n        return var0;\n    }\n    \n    function func_137C(var arg0) returns (var r0) { return arg0; }\n    \n    function func_1386(var arg0) {\n        var var0 = 0x138f;\n        var var1 = arg0;\n        var0 = func_137C(var1);\n    \n        if (arg0 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_139D(var arg0, var arg1) returns (var r0) {\n        var var0 = msg.data[arg1:arg1 + 0x20];\n        var var1 = 0x13ac;\n        var var2 = var0;\n        func_1386(var2);\n        return var0;\n    }\n    \n    function func_13B2(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x00;\n            var var3 = 0x13d7;\n            var var4 = arg0;\n            var var5 = arg1 + var2;\n            var3 = func_1367(var4, var5);\n            var0 = var3;\n            var2 = 0x20;\n            var3 = 0x13e8;\n            var4 = arg0;\n            var5 = arg1 + var2;\n            var3 = func_139D(var4, var5);\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var2 = 0x13c8;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_13F2(var arg0) returns (var r0) { return !!arg0; }\n    \n    function func_13FE(var arg0, var arg1) {\n        var var0 = 0x1407;\n        var var1 = arg1;\n        var0 = func_13F2(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_140D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x1422;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_13FE(var2, var3);\n        return var0;\n    }\n    \n    function func_1428(var arg0, var arg1) {\n        var var0 = 0x1431;\n        var var1 = arg1;\n        var0 = func_137C(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_1437(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x144c;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_1428(var2, var3);\n        return var0;\n    }\n    \n    function func_1452(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var3 = 0x00;\n            var var4 = 0x1479;\n            var var5 = arg0;\n            var var6 = arg1 + var3;\n            var4 = func_1367(var5, var6);\n            var0 = var4;\n            var3 = 0x20;\n            var4 = 0x148a;\n            var5 = arg0;\n            var6 = arg1 + var3;\n            var4 = func_1367(var5, var6);\n            var1 = var4;\n            var3 = 0x40;\n            var4 = 0x149b;\n            var5 = arg0;\n            var6 = arg1 + var3;\n            var4 = func_139D(var5, var6);\n            arg1 = var4;\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0, arg1;\n        } else {\n            var3 = 0x146a;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_14A5(var arg0) returns (var r0) { return arg0 & 0xff; }\n    \n    function func_14B2(var arg0, var arg1) {\n        var var0 = 0x14bb;\n        var var1 = arg1;\n        var0 = func_14A5(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_14C1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x14d6;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_14B2(var2, var3);\n        return var0;\n    }\n    \n    function func_1510(var arg0, var arg1) {\n        var var0 = 0x1519;\n        var var1 = arg0;\n        var0 = func_129E(var1);\n        var temp0 = arg1;\n        var temp1 = temp0 + var0;\n        var0 = temp1;\n    \n        if (!((var0 > 0xffffffffffffffff) | (var0 < temp0))) {\n            memory[0x40:0x60] = var0;\n            return;\n        } else {\n            var1 = 0x1537;\n            memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            memory[0x04:0x24] = 0x41;\n            revert(memory[0x00:0x24]);\n        }\n    }\n    \n    function func_155C(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 <= 0xffffffffffffffff) { return arg0 * 0x20 + 0x20; }\n    \n        var var1 = 0x1576;\n        memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        memory[0x04:0x24] = 0x41;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_158D(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x15a0;\n        var var2 = 0x159b;\n        var var3 = arg1;\n        var2 = func_155C(var3);\n        var1 = func_159B(var2);\n        var temp0 = var1;\n        var0 = temp0;\n        var temp1 = arg1;\n        memory[var0:var0 + 0x20] = temp1;\n        var1 = var0 + 0x20;\n        var2 = arg2 + temp1 * 0x20;\n    \n        if (var2 <= arg0) {\n            var3 = arg2;\n        \n            if (var3 >= var2) {\n            label_15EC:\n                return var0;\n            } else {\n            label_15CE:\n                var var4 = var3;\n                var var5 = 0x15d8;\n                var var6 = arg0;\n                var var7 = var4;\n                var5 = func_1367(var6, var7);\n                var temp2 = var1;\n                memory[temp2:temp2 + 0x20] = var5;\n                var1 = temp2 + 0x20;\n                var3 = var3 + 0x20;\n            \n                if (var3 >= var2) { goto label_15EC; }\n                else { goto label_15CE; }\n            }\n        } else {\n            var3 = 0x15c2;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_159B(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x154b;\n        var1 = func_130A();\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x1557;\n        var var2 = arg0;\n        var var3 = var0;\n        func_1510(var2, var3);\n        return var0;\n    }\n    \n    function func_15F6(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 + 0x1f i< arg0) {\n            var temp0 = arg1;\n            var var1 = msg.data[temp0:temp0 + 0x20];\n            var var2 = 0x161b;\n            var var3 = arg0;\n            var var4 = var1;\n            var var5 = temp0 + 0x20;\n            return func_158D(var3, var4, var5);\n        } else {\n            var1 = 0x160a;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_1624(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3) {\n        r3 = 0x00;\n        var var1 = r3;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 - arg1 i>= 0x80) {\n            var var4 = 0x00;\n            var var5 = 0x164c;\n            var var6 = arg0;\n            var var7 = arg1 + var4;\n            var5 = func_1367(var6, var7);\n            r3 = var5;\n            var4 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        \n            if (var4 <= 0xffffffffffffffff) {\n                var5 = 0x1679;\n                var6 = arg0;\n                var7 = arg1 + var4;\n                var5 = func_15F6(var6, var7);\n                var1 = var5;\n                var4 = 0x40;\n                var5 = 0x168a;\n                var6 = arg0;\n                var7 = arg1 + var4;\n                var5 = func_139D(var6, var7);\n                var2 = var5;\n                var4 = 0x60;\n                var5 = 0x169b;\n                var6 = arg0;\n                var7 = arg1 + var4;\n                var5 = func_139D(var6, var7);\n                var temp0 = r3;\n                r3 = var5;\n                r0 = temp0;\n                arg0 = var1;\n                arg1 = var2;\n                return r0, arg0, arg1, r3;\n            } else {\n                var5 = 0x166c;\n                revert(memory[0x00:0x00]);\n            }\n        } else {\n            var4 = 0x163d;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_16A7(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = 0x00;\n            var var2 = 0x16cb;\n            var var3 = arg0;\n            var var4 = arg1 + var1;\n            return func_1367(var3, var4);\n        } else {\n            var1 = 0x16bc;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_16D4(var arg0, var arg1) {\n        var var0 = 0x16dd;\n        var var1 = arg1;\n        var0 = func_133E(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_16E3(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x16f8;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_16D4(var2, var3);\n        return var0;\n    }\n    \n    function func_1703(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 + 0x1f i< arg0) {\n            var1 = msg.data[arg1:arg1 + 0x20];\n        \n            if (var1 <= 0xffffffffffffffff) {\n                var0 = arg1 + 0x20;\n            \n                if (var0 + var1 * 0x20 <= arg0) {\n                    arg0 = var1;\n                    r0 = var0;\n                    return r0, arg0;\n                } else {\n                    var var2 = 0x1751;\n                    revert(memory[0x00:0x00]);\n                }\n            } else {\n                var2 = 0x1735;\n                revert(memory[0x00:0x00]);\n            }\n        } else {\n            var2 = 0x1718;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_1759(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3) {\n        r3 = 0x00;\n        var var1 = r3;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var4 = msg.data[arg1:arg1 + 0x20];\n        \n            if (var4 <= 0xffffffffffffffff) {\n                var var5 = 0x179d;\n                var var6 = arg0;\n                var var7 = arg1 + var4;\n                var5, var6 = func_1703(var6, var7);\n                var1 = var6;\n                r3 = var5;\n                var4 = 0x20;\n                var5 = 0x17b0;\n                var6 = arg0;\n                var7 = arg1 + var4;\n                var5 = func_139D(var6, var7);\n                var2 = var5;\n                var4 = 0x40;\n                var5 = 0x17c1;\n                var6 = arg0;\n                var7 = arg1 + var4;\n                var5 = func_1367(var6, var7);\n                var temp0 = r3;\n                r3 = var5;\n                r0 = temp0;\n                arg0 = var1;\n                arg1 = var2;\n                return r0, arg0, arg1, r3;\n            } else {\n                var5 = 0x1790;\n                revert(memory[0x00:0x00]);\n            }\n        } else {\n            var4 = 0x1772;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_17CD(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x00;\n            var var3 = 0x17f2;\n            var var4 = arg0;\n            var var5 = arg1 + var2;\n            var3 = func_1367(var4, var5);\n            var0 = var3;\n            var2 = 0x20;\n            var3 = 0x1803;\n            var4 = arg0;\n            var5 = arg1 + var2;\n            var3 = func_1367(var4, var5);\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var2 = 0x17e3;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_183C(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 / 0x02;\n        var var1 = temp0 & 0x01;\n    \n        if (!var1) {\n            var temp1 = var0 & 0x7f;\n            var0 = temp1;\n        \n            if (var1 - (var0 < 0x20)) { goto label_1867; }\n            else { goto label_185F; }\n        } else if (var1 - (var0 < 0x20)) {\n        label_1867:\n            return var0;\n        } else {\n        label_185F:\n            var var2 = 0x1866;\n            memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            memory[0x04:0x24] = 0x22;\n            revert(memory[0x00:0x24]);\n        }\n    }\n    \n    function func_189C(var arg0) returns (var r0) { return arg0; }\n    \n    function func_18B0(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x18cb;\n        var var2 = 0x18c6;\n        var var3 = 0x18c1;\n        var var4 = arg0;\n        var3 = func_189C(var4);\n        var2 = func_18C1(var3);\n        return func_18C6(var2);\n    }\n    \n    function func_18C1(var arg0) returns (var r0) { return arg0; }\n    \n    function func_18C6(var arg0) returns (var r0) {\n        r0 = func_137C(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_18D2(var arg0, var arg1) {\n        var var0 = 0x18db;\n        var var1 = arg1;\n        var0 = func_18B0(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_18E1(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var temp0 = arg4;\n        var var0 = temp0 + 0x80;\n        var var1 = 0x18f6;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_1428(var2, var3);\n        var1 = 0x1903;\n        var2 = arg4 + 0x20;\n        var3 = arg1;\n        func_18D2(var2, var3);\n        var1 = 0x1910;\n        var2 = arg4 + 0x40;\n        var3 = arg2;\n        func_18D2(var2, var3);\n        var1 = 0x191d;\n        var2 = arg4 + 0x60;\n        var3 = arg3;\n        func_1428(var2, var3);\n        return var0;\n    }\n    \n    function func_1926(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var temp0 = arg3;\n        var var0 = temp0 + 0x60;\n        var var1 = 0x193b;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_16D4(var2, var3);\n        var1 = 0x1948;\n        var2 = arg3 + 0x20;\n        var3 = arg1;\n        func_16D4(var2, var3);\n        var1 = 0x1955;\n        var2 = arg3 + 0x40;\n        var3 = arg2;\n        func_1428(var2, var3);\n        return var0;\n    }\n    \n    function func_195D(var arg0) {\n        var var0 = 0x1966;\n        var var1 = arg0;\n        var0 = func_13F2(var1);\n    \n        if (arg0 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1974(var arg0, var arg1) returns (var r0) {\n        var var0 = memory[arg1:arg1 + 0x20];\n        var var1 = 0x1983;\n        var var2 = var0;\n        func_195D(var2);\n        return var0;\n    }\n    \n    function func_1989(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = 0x00;\n            var var2 = 0x19ad;\n            var var3 = arg0;\n            var var4 = arg1 + var1;\n            return func_1974(var3, var4);\n        } else {\n            var1 = 0x199e;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_19E5(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x19f0;\n        var var2 = arg0;\n        var1 = func_137C(var2);\n        arg0 = var1;\n    \n        if (arg0 - 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { return arg0 + 0x01; }\n    \n        var1 = 0x1a21;\n        memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_1A2D(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x6464726573730000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1A7C(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1a89;\n        var var2 = 0x26;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1a94;\n        var2 = arg0;\n        func_1A2D(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1A9F(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1ab8;\n        var var2 = var0;\n        return func_1A7C(var2);\n    }\n    \n    function func_1ABF(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1B0E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1b1b;\n        var var2 = 0x24;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1b26;\n        var2 = arg0;\n        func_1ABF(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1B31(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1b4a;\n        var var2 = var0;\n        return func_1B0E(var2);\n    }\n    \n    function func_1B51(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7373000000000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1BA0(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1bad;\n        var var2 = 0x22;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1bb8;\n        var2 = arg0;\n        func_1B51(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1BC3(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1bdc;\n        var var2 = var0;\n        return func_1BA0(var2);\n    }\n    \n    function func_1BE3(var arg0) {\n        memory[arg0:arg0 + 0x20] = 0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000;\n    }\n    \n    function func_1C0C(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1c19;\n        var var2 = 0x1d;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1c24;\n        var2 = arg0;\n        func_1BE3(var2);\n        return arg0 + 0x20;\n    }\n    \n    function func_1C2F(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1c48;\n        var var2 = var0;\n        return func_1C0C(var2);\n    }\n    \n    function func_1C4F(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1C9E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1cab;\n        var var2 = 0x25;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1cb6;\n        var2 = arg0;\n        func_1C4F(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1CC1(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1cda;\n        var var2 = var0;\n        return func_1C9E(var2);\n    }\n    \n    function func_1CE1(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x6573730000000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1D30(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1d3d;\n        var var2 = 0x23;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1d48;\n        var2 = arg0;\n        func_1CE1(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1D53(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1d6c;\n        var var2 = var0;\n        return func_1D30(var2);\n    }\n    \n    function func_1D73(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x616c616e63650000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1DC2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1dcf;\n        var var2 = 0x26;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1dda;\n        var2 = arg0;\n        func_1D73(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1DE5(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1dfe;\n        var var2 = var0;\n        return func_1DC2(var2);\n    }\n    \n    function func_1E05(var arg0) {\n        memory[arg0:arg0 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n    }\n    \n    function func_1E2E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1e3b;\n        var var2 = 0x20;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1e46;\n        var2 = arg0;\n        func_1E05(var2);\n        return arg0 + 0x20;\n    }\n    \n    function func_1E51(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1e6a;\n        var var2 = var0;\n        return func_1E2E(var2);\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x8da5cb5b > var0) {\n            if (0x313ce567 > var0) {\n                if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var var1 = 0x010d;\n                    var1 = func_0349();\n                    var temp0 = var1;\n                    var1 = 0x011a;\n                    var var2 = temp0;\n                    var var3 = memory[0x40:0x60];\n                    var1 = func_12E8(var2, var3);\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + var1 - temp1];\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = 0x013d;\n                    var2 = 0x0138;\n                    var var4 = 0x04;\n                    var3 = var4 + (msg.data.length - var4);\n                    var2, var3 = func_13B2(var3, var4);\n                    var1 = func_0138(var2, var3);\n                    var temp2 = var1;\n                    var1 = 0x014a;\n                    var2 = temp2;\n                    var3 = memory[0x40:0x60];\n                    var1 = func_140D(var2, var3);\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + var1 - temp3];\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = 0x015b;\n                    var1 = func_03FE();\n                    var temp4 = var1;\n                    var1 = 0x0168;\n                    var3 = memory[0x40:0x60];\n                    var2 = temp4;\n                    var1 = func_1437(var2, var3);\n                    var temp5 = memory[0x40:0x60];\n                    return memory[temp5:temp5 + var1 - temp5];\n                } else if (var0 == 0x23b872dd) {\n                    // Dispatch table entry for transferFrom(address,address,uint256)\n                    var1 = 0x018b;\n                    var2 = 0x0186;\n                    var4 = 0x04;\n                    var3 = var4 + (msg.data.length - var4);\n                    var2, var3, var4 = func_1452(var3, var4);\n                    var1 = func_0186(var2, var3, var4);\n                    var temp6 = var1;\n                    var1 = 0x0198;\n                    var2 = temp6;\n                    var3 = memory[0x40:0x60];\n                    var1 = func_140D(var2, var3);\n                    var temp7 = memory[0x40:0x60];\n                    return memory[temp7:temp7 + var1 - temp7];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = 0x01a9;\n                var1 = func_0437();\n                var temp8 = var1;\n                var1 = 0x01b6;\n                var2 = temp8;\n                var3 = memory[0x40:0x60];\n                var1 = func_14C1(var2, var3);\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + var1 - temp9];\n            } else if (var0 == 0x618a2f5e) {\n                // Dispatch table entry for 0x618a2f5e (unknown)\n                var1 = 0x01d9;\n                var2 = 0x01d4;\n                var4 = 0x04;\n                var3 = var4 + (msg.data.length - var4);\n                var var5;\n                var2, var3, var4, var5 = func_1624(var3, var4);\n                var1 = func_01D4(var2, var3, var4, var5);\n                var temp10 = var1;\n                var1 = 0x01e6;\n                var2 = temp10;\n                var3 = memory[0x40:0x60];\n                var1 = func_140D(var2, var3);\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + var1 - temp11];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = 0x0209;\n                var2 = 0x0204;\n                var4 = 0x04;\n                var3 = var4 + (msg.data.length - var4);\n                var2 = func_16A7(var3, var4);\n                var1 = func_0204(var2);\n                var temp12 = var1;\n                var1 = 0x0216;\n                var2 = temp12;\n                var3 = memory[0x40:0x60];\n                var1 = func_1437(var2, var3);\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + var1 - temp13];\n            } else if (var0 == 0x715018a6) {\n                // Dispatch table entry for renounceOwnership()\n                var1 = 0x0227;\n                renounceOwnership();\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xbeabacc8 > var0) {\n            if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = 0x0231;\n                var1 = func_0696();\n                var temp14 = var1;\n                var1 = 0x023e;\n                var2 = temp14;\n                var3 = memory[0x40:0x60];\n                var1 = func_16E3(var2, var3);\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + var1 - temp15];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = 0x024f;\n                var1 = func_06BF();\n                var temp16 = var1;\n                var1 = 0x025c;\n                var2 = temp16;\n                var3 = memory[0x40:0x60];\n                var1 = func_12E8(var2, var3);\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + var1 - temp17];\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = 0x027f;\n                var2 = 0x027a;\n                var4 = 0x04;\n                var3 = var4 + (msg.data.length - var4);\n                var2, var3 = func_13B2(var3, var4);\n                var1 = func_027A(var2, var3);\n                var temp18 = var1;\n                var1 = 0x028c;\n                var2 = temp18;\n                var3 = memory[0x40:0x60];\n                var1 = func_140D(var2, var3);\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + var1 - temp19];\n            } else if (var0 == 0xaafe62d1) {\n                // Dispatch table entry for 0xaafe62d1 (unknown)\n                var1 = 0x02af;\n                var2 = 0x02aa;\n                var3 = msg.data.length - 0x04 + 0x04;\n                var4 = 0x04;\n                var2, var3, var4, var5 = func_1759(var3, var4);\n                func_02AA(var2, var3, var4, var5);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xbeabacc8) {\n            // Dispatch table entry for transfer(address,address,uint256)\n            var1 = 0x02cb;\n            var2 = 0x02c6;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2, var3, var4 = func_1452(var3, var4);\n            func_02C6(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xcb205583) {\n            // Dispatch table entry for 0xcb205583 (unknown)\n            var1 = 0x02e7;\n            var2 = 0x02e2;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2 = func_16A7(var3, var4);\n            var1 = func_02E2(var2);\n            var temp20 = var1;\n            var1 = 0x02f4;\n            var2 = temp20;\n            var3 = memory[0x40:0x60];\n            var1 = func_140D(var2, var3);\n            var temp21 = memory[0x40:0x60];\n            return memory[temp21:temp21 + var1 - temp21];\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x0317;\n            var2 = 0x0312;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2, var3 = func_17CD(var3, var4);\n            var1 = func_0312(var2, var3);\n            var temp22 = var1;\n            var1 = 0x0324;\n            var2 = temp22;\n            var3 = memory[0x40:0x60];\n            var1 = func_1437(var2, var3);\n            var temp23 = memory[0x40:0x60];\n            return memory[temp23:temp23 + var1 - temp23];\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = 0x0347;\n            var2 = 0x0342;\n            var3 = msg.data.length - 0x04 + 0x04;\n            var4 = 0x04;\n            var2 = func_16A7(var3, var4);\n            func_0342(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0138(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x03e6;\n        var2 = func_0AEC();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x03f3;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_0AF4(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_0186(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0413;\n        var2 = func_0AEC();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x0420;\n        var var3 = arg0;\n        var var4 = var1;\n        var var5 = arg2;\n        func_0CBD(var3, var4, var5);\n        var2 = 0x042b;\n        var3 = arg0;\n        var4 = arg1;\n        var5 = arg2;\n        func_0D49(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_01D4(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= memory[arg1:arg1 + 0x20]) {\n        label_062C:\n            return 0x01;\n        } else {\n        label_0452:\n            var var2 = arg1;\n            var var3 = var1;\n        \n            if (var3 < memory[var2:var2 + 0x20]) {\n                var2 = memory[var3 * 0x20 + 0x20 + var2:var3 * 0x20 + 0x20 + var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var var4 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                var var5 = 0x04c8;\n                var var7 = memory[0x40:0x60];\n                var var6 = arg2;\n                var5 = func_1437(var6, var7);\n                var temp0 = memory[0x40:0x60];\n                log(memory[temp0:temp0 + var5 - temp0], [stack[-2], stack[-3], stack[-4]]);\n                var2 = arg1;\n                var3 = var1;\n            \n                if (var3 < memory[var2:var2 + 0x20]) {\n                    var2 = memory[var3 * 0x20 + 0x20 + var2:var3 * 0x20 + 0x20 + var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var3 = 0xffffffffffffffffffffffffffffffffffffffff & 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                    var4 = 0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822;\n                    var5 = 0x0562;\n                    var6 = arg2;\n                    var7 = 0x00;\n                    var var8 = var7;\n                    var var9 = arg3;\n                    var var10 = memory[0x40:0x60];\n                    var5 = func_18E1(var6, var7, var8, var9, var10);\n                    var temp1 = memory[0x40:0x60];\n                    log(memory[temp1:temp1 + var5 - temp1], [stack[-2], stack[-3], stack[-4]]);\n                    var2 = 0xffffffffffffffffffffffffffffffffffffffff & 0xafd54595986ede4976d6717fcead8b36978edc17;\n                    var3 = 0xe156b1b6;\n                    var4 = arg1;\n                    var5 = var1;\n                \n                    if (var5 < memory[var4:var4 + 0x20]) {\n                        var temp2 = memory[var5 * 0x20 + 0x20 + var4:var5 * 0x20 + 0x20 + var4 + 0x20];\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n                        var4 = 0x05d5;\n                        var5 = temp2;\n                        var6 = arg0;\n                        var8 = temp3 + 0x04;\n                        var7 = arg3;\n                        var4 = func_1926(var5, var6, var7, var8);\n                        var temp4 = memory[0x40:0x60];\n                        var temp5;\n                        temp5, memory[temp4:temp4 + 0x20] = address(var2).call.gas(msg.gas)(memory[temp4:temp4 + var4 - temp4]);\n                        var5 = !temp5;\n                    \n                        if (!var5) {\n                            var temp6 = memory[0x40:0x60];\n                            var temp7 = returndata.length;\n                            memory[0x40:0x60] = temp6 + (temp7 + 0x1f & ~0x1f);\n                            var2 = 0x0618;\n                            var4 = temp6;\n                            var3 = var4 + temp7;\n                            var2 = func_1989(var3, var4);\n                            var2 = var1;\n                            var4 = var2;\n                            var3 = 0x0624;\n                            var3 = func_19E5(var4);\n                            var1 = var3;\n                        \n                            if (var1 >= memory[arg1:arg1 + 0x20]) { goto label_062C; }\n                            else { goto label_0452; }\n                        } else {\n                            var temp8 = returndata.length;\n                            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var6 = 0x05ac;\n                    \n                    label_186D:\n                        memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        memory[0x04:0x24] = 0x32;\n                        revert(memory[0x00:0x24]);\n                    }\n                } else {\n                    var4 = 0x04e2;\n                    goto label_186D;\n                }\n            } else {\n                var4 = 0x0463;\n                goto label_186D;\n            }\n        }\n    }\n    \n    function func_0204(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_027A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x075c;\n        var2 = func_0AEC();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x0769;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_0D49(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_02AA(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = 0x00;\n    \n        if (var0 >= arg1) {\n        label_08D6:\n            return;\n        } else {\n        label_0783:\n            var var1 = arg0;\n            var var2 = arg1;\n            var var3 = var0;\n        \n            if (var3 < var2) {\n                var temp0 = var3 * 0x20 + var1;\n                var temp1 = temp0 + 0x20;\n                var1 = 0x07aa;\n                var3 = temp0;\n                var2 = temp1;\n                var1 = func_16A7(var2, var3);\n                var1 = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = arg3 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = 0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822;\n                var var4 = 0x080d;\n                var var5 = arg2;\n                var var6 = 0x00;\n                var var7 = var6;\n                var var9 = memory[0x40:0x60];\n                var var8 = var5;\n                var4 = func_18E1(var5, var6, var7, var8, var9);\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + var4 - temp2], [stack[-2], stack[-3], stack[-4]]);\n                var1 = arg0;\n                var2 = arg1;\n                var3 = var0;\n            \n                if (var3 < var2) {\n                    var temp3 = var3 * 0x20 + var1;\n                    var temp4 = temp3 + 0x20;\n                    var1 = 0x083d;\n                    var2 = temp4;\n                    var3 = temp3;\n                    var1 = func_16A7(var2, var3);\n                    var1 = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var2 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                    var4 = 0x08bb;\n                    var6 = memory[0x40:0x60];\n                    var5 = arg2;\n                    var4 = func_1437(var5, var6);\n                    var temp5 = memory[0x40:0x60];\n                    log(memory[temp5:temp5 + var4 - temp5], [stack[-2], stack[-3], stack[-4]]);\n                    var1 = var0;\n                    var3 = var1;\n                    var2 = 0x08ce;\n                    var2 = func_19E5(var3);\n                    var0 = var2;\n                \n                    if (var0 >= arg1) { goto label_08D6; }\n                    else { goto label_0783; }\n                } else {\n                    var4 = 0x0827;\n                \n                label_186D:\n                    memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            } else {\n                var4 = 0x0794;\n                goto label_186D;\n            }\n        }\n    }\n    \n    function func_02C6(var arg0, var arg1, var arg2) {\n        var var0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var1 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n        var var3 = 0x093a;\n        var var5 = memory[0x40:0x60];\n        var var4 = arg2;\n        var3 = func_1437(var4, var5);\n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + var3 - temp0], [stack[-2], stack[-3], stack[-4]]);\n    }\n    \n    function func_02E2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0xffffffffffffffffffffffffffffffffffffffff & 0xc8156a1639e694b7e0e5bd9319eacf02df12bc16;\n        var var2 = 0x097c;\n        var2 = func_0AEC();\n    \n        if ((var2 & 0xffffffffffffffffffffffffffffffffffffffff) - var1) { return 0x01; }\n    \n        storage[0x06] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x06] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function func_0312(var arg0, var arg1) returns (var r0) {\n        r0 = func_09E2(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0342(var arg0) {\n        var var0 = 0x0a71;\n        func_1111();\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var0 = 0x0ae9;\n            var var1 = arg0;\n            func_118F(var1);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var0 = 0x0ad7;\n            var1 = temp0 + 0x04;\n            var0 = func_1A9F(var1);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_0349() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x04;\n        var var2 = 0x0358;\n        var var3 = storage[var1];\n        var2 = func_183C(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0384;\n        var6 = func_183C(var7);\n    \n        if (!var6) {\n        label_03D1:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_03C8; }\n        \n        label_03B4:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_03B4; }\n        \n        label_03C8:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_03D1;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_03D1;\n        }\n    }\n    \n    function func_03FE() returns (var r0) { return storage[0x03]; }\n    \n    function func_0437() returns (var r0) { return 0x08; }\n    \n    function renounceOwnership() {\n        var var0 = 0x068a;\n        func_1111();\n        var0 = 0x0694;\n        var var1 = 0x00;\n        func_118F(var1);\n    }\n    \n    function func_0696() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_06BF() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x05;\n        var var2 = 0x06ce;\n        var var3 = storage[var1];\n        var2 = func_183C(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x06fa;\n        var6 = func_183C(var7);\n    \n        if (!var6) {\n        label_0747:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_073E; }\n        \n        label_072A:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_072A; }\n        \n        label_073E:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0747;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0747;\n        }\n    }\n    \n    function func_09E2(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0AEC() returns (var r0) { return msg.sender; }\n    \n    function func_0AF4(var arg0, var arg1, var arg2) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var0 = 0x0b5a;\n            var1 = temp6 + 0x04;\n            var0 = func_1B31(var1);\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + var0 - temp7]);\n        } else if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = arg2;\n            var var0 = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var2 = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\n            var var3 = 0x0cb0;\n            var var5 = memory[0x40:0x60];\n            var var4 = arg2;\n            var3 = func_1437(var4, var5);\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + var3 - temp3], [stack[-2], stack[-3], stack[-4]]);\n            return;\n        } else {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp4 + 0x04;\n            var0 = 0x0bc9;\n            var0 = func_1BC3(var1);\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + var0 - temp5]);\n        }\n    }\n    \n    function func_0CBD(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = 0x0cc9;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_09E2(var2, var3);\n        var0 = var1;\n    \n        if (var0 == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n        label_0D43:\n            return;\n        } else if (var0 >= arg2) {\n            var1 = 0x0d42;\n            var2 = arg0;\n            var3 = arg1;\n            var var4 = var0 - arg2;\n            func_0AF4(var2, var3, var4);\n            goto label_0D43;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var2 = temp0 + 0x04;\n            var1 = 0x0d2c;\n            var1 = func_1C2F(var2);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var1 - temp1]);\n        }\n    }\n    \n    function func_0D49(var arg0, var arg1, var arg2) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp9 + 0x04;\n            var0 = 0x0daf;\n            var0 = func_1CC1(var1);\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + var0 - temp10]);\n        } else if (!(arg1 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp7 + 0x04;\n            var0 = 0x0e1e;\n            var0 = func_1D53(var1);\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        } else if (storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n        label_0F81:\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var var0 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var0 >= arg2) {\n                var temp0 = arg2;\n                var temp1 = arg0;\n                memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x01;\n                storage[keccak256(memory[0x00:0x40])] = var0 - temp0;\n                var temp2 = arg1;\n                memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x01;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] + temp0;\n                var var1 = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var var2 = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                var var4 = 0x10f8;\n                var var6 = memory[0x40:0x60];\n                var var5 = temp0;\n                var4 = func_1437(var5, var6);\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + var4 - temp4], [stack[-2], stack[-3], stack[-4]]);\n                var1 = 0x110b;\n                var2 = arg0;\n                var3 = arg1;\n                var4 = arg2;\n                func_1253(var2, var3, var4);\n                return;\n            } else {\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var2 = temp5 + 0x04;\n                var1 = 0x0fff;\n                var1 = func_1DE5(var2);\n                var temp6 = memory[0x40:0x60];\n                revert(memory[temp6:temp6 + var1 - temp6]);\n            }\n        } else {\n            var0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (!var0) {\n            label_0F64:\n            \n                if (!var0) {\n                label_0F80:\n                    goto label_0F81;\n                } else {\n                    var0 = 0x00;\n                \n                    if (var0) {\n                    label_0F7E:\n                        goto label_0F80;\n                    } else if (arg2 < 0x64) { goto label_0F7E; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n                var0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0xb8cae8788e8aec58a504f5bb4482e4fa5d382f47;\n            \n                if (var0) {\n                    var0 = !var0;\n                    goto label_0F64;\n                } else {\n                    var0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0xde212260a0235a782368b1eb7417efcdbdb5585d;\n                    goto label_0F64;\n                }\n            }\n        }\n    }\n    \n    function func_1111() {\n        var var0 = 0x1119;\n        var0 = func_0AEC();\n        var0 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var1 = 0x1137;\n        var1 = func_0696();\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == var0) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var0 = 0x1184;\n        var1 = temp0 + 0x04;\n        var0 = func_1E51(var1);\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + var0 - temp1]);\n    }\n    \n    function func_118F(var arg0) {\n        var temp0 = storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp1 = arg0;\n        storage[0x00] = (temp1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + memory[0x40:0x60] - temp2], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1253(var arg0, var arg1, var arg2) {}\n    \n    function func_1258(var arg0) returns (var r0) { return memory[arg0:arg0 + 0x20]; }\n    \n    function func_1263(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0;\n        return temp0 + 0x20;\n    }\n    \n    function func_1274(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n    \n        if (var0 >= arg0) {\n        label_1292:\n            memory[arg1 + arg0:arg1 + arg0 + 0x20] = 0x00;\n            return;\n        } else {\n        label_1280:\n            var temp0 = var0;\n            memory[arg1 + temp0:arg1 + temp0 + 0x20] = memory[arg2 + temp0:arg2 + temp0 + 0x20];\n            var0 = temp0 + 0x20;\n        \n            if (var0 >= arg0) { goto label_1292; }\n            else { goto label_1280; }\n        }\n    }\n    \n    function func_129E(var arg0) returns (var r0) { return arg0 + 0x1f & ~0x1f; }\n    \n    function func_12AF(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x12ba;\n        var var2 = arg1;\n        var1 = func_1258(var2);\n        var2 = 0x12c4;\n        var var3 = var1;\n        var var4 = arg0;\n        var2 = func_1263(var3, var4);\n        var temp0 = var2;\n        arg0 = temp0;\n        var2 = 0x12d4;\n        var3 = var1;\n        var4 = arg0;\n        var var5 = arg1 + 0x20;\n        func_1274(var3, var4, var5);\n        var2 = 0x12dd;\n        var3 = var1;\n        var2 = func_129E(var3);\n        return arg0 + var2;\n    }\n    \n    function func_12E8(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1302;\n        var var2 = var0;\n        var var3 = arg0;\n        return func_12AF(var2, var3);\n    }\n    \n    function func_130A() returns (var r0) { return memory[0x40:0x60]; }\n    \n    function func_131E(var arg0) returns (var r0) { return arg0 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_133E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1349;\n        var var2 = arg0;\n        return func_131E(var2);\n    }\n    \n    function func_1350(var arg0) {\n        var var0 = 0x1359;\n        var var1 = arg0;\n        var0 = func_133E(var1);\n    \n        if (arg0 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1367(var arg0, var arg1) returns (var r0) {\n        var var0 = msg.data[arg1:arg1 + 0x20];\n        var var1 = 0x1376;\n        var var2 = var0;\n        func_1350(var2);\n        return var0;\n    }\n    \n    function func_137C(var arg0) returns (var r0) { return arg0; }\n    \n    function func_1386(var arg0) {\n        var var0 = 0x138f;\n        var var1 = arg0;\n        var0 = func_137C(var1);\n    \n        if (arg0 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_139D(var arg0, var arg1) returns (var r0) {\n        var var0 = msg.data[arg1:arg1 + 0x20];\n        var var1 = 0x13ac;\n        var var2 = var0;\n        func_1386(var2);\n        return var0;\n    }\n    \n    function func_13B2(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x00;\n            var var3 = 0x13d7;\n            var var4 = arg0;\n            var var5 = arg1 + var2;\n            var3 = func_1367(var4, var5);\n            var0 = var3;\n            var2 = 0x20;\n            var3 = 0x13e8;\n            var4 = arg0;\n            var5 = arg1 + var2;\n            var3 = func_139D(var4, var5);\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var2 = 0x13c8;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_13F2(var arg0) returns (var r0) { return !!arg0; }\n    \n    function func_13FE(var arg0, var arg1) {\n        var var0 = 0x1407;\n        var var1 = arg1;\n        var0 = func_13F2(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_140D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x1422;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_13FE(var2, var3);\n        return var0;\n    }\n    \n    function func_1428(var arg0, var arg1) {\n        var var0 = 0x1431;\n        var var1 = arg1;\n        var0 = func_137C(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_1437(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x144c;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_1428(var2, var3);\n        return var0;\n    }\n    \n    function func_1452(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var3 = 0x00;\n            var var4 = 0x1479;\n            var var5 = arg0;\n            var var6 = arg1 + var3;\n            var4 = func_1367(var5, var6);\n            var0 = var4;\n            var3 = 0x20;\n            var4 = 0x148a;\n            var5 = arg0;\n            var6 = arg1 + var3;\n            var4 = func_1367(var5, var6);\n            var1 = var4;\n            var3 = 0x40;\n            var4 = 0x149b;\n            var5 = arg0;\n            var6 = arg1 + var3;\n            var4 = func_139D(var5, var6);\n            arg1 = var4;\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0, arg1;\n        } else {\n            var3 = 0x146a;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_14A5(var arg0) returns (var r0) { return arg0 & 0xff; }\n    \n    function func_14B2(var arg0, var arg1) {\n        var var0 = 0x14bb;\n        var var1 = arg1;\n        var0 = func_14A5(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_14C1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x14d6;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_14B2(var2, var3);\n        return var0;\n    }\n    \n    function func_1510(var arg0, var arg1) {\n        var var0 = 0x1519;\n        var var1 = arg0;\n        var0 = func_129E(var1);\n        var temp0 = arg1;\n        var temp1 = temp0 + var0;\n        var0 = temp1;\n    \n        if (!((var0 > 0xffffffffffffffff) | (var0 < temp0))) {\n            memory[0x40:0x60] = var0;\n            return;\n        } else {\n            var1 = 0x1537;\n            memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            memory[0x04:0x24] = 0x41;\n            revert(memory[0x00:0x24]);\n        }\n    }\n    \n    function func_155C(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 <= 0xffffffffffffffff) { return arg0 * 0x20 + 0x20; }\n    \n        var var1 = 0x1576;\n        memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        memory[0x04:0x24] = 0x41;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_158D(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x15a0;\n        var var2 = 0x159b;\n        var var3 = arg1;\n        var2 = func_155C(var3);\n        var1 = func_159B(var2);\n        var temp0 = var1;\n        var0 = temp0;\n        var temp1 = arg1;\n        memory[var0:var0 + 0x20] = temp1;\n        var1 = var0 + 0x20;\n        var2 = arg2 + temp1 * 0x20;\n    \n        if (var2 <= arg0) {\n            var3 = arg2;\n        \n            if (var3 >= var2) {\n            label_15EC:\n                return var0;\n            } else {\n            label_15CE:\n                var var4 = var3;\n                var var5 = 0x15d8;\n                var var6 = arg0;\n                var var7 = var4;\n                var5 = func_1367(var6, var7);\n                var temp2 = var1;\n                memory[temp2:temp2 + 0x20] = var5;\n                var1 = temp2 + 0x20;\n                var3 = var3 + 0x20;\n            \n                if (var3 >= var2) { goto label_15EC; }\n                else { goto label_15CE; }\n            }\n        } else {\n            var3 = 0x15c2;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_159B(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x154b;\n        var1 = func_130A();\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x1557;\n        var var2 = arg0;\n        var var3 = var0;\n        func_1510(var2, var3);\n        return var0;\n    }\n    \n    function func_15F6(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 + 0x1f i< arg0) {\n            var temp0 = arg1;\n            var var1 = msg.data[temp0:temp0 + 0x20];\n            var var2 = 0x161b;\n            var var3 = arg0;\n            var var4 = var1;\n            var var5 = temp0 + 0x20;\n            return func_158D(var3, var4, var5);\n        } else {\n            var1 = 0x160a;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_1624(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3) {\n        r3 = 0x00;\n        var var1 = r3;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 - arg1 i>= 0x80) {\n            var var4 = 0x00;\n            var var5 = 0x164c;\n            var var6 = arg0;\n            var var7 = arg1 + var4;\n            var5 = func_1367(var6, var7);\n            r3 = var5;\n            var4 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        \n            if (var4 <= 0xffffffffffffffff) {\n                var5 = 0x1679;\n                var6 = arg0;\n                var7 = arg1 + var4;\n                var5 = func_15F6(var6, var7);\n                var1 = var5;\n                var4 = 0x40;\n                var5 = 0x168a;\n                var6 = arg0;\n                var7 = arg1 + var4;\n                var5 = func_139D(var6, var7);\n                var2 = var5;\n                var4 = 0x60;\n                var5 = 0x169b;\n                var6 = arg0;\n                var7 = arg1 + var4;\n                var5 = func_139D(var6, var7);\n                var temp0 = r3;\n                r3 = var5;\n                r0 = temp0;\n                arg0 = var1;\n                arg1 = var2;\n                return r0, arg0, arg1, r3;\n            } else {\n                var5 = 0x166c;\n                revert(memory[0x00:0x00]);\n            }\n        } else {\n            var4 = 0x163d;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_16A7(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = 0x00;\n            var var2 = 0x16cb;\n            var var3 = arg0;\n            var var4 = arg1 + var1;\n            return func_1367(var3, var4);\n        } else {\n            var1 = 0x16bc;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_16D4(var arg0, var arg1) {\n        var var0 = 0x16dd;\n        var var1 = arg1;\n        var0 = func_133E(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_16E3(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x16f8;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_16D4(var2, var3);\n        return var0;\n    }\n    \n    function func_1703(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 + 0x1f i< arg0) {\n            var1 = msg.data[arg1:arg1 + 0x20];\n        \n            if (var1 <= 0xffffffffffffffff) {\n                var0 = arg1 + 0x20;\n            \n                if (var0 + var1 * 0x20 <= arg0) {\n                    arg0 = var1;\n                    r0 = var0;\n                    return r0, arg0;\n                } else {\n                    var var2 = 0x1751;\n                    revert(memory[0x00:0x00]);\n                }\n            } else {\n                var2 = 0x1735;\n                revert(memory[0x00:0x00]);\n            }\n        } else {\n            var2 = 0x1718;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_1759(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3) {\n        r3 = 0x00;\n        var var1 = r3;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var4 = msg.data[arg1:arg1 + 0x20];\n        \n            if (var4 <= 0xffffffffffffffff) {\n                var var5 = 0x179d;\n                var var6 = arg0;\n                var var7 = arg1 + var4;\n                var5, var6 = func_1703(var6, var7);\n                var1 = var6;\n                r3 = var5;\n                var4 = 0x20;\n                var5 = 0x17b0;\n                var6 = arg0;\n                var7 = arg1 + var4;\n                var5 = func_139D(var6, var7);\n                var2 = var5;\n                var4 = 0x40;\n                var5 = 0x17c1;\n                var6 = arg0;\n                var7 = arg1 + var4;\n                var5 = func_1367(var6, var7);\n                var temp0 = r3;\n                r3 = var5;\n                r0 = temp0;\n                arg0 = var1;\n                arg1 = var2;\n                return r0, arg0, arg1, r3;\n            } else {\n                var5 = 0x1790;\n                revert(memory[0x00:0x00]);\n            }\n        } else {\n            var4 = 0x1772;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_17CD(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x00;\n            var var3 = 0x17f2;\n            var var4 = arg0;\n            var var5 = arg1 + var2;\n            var3 = func_1367(var4, var5);\n            var0 = var3;\n            var2 = 0x20;\n            var3 = 0x1803;\n            var4 = arg0;\n            var5 = arg1 + var2;\n            var3 = func_1367(var4, var5);\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var2 = 0x17e3;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_183C(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 / 0x02;\n        var var1 = temp0 & 0x01;\n    \n        if (!var1) {\n            var temp1 = var0 & 0x7f;\n            var0 = temp1;\n        \n            if (var1 - (var0 < 0x20)) { goto label_1867; }\n            else { goto label_185F; }\n        } else if (var1 - (var0 < 0x20)) {\n        label_1867:\n            return var0;\n        } else {\n        label_185F:\n            var var2 = 0x1866;\n            memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            memory[0x04:0x24] = 0x22;\n            revert(memory[0x00:0x24]);\n        }\n    }\n    \n    function func_189C(var arg0) returns (var r0) { return arg0; }\n    \n    function func_18B0(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x18cb;\n        var var2 = 0x18c6;\n        var var3 = 0x18c1;\n        var var4 = arg0;\n        var3 = func_189C(var4);\n        var2 = func_18C1(var3);\n        return func_18C6(var2);\n    }\n    \n    function func_18C1(var arg0) returns (var r0) { return arg0; }\n    \n    function func_18C6(var arg0) returns (var r0) {\n        r0 = func_137C(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_18D2(var arg0, var arg1) {\n        var var0 = 0x18db;\n        var var1 = arg1;\n        var0 = func_18B0(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_18E1(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var temp0 = arg4;\n        var var0 = temp0 + 0x80;\n        var var1 = 0x18f6;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_1428(var2, var3);\n        var1 = 0x1903;\n        var2 = arg4 + 0x20;\n        var3 = arg1;\n        func_18D2(var2, var3);\n        var1 = 0x1910;\n        var2 = arg4 + 0x40;\n        var3 = arg2;\n        func_18D2(var2, var3);\n        var1 = 0x191d;\n        var2 = arg4 + 0x60;\n        var3 = arg3;\n        func_1428(var2, var3);\n        return var0;\n    }\n    \n    function func_1926(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var temp0 = arg3;\n        var var0 = temp0 + 0x60;\n        var var1 = 0x193b;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_16D4(var2, var3);\n        var1 = 0x1948;\n        var2 = arg3 + 0x20;\n        var3 = arg1;\n        func_16D4(var2, var3);\n        var1 = 0x1955;\n        var2 = arg3 + 0x40;\n        var3 = arg2;\n        func_1428(var2, var3);\n        return var0;\n    }\n    \n    function func_195D(var arg0) {\n        var var0 = 0x1966;\n        var var1 = arg0;\n        var0 = func_13F2(var1);\n    \n        if (arg0 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1974(var arg0, var arg1) returns (var r0) {\n        var var0 = memory[arg1:arg1 + 0x20];\n        var var1 = 0x1983;\n        var var2 = var0;\n        func_195D(var2);\n        return var0;\n    }\n    \n    function func_1989(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = 0x00;\n            var var2 = 0x19ad;\n            var var3 = arg0;\n            var var4 = arg1 + var1;\n            return func_1974(var3, var4);\n        } else {\n            var1 = 0x199e;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_19E5(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x19f0;\n        var var2 = arg0;\n        var1 = func_137C(var2);\n        arg0 = var1;\n    \n        if (arg0 - 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { return arg0 + 0x01; }\n    \n        var1 = 0x1a21;\n        memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_1A2D(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x6464726573730000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1A7C(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1a89;\n        var var2 = 0x26;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1a94;\n        var2 = arg0;\n        func_1A2D(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1A9F(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1ab8;\n        var var2 = var0;\n        return func_1A7C(var2);\n    }\n    \n    function func_1ABF(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1B0E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1b1b;\n        var var2 = 0x24;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1b26;\n        var2 = arg0;\n        func_1ABF(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1B31(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1b4a;\n        var var2 = var0;\n        return func_1B0E(var2);\n    }\n    \n    function func_1B51(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7373000000000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1BA0(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1bad;\n        var var2 = 0x22;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1bb8;\n        var2 = arg0;\n        func_1B51(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1BC3(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1bdc;\n        var var2 = var0;\n        return func_1BA0(var2);\n    }\n    \n    function func_1BE3(var arg0) {\n        memory[arg0:arg0 + 0x20] = 0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000;\n    }\n    \n    function func_1C0C(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1c19;\n        var var2 = 0x1d;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1c24;\n        var2 = arg0;\n        func_1BE3(var2);\n        return arg0 + 0x20;\n    }\n    \n    function func_1C2F(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1c48;\n        var var2 = var0;\n        return func_1C0C(var2);\n    }\n    \n    function func_1C4F(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1C9E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1cab;\n        var var2 = 0x25;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1cb6;\n        var2 = arg0;\n        func_1C4F(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1CC1(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1cda;\n        var var2 = var0;\n        return func_1C9E(var2);\n    }\n    \n    function func_1CE1(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x6573730000000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1D30(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1d3d;\n        var var2 = 0x23;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1d48;\n        var2 = arg0;\n        func_1CE1(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1D53(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1d6c;\n        var var2 = var0;\n        return func_1D30(var2);\n    }\n    \n    function func_1D73(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x616c616e63650000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1DC2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1dcf;\n        var var2 = 0x26;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1dda;\n        var2 = arg0;\n        func_1D73(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1DE5(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1dfe;\n        var var2 = var0;\n        return func_1DC2(var2);\n    }\n    \n    function func_1E05(var arg0) {\n        memory[arg0:arg0 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n    }\n    \n    function func_1E2E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1e3b;\n        var var2 = 0x20;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1e46;\n        var2 = arg0;\n        func_1E05(var2);\n        return arg0 + 0x20;\n    }\n    \n    function func_1E51(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1e6a;\n        var var2 = var0;\n        return func_1E2E(var2);\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x8da5cb5b > var0) {\n            if (0x313ce567 > var0) {\n                if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var var1 = 0x010d;\n                    var1 = func_0349();\n                    var temp0 = var1;\n                    var1 = 0x011a;\n                    var var2 = temp0;\n                    var var3 = memory[0x40:0x60];\n                    var1 = func_12E8(var2, var3);\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + var1 - temp1];\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = 0x013d;\n                    var2 = 0x0138;\n                    var var4 = 0x04;\n                    var3 = var4 + (msg.data.length - var4);\n                    var2, var3 = func_13B2(var3, var4);\n                    var1 = func_0138(var2, var3);\n                    var temp2 = var1;\n                    var1 = 0x014a;\n                    var2 = temp2;\n                    var3 = memory[0x40:0x60];\n                    var1 = func_140D(var2, var3);\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + var1 - temp3];\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = 0x015b;\n                    var1 = func_03FE();\n                    var temp4 = var1;\n                    var1 = 0x0168;\n                    var3 = memory[0x40:0x60];\n                    var2 = temp4;\n                    var1 = func_1437(var2, var3);\n                    var temp5 = memory[0x40:0x60];\n                    return memory[temp5:temp5 + var1 - temp5];\n                } else if (var0 == 0x23b872dd) {\n                    // Dispatch table entry for transferFrom(address,address,uint256)\n                    var1 = 0x018b;\n                    var2 = 0x0186;\n                    var4 = 0x04;\n                    var3 = var4 + (msg.data.length - var4);\n                    var2, var3, var4 = func_1452(var3, var4);\n                    var1 = func_0186(var2, var3, var4);\n                    var temp6 = var1;\n                    var1 = 0x0198;\n                    var2 = temp6;\n                    var3 = memory[0x40:0x60];\n                    var1 = func_140D(var2, var3);\n                    var temp7 = memory[0x40:0x60];\n                    return memory[temp7:temp7 + var1 - temp7];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = 0x01a9;\n                var1 = func_0437();\n                var temp8 = var1;\n                var1 = 0x01b6;\n                var2 = temp8;\n                var3 = memory[0x40:0x60];\n                var1 = func_14C1(var2, var3);\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + var1 - temp9];\n            } else if (var0 == 0x618a2f5e) {\n                // Dispatch table entry for 0x618a2f5e (unknown)\n                var1 = 0x01d9;\n                var2 = 0x01d4;\n                var4 = 0x04;\n                var3 = var4 + (msg.data.length - var4);\n                var var5;\n                var2, var3, var4, var5 = func_1624(var3, var4);\n                var1 = func_01D4(var2, var3, var4, var5);\n                var temp10 = var1;\n                var1 = 0x01e6;\n                var2 = temp10;\n                var3 = memory[0x40:0x60];\n                var1 = func_140D(var2, var3);\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + var1 - temp11];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = 0x0209;\n                var2 = 0x0204;\n                var4 = 0x04;\n                var3 = var4 + (msg.data.length - var4);\n                var2 = func_16A7(var3, var4);\n                var1 = func_0204(var2);\n                var temp12 = var1;\n                var1 = 0x0216;\n                var2 = temp12;\n                var3 = memory[0x40:0x60];\n                var1 = func_1437(var2, var3);\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + var1 - temp13];\n            } else if (var0 == 0x715018a6) {\n                // Dispatch table entry for renounceOwnership()\n                var1 = 0x0227;\n                renounceOwnership();\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xbeabacc8 > var0) {\n            if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = 0x0231;\n                var1 = func_0696();\n                var temp14 = var1;\n                var1 = 0x023e;\n                var2 = temp14;\n                var3 = memory[0x40:0x60];\n                var1 = func_16E3(var2, var3);\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + var1 - temp15];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = 0x024f;\n                var1 = func_06BF();\n                var temp16 = var1;\n                var1 = 0x025c;\n                var2 = temp16;\n                var3 = memory[0x40:0x60];\n                var1 = func_12E8(var2, var3);\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + var1 - temp17];\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = 0x027f;\n                var2 = 0x027a;\n                var4 = 0x04;\n                var3 = var4 + (msg.data.length - var4);\n                var2, var3 = func_13B2(var3, var4);\n                var1 = func_027A(var2, var3);\n                var temp18 = var1;\n                var1 = 0x028c;\n                var2 = temp18;\n                var3 = memory[0x40:0x60];\n                var1 = func_140D(var2, var3);\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + var1 - temp19];\n            } else if (var0 == 0xaafe62d1) {\n                // Dispatch table entry for 0xaafe62d1 (unknown)\n                var1 = 0x02af;\n                var2 = 0x02aa;\n                var3 = msg.data.length - 0x04 + 0x04;\n                var4 = 0x04;\n                var2, var3, var4, var5 = func_1759(var3, var4);\n                func_02AA(var2, var3, var4, var5);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xbeabacc8) {\n            // Dispatch table entry for transfer(address,address,uint256)\n            var1 = 0x02cb;\n            var2 = 0x02c6;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2, var3, var4 = func_1452(var3, var4);\n            func_02C6(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xcb205583) {\n            // Dispatch table entry for 0xcb205583 (unknown)\n            var1 = 0x02e7;\n            var2 = 0x02e2;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2 = func_16A7(var3, var4);\n            var1 = func_02E2(var2);\n            var temp20 = var1;\n            var1 = 0x02f4;\n            var2 = temp20;\n            var3 = memory[0x40:0x60];\n            var1 = func_140D(var2, var3);\n            var temp21 = memory[0x40:0x60];\n            return memory[temp21:temp21 + var1 - temp21];\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x0317;\n            var2 = 0x0312;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2, var3 = func_17CD(var3, var4);\n            var1 = func_0312(var2, var3);\n            var temp22 = var1;\n            var1 = 0x0324;\n            var2 = temp22;\n            var3 = memory[0x40:0x60];\n            var1 = func_1437(var2, var3);\n            var temp23 = memory[0x40:0x60];\n            return memory[temp23:temp23 + var1 - temp23];\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = 0x0347;\n            var2 = 0x0342;\n            var3 = msg.data.length - 0x04 + 0x04;\n            var4 = 0x04;\n            var2 = func_16A7(var3, var4);\n            func_0342(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0138(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x03e6;\n        var2 = func_0AEC();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x03f3;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_0AF4(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_0186(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0413;\n        var2 = func_0AEC();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x0420;\n        var var3 = arg0;\n        var var4 = var1;\n        var var5 = arg2;\n        func_0CBD(var3, var4, var5);\n        var2 = 0x042b;\n        var3 = arg0;\n        var4 = arg1;\n        var5 = arg2;\n        func_0D49(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_01D4(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= memory[arg1:arg1 + 0x20]) {\n        label_062C:\n            return 0x01;\n        } else {\n        label_0452:\n            var var2 = arg1;\n            var var3 = var1;\n        \n            if (var3 < memory[var2:var2 + 0x20]) {\n                var2 = memory[var3 * 0x20 + 0x20 + var2:var3 * 0x20 + 0x20 + var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var var4 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                var var5 = 0x04c8;\n                var var7 = memory[0x40:0x60];\n                var var6 = arg2;\n                var5 = func_1437(var6, var7);\n                var temp0 = memory[0x40:0x60];\n                log(memory[temp0:temp0 + var5 - temp0], [stack[-2], stack[-3], stack[-4]]);\n                var2 = arg1;\n                var3 = var1;\n            \n                if (var3 < memory[var2:var2 + 0x20]) {\n                    var2 = memory[var3 * 0x20 + 0x20 + var2:var3 * 0x20 + 0x20 + var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var3 = 0xffffffffffffffffffffffffffffffffffffffff & 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n                    var4 = 0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822;\n                    var5 = 0x0562;\n                    var6 = arg2;\n                    var7 = 0x00;\n                    var var8 = var7;\n                    var var9 = arg3;\n                    var var10 = memory[0x40:0x60];\n                    var5 = func_18E1(var6, var7, var8, var9, var10);\n                    var temp1 = memory[0x40:0x60];\n                    log(memory[temp1:temp1 + var5 - temp1], [stack[-2], stack[-3], stack[-4]]);\n                    var2 = 0xffffffffffffffffffffffffffffffffffffffff & 0xafd54595986ede4976d6717fcead8b36978edc17;\n                    var3 = 0xe156b1b6;\n                    var4 = arg1;\n                    var5 = var1;\n                \n                    if (var5 < memory[var4:var4 + 0x20]) {\n                        var temp2 = memory[var5 * 0x20 + 0x20 + var4:var5 * 0x20 + 0x20 + var4 + 0x20];\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n                        var4 = 0x05d5;\n                        var5 = temp2;\n                        var6 = arg0;\n                        var8 = temp3 + 0x04;\n                        var7 = arg3;\n                        var4 = func_1926(var5, var6, var7, var8);\n                        var temp4 = memory[0x40:0x60];\n                        var temp5;\n                        temp5, memory[temp4:temp4 + 0x20] = address(var2).call.gas(msg.gas)(memory[temp4:temp4 + var4 - temp4]);\n                        var5 = !temp5;\n                    \n                        if (!var5) {\n                            var temp6 = memory[0x40:0x60];\n                            var temp7 = returndata.length;\n                            memory[0x40:0x60] = temp6 + (temp7 + 0x1f & ~0x1f);\n                            var2 = 0x0618;\n                            var4 = temp6;\n                            var3 = var4 + temp7;\n                            var2 = func_1989(var3, var4);\n                            var2 = var1;\n                            var4 = var2;\n                            var3 = 0x0624;\n                            var3 = func_19E5(var4);\n                            var1 = var3;\n                        \n                            if (var1 >= memory[arg1:arg1 + 0x20]) { goto label_062C; }\n                            else { goto label_0452; }\n                        } else {\n                            var temp8 = returndata.length;\n                            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var6 = 0x05ac;\n                    \n                    label_186D:\n                        memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        memory[0x04:0x24] = 0x32;\n                        revert(memory[0x00:0x24]);\n                    }\n                } else {\n                    var4 = 0x04e2;\n                    goto label_186D;\n                }\n            } else {\n                var4 = 0x0463;\n                goto label_186D;\n            }\n        }\n    }\n    \n    function func_0204(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_027A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x075c;\n        var2 = func_0AEC();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x0769;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_0D49(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_02AA(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = 0x00;\n    \n        if (var0 >= arg1) {\n        label_08D6:\n            return;\n        } else {\n        label_0783:\n            var var1 = arg0;\n            var var2 = arg1;\n            var var3 = var0;\n        \n            if (var3 < var2) {\n                var temp0 = var3 * 0x20 + var1;\n                var temp1 = temp0 + 0x20;\n                var1 = 0x07aa;\n                var3 = temp0;\n                var2 = temp1;\n                var1 = func_16A7(var2, var3);\n                var1 = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = arg3 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = 0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822;\n                var var4 = 0x080d;\n                var var5 = arg2;\n                var var6 = 0x00;\n                var var7 = var6;\n                var var9 = memory[0x40:0x60];\n                var var8 = var5;\n                var4 = func_18E1(var5, var6, var7, var8, var9);\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + var4 - temp2], [stack[-2], stack[-3], stack[-4]]);\n                var1 = arg0;\n                var2 = arg1;\n                var3 = var0;\n            \n                if (var3 < var2) {\n                    var temp3 = var3 * 0x20 + var1;\n                    var temp4 = temp3 + 0x20;\n                    var1 = 0x083d;\n                    var2 = temp4;\n                    var3 = temp3;\n                    var1 = func_16A7(var2, var3);\n                    var1 = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var2 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                    var4 = 0x08bb;\n                    var6 = memory[0x40:0x60];\n                    var5 = arg2;\n                    var4 = func_1437(var5, var6);\n                    var temp5 = memory[0x40:0x60];\n                    log(memory[temp5:temp5 + var4 - temp5], [stack[-2], stack[-3], stack[-4]]);\n                    var1 = var0;\n                    var3 = var1;\n                    var2 = 0x08ce;\n                    var2 = func_19E5(var3);\n                    var0 = var2;\n                \n                    if (var0 >= arg1) { goto label_08D6; }\n                    else { goto label_0783; }\n                } else {\n                    var4 = 0x0827;\n                \n                label_186D:\n                    memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    memory[0x04:0x24] = 0x32;\n                    revert(memory[0x00:0x24]);\n                }\n            } else {\n                var4 = 0x0794;\n                goto label_186D;\n            }\n        }\n    }\n    \n    function func_02C6(var arg0, var arg1, var arg2) {\n        var var0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var1 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n        var var3 = 0x093a;\n        var var5 = memory[0x40:0x60];\n        var var4 = arg2;\n        var3 = func_1437(var4, var5);\n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + var3 - temp0], [stack[-2], stack[-3], stack[-4]]);\n    }\n    \n    function func_02E2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0xffffffffffffffffffffffffffffffffffffffff & 0xc8156a1639e694b7e0e5bd9319eacf02df12bc16;\n        var var2 = 0x097c;\n        var2 = func_0AEC();\n    \n        if ((var2 & 0xffffffffffffffffffffffffffffffffffffffff) - var1) { return 0x01; }\n    \n        storage[0x06] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x06] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function func_0312(var arg0, var arg1) returns (var r0) {\n        r0 = func_09E2(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0342(var arg0) {\n        var var0 = 0x0a71;\n        func_1111();\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var0 = 0x0ae9;\n            var var1 = arg0;\n            func_118F(var1);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var0 = 0x0ad7;\n            var1 = temp0 + 0x04;\n            var0 = func_1A9F(var1);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_0349() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x04;\n        var var2 = 0x0358;\n        var var3 = storage[var1];\n        var2 = func_183C(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0384;\n        var6 = func_183C(var7);\n    \n        if (!var6) {\n        label_03D1:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_03C8; }\n        \n        label_03B4:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_03B4; }\n        \n        label_03C8:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_03D1;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_03D1;\n        }\n    }\n    \n    function func_03FE() returns (var r0) { return storage[0x03]; }\n    \n    function func_0437() returns (var r0) { return 0x08; }\n    \n    function renounceOwnership() {\n        var var0 = 0x068a;\n        func_1111();\n        var0 = 0x0694;\n        var var1 = 0x00;\n        func_118F(var1);\n    }\n    \n    function func_0696() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_06BF() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x05;\n        var var2 = 0x06ce;\n        var var3 = storage[var1];\n        var2 = func_183C(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x06fa;\n        var6 = func_183C(var7);\n    \n        if (!var6) {\n        label_0747:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_073E; }\n        \n        label_072A:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_072A; }\n        \n        label_073E:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0747;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0747;\n        }\n    }\n    \n    function func_09E2(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0AEC() returns (var r0) { return msg.sender; }\n    \n    function func_0AF4(var arg0, var arg1, var arg2) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var0 = 0x0b5a;\n            var1 = temp6 + 0x04;\n            var0 = func_1B31(var1);\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + var0 - temp7]);\n        } else if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = arg2;\n            var var0 = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var2 = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\n            var var3 = 0x0cb0;\n            var var5 = memory[0x40:0x60];\n            var var4 = arg2;\n            var3 = func_1437(var4, var5);\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + var3 - temp3], [stack[-2], stack[-3], stack[-4]]);\n            return;\n        } else {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp4 + 0x04;\n            var0 = 0x0bc9;\n            var0 = func_1BC3(var1);\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + var0 - temp5]);\n        }\n    }\n    \n    function func_0CBD(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = 0x0cc9;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_09E2(var2, var3);\n        var0 = var1;\n    \n        if (var0 == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n        label_0D43:\n            return;\n        } else if (var0 >= arg2) {\n            var1 = 0x0d42;\n            var2 = arg0;\n            var3 = arg1;\n            var var4 = var0 - arg2;\n            func_0AF4(var2, var3, var4);\n            goto label_0D43;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var2 = temp0 + 0x04;\n            var1 = 0x0d2c;\n            var1 = func_1C2F(var2);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var1 - temp1]);\n        }\n    }\n    \n    function func_0D49(var arg0, var arg1, var arg2) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp9 + 0x04;\n            var0 = 0x0daf;\n            var0 = func_1CC1(var1);\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + var0 - temp10]);\n        } else if (!(arg1 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp7 + 0x04;\n            var0 = 0x0e1e;\n            var0 = func_1D53(var1);\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        } else if (storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n        label_0F81:\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var var0 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var0 >= arg2) {\n                var temp0 = arg2;\n                var temp1 = arg0;\n                memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x01;\n                storage[keccak256(memory[0x00:0x40])] = var0 - temp0;\n                var temp2 = arg1;\n                memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x01;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] + temp0;\n                var var1 = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var var2 = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                var var4 = 0x10f8;\n                var var6 = memory[0x40:0x60];\n                var var5 = temp0;\n                var4 = func_1437(var5, var6);\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + var4 - temp4], [stack[-2], stack[-3], stack[-4]]);\n                var1 = 0x110b;\n                var2 = arg0;\n                var3 = arg1;\n                var4 = arg2;\n                func_1253(var2, var3, var4);\n                return;\n            } else {\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var2 = temp5 + 0x04;\n                var1 = 0x0fff;\n                var1 = func_1DE5(var2);\n                var temp6 = memory[0x40:0x60];\n                revert(memory[temp6:temp6 + var1 - temp6]);\n            }\n        } else {\n            var0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (!var0) {\n            label_0F64:\n            \n                if (!var0) {\n                label_0F80:\n                    goto label_0F81;\n                } else {\n                    var0 = 0x00;\n                \n                    if (var0) {\n                    label_0F7E:\n                        goto label_0F80;\n                    } else if (arg2 < 0x64) { goto label_0F7E; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n                var0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0xb8cae8788e8aec58a504f5bb4482e4fa5d382f47;\n            \n                if (var0) {\n                    var0 = !var0;\n                    goto label_0F64;\n                } else {\n                    var0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0xde212260a0235a782368b1eb7417efcdbdb5585d;\n                    goto label_0F64;\n                }\n            }\n        }\n    }\n    \n    function func_1111() {\n        var var0 = 0x1119;\n        var0 = func_0AEC();\n        var0 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var1 = 0x1137;\n        var1 = func_0696();\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == var0) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var0 = 0x1184;\n        var1 = temp0 + 0x04;\n        var0 = func_1E51(var1);\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + var0 - temp1]);\n    }\n    \n    function func_118F(var arg0) {\n        var temp0 = storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp1 = arg0;\n        storage[0x00] = (temp1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + memory[0x40:0x60] - temp2], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1253(var arg0, var arg1, var arg2) {}\n    \n    function func_1258(var arg0) returns (var r0) { return memory[arg0:arg0 + 0x20]; }\n    \n    function func_1263(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0;\n        return temp0 + 0x20;\n    }\n    \n    function func_1274(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n    \n        if (var0 >= arg0) {\n        label_1292:\n            memory[arg1 + arg0:arg1 + arg0 + 0x20] = 0x00;\n            return;\n        } else {\n        label_1280:\n            var temp0 = var0;\n            memory[arg1 + temp0:arg1 + temp0 + 0x20] = memory[arg2 + temp0:arg2 + temp0 + 0x20];\n            var0 = temp0 + 0x20;\n        \n            if (var0 >= arg0) { goto label_1292; }\n            else { goto label_1280; }\n        }\n    }\n    \n    function func_129E(var arg0) returns (var r0) { return arg0 + 0x1f & ~0x1f; }\n    \n    function func_12AF(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x12ba;\n        var var2 = arg1;\n        var1 = func_1258(var2);\n        var2 = 0x12c4;\n        var var3 = var1;\n        var var4 = arg0;\n        var2 = func_1263(var3, var4);\n        var temp0 = var2;\n        arg0 = temp0;\n        var2 = 0x12d4;\n        var3 = var1;\n        var4 = arg0;\n        var var5 = arg1 + 0x20;\n        func_1274(var3, var4, var5);\n        var2 = 0x12dd;\n        var3 = var1;\n        var2 = func_129E(var3);\n        return arg0 + var2;\n    }\n    \n    function func_12E8(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1302;\n        var var2 = var0;\n        var var3 = arg0;\n        return func_12AF(var2, var3);\n    }\n    \n    function func_130A() returns (var r0) { return memory[0x40:0x60]; }\n    \n    function func_131E(var arg0) returns (var r0) { return arg0 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_133E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1349;\n        var var2 = arg0;\n        return func_131E(var2);\n    }\n    \n    function func_1350(var arg0) {\n        var var0 = 0x1359;\n        var var1 = arg0;\n        var0 = func_133E(var1);\n    \n        if (arg0 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1367(var arg0, var arg1) returns (var r0) {\n        var var0 = msg.data[arg1:arg1 + 0x20];\n        var var1 = 0x1376;\n        var var2 = var0;\n        func_1350(var2);\n        return var0;\n    }\n    \n    function func_137C(var arg0) returns (var r0) { return arg0; }\n    \n    function func_1386(var arg0) {\n        var var0 = 0x138f;\n        var var1 = arg0;\n        var0 = func_137C(var1);\n    \n        if (arg0 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_139D(var arg0, var arg1) returns (var r0) {\n        var var0 = msg.data[arg1:arg1 + 0x20];\n        var var1 = 0x13ac;\n        var var2 = var0;\n        func_1386(var2);\n        return var0;\n    }\n    \n    function func_13B2(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x00;\n            var var3 = 0x13d7;\n            var var4 = arg0;\n            var var5 = arg1 + var2;\n            var3 = func_1367(var4, var5);\n            var0 = var3;\n            var2 = 0x20;\n            var3 = 0x13e8;\n            var4 = arg0;\n            var5 = arg1 + var2;\n            var3 = func_139D(var4, var5);\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var2 = 0x13c8;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_13F2(var arg0) returns (var r0) { return !!arg0; }\n    \n    function func_13FE(var arg0, var arg1) {\n        var var0 = 0x1407;\n        var var1 = arg1;\n        var0 = func_13F2(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_140D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x1422;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_13FE(var2, var3);\n        return var0;\n    }\n    \n    function func_1428(var arg0, var arg1) {\n        var var0 = 0x1431;\n        var var1 = arg1;\n        var0 = func_137C(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_1437(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x144c;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_1428(var2, var3);\n        return var0;\n    }\n    \n    function func_1452(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var3 = 0x00;\n            var var4 = 0x1479;\n            var var5 = arg0;\n            var var6 = arg1 + var3;\n            var4 = func_1367(var5, var6);\n            var0 = var4;\n            var3 = 0x20;\n            var4 = 0x148a;\n            var5 = arg0;\n            var6 = arg1 + var3;\n            var4 = func_1367(var5, var6);\n            var1 = var4;\n            var3 = 0x40;\n            var4 = 0x149b;\n            var5 = arg0;\n            var6 = arg1 + var3;\n            var4 = func_139D(var5, var6);\n            arg1 = var4;\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0, arg1;\n        } else {\n            var3 = 0x146a;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_14A5(var arg0) returns (var r0) { return arg0 & 0xff; }\n    \n    function func_14B2(var arg0, var arg1) {\n        var var0 = 0x14bb;\n        var var1 = arg1;\n        var0 = func_14A5(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_14C1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x14d6;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_14B2(var2, var3);\n        return var0;\n    }\n    \n    function func_1510(var arg0, var arg1) {\n        var var0 = 0x1519;\n        var var1 = arg0;\n        var0 = func_129E(var1);\n        var temp0 = arg1;\n        var temp1 = temp0 + var0;\n        var0 = temp1;\n    \n        if (!((var0 > 0xffffffffffffffff) | (var0 < temp0))) {\n            memory[0x40:0x60] = var0;\n            return;\n        } else {\n            var1 = 0x1537;\n            memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            memory[0x04:0x24] = 0x41;\n            revert(memory[0x00:0x24]);\n        }\n    }\n    \n    function func_155C(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 <= 0xffffffffffffffff) { return arg0 * 0x20 + 0x20; }\n    \n        var var1 = 0x1576;\n        memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        memory[0x04:0x24] = 0x41;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_158D(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x15a0;\n        var var2 = 0x159b;\n        var var3 = arg1;\n        var2 = func_155C(var3);\n        var1 = func_159B(var2);\n        var temp0 = var1;\n        var0 = temp0;\n        var temp1 = arg1;\n        memory[var0:var0 + 0x20] = temp1;\n        var1 = var0 + 0x20;\n        var2 = arg2 + temp1 * 0x20;\n    \n        if (var2 <= arg0) {\n            var3 = arg2;\n        \n            if (var3 >= var2) {\n            label_15EC:\n                return var0;\n            } else {\n            label_15CE:\n                var var4 = var3;\n                var var5 = 0x15d8;\n                var var6 = arg0;\n                var var7 = var4;\n                var5 = func_1367(var6, var7);\n                var temp2 = var1;\n                memory[temp2:temp2 + 0x20] = var5;\n                var1 = temp2 + 0x20;\n                var3 = var3 + 0x20;\n            \n                if (var3 >= var2) { goto label_15EC; }\n                else { goto label_15CE; }\n            }\n        } else {\n            var3 = 0x15c2;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_159B(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x154b;\n        var1 = func_130A();\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x1557;\n        var var2 = arg0;\n        var var3 = var0;\n        func_1510(var2, var3);\n        return var0;\n    }\n    \n    function func_15F6(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 + 0x1f i< arg0) {\n            var temp0 = arg1;\n            var var1 = msg.data[temp0:temp0 + 0x20];\n            var var2 = 0x161b;\n            var var3 = arg0;\n            var var4 = var1;\n            var var5 = temp0 + 0x20;\n            return func_158D(var3, var4, var5);\n        } else {\n            var1 = 0x160a;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_1624(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3) {\n        r3 = 0x00;\n        var var1 = r3;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 - arg1 i>= 0x80) {\n            var var4 = 0x00;\n            var var5 = 0x164c;\n            var var6 = arg0;\n            var var7 = arg1 + var4;\n            var5 = func_1367(var6, var7);\n            r3 = var5;\n            var4 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        \n            if (var4 <= 0xffffffffffffffff) {\n                var5 = 0x1679;\n                var6 = arg0;\n                var7 = arg1 + var4;\n                var5 = func_15F6(var6, var7);\n                var1 = var5;\n                var4 = 0x40;\n                var5 = 0x168a;\n                var6 = arg0;\n                var7 = arg1 + var4;\n                var5 = func_139D(var6, var7);\n                var2 = var5;\n                var4 = 0x60;\n                var5 = 0x169b;\n                var6 = arg0;\n                var7 = arg1 + var4;\n                var5 = func_139D(var6, var7);\n                var temp0 = r3;\n                r3 = var5;\n                r0 = temp0;\n                arg0 = var1;\n                arg1 = var2;\n                return r0, arg0, arg1, r3;\n            } else {\n                var5 = 0x166c;\n                revert(memory[0x00:0x00]);\n            }\n        } else {\n            var4 = 0x163d;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_16A7(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = 0x00;\n            var var2 = 0x16cb;\n            var var3 = arg0;\n            var var4 = arg1 + var1;\n            return func_1367(var3, var4);\n        } else {\n            var1 = 0x16bc;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_16D4(var arg0, var arg1) {\n        var var0 = 0x16dd;\n        var var1 = arg1;\n        var0 = func_133E(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_16E3(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x16f8;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_16D4(var2, var3);\n        return var0;\n    }\n    \n    function func_1703(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 + 0x1f i< arg0) {\n            var1 = msg.data[arg1:arg1 + 0x20];\n        \n            if (var1 <= 0xffffffffffffffff) {\n                var0 = arg1 + 0x20;\n            \n                if (var0 + var1 * 0x20 <= arg0) {\n                    arg0 = var1;\n                    r0 = var0;\n                    return r0, arg0;\n                } else {\n                    var var2 = 0x1751;\n                    revert(memory[0x00:0x00]);\n                }\n            } else {\n                var2 = 0x1735;\n                revert(memory[0x00:0x00]);\n            }\n        } else {\n            var2 = 0x1718;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_1759(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3) {\n        r3 = 0x00;\n        var var1 = r3;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var4 = msg.data[arg1:arg1 + 0x20];\n        \n            if (var4 <= 0xffffffffffffffff) {\n                var var5 = 0x179d;\n                var var6 = arg0;\n                var var7 = arg1 + var4;\n                var5, var6 = func_1703(var6, var7);\n                var1 = var6;\n                r3 = var5;\n                var4 = 0x20;\n                var5 = 0x17b0;\n                var6 = arg0;\n                var7 = arg1 + var4;\n                var5 = func_139D(var6, var7);\n                var2 = var5;\n                var4 = 0x40;\n                var5 = 0x17c1;\n                var6 = arg0;\n                var7 = arg1 + var4;\n                var5 = func_1367(var6, var7);\n                var temp0 = r3;\n                r3 = var5;\n                r0 = temp0;\n                arg0 = var1;\n                arg1 = var2;\n                return r0, arg0, arg1, r3;\n            } else {\n                var5 = 0x1790;\n                revert(memory[0x00:0x00]);\n            }\n        } else {\n            var4 = 0x1772;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_17CD(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x00;\n            var var3 = 0x17f2;\n            var var4 = arg0;\n            var var5 = arg1 + var2;\n            var3 = func_1367(var4, var5);\n            var0 = var3;\n            var2 = 0x20;\n            var3 = 0x1803;\n            var4 = arg0;\n            var5 = arg1 + var2;\n            var3 = func_1367(var4, var5);\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var2 = 0x17e3;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_183C(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 / 0x02;\n        var var1 = temp0 & 0x01;\n    \n        if (!var1) {\n            var temp1 = var0 & 0x7f;\n            var0 = temp1;\n        \n            if (var1 - (var0 < 0x20)) { goto label_1867; }\n            else { goto label_185F; }\n        } else if (var1 - (var0 < 0x20)) {\n        label_1867:\n            return var0;\n        } else {\n        label_185F:\n            var var2 = 0x1866;\n            memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            memory[0x04:0x24] = 0x22;\n            revert(memory[0x00:0x24]);\n        }\n    }\n    \n    function func_189C(var arg0) returns (var r0) { return arg0; }\n    \n    function func_18B0(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x18cb;\n        var var2 = 0x18c6;\n        var var3 = 0x18c1;\n        var var4 = arg0;\n        var3 = func_189C(var4);\n        var2 = func_18C1(var3);\n        return func_18C6(var2);\n    }\n    \n    function func_18C1(var arg0) returns (var r0) { return arg0; }\n    \n    function func_18C6(var arg0) returns (var r0) {\n        r0 = func_137C(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_18D2(var arg0, var arg1) {\n        var var0 = 0x18db;\n        var var1 = arg1;\n        var0 = func_18B0(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_18E1(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var temp0 = arg4;\n        var var0 = temp0 + 0x80;\n        var var1 = 0x18f6;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_1428(var2, var3);\n        var1 = 0x1903;\n        var2 = arg4 + 0x20;\n        var3 = arg1;\n        func_18D2(var2, var3);\n        var1 = 0x1910;\n        var2 = arg4 + 0x40;\n        var3 = arg2;\n        func_18D2(var2, var3);\n        var1 = 0x191d;\n        var2 = arg4 + 0x60;\n        var3 = arg3;\n        func_1428(var2, var3);\n        return var0;\n    }\n    \n    function func_1926(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var temp0 = arg3;\n        var var0 = temp0 + 0x60;\n        var var1 = 0x193b;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_16D4(var2, var3);\n        var1 = 0x1948;\n        var2 = arg3 + 0x20;\n        var3 = arg1;\n        func_16D4(var2, var3);\n        var1 = 0x1955;\n        var2 = arg3 + 0x40;\n        var3 = arg2;\n        func_1428(var2, var3);\n        return var0;\n    }\n    \n    function func_195D(var arg0) {\n        var var0 = 0x1966;\n        var var1 = arg0;\n        var0 = func_13F2(var1);\n    \n        if (arg0 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1974(var arg0, var arg1) returns (var r0) {\n        var var0 = memory[arg1:arg1 + 0x20];\n        var var1 = 0x1983;\n        var var2 = var0;\n        func_195D(var2);\n        return var0;\n    }\n    \n    function func_1989(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = 0x00;\n            var var2 = 0x19ad;\n            var var3 = arg0;\n            var var4 = arg1 + var1;\n            return func_1974(var3, var4);\n        } else {\n            var1 = 0x199e;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_19E5(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x19f0;\n        var var2 = arg0;\n        var1 = func_137C(var2);\n        arg0 = var1;\n    \n        if (arg0 - 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { return arg0 + 0x01; }\n    \n        var1 = 0x1a21;\n        memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_1A2D(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x6464726573730000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1A7C(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1a89;\n        var var2 = 0x26;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1a94;\n        var2 = arg0;\n        func_1A2D(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1A9F(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1ab8;\n        var var2 = var0;\n        return func_1A7C(var2);\n    }\n    \n    function func_1ABF(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1B0E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1b1b;\n        var var2 = 0x24;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1b26;\n        var2 = arg0;\n        func_1ABF(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1B31(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1b4a;\n        var var2 = var0;\n        return func_1B0E(var2);\n    }\n    \n    function func_1B51(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7373000000000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1BA0(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1bad;\n        var var2 = 0x22;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1bb8;\n        var2 = arg0;\n        func_1B51(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1BC3(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1bdc;\n        var var2 = var0;\n        return func_1BA0(var2);\n    }\n    \n    function func_1BE3(var arg0) {\n        memory[arg0:arg0 + 0x20] = 0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000;\n    }\n    \n    function func_1C0C(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1c19;\n        var var2 = 0x1d;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1c24;\n        var2 = arg0;\n        func_1BE3(var2);\n        return arg0 + 0x20;\n    }\n    \n    function func_1C2F(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1c48;\n        var var2 = var0;\n        return func_1C0C(var2);\n    }\n    \n    function func_1C4F(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1C9E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1cab;\n        var var2 = 0x25;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1cb6;\n        var2 = arg0;\n        func_1C4F(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1CC1(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1cda;\n        var var2 = var0;\n        return func_1C9E(var2);\n    }\n    \n    function func_1CE1(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x6573730000000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1D30(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1d3d;\n        var var2 = 0x23;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1d48;\n        var2 = arg0;\n        func_1CE1(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1D53(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1d6c;\n        var var2 = var0;\n        return func_1D30(var2);\n    }\n    \n    function func_1D73(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x616c616e63650000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1DC2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1dcf;\n        var var2 = 0x26;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1dda;\n        var2 = arg0;\n        func_1D73(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1DE5(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1dfe;\n        var var2 = var0;\n        return func_1DC2(var2);\n    }\n    \n    function func_1E05(var arg0) {\n        memory[arg0:arg0 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n    }\n    \n    function func_1E2E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1e3b;\n        var var2 = 0x20;\n        var var3 = arg0;\n        var1 = func_1263(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1e46;\n        var2 = arg0;\n        func_1E05(var2);\n        return arg0 + 0x20;\n    }\n    \n    function func_1E51(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1e6a;\n        var var2 = var0;\n        return func_1E2E(var2);\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 44.319714307785034,
	"usage": {
		"completion_tokens": 597,
		"prompt_tokens": 18581,
		"total_tokens": 19178
	}
}