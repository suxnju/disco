{
	"address": "0xe7d84cbee9b2234e53bde7ea093e7d1e198ca46a",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's a Solidity contract based on the provided decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract YourContract {\n    uint256 private _totalSupply;\n    uint256 private _startBalance;\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    mapping (address => bool) private _frozenAccount;\n    address private _owner;\n    address private _airdropadd;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event FrozenFunds(address target, bool frozen);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _owner = msg.sender;\n        // Initialize other variables as per your requirement\n    }\n\n    function name() public pure returns (string memory) {\n        return \"IOGENESIS\";\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        _allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function airdropadd() public view returns (address) {\n        return _airdropadd;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));\n        require(_value <= _balanceOf[_from]);\n        require(_value <= _allowance[msg.sender][_from]);\n        require(!_frozenAccount[_from]);\n\n        _balanceOf[_from] -= _value;\n        _balanceOf[_to] += _value;\n        _allowance[msg.sender][_from] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function startBalance() public view returns (uint256) {\n        return _startBalance;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    function decreaseApproval(address _spender, uint256 _value) public returns (bool success) {\n        if (_value <= _allowance[msg.sender][_spender]) {\n            _allowance[msg.sender][_spender] -= _value;\n        } else {\n            _allowance[msg.sender][_spender] = 0;\n        }\n        emit Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return _balanceOf[_owner];\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function getEth(uint256 amount) public {\n        require(msg.sender == _owner);\n        payable(_owner).transfer(amount);\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"IOG\";\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));\n        require(!_frozenAccount[msg.sender]);\n        require(_value <= _balanceOf[msg.sender]);\n\n        _balanceOf[msg.sender] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function frozenAccount(address _account) public view returns (bool) {\n        return _frozenAccount[_account];\n    }\n\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {\n        _allowance[msg.sender][_spender] += _addedValue;\n        emit Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return _allowance[_owner][_spender];\n    }\n\n    function freezeAccount(address _account, bool _freeze) public {\n        require(msg.sender == _owner);\n        _frozenAccount[_account] = _freeze;\n        emit FrozenFunds(_account, _freeze);\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner);\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n```\n\nPlease note that the contract above is a simplified version and may not cover all the functionalities of the original contract. Also, it's always a good idea to test the contract in a test environment before deploying it on the mainnet.",
				"role": "assistant"
			}
		}
	],
	"created": 1701465717,
	"id": "chatcmpl-8R5FNMcMLTxyZo0aAhY3G1Hpi3lZ9",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 07:23 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x1]\nuint256 _startBalance; // STORAGE[0x3]\nmapping (uint256 => [uint256]) owner_4; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0x7]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint160 _airdropadd; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nFrozenFunds(address, bool);\nOwnershipTransferred(address, address);\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (9) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffff & 'IOGENESIS';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction airdropadd() public nonPayable { \n    return _airdropadd;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    require(!(0xff & _frozenAccount[varg0]));\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction startBalance() public nonPayable { \n    return _startBalance;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction getEth(uint256 varg0) public payable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0);\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x494f470000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(!(0xff & _frozenAccount[msg.sender]));\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction fallback() public payable { \n    v0 = v1 = _balanceOf[_airdropadd] >= _startBalance;\n    if (v1) {\n        v0 = v2 = _startBalance > 0xde0b6b3a7640000;\n    }\n    if (v0) {\n        v0 = v3 = !(0xff & owner_4[msg.sender]);\n    }\n    if (v0) {\n        require(_startBalance > 1);\n        assert(0xde0b6b3a7640000 <= _startBalance);\n        _startBalance = _startBalance - 0xde0b6b3a7640000;\n        require(_balanceOf[_airdropadd] >= _startBalance);\n        assert(_startBalance <= _balanceOf[_airdropadd]);\n        _balanceOf[_airdropadd] = _balanceOf[_airdropadd] - _startBalance;\n        assert(_balanceOf[msg.sender] + _startBalance >= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + _startBalance;\n        owner_4[msg.sender] = 0x1 | ~0xff & owner_4[msg.sender];\n        emit Transfer(_airdropadd, msg.sender, _startBalance);\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x15aec1fb == function_selector) {\n            airdropadd();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2bb9ffef == function_selector) {\n            startBalance();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x8e3073a6 == function_selector) {\n            getEth(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == function_selector) {\n            frozenAccount(address);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe724529c == function_selector) {\n            freezeAccount(address,bool);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 07:23 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x1]\nuint256 _startBalance; // STORAGE[0x3]\nmapping (uint256 => [uint256]) owner_4; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0x7]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint160 _airdropadd; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nFrozenFunds(address, bool);\nOwnershipTransferred(address, address);\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (9) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffff & 'IOGENESIS';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction airdropadd() public nonPayable { \n    return _airdropadd;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    require(!(0xff & _frozenAccount[varg0]));\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction startBalance() public nonPayable { \n    return _startBalance;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction getEth(uint256 varg0) public payable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0);\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x494f470000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(!(0xff & _frozenAccount[msg.sender]));\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction fallback() public payable { \n    v0 = v1 = _balanceOf[_airdropadd] >= _startBalance;\n    if (v1) {\n        v0 = v2 = _startBalance > 0xde0b6b3a7640000;\n    }\n    if (v0) {\n        v0 = v3 = !(0xff & owner_4[msg.sender]);\n    }\n    if (v0) {\n        require(_startBalance > 1);\n        assert(0xde0b6b3a7640000 <= _startBalance);\n        _startBalance = _startBalance - 0xde0b6b3a7640000;\n        require(_balanceOf[_airdropadd] >= _startBalance);\n        assert(_startBalance <= _balanceOf[_airdropadd]);\n        _balanceOf[_airdropadd] = _balanceOf[_airdropadd] - _startBalance;\n        assert(_balanceOf[msg.sender] + _startBalance >= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + _startBalance;\n        owner_4[msg.sender] = 0x1 | ~0xff & owner_4[msg.sender];\n        emit Transfer(_airdropadd, msg.sender, _startBalance);\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x15aec1fb == function_selector) {\n            airdropadd();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2bb9ffef == function_selector) {\n            startBalance();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x8e3073a6 == function_selector) {\n            getEth(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == function_selector) {\n            frozenAccount(address);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe724529c == function_selector) {\n            freezeAccount(address,bool);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 07:23 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x1]\nuint256 _startBalance; // STORAGE[0x3]\nmapping (uint256 => [uint256]) owner_4; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0x7]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint160 _airdropadd; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nFrozenFunds(address, bool);\nOwnershipTransferred(address, address);\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (9) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffff & 'IOGENESIS';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction airdropadd() public nonPayable { \n    return _airdropadd;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    require(!(0xff & _frozenAccount[varg0]));\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction startBalance() public nonPayable { \n    return _startBalance;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction getEth(uint256 varg0) public payable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0);\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x494f470000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(!(0xff & _frozenAccount[msg.sender]));\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction fallback() public payable { \n    v0 = v1 = _balanceOf[_airdropadd] >= _startBalance;\n    if (v1) {\n        v0 = v2 = _startBalance > 0xde0b6b3a7640000;\n    }\n    if (v0) {\n        v0 = v3 = !(0xff & owner_4[msg.sender]);\n    }\n    if (v0) {\n        require(_startBalance > 1);\n        assert(0xde0b6b3a7640000 <= _startBalance);\n        _startBalance = _startBalance - 0xde0b6b3a7640000;\n        require(_balanceOf[_airdropadd] >= _startBalance);\n        assert(_startBalance <= _balanceOf[_airdropadd]);\n        _balanceOf[_airdropadd] = _balanceOf[_airdropadd] - _startBalance;\n        assert(_balanceOf[msg.sender] + _startBalance >= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + _startBalance;\n        owner_4[msg.sender] = 0x1 | ~0xff & owner_4[msg.sender];\n        emit Transfer(_airdropadd, msg.sender, _startBalance);\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x15aec1fb == function_selector) {\n            airdropadd();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2bb9ffef == function_selector) {\n            startBalance();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x8e3073a6 == function_selector) {\n            getEth(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == function_selector) {\n            frozenAccount(address);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe724529c == function_selector) {\n            freezeAccount(address,bool);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 51.50517177581787,
	"usage": {
		"completion_tokens": 992,
		"prompt_tokens": 2145,
		"total_tokens": 3137
	}
}