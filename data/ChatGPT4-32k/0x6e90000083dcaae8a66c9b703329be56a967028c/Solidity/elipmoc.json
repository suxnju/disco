{
	"address": "0x6e90000083dcaae8a66c9b703329be56a967028c",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The given decompiled code is a complex one. A lot of the functionality is obfuscated. However, I can create a simplified Solidity smart contract based on the visible functions. Please note that the original contract likely has more complex functionality than can be represented by this simplified contract.\n\n```solidity\npragma solidity ^0.5.16;\n\ncontract MyContract {\n    mapping (address => uint256) public _getPoolBalances;\n    mapping (address => uint256) public _allowance;\n    mapping (address => bool) public _owner;\n    uint256 public _totalSupply;\n    uint256 public _decimals;\n    uint256 public _getEther;\n    uint256 public _getNextPriceAdjustmentTime;\n    address public _newOwner;\n    bytes public _name;\n    bytes public _symbol;\n\n    event gotPEG(address indexed from, uint256 value, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event gotEther(address indexed from, uint256 value, uint256 amount);\n\n    function name() public view returns (bytes memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (bytes memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint256) {\n        return _decimals;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _getPoolBalances[owner];\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[spender];\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowance[spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(_getPoolBalances[msg.sender] >= value);\n        _getPoolBalances[msg.sender] -= value;\n        _getPoolBalances[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(_getPoolBalances[from] >= value);\n        require(_allowance[msg.sender] >= value);\n        _getPoolBalances[from] -= value;\n        _getPoolBalances[to] += value;\n        _allowance[msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n}\n```\n\nThis contract includes some of the basic ERC20 token functionality like `balanceOf`, `transfer`, `approve`, `transferFrom` and `allowance`. In addition, it has event emission for each of these actions. \n\nPlease note again, this does not cover all the functionality of the original contract as a lot of that is obfuscated. This contract has been greatly simplified for the sake of this demonstration.",
				"role": "assistant"
			}
		}
	],
	"created": 1701465822,
	"id": "chatcmpl-8R5H45ynxM2SOKzkZ7XJkt8mp0Qp2",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.13 11:39 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _symbol; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256 _totalSupply; // STORAGE[0x5]\nuint256 _getEther; // STORAGE[0x6]\nuint256 _getNextPriceAdjustmentTime; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _getPoolBalances; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\naddress _newOwner; // STORAGE[0x1] bytes 0 to 19\naddress stor_a_0_19; // STORAGE[0xa] bytes 0 to 19\n\n// Events\ngotPEG(address, uint256, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nBurn(address, uint256);\nOwnershipTransferred(address, address);\ngotEther(address, uint256, uint256);\nInflate(uint256, uint256);\nDeflate(uint256, uint256);\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * varg1;\n    v1 = v2 = !varg1;\n    if (varg1) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    require(v1);\n    return v0;\n}\n\nfunction 0x1066() private { \n    v0 = v1 = 0;\n    v2 = v3 = 4241;\n    v4 = v5 = 10 ** _decimals;\n    v6 = 0xe10();\n    v7 = v8 = _SafeMul(this.balance, v6);\n    while (v4 <= 0) {\n        require(v4 > 0);\n        if (v4) {\n            break;\n        }\n        assert(v4);\n        _getEther = block.timestamp;\n        return v9;\n        v9 = v10 = v11 + _getPoolBalances[this];\n        require(v10 >= _getPoolBalances[this]);\n        emit Inflate(_getPoolBalances[this], v11);\n        _getPoolBalances[this] = v10;\n        v12 = v13 = v11 + _totalSupply;\n        require(v13 >= _totalSupply);\n        _totalSupply = v12;\n        goto 0x125b;\n        require(v11 <= _getPoolBalances[this]);\n        v9 = _getPoolBalances[this] - v11;\n        emit Deflate(_getPoolBalances[this], v11);\n        _getPoolBalances[this] = v9;\n        require(v11 <= _totalSupply);\n        v12 = _totalSupply - v11;\n        goto 0x116a;\n        v0 = v11 = v7 / v4;\n        goto {'0x11b1', '0x10d3', '0x1091'};\n        if (v11 <= _getPoolBalances[this]) {\n            if (v11 >= _getPoolBalances[this]) {\n                v9 = v14 = _getPoolBalances[this];\n            } else {\n                v2 = v15 = 4529;\n                v4 = v16 = 10;\n                require(v11 <= _getPoolBalances[this]);\n                v7 = _getPoolBalances[this] - v11;\n                goto 0x6110x1066;\n            }\n        } else {\n            v2 = v17 = 4307;\n            v4 = v18 = 10;\n            require(_getPoolBalances[this] <= v11);\n            v7 = v11 - _getPoolBalances[this];\n            goto 0x6110x1066;\n        }\n    }\n}\n\nfunction fallback() public payable { \n    v0, v1, v2 = 0x5f1();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction getPEG() public payable { \n    v0, v1, v2 = 0x5f1();\n    return v1, v0;\n}\n\nfunction dumpContractCode() public nonPayable { \n    EXTCODECOPY(this, MEM[64] + 32, 0, this.code.size);\n    v0 = new array[](this.code.size);\n    v1 = v2 = 0;\n    while (v1 < this.code.size) {\n        MEM[v1 + v0.data] = MEM[v1 + (MEM[64] + 32)];\n        v1 += 32;\n    }\n    v3 = v4 = this.code.size + v0.data;\n    if (0x1f & this.code.size) {\n        MEM[v4 - (0x1f & this.code.size)] = ~(256 ** (32 - (0x1f & this.code.size)) - 1) & MEM[v4 - (0x1f & this.code.size)];\n    }\n    return v0;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _getPoolBalances[varg0]);\n    _getPoolBalances[varg0] = _getPoolBalances[varg0] - varg2;\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    require(varg2 + _allowance[varg1] >= _allowance[varg1]);\n    _getPoolBalances[varg1] = varg2 + _allowance[varg1];\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction getNextPriceAdjustmentTime() public nonPayable { \n    if (block.timestamp < _getEther + _getNextPriceAdjustmentTime) {\n        v0 = v1 = _getEther + _getNextPriceAdjustmentTime - block.timestamp;\n        goto 0x8170x92eB0x2fc;\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    require(varg0 <= _getPoolBalances[msg.sender]);\n    _getPoolBalances[msg.sender] = _getPoolBalances[msg.sender] - (_getPoolBalances[msg.sender] - varg0);\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction getPoolBalances() public nonPayable { \n    return (address(this)).balance, _getPoolBalances[address(this)];\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getPoolBalances[varg0];\n}\n\nfunction acceptOwnership() public nonPayable { \n    require(msg.sender == _newOwner);\n    emit OwnershipTransferred(_owner, _newOwner);\n    _owner = _newOwner;\n    _newOwner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = 527;\n    require(msg.data.length - 4 >= 64);\n    require(varg0);\n    if (this != varg0) {\n        require(varg1 <= _getPoolBalances[msg.sender]);\n        _getPoolBalances[msg.sender] = _getPoolBalances[msg.sender] - varg1;\n        require(varg1 + _getPoolBalances[varg0] >= _getPoolBalances[varg0]);\n        _getPoolBalances[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n    } else {\n        v2 = v3 = 0;\n        v0 = v4 = 3805;\n        v2 = v5 = 0x186a0;\n        v2 = v6 = 1553;\n        v0 = v7 = 3791;\n        v2 = varg1 + _getPoolBalances[address(this)];\n        require(v2 >= _getPoolBalances[address(this)]);\n        v8 = v9 = _SafeMul(0x186a0, varg1);\n        while (v2 <= 0) {\n            require(v2 > 0);\n            if (v2) {\n                break;\n            }\n            assert(v2);\n            require(v0 + _getPoolBalances[this] >= _getPoolBalances[this]);\n            _getPoolBalances[this] += v0;\n            require(v0 <= _getPoolBalances[this]);\n            _getPoolBalances[msg.sender] = _getPoolBalances[this] - v0;\n            emit gotEther(msg.sender, v0, v8 / v2);\n            v10 = msg.sender.call().value(v8 / v2).gas(2300 * !(v8 / v2));\n            require(v10); // checks call status, propagates error data on error\n            if (block.timestamp >= _getEther + _getNextPriceAdjustmentTime) {\n                v11 = 0x1066();\n            }\n            goto {'0xecf0xe93B0xb27', '0xedd0xe93B0xb27'};\n            v8 = _SafeMul(v8 / v2, this.balance);\n        }\n    }\n    return 1;\n}\n\nfunction inflateEtherPool() public payable { \n    return 1;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!(((?).length > 0x100000000) | (36 + varg2 + (?).length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    MEM[v0.data + (?).length] = 0;\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    v1 = new array[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        MEM[v2 + v1.data] = MEM[v2 + v0.data];\n        v2 += 32;\n    }\n    v4 = v5 = v0.length + v1.data;\n    if (0x1f & v0.length) {\n        MEM[v5 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v5 - (0x1f & v0.length)];\n    }\n    require(varg0.code.size);\n    v6 = varg0.receiveApproval(msg.sender, varg1, this, v1).gas(msg.gas);\n    require(v6); // checks call status, propagates error data on error\n    return 1;\n}\n\nfunction newOwner() public nonPayable { \n    return _newOwner;\n}\n\nfunction transferAnyERC20Token(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    require(varg0.code.size);\n    v0, v1 = varg0.transfer(_owner, varg1).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction getPriceETH_USD() public nonPayable { \n    v0 = 0xe10();\n    return v0;\n}\n\nfunction getEther(uint256 varg0) public nonPayable { \n    v0 = v1 = 555;\n    require(msg.data.length - 4 >= 32);\n    v0 = v2 = 0;\n    v3 = v4 = 3805;\n    v0 = v5 = 0x186a0;\n    v0 = v6 = 1553;\n    v3 = v7 = 3791;\n    v0 = varg0 + _getPoolBalances[address(this)];\n    require(v0 >= _getPoolBalances[address(this)]);\n    v8 = v9 = _SafeMul(0x186a0, varg0);\n    while (v0 <= 0) {\n        require(v0 > 0);\n        if (v0) {\n            break;\n        }\n        assert(v0);\n        require(v3 + _getPoolBalances[this] >= _getPoolBalances[this]);\n        _getPoolBalances[this] += v3;\n        require(v3 <= _getPoolBalances[this]);\n        _getPoolBalances[msg.sender] = _getPoolBalances[this] - v3;\n        emit gotEther(msg.sender, v3, v8 / v0);\n        v10 = msg.sender.call().value(v8 / v0).gas(2300 * !(v8 / v0));\n        require(v10); // checks call status, propagates error data on error\n        if (block.timestamp >= _getEther + _getNextPriceAdjustmentTime) {\n            v11 = 0x1066();\n        }\n        return 1, v8 / v0;\n        goto {'0xedd0x594', '0xecf0x594'};\n        v8 = _SafeMul(v8 / v0, this.balance);\n    }\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _newOwner = varg0;\n}\n\nfunction 0x5f1() private { \n    v0 = v1 = 0;\n    v2 = v3 = 1593;\n    v0 = v4 = 0x186a0;\n    v0 = v5 = 1553;\n    v2 = v6 = 1565;\n    v0 = v7 = this.balance;\n    v8 = v9 = _SafeMul(v4, msg.value);\n    while (v0 <= 0) {\n        require(v0 > 0);\n        if (v0) {\n            break;\n        }\n        assert(v0);\n        require(v8 / v0 <= _getPoolBalances[this]);\n        _getPoolBalances[this] = _getPoolBalances[this] - v8 / v0;\n        require(v8 / v0 + _getPoolBalances[msg.sender] >= _getPoolBalances[msg.sender]);\n        _getPoolBalances[msg.sender] += v8 / v0;\n        emit gotPEG(msg.sender, msg.value, v8 / v0);\n        if (block.timestamp >= _getEther + _getNextPriceAdjustmentTime) {\n            v10 = 0x1066();\n        }\n        return v8 / v0, 1, v1;\n        goto {'0x61d', '0x639'};\n        v8 = _SafeMul(v8 / v0, _getPoolBalances[this]);\n    }\n}\n\nfunction 0xe10() private { \n    require(stor_a_0_19.code.size);\n    v0, v1 = stor_a_0_19.read().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x79ba5097 > function_selector >> 224) {\n            if (0x23b872dd > function_selector >> 224) {\n                if (0x6fdde03 == function_selector >> 224) {\n                    name();\n                } else if (0x95ea7b3 == function_selector >> 224) {\n                    approve(address,uint256);\n                } else if (0x9c1a71a == function_selector >> 224) {\n                    getPEG();\n                } else if (0x15c19500 == function_selector >> 224) {\n                    dumpContractCode();\n                } else if (0x18160ddd == function_selector >> 224) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x341776d9 == function_selector >> 224) {\n                getNextPriceAdjustmentTime();\n            } else if (0x42966c68 == function_selector >> 224) {\n                burn(uint256);\n            } else if (0x52375bb1 == function_selector >> 224) {\n                getPoolBalances();\n            } else if (0x70a08231 == function_selector >> 224) {\n                balanceOf(address);\n            }\n        } else if (0xd4ee1d90 > function_selector >> 224) {\n            if (0x79ba5097 == function_selector >> 224) {\n                acceptOwnership();\n            } else if (0x8da5cb5b == function_selector >> 224) {\n                owner();\n            } else if (0x95d89b41 == function_selector >> 224) {\n                symbol();\n            } else if (0xa9059cbb == function_selector >> 224) {\n                transfer(address,uint256);\n            } else if (0xc8c8bb2a == function_selector >> 224) {\n                inflateEtherPool();\n            } else if (0xcae9ca51 == function_selector >> 224) {\n                approveAndCall(address,uint256,bytes);\n            }\n        } else if (0xd4ee1d90 == function_selector >> 224) {\n            newOwner();\n        } else if (0xdc39d06d == function_selector >> 224) {\n            transferAnyERC20Token(address,uint256);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        } else if (0xe1d1f81b == function_selector >> 224) {\n            getPriceETH_USD();\n        } else if (0xf04961ba == function_selector >> 224) {\n            getEther(uint256);\n        } else if (0xf2fde38b == function_selector >> 224) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 11:39 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _symbol; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256 _totalSupply; // STORAGE[0x5]\nuint256 _getEther; // STORAGE[0x6]\nuint256 _getNextPriceAdjustmentTime; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _getPoolBalances; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\naddress _newOwner; // STORAGE[0x1] bytes 0 to 19\naddress stor_a_0_19; // STORAGE[0xa] bytes 0 to 19\n\n// Events\ngotPEG(address, uint256, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nBurn(address, uint256);\nOwnershipTransferred(address, address);\ngotEther(address, uint256, uint256);\nInflate(uint256, uint256);\nDeflate(uint256, uint256);\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * varg1;\n    v1 = v2 = !varg1;\n    if (varg1) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    require(v1);\n    return v0;\n}\n\nfunction 0x1066() private { \n    v0 = v1 = 0;\n    v2 = v3 = 4241;\n    v4 = v5 = 10 ** _decimals;\n    v6 = 0xe10();\n    v7 = v8 = _SafeMul(this.balance, v6);\n    while (v4 <= 0) {\n        require(v4 > 0);\n        if (v4) {\n            break;\n        }\n        assert(v4);\n        _getEther = block.timestamp;\n        return v9;\n        v9 = v10 = v11 + _getPoolBalances[this];\n        require(v10 >= _getPoolBalances[this]);\n        emit Inflate(_getPoolBalances[this], v11);\n        _getPoolBalances[this] = v10;\n        v12 = v13 = v11 + _totalSupply;\n        require(v13 >= _totalSupply);\n        _totalSupply = v12;\n        goto 0x125b;\n        require(v11 <= _getPoolBalances[this]);\n        v9 = _getPoolBalances[this] - v11;\n        emit Deflate(_getPoolBalances[this], v11);\n        _getPoolBalances[this] = v9;\n        require(v11 <= _totalSupply);\n        v12 = _totalSupply - v11;\n        goto 0x116a;\n        v0 = v11 = v7 / v4;\n        goto {'0x11b1', '0x10d3', '0x1091'};\n        if (v11 <= _getPoolBalances[this]) {\n            if (v11 >= _getPoolBalances[this]) {\n                v9 = v14 = _getPoolBalances[this];\n            } else {\n                v2 = v15 = 4529;\n                v4 = v16 = 10;\n                require(v11 <= _getPoolBalances[this]);\n                v7 = _getPoolBalances[this] - v11;\n                goto 0x6110x1066;\n            }\n        } else {\n            v2 = v17 = 4307;\n            v4 = v18 = 10;\n            require(_getPoolBalances[this] <= v11);\n            v7 = v11 - _getPoolBalances[this];\n            goto 0x6110x1066;\n        }\n    }\n}\n\nfunction fallback() public payable { \n    v0, v1, v2 = 0x5f1();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction getPEG() public payable { \n    v0, v1, v2 = 0x5f1();\n    return v1, v0;\n}\n\nfunction dumpContractCode() public nonPayable { \n    EXTCODECOPY(this, MEM[64] + 32, 0, this.code.size);\n    v0 = new array[](this.code.size);\n    v1 = v2 = 0;\n    while (v1 < this.code.size) {\n        MEM[v1 + v0.data] = MEM[v1 + (MEM[64] + 32)];\n        v1 += 32;\n    }\n    v3 = v4 = this.code.size + v0.data;\n    if (0x1f & this.code.size) {\n        MEM[v4 - (0x1f & this.code.size)] = ~(256 ** (32 - (0x1f & this.code.size)) - 1) & MEM[v4 - (0x1f & this.code.size)];\n    }\n    return v0;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _getPoolBalances[varg0]);\n    _getPoolBalances[varg0] = _getPoolBalances[varg0] - varg2;\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    require(varg2 + _allowance[varg1] >= _allowance[varg1]);\n    _getPoolBalances[varg1] = varg2 + _allowance[varg1];\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction getNextPriceAdjustmentTime() public nonPayable { \n    if (block.timestamp < _getEther + _getNextPriceAdjustmentTime) {\n        v0 = v1 = _getEther + _getNextPriceAdjustmentTime - block.timestamp;\n        goto 0x8170x92eB0x2fc;\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    require(varg0 <= _getPoolBalances[msg.sender]);\n    _getPoolBalances[msg.sender] = _getPoolBalances[msg.sender] - (_getPoolBalances[msg.sender] - varg0);\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction getPoolBalances() public nonPayable { \n    return (address(this)).balance, _getPoolBalances[address(this)];\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getPoolBalances[varg0];\n}\n\nfunction acceptOwnership() public nonPayable { \n    require(msg.sender == _newOwner);\n    emit OwnershipTransferred(_owner, _newOwner);\n    _owner = _newOwner;\n    _newOwner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = 527;\n    require(msg.data.length - 4 >= 64);\n    require(varg0);\n    if (this != varg0) {\n        require(varg1 <= _getPoolBalances[msg.sender]);\n        _getPoolBalances[msg.sender] = _getPoolBalances[msg.sender] - varg1;\n        require(varg1 + _getPoolBalances[varg0] >= _getPoolBalances[varg0]);\n        _getPoolBalances[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n    } else {\n        v2 = v3 = 0;\n        v0 = v4 = 3805;\n        v2 = v5 = 0x186a0;\n        v2 = v6 = 1553;\n        v0 = v7 = 3791;\n        v2 = varg1 + _getPoolBalances[address(this)];\n        require(v2 >= _getPoolBalances[address(this)]);\n        v8 = v9 = _SafeMul(0x186a0, varg1);\n        while (v2 <= 0) {\n            require(v2 > 0);\n            if (v2) {\n                break;\n            }\n            assert(v2);\n            require(v0 + _getPoolBalances[this] >= _getPoolBalances[this]);\n            _getPoolBalances[this] += v0;\n            require(v0 <= _getPoolBalances[this]);\n            _getPoolBalances[msg.sender] = _getPoolBalances[this] - v0;\n            emit gotEther(msg.sender, v0, v8 / v2);\n            v10 = msg.sender.call().value(v8 / v2).gas(2300 * !(v8 / v2));\n            require(v10); // checks call status, propagates error data on error\n            if (block.timestamp >= _getEther + _getNextPriceAdjustmentTime) {\n                v11 = 0x1066();\n            }\n            goto {'0xecf0xe93B0xb27', '0xedd0xe93B0xb27'};\n            v8 = _SafeMul(v8 / v2, this.balance);\n        }\n    }\n    return 1;\n}\n\nfunction inflateEtherPool() public payable { \n    return 1;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!(((?).length > 0x100000000) | (36 + varg2 + (?).length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    MEM[v0.data + (?).length] = 0;\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    v1 = new array[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        MEM[v2 + v1.data] = MEM[v2 + v0.data];\n        v2 += 32;\n    }\n    v4 = v5 = v0.length + v1.data;\n    if (0x1f & v0.length) {\n        MEM[v5 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v5 - (0x1f & v0.length)];\n    }\n    require(varg0.code.size);\n    v6 = varg0.receiveApproval(msg.sender, varg1, this, v1).gas(msg.gas);\n    require(v6); // checks call status, propagates error data on error\n    return 1;\n}\n\nfunction newOwner() public nonPayable { \n    return _newOwner;\n}\n\nfunction transferAnyERC20Token(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    require(varg0.code.size);\n    v0, v1 = varg0.transfer(_owner, varg1).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction getPriceETH_USD() public nonPayable { \n    v0 = 0xe10();\n    return v0;\n}\n\nfunction getEther(uint256 varg0) public nonPayable { \n    v0 = v1 = 555;\n    require(msg.data.length - 4 >= 32);\n    v0 = v2 = 0;\n    v3 = v4 = 3805;\n    v0 = v5 = 0x186a0;\n    v0 = v6 = 1553;\n    v3 = v7 = 3791;\n    v0 = varg0 + _getPoolBalances[address(this)];\n    require(v0 >= _getPoolBalances[address(this)]);\n    v8 = v9 = _SafeMul(0x186a0, varg0);\n    while (v0 <= 0) {\n        require(v0 > 0);\n        if (v0) {\n            break;\n        }\n        assert(v0);\n        require(v3 + _getPoolBalances[this] >= _getPoolBalances[this]);\n        _getPoolBalances[this] += v3;\n        require(v3 <= _getPoolBalances[this]);\n        _getPoolBalances[msg.sender] = _getPoolBalances[this] - v3;\n        emit gotEther(msg.sender, v3, v8 / v0);\n        v10 = msg.sender.call().value(v8 / v0).gas(2300 * !(v8 / v0));\n        require(v10); // checks call status, propagates error data on error\n        if (block.timestamp >= _getEther + _getNextPriceAdjustmentTime) {\n            v11 = 0x1066();\n        }\n        return 1, v8 / v0;\n        goto {'0xedd0x594', '0xecf0x594'};\n        v8 = _SafeMul(v8 / v0, this.balance);\n    }\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _newOwner = varg0;\n}\n\nfunction 0x5f1() private { \n    v0 = v1 = 0;\n    v2 = v3 = 1593;\n    v0 = v4 = 0x186a0;\n    v0 = v5 = 1553;\n    v2 = v6 = 1565;\n    v0 = v7 = this.balance;\n    v8 = v9 = _SafeMul(v4, msg.value);\n    while (v0 <= 0) {\n        require(v0 > 0);\n        if (v0) {\n            break;\n        }\n        assert(v0);\n        require(v8 / v0 <= _getPoolBalances[this]);\n        _getPoolBalances[this] = _getPoolBalances[this] - v8 / v0;\n        require(v8 / v0 + _getPoolBalances[msg.sender] >= _getPoolBalances[msg.sender]);\n        _getPoolBalances[msg.sender] += v8 / v0;\n        emit gotPEG(msg.sender, msg.value, v8 / v0);\n        if (block.timestamp >= _getEther + _getNextPriceAdjustmentTime) {\n            v10 = 0x1066();\n        }\n        return v8 / v0, 1, v1;\n        goto {'0x61d', '0x639'};\n        v8 = _SafeMul(v8 / v0, _getPoolBalances[this]);\n    }\n}\n\nfunction 0xe10() private { \n    require(stor_a_0_19.code.size);\n    v0, v1 = stor_a_0_19.read().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x79ba5097 > function_selector >> 224) {\n            if (0x23b872dd > function_selector >> 224) {\n                if (0x6fdde03 == function_selector >> 224) {\n                    name();\n                } else if (0x95ea7b3 == function_selector >> 224) {\n                    approve(address,uint256);\n                } else if (0x9c1a71a == function_selector >> 224) {\n                    getPEG();\n                } else if (0x15c19500 == function_selector >> 224) {\n                    dumpContractCode();\n                } else if (0x18160ddd == function_selector >> 224) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x341776d9 == function_selector >> 224) {\n                getNextPriceAdjustmentTime();\n            } else if (0x42966c68 == function_selector >> 224) {\n                burn(uint256);\n            } else if (0x52375bb1 == function_selector >> 224) {\n                getPoolBalances();\n            } else if (0x70a08231 == function_selector >> 224) {\n                balanceOf(address);\n            }\n        } else if (0xd4ee1d90 > function_selector >> 224) {\n            if (0x79ba5097 == function_selector >> 224) {\n                acceptOwnership();\n            } else if (0x8da5cb5b == function_selector >> 224) {\n                owner();\n            } else if (0x95d89b41 == function_selector >> 224) {\n                symbol();\n            } else if (0xa9059cbb == function_selector >> 224) {\n                transfer(address,uint256);\n            } else if (0xc8c8bb2a == function_selector >> 224) {\n                inflateEtherPool();\n            } else if (0xcae9ca51 == function_selector >> 224) {\n                approveAndCall(address,uint256,bytes);\n            }\n        } else if (0xd4ee1d90 == function_selector >> 224) {\n            newOwner();\n        } else if (0xdc39d06d == function_selector >> 224) {\n            transferAnyERC20Token(address,uint256);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        } else if (0xe1d1f81b == function_selector >> 224) {\n            getPriceETH_USD();\n        } else if (0xf04961ba == function_selector >> 224) {\n            getEther(uint256);\n        } else if (0xf2fde38b == function_selector >> 224) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 11:39 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _symbol; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256 _totalSupply; // STORAGE[0x5]\nuint256 _getEther; // STORAGE[0x6]\nuint256 _getNextPriceAdjustmentTime; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _getPoolBalances; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\naddress _newOwner; // STORAGE[0x1] bytes 0 to 19\naddress stor_a_0_19; // STORAGE[0xa] bytes 0 to 19\n\n// Events\ngotPEG(address, uint256, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nBurn(address, uint256);\nOwnershipTransferred(address, address);\ngotEther(address, uint256, uint256);\nInflate(uint256, uint256);\nDeflate(uint256, uint256);\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * varg1;\n    v1 = v2 = !varg1;\n    if (varg1) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    require(v1);\n    return v0;\n}\n\nfunction 0x1066() private { \n    v0 = v1 = 0;\n    v2 = v3 = 4241;\n    v4 = v5 = 10 ** _decimals;\n    v6 = 0xe10();\n    v7 = v8 = _SafeMul(this.balance, v6);\n    while (v4 <= 0) {\n        require(v4 > 0);\n        if (v4) {\n            break;\n        }\n        assert(v4);\n        _getEther = block.timestamp;\n        return v9;\n        v9 = v10 = v11 + _getPoolBalances[this];\n        require(v10 >= _getPoolBalances[this]);\n        emit Inflate(_getPoolBalances[this], v11);\n        _getPoolBalances[this] = v10;\n        v12 = v13 = v11 + _totalSupply;\n        require(v13 >= _totalSupply);\n        _totalSupply = v12;\n        goto 0x125b;\n        require(v11 <= _getPoolBalances[this]);\n        v9 = _getPoolBalances[this] - v11;\n        emit Deflate(_getPoolBalances[this], v11);\n        _getPoolBalances[this] = v9;\n        require(v11 <= _totalSupply);\n        v12 = _totalSupply - v11;\n        goto 0x116a;\n        v0 = v11 = v7 / v4;\n        goto {'0x11b1', '0x10d3', '0x1091'};\n        if (v11 <= _getPoolBalances[this]) {\n            if (v11 >= _getPoolBalances[this]) {\n                v9 = v14 = _getPoolBalances[this];\n            } else {\n                v2 = v15 = 4529;\n                v4 = v16 = 10;\n                require(v11 <= _getPoolBalances[this]);\n                v7 = _getPoolBalances[this] - v11;\n                goto 0x6110x1066;\n            }\n        } else {\n            v2 = v17 = 4307;\n            v4 = v18 = 10;\n            require(_getPoolBalances[this] <= v11);\n            v7 = v11 - _getPoolBalances[this];\n            goto 0x6110x1066;\n        }\n    }\n}\n\nfunction fallback() public payable { \n    v0, v1, v2 = 0x5f1();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction getPEG() public payable { \n    v0, v1, v2 = 0x5f1();\n    return v1, v0;\n}\n\nfunction dumpContractCode() public nonPayable { \n    EXTCODECOPY(this, MEM[64] + 32, 0, this.code.size);\n    v0 = new array[](this.code.size);\n    v1 = v2 = 0;\n    while (v1 < this.code.size) {\n        MEM[v1 + v0.data] = MEM[v1 + (MEM[64] + 32)];\n        v1 += 32;\n    }\n    v3 = v4 = this.code.size + v0.data;\n    if (0x1f & this.code.size) {\n        MEM[v4 - (0x1f & this.code.size)] = ~(256 ** (32 - (0x1f & this.code.size)) - 1) & MEM[v4 - (0x1f & this.code.size)];\n    }\n    return v0;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _getPoolBalances[varg0]);\n    _getPoolBalances[varg0] = _getPoolBalances[varg0] - varg2;\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    require(varg2 + _allowance[varg1] >= _allowance[varg1]);\n    _getPoolBalances[varg1] = varg2 + _allowance[varg1];\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction getNextPriceAdjustmentTime() public nonPayable { \n    if (block.timestamp < _getEther + _getNextPriceAdjustmentTime) {\n        v0 = v1 = _getEther + _getNextPriceAdjustmentTime - block.timestamp;\n        goto 0x8170x92eB0x2fc;\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    require(varg0 <= _getPoolBalances[msg.sender]);\n    _getPoolBalances[msg.sender] = _getPoolBalances[msg.sender] - (_getPoolBalances[msg.sender] - varg0);\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction getPoolBalances() public nonPayable { \n    return (address(this)).balance, _getPoolBalances[address(this)];\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getPoolBalances[varg0];\n}\n\nfunction acceptOwnership() public nonPayable { \n    require(msg.sender == _newOwner);\n    emit OwnershipTransferred(_owner, _newOwner);\n    _owner = _newOwner;\n    _newOwner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = 527;\n    require(msg.data.length - 4 >= 64);\n    require(varg0);\n    if (this != varg0) {\n        require(varg1 <= _getPoolBalances[msg.sender]);\n        _getPoolBalances[msg.sender] = _getPoolBalances[msg.sender] - varg1;\n        require(varg1 + _getPoolBalances[varg0] >= _getPoolBalances[varg0]);\n        _getPoolBalances[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n    } else {\n        v2 = v3 = 0;\n        v0 = v4 = 3805;\n        v2 = v5 = 0x186a0;\n        v2 = v6 = 1553;\n        v0 = v7 = 3791;\n        v2 = varg1 + _getPoolBalances[address(this)];\n        require(v2 >= _getPoolBalances[address(this)]);\n        v8 = v9 = _SafeMul(0x186a0, varg1);\n        while (v2 <= 0) {\n            require(v2 > 0);\n            if (v2) {\n                break;\n            }\n            assert(v2);\n            require(v0 + _getPoolBalances[this] >= _getPoolBalances[this]);\n            _getPoolBalances[this] += v0;\n            require(v0 <= _getPoolBalances[this]);\n            _getPoolBalances[msg.sender] = _getPoolBalances[this] - v0;\n            emit gotEther(msg.sender, v0, v8 / v2);\n            v10 = msg.sender.call().value(v8 / v2).gas(2300 * !(v8 / v2));\n            require(v10); // checks call status, propagates error data on error\n            if (block.timestamp >= _getEther + _getNextPriceAdjustmentTime) {\n                v11 = 0x1066();\n            }\n            goto {'0xecf0xe93B0xb27', '0xedd0xe93B0xb27'};\n            v8 = _SafeMul(v8 / v2, this.balance);\n        }\n    }\n    return 1;\n}\n\nfunction inflateEtherPool() public payable { \n    return 1;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!(((?).length > 0x100000000) | (36 + varg2 + (?).length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    MEM[v0.data + (?).length] = 0;\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    v1 = new array[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        MEM[v2 + v1.data] = MEM[v2 + v0.data];\n        v2 += 32;\n    }\n    v4 = v5 = v0.length + v1.data;\n    if (0x1f & v0.length) {\n        MEM[v5 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v5 - (0x1f & v0.length)];\n    }\n    require(varg0.code.size);\n    v6 = varg0.receiveApproval(msg.sender, varg1, this, v1).gas(msg.gas);\n    require(v6); // checks call status, propagates error data on error\n    return 1;\n}\n\nfunction newOwner() public nonPayable { \n    return _newOwner;\n}\n\nfunction transferAnyERC20Token(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    require(varg0.code.size);\n    v0, v1 = varg0.transfer(_owner, varg1).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction getPriceETH_USD() public nonPayable { \n    v0 = 0xe10();\n    return v0;\n}\n\nfunction getEther(uint256 varg0) public nonPayable { \n    v0 = v1 = 555;\n    require(msg.data.length - 4 >= 32);\n    v0 = v2 = 0;\n    v3 = v4 = 3805;\n    v0 = v5 = 0x186a0;\n    v0 = v6 = 1553;\n    v3 = v7 = 3791;\n    v0 = varg0 + _getPoolBalances[address(this)];\n    require(v0 >= _getPoolBalances[address(this)]);\n    v8 = v9 = _SafeMul(0x186a0, varg0);\n    while (v0 <= 0) {\n        require(v0 > 0);\n        if (v0) {\n            break;\n        }\n        assert(v0);\n        require(v3 + _getPoolBalances[this] >= _getPoolBalances[this]);\n        _getPoolBalances[this] += v3;\n        require(v3 <= _getPoolBalances[this]);\n        _getPoolBalances[msg.sender] = _getPoolBalances[this] - v3;\n        emit gotEther(msg.sender, v3, v8 / v0);\n        v10 = msg.sender.call().value(v8 / v0).gas(2300 * !(v8 / v0));\n        require(v10); // checks call status, propagates error data on error\n        if (block.timestamp >= _getEther + _getNextPriceAdjustmentTime) {\n            v11 = 0x1066();\n        }\n        return 1, v8 / v0;\n        goto {'0xedd0x594', '0xecf0x594'};\n        v8 = _SafeMul(v8 / v0, this.balance);\n    }\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _newOwner = varg0;\n}\n\nfunction 0x5f1() private { \n    v0 = v1 = 0;\n    v2 = v3 = 1593;\n    v0 = v4 = 0x186a0;\n    v0 = v5 = 1553;\n    v2 = v6 = 1565;\n    v0 = v7 = this.balance;\n    v8 = v9 = _SafeMul(v4, msg.value);\n    while (v0 <= 0) {\n        require(v0 > 0);\n        if (v0) {\n            break;\n        }\n        assert(v0);\n        require(v8 / v0 <= _getPoolBalances[this]);\n        _getPoolBalances[this] = _getPoolBalances[this] - v8 / v0;\n        require(v8 / v0 + _getPoolBalances[msg.sender] >= _getPoolBalances[msg.sender]);\n        _getPoolBalances[msg.sender] += v8 / v0;\n        emit gotPEG(msg.sender, msg.value, v8 / v0);\n        if (block.timestamp >= _getEther + _getNextPriceAdjustmentTime) {\n            v10 = 0x1066();\n        }\n        return v8 / v0, 1, v1;\n        goto {'0x61d', '0x639'};\n        v8 = _SafeMul(v8 / v0, _getPoolBalances[this]);\n    }\n}\n\nfunction 0xe10() private { \n    require(stor_a_0_19.code.size);\n    v0, v1 = stor_a_0_19.read().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x79ba5097 > function_selector >> 224) {\n            if (0x23b872dd > function_selector >> 224) {\n                if (0x6fdde03 == function_selector >> 224) {\n                    name();\n                } else if (0x95ea7b3 == function_selector >> 224) {\n                    approve(address,uint256);\n                } else if (0x9c1a71a == function_selector >> 224) {\n                    getPEG();\n                } else if (0x15c19500 == function_selector >> 224) {\n                    dumpContractCode();\n                } else if (0x18160ddd == function_selector >> 224) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x341776d9 == function_selector >> 224) {\n                getNextPriceAdjustmentTime();\n            } else if (0x42966c68 == function_selector >> 224) {\n                burn(uint256);\n            } else if (0x52375bb1 == function_selector >> 224) {\n                getPoolBalances();\n            } else if (0x70a08231 == function_selector >> 224) {\n                balanceOf(address);\n            }\n        } else if (0xd4ee1d90 > function_selector >> 224) {\n            if (0x79ba5097 == function_selector >> 224) {\n                acceptOwnership();\n            } else if (0x8da5cb5b == function_selector >> 224) {\n                owner();\n            } else if (0x95d89b41 == function_selector >> 224) {\n                symbol();\n            } else if (0xa9059cbb == function_selector >> 224) {\n                transfer(address,uint256);\n            } else if (0xc8c8bb2a == function_selector >> 224) {\n                inflateEtherPool();\n            } else if (0xcae9ca51 == function_selector >> 224) {\n                approveAndCall(address,uint256,bytes);\n            }\n        } else if (0xd4ee1d90 == function_selector >> 224) {\n            newOwner();\n        } else if (0xdc39d06d == function_selector >> 224) {\n            transferAnyERC20Token(address,uint256);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        } else if (0xe1d1f81b == function_selector >> 224) {\n            getPriceETH_USD();\n        } else if (0xf04961ba == function_selector >> 224) {\n            getEther(uint256);\n        } else if (0xf2fde38b == function_selector >> 224) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 37.80229997634888,
	"usage": {
		"completion_tokens": 672,
		"prompt_tokens": 5064,
		"total_tokens": 5736
	}
}