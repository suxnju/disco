{
	"address": "0x3ba2175a0791dbe272528893b6922b4bc19d1f18",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity smart contract that represents the decompiled code shared. Please note that the original code may vary as this is a reverse-engineered version. Also, some functions were named as hexadecimal values which is not allowed in Solidity, so I have named them as function1, function2 etc.\n\n```solidity\npragma solidity ^0.8.2;\n\ncontract MyContract {\n    string public _name;\n    string public _symbol;\n    uint256 public _totalSupply;\n    uint256 public _buyPrice;\n    uint256 public _amountRaised;\n    uint256 public _deadline;\n    mapping(address => uint256) public _balanceOf;\n    mapping(address => mapping(address => uint256)) public _allowance;\n    address public _owner;\n    uint8 public _decimals;\n    bool public _fallback;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Burn(address indexed from, uint256 value);\n\n    function fallback() public payable {\n        require(!_fallback);\n        require(_balanceOf[address(this)] >= msg.value * 1 ether / _buyPrice);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value * 1 ether / _buyPrice;\n        _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value * 1 ether / _buyPrice;\n        emit Transfer(address(this), msg.sender, msg.value * 1 ether / _buyPrice);\n        _amountRaised = _amountRaised + msg.value;\n        if (_amountRaised >= 50000000000000000000) {\n            payable(_owner).transfer(_amountRaised);\n            _amountRaised = 0;\n        }\n    }\n\n    function function1(uint256 varg0, address varg1, address varg2) private {\n        require(_balanceOf[varg2] >= varg0);\n        _balanceOf[varg2] -= varg0;\n        _balanceOf[varg1] += varg0;\n        emit Transfer(varg2, varg1, varg0);\n    }\n\n    function approve(address varg0, uint256 varg1) public returns (bool success) {\n        _allowance[msg.sender][varg0] = varg1;\n        emit Approval(msg.sender, varg0, varg1);\n        return true;\n    }\n\n    function transferFrom(address varg0, address varg1, uint256 varg2) public returns (bool success) {\n        require(varg2 <= _allowance[varg0][msg.sender]);\n        _allowance[varg0][msg.sender] -= varg2;\n        function1(varg2, varg1, varg0);\n        return true;\n    }\n\n    function burn(uint256 varg0) public returns (bool success) {\n        require(_balanceOf[msg.sender] >= varg0);\n        _balanceOf[msg.sender] -= varg0;\n        _totalSupply -= varg0;\n        emit Burn(msg.sender, varg0);\n        return true;\n    }\n\n    function burnFrom(address varg0, uint256 varg1) public returns (bool success) {\n        require(_balanceOf[varg0] >= varg1);\n        require(varg1 <= _allowance[varg0][msg.sender]);\n        _balanceOf[varg0] -= varg1;\n        _allowance[varg0][msg.sender] -= varg1;\n        _totalSupply -= varg1;\n        emit Burn(varg0, varg1);\n        return true;\n    }\n\n    function setPrices(uint256 varg0) public {\n        require(msg.sender == _owner);\n        if (msg.sender == _owner) {\n            _buyPrice = varg0;\n        }\n    }\n\n    function transfer(address varg0, uint256 varg1) public {\n        function1(varg1, varg0, msg.sender);\n    }\n\n    function approveAndCall(address varg0, uint256 varg1, bytes memory varg2) public returns (bool success) {\n        _allowance[msg.sender][varg0] = varg1;\n        emit Approval(msg.sender, varg0, varg1);\n        (bool result,) = varg0.call(varg2);\n        require(result);\n        return true;\n    }\n\n    function allowance(address varg0, address varg1) public view returns (uint256 remaining) {\n        return _allowance[varg0][varg1];\n    }\n\n    function transferOwnership(address varg0) public {\n        require(msg.sender == _owner);\n        _owner = varg0;\n    }\n\n    function postDeadline() public {\n        require(block.timestamp >= _deadline);\n        payable(_owner).transfer(_amountRaised);\n        _amountRaised = 0;\n        _fallback = true;\n    }\n}\n```\nI have made some assumptions regarding the functionality and the variable names. You might need to adjust it according to your needs.",
				"role": "assistant"
			}
		}
	],
	"created": 1701468534,
	"id": "chatcmpl-8R5yoiPoyVZqH0dHzyOtJVuroa5FP",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 18:20 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nuint256 _buyPrice; // STORAGE[0x5]\nuint256 _amountRaised; // STORAGE[0x6]\nuint256 _deadline; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xf]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x10]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\nuint8 _fallback; // STORAGE[0x9] bytes 0 to 0\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nBurn(address, uint256);\n\nfunction fallback() public payable { \n    require(!_fallback);\n    assert(_buyPrice);\n    require(_balanceOf[address(this)] >= msg.value * 0xde0b6b3a7640000 / _buyPrice);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value * 0xde0b6b3a7640000 / _buyPrice;\n    _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value * 0xde0b6b3a7640000 / _buyPrice;\n    emit Transfer(address(this), msg.sender, msg.value * 0xde0b6b3a7640000 / _buyPrice);\n    _amountRaised = _amountRaised + msg.value;\n    if (_amountRaised >= 0x6f05b59d3b20000) {\n        v0 = _owner.call().value(_amountRaised).gas(!_amountRaised * 2300);\n        require(v0);\n        _amountRaised = 0;\n    }\n}\n\nfunction 0x13f1(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1) != 0);\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    v2 = address(varg1);\n    require(_balanceOf[v2] + varg0 > _balanceOf[v1]);\n    v3 = address(varg1);\n    v4 = address(varg2);\n    v5 = address(varg2);\n    _balanceOf[v5] = _balanceOf[v5] - varg0;\n    v6 = address(varg1);\n    _balanceOf[v6] = _balanceOf[v6] + varg0;\n    emit Transfer(address(varg2), address(varg1), varg0);\n    v7 = address(varg1);\n    v8 = address(varg2);\n    assert(_balanceOf[v8] + _balanceOf[v7] == _balanceOf[v4] + _balanceOf[v3]);\n    return ;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x13f1(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction setPrices(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    if (msg.sender == _owner) {\n        _buyPrice = varg0;\n    }\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x13f1(varg1, varg0, msg.sender);\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[](varg2.length);\n    CALLDATACOPY(v0.data, 36 + varg2, varg2.length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v3.data + v4] = MEM[v0.data + v4];\n            v4 = v4 + 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    if (msg.sender == _owner) {\n        _owner = varg0;\n    }\n}\n\nfunction postDeadline() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        v0 = _owner.call().value(_amountRaised).gas(!_amountRaised * 2300);\n        require(v0);\n        _amountRaised = 0;\n        _fallback = 1;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa3201daa == function_selector) {\n            setPrices(uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf993bef3 == function_selector) {\n            postDeadline();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 18:20 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nuint256 _buyPrice; // STORAGE[0x5]\nuint256 _amountRaised; // STORAGE[0x6]\nuint256 _deadline; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xf]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x10]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\nuint8 _fallback; // STORAGE[0x9] bytes 0 to 0\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nBurn(address, uint256);\n\nfunction fallback() public payable { \n    require(!_fallback);\n    assert(_buyPrice);\n    require(_balanceOf[address(this)] >= msg.value * 0xde0b6b3a7640000 / _buyPrice);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value * 0xde0b6b3a7640000 / _buyPrice;\n    _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value * 0xde0b6b3a7640000 / _buyPrice;\n    emit Transfer(address(this), msg.sender, msg.value * 0xde0b6b3a7640000 / _buyPrice);\n    _amountRaised = _amountRaised + msg.value;\n    if (_amountRaised >= 0x6f05b59d3b20000) {\n        v0 = _owner.call().value(_amountRaised).gas(!_amountRaised * 2300);\n        require(v0);\n        _amountRaised = 0;\n    }\n}\n\nfunction 0x13f1(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1) != 0);\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    v2 = address(varg1);\n    require(_balanceOf[v2] + varg0 > _balanceOf[v1]);\n    v3 = address(varg1);\n    v4 = address(varg2);\n    v5 = address(varg2);\n    _balanceOf[v5] = _balanceOf[v5] - varg0;\n    v6 = address(varg1);\n    _balanceOf[v6] = _balanceOf[v6] + varg0;\n    emit Transfer(address(varg2), address(varg1), varg0);\n    v7 = address(varg1);\n    v8 = address(varg2);\n    assert(_balanceOf[v8] + _balanceOf[v7] == _balanceOf[v4] + _balanceOf[v3]);\n    return ;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x13f1(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction setPrices(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    if (msg.sender == _owner) {\n        _buyPrice = varg0;\n    }\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x13f1(varg1, varg0, msg.sender);\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[](varg2.length);\n    CALLDATACOPY(v0.data, 36 + varg2, varg2.length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v3.data + v4] = MEM[v0.data + v4];\n            v4 = v4 + 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    if (msg.sender == _owner) {\n        _owner = varg0;\n    }\n}\n\nfunction postDeadline() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        v0 = _owner.call().value(_amountRaised).gas(!_amountRaised * 2300);\n        require(v0);\n        _amountRaised = 0;\n        _fallback = 1;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa3201daa == function_selector) {\n            setPrices(uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf993bef3 == function_selector) {\n            postDeadline();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 18:20 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nuint256 _buyPrice; // STORAGE[0x5]\nuint256 _amountRaised; // STORAGE[0x6]\nuint256 _deadline; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xf]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x10]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\nuint8 _fallback; // STORAGE[0x9] bytes 0 to 0\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nBurn(address, uint256);\n\nfunction fallback() public payable { \n    require(!_fallback);\n    assert(_buyPrice);\n    require(_balanceOf[address(this)] >= msg.value * 0xde0b6b3a7640000 / _buyPrice);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value * 0xde0b6b3a7640000 / _buyPrice;\n    _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value * 0xde0b6b3a7640000 / _buyPrice;\n    emit Transfer(address(this), msg.sender, msg.value * 0xde0b6b3a7640000 / _buyPrice);\n    _amountRaised = _amountRaised + msg.value;\n    if (_amountRaised >= 0x6f05b59d3b20000) {\n        v0 = _owner.call().value(_amountRaised).gas(!_amountRaised * 2300);\n        require(v0);\n        _amountRaised = 0;\n    }\n}\n\nfunction 0x13f1(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1) != 0);\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    v2 = address(varg1);\n    require(_balanceOf[v2] + varg0 > _balanceOf[v1]);\n    v3 = address(varg1);\n    v4 = address(varg2);\n    v5 = address(varg2);\n    _balanceOf[v5] = _balanceOf[v5] - varg0;\n    v6 = address(varg1);\n    _balanceOf[v6] = _balanceOf[v6] + varg0;\n    emit Transfer(address(varg2), address(varg1), varg0);\n    v7 = address(varg1);\n    v8 = address(varg2);\n    assert(_balanceOf[v8] + _balanceOf[v7] == _balanceOf[v4] + _balanceOf[v3]);\n    return ;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x13f1(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction setPrices(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    if (msg.sender == _owner) {\n        _buyPrice = varg0;\n    }\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x13f1(varg1, varg0, msg.sender);\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[](varg2.length);\n    CALLDATACOPY(v0.data, 36 + varg2, varg2.length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v3.data + v4] = MEM[v0.data + v4];\n            v4 = v4 + 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    if (msg.sender == _owner) {\n        _owner = varg0;\n    }\n}\n\nfunction postDeadline() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        v0 = _owner.call().value(_amountRaised).gas(!_amountRaised * 2300);\n        require(v0);\n        _amountRaised = 0;\n        _fallback = 1;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa3201daa == function_selector) {\n            setPrices(uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf993bef3 == function_selector) {\n            postDeadline();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 95.32085967063904,
	"usage": {
		"completion_tokens": 1048,
		"prompt_tokens": 2705,
		"total_tokens": 3753
	}
}