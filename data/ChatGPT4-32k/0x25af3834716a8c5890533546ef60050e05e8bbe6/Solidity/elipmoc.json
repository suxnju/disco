{
	"address": "0x25af3834716a8c5890533546ef60050e05e8bbe6",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's a Solidity version of your decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _percentages;\n    mapping (address => uint256) private _withdraws;\n    uint256 private _fallback;\n\n    function percentages(address _address) public view returns(uint256) { \n        return _percentages[_address];\n    }\n\n    function fallback() public payable { \n        _fallback += msg.value;\n    }\n\n    function withdraw() public { \n        require(_percentages[msg.sender] > 0, 'You are not a member');\n        uint256 amount = _percentages[msg.sender] * _fallback / 10000;\n        require(amount > _withdraws[msg.sender], 'No funds to withdraw');\n        _withdraws[msg.sender] += amount - _withdraws[msg.sender];\n        (bool success, ) = msg.sender.call{value: amount - _withdraws[msg.sender]}(\"\");\n        require(success);\n    }\n\n    function withdraws(address _address) public view returns(uint256) { \n        return _withdraws[_address];\n    }\n\n    function balanceOf(address _address) public view returns(uint256) { \n        uint256 balance;\n        if (_percentages[_address] > 0) {\n            balance = _percentages[_address] * _fallback / 10000;\n        } else {\n            balance = 0;\n        }\n        if (balance > _withdraws[_address]) {\n            return balance - _withdraws[_address];\n        } else {\n            return 0;\n        }\n    }\n\n    function changeWallet(address newAddress) public { \n        require(_percentages[msg.sender] > 0, 'You are not a member');\n        require(newAddress != address(0), 'Zero address');\n        _percentages[newAddress] = _percentages[msg.sender];\n        _withdraws[newAddress] = _withdraws[msg.sender];\n        delete _percentages[msg.sender];\n        delete _withdraws[msg.sender];\n    }\n}\n```\n\nThis is a simple contract which maintains a mapping of addresses to percentages and withdraws. A user can add funds to the contract through the fallback function, withdraw their proportional share of the funds, view their withdraws, and change their registered address. \n\nThe code provided was not an exact match to the decompiled code, there are some inferred variables and the function selector is not included. Variables `v0`, `v1`, `v2`, etc. seem to be used for temporary calculations and were replaced with meaningful variable names in the Solidity version. The function selector was also omitted as it's not typically needed in Solidity.",
				"role": "assistant"
			}
		}
	],
	"created": 1701460765,
	"id": "chatcmpl-8R3xVpE1I7RDFwGWkv7KHL6PywpJQ",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 21:31 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _percentages; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _withdraws; // STORAGE[0x1]\nuint256 _fallback; // STORAGE[0x2]\n\n\nfunction percentages(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return uint16(_percentages[varg0]);\n}\n\nfunction fallback() public payable { \n    _fallback += msg.value;\n}\n\nfunction withdraw() public nonPayable { \n    require(uint16(_percentages[msg.sender]), 'You are not a member');\n    v0 = v1 = uint16(_percentages[msg.sender]) * _fallback / 10000;\n    if (uint16(_percentages[msg.sender]) * _fallback / 10000) {\n        v0 = uint16(_percentages[msg.sender]) * _fallback / 10000 > _withdraws[msg.sender];\n    }\n    require(v0, 'No funds to withdraw');\n    _withdraws[msg.sender] += uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender];\n    v2 = msg.sender.call().value(uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender]).gas(2300 * !(uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender]));\n    require(v2); // checks call status, propagates error data on error\n}\n\nfunction withdraws(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _withdraws[varg0];\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (uint16(_percentages[address(varg0)])) {\n        v0 = v1 = uint16(_percentages[address(varg0)]) * _fallback / 10000;\n    } else {\n        v0 = v2 = 0;\n    }\n    if (v0 > _withdraws[varg0]) {\n        v3 = v4 = v0 - _withdraws[varg0];\n    } else {\n        v3 = v5 = 0;\n    }\n    return v3;\n}\n\nfunction changeWallet(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(uint16(_percentages[msg.sender]), 'You are not a member');\n    require(varg0, 'Zero address');\n    v0 = varg0;\n    _percentages[v0] = ~0xffff & _percentages[v0] | uint16(_percentages[msg.sender]);\n    _withdraws[v0] = _withdraws[v0];\n    MEM[0] = msg.sender;\n    _percentages[msg.sender] = ~0xffff & _percentages[msg.sender];\n    _withdraws[v0] = 0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x3ccfd60b == function_selector >> 224) {\n            withdraw();\n        } else if (0x48179ee5 == function_selector >> 224) {\n            withdraws(address);\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x98b9a2dc == function_selector >> 224) {\n            changeWallet(address);\n        } else if (0x9d592c66 == function_selector >> 224) {\n            percentages(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 21:31 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _percentages; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _withdraws; // STORAGE[0x1]\nuint256 _fallback; // STORAGE[0x2]\n\n\nfunction percentages(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return uint16(_percentages[varg0]);\n}\n\nfunction fallback() public payable { \n    _fallback += msg.value;\n}\n\nfunction withdraw() public nonPayable { \n    require(uint16(_percentages[msg.sender]), 'You are not a member');\n    v0 = v1 = uint16(_percentages[msg.sender]) * _fallback / 10000;\n    if (uint16(_percentages[msg.sender]) * _fallback / 10000) {\n        v0 = uint16(_percentages[msg.sender]) * _fallback / 10000 > _withdraws[msg.sender];\n    }\n    require(v0, 'No funds to withdraw');\n    _withdraws[msg.sender] += uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender];\n    v2 = msg.sender.call().value(uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender]).gas(2300 * !(uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender]));\n    require(v2); // checks call status, propagates error data on error\n}\n\nfunction withdraws(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _withdraws[varg0];\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (uint16(_percentages[address(varg0)])) {\n        v0 = v1 = uint16(_percentages[address(varg0)]) * _fallback / 10000;\n    } else {\n        v0 = v2 = 0;\n    }\n    if (v0 > _withdraws[varg0]) {\n        v3 = v4 = v0 - _withdraws[varg0];\n    } else {\n        v3 = v5 = 0;\n    }\n    return v3;\n}\n\nfunction changeWallet(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(uint16(_percentages[msg.sender]), 'You are not a member');\n    require(varg0, 'Zero address');\n    v0 = varg0;\n    _percentages[v0] = ~0xffff & _percentages[v0] | uint16(_percentages[msg.sender]);\n    _withdraws[v0] = _withdraws[v0];\n    MEM[0] = msg.sender;\n    _percentages[msg.sender] = ~0xffff & _percentages[msg.sender];\n    _withdraws[v0] = 0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x3ccfd60b == function_selector >> 224) {\n            withdraw();\n        } else if (0x48179ee5 == function_selector >> 224) {\n            withdraws(address);\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x98b9a2dc == function_selector >> 224) {\n            changeWallet(address);\n        } else if (0x9d592c66 == function_selector >> 224) {\n            percentages(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 21:31 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _percentages; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _withdraws; // STORAGE[0x1]\nuint256 _fallback; // STORAGE[0x2]\n\n\nfunction percentages(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return uint16(_percentages[varg0]);\n}\n\nfunction fallback() public payable { \n    _fallback += msg.value;\n}\n\nfunction withdraw() public nonPayable { \n    require(uint16(_percentages[msg.sender]), 'You are not a member');\n    v0 = v1 = uint16(_percentages[msg.sender]) * _fallback / 10000;\n    if (uint16(_percentages[msg.sender]) * _fallback / 10000) {\n        v0 = uint16(_percentages[msg.sender]) * _fallback / 10000 > _withdraws[msg.sender];\n    }\n    require(v0, 'No funds to withdraw');\n    _withdraws[msg.sender] += uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender];\n    v2 = msg.sender.call().value(uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender]).gas(2300 * !(uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender]));\n    require(v2); // checks call status, propagates error data on error\n}\n\nfunction withdraws(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _withdraws[varg0];\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (uint16(_percentages[address(varg0)])) {\n        v0 = v1 = uint16(_percentages[address(varg0)]) * _fallback / 10000;\n    } else {\n        v0 = v2 = 0;\n    }\n    if (v0 > _withdraws[varg0]) {\n        v3 = v4 = v0 - _withdraws[varg0];\n    } else {\n        v3 = v5 = 0;\n    }\n    return v3;\n}\n\nfunction changeWallet(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(uint16(_percentages[msg.sender]), 'You are not a member');\n    require(varg0, 'Zero address');\n    v0 = varg0;\n    _percentages[v0] = ~0xffff & _percentages[v0] | uint16(_percentages[msg.sender]);\n    _withdraws[v0] = _withdraws[v0];\n    MEM[0] = msg.sender;\n    _percentages[msg.sender] = ~0xffff & _percentages[msg.sender];\n    _withdraws[v0] = 0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x3ccfd60b == function_selector >> 224) {\n            withdraw();\n        } else if (0x48179ee5 == function_selector >> 224) {\n            withdraws(address);\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x98b9a2dc == function_selector >> 224) {\n            changeWallet(address);\n        } else if (0x9d592c66 == function_selector >> 224) {\n            percentages(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 20.229530096054077,
	"usage": {
		"completion_tokens": 553,
		"prompt_tokens": 910,
		"total_tokens": 1463
	}
}