{
	"address": "0x4cfa9c487b533708b8ca10e0ea8adbe4af9aced3",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the provided decompiled code, the equivalent Solidity code could look something like this:\n\n```solidity\npragma solidity >=0.4.22 <0.7.0;\n\ncontract Contract {\n    mapping (address => uint256) public balanceOf;\n    mapping (bytes32 => uint256) public storage1;\n    address public owner;\n    address public admin;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        require(msg.sender == owner);\n        storage1[keccak256(abi.encodePacked(_spender))] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return storage1[keccak256(abi.encodePacked(_spender))];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(storage1[keccak256(abi.encodePacked(_from))] >= _value);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function changeOwner(address _newOwner) public returns (bool success) {\n        require(msg.sender == owner);\n        owner = _newOwner;\n        return true;\n    }\n\n    function changeAdmin(address _newAdmin) public returns (bool success) {\n        require(msg.sender == owner);\n        admin = _newAdmin;\n        return true;\n    }\n\n    function addApprover(address _approver) public returns (bool success) {\n        require(msg.sender == admin);\n        storage1[keccak256(abi.encodePacked(_approver))] = 1;\n        return true;\n    }\n\n    function removeApprover(address _approver) public returns (bool success) {\n        require(msg.sender == admin);\n        storage1[keccak256(abi.encodePacked(_approver))] = 0;\n        return true;\n    }\n}\n```\n\nPlease note that this is a rough approximation of the given decompiled code and may not function as expected. Please verify and test extensively before use.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474786,
	"id": "chatcmpl-8MvScApdsa64JMc9doQJLBBSNCfzi",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] == 0xa6f9dae1) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x03] = memory[0x0140:0x0160];\n            stop();\n        } else if (memory[0x00:0x20] == 0x9dc29fac) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x02;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] != 0x01) { revert(memory[0x00:0x00]); }\n        \n            if (!address(msg.sender).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == msg.sender) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0200:0x0220] = 0xaffed0e0;\n            var temp34;\n            temp34, memory[0x0260:0x0280] = address(msg.sender).staticcall.gas(msg.gas)(memory[0x021c:0x0220]);\n        \n            if (!temp34) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0260:0x0280];\n        \n            if (!address(storage[0x00]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == storage[0x00]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = 0xaffed0e0;\n            var temp35;\n            temp35, memory[0x01e0:0x0200] = address(storage[0x00]).staticcall.gas(msg.gas)(memory[0x019c:0x01a0]);\n        \n            if (!temp35) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x01e0:0x0200] != var0) { revert(memory[0x00:0x00]); }\n        \n            var temp36 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x08;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] < temp36) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x08;\n            var0 = keccak256(memory[0xc0:0x0100]);\n        \n            if (storage[var0] < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n        \n            var temp37 = var0;\n            storage[temp37] = storage[temp37] - memory[0x0160:0x0180];\n            var0 = 0x0a;\n        \n            if (storage[var0] < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n        \n            var temp38 = var0;\n            storage[temp38] = storage[temp38] - memory[0x0160:0x0180];\n            memory[0x0280:0x02a0] = memory[0x0160:0x0180];\n            log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], 0x00]);\n            stop();\n        } else if (memory[0x00:0x20] == 0x40c10f19) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x02;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] != 0x01) { revert(memory[0x00:0x00]); }\n        \n            if (!address(msg.sender).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == msg.sender) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0200:0x0220] = 0xaffed0e0;\n            var temp27;\n            temp27, memory[0x0260:0x0280] = address(msg.sender).staticcall.gas(msg.gas)(memory[0x021c:0x0220]);\n        \n            if (!temp27) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0260:0x0280];\n        \n            if (!address(storage[0x00]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == storage[0x00]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = 0xaffed0e0;\n            var temp28;\n            temp28, memory[0x01e0:0x0200] = address(storage[0x00]).staticcall.gas(msg.gas)(memory[0x019c:0x01a0]);\n        \n            if (!temp28) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x01e0:0x0200] != var0) { revert(memory[0x00:0x00]); }\n        \n            if (!0x2710) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x2710;\n        \n            if (!memory[0x0160:0x0180]) {\n                var1 = 0x00;\n                memory[0x0280:0x02a0] = var1 / var0;\n                memory[0xe0:0x0100] = storage[0x03];\n                memory[0xc0:0xe0] = 0x08;\n                var temp33 = keccak256(memory[0xc0:0x0100]);\n                var0 = temp33;\n            \n                if (storage[var0] + memory[0x0280:0x02a0] >= storage[var0]) { goto label_039E; }\n                else { revert(memory[0x00:0x00]); }\n            } else if ((memory[0x0160:0x0180] * storage[0x07]) / memory[0x0160:0x0180] == storage[0x07]) {\n                memory[0x0280:0x02a0] = (memory[0x0160:0x0180] * storage[0x07]) / var0;\n                memory[0xe0:0x0100] = storage[0x03];\n                memory[0xc0:0xe0] = 0x08;\n                var temp29 = keccak256(memory[0xc0:0x0100]);\n                var0 = temp29;\n            \n                if (storage[var0] + memory[0x0280:0x02a0] < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n            label_039E:\n                var temp30 = var0;\n                storage[temp30] = storage[temp30] + memory[0x0280:0x02a0];\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x08;\n                var0 = keccak256(memory[0xc0:0x0100]);\n                var1 = storage[var0];\n            \n                if (memory[0x0160:0x0180] < memory[0x0280:0x02a0]) { revert(memory[0x00:0x00]); }\n            \n                if (storage[var0] + (memory[0x0160:0x0180] - memory[0x0280:0x02a0]) < var1) { revert(memory[0x00:0x00]); }\n            \n                if (memory[0x0160:0x0180] < memory[0x0280:0x02a0]) { revert(memory[0x00:0x00]); }\n            \n                var temp31 = var0;\n                storage[temp31] = storage[temp31] + (memory[0x0160:0x0180] - memory[0x0280:0x02a0]);\n                var0 = 0x0a;\n            \n                if (storage[var0] + memory[0x0160:0x0180] < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n                var temp32 = var0;\n                storage[temp32] = storage[temp32] + memory[0x0160:0x0180];\n            \n                if (memory[0x0160:0x0180] < memory[0x0280:0x02a0]) { revert(memory[0x00:0x00]); }\n            \n                memory[0x02a0:0x02c0] = memory[0x0160:0x0180] - memory[0x0280:0x02a0];\n                log(memory[0x02a0:0x02c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, memory[0x0140:0x0160]]);\n                memory[0x02c0:0x02e0] = memory[0x0280:0x02a0];\n                log(memory[0x02c0:0x02e0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, storage[0x03]]);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (memory[0x00:0x20] == 0x1197705e) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x00] = memory[0x0140:0x0160];\n            stop();\n        } else if (memory[0x00:0x20] == 0x83c17c55) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x01] = memory[0x0140:0x0160];\n            stop();\n        } else if (memory[0x00:0x20] == 0xa3106b95) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x02;\n            storage[keccak256(memory[0xc0:0x0100])] = 0x01;\n            log(memory[0x00:0x00], [0xa1131a6d1737e5b75661be036b6ebcc8dcd8af884ae66816a8a6548b489e993c, memory[0x0140:0x0160]]);\n            stop();\n        } else if (memory[0x00:0x20] != 0xd05904d2) {\n            if (memory[0x00:0x20] != 0x18160ddd) {\n                if (memory[0x00:0x20] == 0x70a08231) {\n                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x08;\n                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] == 0xa9059cbb) {\n                    memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0180:0x01a0] = msg.sender;\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x08;\n                    var0 = keccak256(memory[0xc0:0x0100]);\n                \n                    if (storage[var0] < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var temp24 = var0;\n                    storage[temp24] = storage[temp24] - memory[0x0160:0x0180];\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x08;\n                    var temp25 = keccak256(memory[0xc0:0x0100]);\n                    var0 = temp25;\n                \n                    if (storage[var0] + memory[0x0160:0x0180] < storage[var0]) { revert(memory[0x00:0x00]); }\n                \n                    var temp26 = var0;\n                    storage[temp26] = storage[temp26] + memory[0x0160:0x0180];\n                    memory[0x01a0:0x01c0] = memory[0x0160:0x0180];\n                    log(memory[0x01a0:0x01c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0180:0x01a0], memory[0x0140:0x0160]]);\n                    memory[0x00:0x20] = 0x01;\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] == 0x23b872dd) {\n                    memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x24:0x44];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x01a0:0x01c0] = msg.sender;\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x08;\n                    var0 = keccak256(memory[0xc0:0x0100]);\n                \n                    if (storage[var0] < memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n                \n                    var temp19 = var0;\n                    storage[temp19] = storage[temp19] - memory[0x0180:0x01a0];\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x08;\n                    var temp20 = keccak256(memory[0xc0:0x0100]);\n                    var0 = temp20;\n                \n                    if (storage[var0] + memory[0x0180:0x01a0] < storage[var0]) { revert(memory[0x00:0x00]); }\n                \n                    var temp21 = var0;\n                    storage[temp21] = storage[temp21] + memory[0x0180:0x01a0];\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x09;\n                    var temp22 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x01a0:0x01c0];\n                    memory[0xc0:0xe0] = temp22;\n                    var0 = keccak256(memory[0xc0:0x0100]);\n                \n                    if (storage[var0] < memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n                \n                    var temp23 = var0;\n                    storage[temp23] = storage[temp23] - memory[0x0180:0x01a0];\n                    memory[0x01c0:0x01e0] = memory[0x0180:0x01a0];\n                    log(memory[0x01c0:0x01e0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n                    memory[0x00:0x20] = 0x01;\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] == 0x095ea7b3) {\n                    memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0180:0x01a0] = msg.sender;\n                    var temp17 = memory[0x0160:0x0180];\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x09;\n                    var temp18 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = temp18;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp17;\n                    memory[0x01a0:0x01c0] = memory[0x0160:0x0180];\n                    log(memory[0x01a0:0x01c0], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, memory[0x0180:0x01a0], memory[0x0140:0x0160]]);\n                    memory[0x00:0x20] = 0x01;\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] == 0xdd62ed3e) {\n                    memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x24:0x44];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x09;\n                    var temp16 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = temp16;\n                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] != 0xba92d382) {\n                    if (memory[0x00:0x20] == 0x0c51069c) {\n                        memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                    \n                        if (msg.value) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = msg.data[0x04:0x24];\n                    \n                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                        memory[0xc0:0xe0] = 0x02;\n                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                        return memory[0x00:0x20];\n                    } else if (memory[0x00:0x20] != 0x8da5cb5b) {\n                        if (memory[0x00:0x20] != 0x06fdde03) {\n                            if (memory[0x00:0x20] != 0x95d89b41) {\n                                if (memory[0x00:0x20] != 0x313ce567) {\n                                    if (memory[0x00:0x20] != 0xe1489191) {\n                                        if (memory[0x00:0x20] != 0x27e235e3) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                    \n                                        if (msg.value) { revert(memory[0x00:0x00]); }\n                                    \n                                        var var0 = msg.data[0x04:0x24];\n                                    \n                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                        memory[0xc0:0xe0] = 0x08;\n                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                        return memory[0x00:0x20];\n                                    } else if (!msg.value) {\n                                        memory[0x00:0x20] = storage[0x07];\n                                        return memory[0x00:0x20];\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    memory[0x00:0x20] = storage[0x06];\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var0 = 0x05;\n                                memory[0xc0:0xe0] = var0;\n                                var var1 = keccak256(memory[0xc0:0xe0]);\n                                var var2 = 0x0180;\n                                var temp0 = storage[var1] + 0x20;\n                                var var3 = temp0;\n                                var var4 = 0x0120;\n                                memory[var4:var4 + 0x20] = 0x00;\n                                var var5 = 0x02;\n                            \n                                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0B70; }\n                            \n                            label_0B74:\n                                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                var temp1 = var4;\n                                var temp2 = memory[temp1:temp1 + 0x20] + 0x01;\n                                memory[temp1:temp1 + 0x20] = temp2;\n                            \n                                if (var5 == temp2) { goto label_0B96; }\n                            \n                                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0B74; }\n                            \n                            label_0B70:\n                            \n                            label_0B96:\n                                var temp3 = memory[0x0180:0x01a0];\n                                var0 = (temp3 + 0x1f) - temp3 - 0x01 % 0x20;\n                                var1 = 0x01e0;\n                                var temp4 = memory[0x0180:0x01a0];\n                                memory[var1:var1 + 0x20] = temp4;\n                                var2 = temp4 + 0x03;\n                            \n                                if (memory[0x01e0:0x0200] > var0) { goto label_0BC8; }\n                            \n                            label_0BCC:\n                                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                                var temp5 = var1;\n                                var temp6 = memory[temp5:temp5 + 0x20] + 0x01;\n                                memory[temp5:temp5 + 0x20] = temp6;\n                            \n                                if (var2 == temp6) { goto label_0BE8; }\n                            \n                                if (memory[0x01e0:0x0200] <= var0) { goto label_0BCC; }\n                            \n                            label_0BC8:\n                            \n                            label_0BE8:\n                                memory[0x0160:0x0180] = 0x20;\n                                var temp7 = memory[0x0180:0x01a0] + 0x40;\n                                return memory[0x0160:0x0160 + (temp7 + 0x1f) - temp7 - 0x01 % 0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            var0 = 0x04;\n                            memory[0xc0:0xe0] = var0;\n                            var1 = keccak256(memory[0xc0:0xe0]);\n                            var2 = 0x0180;\n                            var temp8 = storage[var1] + 0x20;\n                            var3 = temp8;\n                            var4 = 0x0120;\n                            memory[var4:var4 + 0x20] = 0x00;\n                            var5 = 0x02;\n                        \n                            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0A8D; }\n                        \n                        label_0A91:\n                            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                            var temp9 = var4;\n                            var temp10 = memory[temp9:temp9 + 0x20] + 0x01;\n                            memory[temp9:temp9 + 0x20] = temp10;\n                        \n                            if (var5 == temp10) { goto label_0AB3; }\n                        \n                            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0A91; }\n                        \n                        label_0A8D:\n                        \n                        label_0AB3:\n                            var temp11 = memory[0x0180:0x01a0];\n                            var0 = (temp11 + 0x1f) - temp11 - 0x01 % 0x20;\n                            var1 = 0x01e0;\n                            var temp12 = memory[0x0180:0x01a0];\n                            memory[var1:var1 + 0x20] = temp12;\n                            var2 = temp12 + 0x0c;\n                        \n                            if (memory[0x01e0:0x0200] > var0) { goto label_0AE5; }\n                        \n                        label_0AE9:\n                            memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                            var temp13 = var1;\n                            var temp14 = memory[temp13:temp13 + 0x20] + 0x01;\n                            memory[temp13:temp13 + 0x20] = temp14;\n                        \n                            if (var2 == temp14) { goto label_0B05; }\n                        \n                            if (memory[0x01e0:0x0200] <= var0) { goto label_0AE9; }\n                        \n                        label_0AE5:\n                        \n                        label_0B05:\n                            memory[0x0160:0x0180] = 0x20;\n                            var temp15 = memory[0x0180:0x01a0] + 0x40;\n                            return memory[0x0160:0x0160 + (temp15 + 0x1f) - temp15 - 0x01 % 0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        memory[0x00:0x20] = storage[0x03];\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    memory[0x00:0x20] = storage[0x01];\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                memory[0x00:0x20] = storage[0x0a];\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x02;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] != 0x01) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x02;\n            storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n            log(memory[0x00:0x00], [0xeabc82b10cf73dc9028609590ea5be3182367dd66d7fcf45816d9d302502b4a7, msg.sender]);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] == 0xa6f9dae1) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x03] = memory[0x0140:0x0160];\n            stop();\n        } else if (memory[0x00:0x20] == 0x9dc29fac) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x02;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] != 0x01) { revert(memory[0x00:0x00]); }\n        \n            if (!address(msg.sender).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == msg.sender) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0200:0x0220] = 0xaffed0e0;\n            var temp34;\n            temp34, memory[0x0260:0x0280] = address(msg.sender).staticcall.gas(msg.gas)(memory[0x021c:0x0220]);\n        \n            if (!temp34) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0260:0x0280];\n        \n            if (!address(storage[0x00]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == storage[0x00]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = 0xaffed0e0;\n            var temp35;\n            temp35, memory[0x01e0:0x0200] = address(storage[0x00]).staticcall.gas(msg.gas)(memory[0x019c:0x01a0]);\n        \n            if (!temp35) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x01e0:0x0200] != var0) { revert(memory[0x00:0x00]); }\n        \n            var temp36 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x08;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] < temp36) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x08;\n            var0 = keccak256(memory[0xc0:0x0100]);\n        \n            if (storage[var0] < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n        \n            var temp37 = var0;\n            storage[temp37] = storage[temp37] - memory[0x0160:0x0180];\n            var0 = 0x0a;\n        \n            if (storage[var0] < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n        \n            var temp38 = var0;\n            storage[temp38] = storage[temp38] - memory[0x0160:0x0180];\n            memory[0x0280:0x02a0] = memory[0x0160:0x0180];\n            log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], 0x00]);\n            stop();\n        } else if (memory[0x00:0x20] == 0x40c10f19) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x02;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] != 0x01) { revert(memory[0x00:0x00]); }\n        \n            if (!address(msg.sender).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == msg.sender) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0200:0x0220] = 0xaffed0e0;\n            var temp27;\n            temp27, memory[0x0260:0x0280] = address(msg.sender).staticcall.gas(msg.gas)(memory[0x021c:0x0220]);\n        \n            if (!temp27) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0260:0x0280];\n        \n            if (!address(storage[0x00]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == storage[0x00]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = 0xaffed0e0;\n            var temp28;\n            temp28, memory[0x01e0:0x0200] = address(storage[0x00]).staticcall.gas(msg.gas)(memory[0x019c:0x01a0]);\n        \n            if (!temp28) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x01e0:0x0200] != var0) { revert(memory[0x00:0x00]); }\n        \n            if (!0x2710) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x2710;\n        \n            if (!memory[0x0160:0x0180]) {\n                var1 = 0x00;\n                memory[0x0280:0x02a0] = var1 / var0;\n                memory[0xe0:0x0100] = storage[0x03];\n                memory[0xc0:0xe0] = 0x08;\n                var temp33 = keccak256(memory[0xc0:0x0100]);\n                var0 = temp33;\n            \n                if (storage[var0] + memory[0x0280:0x02a0] >= storage[var0]) { goto label_039E; }\n                else { revert(memory[0x00:0x00]); }\n            } else if ((memory[0x0160:0x0180] * storage[0x07]) / memory[0x0160:0x0180] == storage[0x07]) {\n                memory[0x0280:0x02a0] = (memory[0x0160:0x0180] * storage[0x07]) / var0;\n                memory[0xe0:0x0100] = storage[0x03];\n                memory[0xc0:0xe0] = 0x08;\n                var temp29 = keccak256(memory[0xc0:0x0100]);\n                var0 = temp29;\n            \n                if (storage[var0] + memory[0x0280:0x02a0] < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n            label_039E:\n                var temp30 = var0;\n                storage[temp30] = storage[temp30] + memory[0x0280:0x02a0];\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x08;\n                var0 = keccak256(memory[0xc0:0x0100]);\n                var1 = storage[var0];\n            \n                if (memory[0x0160:0x0180] < memory[0x0280:0x02a0]) { revert(memory[0x00:0x00]); }\n            \n                if (storage[var0] + (memory[0x0160:0x0180] - memory[0x0280:0x02a0]) < var1) { revert(memory[0x00:0x00]); }\n            \n                if (memory[0x0160:0x0180] < memory[0x0280:0x02a0]) { revert(memory[0x00:0x00]); }\n            \n                var temp31 = var0;\n                storage[temp31] = storage[temp31] + (memory[0x0160:0x0180] - memory[0x0280:0x02a0]);\n                var0 = 0x0a;\n            \n                if (storage[var0] + memory[0x0160:0x0180] < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n                var temp32 = var0;\n                storage[temp32] = storage[temp32] + memory[0x0160:0x0180];\n            \n                if (memory[0x0160:0x0180] < memory[0x0280:0x02a0]) { revert(memory[0x00:0x00]); }\n            \n                memory[0x02a0:0x02c0] = memory[0x0160:0x0180] - memory[0x0280:0x02a0];\n                log(memory[0x02a0:0x02c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, memory[0x0140:0x0160]]);\n                memory[0x02c0:0x02e0] = memory[0x0280:0x02a0];\n                log(memory[0x02c0:0x02e0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, storage[0x03]]);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (memory[0x00:0x20] == 0x1197705e) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x00] = memory[0x0140:0x0160];\n            stop();\n        } else if (memory[0x00:0x20] == 0x83c17c55) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x01] = memory[0x0140:0x0160];\n            stop();\n        } else if (memory[0x00:0x20] == 0xa3106b95) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x02;\n            storage[keccak256(memory[0xc0:0x0100])] = 0x01;\n            log(memory[0x00:0x00], [0xa1131a6d1737e5b75661be036b6ebcc8dcd8af884ae66816a8a6548b489e993c, memory[0x0140:0x0160]]);\n            stop();\n        } else if (memory[0x00:0x20] != 0xd05904d2) {\n            if (memory[0x00:0x20] != 0x18160ddd) {\n                if (memory[0x00:0x20] == 0x70a08231) {\n                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x08;\n                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] == 0xa9059cbb) {\n                    memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0180:0x01a0] = msg.sender;\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x08;\n                    var0 = keccak256(memory[0xc0:0x0100]);\n                \n                    if (storage[var0] < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var temp24 = var0;\n                    storage[temp24] = storage[temp24] - memory[0x0160:0x0180];\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x08;\n                    var temp25 = keccak256(memory[0xc0:0x0100]);\n                    var0 = temp25;\n                \n                    if (storage[var0] + memory[0x0160:0x0180] < storage[var0]) { revert(memory[0x00:0x00]); }\n                \n                    var temp26 = var0;\n                    storage[temp26] = storage[temp26] + memory[0x0160:0x0180];\n                    memory[0x01a0:0x01c0] = memory[0x0160:0x0180];\n                    log(memory[0x01a0:0x01c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0180:0x01a0], memory[0x0140:0x0160]]);\n                    memory[0x00:0x20] = 0x01;\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] == 0x23b872dd) {\n                    memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x24:0x44];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x01a0:0x01c0] = msg.sender;\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x08;\n                    var0 = keccak256(memory[0xc0:0x0100]);\n                \n                    if (storage[var0] < memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n                \n                    var temp19 = var0;\n                    storage[temp19] = storage[temp19] - memory[0x0180:0x01a0];\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x08;\n                    var temp20 = keccak256(memory[0xc0:0x0100]);\n                    var0 = temp20;\n                \n                    if (storage[var0] + memory[0x0180:0x01a0] < storage[var0]) { revert(memory[0x00:0x00]); }\n                \n                    var temp21 = var0;\n                    storage[temp21] = storage[temp21] + memory[0x0180:0x01a0];\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x09;\n                    var temp22 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x01a0:0x01c0];\n                    memory[0xc0:0xe0] = temp22;\n                    var0 = keccak256(memory[0xc0:0x0100]);\n                \n                    if (storage[var0] < memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n                \n                    var temp23 = var0;\n                    storage[temp23] = storage[temp23] - memory[0x0180:0x01a0];\n                    memory[0x01c0:0x01e0] = memory[0x0180:0x01a0];\n                    log(memory[0x01c0:0x01e0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n                    memory[0x00:0x20] = 0x01;\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] == 0x095ea7b3) {\n                    memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0180:0x01a0] = msg.sender;\n                    var temp17 = memory[0x0160:0x0180];\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x09;\n                    var temp18 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = temp18;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp17;\n                    memory[0x01a0:0x01c0] = memory[0x0160:0x0180];\n                    log(memory[0x01a0:0x01c0], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, memory[0x0180:0x01a0], memory[0x0140:0x0160]]);\n                    memory[0x00:0x20] = 0x01;\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] == 0xdd62ed3e) {\n                    memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x24:0x44];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x09;\n                    var temp16 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = temp16;\n                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] != 0xba92d382) {\n                    if (memory[0x00:0x20] == 0x0c51069c) {\n                        memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                    \n                        if (msg.value) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = msg.data[0x04:0x24];\n                    \n                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                        memory[0xc0:0xe0] = 0x02;\n                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                        return memory[0x00:0x20];\n                    } else if (memory[0x00:0x20] != 0x8da5cb5b) {\n                        if (memory[0x00:0x20] != 0x06fdde03) {\n                            if (memory[0x00:0x20] != 0x95d89b41) {\n                                if (memory[0x00:0x20] != 0x313ce567) {\n                                    if (memory[0x00:0x20] != 0xe1489191) {\n                                        if (memory[0x00:0x20] != 0x27e235e3) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                    \n                                        if (msg.value) { revert(memory[0x00:0x00]); }\n                                    \n                                        var var0 = msg.data[0x04:0x24];\n                                    \n                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                        memory[0xc0:0xe0] = 0x08;\n                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                        return memory[0x00:0x20];\n                                    } else if (!msg.value) {\n                                        memory[0x00:0x20] = storage[0x07];\n                                        return memory[0x00:0x20];\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    memory[0x00:0x20] = storage[0x06];\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var0 = 0x05;\n                                memory[0xc0:0xe0] = var0;\n                                var var1 = keccak256(memory[0xc0:0xe0]);\n                                var var2 = 0x0180;\n                                var temp0 = storage[var1] + 0x20;\n                                var var3 = temp0;\n                                var var4 = 0x0120;\n                                memory[var4:var4 + 0x20] = 0x00;\n                                var var5 = 0x02;\n                            \n                                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0B70; }\n                            \n                            label_0B74:\n                                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                var temp1 = var4;\n                                var temp2 = memory[temp1:temp1 + 0x20] + 0x01;\n                                memory[temp1:temp1 + 0x20] = temp2;\n                            \n                                if (var5 == temp2) { goto label_0B96; }\n                            \n                                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0B74; }\n                            \n                            label_0B70:\n                            \n                            label_0B96:\n                                var temp3 = memory[0x0180:0x01a0];\n                                var0 = (temp3 + 0x1f) - temp3 - 0x01 % 0x20;\n                                var1 = 0x01e0;\n                                var temp4 = memory[0x0180:0x01a0];\n                                memory[var1:var1 + 0x20] = temp4;\n                                var2 = temp4 + 0x03;\n                            \n                                if (memory[0x01e0:0x0200] > var0) { goto label_0BC8; }\n                            \n                            label_0BCC:\n                                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                                var temp5 = var1;\n                                var temp6 = memory[temp5:temp5 + 0x20] + 0x01;\n                                memory[temp5:temp5 + 0x20] = temp6;\n                            \n                                if (var2 == temp6) { goto label_0BE8; }\n                            \n                                if (memory[0x01e0:0x0200] <= var0) { goto label_0BCC; }\n                            \n                            label_0BC8:\n                            \n                            label_0BE8:\n                                memory[0x0160:0x0180] = 0x20;\n                                var temp7 = memory[0x0180:0x01a0] + 0x40;\n                                return memory[0x0160:0x0160 + (temp7 + 0x1f) - temp7 - 0x01 % 0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            var0 = 0x04;\n                            memory[0xc0:0xe0] = var0;\n                            var1 = keccak256(memory[0xc0:0xe0]);\n                            var2 = 0x0180;\n                            var temp8 = storage[var1] + 0x20;\n                            var3 = temp8;\n                            var4 = 0x0120;\n                            memory[var4:var4 + 0x20] = 0x00;\n                            var5 = 0x02;\n                        \n                            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0A8D; }\n                        \n                        label_0A91:\n                            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                            var temp9 = var4;\n                            var temp10 = memory[temp9:temp9 + 0x20] + 0x01;\n                            memory[temp9:temp9 + 0x20] = temp10;\n                        \n                            if (var5 == temp10) { goto label_0AB3; }\n                        \n                            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0A91; }\n                        \n                        label_0A8D:\n                        \n                        label_0AB3:\n                            var temp11 = memory[0x0180:0x01a0];\n                            var0 = (temp11 + 0x1f) - temp11 - 0x01 % 0x20;\n                            var1 = 0x01e0;\n                            var temp12 = memory[0x0180:0x01a0];\n                            memory[var1:var1 + 0x20] = temp12;\n                            var2 = temp12 + 0x0c;\n                        \n                            if (memory[0x01e0:0x0200] > var0) { goto label_0AE5; }\n                        \n                        label_0AE9:\n                            memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                            var temp13 = var1;\n                            var temp14 = memory[temp13:temp13 + 0x20] + 0x01;\n                            memory[temp13:temp13 + 0x20] = temp14;\n                        \n                            if (var2 == temp14) { goto label_0B05; }\n                        \n                            if (memory[0x01e0:0x0200] <= var0) { goto label_0AE9; }\n                        \n                        label_0AE5:\n                        \n                        label_0B05:\n                            memory[0x0160:0x0180] = 0x20;\n                            var temp15 = memory[0x0180:0x01a0] + 0x40;\n                            return memory[0x0160:0x0160 + (temp15 + 0x1f) - temp15 - 0x01 % 0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        memory[0x00:0x20] = storage[0x03];\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    memory[0x00:0x20] = storage[0x01];\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                memory[0x00:0x20] = storage[0x0a];\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x02;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] != 0x01) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x02;\n            storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n            log(memory[0x00:0x00], [0xeabc82b10cf73dc9028609590ea5be3182367dd66d7fcf45816d9d302502b4a7, msg.sender]);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] == 0xa6f9dae1) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x03] = memory[0x0140:0x0160];\n            stop();\n        } else if (memory[0x00:0x20] == 0x9dc29fac) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x02;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] != 0x01) { revert(memory[0x00:0x00]); }\n        \n            if (!address(msg.sender).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == msg.sender) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0200:0x0220] = 0xaffed0e0;\n            var temp34;\n            temp34, memory[0x0260:0x0280] = address(msg.sender).staticcall.gas(msg.gas)(memory[0x021c:0x0220]);\n        \n            if (!temp34) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0260:0x0280];\n        \n            if (!address(storage[0x00]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == storage[0x00]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = 0xaffed0e0;\n            var temp35;\n            temp35, memory[0x01e0:0x0200] = address(storage[0x00]).staticcall.gas(msg.gas)(memory[0x019c:0x01a0]);\n        \n            if (!temp35) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x01e0:0x0200] != var0) { revert(memory[0x00:0x00]); }\n        \n            var temp36 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x08;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] < temp36) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x08;\n            var0 = keccak256(memory[0xc0:0x0100]);\n        \n            if (storage[var0] < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n        \n            var temp37 = var0;\n            storage[temp37] = storage[temp37] - memory[0x0160:0x0180];\n            var0 = 0x0a;\n        \n            if (storage[var0] < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n        \n            var temp38 = var0;\n            storage[temp38] = storage[temp38] - memory[0x0160:0x0180];\n            memory[0x0280:0x02a0] = memory[0x0160:0x0180];\n            log(memory[0x0280:0x02a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], 0x00]);\n            stop();\n        } else if (memory[0x00:0x20] == 0x40c10f19) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x02;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] != 0x01) { revert(memory[0x00:0x00]); }\n        \n            if (!address(msg.sender).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == msg.sender) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0200:0x0220] = 0xaffed0e0;\n            var temp27;\n            temp27, memory[0x0260:0x0280] = address(msg.sender).staticcall.gas(msg.gas)(memory[0x021c:0x0220]);\n        \n            if (!temp27) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0260:0x0280];\n        \n            if (!address(storage[0x00]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == storage[0x00]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = 0xaffed0e0;\n            var temp28;\n            temp28, memory[0x01e0:0x0200] = address(storage[0x00]).staticcall.gas(msg.gas)(memory[0x019c:0x01a0]);\n        \n            if (!temp28) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x01e0:0x0200] != var0) { revert(memory[0x00:0x00]); }\n        \n            if (!0x2710) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x2710;\n        \n            if (!memory[0x0160:0x0180]) {\n                var1 = 0x00;\n                memory[0x0280:0x02a0] = var1 / var0;\n                memory[0xe0:0x0100] = storage[0x03];\n                memory[0xc0:0xe0] = 0x08;\n                var temp33 = keccak256(memory[0xc0:0x0100]);\n                var0 = temp33;\n            \n                if (storage[var0] + memory[0x0280:0x02a0] >= storage[var0]) { goto label_039E; }\n                else { revert(memory[0x00:0x00]); }\n            } else if ((memory[0x0160:0x0180] * storage[0x07]) / memory[0x0160:0x0180] == storage[0x07]) {\n                memory[0x0280:0x02a0] = (memory[0x0160:0x0180] * storage[0x07]) / var0;\n                memory[0xe0:0x0100] = storage[0x03];\n                memory[0xc0:0xe0] = 0x08;\n                var temp29 = keccak256(memory[0xc0:0x0100]);\n                var0 = temp29;\n            \n                if (storage[var0] + memory[0x0280:0x02a0] < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n            label_039E:\n                var temp30 = var0;\n                storage[temp30] = storage[temp30] + memory[0x0280:0x02a0];\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x08;\n                var0 = keccak256(memory[0xc0:0x0100]);\n                var1 = storage[var0];\n            \n                if (memory[0x0160:0x0180] < memory[0x0280:0x02a0]) { revert(memory[0x00:0x00]); }\n            \n                if (storage[var0] + (memory[0x0160:0x0180] - memory[0x0280:0x02a0]) < var1) { revert(memory[0x00:0x00]); }\n            \n                if (memory[0x0160:0x0180] < memory[0x0280:0x02a0]) { revert(memory[0x00:0x00]); }\n            \n                var temp31 = var0;\n                storage[temp31] = storage[temp31] + (memory[0x0160:0x0180] - memory[0x0280:0x02a0]);\n                var0 = 0x0a;\n            \n                if (storage[var0] + memory[0x0160:0x0180] < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n                var temp32 = var0;\n                storage[temp32] = storage[temp32] + memory[0x0160:0x0180];\n            \n                if (memory[0x0160:0x0180] < memory[0x0280:0x02a0]) { revert(memory[0x00:0x00]); }\n            \n                memory[0x02a0:0x02c0] = memory[0x0160:0x0180] - memory[0x0280:0x02a0];\n                log(memory[0x02a0:0x02c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, memory[0x0140:0x0160]]);\n                memory[0x02c0:0x02e0] = memory[0x0280:0x02a0];\n                log(memory[0x02c0:0x02e0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, storage[0x03]]);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (memory[0x00:0x20] == 0x1197705e) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x00] = memory[0x0140:0x0160];\n            stop();\n        } else if (memory[0x00:0x20] == 0x83c17c55) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x01] = memory[0x0140:0x0160];\n            stop();\n        } else if (memory[0x00:0x20] == 0xa3106b95) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x02;\n            storage[keccak256(memory[0xc0:0x0100])] = 0x01;\n            log(memory[0x00:0x00], [0xa1131a6d1737e5b75661be036b6ebcc8dcd8af884ae66816a8a6548b489e993c, memory[0x0140:0x0160]]);\n            stop();\n        } else if (memory[0x00:0x20] != 0xd05904d2) {\n            if (memory[0x00:0x20] != 0x18160ddd) {\n                if (memory[0x00:0x20] == 0x70a08231) {\n                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x08;\n                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] == 0xa9059cbb) {\n                    memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0180:0x01a0] = msg.sender;\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x08;\n                    var0 = keccak256(memory[0xc0:0x0100]);\n                \n                    if (storage[var0] < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var temp24 = var0;\n                    storage[temp24] = storage[temp24] - memory[0x0160:0x0180];\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x08;\n                    var temp25 = keccak256(memory[0xc0:0x0100]);\n                    var0 = temp25;\n                \n                    if (storage[var0] + memory[0x0160:0x0180] < storage[var0]) { revert(memory[0x00:0x00]); }\n                \n                    var temp26 = var0;\n                    storage[temp26] = storage[temp26] + memory[0x0160:0x0180];\n                    memory[0x01a0:0x01c0] = memory[0x0160:0x0180];\n                    log(memory[0x01a0:0x01c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0180:0x01a0], memory[0x0140:0x0160]]);\n                    memory[0x00:0x20] = 0x01;\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] == 0x23b872dd) {\n                    memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x24:0x44];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x01a0:0x01c0] = msg.sender;\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x08;\n                    var0 = keccak256(memory[0xc0:0x0100]);\n                \n                    if (storage[var0] < memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n                \n                    var temp19 = var0;\n                    storage[temp19] = storage[temp19] - memory[0x0180:0x01a0];\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x08;\n                    var temp20 = keccak256(memory[0xc0:0x0100]);\n                    var0 = temp20;\n                \n                    if (storage[var0] + memory[0x0180:0x01a0] < storage[var0]) { revert(memory[0x00:0x00]); }\n                \n                    var temp21 = var0;\n                    storage[temp21] = storage[temp21] + memory[0x0180:0x01a0];\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x09;\n                    var temp22 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x01a0:0x01c0];\n                    memory[0xc0:0xe0] = temp22;\n                    var0 = keccak256(memory[0xc0:0x0100]);\n                \n                    if (storage[var0] < memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n                \n                    var temp23 = var0;\n                    storage[temp23] = storage[temp23] - memory[0x0180:0x01a0];\n                    memory[0x01c0:0x01e0] = memory[0x0180:0x01a0];\n                    log(memory[0x01c0:0x01e0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n                    memory[0x00:0x20] = 0x01;\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] == 0x095ea7b3) {\n                    memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0180:0x01a0] = msg.sender;\n                    var temp17 = memory[0x0160:0x0180];\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x09;\n                    var temp18 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = temp18;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp17;\n                    memory[0x01a0:0x01c0] = memory[0x0160:0x0180];\n                    log(memory[0x01a0:0x01c0], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, memory[0x0180:0x01a0], memory[0x0140:0x0160]]);\n                    memory[0x00:0x20] = 0x01;\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] == 0xdd62ed3e) {\n                    memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x24:0x44];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x09;\n                    var temp16 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = temp16;\n                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] != 0xba92d382) {\n                    if (memory[0x00:0x20] == 0x0c51069c) {\n                        memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                    \n                        if (msg.value) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = msg.data[0x04:0x24];\n                    \n                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                        memory[0xc0:0xe0] = 0x02;\n                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                        return memory[0x00:0x20];\n                    } else if (memory[0x00:0x20] != 0x8da5cb5b) {\n                        if (memory[0x00:0x20] != 0x06fdde03) {\n                            if (memory[0x00:0x20] != 0x95d89b41) {\n                                if (memory[0x00:0x20] != 0x313ce567) {\n                                    if (memory[0x00:0x20] != 0xe1489191) {\n                                        if (memory[0x00:0x20] != 0x27e235e3) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                    \n                                        if (msg.value) { revert(memory[0x00:0x00]); }\n                                    \n                                        var var0 = msg.data[0x04:0x24];\n                                    \n                                        if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                    \n                                        memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                        memory[0xc0:0xe0] = 0x08;\n                                        memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                        return memory[0x00:0x20];\n                                    } else if (!msg.value) {\n                                        memory[0x00:0x20] = storage[0x07];\n                                        return memory[0x00:0x20];\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    memory[0x00:0x20] = storage[0x06];\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var0 = 0x05;\n                                memory[0xc0:0xe0] = var0;\n                                var var1 = keccak256(memory[0xc0:0xe0]);\n                                var var2 = 0x0180;\n                                var temp0 = storage[var1] + 0x20;\n                                var var3 = temp0;\n                                var var4 = 0x0120;\n                                memory[var4:var4 + 0x20] = 0x00;\n                                var var5 = 0x02;\n                            \n                                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0B70; }\n                            \n                            label_0B74:\n                                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                var temp1 = var4;\n                                var temp2 = memory[temp1:temp1 + 0x20] + 0x01;\n                                memory[temp1:temp1 + 0x20] = temp2;\n                            \n                                if (var5 == temp2) { goto label_0B96; }\n                            \n                                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0B74; }\n                            \n                            label_0B70:\n                            \n                            label_0B96:\n                                var temp3 = memory[0x0180:0x01a0];\n                                var0 = (temp3 + 0x1f) - temp3 - 0x01 % 0x20;\n                                var1 = 0x01e0;\n                                var temp4 = memory[0x0180:0x01a0];\n                                memory[var1:var1 + 0x20] = temp4;\n                                var2 = temp4 + 0x03;\n                            \n                                if (memory[0x01e0:0x0200] > var0) { goto label_0BC8; }\n                            \n                            label_0BCC:\n                                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                                var temp5 = var1;\n                                var temp6 = memory[temp5:temp5 + 0x20] + 0x01;\n                                memory[temp5:temp5 + 0x20] = temp6;\n                            \n                                if (var2 == temp6) { goto label_0BE8; }\n                            \n                                if (memory[0x01e0:0x0200] <= var0) { goto label_0BCC; }\n                            \n                            label_0BC8:\n                            \n                            label_0BE8:\n                                memory[0x0160:0x0180] = 0x20;\n                                var temp7 = memory[0x0180:0x01a0] + 0x40;\n                                return memory[0x0160:0x0160 + (temp7 + 0x1f) - temp7 - 0x01 % 0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            var0 = 0x04;\n                            memory[0xc0:0xe0] = var0;\n                            var1 = keccak256(memory[0xc0:0xe0]);\n                            var2 = 0x0180;\n                            var temp8 = storage[var1] + 0x20;\n                            var3 = temp8;\n                            var4 = 0x0120;\n                            memory[var4:var4 + 0x20] = 0x00;\n                            var5 = 0x02;\n                        \n                            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0A8D; }\n                        \n                        label_0A91:\n                            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                            var temp9 = var4;\n                            var temp10 = memory[temp9:temp9 + 0x20] + 0x01;\n                            memory[temp9:temp9 + 0x20] = temp10;\n                        \n                            if (var5 == temp10) { goto label_0AB3; }\n                        \n                            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0A91; }\n                        \n                        label_0A8D:\n                        \n                        label_0AB3:\n                            var temp11 = memory[0x0180:0x01a0];\n                            var0 = (temp11 + 0x1f) - temp11 - 0x01 % 0x20;\n                            var1 = 0x01e0;\n                            var temp12 = memory[0x0180:0x01a0];\n                            memory[var1:var1 + 0x20] = temp12;\n                            var2 = temp12 + 0x0c;\n                        \n                            if (memory[0x01e0:0x0200] > var0) { goto label_0AE5; }\n                        \n                        label_0AE9:\n                            memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                            var temp13 = var1;\n                            var temp14 = memory[temp13:temp13 + 0x20] + 0x01;\n                            memory[temp13:temp13 + 0x20] = temp14;\n                        \n                            if (var2 == temp14) { goto label_0B05; }\n                        \n                            if (memory[0x01e0:0x0200] <= var0) { goto label_0AE9; }\n                        \n                        label_0AE5:\n                        \n                        label_0B05:\n                            memory[0x0160:0x0180] = 0x20;\n                            var temp15 = memory[0x0180:0x01a0] + 0x40;\n                            return memory[0x0160:0x0160 + (temp15 + 0x1f) - temp15 - 0x01 % 0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        memory[0x00:0x20] = storage[0x03];\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    memory[0x00:0x20] = storage[0x01];\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                memory[0x00:0x20] = storage[0x0a];\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x02;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] != 0x01) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x02;\n            storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n            log(memory[0x00:0x00], [0xeabc82b10cf73dc9028609590ea5be3182367dd66d7fcf45816d9d302502b4a7, msg.sender]);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 43.6143753528595,
	"usage": {
		"completion_tokens": 575,
		"prompt_tokens": 8346,
		"total_tokens": 8921
	}
}