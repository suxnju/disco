{
	"address": "0xcc89405e3cfd38412093840a3ac2f851dd395dfb",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity recompilation of the code:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Contract {\n    mapping(address => uint256) private balances;\n    mapping(address => uint256) private deposits;\n    uint256 private bounty;\n    address private token;\n    uint256 private sale;\n    bool private boughtTokens;\n    uint256 private dynamic;\n    uint256 private data;\n\n    function withdraw() public {\n        require(balances[msg.sender] > 0);\n        uint256 amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n        msg.sender.transfer(amount);\n    }\n\n    function add_to_bounty() public payable {\n        bounty += msg.value;\n    }\n\n    function bought_tokens() public view returns (bool) {\n        return boughtTokens;\n    }\n\n    function sale() public view returns (uint256) {\n        return sale;\n    }\n\n    function bounty() public view returns (uint256) {\n        return bounty;\n    }\n\n    function simulate_ico() public {\n        data = 1;\n    }\n\n    function buy() public payable {\n        require(data == 0);\n        balances[msg.sender] += msg.value;\n        data = 1;\n    }\n\n    function simulated_snt(address _address) public view returns (uint256) {\n        return balances[_address];\n    }\n\n    function token() public view returns (address) {\n        return token;\n    }\n\n    function deposits(address _address) public view returns (uint256) {\n        return deposits[_address];\n    }\n}\n```\n\nNote that the recompiled Solidity code is an approximation of the original code. The original code includes low-level operations and explicit memory management, which are not typical in high-level Solidity code. For example, the original code involves explicit manipulation of memory locations and bitwise operations, which have been abstracted away in the recompiled Solidity code.\n\nThe code also assumes that the contract has a payable fallback function, which is not shown in the original code, but would be necessary for the contract to receive Ether.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472241,
	"id": "chatcmpl-8MunZhckfZVuuo4g09JZcbMZmZvNs",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_009E:\n            var var0 = 0x00ce;\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[0x03] / 0x0100 & temp0 != temp0 & msg.sender) {\n                var var1 = 0x00cb;\n                default_helper();\n                // Error: Could not resolve jump destination!\n            } else {\n                func_00BF();\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00ce;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4bd54f04) {\n                // Dispatch table entry for dynamic()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00f2;\n                var var2 = dynamic();\n            \n            label_00F2:\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp2 = memory[0x40:0x60];\n                return memory[temp2:temp2 + temp1 - temp2 + 0x20];\n            } else if (var0 == 0x5259347d) {\n                // Dispatch table entry for default_helper()\n                var1 = 0x00ce;\n                default_helper();\n                stop();\n            } else if (var0 == 0x62f5ed61) {\n                // Dispatch table entry for add_to_bounty()\n                var1 = 0x00ce;\n                add_to_bounty();\n                stop();\n            } else if (var0 == 0x6360fc3f) {\n                // Dispatch table entry for bought_tokens()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0132;\n                var2 = bought_tokens();\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = !!var2;\n                var temp4 = memory[0x40:0x60];\n                return memory[temp4:temp4 + temp3 - temp4 + 0x20];\n            } else if (var0 == 0x6ad1fe02) {\n                // Dispatch table entry for sale()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00f2;\n                var2 = sale();\n                goto label_00F2;\n            } else if (var0 == 0x943dfef1) {\n                // Dispatch table entry for bounty()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0182;\n                var2 = bounty();\n            \n            label_0182:\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var2;\n                var temp6 = memory[0x40:0x60];\n                return memory[temp6:temp6 + temp5 - temp6 + 0x20];\n            } else if (var0 == 0x97227325) {\n                // Dispatch table entry for simulate_ico()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00ce;\n                simulate_ico();\n                stop();\n            } else if (var0 == 0xa6f2ae3a) {\n                // Dispatch table entry for buy()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00ce;\n                buy();\n                stop();\n            } else if (var0 == 0xadcaea0a) {\n                // Dispatch table entry for simulated_snt(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0182;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = simulated_snt(var2);\n                goto label_0182;\n            } else if (var0 == 0xfc0c546a) {\n                // Dispatch table entry for token()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00f2;\n                var2 = token();\n                goto label_00F2;\n            } else if (var0 == 0xfc7e286d) {\n                // Dispatch table entry for deposits(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0182;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = deposits(var2);\n                goto label_0182;\n            } else { goto label_009E; }\n        }\n    }\n    \n    function func_00BF() {}\n    \n    function default_helper() {\n        if (!(storage[0x03] & 0xff)) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = msg.value + storage[temp2];\n            storage[temp2] = temp3;\n        \n            if (temp3 <= 0x01a055690d9db80000) { goto label_0283; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var var0 = storage[0x03] / 0x0100 ** 0x01 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var1 = 0x4084c3ab;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n            var var2 = temp0 + 0x04;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { assert(); }\n        \n            var temp1;\n            temp1, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (!temp1) { assert(); }\n        \n            if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) {\n                var0 = 0x00cb;\n                withdraw();\n            \n            label_00CB:\n                return;\n            } else {\n                var0 = 0x0283;\n                simulate_ico();\n            \n            label_0283:\n                goto label_00CB;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function withdraw() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1];\n        storage[temp1] = 0x00;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        var temp4 = temp0 & address(this);\n        memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = temp4;\n        var var0 = temp2;\n        var var1 = address(temp4).balance - storage[0x02];\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var10 = 0x20;\n        var var7 = temp0 & storage[0x05];\n        var var8 = 0x70a08231;\n        var var9 = temp3 + 0x24;\n        var var11 = memory[0x40:0x60];\n        var var12 = temp3 - var11 + 0x24;\n        var var13 = var11;\n        var var14 = var6;\n        var var15 = var7;\n    \n        if (!address(var15).code.length) { assert(); }\n    \n        var temp5;\n        temp5, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas - 0x02c6).value(var14)(memory[var13:var13 + var12]);\n    \n        if (!temp5) { assert(); }\n    \n        var2 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        var temp6 = var1;\n        var3 = var2 + temp6 * 0x2710;\n        var7 = var3;\n        var8 = temp6 * var0 * 0x2710;\n    \n        if (!var7) { assert(); }\n    \n        var4 = var8 / var7;\n        var7 = var3;\n        var8 = var0 * var2;\n    \n        if (!var7) { assert(); }\n    \n        var5 = var8 / var7 * 0x2710;\n        var6 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= var5) {\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = temp8 & msg.sender;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = var5 - var6;\n            var7 = storage[0x05] & temp8;\n            var8 = 0xa9059cbb;\n            var9 = temp7 + 0x44;\n            var10 = 0x20;\n            var11 = memory[0x40:0x60];\n            var12 = temp7 - var11 + 0x44;\n            var13 = var11;\n            var14 = 0x00;\n            var15 = var7;\n        \n            if (!address(var15).code.length) { assert(); }\n        \n        label_04C8:\n            var temp9;\n            temp9, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas - 0x02c6).value(var14)(memory[var13:var13 + var12]);\n        \n            if (!temp9) { assert(); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var10 = 0x20;\n            memory[var10 + memory[0x40:0x60]:var10 + memory[0x40:0x60] + 0x20] = 0x00;\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n            var temp11 = 0x02 ** 0xa0 - 0x01;\n            memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = temp11 & storage[0x06];\n            memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = var6;\n            var7 = storage[0x05] & temp11;\n            var8 = 0xa9059cbb;\n            var9 = temp10 + 0x44;\n            var11 = memory[0x40:0x60];\n            var12 = temp10 - var11 + 0x44;\n            var13 = var11;\n            var14 = 0x00;\n            var15 = var7;\n        \n            if (!address(var15).code.length) { assert(); }\n        \n            var temp12;\n            temp12, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas - 0x02c6).value(var14)(memory[var13:var13 + var12]);\n        \n            if (!temp12) { assert(); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var temp13 = memory[0x40:0x60];\n            var temp14 = var4;\n            var temp15;\n            temp15, memory[temp13:temp13 + 0x00] = address(msg.sender).call.gas(!temp14 * 0x08fc).value(temp14)(memory[temp13:temp13 + 0x00]);\n        \n            if (temp15) { return; }\n            else { assert(); }\n        } else {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var temp16 = var5;\n            var temp17 = temp16 - storage[keccak256(memory[0x00:0x40])] / 0x64;\n            var6 = temp17;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n            var temp19 = 0x02 ** 0xa0 - 0x01;\n            memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = temp19 & msg.sender;\n            memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = temp16 - var6;\n            var7 = storage[0x05] & temp19;\n            var8 = 0xa9059cbb;\n            var9 = temp18 + 0x44;\n            var10 = 0x20;\n            var11 = memory[0x40:0x60];\n            var12 = temp18 - var11 + 0x44;\n            var14 = 0x00;\n            var13 = var11;\n            var15 = var7;\n        \n            if (address(var15).code.length) { goto label_04C8; }\n            else { assert(); }\n        }\n    }\n    \n    function dynamic() returns (var r0) { return storage[0x04] & 0x02 ** 0xa0 - 0x01; }\n    \n    function add_to_bounty() {\n        if (storage[0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = msg.value + storage[0x02];\n    }\n    \n    function bought_tokens() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function sale() returns (var r0) { return storage[0x03] / 0x0100 & 0x02 ** 0xa0 - 0x01; }\n    \n    function bounty() returns (var r0) { return storage[0x02]; }\n    \n    function simulate_ico() {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = storage[0x03] / 0x0100 ** 0x01 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x3de39c11;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        var var5 = temp0 + 0x04;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp1;\n        temp1, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp1) { assert(); }\n    \n        if (tx.gasprice > memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var3 = storage[0x03] / 0x0100 ** 0x01 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var4 = 0x48cd4cb1;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        var5 = temp2 + 0x04;\n        var6 = 0x20;\n        var7 = memory[0x40:0x60];\n        var8 = var5 - var7;\n        var9 = var7;\n        var10 = 0x00;\n        var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp3;\n        temp3, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp3) { assert(); }\n    \n        if (block.number < memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var3 = storage[0x04] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var4 = 0x6e4e5c1d;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        var5 = temp4 + 0x04;\n        var6 = 0x20;\n        var7 = memory[0x40:0x60];\n        var8 = var5 - var7;\n        var9 = var7;\n        var10 = 0x00;\n        var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp5;\n        temp5, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp5) { assert(); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = 0x26987b6000000000000000000000000000000000000000000000000000000000;\n        var3 = storage[0x04] & 0x02 ** 0xa0 - 0x01;\n        var9 = memory[0x40:0x60];\n        var4 = 0x1bf7d749;\n        var5 = var3;\n        var6 = 0x26987b60;\n        var7 = temp6 + 0x04;\n        var8 = 0x20;\n        var10 = temp6 - var9 + 0x04;\n        var var12 = 0x00;\n        var11 = var9;\n        var var13 = var5;\n    \n        if (!address(var13).code.length) { assert(); }\n    \n        var temp7;\n        temp7, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas - 0x02c6).value(var12)(memory[var11:var11 + var10]);\n    \n        if (!temp7) { assert(); }\n    \n        var temp8 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[memory[0x40:0x60] + 0x80:memory[0x40:0x60] + 0x80 + 0x20] = 0x00;\n        var temp9 = memory[0x40:0x60];\n        memory[temp9:temp9 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp10 = temp9 + 0x04;\n        memory[temp10:temp10 + 0x20] = temp8;\n        var5 = temp10 + 0x20;\n        var6 = 0x80;\n        var7 = memory[0x40:0x60];\n        var8 = var5 - var7;\n        var9 = var7;\n        var10 = 0x00;\n        var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp11;\n        temp11, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp11) { assert(); }\n    \n        var temp12 = memory[0x40:0x60];\n        var6 = 0x20;\n        var temp13 = temp12 + var6;\n        var temp14 = memory[temp13:temp13 + 0x20];\n        var temp15 = memory[temp12 + 0x40:temp12 + 0x40 + 0x20];\n        memory[temp13:temp13 + 0x20] = 0x00;\n        var temp16 = memory[0x40:0x60];\n        memory[temp16:temp16 + 0x20] = 0x1517d10700000000000000000000000000000000000000000000000000000000;\n        var0 = temp14;\n        var1 = temp15;\n        var3 = storage[0x03] / 0x0100 & 0x02 ** 0xa0 - 0x01;\n        var4 = 0x1517d107;\n        var5 = temp16 + 0x04;\n        var7 = memory[0x40:0x60];\n        var8 = temp16 - var7 + 0x04;\n        var10 = 0x00;\n        var9 = var7;\n        var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp17;\n        temp17, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp17) { assert(); }\n    \n        var2 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n    \n        if (var0 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var3 = var1;\n        var4 = var0 - var2;\n    \n        if (!var3) { assert(); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp18 = keccak256(memory[0x00:0x40]);\n        storage[temp18] = storage[temp18] + var4 / var3;\n    }\n    \n    function buy() {\n        if (storage[0x03] & 0xff) { goto label_00CB; }\n    \n        var temp0 = (storage[0x03] & ~0xff) | 0x01;\n        storage[0x03] = temp0;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0xf48c305400000000000000000000000000000000000000000000000000000000;\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 & address(this);\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = temp3;\n        var var0 = temp0 / 0x0100 & temp2;\n        var var1 = 0xf48c3054;\n        var var2 = address(temp3).balance - storage[0x02];\n        var var5 = memory[0x40:0x60];\n        var var3 = temp1 + 0x24;\n        var var4 = 0x20;\n        var var6 = temp1 - var5 + 0x24;\n        var var7 = var5;\n        var var8 = var2;\n        var var9 = var0;\n    \n        if (!address(var9).code.length) { assert(); }\n    \n        var temp4;\n        temp4, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x25ee).value(var8)(memory[var7:var7 + var6]);\n    \n        if (!temp4) { assert(); }\n    \n        var temp5 = memory[0x40:0x60];\n        var temp6 = storage[0x02];\n        var temp7;\n        temp7, memory[temp5:temp5 + 0x00] = address(msg.sender).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp5:temp5 + 0x00]);\n    \n        if (!temp7) { assert(); }\n    \n    label_00CB:\n    }\n    \n    function simulated_snt(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function token() returns (var r0) { return storage[0x05] & 0x02 ** 0xa0 - 0x01; }\n    \n    function deposits(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_009E:\n            var var0 = 0x00ce;\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[0x03] / 0x0100 & temp0 != temp0 & msg.sender) {\n                var var1 = 0x00cb;\n                default_helper();\n                // Error: Could not resolve jump destination!\n            } else {\n                func_00BF();\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00ce;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4bd54f04) {\n                // Dispatch table entry for dynamic()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00f2;\n                var var2 = dynamic();\n            \n            label_00F2:\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp2 = memory[0x40:0x60];\n                return memory[temp2:temp2 + temp1 - temp2 + 0x20];\n            } else if (var0 == 0x5259347d) {\n                // Dispatch table entry for default_helper()\n                var1 = 0x00ce;\n                default_helper();\n                stop();\n            } else if (var0 == 0x62f5ed61) {\n                // Dispatch table entry for add_to_bounty()\n                var1 = 0x00ce;\n                add_to_bounty();\n                stop();\n            } else if (var0 == 0x6360fc3f) {\n                // Dispatch table entry for bought_tokens()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0132;\n                var2 = bought_tokens();\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = !!var2;\n                var temp4 = memory[0x40:0x60];\n                return memory[temp4:temp4 + temp3 - temp4 + 0x20];\n            } else if (var0 == 0x6ad1fe02) {\n                // Dispatch table entry for sale()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00f2;\n                var2 = sale();\n                goto label_00F2;\n            } else if (var0 == 0x943dfef1) {\n                // Dispatch table entry for bounty()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0182;\n                var2 = bounty();\n            \n            label_0182:\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var2;\n                var temp6 = memory[0x40:0x60];\n                return memory[temp6:temp6 + temp5 - temp6 + 0x20];\n            } else if (var0 == 0x97227325) {\n                // Dispatch table entry for simulate_ico()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00ce;\n                simulate_ico();\n                stop();\n            } else if (var0 == 0xa6f2ae3a) {\n                // Dispatch table entry for buy()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00ce;\n                buy();\n                stop();\n            } else if (var0 == 0xadcaea0a) {\n                // Dispatch table entry for simulated_snt(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0182;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = simulated_snt(var2);\n                goto label_0182;\n            } else if (var0 == 0xfc0c546a) {\n                // Dispatch table entry for token()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00f2;\n                var2 = token();\n                goto label_00F2;\n            } else if (var0 == 0xfc7e286d) {\n                // Dispatch table entry for deposits(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0182;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = deposits(var2);\n                goto label_0182;\n            } else { goto label_009E; }\n        }\n    }\n    \n    function func_00BF() {}\n    \n    function default_helper() {\n        if (!(storage[0x03] & 0xff)) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = msg.value + storage[temp2];\n            storage[temp2] = temp3;\n        \n            if (temp3 <= 0x01a055690d9db80000) { goto label_0283; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var var0 = storage[0x03] / 0x0100 ** 0x01 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var1 = 0x4084c3ab;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n            var var2 = temp0 + 0x04;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { assert(); }\n        \n            var temp1;\n            temp1, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (!temp1) { assert(); }\n        \n            if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) {\n                var0 = 0x00cb;\n                withdraw();\n            \n            label_00CB:\n                return;\n            } else {\n                var0 = 0x0283;\n                simulate_ico();\n            \n            label_0283:\n                goto label_00CB;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function withdraw() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1];\n        storage[temp1] = 0x00;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        var temp4 = temp0 & address(this);\n        memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = temp4;\n        var var0 = temp2;\n        var var1 = address(temp4).balance - storage[0x02];\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var10 = 0x20;\n        var var7 = temp0 & storage[0x05];\n        var var8 = 0x70a08231;\n        var var9 = temp3 + 0x24;\n        var var11 = memory[0x40:0x60];\n        var var12 = temp3 - var11 + 0x24;\n        var var13 = var11;\n        var var14 = var6;\n        var var15 = var7;\n    \n        if (!address(var15).code.length) { assert(); }\n    \n        var temp5;\n        temp5, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas - 0x02c6).value(var14)(memory[var13:var13 + var12]);\n    \n        if (!temp5) { assert(); }\n    \n        var2 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        var temp6 = var1;\n        var3 = var2 + temp6 * 0x2710;\n        var7 = var3;\n        var8 = temp6 * var0 * 0x2710;\n    \n        if (!var7) { assert(); }\n    \n        var4 = var8 / var7;\n        var7 = var3;\n        var8 = var0 * var2;\n    \n        if (!var7) { assert(); }\n    \n        var5 = var8 / var7 * 0x2710;\n        var6 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= var5) {\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = temp8 & msg.sender;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = var5 - var6;\n            var7 = storage[0x05] & temp8;\n            var8 = 0xa9059cbb;\n            var9 = temp7 + 0x44;\n            var10 = 0x20;\n            var11 = memory[0x40:0x60];\n            var12 = temp7 - var11 + 0x44;\n            var13 = var11;\n            var14 = 0x00;\n            var15 = var7;\n        \n            if (!address(var15).code.length) { assert(); }\n        \n        label_04C8:\n            var temp9;\n            temp9, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas - 0x02c6).value(var14)(memory[var13:var13 + var12]);\n        \n            if (!temp9) { assert(); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var10 = 0x20;\n            memory[var10 + memory[0x40:0x60]:var10 + memory[0x40:0x60] + 0x20] = 0x00;\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n            var temp11 = 0x02 ** 0xa0 - 0x01;\n            memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = temp11 & storage[0x06];\n            memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = var6;\n            var7 = storage[0x05] & temp11;\n            var8 = 0xa9059cbb;\n            var9 = temp10 + 0x44;\n            var11 = memory[0x40:0x60];\n            var12 = temp10 - var11 + 0x44;\n            var13 = var11;\n            var14 = 0x00;\n            var15 = var7;\n        \n            if (!address(var15).code.length) { assert(); }\n        \n            var temp12;\n            temp12, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas - 0x02c6).value(var14)(memory[var13:var13 + var12]);\n        \n            if (!temp12) { assert(); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var temp13 = memory[0x40:0x60];\n            var temp14 = var4;\n            var temp15;\n            temp15, memory[temp13:temp13 + 0x00] = address(msg.sender).call.gas(!temp14 * 0x08fc).value(temp14)(memory[temp13:temp13 + 0x00]);\n        \n            if (temp15) { return; }\n            else { assert(); }\n        } else {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var temp16 = var5;\n            var temp17 = temp16 - storage[keccak256(memory[0x00:0x40])] / 0x64;\n            var6 = temp17;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n            var temp19 = 0x02 ** 0xa0 - 0x01;\n            memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = temp19 & msg.sender;\n            memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = temp16 - var6;\n            var7 = storage[0x05] & temp19;\n            var8 = 0xa9059cbb;\n            var9 = temp18 + 0x44;\n            var10 = 0x20;\n            var11 = memory[0x40:0x60];\n            var12 = temp18 - var11 + 0x44;\n            var14 = 0x00;\n            var13 = var11;\n            var15 = var7;\n        \n            if (address(var15).code.length) { goto label_04C8; }\n            else { assert(); }\n        }\n    }\n    \n    function dynamic() returns (var r0) { return storage[0x04] & 0x02 ** 0xa0 - 0x01; }\n    \n    function add_to_bounty() {\n        if (storage[0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = msg.value + storage[0x02];\n    }\n    \n    function bought_tokens() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function sale() returns (var r0) { return storage[0x03] / 0x0100 & 0x02 ** 0xa0 - 0x01; }\n    \n    function bounty() returns (var r0) { return storage[0x02]; }\n    \n    function simulate_ico() {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = storage[0x03] / 0x0100 ** 0x01 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x3de39c11;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        var var5 = temp0 + 0x04;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp1;\n        temp1, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp1) { assert(); }\n    \n        if (tx.gasprice > memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var3 = storage[0x03] / 0x0100 ** 0x01 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var4 = 0x48cd4cb1;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        var5 = temp2 + 0x04;\n        var6 = 0x20;\n        var7 = memory[0x40:0x60];\n        var8 = var5 - var7;\n        var9 = var7;\n        var10 = 0x00;\n        var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp3;\n        temp3, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp3) { assert(); }\n    \n        if (block.number < memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var3 = storage[0x04] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var4 = 0x6e4e5c1d;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        var5 = temp4 + 0x04;\n        var6 = 0x20;\n        var7 = memory[0x40:0x60];\n        var8 = var5 - var7;\n        var9 = var7;\n        var10 = 0x00;\n        var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp5;\n        temp5, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp5) { assert(); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = 0x26987b6000000000000000000000000000000000000000000000000000000000;\n        var3 = storage[0x04] & 0x02 ** 0xa0 - 0x01;\n        var9 = memory[0x40:0x60];\n        var4 = 0x1bf7d749;\n        var5 = var3;\n        var6 = 0x26987b60;\n        var7 = temp6 + 0x04;\n        var8 = 0x20;\n        var10 = temp6 - var9 + 0x04;\n        var var12 = 0x00;\n        var11 = var9;\n        var var13 = var5;\n    \n        if (!address(var13).code.length) { assert(); }\n    \n        var temp7;\n        temp7, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas - 0x02c6).value(var12)(memory[var11:var11 + var10]);\n    \n        if (!temp7) { assert(); }\n    \n        var temp8 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[memory[0x40:0x60] + 0x80:memory[0x40:0x60] + 0x80 + 0x20] = 0x00;\n        var temp9 = memory[0x40:0x60];\n        memory[temp9:temp9 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp10 = temp9 + 0x04;\n        memory[temp10:temp10 + 0x20] = temp8;\n        var5 = temp10 + 0x20;\n        var6 = 0x80;\n        var7 = memory[0x40:0x60];\n        var8 = var5 - var7;\n        var9 = var7;\n        var10 = 0x00;\n        var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp11;\n        temp11, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp11) { assert(); }\n    \n        var temp12 = memory[0x40:0x60];\n        var6 = 0x20;\n        var temp13 = temp12 + var6;\n        var temp14 = memory[temp13:temp13 + 0x20];\n        var temp15 = memory[temp12 + 0x40:temp12 + 0x40 + 0x20];\n        memory[temp13:temp13 + 0x20] = 0x00;\n        var temp16 = memory[0x40:0x60];\n        memory[temp16:temp16 + 0x20] = 0x1517d10700000000000000000000000000000000000000000000000000000000;\n        var0 = temp14;\n        var1 = temp15;\n        var3 = storage[0x03] / 0x0100 & 0x02 ** 0xa0 - 0x01;\n        var4 = 0x1517d107;\n        var5 = temp16 + 0x04;\n        var7 = memory[0x40:0x60];\n        var8 = temp16 - var7 + 0x04;\n        var10 = 0x00;\n        var9 = var7;\n        var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp17;\n        temp17, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp17) { assert(); }\n    \n        var2 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n    \n        if (var0 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var3 = var1;\n        var4 = var0 - var2;\n    \n        if (!var3) { assert(); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp18 = keccak256(memory[0x00:0x40]);\n        storage[temp18] = storage[temp18] + var4 / var3;\n    }\n    \n    function buy() {\n        if (storage[0x03] & 0xff) { goto label_00CB; }\n    \n        var temp0 = (storage[0x03] & ~0xff) | 0x01;\n        storage[0x03] = temp0;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0xf48c305400000000000000000000000000000000000000000000000000000000;\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 & address(this);\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = temp3;\n        var var0 = temp0 / 0x0100 & temp2;\n        var var1 = 0xf48c3054;\n        var var2 = address(temp3).balance - storage[0x02];\n        var var5 = memory[0x40:0x60];\n        var var3 = temp1 + 0x24;\n        var var4 = 0x20;\n        var var6 = temp1 - var5 + 0x24;\n        var var7 = var5;\n        var var8 = var2;\n        var var9 = var0;\n    \n        if (!address(var9).code.length) { assert(); }\n    \n        var temp4;\n        temp4, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x25ee).value(var8)(memory[var7:var7 + var6]);\n    \n        if (!temp4) { assert(); }\n    \n        var temp5 = memory[0x40:0x60];\n        var temp6 = storage[0x02];\n        var temp7;\n        temp7, memory[temp5:temp5 + 0x00] = address(msg.sender).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp5:temp5 + 0x00]);\n    \n        if (!temp7) { assert(); }\n    \n    label_00CB:\n    }\n    \n    function simulated_snt(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function token() returns (var r0) { return storage[0x05] & 0x02 ** 0xa0 - 0x01; }\n    \n    function deposits(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_009E:\n            var var0 = 0x00ce;\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[0x03] / 0x0100 & temp0 != temp0 & msg.sender) {\n                var var1 = 0x00cb;\n                default_helper();\n                // Error: Could not resolve jump destination!\n            } else {\n                func_00BF();\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00ce;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4bd54f04) {\n                // Dispatch table entry for dynamic()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00f2;\n                var var2 = dynamic();\n            \n            label_00F2:\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp2 = memory[0x40:0x60];\n                return memory[temp2:temp2 + temp1 - temp2 + 0x20];\n            } else if (var0 == 0x5259347d) {\n                // Dispatch table entry for default_helper()\n                var1 = 0x00ce;\n                default_helper();\n                stop();\n            } else if (var0 == 0x62f5ed61) {\n                // Dispatch table entry for add_to_bounty()\n                var1 = 0x00ce;\n                add_to_bounty();\n                stop();\n            } else if (var0 == 0x6360fc3f) {\n                // Dispatch table entry for bought_tokens()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0132;\n                var2 = bought_tokens();\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = !!var2;\n                var temp4 = memory[0x40:0x60];\n                return memory[temp4:temp4 + temp3 - temp4 + 0x20];\n            } else if (var0 == 0x6ad1fe02) {\n                // Dispatch table entry for sale()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00f2;\n                var2 = sale();\n                goto label_00F2;\n            } else if (var0 == 0x943dfef1) {\n                // Dispatch table entry for bounty()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0182;\n                var2 = bounty();\n            \n            label_0182:\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var2;\n                var temp6 = memory[0x40:0x60];\n                return memory[temp6:temp6 + temp5 - temp6 + 0x20];\n            } else if (var0 == 0x97227325) {\n                // Dispatch table entry for simulate_ico()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00ce;\n                simulate_ico();\n                stop();\n            } else if (var0 == 0xa6f2ae3a) {\n                // Dispatch table entry for buy()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00ce;\n                buy();\n                stop();\n            } else if (var0 == 0xadcaea0a) {\n                // Dispatch table entry for simulated_snt(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0182;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = simulated_snt(var2);\n                goto label_0182;\n            } else if (var0 == 0xfc0c546a) {\n                // Dispatch table entry for token()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00f2;\n                var2 = token();\n                goto label_00F2;\n            } else if (var0 == 0xfc7e286d) {\n                // Dispatch table entry for deposits(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0182;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = deposits(var2);\n                goto label_0182;\n            } else { goto label_009E; }\n        }\n    }\n    \n    function func_00BF() {}\n    \n    function default_helper() {\n        if (!(storage[0x03] & 0xff)) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = msg.value + storage[temp2];\n            storage[temp2] = temp3;\n        \n            if (temp3 <= 0x01a055690d9db80000) { goto label_0283; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var var0 = storage[0x03] / 0x0100 ** 0x01 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var1 = 0x4084c3ab;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n            var var2 = temp0 + 0x04;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { assert(); }\n        \n            var temp1;\n            temp1, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (!temp1) { assert(); }\n        \n            if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) {\n                var0 = 0x00cb;\n                withdraw();\n            \n            label_00CB:\n                return;\n            } else {\n                var0 = 0x0283;\n                simulate_ico();\n            \n            label_0283:\n                goto label_00CB;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function withdraw() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1];\n        storage[temp1] = 0x00;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        var temp4 = temp0 & address(this);\n        memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = temp4;\n        var var0 = temp2;\n        var var1 = address(temp4).balance - storage[0x02];\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var10 = 0x20;\n        var var7 = temp0 & storage[0x05];\n        var var8 = 0x70a08231;\n        var var9 = temp3 + 0x24;\n        var var11 = memory[0x40:0x60];\n        var var12 = temp3 - var11 + 0x24;\n        var var13 = var11;\n        var var14 = var6;\n        var var15 = var7;\n    \n        if (!address(var15).code.length) { assert(); }\n    \n        var temp5;\n        temp5, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas - 0x02c6).value(var14)(memory[var13:var13 + var12]);\n    \n        if (!temp5) { assert(); }\n    \n        var2 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        var temp6 = var1;\n        var3 = var2 + temp6 * 0x2710;\n        var7 = var3;\n        var8 = temp6 * var0 * 0x2710;\n    \n        if (!var7) { assert(); }\n    \n        var4 = var8 / var7;\n        var7 = var3;\n        var8 = var0 * var2;\n    \n        if (!var7) { assert(); }\n    \n        var5 = var8 / var7 * 0x2710;\n        var6 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= var5) {\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = temp8 & msg.sender;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = var5 - var6;\n            var7 = storage[0x05] & temp8;\n            var8 = 0xa9059cbb;\n            var9 = temp7 + 0x44;\n            var10 = 0x20;\n            var11 = memory[0x40:0x60];\n            var12 = temp7 - var11 + 0x44;\n            var13 = var11;\n            var14 = 0x00;\n            var15 = var7;\n        \n            if (!address(var15).code.length) { assert(); }\n        \n        label_04C8:\n            var temp9;\n            temp9, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas - 0x02c6).value(var14)(memory[var13:var13 + var12]);\n        \n            if (!temp9) { assert(); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var10 = 0x20;\n            memory[var10 + memory[0x40:0x60]:var10 + memory[0x40:0x60] + 0x20] = 0x00;\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n            var temp11 = 0x02 ** 0xa0 - 0x01;\n            memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = temp11 & storage[0x06];\n            memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = var6;\n            var7 = storage[0x05] & temp11;\n            var8 = 0xa9059cbb;\n            var9 = temp10 + 0x44;\n            var11 = memory[0x40:0x60];\n            var12 = temp10 - var11 + 0x44;\n            var13 = var11;\n            var14 = 0x00;\n            var15 = var7;\n        \n            if (!address(var15).code.length) { assert(); }\n        \n            var temp12;\n            temp12, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas - 0x02c6).value(var14)(memory[var13:var13 + var12]);\n        \n            if (!temp12) { assert(); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var temp13 = memory[0x40:0x60];\n            var temp14 = var4;\n            var temp15;\n            temp15, memory[temp13:temp13 + 0x00] = address(msg.sender).call.gas(!temp14 * 0x08fc).value(temp14)(memory[temp13:temp13 + 0x00]);\n        \n            if (temp15) { return; }\n            else { assert(); }\n        } else {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var temp16 = var5;\n            var temp17 = temp16 - storage[keccak256(memory[0x00:0x40])] / 0x64;\n            var6 = temp17;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n            var temp19 = 0x02 ** 0xa0 - 0x01;\n            memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = temp19 & msg.sender;\n            memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = temp16 - var6;\n            var7 = storage[0x05] & temp19;\n            var8 = 0xa9059cbb;\n            var9 = temp18 + 0x44;\n            var10 = 0x20;\n            var11 = memory[0x40:0x60];\n            var12 = temp18 - var11 + 0x44;\n            var14 = 0x00;\n            var13 = var11;\n            var15 = var7;\n        \n            if (address(var15).code.length) { goto label_04C8; }\n            else { assert(); }\n        }\n    }\n    \n    function dynamic() returns (var r0) { return storage[0x04] & 0x02 ** 0xa0 - 0x01; }\n    \n    function add_to_bounty() {\n        if (storage[0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = msg.value + storage[0x02];\n    }\n    \n    function bought_tokens() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function sale() returns (var r0) { return storage[0x03] / 0x0100 & 0x02 ** 0xa0 - 0x01; }\n    \n    function bounty() returns (var r0) { return storage[0x02]; }\n    \n    function simulate_ico() {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = storage[0x03] / 0x0100 ** 0x01 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x3de39c11;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        var var5 = temp0 + 0x04;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp1;\n        temp1, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp1) { assert(); }\n    \n        if (tx.gasprice > memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var3 = storage[0x03] / 0x0100 ** 0x01 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var4 = 0x48cd4cb1;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        var5 = temp2 + 0x04;\n        var6 = 0x20;\n        var7 = memory[0x40:0x60];\n        var8 = var5 - var7;\n        var9 = var7;\n        var10 = 0x00;\n        var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp3;\n        temp3, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp3) { assert(); }\n    \n        if (block.number < memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var3 = storage[0x04] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var4 = 0x6e4e5c1d;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        var5 = temp4 + 0x04;\n        var6 = 0x20;\n        var7 = memory[0x40:0x60];\n        var8 = var5 - var7;\n        var9 = var7;\n        var10 = 0x00;\n        var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp5;\n        temp5, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp5) { assert(); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = 0x26987b6000000000000000000000000000000000000000000000000000000000;\n        var3 = storage[0x04] & 0x02 ** 0xa0 - 0x01;\n        var9 = memory[0x40:0x60];\n        var4 = 0x1bf7d749;\n        var5 = var3;\n        var6 = 0x26987b60;\n        var7 = temp6 + 0x04;\n        var8 = 0x20;\n        var10 = temp6 - var9 + 0x04;\n        var var12 = 0x00;\n        var11 = var9;\n        var var13 = var5;\n    \n        if (!address(var13).code.length) { assert(); }\n    \n        var temp7;\n        temp7, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas - 0x02c6).value(var12)(memory[var11:var11 + var10]);\n    \n        if (!temp7) { assert(); }\n    \n        var temp8 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[memory[0x40:0x60] + 0x80:memory[0x40:0x60] + 0x80 + 0x20] = 0x00;\n        var temp9 = memory[0x40:0x60];\n        memory[temp9:temp9 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp10 = temp9 + 0x04;\n        memory[temp10:temp10 + 0x20] = temp8;\n        var5 = temp10 + 0x20;\n        var6 = 0x80;\n        var7 = memory[0x40:0x60];\n        var8 = var5 - var7;\n        var9 = var7;\n        var10 = 0x00;\n        var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp11;\n        temp11, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp11) { assert(); }\n    \n        var temp12 = memory[0x40:0x60];\n        var6 = 0x20;\n        var temp13 = temp12 + var6;\n        var temp14 = memory[temp13:temp13 + 0x20];\n        var temp15 = memory[temp12 + 0x40:temp12 + 0x40 + 0x20];\n        memory[temp13:temp13 + 0x20] = 0x00;\n        var temp16 = memory[0x40:0x60];\n        memory[temp16:temp16 + 0x20] = 0x1517d10700000000000000000000000000000000000000000000000000000000;\n        var0 = temp14;\n        var1 = temp15;\n        var3 = storage[0x03] / 0x0100 & 0x02 ** 0xa0 - 0x01;\n        var4 = 0x1517d107;\n        var5 = temp16 + 0x04;\n        var7 = memory[0x40:0x60];\n        var8 = temp16 - var7 + 0x04;\n        var10 = 0x00;\n        var9 = var7;\n        var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp17;\n        temp17, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp17) { assert(); }\n    \n        var2 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n    \n        if (var0 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var3 = var1;\n        var4 = var0 - var2;\n    \n        if (!var3) { assert(); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp18 = keccak256(memory[0x00:0x40]);\n        storage[temp18] = storage[temp18] + var4 / var3;\n    }\n    \n    function buy() {\n        if (storage[0x03] & 0xff) { goto label_00CB; }\n    \n        var temp0 = (storage[0x03] & ~0xff) | 0x01;\n        storage[0x03] = temp0;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0xf48c305400000000000000000000000000000000000000000000000000000000;\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 & address(this);\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = temp3;\n        var var0 = temp0 / 0x0100 & temp2;\n        var var1 = 0xf48c3054;\n        var var2 = address(temp3).balance - storage[0x02];\n        var var5 = memory[0x40:0x60];\n        var var3 = temp1 + 0x24;\n        var var4 = 0x20;\n        var var6 = temp1 - var5 + 0x24;\n        var var7 = var5;\n        var var8 = var2;\n        var var9 = var0;\n    \n        if (!address(var9).code.length) { assert(); }\n    \n        var temp4;\n        temp4, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x25ee).value(var8)(memory[var7:var7 + var6]);\n    \n        if (!temp4) { assert(); }\n    \n        var temp5 = memory[0x40:0x60];\n        var temp6 = storage[0x02];\n        var temp7;\n        temp7, memory[temp5:temp5 + 0x00] = address(msg.sender).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp5:temp5 + 0x00]);\n    \n        if (!temp7) { assert(); }\n    \n    label_00CB:\n    }\n    \n    function simulated_snt(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function token() returns (var r0) { return storage[0x05] & 0x02 ** 0xa0 - 0x01; }\n    \n    function deposits(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 19.113775730133057,
	"usage": {
		"completion_tokens": 430,
		"prompt_tokens": 6892,
		"total_tokens": 7322
	}
}