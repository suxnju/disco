{
	"address": "0xb59a226a2b8a2f2b0512baa35cc348b6b213b671",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Given the decompiled code, here's a simplified Solidity version of it. I've made some assumptions about the types of certain variables as the decompiled code doesn't provide a full picture. Please note that this is a simplified version and might not contain all the functionality of the original contract.\n\n```Solidity\npragma solidity ^0.5.16;\n\ncontract TokenContract {\n    mapping (address => uint256) private _balanceOf;\n    uint256 private _totalSupply;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    string private _name;\n    string private _symbol;\n    string private _version;\n    uint8 private _decimals;\n    address private _accessPolicy;\n\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    event LogWithdrawal(address indexed user, uint amount);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event LogAccessPolicyChanged(address indexed user, address oldPolicy, address newPolicy);\n    event LogDeposit(address indexed user, uint amount);\n    \n    function _SafeAdd(uint256 a, uint256 b) private pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a);\n    }\n\n    function approve(address spender, uint256 tokens) public returns (bool success) {\n        _allowance[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\n        _balanceOf[from] = _SafeSub(_balanceOf[from], tokens);\n        _allowance[from][msg.sender] = _SafeSub(_allowance[from][msg.sender], tokens);\n        _balanceOf[to] = _SafeAdd(_balanceOf[to], tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    function withdraw(uint256 amount) public {\n        require(_balanceOf[msg.sender] >= amount);\n        _balanceOf[msg.sender] = _SafeSub(_balanceOf[msg.sender], amount);\n        _totalSupply = _SafeSub(_totalSupply, amount);\n        msg.sender.transfer(amount);\n        emit LogWithdrawal(msg.sender, amount);\n        emit Transfer(msg.sender, address(0), amount);\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function version() public view returns (string memory) {\n        return _version;\n    }\n\n    function setAccessPolicy(address newPolicy) public {\n        require(isContract(newPolicy));\n        emit LogAccessPolicyChanged(msg.sender, _accessPolicy, newPolicy);\n        _accessPolicy = newPolicy;\n    }\n\n    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\n        return _balanceOf[tokenOwner];\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function transfer(address to, uint256 tokens) public returns (bool success) {\n        _balanceOf[msg.sender] = _SafeSub(_balanceOf[msg.sender], tokens);\n        _balanceOf[to] = _SafeAdd(_balanceOf[to], tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {\n        return _allowance[tokenOwner][spender];\n    }\n\n    function accessPolicy() public view returns (address) {\n        return _accessPolicy;\n    }\n\n    function _SafeSub(uint256 a, uint256 b) private pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function isContract(address _addr) private view returns (bool) {\n        uint32 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return (size > 0);\n    }\n}\n```",
				"role": "assistant"
			}
		}
	],
	"created": 1701455350,
	"id": "chatcmpl-8R2YAie28t0BKK5diJJATA3S025OB",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.24 19:09 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x3]\nuint256[] _name; // STORAGE[0x4]\nuint256[] _symbol; // STORAGE[0x5]\nuint256[] _version; // STORAGE[0x7]\nuint8 _decimals; // STORAGE[0x6] bytes 0 to 0\naddress _accessPolicy; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nLogWithdrawal(address, uint256);\nTransfer(address, address, uint256);\nLogAccessPolicyChanged(address, address, address);\nLogDeposit(address, uint256);\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0x60d(varg1, varg0);\n    return v0;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = _SafeSub(varg2, _allowance[msg.sender]);\n    _allowance[msg.sender] = v0;\n    0xf92(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    v0 = _SafeSub(varg0, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeSub(varg0, _totalSupply);\n    _totalSupply = v1;\n    v2 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    require(v2);\n    emit LogWithdrawal(msg.sender, varg0);\n    emit Transfer(msg.sender, 0, varg0);\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction version() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = new bytes[](_version.length);\n    v1 = v2 = v0.data;\n    if (_version.length) {\n        if (31 < _version.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _version.length <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction setAccessPolicy(uint256 function_selector, address varg1, address varg2) public nonPayable { \n    MEM[32 + MEM[64]] = 0;\n    require(_accessPolicy.code.size);\n    v0, v1 = _accessPolicy.allowed(msg.sender, 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da, address(this), function_selector & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff).gas(msg.gas - 710);\n    require(v0);\n    require(v1);\n    MEM[32 + MEM[64]] = 0;\n    require(varg1.code.size);\n    v2, v3 = varg1.allowed(varg2, 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da, address(this), ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & function_selector & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff).gas(msg.gas - 710);\n    require(v2);\n    require(v3);\n    _accessPolicy = varg1;\n    emit LogAccessPolicyChanged(msg.sender, _accessPolicy, varg1);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0xf92(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    0xf92(varg1, varg0, msg.sender);\n    if (varg0.code.size > 0) {\n        v1 = new array[](v0.length);\n        v2 = v3 = 0;\n        while (v2 < v0.length) {\n            MEM[v1.data + v2] = MEM[v0.data + v2];\n            v2 += 32;\n        }\n        v4 = v5 = v0.length + v1.data;\n        if (0x1f & v0.length) {\n            MEM[v5 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v5 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v6 = varg0.onTokenTransfer(msg.sender, varg1, v1).gas(msg.gas - 710);\n        require(v6);\n    }\n    return 1;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = 0x60d(varg1, varg0);\n    require(v1);\n    MEM[32 + MEM[64]] = 0;\n    v2 = new array[](v0.length);\n    v3 = v4 = 0;\n    while (v3 < v0.length) {\n        MEM[v2.data + v3] = MEM[v0.data + v3];\n        v3 += 32;\n    }\n    v5 = v6 = v0.length + v2.data;\n    if (0x1f & v0.length) {\n        MEM[v6 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v6 - (0x1f & v0.length)];\n    }\n    require(varg0.code.size);\n    v7, v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v2).gas(msg.gas - 710);\n    require(v7);\n    require(v8);\n    return 1;\n}\n\nfunction deposit() public payable { \n    v0 = _SafeAdd(msg.value, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(msg.value, _totalSupply);\n    _totalSupply = v1;\n    emit LogDeposit(msg.sender, msg.value);\n    emit Transfer(0, msg.sender, msg.value);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction accessPolicy() public nonPayable { \n    return _accessPolicy;\n}\n\nfunction reclaim(uint256 function_selector, address varg1) public nonPayable { \n    require(varg1);\n    MEM[32 + MEM[64]] = 0;\n    require(_accessPolicy.code.size);\n    v0, v1 = _accessPolicy.allowed(msg.sender, 0x542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5, address(this), function_selector & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff).gas(msg.gas - 710);\n    require(v0);\n    require(v1);\n    if (varg1) {\n        MEM[32 + MEM[64]] = 0;\n        require(varg1.code.size);\n        v2, v3 = varg1.balanceOf(address(this)).gas(msg.gas - 710);\n        require(v2);\n        MEM[32 + MEM[64]] = 0;\n        require(varg1.code.size);\n        v4, v5 = varg1.transfer(msg.sender, v3).gas(msg.gas - 710);\n        require(v4);\n        require(v5);\n    } else {\n        v6 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v6);\n    }\n}\n\nfunction 0x60d(uint256 varg0, uint256 varg1) private { \n    v0 = v1 = !varg0;\n    if (varg0) {\n        v2 = address(varg1);\n        v0 = v3 = !_allowance[v2];\n    }\n    require(v0);\n    v4 = address(varg1);\n    _allowance[v4] = varg0;\n    emit Approval(msg.sender, v4, varg0);\n    return 1;\n}\n\nfunction name() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\nfunction 0xf92(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    v1 = _SafeSub(varg0, _balanceOf[v0]);\n    v2 = address(varg2);\n    _balanceOf[v2] = v1;\n    v3 = address(varg1);\n    v4 = _SafeAdd(varg0, _balanceOf[v3]);\n    v5 = address(varg1);\n    _balanceOf[v5] = v4;\n    emit Transfer(address(varg2), v5, varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        v0 = uint32(function_selector >> 224);\n        if (v0 == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == v0) {\n            approve(address,uint256);\n        } else if (0x18160ddd == v0) {\n            totalSupply();\n        } else if (0x23b872dd == v0) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == v0) {\n            withdraw(uint256);\n        } else if (0x313ce567 == v0) {\n            decimals();\n        } else if (0x54fd4d50 == v0) {\n            version();\n        } else if (0x57875631 == v0) {\n            setAccessPolicy(address,address);\n        } else if (0x70a08231 == v0) {\n            balanceOf(address);\n        } else if (0x95d89b41 == v0) {\n            symbol();\n        } else if (0xa9059cbb == v0) {\n            transfer(address,uint256);\n        } else if (0xbe45fd62 == v0) {\n            transfer(address,uint256,bytes);\n        } else if (0xcae9ca51 == v0) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xd0e30db0 == v0) {\n            deposit();\n        } else if (0xdd62ed3e == v0) {\n            allowance(address,address);\n        } else if (0xf5d60a51 == v0) {\n            accessPolicy();\n        } else if (0xfc772c8b == v0) {\n            reclaim(address);\n        }\n    }\n    revert();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 19:09 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x3]\nuint256[] _name; // STORAGE[0x4]\nuint256[] _symbol; // STORAGE[0x5]\nuint256[] _version; // STORAGE[0x7]\nuint8 _decimals; // STORAGE[0x6] bytes 0 to 0\naddress _accessPolicy; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nLogWithdrawal(address, uint256);\nTransfer(address, address, uint256);\nLogAccessPolicyChanged(address, address, address);\nLogDeposit(address, uint256);\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0x60d(varg1, varg0);\n    return v0;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = _SafeSub(varg2, _allowance[msg.sender]);\n    _allowance[msg.sender] = v0;\n    0xf92(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    v0 = _SafeSub(varg0, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeSub(varg0, _totalSupply);\n    _totalSupply = v1;\n    v2 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    require(v2);\n    emit LogWithdrawal(msg.sender, varg0);\n    emit Transfer(msg.sender, 0, varg0);\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction version() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = new bytes[](_version.length);\n    v1 = v2 = v0.data;\n    if (_version.length) {\n        if (31 < _version.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _version.length <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction setAccessPolicy(uint256 function_selector, address varg1, address varg2) public nonPayable { \n    MEM[32 + MEM[64]] = 0;\n    require(_accessPolicy.code.size);\n    v0, v1 = _accessPolicy.allowed(msg.sender, 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da, address(this), function_selector & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff).gas(msg.gas - 710);\n    require(v0);\n    require(v1);\n    MEM[32 + MEM[64]] = 0;\n    require(varg1.code.size);\n    v2, v3 = varg1.allowed(varg2, 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da, address(this), ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & function_selector & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff).gas(msg.gas - 710);\n    require(v2);\n    require(v3);\n    _accessPolicy = varg1;\n    emit LogAccessPolicyChanged(msg.sender, _accessPolicy, varg1);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0xf92(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    0xf92(varg1, varg0, msg.sender);\n    if (varg0.code.size > 0) {\n        v1 = new array[](v0.length);\n        v2 = v3 = 0;\n        while (v2 < v0.length) {\n            MEM[v1.data + v2] = MEM[v0.data + v2];\n            v2 += 32;\n        }\n        v4 = v5 = v0.length + v1.data;\n        if (0x1f & v0.length) {\n            MEM[v5 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v5 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v6 = varg0.onTokenTransfer(msg.sender, varg1, v1).gas(msg.gas - 710);\n        require(v6);\n    }\n    return 1;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = 0x60d(varg1, varg0);\n    require(v1);\n    MEM[32 + MEM[64]] = 0;\n    v2 = new array[](v0.length);\n    v3 = v4 = 0;\n    while (v3 < v0.length) {\n        MEM[v2.data + v3] = MEM[v0.data + v3];\n        v3 += 32;\n    }\n    v5 = v6 = v0.length + v2.data;\n    if (0x1f & v0.length) {\n        MEM[v6 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v6 - (0x1f & v0.length)];\n    }\n    require(varg0.code.size);\n    v7, v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v2).gas(msg.gas - 710);\n    require(v7);\n    require(v8);\n    return 1;\n}\n\nfunction deposit() public payable { \n    v0 = _SafeAdd(msg.value, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(msg.value, _totalSupply);\n    _totalSupply = v1;\n    emit LogDeposit(msg.sender, msg.value);\n    emit Transfer(0, msg.sender, msg.value);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction accessPolicy() public nonPayable { \n    return _accessPolicy;\n}\n\nfunction reclaim(uint256 function_selector, address varg1) public nonPayable { \n    require(varg1);\n    MEM[32 + MEM[64]] = 0;\n    require(_accessPolicy.code.size);\n    v0, v1 = _accessPolicy.allowed(msg.sender, 0x542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5, address(this), function_selector & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff).gas(msg.gas - 710);\n    require(v0);\n    require(v1);\n    if (varg1) {\n        MEM[32 + MEM[64]] = 0;\n        require(varg1.code.size);\n        v2, v3 = varg1.balanceOf(address(this)).gas(msg.gas - 710);\n        require(v2);\n        MEM[32 + MEM[64]] = 0;\n        require(varg1.code.size);\n        v4, v5 = varg1.transfer(msg.sender, v3).gas(msg.gas - 710);\n        require(v4);\n        require(v5);\n    } else {\n        v6 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v6);\n    }\n}\n\nfunction 0x60d(uint256 varg0, uint256 varg1) private { \n    v0 = v1 = !varg0;\n    if (varg0) {\n        v2 = address(varg1);\n        v0 = v3 = !_allowance[v2];\n    }\n    require(v0);\n    v4 = address(varg1);\n    _allowance[v4] = varg0;\n    emit Approval(msg.sender, v4, varg0);\n    return 1;\n}\n\nfunction name() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\nfunction 0xf92(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    v1 = _SafeSub(varg0, _balanceOf[v0]);\n    v2 = address(varg2);\n    _balanceOf[v2] = v1;\n    v3 = address(varg1);\n    v4 = _SafeAdd(varg0, _balanceOf[v3]);\n    v5 = address(varg1);\n    _balanceOf[v5] = v4;\n    emit Transfer(address(varg2), v5, varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        v0 = uint32(function_selector >> 224);\n        if (v0 == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == v0) {\n            approve(address,uint256);\n        } else if (0x18160ddd == v0) {\n            totalSupply();\n        } else if (0x23b872dd == v0) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == v0) {\n            withdraw(uint256);\n        } else if (0x313ce567 == v0) {\n            decimals();\n        } else if (0x54fd4d50 == v0) {\n            version();\n        } else if (0x57875631 == v0) {\n            setAccessPolicy(address,address);\n        } else if (0x70a08231 == v0) {\n            balanceOf(address);\n        } else if (0x95d89b41 == v0) {\n            symbol();\n        } else if (0xa9059cbb == v0) {\n            transfer(address,uint256);\n        } else if (0xbe45fd62 == v0) {\n            transfer(address,uint256,bytes);\n        } else if (0xcae9ca51 == v0) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xd0e30db0 == v0) {\n            deposit();\n        } else if (0xdd62ed3e == v0) {\n            allowance(address,address);\n        } else if (0xf5d60a51 == v0) {\n            accessPolicy();\n        } else if (0xfc772c8b == v0) {\n            reclaim(address);\n        }\n    }\n    revert();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 19:09 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x3]\nuint256[] _name; // STORAGE[0x4]\nuint256[] _symbol; // STORAGE[0x5]\nuint256[] _version; // STORAGE[0x7]\nuint8 _decimals; // STORAGE[0x6] bytes 0 to 0\naddress _accessPolicy; // STORAGE[0x2] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nLogWithdrawal(address, uint256);\nTransfer(address, address, uint256);\nLogAccessPolicyChanged(address, address, address);\nLogDeposit(address, uint256);\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0x60d(varg1, varg0);\n    return v0;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = _SafeSub(varg2, _allowance[msg.sender]);\n    _allowance[msg.sender] = v0;\n    0xf92(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    v0 = _SafeSub(varg0, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeSub(varg0, _totalSupply);\n    _totalSupply = v1;\n    v2 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    require(v2);\n    emit LogWithdrawal(msg.sender, varg0);\n    emit Transfer(msg.sender, 0, varg0);\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction version() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = new bytes[](_version.length);\n    v1 = v2 = v0.data;\n    if (_version.length) {\n        if (31 < _version.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _version.length <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction setAccessPolicy(uint256 function_selector, address varg1, address varg2) public nonPayable { \n    MEM[32 + MEM[64]] = 0;\n    require(_accessPolicy.code.size);\n    v0, v1 = _accessPolicy.allowed(msg.sender, 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da, address(this), function_selector & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff).gas(msg.gas - 710);\n    require(v0);\n    require(v1);\n    MEM[32 + MEM[64]] = 0;\n    require(varg1.code.size);\n    v2, v3 = varg1.allowed(varg2, 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da, address(this), ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & function_selector & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff).gas(msg.gas - 710);\n    require(v2);\n    require(v3);\n    _accessPolicy = varg1;\n    emit LogAccessPolicyChanged(msg.sender, _accessPolicy, varg1);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0xf92(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    0xf92(varg1, varg0, msg.sender);\n    if (varg0.code.size > 0) {\n        v1 = new array[](v0.length);\n        v2 = v3 = 0;\n        while (v2 < v0.length) {\n            MEM[v1.data + v2] = MEM[v0.data + v2];\n            v2 += 32;\n        }\n        v4 = v5 = v0.length + v1.data;\n        if (0x1f & v0.length) {\n            MEM[v5 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v5 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v6 = varg0.onTokenTransfer(msg.sender, varg1, v1).gas(msg.gas - 710);\n        require(v6);\n    }\n    return 1;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = 0x60d(varg1, varg0);\n    require(v1);\n    MEM[32 + MEM[64]] = 0;\n    v2 = new array[](v0.length);\n    v3 = v4 = 0;\n    while (v3 < v0.length) {\n        MEM[v2.data + v3] = MEM[v0.data + v3];\n        v3 += 32;\n    }\n    v5 = v6 = v0.length + v2.data;\n    if (0x1f & v0.length) {\n        MEM[v6 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v6 - (0x1f & v0.length)];\n    }\n    require(varg0.code.size);\n    v7, v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v2).gas(msg.gas - 710);\n    require(v7);\n    require(v8);\n    return 1;\n}\n\nfunction deposit() public payable { \n    v0 = _SafeAdd(msg.value, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(msg.value, _totalSupply);\n    _totalSupply = v1;\n    emit LogDeposit(msg.sender, msg.value);\n    emit Transfer(0, msg.sender, msg.value);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction accessPolicy() public nonPayable { \n    return _accessPolicy;\n}\n\nfunction reclaim(uint256 function_selector, address varg1) public nonPayable { \n    require(varg1);\n    MEM[32 + MEM[64]] = 0;\n    require(_accessPolicy.code.size);\n    v0, v1 = _accessPolicy.allowed(msg.sender, 0x542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5, address(this), function_selector & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff).gas(msg.gas - 710);\n    require(v0);\n    require(v1);\n    if (varg1) {\n        MEM[32 + MEM[64]] = 0;\n        require(varg1.code.size);\n        v2, v3 = varg1.balanceOf(address(this)).gas(msg.gas - 710);\n        require(v2);\n        MEM[32 + MEM[64]] = 0;\n        require(varg1.code.size);\n        v4, v5 = varg1.transfer(msg.sender, v3).gas(msg.gas - 710);\n        require(v4);\n        require(v5);\n    } else {\n        v6 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v6);\n    }\n}\n\nfunction 0x60d(uint256 varg0, uint256 varg1) private { \n    v0 = v1 = !varg0;\n    if (varg0) {\n        v2 = address(varg1);\n        v0 = v3 = !_allowance[v2];\n    }\n    require(v0);\n    v4 = address(varg1);\n    _allowance[v4] = varg0;\n    emit Approval(msg.sender, v4, varg0);\n    return 1;\n}\n\nfunction name() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\nfunction 0xf92(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    v1 = _SafeSub(varg0, _balanceOf[v0]);\n    v2 = address(varg2);\n    _balanceOf[v2] = v1;\n    v3 = address(varg1);\n    v4 = _SafeAdd(varg0, _balanceOf[v3]);\n    v5 = address(varg1);\n    _balanceOf[v5] = v4;\n    emit Transfer(address(varg2), v5, varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        v0 = uint32(function_selector >> 224);\n        if (v0 == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == v0) {\n            approve(address,uint256);\n        } else if (0x18160ddd == v0) {\n            totalSupply();\n        } else if (0x23b872dd == v0) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == v0) {\n            withdraw(uint256);\n        } else if (0x313ce567 == v0) {\n            decimals();\n        } else if (0x54fd4d50 == v0) {\n            version();\n        } else if (0x57875631 == v0) {\n            setAccessPolicy(address,address);\n        } else if (0x70a08231 == v0) {\n            balanceOf(address);\n        } else if (0x95d89b41 == v0) {\n            symbol();\n        } else if (0xa9059cbb == v0) {\n            transfer(address,uint256);\n        } else if (0xbe45fd62 == v0) {\n            transfer(address,uint256,bytes);\n        } else if (0xcae9ca51 == v0) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xd0e30db0 == v0) {\n            deposit();\n        } else if (0xdd62ed3e == v0) {\n            allowance(address,address);\n        } else if (0xf5d60a51 == v0) {\n            accessPolicy();\n        } else if (0xfc772c8b == v0) {\n            reclaim(address);\n        }\n    }\n    revert();\n}\n.",
	"status": "1",
	"time_cost": 38.93185091018677,
	"usage": {
		"completion_tokens": 827,
		"prompt_tokens": 3464,
		"total_tokens": 4291
	}
}