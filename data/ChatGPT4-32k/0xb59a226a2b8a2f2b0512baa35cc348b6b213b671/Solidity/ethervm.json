{
	"address": "0xb59a226a2b8a2f2b0512baa35cc348b6b213b671",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code that corresponds to the provided decompiled code:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    address public accessPolicy;\n\n    function name() public view returns (string) {\n        return name;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply;\n    }\n\n    function decimals() public view returns (uint8) {\n        return decimals;\n    }\n\n    function version() public view returns (string) {\n        return \"1.0\";\n    }\n\n    function setAccessPolicy(address _policy, address _owner) public {\n        require(msg.sender == _owner);\n        accessPolicy = _policy;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function symbol() public view returns (string) {\n        return symbol;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n        totalSupply += msg.value;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function accessPolicy() public view returns (address) {\n        return accessPolicy;\n    }\n\n    function reclaim(address _owner) public {\n        require(msg.sender == _owner);\n        _owner.transfer(address(this).balance);\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n```\n\nPlease note that the above code is a rough estimation of the contract's logic based on the provided decompiled code. The exact variable names and data types may differ in the original contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700470824,
	"id": "chatcmpl-8MuQi8z5U5hCOprwKZRjMMCCUVU0O",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x00ed;\n            var1 = name();\n        \n        label_00ED:\n            var temp0 = memory[0x40:0x60];\n            var var2 = temp0;\n            memory[var2:var2 + 0x20] = 0x20;\n            var var3 = var2;\n            var temp1 = var3 + 0x20;\n            var temp2 = var1;\n            memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n            var var4 = temp1 + 0x20;\n            var var6 = memory[temp2:temp2 + 0x20];\n            var var5 = temp2 + 0x20;\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n            var var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_012A:\n                var temp3 = var6;\n                var4 = temp3 + var4;\n                var5 = temp3 & 0x1f;\n            \n                if (!var5) {\n                    var temp4 = memory[0x40:0x60];\n                    return memory[temp4:temp4 + var4 - temp4];\n                } else {\n                    var temp5 = var5;\n                    var temp6 = var4 - temp5;\n                    memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                    var temp7 = memory[0x40:0x60];\n                    return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                }\n            } else {\n            label_011A:\n                var temp8 = var10;\n                memory[var8 + temp8:var8 + temp8 + 0x20] = memory[var9 + temp8:var9 + temp8 + 0x20];\n                var10 = temp8 + 0x20;\n            \n                if (var10 >= var7) { goto label_012A; }\n                else { goto label_011A; }\n            }\n        } else if (var0 == 0x095ea7b3) {\n            // Dispatch table entry for approve(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var1 = approve(var2, var3);\n        \n        label_0187:\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = !!var1;\n            var temp10 = memory[0x40:0x60];\n            return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ae;\n            var1 = totalSupply();\n        \n        label_01AE:\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = var1;\n            var temp12 = memory[0x40:0x60];\n            return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n        } else if (var0 == 0x23b872dd) {\n            // Dispatch table entry for transferFrom(address,address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var temp13 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp13 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp13;\n            var4 = msg.data[0x44:0x64];\n            var temp14 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = var2 & temp14;\n            memory[0x20:0x40] = 0x03;\n            var temp15 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp14 & msg.sender;\n            memory[0x20:0x40] = temp15;\n            var5 = 0x00;\n            var6 = storage[keccak256(memory[var5:var5 + 0x40])];\n            var7 = 0x06ee;\n            var8 = var6;\n            var9 = var4;\n            var7 = func_0F7B(var8, var9);\n            var temp16 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = var2 & temp16;\n            memory[0x20:0x40] = 0x03;\n            var temp17 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp16 & msg.sender;\n            memory[0x20:0x40] = temp17;\n            storage[keccak256(memory[0x00:0x40])] = var7;\n            var7 = 0x0720;\n            var8 = var2;\n            var9 = var3;\n            var10 = var4;\n            func_0F92(var8, var9, var10);\n            var1 = 0x01;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x2e1a7d4d) {\n            // Dispatch table entry for withdraw(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0212;\n            var2 = msg.data[0x04:0x24];\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n        \n            if (storage[keccak256(memory[0x00:0x40])] < var2) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            var3 = 0x0776;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var5 = var2;\n            var3 = func_0F7B(var4, var5);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var3 = 0x079c;\n            var4 = storage[0x01];\n            var5 = var2;\n            var3 = func_0F7B(var4, var5);\n            storage[0x01] = var3;\n            var temp18 = var2;\n            var temp19 = memory[0x40:0x60];\n            var temp20;\n            temp20, memory[temp19:temp19 + 0x00] = address(msg.sender).call.gas(!temp18 * 0x08fc).value(temp18)(memory[temp19:temp19 + memory[0x40:0x60] - temp19]);\n        \n            if (!temp20) { revert(memory[0x00:0x00]); }\n        \n            var temp21 = var2;\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = temp21;\n            var temp23 = memory[0x40:0x60];\n            log(memory[temp23:temp23 + (temp22 + 0x20) - temp23], [0xb4214c8c54fc7442f36d3682f59aebaf09358a4431835b30efb29d52cf9e1e91, msg.sender]);\n            var temp24 = memory[0x40:0x60];\n            memory[temp24:temp24 + 0x20] = temp21;\n            var temp25 = memory[0x40:0x60];\n            log(memory[temp25:temp25 + (temp24 + 0x20) - temp25], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, 0x00]);\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0227;\n            var1 = decimals();\n            var temp26 = memory[0x40:0x60];\n            memory[temp26:temp26 + 0x20] = var1 & 0xff;\n            var temp27 = memory[0x40:0x60];\n            return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n        } else if (var0 == 0x54fd4d50) {\n            // Dispatch table entry for version()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00ed;\n            var1 = version();\n            goto label_00ED;\n        } else if (var0 == 0x57875631) {\n            // Dispatch table entry for setAccessPolicy(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0212;\n            var temp28 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp28 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp28;\n            setAccessPolicy(var2, var3);\n            stop();\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ae;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = balanceOf(var2);\n            goto label_01AE;\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00ed;\n            var1 = symbol();\n            goto label_00ED;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            goto label_0187;\n        } else if (var0 == 0xbe45fd62) {\n            // Dispatch table entry for transfer(address,uint256,bytes)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var temp29 = msg.data[0x44:0x64];\n            var temp30 = msg.data[temp29 + 0x04:temp29 + 0x04 + 0x20];\n            var temp31 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp31 + (temp30 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp31:temp31 + 0x20] = temp30;\n            memory[temp31 + 0x20:temp31 + 0x20 + temp30] = msg.data[temp29 + 0x24:temp29 + 0x24 + temp30];\n            var4 = temp31;\n            var1 = transfer(var2, var3, var4);\n            goto label_0187;\n        } else if (var0 == 0xcae9ca51) {\n            // Dispatch table entry for approveAndCall(address,uint256,bytes)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var temp32 = msg.data[0x44:0x64];\n            var temp33 = msg.data[temp32 + 0x04:temp32 + 0x04 + 0x20];\n            var temp34 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp34 + (temp33 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp34:temp34 + 0x20] = temp33;\n            memory[temp34 + 0x20:temp34 + 0x20 + temp33] = msg.data[temp32 + 0x24:temp32 + 0x24 + temp33];\n            var4 = temp34;\n            var1 = approveAndCall(var2, var3, var4);\n            goto label_0187;\n        } else if (var0 == 0xd0e30db0) {\n            // Dispatch table entry for deposit()\n            var1 = 0x0212;\n            deposit();\n            stop();\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ae;\n            var temp35 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp35 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp35;\n            var1 = allowance(var2, var3);\n            goto label_01AE;\n        } else if (var0 == 0xf5d60a51) {\n            // Dispatch table entry for accessPolicy()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0527;\n            var1 = accessPolicy();\n            var temp36 = memory[0x40:0x60];\n            memory[temp36:temp36 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            var temp37 = memory[0x40:0x60];\n            return memory[temp37:temp37 + (temp36 + 0x20) - temp37];\n        } else if (var0 == 0xfc772c8b) {\n            // Dispatch table entry for reclaim(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0212;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            reclaim(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var var0 = 0x056c;\n        var0 = func_12A6();\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x04;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_0602:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_05F9; }\n        \n        label_05E5:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_05E5; }\n        \n        label_05F9:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_0602;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp11 + 0x20;\n            goto label_0602;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !arg1;\n    \n        if (!var1) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x03;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_064A; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var1) {\n        label_064A:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x03;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function decimals() returns (var r0) { return storage[0x06] & 0xff; }\n    \n    function version() returns (var r0) {\n        var var0 = 0x0862;\n        var0 = func_12A6();\n        var temp0 = storage[0x07];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x07;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_0602:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_05F9; }\n        \n        label_05E5:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_05E5; }\n        \n        label_05F9:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_0602;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp11 + 0x20;\n            goto label_0602;\n        }\n    }\n    \n    function setAccessPolicy(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n        var var2 = storage[0x02] & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0x9085b77f;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = var1;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = msg.data[var0:var0 + 0x20] & ~(0x02 ** 0xe0 - 0x01) & ~(0x02 ** 0xe0 - 0x01);\n        var var4 = temp0 + 0x84;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var3 = 0x9085b77f;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = temp4 & arg1;\n        memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n        memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = temp4 & address(this);\n        memory[temp3 + 0x64:temp3 + 0x64 + 0x20] = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01) & ~(0x02 ** 0xe0 - 0x01);\n        var4 = temp3 + 0x84;\n        var5 = 0x20;\n        var6 = memory[0x40:0x60];\n        var7 = var4 - var6;\n        var8 = var6;\n        var9 = 0x00;\n        var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp5;\n        temp5, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (!temp5) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = storage[0x02];\n        var temp7 = 0x02 ** 0xa0 - 0x01;\n        var temp8 = arg0;\n        storage[0x02] = (temp6 & ~0xffffffffffffffffffffffffffffffffffffffff) | (temp7 & temp8);\n        var temp9 = memory[0x40:0x60];\n        var temp10 = 0x02 ** 0xa0 - 0x01;\n        memory[temp9:temp9 + 0x20] = temp10 & msg.sender;\n        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = temp10 & temp6 & temp7;\n        memory[temp9 + 0x40:temp9 + 0x40 + 0x20] = temp10 & temp8;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + (temp9 + 0x60) - temp11], [0x7d475c32583df95fccc34a6e12df24c1fc9943092cc129b6512013aecba0f136]);\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x0b54;\n        var0 = func_12A6();\n        var temp0 = storage[0x05];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x05;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_0602:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_05F9; }\n        \n        label_05E5:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_05E5; }\n        \n        label_05F9:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_0602;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp11 + 0x20;\n            var6 = var6;\n            goto label_0602;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0c02;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_0F92(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transfer(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0c19;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_0F92(var2, var3, var4);\n        var1 = 0x0c22;\n        var2 = arg0;\n        var1 = func_1056(var2);\n    \n        if (!var1) {\n        label_0D09:\n            return 0x01;\n        } else {\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0xa4c0ed36;\n            var3 = msg.sender;\n            var4 = arg1;\n            var temp0 = arg2;\n            var var5 = temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n            var temp2 = temp1 + 0x04;\n            var var6 = temp2;\n            memory[var6:var6 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var temp3 = var6 + 0x20;\n            memory[temp3:temp3 + 0x20] = var4;\n            var temp4 = temp3 + 0x20;\n            var var7 = temp4;\n            var temp5 = var7 + 0x20;\n            memory[var7:var7 + 0x20] = temp5 - var6;\n            memory[temp5:temp5 + 0x20] = memory[var5:var5 + 0x20];\n            var var8 = temp5 + 0x20;\n            var var10 = memory[var5:var5 + 0x20];\n            var var9 = var5 + 0x20;\n            var var11 = var10;\n            var var12 = var8;\n            var var13 = var9;\n            var var14 = 0x00;\n        \n            if (var14 >= var11) {\n            label_0CA7:\n                var temp6 = var10;\n                var8 = temp6 + var8;\n                var9 = temp6 & 0x1f;\n            \n                if (!var9) {\n                    var3 = var8;\n                    var4 = 0x00;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                \n                    if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n                \n                label_0CF4:\n                    var temp7;\n                    temp7, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n                \n                    if (temp7) { goto label_0D09; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp8 = var9;\n                    var temp9 = var8 - temp8;\n                    memory[temp9:temp9 + 0x20] = ~(0x0100 ** (0x20 - temp8) - 0x01) & memory[temp9:temp9 + 0x20];\n                    var3 = temp9 + 0x20;\n                    var4 = 0x00;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                \n                    if (address(var9).code.length) { goto label_0CF4; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_0C97:\n                var temp10 = var14;\n                memory[var12 + temp10:var12 + temp10 + 0x20] = memory[var13 + temp10:var13 + temp10 + 0x20];\n                var14 = temp10 + 0x20;\n            \n                if (var14 >= var11) { goto label_0CA7; }\n                else { goto label_0C97; }\n            }\n        }\n    }\n    \n    function approveAndCall(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0d21;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = approve(var3, var4);\n    \n        if (!var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var3 = 0x8f4ffcb1;\n        var4 = msg.sender;\n        var var5 = arg1;\n        var var6 = address(this);\n        var temp0 = arg2;\n        var var7 = temp0;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp2 = temp1 + 0x04;\n        var var8 = temp2;\n        memory[var8:var8 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp3 = var8 + 0x20;\n        memory[temp3:temp3 + 0x20] = var5;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = var6 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp4 + 0x20;\n        var var9 = temp5;\n        var temp6 = var9 + 0x20;\n        memory[var9:var9 + 0x20] = temp6 - var8;\n        memory[temp6:temp6 + 0x20] = memory[var7:var7 + 0x20];\n        var var10 = temp6 + 0x20;\n        var var12 = memory[var7:var7 + 0x20];\n        var var11 = var7 + 0x20;\n        var var13 = var12;\n        var var14 = var10;\n        var var15 = var11;\n        var var16 = 0x00;\n    \n        if (var16 >= var13) {\n        label_0DCE:\n            var temp7 = var12;\n            var10 = temp7 + var10;\n            var11 = temp7 & 0x1f;\n        \n            if (!var11) {\n                var4 = var10;\n                var5 = 0x20;\n                var6 = memory[0x40:0x60];\n                var7 = var4 - var6;\n                var8 = var6;\n                var9 = 0x00;\n                var10 = var2;\n            \n                if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n            \n            label_0E1C:\n                var temp8;\n                temp8, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n            \n                if (!temp8) { revert(memory[0x00:0x00]); }\n            \n                var1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            \n                if (var1) { return 0x01; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n                var temp9 = var11;\n                var temp10 = var10 - temp9;\n                memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                var4 = temp10 + 0x20;\n                var5 = 0x20;\n                var6 = memory[0x40:0x60];\n                var7 = var4 - var6;\n                var8 = var6;\n                var9 = 0x00;\n                var10 = var2;\n            \n                if (address(var10).code.length) { goto label_0E1C; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0DBE:\n            var temp11 = var16;\n            memory[var14 + temp11:var14 + temp11 + 0x20] = memory[var15 + temp11:var15 + temp11 + 0x20];\n            var16 = temp11 + 0x20;\n        \n            if (var16 >= var13) { goto label_0DCE; }\n            else { goto label_0DBE; }\n        }\n    }\n    \n    function deposit() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x0e74;\n        var var2 = msg.value;\n        var0 = func_1065(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x01];\n        var0 = 0x0e9a;\n        var2 = msg.value;\n        var0 = func_1065(var1, var2);\n        storage[0x01] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x1b851e1031ef35a238e6c67d0c7991162390df915f70eaf9098dbf0b175a6198, msg.sender]);\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = msg.value;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, msg.sender]);\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function accessPolicy() returns (var r0) { return storage[0x02] & 0x02 ** 0xa0 - 0x01; }\n    \n    function reclaim(var arg0) {\n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x084d;\n        var var1 = arg0;\n        func_107F(var1);\n    }\n    \n    function func_0F7B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0F92(var arg0, var arg1, var arg2) {\n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var var0 = 0x0fca;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg2;\n        var0 = func_0F7B(var1, var2);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        memory[0x00:0x20] = arg1 & temp0;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x0ff9;\n        var2 = arg2;\n        var0 = func_1065(var1, var2);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg1 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = arg2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_1056(var arg0) returns (var r0) { return address(arg0).code.length > 0x00; }\n    \n    function func_1065(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_107F(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5;\n        var var3 = storage[0x02] & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x9085b77f;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = var1;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = var2;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = msg.data[var1:var1 + 0x20] & ~(0x02 ** 0xe0 - 0x01) & ~(0x02 ** 0xe0 - 0x01);\n        var var5 = temp0 + 0x84;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var4 = 0x70a08231;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = address(this);\n            var5 = temp3 + 0x24;\n            var6 = 0x20;\n            var7 = memory[0x40:0x60];\n            var8 = var5 - var7;\n            var9 = var7;\n            var10 = 0x00;\n            var11 = var3;\n        \n            if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp4;\n            temp4, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n        \n            if (!temp4) { revert(memory[0x00:0x00]); }\n        \n            var temp5 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            var1 = temp5;\n            var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var4 = 0xa9059cbb;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = var1;\n            var5 = temp6 + 0x44;\n            var6 = 0x20;\n            var7 = memory[0x40:0x60];\n            var8 = var5 - var7;\n            var9 = var7;\n            var10 = 0x00;\n            var11 = var3;\n        \n            if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp7;\n            temp7, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n        \n            if (!temp7) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n        label_0B26:\n            return;\n        } else {\n            var temp8 = address(this).balance;\n            var temp9 = memory[0x40:0x60];\n            var temp10;\n            temp10, memory[temp9:temp9 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp8 * 0x08fc).value(temp8)(memory[temp9:temp9 + memory[0x40:0x60] - temp9]);\n        \n            if (temp10) { goto label_0B26; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_12A6() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x00ed;\n            var1 = name();\n        \n        label_00ED:\n            var temp0 = memory[0x40:0x60];\n            var var2 = temp0;\n            memory[var2:var2 + 0x20] = 0x20;\n            var var3 = var2;\n            var temp1 = var3 + 0x20;\n            var temp2 = var1;\n            memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n            var var4 = temp1 + 0x20;\n            var var6 = memory[temp2:temp2 + 0x20];\n            var var5 = temp2 + 0x20;\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n            var var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_012A:\n                var temp3 = var6;\n                var4 = temp3 + var4;\n                var5 = temp3 & 0x1f;\n            \n                if (!var5) {\n                    var temp4 = memory[0x40:0x60];\n                    return memory[temp4:temp4 + var4 - temp4];\n                } else {\n                    var temp5 = var5;\n                    var temp6 = var4 - temp5;\n                    memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                    var temp7 = memory[0x40:0x60];\n                    return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                }\n            } else {\n            label_011A:\n                var temp8 = var10;\n                memory[var8 + temp8:var8 + temp8 + 0x20] = memory[var9 + temp8:var9 + temp8 + 0x20];\n                var10 = temp8 + 0x20;\n            \n                if (var10 >= var7) { goto label_012A; }\n                else { goto label_011A; }\n            }\n        } else if (var0 == 0x095ea7b3) {\n            // Dispatch table entry for approve(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var1 = approve(var2, var3);\n        \n        label_0187:\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = !!var1;\n            var temp10 = memory[0x40:0x60];\n            return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ae;\n            var1 = totalSupply();\n        \n        label_01AE:\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = var1;\n            var temp12 = memory[0x40:0x60];\n            return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n        } else if (var0 == 0x23b872dd) {\n            // Dispatch table entry for transferFrom(address,address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var temp13 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp13 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp13;\n            var4 = msg.data[0x44:0x64];\n            var temp14 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = var2 & temp14;\n            memory[0x20:0x40] = 0x03;\n            var temp15 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp14 & msg.sender;\n            memory[0x20:0x40] = temp15;\n            var5 = 0x00;\n            var6 = storage[keccak256(memory[var5:var5 + 0x40])];\n            var7 = 0x06ee;\n            var8 = var6;\n            var9 = var4;\n            var7 = func_0F7B(var8, var9);\n            var temp16 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = var2 & temp16;\n            memory[0x20:0x40] = 0x03;\n            var temp17 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp16 & msg.sender;\n            memory[0x20:0x40] = temp17;\n            storage[keccak256(memory[0x00:0x40])] = var7;\n            var7 = 0x0720;\n            var8 = var2;\n            var9 = var3;\n            var10 = var4;\n            func_0F92(var8, var9, var10);\n            var1 = 0x01;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x2e1a7d4d) {\n            // Dispatch table entry for withdraw(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0212;\n            var2 = msg.data[0x04:0x24];\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n        \n            if (storage[keccak256(memory[0x00:0x40])] < var2) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            var3 = 0x0776;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var5 = var2;\n            var3 = func_0F7B(var4, var5);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var3 = 0x079c;\n            var4 = storage[0x01];\n            var5 = var2;\n            var3 = func_0F7B(var4, var5);\n            storage[0x01] = var3;\n            var temp18 = var2;\n            var temp19 = memory[0x40:0x60];\n            var temp20;\n            temp20, memory[temp19:temp19 + 0x00] = address(msg.sender).call.gas(!temp18 * 0x08fc).value(temp18)(memory[temp19:temp19 + memory[0x40:0x60] - temp19]);\n        \n            if (!temp20) { revert(memory[0x00:0x00]); }\n        \n            var temp21 = var2;\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = temp21;\n            var temp23 = memory[0x40:0x60];\n            log(memory[temp23:temp23 + (temp22 + 0x20) - temp23], [0xb4214c8c54fc7442f36d3682f59aebaf09358a4431835b30efb29d52cf9e1e91, msg.sender]);\n            var temp24 = memory[0x40:0x60];\n            memory[temp24:temp24 + 0x20] = temp21;\n            var temp25 = memory[0x40:0x60];\n            log(memory[temp25:temp25 + (temp24 + 0x20) - temp25], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, 0x00]);\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0227;\n            var1 = decimals();\n            var temp26 = memory[0x40:0x60];\n            memory[temp26:temp26 + 0x20] = var1 & 0xff;\n            var temp27 = memory[0x40:0x60];\n            return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n        } else if (var0 == 0x54fd4d50) {\n            // Dispatch table entry for version()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00ed;\n            var1 = version();\n            goto label_00ED;\n        } else if (var0 == 0x57875631) {\n            // Dispatch table entry for setAccessPolicy(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0212;\n            var temp28 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp28 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp28;\n            setAccessPolicy(var2, var3);\n            stop();\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ae;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = balanceOf(var2);\n            goto label_01AE;\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00ed;\n            var1 = symbol();\n            goto label_00ED;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            goto label_0187;\n        } else if (var0 == 0xbe45fd62) {\n            // Dispatch table entry for transfer(address,uint256,bytes)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var temp29 = msg.data[0x44:0x64];\n            var temp30 = msg.data[temp29 + 0x04:temp29 + 0x04 + 0x20];\n            var temp31 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp31 + (temp30 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp31:temp31 + 0x20] = temp30;\n            memory[temp31 + 0x20:temp31 + 0x20 + temp30] = msg.data[temp29 + 0x24:temp29 + 0x24 + temp30];\n            var4 = temp31;\n            var1 = transfer(var2, var3, var4);\n            goto label_0187;\n        } else if (var0 == 0xcae9ca51) {\n            // Dispatch table entry for approveAndCall(address,uint256,bytes)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var temp32 = msg.data[0x44:0x64];\n            var temp33 = msg.data[temp32 + 0x04:temp32 + 0x04 + 0x20];\n            var temp34 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp34 + (temp33 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp34:temp34 + 0x20] = temp33;\n            memory[temp34 + 0x20:temp34 + 0x20 + temp33] = msg.data[temp32 + 0x24:temp32 + 0x24 + temp33];\n            var4 = temp34;\n            var1 = approveAndCall(var2, var3, var4);\n            goto label_0187;\n        } else if (var0 == 0xd0e30db0) {\n            // Dispatch table entry for deposit()\n            var1 = 0x0212;\n            deposit();\n            stop();\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ae;\n            var temp35 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp35 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp35;\n            var1 = allowance(var2, var3);\n            goto label_01AE;\n        } else if (var0 == 0xf5d60a51) {\n            // Dispatch table entry for accessPolicy()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0527;\n            var1 = accessPolicy();\n            var temp36 = memory[0x40:0x60];\n            memory[temp36:temp36 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            var temp37 = memory[0x40:0x60];\n            return memory[temp37:temp37 + (temp36 + 0x20) - temp37];\n        } else if (var0 == 0xfc772c8b) {\n            // Dispatch table entry for reclaim(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0212;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            reclaim(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var var0 = 0x056c;\n        var0 = func_12A6();\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x04;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_0602:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_05F9; }\n        \n        label_05E5:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_05E5; }\n        \n        label_05F9:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_0602;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp11 + 0x20;\n            goto label_0602;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !arg1;\n    \n        if (!var1) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x03;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_064A; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var1) {\n        label_064A:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x03;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function decimals() returns (var r0) { return storage[0x06] & 0xff; }\n    \n    function version() returns (var r0) {\n        var var0 = 0x0862;\n        var0 = func_12A6();\n        var temp0 = storage[0x07];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x07;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_0602:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_05F9; }\n        \n        label_05E5:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_05E5; }\n        \n        label_05F9:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_0602;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp11 + 0x20;\n            goto label_0602;\n        }\n    }\n    \n    function setAccessPolicy(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n        var var2 = storage[0x02] & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0x9085b77f;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = var1;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = msg.data[var0:var0 + 0x20] & ~(0x02 ** 0xe0 - 0x01) & ~(0x02 ** 0xe0 - 0x01);\n        var var4 = temp0 + 0x84;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var3 = 0x9085b77f;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = temp4 & arg1;\n        memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n        memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = temp4 & address(this);\n        memory[temp3 + 0x64:temp3 + 0x64 + 0x20] = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01) & ~(0x02 ** 0xe0 - 0x01);\n        var4 = temp3 + 0x84;\n        var5 = 0x20;\n        var6 = memory[0x40:0x60];\n        var7 = var4 - var6;\n        var8 = var6;\n        var9 = 0x00;\n        var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp5;\n        temp5, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (!temp5) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = storage[0x02];\n        var temp7 = 0x02 ** 0xa0 - 0x01;\n        var temp8 = arg0;\n        storage[0x02] = (temp6 & ~0xffffffffffffffffffffffffffffffffffffffff) | (temp7 & temp8);\n        var temp9 = memory[0x40:0x60];\n        var temp10 = 0x02 ** 0xa0 - 0x01;\n        memory[temp9:temp9 + 0x20] = temp10 & msg.sender;\n        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = temp10 & temp6 & temp7;\n        memory[temp9 + 0x40:temp9 + 0x40 + 0x20] = temp10 & temp8;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + (temp9 + 0x60) - temp11], [0x7d475c32583df95fccc34a6e12df24c1fc9943092cc129b6512013aecba0f136]);\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x0b54;\n        var0 = func_12A6();\n        var temp0 = storage[0x05];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x05;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_0602:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_05F9; }\n        \n        label_05E5:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_05E5; }\n        \n        label_05F9:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_0602;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp11 + 0x20;\n            var6 = var6;\n            goto label_0602;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0c02;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_0F92(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transfer(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0c19;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_0F92(var2, var3, var4);\n        var1 = 0x0c22;\n        var2 = arg0;\n        var1 = func_1056(var2);\n    \n        if (!var1) {\n        label_0D09:\n            return 0x01;\n        } else {\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0xa4c0ed36;\n            var3 = msg.sender;\n            var4 = arg1;\n            var temp0 = arg2;\n            var var5 = temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n            var temp2 = temp1 + 0x04;\n            var var6 = temp2;\n            memory[var6:var6 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var temp3 = var6 + 0x20;\n            memory[temp3:temp3 + 0x20] = var4;\n            var temp4 = temp3 + 0x20;\n            var var7 = temp4;\n            var temp5 = var7 + 0x20;\n            memory[var7:var7 + 0x20] = temp5 - var6;\n            memory[temp5:temp5 + 0x20] = memory[var5:var5 + 0x20];\n            var var8 = temp5 + 0x20;\n            var var10 = memory[var5:var5 + 0x20];\n            var var9 = var5 + 0x20;\n            var var11 = var10;\n            var var12 = var8;\n            var var13 = var9;\n            var var14 = 0x00;\n        \n            if (var14 >= var11) {\n            label_0CA7:\n                var temp6 = var10;\n                var8 = temp6 + var8;\n                var9 = temp6 & 0x1f;\n            \n                if (!var9) {\n                    var3 = var8;\n                    var4 = 0x00;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                \n                    if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n                \n                label_0CF4:\n                    var temp7;\n                    temp7, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n                \n                    if (temp7) { goto label_0D09; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp8 = var9;\n                    var temp9 = var8 - temp8;\n                    memory[temp9:temp9 + 0x20] = ~(0x0100 ** (0x20 - temp8) - 0x01) & memory[temp9:temp9 + 0x20];\n                    var3 = temp9 + 0x20;\n                    var4 = 0x00;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                \n                    if (address(var9).code.length) { goto label_0CF4; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_0C97:\n                var temp10 = var14;\n                memory[var12 + temp10:var12 + temp10 + 0x20] = memory[var13 + temp10:var13 + temp10 + 0x20];\n                var14 = temp10 + 0x20;\n            \n                if (var14 >= var11) { goto label_0CA7; }\n                else { goto label_0C97; }\n            }\n        }\n    }\n    \n    function approveAndCall(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0d21;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = approve(var3, var4);\n    \n        if (!var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var3 = 0x8f4ffcb1;\n        var4 = msg.sender;\n        var var5 = arg1;\n        var var6 = address(this);\n        var temp0 = arg2;\n        var var7 = temp0;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp2 = temp1 + 0x04;\n        var var8 = temp2;\n        memory[var8:var8 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp3 = var8 + 0x20;\n        memory[temp3:temp3 + 0x20] = var5;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = var6 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp4 + 0x20;\n        var var9 = temp5;\n        var temp6 = var9 + 0x20;\n        memory[var9:var9 + 0x20] = temp6 - var8;\n        memory[temp6:temp6 + 0x20] = memory[var7:var7 + 0x20];\n        var var10 = temp6 + 0x20;\n        var var12 = memory[var7:var7 + 0x20];\n        var var11 = var7 + 0x20;\n        var var13 = var12;\n        var var14 = var10;\n        var var15 = var11;\n        var var16 = 0x00;\n    \n        if (var16 >= var13) {\n        label_0DCE:\n            var temp7 = var12;\n            var10 = temp7 + var10;\n            var11 = temp7 & 0x1f;\n        \n            if (!var11) {\n                var4 = var10;\n                var5 = 0x20;\n                var6 = memory[0x40:0x60];\n                var7 = var4 - var6;\n                var8 = var6;\n                var9 = 0x00;\n                var10 = var2;\n            \n                if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n            \n            label_0E1C:\n                var temp8;\n                temp8, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n            \n                if (!temp8) { revert(memory[0x00:0x00]); }\n            \n                var1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            \n                if (var1) { return 0x01; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n                var temp9 = var11;\n                var temp10 = var10 - temp9;\n                memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                var4 = temp10 + 0x20;\n                var5 = 0x20;\n                var6 = memory[0x40:0x60];\n                var7 = var4 - var6;\n                var8 = var6;\n                var9 = 0x00;\n                var10 = var2;\n            \n                if (address(var10).code.length) { goto label_0E1C; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0DBE:\n            var temp11 = var16;\n            memory[var14 + temp11:var14 + temp11 + 0x20] = memory[var15 + temp11:var15 + temp11 + 0x20];\n            var16 = temp11 + 0x20;\n        \n            if (var16 >= var13) { goto label_0DCE; }\n            else { goto label_0DBE; }\n        }\n    }\n    \n    function deposit() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x0e74;\n        var var2 = msg.value;\n        var0 = func_1065(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x01];\n        var0 = 0x0e9a;\n        var2 = msg.value;\n        var0 = func_1065(var1, var2);\n        storage[0x01] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x1b851e1031ef35a238e6c67d0c7991162390df915f70eaf9098dbf0b175a6198, msg.sender]);\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = msg.value;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, msg.sender]);\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function accessPolicy() returns (var r0) { return storage[0x02] & 0x02 ** 0xa0 - 0x01; }\n    \n    function reclaim(var arg0) {\n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x084d;\n        var var1 = arg0;\n        func_107F(var1);\n    }\n    \n    function func_0F7B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0F92(var arg0, var arg1, var arg2) {\n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var var0 = 0x0fca;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg2;\n        var0 = func_0F7B(var1, var2);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        memory[0x00:0x20] = arg1 & temp0;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x0ff9;\n        var2 = arg2;\n        var0 = func_1065(var1, var2);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg1 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = arg2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_1056(var arg0) returns (var r0) { return address(arg0).code.length > 0x00; }\n    \n    function func_1065(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_107F(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5;\n        var var3 = storage[0x02] & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x9085b77f;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = var1;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = var2;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = msg.data[var1:var1 + 0x20] & ~(0x02 ** 0xe0 - 0x01) & ~(0x02 ** 0xe0 - 0x01);\n        var var5 = temp0 + 0x84;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var4 = 0x70a08231;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = address(this);\n            var5 = temp3 + 0x24;\n            var6 = 0x20;\n            var7 = memory[0x40:0x60];\n            var8 = var5 - var7;\n            var9 = var7;\n            var10 = 0x00;\n            var11 = var3;\n        \n            if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp4;\n            temp4, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n        \n            if (!temp4) { revert(memory[0x00:0x00]); }\n        \n            var temp5 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            var1 = temp5;\n            var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var4 = 0xa9059cbb;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = var1;\n            var5 = temp6 + 0x44;\n            var6 = 0x20;\n            var7 = memory[0x40:0x60];\n            var8 = var5 - var7;\n            var9 = var7;\n            var10 = 0x00;\n            var11 = var3;\n        \n            if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp7;\n            temp7, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n        \n            if (!temp7) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n        label_0B26:\n            return;\n        } else {\n            var temp8 = address(this).balance;\n            var temp9 = memory[0x40:0x60];\n            var temp10;\n            temp10, memory[temp9:temp9 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp8 * 0x08fc).value(temp8)(memory[temp9:temp9 + memory[0x40:0x60] - temp9]);\n        \n            if (temp10) { goto label_0B26; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_12A6() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x00ed;\n            var1 = name();\n        \n        label_00ED:\n            var temp0 = memory[0x40:0x60];\n            var var2 = temp0;\n            memory[var2:var2 + 0x20] = 0x20;\n            var var3 = var2;\n            var temp1 = var3 + 0x20;\n            var temp2 = var1;\n            memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n            var var4 = temp1 + 0x20;\n            var var6 = memory[temp2:temp2 + 0x20];\n            var var5 = temp2 + 0x20;\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n            var var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_012A:\n                var temp3 = var6;\n                var4 = temp3 + var4;\n                var5 = temp3 & 0x1f;\n            \n                if (!var5) {\n                    var temp4 = memory[0x40:0x60];\n                    return memory[temp4:temp4 + var4 - temp4];\n                } else {\n                    var temp5 = var5;\n                    var temp6 = var4 - temp5;\n                    memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                    var temp7 = memory[0x40:0x60];\n                    return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                }\n            } else {\n            label_011A:\n                var temp8 = var10;\n                memory[var8 + temp8:var8 + temp8 + 0x20] = memory[var9 + temp8:var9 + temp8 + 0x20];\n                var10 = temp8 + 0x20;\n            \n                if (var10 >= var7) { goto label_012A; }\n                else { goto label_011A; }\n            }\n        } else if (var0 == 0x095ea7b3) {\n            // Dispatch table entry for approve(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var1 = approve(var2, var3);\n        \n        label_0187:\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = !!var1;\n            var temp10 = memory[0x40:0x60];\n            return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ae;\n            var1 = totalSupply();\n        \n        label_01AE:\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = var1;\n            var temp12 = memory[0x40:0x60];\n            return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n        } else if (var0 == 0x23b872dd) {\n            // Dispatch table entry for transferFrom(address,address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var temp13 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp13 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp13;\n            var4 = msg.data[0x44:0x64];\n            var temp14 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = var2 & temp14;\n            memory[0x20:0x40] = 0x03;\n            var temp15 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp14 & msg.sender;\n            memory[0x20:0x40] = temp15;\n            var5 = 0x00;\n            var6 = storage[keccak256(memory[var5:var5 + 0x40])];\n            var7 = 0x06ee;\n            var8 = var6;\n            var9 = var4;\n            var7 = func_0F7B(var8, var9);\n            var temp16 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = var2 & temp16;\n            memory[0x20:0x40] = 0x03;\n            var temp17 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp16 & msg.sender;\n            memory[0x20:0x40] = temp17;\n            storage[keccak256(memory[0x00:0x40])] = var7;\n            var7 = 0x0720;\n            var8 = var2;\n            var9 = var3;\n            var10 = var4;\n            func_0F92(var8, var9, var10);\n            var1 = 0x01;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x2e1a7d4d) {\n            // Dispatch table entry for withdraw(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0212;\n            var2 = msg.data[0x04:0x24];\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n        \n            if (storage[keccak256(memory[0x00:0x40])] < var2) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            var3 = 0x0776;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var5 = var2;\n            var3 = func_0F7B(var4, var5);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var3 = 0x079c;\n            var4 = storage[0x01];\n            var5 = var2;\n            var3 = func_0F7B(var4, var5);\n            storage[0x01] = var3;\n            var temp18 = var2;\n            var temp19 = memory[0x40:0x60];\n            var temp20;\n            temp20, memory[temp19:temp19 + 0x00] = address(msg.sender).call.gas(!temp18 * 0x08fc).value(temp18)(memory[temp19:temp19 + memory[0x40:0x60] - temp19]);\n        \n            if (!temp20) { revert(memory[0x00:0x00]); }\n        \n            var temp21 = var2;\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = temp21;\n            var temp23 = memory[0x40:0x60];\n            log(memory[temp23:temp23 + (temp22 + 0x20) - temp23], [0xb4214c8c54fc7442f36d3682f59aebaf09358a4431835b30efb29d52cf9e1e91, msg.sender]);\n            var temp24 = memory[0x40:0x60];\n            memory[temp24:temp24 + 0x20] = temp21;\n            var temp25 = memory[0x40:0x60];\n            log(memory[temp25:temp25 + (temp24 + 0x20) - temp25], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, 0x00]);\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0227;\n            var1 = decimals();\n            var temp26 = memory[0x40:0x60];\n            memory[temp26:temp26 + 0x20] = var1 & 0xff;\n            var temp27 = memory[0x40:0x60];\n            return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n        } else if (var0 == 0x54fd4d50) {\n            // Dispatch table entry for version()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00ed;\n            var1 = version();\n            goto label_00ED;\n        } else if (var0 == 0x57875631) {\n            // Dispatch table entry for setAccessPolicy(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0212;\n            var temp28 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp28 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp28;\n            setAccessPolicy(var2, var3);\n            stop();\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ae;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = balanceOf(var2);\n            goto label_01AE;\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00ed;\n            var1 = symbol();\n            goto label_00ED;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            goto label_0187;\n        } else if (var0 == 0xbe45fd62) {\n            // Dispatch table entry for transfer(address,uint256,bytes)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var temp29 = msg.data[0x44:0x64];\n            var temp30 = msg.data[temp29 + 0x04:temp29 + 0x04 + 0x20];\n            var temp31 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp31 + (temp30 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp31:temp31 + 0x20] = temp30;\n            memory[temp31 + 0x20:temp31 + 0x20 + temp30] = msg.data[temp29 + 0x24:temp29 + 0x24 + temp30];\n            var4 = temp31;\n            var1 = transfer(var2, var3, var4);\n            goto label_0187;\n        } else if (var0 == 0xcae9ca51) {\n            // Dispatch table entry for approveAndCall(address,uint256,bytes)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var temp32 = msg.data[0x44:0x64];\n            var temp33 = msg.data[temp32 + 0x04:temp32 + 0x04 + 0x20];\n            var temp34 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp34 + (temp33 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp34:temp34 + 0x20] = temp33;\n            memory[temp34 + 0x20:temp34 + 0x20 + temp33] = msg.data[temp32 + 0x24:temp32 + 0x24 + temp33];\n            var4 = temp34;\n            var1 = approveAndCall(var2, var3, var4);\n            goto label_0187;\n        } else if (var0 == 0xd0e30db0) {\n            // Dispatch table entry for deposit()\n            var1 = 0x0212;\n            deposit();\n            stop();\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ae;\n            var temp35 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp35 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp35;\n            var1 = allowance(var2, var3);\n            goto label_01AE;\n        } else if (var0 == 0xf5d60a51) {\n            // Dispatch table entry for accessPolicy()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0527;\n            var1 = accessPolicy();\n            var temp36 = memory[0x40:0x60];\n            memory[temp36:temp36 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            var temp37 = memory[0x40:0x60];\n            return memory[temp37:temp37 + (temp36 + 0x20) - temp37];\n        } else if (var0 == 0xfc772c8b) {\n            // Dispatch table entry for reclaim(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0212;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            reclaim(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var var0 = 0x056c;\n        var0 = func_12A6();\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x04;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_0602:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_05F9; }\n        \n        label_05E5:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_05E5; }\n        \n        label_05F9:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_0602;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp11 + 0x20;\n            goto label_0602;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !arg1;\n    \n        if (!var1) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x03;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_064A; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var1) {\n        label_064A:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x03;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function decimals() returns (var r0) { return storage[0x06] & 0xff; }\n    \n    function version() returns (var r0) {\n        var var0 = 0x0862;\n        var0 = func_12A6();\n        var temp0 = storage[0x07];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x07;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_0602:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_05F9; }\n        \n        label_05E5:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_05E5; }\n        \n        label_05F9:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_0602;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp11 + 0x20;\n            goto label_0602;\n        }\n    }\n    \n    function setAccessPolicy(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n        var var2 = storage[0x02] & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0x9085b77f;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = var1;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = msg.data[var0:var0 + 0x20] & ~(0x02 ** 0xe0 - 0x01) & ~(0x02 ** 0xe0 - 0x01);\n        var var4 = temp0 + 0x84;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var3 = 0x9085b77f;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = temp4 & arg1;\n        memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n        memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = temp4 & address(this);\n        memory[temp3 + 0x64:temp3 + 0x64 + 0x20] = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01) & ~(0x02 ** 0xe0 - 0x01);\n        var4 = temp3 + 0x84;\n        var5 = 0x20;\n        var6 = memory[0x40:0x60];\n        var7 = var4 - var6;\n        var8 = var6;\n        var9 = 0x00;\n        var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp5;\n        temp5, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (!temp5) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = storage[0x02];\n        var temp7 = 0x02 ** 0xa0 - 0x01;\n        var temp8 = arg0;\n        storage[0x02] = (temp6 & ~0xffffffffffffffffffffffffffffffffffffffff) | (temp7 & temp8);\n        var temp9 = memory[0x40:0x60];\n        var temp10 = 0x02 ** 0xa0 - 0x01;\n        memory[temp9:temp9 + 0x20] = temp10 & msg.sender;\n        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = temp10 & temp6 & temp7;\n        memory[temp9 + 0x40:temp9 + 0x40 + 0x20] = temp10 & temp8;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + (temp9 + 0x60) - temp11], [0x7d475c32583df95fccc34a6e12df24c1fc9943092cc129b6512013aecba0f136]);\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x0b54;\n        var0 = func_12A6();\n        var temp0 = storage[0x05];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x05;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_0602:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_05F9; }\n        \n        label_05E5:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_05E5; }\n        \n        label_05F9:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_0602;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp11 + 0x20;\n            var6 = var6;\n            goto label_0602;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0c02;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_0F92(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transfer(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0c19;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_0F92(var2, var3, var4);\n        var1 = 0x0c22;\n        var2 = arg0;\n        var1 = func_1056(var2);\n    \n        if (!var1) {\n        label_0D09:\n            return 0x01;\n        } else {\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0xa4c0ed36;\n            var3 = msg.sender;\n            var4 = arg1;\n            var temp0 = arg2;\n            var var5 = temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n            var temp2 = temp1 + 0x04;\n            var var6 = temp2;\n            memory[var6:var6 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var temp3 = var6 + 0x20;\n            memory[temp3:temp3 + 0x20] = var4;\n            var temp4 = temp3 + 0x20;\n            var var7 = temp4;\n            var temp5 = var7 + 0x20;\n            memory[var7:var7 + 0x20] = temp5 - var6;\n            memory[temp5:temp5 + 0x20] = memory[var5:var5 + 0x20];\n            var var8 = temp5 + 0x20;\n            var var10 = memory[var5:var5 + 0x20];\n            var var9 = var5 + 0x20;\n            var var11 = var10;\n            var var12 = var8;\n            var var13 = var9;\n            var var14 = 0x00;\n        \n            if (var14 >= var11) {\n            label_0CA7:\n                var temp6 = var10;\n                var8 = temp6 + var8;\n                var9 = temp6 & 0x1f;\n            \n                if (!var9) {\n                    var3 = var8;\n                    var4 = 0x00;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                \n                    if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n                \n                label_0CF4:\n                    var temp7;\n                    temp7, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n                \n                    if (temp7) { goto label_0D09; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp8 = var9;\n                    var temp9 = var8 - temp8;\n                    memory[temp9:temp9 + 0x20] = ~(0x0100 ** (0x20 - temp8) - 0x01) & memory[temp9:temp9 + 0x20];\n                    var3 = temp9 + 0x20;\n                    var4 = 0x00;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                \n                    if (address(var9).code.length) { goto label_0CF4; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_0C97:\n                var temp10 = var14;\n                memory[var12 + temp10:var12 + temp10 + 0x20] = memory[var13 + temp10:var13 + temp10 + 0x20];\n                var14 = temp10 + 0x20;\n            \n                if (var14 >= var11) { goto label_0CA7; }\n                else { goto label_0C97; }\n            }\n        }\n    }\n    \n    function approveAndCall(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0d21;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = approve(var3, var4);\n    \n        if (!var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var3 = 0x8f4ffcb1;\n        var4 = msg.sender;\n        var var5 = arg1;\n        var var6 = address(this);\n        var temp0 = arg2;\n        var var7 = temp0;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp2 = temp1 + 0x04;\n        var var8 = temp2;\n        memory[var8:var8 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp3 = var8 + 0x20;\n        memory[temp3:temp3 + 0x20] = var5;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = var6 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp4 + 0x20;\n        var var9 = temp5;\n        var temp6 = var9 + 0x20;\n        memory[var9:var9 + 0x20] = temp6 - var8;\n        memory[temp6:temp6 + 0x20] = memory[var7:var7 + 0x20];\n        var var10 = temp6 + 0x20;\n        var var12 = memory[var7:var7 + 0x20];\n        var var11 = var7 + 0x20;\n        var var13 = var12;\n        var var14 = var10;\n        var var15 = var11;\n        var var16 = 0x00;\n    \n        if (var16 >= var13) {\n        label_0DCE:\n            var temp7 = var12;\n            var10 = temp7 + var10;\n            var11 = temp7 & 0x1f;\n        \n            if (!var11) {\n                var4 = var10;\n                var5 = 0x20;\n                var6 = memory[0x40:0x60];\n                var7 = var4 - var6;\n                var8 = var6;\n                var9 = 0x00;\n                var10 = var2;\n            \n                if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n            \n            label_0E1C:\n                var temp8;\n                temp8, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n            \n                if (!temp8) { revert(memory[0x00:0x00]); }\n            \n                var1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            \n                if (var1) { return 0x01; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n                var temp9 = var11;\n                var temp10 = var10 - temp9;\n                memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                var4 = temp10 + 0x20;\n                var5 = 0x20;\n                var6 = memory[0x40:0x60];\n                var7 = var4 - var6;\n                var8 = var6;\n                var9 = 0x00;\n                var10 = var2;\n            \n                if (address(var10).code.length) { goto label_0E1C; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0DBE:\n            var temp11 = var16;\n            memory[var14 + temp11:var14 + temp11 + 0x20] = memory[var15 + temp11:var15 + temp11 + 0x20];\n            var16 = temp11 + 0x20;\n        \n            if (var16 >= var13) { goto label_0DCE; }\n            else { goto label_0DBE; }\n        }\n    }\n    \n    function deposit() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x0e74;\n        var var2 = msg.value;\n        var0 = func_1065(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x01];\n        var0 = 0x0e9a;\n        var2 = msg.value;\n        var0 = func_1065(var1, var2);\n        storage[0x01] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x1b851e1031ef35a238e6c67d0c7991162390df915f70eaf9098dbf0b175a6198, msg.sender]);\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = msg.value;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, msg.sender]);\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function accessPolicy() returns (var r0) { return storage[0x02] & 0x02 ** 0xa0 - 0x01; }\n    \n    function reclaim(var arg0) {\n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x084d;\n        var var1 = arg0;\n        func_107F(var1);\n    }\n    \n    function func_0F7B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0F92(var arg0, var arg1, var arg2) {\n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var var0 = 0x0fca;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg2;\n        var0 = func_0F7B(var1, var2);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        memory[0x00:0x20] = arg1 & temp0;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x0ff9;\n        var2 = arg2;\n        var0 = func_1065(var1, var2);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg1 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = arg2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_1056(var arg0) returns (var r0) { return address(arg0).code.length > 0x00; }\n    \n    function func_1065(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_107F(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5;\n        var var3 = storage[0x02] & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x9085b77f;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = var1;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = var2;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = msg.data[var1:var1 + 0x20] & ~(0x02 ** 0xe0 - 0x01) & ~(0x02 ** 0xe0 - 0x01);\n        var var5 = temp0 + 0x84;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var4 = 0x70a08231;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = address(this);\n            var5 = temp3 + 0x24;\n            var6 = 0x20;\n            var7 = memory[0x40:0x60];\n            var8 = var5 - var7;\n            var9 = var7;\n            var10 = 0x00;\n            var11 = var3;\n        \n            if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp4;\n            temp4, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n        \n            if (!temp4) { revert(memory[0x00:0x00]); }\n        \n            var temp5 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            var1 = temp5;\n            var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var4 = 0xa9059cbb;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = var1;\n            var5 = temp6 + 0x44;\n            var6 = 0x20;\n            var7 = memory[0x40:0x60];\n            var8 = var5 - var7;\n            var9 = var7;\n            var10 = 0x00;\n            var11 = var3;\n        \n            if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp7;\n            temp7, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n        \n            if (!temp7) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n        label_0B26:\n            return;\n        } else {\n            var temp8 = address(this).balance;\n            var temp9 = memory[0x40:0x60];\n            var temp10;\n            temp10, memory[temp9:temp9 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp8 * 0x08fc).value(temp8)(memory[temp9:temp9 + memory[0x40:0x60] - temp9]);\n        \n            if (temp10) { goto label_0B26; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_12A6() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 45.89795470237732,
	"usage": {
		"completion_tokens": 650,
		"prompt_tokens": 13028,
		"total_tokens": 13678
	}
}