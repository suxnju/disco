{
	"address": "0xce2026da687ee19743fa96cbe61ef360907a7a23",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the provided decompiled code, here's the Solidity smart contract:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Token {\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    uint256 private _initialSupply;\n    uint256 private _totalSupply;\n    uint256 private _buyPrice;\n    string private _symbol;\n    string private _name;\n    uint8 private _decimals;\n    address private _changeOwner;\n    address private _owner;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor() {\n        _owner = msg.sender;\n        _changeOwner = msg.sender;\n        // Initialize other variables as needed\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(value == 0 || _allowance[msg.sender][spender] == 0);\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function pullTokens() public {\n        require(msg.sender == _changeOwner);\n        require(_balanceOf[msg.sender] + _balanceOf[address(this)] >= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] += _balanceOf[address(this)];\n        _balanceOf[address(this)] = 0;\n        emit Transfer(address(this), msg.sender, _balanceOf[address(this)]);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(value <= _allowance[from][msg.sender]);\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        _allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function initialSupply() public view returns (uint256) {\n        return _initialSupply;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balanceOf[owner];\n    }\n\n    function buyPrice() public view returns (uint256) {\n        return _buyPrice;\n    }\n\n    function setPriceInWei(uint256 value) public {\n        require(msg.sender == _changeOwner);\n        require(value == 0 || value * 0x2540be400 / value == 0x2540be400);\n        _buyPrice = value * 0x2540be400;\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function changeOwner(address newOwner) public {\n        require(msg.sender == _changeOwner);\n        _owner = newOwner;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(value <= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function sendEtherToOwner() public {\n        require(msg.sender == _changeOwner);\n        (bool success, ) = _owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _changeOwner);\n        require(newOwner != address(0));\n        _changeOwner = newOwner;\n    }\n\n    fallback() external payable {\n        require(_buyPrice != 0);\n        uint256 amount = msg.value / _buyPrice;\n        require(_balanceOf[address(this)] >= amount);\n        require(_balanceOf[msg.sender] + amount >= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] += amount;\n        _balanceOf[address(this)] -= amount;\n        emit Transfer(address(this), msg.sender, amount);\n    }\n}\n```\n\nNote that the provided decompiled code doesn't include the constructor or the initialization of some variables, so I've added a constructor and left it empty for you to fill in. Also, I've removed the `__function_selector__` function, as function dispatch is automatically handled by the Ethereum Virtual Machine (EVM) and isn't typically included in a Solidity contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701462650,
	"id": "chatcmpl-8R4RuCXLIy2zwXcFOFaVXD58lfUI9",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.07.03 22:33 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _initialSupply; // STORAGE[0x4]\nuint256 _totalSupply; // STORAGE[0x5]\nuint256 _buyPrice; // STORAGE[0x6]\nuint256[] _symbol; // STORAGE[0x7]\nuint256[] _name; // STORAGE[0x8]\nuint8 _decimals; // STORAGE[0x9] bytes 0 to 0\naddress _changeOwner; // STORAGE[0x3] bytes 0 to 19\naddress _owner; // STORAGE[0x9] bytes 1 to 20\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1 == 0;\n    if (varg1 != 0) {\n        v0 = v2 = _allowance[varg0] == 0;\n    }\n    require(v0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction pullTokens() public nonPayable { \n    require(msg.sender == _changeOwner);\n    assert(_balanceOf[msg.sender] + _balanceOf[address(this)] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + _balanceOf[address(this)];\n    _balanceOf[address(this)] = 0;\n    emit Transfer(address(this), msg.sender, _balanceOf[address(this)]);\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    assert(varg2 <= _allowance[varg0]);\n    _balanceOf[varg0] = _allowance[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction initialSupply() public nonPayable { \n    return _initialSupply;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction setPriceInWei(uint256 varg0) public nonPayable { \n    require(msg.sender == _changeOwner);\n    v0 = v1 = varg0 == 0;\n    if (varg0 != 0) {\n        assert(varg0);\n        v0 = varg0 * 0x2540be400 / varg0 == 0x2540be400;\n    }\n    assert(v0);\n    _buyPrice = varg0 * 0x2540be400;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction changeOwner(address varg0) public nonPayable { \n    require(msg.sender == _changeOwner);\n    _owner = varg0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sendEtherToOwner() public nonPayable { \n    require(msg.sender == _changeOwner);\n    v0 = _owner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _changeOwner);\n    require(varg0 != 0);\n    _changeOwner = varg0;\n}\n\nfunction fallback() public payable { \n    assert(_buyPrice);\n    require(_balanceOf[address(this)] >= msg.value / _buyPrice);\n    assert(_balanceOf[msg.sender] + msg.value / _buyPrice >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value / _buyPrice;\n    assert(msg.value / _buyPrice <= _balanceOf[address(this)]);\n    _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value / _buyPrice;\n    emit Transfer(address(this), msg.sender, msg.value / _buyPrice);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xe274eab == function_selector) {\n            pullTokens();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x378dc3dc == function_selector) {\n            initialSupply();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8774e5d0 == function_selector) {\n            setPriceInWei(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f9dae1 == function_selector) {\n            changeOwner(address);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe3ffc9a3 == function_selector) {\n            sendEtherToOwner();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.07.03 22:33 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _initialSupply; // STORAGE[0x4]\nuint256 _totalSupply; // STORAGE[0x5]\nuint256 _buyPrice; // STORAGE[0x6]\nuint256[] _symbol; // STORAGE[0x7]\nuint256[] _name; // STORAGE[0x8]\nuint8 _decimals; // STORAGE[0x9] bytes 0 to 0\naddress _changeOwner; // STORAGE[0x3] bytes 0 to 19\naddress _owner; // STORAGE[0x9] bytes 1 to 20\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1 == 0;\n    if (varg1 != 0) {\n        v0 = v2 = _allowance[varg0] == 0;\n    }\n    require(v0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction pullTokens() public nonPayable { \n    require(msg.sender == _changeOwner);\n    assert(_balanceOf[msg.sender] + _balanceOf[address(this)] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + _balanceOf[address(this)];\n    _balanceOf[address(this)] = 0;\n    emit Transfer(address(this), msg.sender, _balanceOf[address(this)]);\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    assert(varg2 <= _allowance[varg0]);\n    _balanceOf[varg0] = _allowance[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction initialSupply() public nonPayable { \n    return _initialSupply;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction setPriceInWei(uint256 varg0) public nonPayable { \n    require(msg.sender == _changeOwner);\n    v0 = v1 = varg0 == 0;\n    if (varg0 != 0) {\n        assert(varg0);\n        v0 = varg0 * 0x2540be400 / varg0 == 0x2540be400;\n    }\n    assert(v0);\n    _buyPrice = varg0 * 0x2540be400;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction changeOwner(address varg0) public nonPayable { \n    require(msg.sender == _changeOwner);\n    _owner = varg0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sendEtherToOwner() public nonPayable { \n    require(msg.sender == _changeOwner);\n    v0 = _owner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _changeOwner);\n    require(varg0 != 0);\n    _changeOwner = varg0;\n}\n\nfunction fallback() public payable { \n    assert(_buyPrice);\n    require(_balanceOf[address(this)] >= msg.value / _buyPrice);\n    assert(_balanceOf[msg.sender] + msg.value / _buyPrice >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value / _buyPrice;\n    assert(msg.value / _buyPrice <= _balanceOf[address(this)]);\n    _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value / _buyPrice;\n    emit Transfer(address(this), msg.sender, msg.value / _buyPrice);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xe274eab == function_selector) {\n            pullTokens();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x378dc3dc == function_selector) {\n            initialSupply();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8774e5d0 == function_selector) {\n            setPriceInWei(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f9dae1 == function_selector) {\n            changeOwner(address);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe3ffc9a3 == function_selector) {\n            sendEtherToOwner();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.07.03 22:33 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _initialSupply; // STORAGE[0x4]\nuint256 _totalSupply; // STORAGE[0x5]\nuint256 _buyPrice; // STORAGE[0x6]\nuint256[] _symbol; // STORAGE[0x7]\nuint256[] _name; // STORAGE[0x8]\nuint8 _decimals; // STORAGE[0x9] bytes 0 to 0\naddress _changeOwner; // STORAGE[0x3] bytes 0 to 19\naddress _owner; // STORAGE[0x9] bytes 1 to 20\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1 == 0;\n    if (varg1 != 0) {\n        v0 = v2 = _allowance[varg0] == 0;\n    }\n    require(v0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction pullTokens() public nonPayable { \n    require(msg.sender == _changeOwner);\n    assert(_balanceOf[msg.sender] + _balanceOf[address(this)] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + _balanceOf[address(this)];\n    _balanceOf[address(this)] = 0;\n    emit Transfer(address(this), msg.sender, _balanceOf[address(this)]);\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    assert(varg2 <= _allowance[varg0]);\n    _balanceOf[varg0] = _allowance[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction initialSupply() public nonPayable { \n    return _initialSupply;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction setPriceInWei(uint256 varg0) public nonPayable { \n    require(msg.sender == _changeOwner);\n    v0 = v1 = varg0 == 0;\n    if (varg0 != 0) {\n        assert(varg0);\n        v0 = varg0 * 0x2540be400 / varg0 == 0x2540be400;\n    }\n    assert(v0);\n    _buyPrice = varg0 * 0x2540be400;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction changeOwner(address varg0) public nonPayable { \n    require(msg.sender == _changeOwner);\n    _owner = varg0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sendEtherToOwner() public nonPayable { \n    require(msg.sender == _changeOwner);\n    v0 = _owner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _changeOwner);\n    require(varg0 != 0);\n    _changeOwner = varg0;\n}\n\nfunction fallback() public payable { \n    assert(_buyPrice);\n    require(_balanceOf[address(this)] >= msg.value / _buyPrice);\n    assert(_balanceOf[msg.sender] + msg.value / _buyPrice >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value / _buyPrice;\n    assert(msg.value / _buyPrice <= _balanceOf[address(this)]);\n    _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value / _buyPrice;\n    emit Transfer(address(this), msg.sender, msg.value / _buyPrice);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xe274eab == function_selector) {\n            pullTokens();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x378dc3dc == function_selector) {\n            initialSupply();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8774e5d0 == function_selector) {\n            setPriceInWei(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f9dae1 == function_selector) {\n            changeOwner(address);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe3ffc9a3 == function_selector) {\n            sendEtherToOwner();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 58.5282187461853,
	"usage": {
		"completion_tokens": 998,
		"prompt_tokens": 2183,
		"total_tokens": 3181
	}
}