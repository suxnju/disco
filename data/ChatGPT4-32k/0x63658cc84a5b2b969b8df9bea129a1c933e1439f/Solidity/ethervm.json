{
	"address": "0x63658cc84a5b2b969b8df9bea129a1c933e1439f",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity equivalent of the given decompiled code:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Contract {\n    mapping(address => uint256) private balances;\n    address private owner;\n    uint256 private totalSupply;\n    string private baseURI;\n    string private name;\n    string private symbol;\n    uint256 private price;\n\n    constructor() public {\n        owner = msg.sender;\n        totalSupply = 0;\n        baseURI = \"\";\n        name = \"\";\n        symbol = \"\";\n        price = 0;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function.\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"New owner is the zero address.\");\n        owner = newOwner;\n    }\n\n    function mint(address to, uint256 tokenId) public onlyOwner {\n        totalSupply += tokenId;\n        balances[to] += tokenId;\n    }\n\n    function burn(address from, uint256 tokenId) public onlyOwner {\n        require(balances[from] >= tokenId, \"Not enough tokens to burn.\");\n        totalSupply -= tokenId;\n        balances[from] -= tokenId;\n    }\n\n    function setBaseURI(string memory newBaseURI) public onlyOwner {\n        baseURI = newBaseURI;\n    }\n\n    function setName(string memory newName) public onlyOwner {\n        name = newName;\n    }\n\n    function setSymbol(string memory newSymbol) public onlyOwner {\n        symbol = newSymbol;\n    }\n\n    function setPrice(uint256 newPrice) public onlyOwner {\n        price = newPrice;\n    }\n\n    function getOwner() public view returns (address) {\n        return owner;\n    }\n\n    function getTotalSupply() public view returns (uint256) {\n        return totalSupply;\n    }\n\n    function getBalanceOf(address account) public view returns (uint256) {\n        return balances[account];\n    }\n\n    function getBaseURI() public view returns (string memory) {\n        return baseURI;\n    }\n\n    function getName() public view returns (string memory) {\n        return name;\n    }\n\n    function getSymbol() public view returns (string memory) {\n        return symbol;\n    }\n\n    function getPrice() public view returns (uint256) {\n        return price;\n    }\n}\n```\n\nPlease note that this is a simplified version of the original code. The original code contains additional functionality that is not included in this version (like the log function or the revert function). The provided Solidity code is meant to give a general idea of what the original contract might have looked like. It may not have the same functionality or security measures as the original contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471707,
	"id": "chatcmpl-8MuexaofpX1bwPeBwYxfz41hIF50C",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_01D4:\n            var var0 = storage[0x0e];\n        \n            if (msg.value < var0) { stop(); }\n        \n            var var1 = 0xffffffffffffffffffffffffffffffffffffffff & 0x4257d02e2854c9c86d6975fcd14a1af4fa65a652;\n            var var2 = 0x08fc;\n            var var3 = 0x02;\n            var var4 = msg.value;\n        \n            if (!var3) { assert(); }\n        \n            var temp0 = var4 / var3;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(var1).call.gas(!temp0 * var2).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n            var1 = !temp2;\n        \n            if (!var1) {\n                var1 = 0xffffffffffffffffffffffffffffffffffffffff & 0x2ea533314069dc9b4df29e72bd1dfb64cc68456d;\n                var2 = 0x08fc;\n                var3 = 0x02;\n                var4 = msg.value;\n            \n                if (!var3) { assert(); }\n            \n                var temp3 = var4 / var3;\n                var temp4 = memory[0x40:0x60];\n                var temp5;\n                temp5, memory[temp4:temp4 + 0x00] = address(var1).call.gas(!temp3 * var2).value(temp3)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n                var1 = !temp5;\n            \n                if (!var1) {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = msg.sender;\n                    var temp7 = temp6 + 0x20;\n                    memory[temp7:temp7 + 0x20] = msg.value;\n                    var temp8 = memory[0x40:0x60];\n                    log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0x6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be770]);\n                    var1 = 0x0322;\n                    var2 = msg.sender;\n                    func_0FE6(var2);\n                    stop();\n                } else {\n                    var temp9 = returndata.length;\n                    memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp10 = returndata.length;\n                memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000;\n        \n            if (0x8da5cb5b > var0) {\n                if (0x2f745c59 > var0) {\n                    if (0x095ea7b3 > var0) {\n                        if (var0 == 0x01ffc9a7) {\n                            // Dispatch table entry for supportsInterface(bytes4)\n                            var1 = msg.value;\n                        \n                            if (var1) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = 0x037e;\n                            var2 = 0x04;\n                            var3 = msg.data.length - var2;\n                        \n                            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = supportsInterface(var2, var3);\n                            var temp11 = memory[0x40:0x60];\n                            memory[temp11:temp11 + 0x20] = !!var1;\n                            var temp12 = memory[0x40:0x60];\n                            return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n                        } else if (var0 == 0x06fdde03) {\n                            // Dispatch table entry for name()\n                            var1 = msg.value;\n                        \n                            if (var1) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = 0x03ad;\n                            var1 = name();\n                            var temp13 = memory[0x40:0x60];\n                            var2 = temp13;\n                            var3 = var2;\n                            var temp14 = var3 + 0x20;\n                            memory[var3:var3 + 0x20] = temp14 - var3;\n                            var temp15 = var1;\n                            memory[temp14:temp14 + 0x20] = memory[temp15:temp15 + 0x20];\n                            var4 = temp14 + 0x20;\n                            var var6 = memory[temp15:temp15 + 0x20];\n                            var var5 = temp15 + 0x20;\n                            var var7 = var6;\n                            var var8 = var4;\n                            var var9 = var5;\n                            var var10 = 0x00;\n                        \n                            if (var10 >= var7) {\n                            label_03ED:\n                                var temp16 = var6;\n                                var4 = temp16 + var4;\n                                var5 = temp16 & 0x1f;\n                            \n                                if (!var5) {\n                                    var temp17 = memory[0x40:0x60];\n                                    return memory[temp17:temp17 + var4 - temp17];\n                                } else {\n                                    var temp18 = var5;\n                                    var temp19 = var4 - temp18;\n                                    memory[temp19:temp19 + 0x20] = ~(0x0100 ** (0x20 - temp18) - 0x01) & memory[temp19:temp19 + 0x20];\n                                    var temp20 = memory[0x40:0x60];\n                                    return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n                                }\n                            } else {\n                            label_03DB:\n                                var temp21 = var10;\n                                memory[var8 + temp21:var8 + temp21 + 0x20] = memory[var9 + temp21:var9 + temp21 + 0x20];\n                                var10 = temp21 + 0x20;\n                            \n                                if (var10 >= var7) { goto label_03ED; }\n                                else { goto label_03DB; }\n                            }\n                        } else if (var0 == 0x081812fc) {\n                            // Dispatch table entry for getApproved(uint256)\n                            var1 = msg.value;\n                        \n                            if (var1) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = 0x0461;\n                            var2 = 0x04;\n                            var3 = msg.data.length - var2;\n                        \n                            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = getApproved(var2, var3);\n                            var temp22 = memory[0x40:0x60];\n                            memory[temp22:temp22 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var temp23 = memory[0x40:0x60];\n                            return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n                        } else { goto label_01D4; }\n                    } else if (var0 == 0x095ea7b3) {\n                        // Dispatch table entry for approve(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x04fc;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                    \n                        approve(var2, var3);\n                        stop();\n                    } else if (var0 == 0x18160ddd) {\n                        // Dispatch table entry for totalSupply()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0513;\n                        var1 = totalSupply();\n                        var temp24 = memory[0x40:0x60];\n                        memory[temp24:temp24 + 0x20] = var1;\n                        var temp25 = memory[0x40:0x60];\n                        return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n                    } else if (var0 == 0x19465953) {\n                        // Dispatch table entry for changeInfo(string)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x05ef;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        changeInfo(var2, var3);\n                        stop();\n                    } else if (var0 == 0x23b872dd) {\n                        // Dispatch table entry for transferFrom(address,address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x066a;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                    \n                        transferFrom(var2, var3);\n                        stop();\n                    } else { goto label_01D4; }\n                } else if (0x4f6ccce7 > var0) {\n                    if (var0 == 0x2f745c59) {\n                        // Dispatch table entry for tokenOfOwnerByIndex(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x06c5;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = tokenOfOwnerByIndex(var2, var3);\n                        var temp26 = memory[0x40:0x60];\n                        memory[temp26:temp26 + 0x20] = var1;\n                        var temp27 = memory[0x40:0x60];\n                        return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n                    } else if (var0 == 0x370158ea) {\n                        // Dispatch table entry for info()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x06f0;\n                        var2 = info();\n                        var temp28 = memory[0x40:0x60];\n                        var3 = temp28;\n                        var4 = var3;\n                        var temp29 = var4 + 0x20;\n                        memory[var4:var4 + 0x20] = temp29 - var4;\n                        var temp30 = var2;\n                        memory[temp29:temp29 + 0x20] = memory[temp30:temp30 + 0x20];\n                        var5 = temp29 + 0x20;\n                        var6 = temp30 + 0x20;\n                        var7 = memory[temp30:temp30 + 0x20];\n                        var8 = var7;\n                        var9 = var5;\n                        var10 = var6;\n                        var var11 = 0x00;\n                    \n                        if (var11 >= var8) {\n                        label_0730:\n                            var temp31 = var7;\n                            var5 = temp31 + var5;\n                            var6 = temp31 & 0x1f;\n                        \n                            if (!var6) {\n                                var temp32 = memory[0x40:0x60];\n                                return memory[temp32:temp32 + var5 - temp32];\n                            } else {\n                                var temp33 = var6;\n                                var temp34 = var5 - temp33;\n                                memory[temp34:temp34 + 0x20] = ~(0x0100 ** (0x20 - temp33) - 0x01) & memory[temp34:temp34 + 0x20];\n                                var temp35 = memory[0x40:0x60];\n                                return memory[temp35:temp35 + (temp34 + 0x20) - temp35];\n                            }\n                        } else {\n                        label_071E:\n                            var temp36 = var11;\n                            memory[var9 + temp36:var9 + temp36 + 0x20] = memory[var10 + temp36:var10 + temp36 + 0x20];\n                            var11 = temp36 + 0x20;\n                        \n                            if (var11 >= var8) { goto label_0730; }\n                            else { goto label_071E; }\n                        }\n                    } else if (var0 == 0x42842e0e) {\n                        // Dispatch table entry for safeTransferFrom(address,address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x07e4;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                    \n                        safeTransferFrom(var2, var3);\n                        stop();\n                    } else { goto label_01D4; }\n                } else if (var0 == 0x4f6ccce7) {\n                    // Dispatch table entry for tokenByIndex(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x081f;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = tokenByIndex(var2, var3);\n                    var temp37 = memory[0x40:0x60];\n                    memory[temp37:temp37 + 0x20] = var1;\n                    var temp38 = memory[0x40:0x60];\n                    return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n                } else if (var0 == 0x6352211e) {\n                    // Dispatch table entry for ownerOf(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x086e;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = ownerOf(var2, var3);\n                    var temp39 = memory[0x40:0x60];\n                    memory[temp39:temp39 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp40 = memory[0x40:0x60];\n                    return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n                } else if (var0 == 0x70a08231) {\n                    // Dispatch table entry for balanceOf(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x08ff;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = balanceOf(var2, var3);\n                    var temp41 = memory[0x40:0x60];\n                    memory[temp41:temp41 + 0x20] = var1;\n                    var temp42 = memory[0x40:0x60];\n                    return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n                } else if (var0 == 0x715018a6) {\n                    // Dispatch table entry for renounceOwnership()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x092a;\n                    renounceOwnership();\n                    stop();\n                } else { goto label_01D4; }\n            } else if (0xbf4abd3f > var0) {\n                if (0xa035b1fe > var0) {\n                    if (var0 == 0x8da5cb5b) {\n                        // Dispatch table entry for owner()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0941;\n                        var1 = owner();\n                        var temp43 = memory[0x40:0x60];\n                        memory[temp43:temp43 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var temp44 = memory[0x40:0x60];\n                        return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n                    } else if (var0 == 0x8f32d59b) {\n                        // Dispatch table entry for isOwner()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0998;\n                        var1 = isOwner();\n                        var temp45 = memory[0x40:0x60];\n                        memory[temp45:temp45 + 0x20] = !!var1;\n                        var temp46 = memory[0x40:0x60];\n                        return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n                    } else if (var0 == 0x95d89b41) {\n                        // Dispatch table entry for symbol()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x09c7;\n                        var1 = symbol();\n                        var temp47 = memory[0x40:0x60];\n                        var2 = temp47;\n                        var3 = var2;\n                        var temp48 = var3 + 0x20;\n                        memory[var3:var3 + 0x20] = temp48 - var3;\n                        var temp49 = var1;\n                        memory[temp48:temp48 + 0x20] = memory[temp49:temp49 + 0x20];\n                        var4 = temp48 + 0x20;\n                        var6 = memory[temp49:temp49 + 0x20];\n                        var5 = temp49 + 0x20;\n                        var7 = var6;\n                        var8 = var4;\n                        var9 = var5;\n                        var10 = 0x00;\n                    \n                        if (var10 >= var7) {\n                        label_0A07:\n                            var temp50 = var6;\n                            var4 = temp50 + var4;\n                            var5 = temp50 & 0x1f;\n                        \n                            if (!var5) {\n                                var temp51 = memory[0x40:0x60];\n                                return memory[temp51:temp51 + var4 - temp51];\n                            } else {\n                                var temp52 = var5;\n                                var temp53 = var4 - temp52;\n                                memory[temp53:temp53 + 0x20] = ~(0x0100 ** (0x20 - temp52) - 0x01) & memory[temp53:temp53 + 0x20];\n                                var temp54 = memory[0x40:0x60];\n                                return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n                            }\n                        } else {\n                        label_09F5:\n                            var temp55 = var10;\n                            memory[var8 + temp55:var8 + temp55 + 0x20] = memory[var9 + temp55:var9 + temp55 + 0x20];\n                            var10 = temp55 + 0x20;\n                        \n                            if (var10 >= var7) { goto label_0A07; }\n                            else { goto label_09F5; }\n                        }\n                    } else { goto label_01D4; }\n                } else if (var0 == 0xa035b1fe) {\n                    // Dispatch table entry for price()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0a57;\n                    var2 = price();\n                    var temp56 = memory[0x40:0x60];\n                    memory[temp56:temp56 + 0x20] = var2;\n                    var temp57 = memory[0x40:0x60];\n                    return memory[temp57:temp57 + (temp56 + 0x20) - temp57];\n                } else if (var0 == 0xa22cb465) {\n                    // Dispatch table entry for setApprovalForAll(address,bool)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0ac8;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    setApprovalForAll(var2, var3);\n                    stop();\n                } else if (var0 == 0xaf9fefbf) {\n                    // Dispatch table entry for infohasnotbeenset()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0adf;\n                    var2 = infohasnotbeenset();\n                    var temp58 = memory[0x40:0x60];\n                    memory[temp58:temp58 + 0x20] = !!var2;\n                    var temp59 = memory[0x40:0x60];\n                    return memory[temp59:temp59 + (temp58 + 0x20) - temp59];\n                } else if (var0 == 0xb88d4fde) {\n                    // Dispatch table entry for safeTransferFrom(address,address,uint256,bytes)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0c09;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n                \n                    safeTransferFrom(var2, var3);\n                    stop();\n                } else { goto label_01D4; }\n            } else if (0xd547cfb7 > var0) {\n                if (var0 == 0xbf4abd3f) {\n                    // Dispatch table entry for 0xbf4abd3f (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0c20;\n                    var2 = func_19C9();\n                    var temp60 = memory[0x40:0x60];\n                    memory[temp60:temp60 + 0x20] = var2;\n                    var temp61 = memory[0x40:0x60];\n                    return memory[temp61:temp61 + (temp60 + 0x20) - temp61];\n                } else if (var0 == 0xc21ab7f9) {\n                    // Dispatch table entry for createToken(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0c85;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = createToken(var2, var3);\n                    var temp62 = memory[0x40:0x60];\n                    var2 = temp62;\n                    var3 = var2;\n                    var temp63 = var3 + 0x20;\n                    memory[var3:var3 + 0x20] = temp63 - var3;\n                    var temp64 = var1;\n                    memory[temp63:temp63 + 0x20] = memory[temp64:temp64 + 0x20];\n                    var4 = temp63 + 0x20;\n                    var5 = temp64 + 0x20;\n                    var6 = memory[temp64:temp64 + 0x20];\n                    var7 = var6;\n                    var8 = var4;\n                    var9 = var5;\n                    var10 = 0x00;\n                \n                    if (var10 >= var7) {\n                    label_0CC5:\n                        var temp65 = var6;\n                        var4 = temp65 + var4;\n                        var5 = temp65 & 0x1f;\n                    \n                        if (!var5) {\n                            var temp66 = memory[0x40:0x60];\n                            return memory[temp66:temp66 + var4 - temp66];\n                        } else {\n                            var temp67 = var5;\n                            var temp68 = var4 - temp67;\n                            memory[temp68:temp68 + 0x20] = ~(0x0100 ** (0x20 - temp67) - 0x01) & memory[temp68:temp68 + 0x20];\n                            var temp69 = memory[0x40:0x60];\n                            return memory[temp69:temp69 + (temp68 + 0x20) - temp69];\n                        }\n                    } else {\n                    label_0CB3:\n                        var temp70 = var10;\n                        memory[var8 + temp70:var8 + temp70 + 0x20] = memory[var9 + temp70:var9 + temp70 + 0x20];\n                        var10 = temp70 + 0x20;\n                    \n                        if (var10 >= var7) { goto label_0CC5; }\n                        else { goto label_0CB3; }\n                    }\n                } else if (var0 == 0xc87b56dd) {\n                    // Dispatch table entry for tokenURI(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0d39;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = tokenURI(var2, var3);\n                    var temp71 = memory[0x40:0x60];\n                    var2 = temp71;\n                    var3 = var2;\n                    var temp72 = var3 + 0x20;\n                    memory[var3:var3 + 0x20] = temp72 - var3;\n                    var temp73 = var1;\n                    memory[temp72:temp72 + 0x20] = memory[temp73:temp73 + 0x20];\n                    var4 = temp72 + 0x20;\n                    var6 = memory[temp73:temp73 + 0x20];\n                    var5 = temp73 + 0x20;\n                    var7 = var6;\n                    var8 = var4;\n                    var9 = var5;\n                    var10 = 0x00;\n                \n                    if (var10 >= var7) {\n                    label_0D79:\n                        var temp74 = var6;\n                        var4 = temp74 + var4;\n                        var5 = temp74 & 0x1f;\n                    \n                        if (!var5) {\n                            var temp75 = memory[0x40:0x60];\n                            return memory[temp75:temp75 + var4 - temp75];\n                        } else {\n                            var temp76 = var5;\n                            var temp77 = var4 - temp76;\n                            memory[temp77:temp77 + 0x20] = ~(0x0100 ** (0x20 - temp76) - 0x01) & memory[temp77:temp77 + 0x20];\n                            var temp78 = memory[0x40:0x60];\n                            return memory[temp78:temp78 + (temp77 + 0x20) - temp78];\n                        }\n                    } else {\n                    label_0D67:\n                        var temp79 = var10;\n                        memory[var8 + temp79:var8 + temp79 + 0x20] = memory[var9 + temp79:var9 + temp79 + 0x20];\n                        var10 = temp79 + 0x20;\n                    \n                        if (var10 >= var7) { goto label_0D79; }\n                        else { goto label_0D67; }\n                    }\n                } else { goto label_01D4; }\n            } else if (var0 == 0xd547cfb7) {\n                // Dispatch table entry for baseTokenURI()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0dc9;\n                var2 = baseTokenURI();\n                var temp80 = memory[0x40:0x60];\n                var3 = temp80;\n                var4 = var3;\n                var temp81 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp81 - var4;\n                var temp82 = var2;\n                memory[temp81:temp81 + 0x20] = memory[temp82:temp82 + 0x20];\n                var5 = temp81 + 0x20;\n                var7 = memory[temp82:temp82 + 0x20];\n                var6 = temp82 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0E09:\n                    var temp83 = var7;\n                    var5 = temp83 + var5;\n                    var6 = temp83 & 0x1f;\n                \n                    if (!var6) {\n                        var temp84 = memory[0x40:0x60];\n                        return memory[temp84:temp84 + var5 - temp84];\n                    } else {\n                        var temp85 = var6;\n                        var temp86 = var5 - temp85;\n                        memory[temp86:temp86 + 0x20] = ~(0x0100 ** (0x20 - temp85) - 0x01) & memory[temp86:temp86 + 0x20];\n                        var temp87 = memory[0x40:0x60];\n                        return memory[temp87:temp87 + (temp86 + 0x20) - temp87];\n                    }\n                } else {\n                label_0DF7:\n                    var temp88 = var11;\n                    memory[var9 + temp88:var9 + temp88 + 0x20] = memory[var10 + temp88:var10 + temp88 + 0x20];\n                    var11 = temp88 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0E09; }\n                    else { goto label_0DF7; }\n                }\n            } else if (var0 == 0xe40e97a7) {\n                // Dispatch table entry for changeBaseTokenURI(string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0f0a;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                changeBaseTokenURI(var2, var3);\n                stop();\n            } else if (var0 == 0xe985e9c5) {\n                // Dispatch table entry for isApprovedForAll(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0f7b;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = isApprovedForAll(var2, var3);\n                var temp89 = memory[0x40:0x60];\n                memory[temp89:temp89 + 0x20] = !!var1;\n                var temp90 = memory[0x40:0x60];\n                return memory[temp90:temp90 + (temp89 + 0x20) - temp90];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0fe4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                transferOwnership(var2, var3);\n                stop();\n            } else { goto label_01D4; }\n        }\n    }\n    \n    function supportsInterface(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = arg0 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getApproved(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_11B2(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function approve(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x120e;\n        var var2 = arg1;\n        var1 = func_154B(var2);\n        var0 = var1;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender == var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n        label_128B:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n            var temp1 = arg0;\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (temp1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-2]]);\n            return;\n        } else {\n            var1 = 0x128a;\n            var2 = var0;\n            var var3 = msg.sender;\n            var1 = func_1BD0(var2, var3);\n            goto label_128B;\n        }\n    }\n    \n    function changeInfo(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var1;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + temp6] = msg.data[var0:var0 + temp6];\n        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00;\n        arg0 = temp7;\n        arg1 = 0x135d;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x10] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = arg0;\n        arg1 = 0x1399;\n        var0 = 0x0f;\n        var2 = memory[temp9:temp9 + 0x20];\n        var1 = temp9 + 0x20;\n        arg1 = func_2B36(var0, var1, var2);\n        storage[0x10] = (storage[0x10] & ~0xff) | 0x00;\n    }\n    \n    function transferFrom(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp1:temp1 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        func_13B8(arg0, arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function tokenOfOwnerByIndex(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x13e8;\n        var var2 = arg0;\n        var1 = func_15C9(var2);\n    \n        if (arg1 >= var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var1 = keccak256(memory[0x00:0x40]);\n        var2 = arg1;\n    \n        if (var2 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var1;\n        return storage[keccak256(memory[0x00:0x20]) + var2];\n    }\n    \n    function safeTransferFrom(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp1:temp1 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var1 = 0x150e;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = var0;\n        var temp2 = memory[0x40:0x60];\n        var var5 = temp2;\n        memory[0x40:0x60] = var5 + 0x20;\n        memory[var5:var5 + 0x20] = 0x00;\n        func_19A1(var2, var3, var4, var5);\n    }\n    \n    function tokenByIndex(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x00;\n        var var0 = 0x151d;\n        var0 = totalSupply();\n    \n        if (arg0 >= var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x07;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1];\n    }\n    \n    function ownerOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_154B(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r0 = func_15C9(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setApprovalForAll(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = !!msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0;\n        memory[0x00:0x20] = temp3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = !!temp1 | (storage[temp4] & ~0xff);\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = !!temp1;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function safeTransferFrom(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        var temp2 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp3 = temp2 + 0x20;\n        arg1 = msg.data[temp2:temp2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp4 = temp3 + 0x20;\n        var var0 = msg.data[temp3:temp3 + 0x20];\n        var var1 = temp1;\n        var var2 = temp0;\n        var var3 = temp4 + 0x20;\n        var var4 = msg.data[temp4:temp4 + 0x20];\n    \n        if (var4 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2 + var4;\n        var4 = temp5;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var4;\n        var temp7 = msg.data[temp6:temp6 + 0x20];\n        var4 = temp7;\n        var var5 = var3;\n        var3 = temp6 + 0x20;\n    \n        if ((var4 > 0x0100000000) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = var4;\n        var temp9 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp9 + (temp8 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp9:temp9 + 0x20] = temp8;\n        var temp10 = temp9 + 0x20;\n        memory[temp10:temp10 + temp8] = msg.data[var3:var3 + temp8];\n        memory[temp10 + temp8:temp10 + temp8 + 0x20] = 0x00;\n        var1 = temp9;\n        func_19A1(arg0, arg1, var0, var1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function createToken(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x60;\n        var var0 = msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x1003d51fef31e52262b1e699f03c789ca6dbefdc;\n    \n        if (var0) {\n        label_1A23:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x1a37;\n            var var1 = arg0;\n            func_0FE6(var1);\n            return arg1;\n        } else {\n            var0 = 0x1a22;\n            var0 = isOwner();\n            goto label_1A23;\n        }\n    }\n    \n    function tokenURI(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x60;\n        var var0 = 0x1a47;\n        var var1 = arg0;\n        var0 = func_1E53(var1);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x1afe;\n        var temp0 = storage[0x11];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var1 = temp2;\n        var var2 = 0x11;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (var6) { return func_1AA5(arg0, var1, var2, var3, var4, var5, var6); }\n    \n        var2 = 0x1af9;\n        var3 = arg0;\n        var2 = func_21AF(var3);\n        var3 = 0x60;\n        var temp4 = var1;\n        var4 = temp4;\n        var5 = var2;\n        var6 = memory[0x40:0x60] + 0x20;\n        var var7 = var6;\n        var var8 = var4 + 0x20;\n        var var9 = memory[var4:var4 + 0x20];\n        var var10 = var9;\n        var var11 = var7;\n        var var12 = var8;\n    \n        if (var10 < 0x20) {\n        label_22B4:\n            var temp5 = 0x0100 ** (0x20 - var10) - 0x01;\n            var temp6 = var11;\n            memory[temp6:temp6 + 0x20] = (memory[var12:var12 + 0x20] & ~temp5) | (memory[temp6:temp6 + 0x20] & temp5);\n            var temp7 = var9 + var7;\n            var7 = temp7;\n            var temp8 = var5;\n            var8 = temp8 + 0x20;\n            var9 = memory[temp8:temp8 + 0x20];\n            var10 = var9;\n            var11 = var7;\n            var12 = var8;\n        \n            if (var10 < 0x20) {\n            label_2307:\n                var temp9 = 0x0100 ** (0x20 - var10) - 0x01;\n                var temp10 = var11;\n                memory[temp10:temp10 + 0x20] = (memory[var12:var12 + 0x20] & ~temp9) | (memory[temp10:temp10 + 0x20] & temp9);\n                var temp11 = var9 + var7;\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = temp11 - temp12 - 0x20;\n                memory[0x40:0x60] = temp11;\n                var0 = temp12;\n                // Error: Could not resolve jump destination!\n            } else {\n            label_22ED:\n                var temp13 = var12;\n                var temp14 = var11;\n                memory[temp14:temp14 + 0x20] = memory[temp13:temp13 + 0x20];\n                var11 = temp14 + 0x20;\n                var12 = temp13 + 0x20;\n                var10 = var10 - 0x20;\n            \n                if (var10 < 0x20) { goto label_2307; }\n                else { goto label_22ED; }\n            }\n        } else {\n        label_229A:\n            var temp15 = var12;\n            var temp16 = var11;\n            memory[temp16:temp16 + 0x20] = memory[temp15:temp15 + 0x20];\n            var11 = temp16 + 0x20;\n            var12 = temp15 + 0x20;\n            var10 = var10 - 0x20;\n        \n            if (var10 < 0x20) { goto label_22B4; }\n            else { goto label_229A; }\n        }\n    }\n    \n    function changeBaseTokenURI(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var1;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + temp6] = msg.data[var0:var0 + temp6];\n        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00;\n        arg0 = temp7;\n        arg1 = 0x1bab;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = arg0;\n        arg1 = 0x1bcc;\n        var0 = 0x11;\n        var2 = memory[temp9:temp9 + 0x20];\n        var1 = temp9 + 0x20;\n        arg1 = func_2B36(var0, var1, var2);\n    }\n    \n    function isApprovedForAll(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r0 = func_1BD0(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function transferOwnership(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x1c6c;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x1c80;\n        var var0 = arg0;\n        func_2344(var0);\n    }\n    \n    function func_0FE6(var arg0) {\n        if (storage[0x0d] > 0x0168) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x00;\n        var var1 = 0x1003;\n        var1 = func_1C83();\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x100f;\n        var var2 = arg0;\n        var var3 = var0;\n        func_1C99(var2, var3);\n        var1 = 0x1021;\n        var2 = var0;\n        var3 = 0x101c;\n        var var4 = var2;\n        var3 = func_1CBA(var4);\n        func_101C(var2, var3);\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = var0;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0xb9144c96c86541f6fa89c9f2f02495cccf4b08cd6643e26d34ee00aa586558a8]);\n        var1 = 0x4b;\n        var2 = storage[0x0e];\n    \n        if (!var1) { assert(); }\n    \n        storage[0x0e] = storage[0x0e] + var2 / var1;\n    }\n    \n    function func_101C(var arg0, var arg1) {\n        var var0 = 0x1e1c;\n        var var1 = arg0;\n        var0 = func_1E53(var1);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0b;\n        var0 = 0x1e4e;\n        var1 = keccak256(memory[0x00:0x40]);\n        var var3 = memory[temp0:temp0 + 0x20];\n        var var2 = temp0 + 0x20;\n        var0 = func_2B36(var1, var2, var3);\n    }\n    \n    function name() returns (var r0) {\n        var var0 = 0x60;\n        var temp0 = storage[0x09];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x09;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_11A8:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_119F; }\n        \n        label_118B:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_118B; }\n        \n        label_119F:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_11A8;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp11 + 0x20;\n            var6 = var6;\n            goto label_11A8;\n        }\n    }\n    \n    function func_11B2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x11bd;\n        var var2 = arg0;\n        var1 = func_1E53(var2);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x07]; }\n    \n    function func_13B8(var arg0, var arg1, var arg2) {\n        var var0 = 0x13c2;\n        var var1 = msg.sender;\n        var var2 = arg2;\n        var0 = func_1EC5(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x13d8;\n        var1 = arg0;\n        var2 = arg1;\n        var var3 = arg2;\n        func_1F5A(var1, var2, var3);\n    }\n    \n    function info() returns (var r0) {\n        var temp0 = storage[0x0f];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x0f;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_14EA:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_14E1; }\n        \n        label_14CD:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_14CD; }\n        \n        label_14E1:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_14EA;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_14EA;\n        }\n    }\n    \n    function func_154B(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_15C9(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x164d;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var var2 = keccak256(memory[0x00:0x40]);\n        return func_1F7E(var2);\n    }\n    \n    function renounceOwnership() {\n        var var0 = 0x165c;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x0c] & 0xffffffffffffffffffffffffffffffffffffffff, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n        storage[0x0c] = (storage[0x0c] & ~0xffffffffffffffffffffffffffffffffffffffff) | 0x00;\n    }\n    \n    function owner() returns (var r0) { return storage[0x0c] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function isOwner() returns (var r0) { return msg.sender == storage[0x0c] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x60;\n        var temp0 = storage[0x0a];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x0a;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_1842:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_1839; }\n        \n        label_1825:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_1825; }\n        \n        label_1839:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_1842;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp11 + 0x20;\n            var6 = var6;\n            goto label_1842;\n        }\n    }\n    \n    function price() returns (var r0) { return storage[0x0e]; }\n    \n    function infohasnotbeenset() returns (var r0) { return storage[0x10] & 0xff; }\n    \n    function func_19A1(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = 0x19ac;\n        var var1 = arg0;\n        var var2 = arg1;\n        var var3 = arg2;\n        func_13B8(var1, var2, var3);\n        var0 = 0x19b8;\n        var1 = arg0;\n        var2 = arg1;\n        var3 = arg2;\n        var var4 = arg3;\n        var0 = func_1F8C(var1, var2, var3, var4);\n    \n        if (var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_19C9() returns (var r0) { return storage[0x0d]; }\n    \n    function func_1AA5(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) returns (var r0) {\n        if (0x1f < arg6) {\n            var temp0 = arg4;\n            var temp1 = temp0 + arg6;\n            arg4 = temp1;\n            memory[0x00:0x20] = arg5;\n            var temp2 = keccak256(memory[0x00:0x20]);\n            memory[temp0:temp0 + 0x20] = storage[temp2];\n            arg5 = temp2 + 0x01;\n            arg6 = temp0 + 0x20;\n        \n            if (arg4 <= arg6) { goto label_1AE2; }\n        \n        label_1ACE:\n            var temp3 = arg5;\n            var temp4 = arg6;\n            memory[temp4:temp4 + 0x20] = storage[temp3];\n            arg5 = temp3 + 0x01;\n            arg6 = temp4 + 0x20;\n        \n            if (arg4 > arg6) { goto label_1ACE; }\n        \n        label_1AE2:\n            var temp5 = arg4;\n            var temp6 = temp5 + (arg6 - temp5 & 0x1f);\n            arg6 = temp5;\n            arg4 = temp6;\n        \n        label_1AEB:\n            arg2 = 0x1af9;\n            arg3 = arg0;\n            arg2 = func_21AF(arg3);\n            arg3 = 0x60;\n            var temp7 = arg1;\n            arg4 = temp7;\n            arg5 = arg2;\n            arg6 = memory[0x40:0x60] + 0x20;\n            var var0 = arg6;\n            var var1 = arg4 + 0x20;\n            var var2 = memory[arg4:arg4 + 0x20];\n            var var3 = var2;\n            var var4 = var0;\n            var var5 = var1;\n        \n            if (var3 < 0x20) {\n            label_22B4:\n                var temp8 = 0x0100 ** (0x20 - var3) - 0x01;\n                var temp9 = var4;\n                memory[temp9:temp9 + 0x20] = (memory[var5:var5 + 0x20] & ~temp8) | (memory[temp9:temp9 + 0x20] & temp8);\n                var temp10 = var2 + var0;\n                var0 = temp10;\n                var temp11 = arg5;\n                var1 = temp11 + 0x20;\n                var2 = memory[temp11:temp11 + 0x20];\n                var3 = var2;\n                var4 = var0;\n                var5 = var1;\n            \n                if (var3 < 0x20) {\n                label_2307:\n                    var temp12 = 0x0100 ** (0x20 - var3) - 0x01;\n                    var temp13 = var4;\n                    memory[temp13:temp13 + 0x20] = (memory[var5:var5 + 0x20] & ~temp12) | (memory[temp13:temp13 + 0x20] & temp12);\n                    var temp14 = var2 + var0;\n                    var temp15 = memory[0x40:0x60];\n                    memory[temp15:temp15 + 0x20] = temp14 - temp15 - 0x20;\n                    memory[0x40:0x60] = temp14;\n                    return temp15;\n                } else {\n                label_22ED:\n                    var temp16 = var5;\n                    var temp17 = var4;\n                    memory[temp17:temp17 + 0x20] = memory[temp16:temp16 + 0x20];\n                    var4 = temp17 + 0x20;\n                    var5 = temp16 + 0x20;\n                    var3 = var3 - 0x20;\n                \n                    if (var3 < 0x20) { goto label_2307; }\n                    else { goto label_22ED; }\n                }\n            } else {\n            label_229A:\n                var temp18 = var5;\n                var temp19 = var4;\n                memory[temp19:temp19 + 0x20] = memory[temp18:temp18 + 0x20];\n                var4 = temp19 + 0x20;\n                var5 = temp18 + 0x20;\n                var3 = var3 - 0x20;\n            \n                if (var3 < 0x20) { goto label_22B4; }\n                else { goto label_229A; }\n            }\n        } else {\n            var temp20 = arg4;\n            memory[temp20:temp20 + 0x20] = storage[arg5] / 0x0100 * 0x0100;\n            arg4 = temp20 + 0x20;\n            arg6 = arg6;\n            goto label_1AEB;\n        }\n    }\n    \n    function baseTokenURI() returns (var r0) {\n        var temp0 = storage[0x11];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x11;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1B9B:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_1B92; }\n        \n        label_1B7E:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1B7E; }\n        \n        label_1B92:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1B9B;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1B9B;\n        }\n    }\n    \n    function func_1BD0(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_1C83() returns (var r0) {\n        storage[0x0d] = storage[0x0d] + 0x01;\n        return storage[0x0d];\n    }\n    \n    function func_1C99(var arg0, var arg1) {\n        var var0 = 0x1ca3;\n        var var1 = arg0;\n        var var2 = arg1;\n        func_2440(var1, var2);\n        var0 = 0x1cad;\n        var1 = arg0;\n        var2 = arg1;\n        func_258A(var1, var2);\n        var0 = 0x1cb6;\n        var1 = arg1;\n        func_2651(var1);\n    }\n    \n    function func_1CBA(var arg0) returns (var r0) {\n        var var0 = 0x60;\n    \n        if (arg0 != 0x00) {\n            var var1 = arg0;\n            var var2 = 0x00;\n        \n            if (var1 == 0x00) {\n            label_1D30:\n                var var3 = 0x60;\n                var temp0 = var2;\n                var temp1 = memory[0x40:0x60];\n                var var4 = temp1;\n                var var5 = temp0;\n                memory[var4:var4 + 0x20] = var5;\n                memory[0x40:0x60] = var4 + (var5 + 0x1f & ~0x1f) + 0x20;\n            \n                if (!var5) {\n                    var3 = var4;\n                    var4 = var2 - 0x01;\n                \n                    if (arg0 == 0x00) {\n                    label_1E06:\n                        return var3;\n                    } else {\n                    label_1D7C:\n                        var5 = 0x0a;\n                        var var6 = arg0;\n                    \n                        if (!var5) { assert(); }\n                    \n                        var5 = (var6 % var5 + 0x30) * 0x0100000000000000000000000000000000000000000000000000000000000000;\n                        var6 = var3;\n                        var temp2 = var4;\n                        var var7 = temp2;\n                        var4 = var7 - 0x01;\n                    \n                        if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                    \n                        memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x01] = byte(var5 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x00);\n                        var5 = 0x0a;\n                        var6 = arg0;\n                    \n                        if (!var5) { assert(); }\n                    \n                        arg0 = var6 / var5;\n                    \n                        if (arg0 == 0x00) { goto label_1E06; }\n                        else { goto label_1D7C; }\n                    }\n                } else {\n                    var temp3 = var5;\n                    memory[var4 + 0x20:var4 + 0x20 + temp3] = code[code.length:code.length + temp3];\n                    var3 = var4;\n                    var4 = var2 - 0x01;\n                \n                    if (arg0 == 0x00) { goto label_1E06; }\n                    else { goto label_1D7C; }\n                }\n            } else {\n            label_1D15:\n                var2 = var2 + 0x01;\n                var3 = 0x0a;\n                var4 = var1;\n            \n                if (!var3) { assert(); }\n            \n                var1 = var4 / var3;\n            \n                if (var1 == 0x00) { goto label_1D30; }\n                else { goto label_1D15; }\n            }\n        } else {\n            var temp4 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp4 + 0x40;\n            memory[temp4:temp4 + 0x20] = 0x01;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = 0x3000000000000000000000000000000000000000000000000000000000000000;\n            return temp4;\n        }\n    }\n    \n    function func_1E53(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n    }\n    \n    function func_1EC5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x1ed1;\n        var var3 = arg1;\n        var2 = func_154B(var3);\n        var1 = var2;\n        var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var2) {\n        label_1F40:\n        \n            if (var2) {\n            label_1F51:\n                return var2;\n            } else {\n                var2 = 0x1f50;\n                var3 = var1;\n                var var4 = arg0;\n                var2 = func_1BD0(var3, var4);\n                goto label_1F51;\n            }\n        } else {\n            var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0x1f28;\n            var4 = arg1;\n            var3 = func_11B2(var4);\n            var2 = var3 & 0xffffffffffffffffffffffffffffffffffffffff == var2;\n            goto label_1F40;\n        }\n    }\n    \n    function func_1F5A(var arg0, var arg1, var arg2) {\n        var var0 = 0x1f65;\n        var var1 = arg0;\n        var var2 = arg1;\n        var var3 = arg2;\n        func_269D(var1, var2, var3);\n        var0 = 0x1f6f;\n        var1 = arg0;\n        var2 = arg2;\n        func_2864(var1, var2);\n        var0 = 0x1f79;\n        var1 = arg1;\n        var2 = arg2;\n        func_258A(var1, var2);\n    }\n    \n    function func_1F7E(var arg0) returns (var r0) { return storage[arg0]; }\n    \n    function func_1F8C(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1fad;\n        var var2 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var1 = func_2A08(var2);\n    \n        if (var1) {\n            var1 = 0x00;\n            var2 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = 0x150b7a02;\n            var var4 = msg.sender;\n            var var5 = arg0;\n            var var6 = arg2;\n            var temp0 = arg3;\n            var var7 = temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp2 = temp1 + 0x04;\n            var var8 = temp2;\n            memory[var8:var8 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp3 = var8 + 0x20;\n            memory[temp3:temp3 + 0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = var6;\n            var temp5 = temp4 + 0x20;\n            var var9 = temp5;\n            var temp6 = var9 + 0x20;\n            memory[var9:var9 + 0x20] = temp6 - var8;\n            memory[temp6:temp6 + 0x20] = memory[var7:var7 + 0x20];\n            var var10 = temp6 + 0x20;\n            var var11 = var7 + 0x20;\n            var var12 = memory[var7:var7 + 0x20];\n            var var13 = var12;\n            var var14 = var10;\n            var var15 = var11;\n            var var16 = 0x00;\n        \n            if (var16 >= var13) {\n            label_20B3:\n                var temp7 = var12;\n                var10 = temp7 + var10;\n                var11 = temp7 & 0x1f;\n            \n                if (!var11) {\n                    var4 = var10;\n                    var5 = 0x20;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = 0x00;\n                    var10 = var2;\n                    var11 = !address(var10).code.length;\n                \n                    if (var11) { revert(memory[0x00:0x00]); }\n                \n                label_2102:\n                    var temp8;\n                    temp8, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n                    var5 = !temp8;\n                \n                    if (!var5) {\n                        var2 = memory[0x40:0x60];\n                        var3 = returndata.length;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = memory[var2:var2 + 0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff == ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & 0x0100000000000000000000000000000000000000000000000000000000 * 0x150b7a02;\n                    \n                    label_21A7:\n                        return var0;\n                    } else {\n                        var temp9 = returndata.length;\n                        memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp10 = var11;\n                    var temp11 = var10 - temp10;\n                    memory[temp11:temp11 + 0x20] = ~(0x0100 ** (0x20 - temp10) - 0x01) & memory[temp11:temp11 + 0x20];\n                    var4 = temp11 + 0x20;\n                    var5 = 0x20;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = 0x00;\n                    var10 = var2;\n                    var11 = !address(var10).code.length;\n                \n                    if (!var11) { goto label_2102; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_20A1:\n                var temp12 = var16;\n                memory[var14 + temp12:var14 + temp12 + 0x20] = memory[var15 + temp12:var15 + temp12 + 0x20];\n                var16 = temp12 + 0x20;\n            \n                if (var16 >= var13) { goto label_20B3; }\n                else { goto label_20A1; }\n            }\n        } else {\n            var0 = 0x01;\n            goto label_21A7;\n        }\n    }\n    \n    function func_21AF(var arg0) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x21ba;\n        var var2 = arg0;\n        var1 = func_1E53(var2);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0b;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var1 = temp3;\n        var2 = temp0;\n        var var3 = temp2;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp4 = storage[var5];\n        var var6 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var6) {\n        label_226C:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp5 = var4;\n            var temp6 = temp5 + var6;\n            var4 = temp6;\n            memory[0x00:0x20] = var5;\n            var temp7 = keccak256(memory[0x00:0x20]);\n            memory[temp5:temp5 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp5 + 0x20;\n        \n            if (var4 <= var6) { goto label_2263; }\n        \n        label_224F:\n            var temp8 = var5;\n            var temp9 = var6;\n            memory[temp9:temp9 + 0x20] = storage[temp8];\n            var5 = temp8 + 0x01;\n            var6 = temp9 + 0x20;\n        \n            if (var4 > var6) { goto label_224F; }\n        \n        label_2263:\n            var temp10 = var4;\n            var temp11 = temp10 + (var6 - temp10 & 0x1f);\n            var6 = temp10;\n            var4 = temp11;\n            goto label_226C;\n        } else {\n            var temp12 = var4;\n            memory[temp12:temp12 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp12 + 0x20;\n            var6 = var6;\n            goto label_226C;\n        }\n    }\n    \n    function func_2344(var arg0) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x0c] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x0c] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x0c] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_2440(var arg0, var arg1) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x2485;\n        var var1 = arg1;\n        var0 = func_1E53(var1);\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var0 = 0x252a;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var1 = keccak256(memory[0x00:0x40]);\n        func_2A1B(var1);\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + memory[0x40:0x60] - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0xffffffffffffffffffffffffffffffffffffffff & 0x00, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1]]);\n    }\n    \n    function func_258A(var arg0, var arg1) {\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        var temp2 = arg1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = temp1;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3] + 0x01;\n        storage[temp3] = temp4;\n        memory[0x00:0x20] = temp3;\n        storage[keccak256(memory[0x00:0x20]) + (temp4 - 0x01)] = temp2;\n    }\n    \n    function func_2651(var arg0) {\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = storage[0x07];\n        var temp1 = storage[0x07] + 0x01;\n        storage[0x07] = temp1;\n        memory[0x00:0x20] = 0x07;\n        storage[keccak256(memory[0x00:0x20]) + (temp1 - 0x01)] = temp0;\n    }\n    \n    function func_269D(var arg0, var arg1, var arg2) {\n        var var0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var1 = 0x26bd;\n        var var2 = arg2;\n        var1 = func_154B(var2);\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff != var0) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x2724;\n        var1 = arg2;\n        func_2A31(var1);\n        var0 = 0x276b;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var1 = keccak256(memory[0x00:0x40]);\n        func_2AF1(var1);\n        var0 = 0x27b2;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var1 = keccak256(memory[0x00:0x40]);\n        func_2A1B(var1);\n        var temp0 = arg1;\n        var temp1 = arg2;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + memory[0x40:0x60] - temp3], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1]]);\n    }\n    \n    function func_2864(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0x28bc;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = 0x01;\n        var1 = func_2B14(var2, var3);\n        var temp0 = var1;\n        var0 = temp0;\n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x06;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 == var0) {\n        label_29AF:\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var3 = 0x2a01;\n            var var5 = var2 - 0x01;\n            var var4 = keccak256(memory[0x00:0x40]);\n            func_2BB6(var4, var5);\n            return;\n        } else {\n            var2 = 0x00;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var3 = keccak256(memory[0x00:0x40]);\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n            var2 = storage[keccak256(memory[0x00:0x20]) + var4];\n            var3 = var2;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var4 = keccak256(memory[0x00:0x40]);\n            var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            storage[keccak256(memory[0x00:0x20]) + var5] = var3;\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x06;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            goto label_29AF;\n        }\n    }\n    \n    function func_2A08(var arg0) returns (var r0) { return address(arg0).code.length > 0x00; }\n    \n    function func_2A1B(var arg0) {\n        var temp0 = arg0;\n        storage[temp0] = storage[temp0] + 0x01;\n    }\n    \n    function func_2A31(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { return; }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff) | 0x00;\n    }\n    \n    function func_2AF1(var arg0) {\n        var var0 = 0x2b09;\n        var var1 = storage[arg0];\n        var var2 = 0x01;\n        var0 = func_2B14(var1, var2);\n        storage[arg0] = var0;\n    }\n    \n    function func_2B14(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2B36(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_2BA5:\n                var temp4 = arg1;\n                arg1 = 0x2bb2;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_2BE2(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_2BA4:\n                    goto label_2BA5;\n                } else {\n                label_2B92:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_2BA4; }\n                    else { goto label_2B92; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_2BA5;\n        }\n    }\n    \n    function func_2BB6(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_2BDD:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x2bdc;\n            var var1 = temp4;\n            var var2 = temp3 + arg1;\n            var0 = func_2BE2(var1, var2);\n            goto label_2BDD;\n        }\n    }\n    \n    function func_2BE2(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x2c04;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_2C00(arg1, var0); }\n    \n    label_2BF1:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_2BF1; }\n    \n        arg0 = func_2C00(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2C00(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_01D4:\n            var var0 = storage[0x0e];\n        \n            if (msg.value < var0) { stop(); }\n        \n            var var1 = 0xffffffffffffffffffffffffffffffffffffffff & 0x4257d02e2854c9c86d6975fcd14a1af4fa65a652;\n            var var2 = 0x08fc;\n            var var3 = 0x02;\n            var var4 = msg.value;\n        \n            if (!var3) { assert(); }\n        \n            var temp0 = var4 / var3;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(var1).call.gas(!temp0 * var2).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n            var1 = !temp2;\n        \n            if (!var1) {\n                var1 = 0xffffffffffffffffffffffffffffffffffffffff & 0x2ea533314069dc9b4df29e72bd1dfb64cc68456d;\n                var2 = 0x08fc;\n                var3 = 0x02;\n                var4 = msg.value;\n            \n                if (!var3) { assert(); }\n            \n                var temp3 = var4 / var3;\n                var temp4 = memory[0x40:0x60];\n                var temp5;\n                temp5, memory[temp4:temp4 + 0x00] = address(var1).call.gas(!temp3 * var2).value(temp3)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n                var1 = !temp5;\n            \n                if (!var1) {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = msg.sender;\n                    var temp7 = temp6 + 0x20;\n                    memory[temp7:temp7 + 0x20] = msg.value;\n                    var temp8 = memory[0x40:0x60];\n                    log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0x6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be770]);\n                    var1 = 0x0322;\n                    var2 = msg.sender;\n                    func_0FE6(var2);\n                    stop();\n                } else {\n                    var temp9 = returndata.length;\n                    memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp10 = returndata.length;\n                memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000;\n        \n            if (0x8da5cb5b > var0) {\n                if (0x2f745c59 > var0) {\n                    if (0x095ea7b3 > var0) {\n                        if (var0 == 0x01ffc9a7) {\n                            // Dispatch table entry for supportsInterface(bytes4)\n                            var1 = msg.value;\n                        \n                            if (var1) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = 0x037e;\n                            var2 = 0x04;\n                            var3 = msg.data.length - var2;\n                        \n                            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = supportsInterface(var2, var3);\n                            var temp11 = memory[0x40:0x60];\n                            memory[temp11:temp11 + 0x20] = !!var1;\n                            var temp12 = memory[0x40:0x60];\n                            return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n                        } else if (var0 == 0x06fdde03) {\n                            // Dispatch table entry for name()\n                            var1 = msg.value;\n                        \n                            if (var1) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = 0x03ad;\n                            var1 = name();\n                            var temp13 = memory[0x40:0x60];\n                            var2 = temp13;\n                            var3 = var2;\n                            var temp14 = var3 + 0x20;\n                            memory[var3:var3 + 0x20] = temp14 - var3;\n                            var temp15 = var1;\n                            memory[temp14:temp14 + 0x20] = memory[temp15:temp15 + 0x20];\n                            var4 = temp14 + 0x20;\n                            var var6 = memory[temp15:temp15 + 0x20];\n                            var var5 = temp15 + 0x20;\n                            var var7 = var6;\n                            var var8 = var4;\n                            var var9 = var5;\n                            var var10 = 0x00;\n                        \n                            if (var10 >= var7) {\n                            label_03ED:\n                                var temp16 = var6;\n                                var4 = temp16 + var4;\n                                var5 = temp16 & 0x1f;\n                            \n                                if (!var5) {\n                                    var temp17 = memory[0x40:0x60];\n                                    return memory[temp17:temp17 + var4 - temp17];\n                                } else {\n                                    var temp18 = var5;\n                                    var temp19 = var4 - temp18;\n                                    memory[temp19:temp19 + 0x20] = ~(0x0100 ** (0x20 - temp18) - 0x01) & memory[temp19:temp19 + 0x20];\n                                    var temp20 = memory[0x40:0x60];\n                                    return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n                                }\n                            } else {\n                            label_03DB:\n                                var temp21 = var10;\n                                memory[var8 + temp21:var8 + temp21 + 0x20] = memory[var9 + temp21:var9 + temp21 + 0x20];\n                                var10 = temp21 + 0x20;\n                            \n                                if (var10 >= var7) { goto label_03ED; }\n                                else { goto label_03DB; }\n                            }\n                        } else if (var0 == 0x081812fc) {\n                            // Dispatch table entry for getApproved(uint256)\n                            var1 = msg.value;\n                        \n                            if (var1) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = 0x0461;\n                            var2 = 0x04;\n                            var3 = msg.data.length - var2;\n                        \n                            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = getApproved(var2, var3);\n                            var temp22 = memory[0x40:0x60];\n                            memory[temp22:temp22 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var temp23 = memory[0x40:0x60];\n                            return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n                        } else { goto label_01D4; }\n                    } else if (var0 == 0x095ea7b3) {\n                        // Dispatch table entry for approve(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x04fc;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                    \n                        approve(var2, var3);\n                        stop();\n                    } else if (var0 == 0x18160ddd) {\n                        // Dispatch table entry for totalSupply()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0513;\n                        var1 = totalSupply();\n                        var temp24 = memory[0x40:0x60];\n                        memory[temp24:temp24 + 0x20] = var1;\n                        var temp25 = memory[0x40:0x60];\n                        return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n                    } else if (var0 == 0x19465953) {\n                        // Dispatch table entry for changeInfo(string)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x05ef;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        changeInfo(var2, var3);\n                        stop();\n                    } else if (var0 == 0x23b872dd) {\n                        // Dispatch table entry for transferFrom(address,address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x066a;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                    \n                        transferFrom(var2, var3);\n                        stop();\n                    } else { goto label_01D4; }\n                } else if (0x4f6ccce7 > var0) {\n                    if (var0 == 0x2f745c59) {\n                        // Dispatch table entry for tokenOfOwnerByIndex(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x06c5;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = tokenOfOwnerByIndex(var2, var3);\n                        var temp26 = memory[0x40:0x60];\n                        memory[temp26:temp26 + 0x20] = var1;\n                        var temp27 = memory[0x40:0x60];\n                        return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n                    } else if (var0 == 0x370158ea) {\n                        // Dispatch table entry for info()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x06f0;\n                        var2 = info();\n                        var temp28 = memory[0x40:0x60];\n                        var3 = temp28;\n                        var4 = var3;\n                        var temp29 = var4 + 0x20;\n                        memory[var4:var4 + 0x20] = temp29 - var4;\n                        var temp30 = var2;\n                        memory[temp29:temp29 + 0x20] = memory[temp30:temp30 + 0x20];\n                        var5 = temp29 + 0x20;\n                        var6 = temp30 + 0x20;\n                        var7 = memory[temp30:temp30 + 0x20];\n                        var8 = var7;\n                        var9 = var5;\n                        var10 = var6;\n                        var var11 = 0x00;\n                    \n                        if (var11 >= var8) {\n                        label_0730:\n                            var temp31 = var7;\n                            var5 = temp31 + var5;\n                            var6 = temp31 & 0x1f;\n                        \n                            if (!var6) {\n                                var temp32 = memory[0x40:0x60];\n                                return memory[temp32:temp32 + var5 - temp32];\n                            } else {\n                                var temp33 = var6;\n                                var temp34 = var5 - temp33;\n                                memory[temp34:temp34 + 0x20] = ~(0x0100 ** (0x20 - temp33) - 0x01) & memory[temp34:temp34 + 0x20];\n                                var temp35 = memory[0x40:0x60];\n                                return memory[temp35:temp35 + (temp34 + 0x20) - temp35];\n                            }\n                        } else {\n                        label_071E:\n                            var temp36 = var11;\n                            memory[var9 + temp36:var9 + temp36 + 0x20] = memory[var10 + temp36:var10 + temp36 + 0x20];\n                            var11 = temp36 + 0x20;\n                        \n                            if (var11 >= var8) { goto label_0730; }\n                            else { goto label_071E; }\n                        }\n                    } else if (var0 == 0x42842e0e) {\n                        // Dispatch table entry for safeTransferFrom(address,address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x07e4;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                    \n                        safeTransferFrom(var2, var3);\n                        stop();\n                    } else { goto label_01D4; }\n                } else if (var0 == 0x4f6ccce7) {\n                    // Dispatch table entry for tokenByIndex(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x081f;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = tokenByIndex(var2, var3);\n                    var temp37 = memory[0x40:0x60];\n                    memory[temp37:temp37 + 0x20] = var1;\n                    var temp38 = memory[0x40:0x60];\n                    return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n                } else if (var0 == 0x6352211e) {\n                    // Dispatch table entry for ownerOf(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x086e;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = ownerOf(var2, var3);\n                    var temp39 = memory[0x40:0x60];\n                    memory[temp39:temp39 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp40 = memory[0x40:0x60];\n                    return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n                } else if (var0 == 0x70a08231) {\n                    // Dispatch table entry for balanceOf(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x08ff;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = balanceOf(var2, var3);\n                    var temp41 = memory[0x40:0x60];\n                    memory[temp41:temp41 + 0x20] = var1;\n                    var temp42 = memory[0x40:0x60];\n                    return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n                } else if (var0 == 0x715018a6) {\n                    // Dispatch table entry for renounceOwnership()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x092a;\n                    renounceOwnership();\n                    stop();\n                } else { goto label_01D4; }\n            } else if (0xbf4abd3f > var0) {\n                if (0xa035b1fe > var0) {\n                    if (var0 == 0x8da5cb5b) {\n                        // Dispatch table entry for owner()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0941;\n                        var1 = owner();\n                        var temp43 = memory[0x40:0x60];\n                        memory[temp43:temp43 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var temp44 = memory[0x40:0x60];\n                        return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n                    } else if (var0 == 0x8f32d59b) {\n                        // Dispatch table entry for isOwner()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0998;\n                        var1 = isOwner();\n                        var temp45 = memory[0x40:0x60];\n                        memory[temp45:temp45 + 0x20] = !!var1;\n                        var temp46 = memory[0x40:0x60];\n                        return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n                    } else if (var0 == 0x95d89b41) {\n                        // Dispatch table entry for symbol()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x09c7;\n                        var1 = symbol();\n                        var temp47 = memory[0x40:0x60];\n                        var2 = temp47;\n                        var3 = var2;\n                        var temp48 = var3 + 0x20;\n                        memory[var3:var3 + 0x20] = temp48 - var3;\n                        var temp49 = var1;\n                        memory[temp48:temp48 + 0x20] = memory[temp49:temp49 + 0x20];\n                        var4 = temp48 + 0x20;\n                        var6 = memory[temp49:temp49 + 0x20];\n                        var5 = temp49 + 0x20;\n                        var7 = var6;\n                        var8 = var4;\n                        var9 = var5;\n                        var10 = 0x00;\n                    \n                        if (var10 >= var7) {\n                        label_0A07:\n                            var temp50 = var6;\n                            var4 = temp50 + var4;\n                            var5 = temp50 & 0x1f;\n                        \n                            if (!var5) {\n                                var temp51 = memory[0x40:0x60];\n                                return memory[temp51:temp51 + var4 - temp51];\n                            } else {\n                                var temp52 = var5;\n                                var temp53 = var4 - temp52;\n                                memory[temp53:temp53 + 0x20] = ~(0x0100 ** (0x20 - temp52) - 0x01) & memory[temp53:temp53 + 0x20];\n                                var temp54 = memory[0x40:0x60];\n                                return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n                            }\n                        } else {\n                        label_09F5:\n                            var temp55 = var10;\n                            memory[var8 + temp55:var8 + temp55 + 0x20] = memory[var9 + temp55:var9 + temp55 + 0x20];\n                            var10 = temp55 + 0x20;\n                        \n                            if (var10 >= var7) { goto label_0A07; }\n                            else { goto label_09F5; }\n                        }\n                    } else { goto label_01D4; }\n                } else if (var0 == 0xa035b1fe) {\n                    // Dispatch table entry for price()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0a57;\n                    var2 = price();\n                    var temp56 = memory[0x40:0x60];\n                    memory[temp56:temp56 + 0x20] = var2;\n                    var temp57 = memory[0x40:0x60];\n                    return memory[temp57:temp57 + (temp56 + 0x20) - temp57];\n                } else if (var0 == 0xa22cb465) {\n                    // Dispatch table entry for setApprovalForAll(address,bool)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0ac8;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    setApprovalForAll(var2, var3);\n                    stop();\n                } else if (var0 == 0xaf9fefbf) {\n                    // Dispatch table entry for infohasnotbeenset()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0adf;\n                    var2 = infohasnotbeenset();\n                    var temp58 = memory[0x40:0x60];\n                    memory[temp58:temp58 + 0x20] = !!var2;\n                    var temp59 = memory[0x40:0x60];\n                    return memory[temp59:temp59 + (temp58 + 0x20) - temp59];\n                } else if (var0 == 0xb88d4fde) {\n                    // Dispatch table entry for safeTransferFrom(address,address,uint256,bytes)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0c09;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n                \n                    safeTransferFrom(var2, var3);\n                    stop();\n                } else { goto label_01D4; }\n            } else if (0xd547cfb7 > var0) {\n                if (var0 == 0xbf4abd3f) {\n                    // Dispatch table entry for 0xbf4abd3f (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0c20;\n                    var2 = func_19C9();\n                    var temp60 = memory[0x40:0x60];\n                    memory[temp60:temp60 + 0x20] = var2;\n                    var temp61 = memory[0x40:0x60];\n                    return memory[temp61:temp61 + (temp60 + 0x20) - temp61];\n                } else if (var0 == 0xc21ab7f9) {\n                    // Dispatch table entry for createToken(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0c85;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = createToken(var2, var3);\n                    var temp62 = memory[0x40:0x60];\n                    var2 = temp62;\n                    var3 = var2;\n                    var temp63 = var3 + 0x20;\n                    memory[var3:var3 + 0x20] = temp63 - var3;\n                    var temp64 = var1;\n                    memory[temp63:temp63 + 0x20] = memory[temp64:temp64 + 0x20];\n                    var4 = temp63 + 0x20;\n                    var5 = temp64 + 0x20;\n                    var6 = memory[temp64:temp64 + 0x20];\n                    var7 = var6;\n                    var8 = var4;\n                    var9 = var5;\n                    var10 = 0x00;\n                \n                    if (var10 >= var7) {\n                    label_0CC5:\n                        var temp65 = var6;\n                        var4 = temp65 + var4;\n                        var5 = temp65 & 0x1f;\n                    \n                        if (!var5) {\n                            var temp66 = memory[0x40:0x60];\n                            return memory[temp66:temp66 + var4 - temp66];\n                        } else {\n                            var temp67 = var5;\n                            var temp68 = var4 - temp67;\n                            memory[temp68:temp68 + 0x20] = ~(0x0100 ** (0x20 - temp67) - 0x01) & memory[temp68:temp68 + 0x20];\n                            var temp69 = memory[0x40:0x60];\n                            return memory[temp69:temp69 + (temp68 + 0x20) - temp69];\n                        }\n                    } else {\n                    label_0CB3:\n                        var temp70 = var10;\n                        memory[var8 + temp70:var8 + temp70 + 0x20] = memory[var9 + temp70:var9 + temp70 + 0x20];\n                        var10 = temp70 + 0x20;\n                    \n                        if (var10 >= var7) { goto label_0CC5; }\n                        else { goto label_0CB3; }\n                    }\n                } else if (var0 == 0xc87b56dd) {\n                    // Dispatch table entry for tokenURI(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0d39;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = tokenURI(var2, var3);\n                    var temp71 = memory[0x40:0x60];\n                    var2 = temp71;\n                    var3 = var2;\n                    var temp72 = var3 + 0x20;\n                    memory[var3:var3 + 0x20] = temp72 - var3;\n                    var temp73 = var1;\n                    memory[temp72:temp72 + 0x20] = memory[temp73:temp73 + 0x20];\n                    var4 = temp72 + 0x20;\n                    var6 = memory[temp73:temp73 + 0x20];\n                    var5 = temp73 + 0x20;\n                    var7 = var6;\n                    var8 = var4;\n                    var9 = var5;\n                    var10 = 0x00;\n                \n                    if (var10 >= var7) {\n                    label_0D79:\n                        var temp74 = var6;\n                        var4 = temp74 + var4;\n                        var5 = temp74 & 0x1f;\n                    \n                        if (!var5) {\n                            var temp75 = memory[0x40:0x60];\n                            return memory[temp75:temp75 + var4 - temp75];\n                        } else {\n                            var temp76 = var5;\n                            var temp77 = var4 - temp76;\n                            memory[temp77:temp77 + 0x20] = ~(0x0100 ** (0x20 - temp76) - 0x01) & memory[temp77:temp77 + 0x20];\n                            var temp78 = memory[0x40:0x60];\n                            return memory[temp78:temp78 + (temp77 + 0x20) - temp78];\n                        }\n                    } else {\n                    label_0D67:\n                        var temp79 = var10;\n                        memory[var8 + temp79:var8 + temp79 + 0x20] = memory[var9 + temp79:var9 + temp79 + 0x20];\n                        var10 = temp79 + 0x20;\n                    \n                        if (var10 >= var7) { goto label_0D79; }\n                        else { goto label_0D67; }\n                    }\n                } else { goto label_01D4; }\n            } else if (var0 == 0xd547cfb7) {\n                // Dispatch table entry for baseTokenURI()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0dc9;\n                var2 = baseTokenURI();\n                var temp80 = memory[0x40:0x60];\n                var3 = temp80;\n                var4 = var3;\n                var temp81 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp81 - var4;\n                var temp82 = var2;\n                memory[temp81:temp81 + 0x20] = memory[temp82:temp82 + 0x20];\n                var5 = temp81 + 0x20;\n                var7 = memory[temp82:temp82 + 0x20];\n                var6 = temp82 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0E09:\n                    var temp83 = var7;\n                    var5 = temp83 + var5;\n                    var6 = temp83 & 0x1f;\n                \n                    if (!var6) {\n                        var temp84 = memory[0x40:0x60];\n                        return memory[temp84:temp84 + var5 - temp84];\n                    } else {\n                        var temp85 = var6;\n                        var temp86 = var5 - temp85;\n                        memory[temp86:temp86 + 0x20] = ~(0x0100 ** (0x20 - temp85) - 0x01) & memory[temp86:temp86 + 0x20];\n                        var temp87 = memory[0x40:0x60];\n                        return memory[temp87:temp87 + (temp86 + 0x20) - temp87];\n                    }\n                } else {\n                label_0DF7:\n                    var temp88 = var11;\n                    memory[var9 + temp88:var9 + temp88 + 0x20] = memory[var10 + temp88:var10 + temp88 + 0x20];\n                    var11 = temp88 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0E09; }\n                    else { goto label_0DF7; }\n                }\n            } else if (var0 == 0xe40e97a7) {\n                // Dispatch table entry for changeBaseTokenURI(string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0f0a;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                changeBaseTokenURI(var2, var3);\n                stop();\n            } else if (var0 == 0xe985e9c5) {\n                // Dispatch table entry for isApprovedForAll(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0f7b;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = isApprovedForAll(var2, var3);\n                var temp89 = memory[0x40:0x60];\n                memory[temp89:temp89 + 0x20] = !!var1;\n                var temp90 = memory[0x40:0x60];\n                return memory[temp90:temp90 + (temp89 + 0x20) - temp90];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0fe4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                transferOwnership(var2, var3);\n                stop();\n            } else { goto label_01D4; }\n        }\n    }\n    \n    function supportsInterface(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = arg0 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getApproved(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_11B2(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function approve(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x120e;\n        var var2 = arg1;\n        var1 = func_154B(var2);\n        var0 = var1;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender == var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n        label_128B:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n            var temp1 = arg0;\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (temp1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-2]]);\n            return;\n        } else {\n            var1 = 0x128a;\n            var2 = var0;\n            var var3 = msg.sender;\n            var1 = func_1BD0(var2, var3);\n            goto label_128B;\n        }\n    }\n    \n    function changeInfo(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var1;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + temp6] = msg.data[var0:var0 + temp6];\n        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00;\n        arg0 = temp7;\n        arg1 = 0x135d;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x10] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = arg0;\n        arg1 = 0x1399;\n        var0 = 0x0f;\n        var2 = memory[temp9:temp9 + 0x20];\n        var1 = temp9 + 0x20;\n        arg1 = func_2B36(var0, var1, var2);\n        storage[0x10] = (storage[0x10] & ~0xff) | 0x00;\n    }\n    \n    function transferFrom(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp1:temp1 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        func_13B8(arg0, arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function tokenOfOwnerByIndex(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x13e8;\n        var var2 = arg0;\n        var1 = func_15C9(var2);\n    \n        if (arg1 >= var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var1 = keccak256(memory[0x00:0x40]);\n        var2 = arg1;\n    \n        if (var2 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var1;\n        return storage[keccak256(memory[0x00:0x20]) + var2];\n    }\n    \n    function safeTransferFrom(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp1:temp1 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var1 = 0x150e;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = var0;\n        var temp2 = memory[0x40:0x60];\n        var var5 = temp2;\n        memory[0x40:0x60] = var5 + 0x20;\n        memory[var5:var5 + 0x20] = 0x00;\n        func_19A1(var2, var3, var4, var5);\n    }\n    \n    function tokenByIndex(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x00;\n        var var0 = 0x151d;\n        var0 = totalSupply();\n    \n        if (arg0 >= var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x07;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1];\n    }\n    \n    function ownerOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_154B(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r0 = func_15C9(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setApprovalForAll(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = !!msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0;\n        memory[0x00:0x20] = temp3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = !!temp1 | (storage[temp4] & ~0xff);\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = !!temp1;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function safeTransferFrom(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        var temp2 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp3 = temp2 + 0x20;\n        arg1 = msg.data[temp2:temp2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp4 = temp3 + 0x20;\n        var var0 = msg.data[temp3:temp3 + 0x20];\n        var var1 = temp1;\n        var var2 = temp0;\n        var var3 = temp4 + 0x20;\n        var var4 = msg.data[temp4:temp4 + 0x20];\n    \n        if (var4 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2 + var4;\n        var4 = temp5;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var4;\n        var temp7 = msg.data[temp6:temp6 + 0x20];\n        var4 = temp7;\n        var var5 = var3;\n        var3 = temp6 + 0x20;\n    \n        if ((var4 > 0x0100000000) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = var4;\n        var temp9 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp9 + (temp8 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp9:temp9 + 0x20] = temp8;\n        var temp10 = temp9 + 0x20;\n        memory[temp10:temp10 + temp8] = msg.data[var3:var3 + temp8];\n        memory[temp10 + temp8:temp10 + temp8 + 0x20] = 0x00;\n        var1 = temp9;\n        func_19A1(arg0, arg1, var0, var1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function createToken(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x60;\n        var var0 = msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x1003d51fef31e52262b1e699f03c789ca6dbefdc;\n    \n        if (var0) {\n        label_1A23:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x1a37;\n            var var1 = arg0;\n            func_0FE6(var1);\n            return arg1;\n        } else {\n            var0 = 0x1a22;\n            var0 = isOwner();\n            goto label_1A23;\n        }\n    }\n    \n    function tokenURI(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x60;\n        var var0 = 0x1a47;\n        var var1 = arg0;\n        var0 = func_1E53(var1);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x1afe;\n        var temp0 = storage[0x11];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var1 = temp2;\n        var var2 = 0x11;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (var6) { return func_1AA5(arg0, var1, var2, var3, var4, var5, var6); }\n    \n        var2 = 0x1af9;\n        var3 = arg0;\n        var2 = func_21AF(var3);\n        var3 = 0x60;\n        var temp4 = var1;\n        var4 = temp4;\n        var5 = var2;\n        var6 = memory[0x40:0x60] + 0x20;\n        var var7 = var6;\n        var var8 = var4 + 0x20;\n        var var9 = memory[var4:var4 + 0x20];\n        var var10 = var9;\n        var var11 = var7;\n        var var12 = var8;\n    \n        if (var10 < 0x20) {\n        label_22B4:\n            var temp5 = 0x0100 ** (0x20 - var10) - 0x01;\n            var temp6 = var11;\n            memory[temp6:temp6 + 0x20] = (memory[var12:var12 + 0x20] & ~temp5) | (memory[temp6:temp6 + 0x20] & temp5);\n            var temp7 = var9 + var7;\n            var7 = temp7;\n            var temp8 = var5;\n            var8 = temp8 + 0x20;\n            var9 = memory[temp8:temp8 + 0x20];\n            var10 = var9;\n            var11 = var7;\n            var12 = var8;\n        \n            if (var10 < 0x20) {\n            label_2307:\n                var temp9 = 0x0100 ** (0x20 - var10) - 0x01;\n                var temp10 = var11;\n                memory[temp10:temp10 + 0x20] = (memory[var12:var12 + 0x20] & ~temp9) | (memory[temp10:temp10 + 0x20] & temp9);\n                var temp11 = var9 + var7;\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = temp11 - temp12 - 0x20;\n                memory[0x40:0x60] = temp11;\n                var0 = temp12;\n                // Error: Could not resolve jump destination!\n            } else {\n            label_22ED:\n                var temp13 = var12;\n                var temp14 = var11;\n                memory[temp14:temp14 + 0x20] = memory[temp13:temp13 + 0x20];\n                var11 = temp14 + 0x20;\n                var12 = temp13 + 0x20;\n                var10 = var10 - 0x20;\n            \n                if (var10 < 0x20) { goto label_2307; }\n                else { goto label_22ED; }\n            }\n        } else {\n        label_229A:\n            var temp15 = var12;\n            var temp16 = var11;\n            memory[temp16:temp16 + 0x20] = memory[temp15:temp15 + 0x20];\n            var11 = temp16 + 0x20;\n            var12 = temp15 + 0x20;\n            var10 = var10 - 0x20;\n        \n            if (var10 < 0x20) { goto label_22B4; }\n            else { goto label_229A; }\n        }\n    }\n    \n    function changeBaseTokenURI(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var1;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + temp6] = msg.data[var0:var0 + temp6];\n        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00;\n        arg0 = temp7;\n        arg1 = 0x1bab;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = arg0;\n        arg1 = 0x1bcc;\n        var0 = 0x11;\n        var2 = memory[temp9:temp9 + 0x20];\n        var1 = temp9 + 0x20;\n        arg1 = func_2B36(var0, var1, var2);\n    }\n    \n    function isApprovedForAll(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r0 = func_1BD0(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function transferOwnership(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x1c6c;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x1c80;\n        var var0 = arg0;\n        func_2344(var0);\n    }\n    \n    function func_0FE6(var arg0) {\n        if (storage[0x0d] > 0x0168) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x00;\n        var var1 = 0x1003;\n        var1 = func_1C83();\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x100f;\n        var var2 = arg0;\n        var var3 = var0;\n        func_1C99(var2, var3);\n        var1 = 0x1021;\n        var2 = var0;\n        var3 = 0x101c;\n        var var4 = var2;\n        var3 = func_1CBA(var4);\n        func_101C(var2, var3);\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = var0;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0xb9144c96c86541f6fa89c9f2f02495cccf4b08cd6643e26d34ee00aa586558a8]);\n        var1 = 0x4b;\n        var2 = storage[0x0e];\n    \n        if (!var1) { assert(); }\n    \n        storage[0x0e] = storage[0x0e] + var2 / var1;\n    }\n    \n    function func_101C(var arg0, var arg1) {\n        var var0 = 0x1e1c;\n        var var1 = arg0;\n        var0 = func_1E53(var1);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0b;\n        var0 = 0x1e4e;\n        var1 = keccak256(memory[0x00:0x40]);\n        var var3 = memory[temp0:temp0 + 0x20];\n        var var2 = temp0 + 0x20;\n        var0 = func_2B36(var1, var2, var3);\n    }\n    \n    function name() returns (var r0) {\n        var var0 = 0x60;\n        var temp0 = storage[0x09];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x09;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_11A8:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_119F; }\n        \n        label_118B:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_118B; }\n        \n        label_119F:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_11A8;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp11 + 0x20;\n            var6 = var6;\n            goto label_11A8;\n        }\n    }\n    \n    function func_11B2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x11bd;\n        var var2 = arg0;\n        var1 = func_1E53(var2);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x07]; }\n    \n    function func_13B8(var arg0, var arg1, var arg2) {\n        var var0 = 0x13c2;\n        var var1 = msg.sender;\n        var var2 = arg2;\n        var0 = func_1EC5(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x13d8;\n        var1 = arg0;\n        var2 = arg1;\n        var var3 = arg2;\n        func_1F5A(var1, var2, var3);\n    }\n    \n    function info() returns (var r0) {\n        var temp0 = storage[0x0f];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x0f;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_14EA:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_14E1; }\n        \n        label_14CD:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_14CD; }\n        \n        label_14E1:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_14EA;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_14EA;\n        }\n    }\n    \n    function func_154B(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_15C9(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x164d;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var var2 = keccak256(memory[0x00:0x40]);\n        return func_1F7E(var2);\n    }\n    \n    function renounceOwnership() {\n        var var0 = 0x165c;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x0c] & 0xffffffffffffffffffffffffffffffffffffffff, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n        storage[0x0c] = (storage[0x0c] & ~0xffffffffffffffffffffffffffffffffffffffff) | 0x00;\n    }\n    \n    function owner() returns (var r0) { return storage[0x0c] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function isOwner() returns (var r0) { return msg.sender == storage[0x0c] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x60;\n        var temp0 = storage[0x0a];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x0a;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_1842:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_1839; }\n        \n        label_1825:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_1825; }\n        \n        label_1839:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_1842;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp11 + 0x20;\n            var6 = var6;\n            goto label_1842;\n        }\n    }\n    \n    function price() returns (var r0) { return storage[0x0e]; }\n    \n    function infohasnotbeenset() returns (var r0) { return storage[0x10] & 0xff; }\n    \n    function func_19A1(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = 0x19ac;\n        var var1 = arg0;\n        var var2 = arg1;\n        var var3 = arg2;\n        func_13B8(var1, var2, var3);\n        var0 = 0x19b8;\n        var1 = arg0;\n        var2 = arg1;\n        var3 = arg2;\n        var var4 = arg3;\n        var0 = func_1F8C(var1, var2, var3, var4);\n    \n        if (var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_19C9() returns (var r0) { return storage[0x0d]; }\n    \n    function func_1AA5(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) returns (var r0) {\n        if (0x1f < arg6) {\n            var temp0 = arg4;\n            var temp1 = temp0 + arg6;\n            arg4 = temp1;\n            memory[0x00:0x20] = arg5;\n            var temp2 = keccak256(memory[0x00:0x20]);\n            memory[temp0:temp0 + 0x20] = storage[temp2];\n            arg5 = temp2 + 0x01;\n            arg6 = temp0 + 0x20;\n        \n            if (arg4 <= arg6) { goto label_1AE2; }\n        \n        label_1ACE:\n            var temp3 = arg5;\n            var temp4 = arg6;\n            memory[temp4:temp4 + 0x20] = storage[temp3];\n            arg5 = temp3 + 0x01;\n            arg6 = temp4 + 0x20;\n        \n            if (arg4 > arg6) { goto label_1ACE; }\n        \n        label_1AE2:\n            var temp5 = arg4;\n            var temp6 = temp5 + (arg6 - temp5 & 0x1f);\n            arg6 = temp5;\n            arg4 = temp6;\n        \n        label_1AEB:\n            arg2 = 0x1af9;\n            arg3 = arg0;\n            arg2 = func_21AF(arg3);\n            arg3 = 0x60;\n            var temp7 = arg1;\n            arg4 = temp7;\n            arg5 = arg2;\n            arg6 = memory[0x40:0x60] + 0x20;\n            var var0 = arg6;\n            var var1 = arg4 + 0x20;\n            var var2 = memory[arg4:arg4 + 0x20];\n            var var3 = var2;\n            var var4 = var0;\n            var var5 = var1;\n        \n            if (var3 < 0x20) {\n            label_22B4:\n                var temp8 = 0x0100 ** (0x20 - var3) - 0x01;\n                var temp9 = var4;\n                memory[temp9:temp9 + 0x20] = (memory[var5:var5 + 0x20] & ~temp8) | (memory[temp9:temp9 + 0x20] & temp8);\n                var temp10 = var2 + var0;\n                var0 = temp10;\n                var temp11 = arg5;\n                var1 = temp11 + 0x20;\n                var2 = memory[temp11:temp11 + 0x20];\n                var3 = var2;\n                var4 = var0;\n                var5 = var1;\n            \n                if (var3 < 0x20) {\n                label_2307:\n                    var temp12 = 0x0100 ** (0x20 - var3) - 0x01;\n                    var temp13 = var4;\n                    memory[temp13:temp13 + 0x20] = (memory[var5:var5 + 0x20] & ~temp12) | (memory[temp13:temp13 + 0x20] & temp12);\n                    var temp14 = var2 + var0;\n                    var temp15 = memory[0x40:0x60];\n                    memory[temp15:temp15 + 0x20] = temp14 - temp15 - 0x20;\n                    memory[0x40:0x60] = temp14;\n                    return temp15;\n                } else {\n                label_22ED:\n                    var temp16 = var5;\n                    var temp17 = var4;\n                    memory[temp17:temp17 + 0x20] = memory[temp16:temp16 + 0x20];\n                    var4 = temp17 + 0x20;\n                    var5 = temp16 + 0x20;\n                    var3 = var3 - 0x20;\n                \n                    if (var3 < 0x20) { goto label_2307; }\n                    else { goto label_22ED; }\n                }\n            } else {\n            label_229A:\n                var temp18 = var5;\n                var temp19 = var4;\n                memory[temp19:temp19 + 0x20] = memory[temp18:temp18 + 0x20];\n                var4 = temp19 + 0x20;\n                var5 = temp18 + 0x20;\n                var3 = var3 - 0x20;\n            \n                if (var3 < 0x20) { goto label_22B4; }\n                else { goto label_229A; }\n            }\n        } else {\n            var temp20 = arg4;\n            memory[temp20:temp20 + 0x20] = storage[arg5] / 0x0100 * 0x0100;\n            arg4 = temp20 + 0x20;\n            arg6 = arg6;\n            goto label_1AEB;\n        }\n    }\n    \n    function baseTokenURI() returns (var r0) {\n        var temp0 = storage[0x11];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x11;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1B9B:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_1B92; }\n        \n        label_1B7E:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1B7E; }\n        \n        label_1B92:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1B9B;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1B9B;\n        }\n    }\n    \n    function func_1BD0(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_1C83() returns (var r0) {\n        storage[0x0d] = storage[0x0d] + 0x01;\n        return storage[0x0d];\n    }\n    \n    function func_1C99(var arg0, var arg1) {\n        var var0 = 0x1ca3;\n        var var1 = arg0;\n        var var2 = arg1;\n        func_2440(var1, var2);\n        var0 = 0x1cad;\n        var1 = arg0;\n        var2 = arg1;\n        func_258A(var1, var2);\n        var0 = 0x1cb6;\n        var1 = arg1;\n        func_2651(var1);\n    }\n    \n    function func_1CBA(var arg0) returns (var r0) {\n        var var0 = 0x60;\n    \n        if (arg0 != 0x00) {\n            var var1 = arg0;\n            var var2 = 0x00;\n        \n            if (var1 == 0x00) {\n            label_1D30:\n                var var3 = 0x60;\n                var temp0 = var2;\n                var temp1 = memory[0x40:0x60];\n                var var4 = temp1;\n                var var5 = temp0;\n                memory[var4:var4 + 0x20] = var5;\n                memory[0x40:0x60] = var4 + (var5 + 0x1f & ~0x1f) + 0x20;\n            \n                if (!var5) {\n                    var3 = var4;\n                    var4 = var2 - 0x01;\n                \n                    if (arg0 == 0x00) {\n                    label_1E06:\n                        return var3;\n                    } else {\n                    label_1D7C:\n                        var5 = 0x0a;\n                        var var6 = arg0;\n                    \n                        if (!var5) { assert(); }\n                    \n                        var5 = (var6 % var5 + 0x30) * 0x0100000000000000000000000000000000000000000000000000000000000000;\n                        var6 = var3;\n                        var temp2 = var4;\n                        var var7 = temp2;\n                        var4 = var7 - 0x01;\n                    \n                        if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                    \n                        memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x01] = byte(var5 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x00);\n                        var5 = 0x0a;\n                        var6 = arg0;\n                    \n                        if (!var5) { assert(); }\n                    \n                        arg0 = var6 / var5;\n                    \n                        if (arg0 == 0x00) { goto label_1E06; }\n                        else { goto label_1D7C; }\n                    }\n                } else {\n                    var temp3 = var5;\n                    memory[var4 + 0x20:var4 + 0x20 + temp3] = code[code.length:code.length + temp3];\n                    var3 = var4;\n                    var4 = var2 - 0x01;\n                \n                    if (arg0 == 0x00) { goto label_1E06; }\n                    else { goto label_1D7C; }\n                }\n            } else {\n            label_1D15:\n                var2 = var2 + 0x01;\n                var3 = 0x0a;\n                var4 = var1;\n            \n                if (!var3) { assert(); }\n            \n                var1 = var4 / var3;\n            \n                if (var1 == 0x00) { goto label_1D30; }\n                else { goto label_1D15; }\n            }\n        } else {\n            var temp4 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp4 + 0x40;\n            memory[temp4:temp4 + 0x20] = 0x01;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = 0x3000000000000000000000000000000000000000000000000000000000000000;\n            return temp4;\n        }\n    }\n    \n    function func_1E53(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n    }\n    \n    function func_1EC5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x1ed1;\n        var var3 = arg1;\n        var2 = func_154B(var3);\n        var1 = var2;\n        var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var2) {\n        label_1F40:\n        \n            if (var2) {\n            label_1F51:\n                return var2;\n            } else {\n                var2 = 0x1f50;\n                var3 = var1;\n                var var4 = arg0;\n                var2 = func_1BD0(var3, var4);\n                goto label_1F51;\n            }\n        } else {\n            var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0x1f28;\n            var4 = arg1;\n            var3 = func_11B2(var4);\n            var2 = var3 & 0xffffffffffffffffffffffffffffffffffffffff == var2;\n            goto label_1F40;\n        }\n    }\n    \n    function func_1F5A(var arg0, var arg1, var arg2) {\n        var var0 = 0x1f65;\n        var var1 = arg0;\n        var var2 = arg1;\n        var var3 = arg2;\n        func_269D(var1, var2, var3);\n        var0 = 0x1f6f;\n        var1 = arg0;\n        var2 = arg2;\n        func_2864(var1, var2);\n        var0 = 0x1f79;\n        var1 = arg1;\n        var2 = arg2;\n        func_258A(var1, var2);\n    }\n    \n    function func_1F7E(var arg0) returns (var r0) { return storage[arg0]; }\n    \n    function func_1F8C(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1fad;\n        var var2 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var1 = func_2A08(var2);\n    \n        if (var1) {\n            var1 = 0x00;\n            var2 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = 0x150b7a02;\n            var var4 = msg.sender;\n            var var5 = arg0;\n            var var6 = arg2;\n            var temp0 = arg3;\n            var var7 = temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp2 = temp1 + 0x04;\n            var var8 = temp2;\n            memory[var8:var8 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp3 = var8 + 0x20;\n            memory[temp3:temp3 + 0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = var6;\n            var temp5 = temp4 + 0x20;\n            var var9 = temp5;\n            var temp6 = var9 + 0x20;\n            memory[var9:var9 + 0x20] = temp6 - var8;\n            memory[temp6:temp6 + 0x20] = memory[var7:var7 + 0x20];\n            var var10 = temp6 + 0x20;\n            var var11 = var7 + 0x20;\n            var var12 = memory[var7:var7 + 0x20];\n            var var13 = var12;\n            var var14 = var10;\n            var var15 = var11;\n            var var16 = 0x00;\n        \n            if (var16 >= var13) {\n            label_20B3:\n                var temp7 = var12;\n                var10 = temp7 + var10;\n                var11 = temp7 & 0x1f;\n            \n                if (!var11) {\n                    var4 = var10;\n                    var5 = 0x20;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = 0x00;\n                    var10 = var2;\n                    var11 = !address(var10).code.length;\n                \n                    if (var11) { revert(memory[0x00:0x00]); }\n                \n                label_2102:\n                    var temp8;\n                    temp8, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n                    var5 = !temp8;\n                \n                    if (!var5) {\n                        var2 = memory[0x40:0x60];\n                        var3 = returndata.length;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = memory[var2:var2 + 0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff == ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & 0x0100000000000000000000000000000000000000000000000000000000 * 0x150b7a02;\n                    \n                    label_21A7:\n                        return var0;\n                    } else {\n                        var temp9 = returndata.length;\n                        memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp10 = var11;\n                    var temp11 = var10 - temp10;\n                    memory[temp11:temp11 + 0x20] = ~(0x0100 ** (0x20 - temp10) - 0x01) & memory[temp11:temp11 + 0x20];\n                    var4 = temp11 + 0x20;\n                    var5 = 0x20;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = 0x00;\n                    var10 = var2;\n                    var11 = !address(var10).code.length;\n                \n                    if (!var11) { goto label_2102; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_20A1:\n                var temp12 = var16;\n                memory[var14 + temp12:var14 + temp12 + 0x20] = memory[var15 + temp12:var15 + temp12 + 0x20];\n                var16 = temp12 + 0x20;\n            \n                if (var16 >= var13) { goto label_20B3; }\n                else { goto label_20A1; }\n            }\n        } else {\n            var0 = 0x01;\n            goto label_21A7;\n        }\n    }\n    \n    function func_21AF(var arg0) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x21ba;\n        var var2 = arg0;\n        var1 = func_1E53(var2);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0b;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var1 = temp3;\n        var2 = temp0;\n        var var3 = temp2;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp4 = storage[var5];\n        var var6 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var6) {\n        label_226C:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp5 = var4;\n            var temp6 = temp5 + var6;\n            var4 = temp6;\n            memory[0x00:0x20] = var5;\n            var temp7 = keccak256(memory[0x00:0x20]);\n            memory[temp5:temp5 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp5 + 0x20;\n        \n            if (var4 <= var6) { goto label_2263; }\n        \n        label_224F:\n            var temp8 = var5;\n            var temp9 = var6;\n            memory[temp9:temp9 + 0x20] = storage[temp8];\n            var5 = temp8 + 0x01;\n            var6 = temp9 + 0x20;\n        \n            if (var4 > var6) { goto label_224F; }\n        \n        label_2263:\n            var temp10 = var4;\n            var temp11 = temp10 + (var6 - temp10 & 0x1f);\n            var6 = temp10;\n            var4 = temp11;\n            goto label_226C;\n        } else {\n            var temp12 = var4;\n            memory[temp12:temp12 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp12 + 0x20;\n            var6 = var6;\n            goto label_226C;\n        }\n    }\n    \n    function func_2344(var arg0) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x0c] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x0c] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x0c] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_2440(var arg0, var arg1) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x2485;\n        var var1 = arg1;\n        var0 = func_1E53(var1);\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var0 = 0x252a;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var1 = keccak256(memory[0x00:0x40]);\n        func_2A1B(var1);\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + memory[0x40:0x60] - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0xffffffffffffffffffffffffffffffffffffffff & 0x00, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1]]);\n    }\n    \n    function func_258A(var arg0, var arg1) {\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        var temp2 = arg1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = temp1;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3] + 0x01;\n        storage[temp3] = temp4;\n        memory[0x00:0x20] = temp3;\n        storage[keccak256(memory[0x00:0x20]) + (temp4 - 0x01)] = temp2;\n    }\n    \n    function func_2651(var arg0) {\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = storage[0x07];\n        var temp1 = storage[0x07] + 0x01;\n        storage[0x07] = temp1;\n        memory[0x00:0x20] = 0x07;\n        storage[keccak256(memory[0x00:0x20]) + (temp1 - 0x01)] = temp0;\n    }\n    \n    function func_269D(var arg0, var arg1, var arg2) {\n        var var0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var1 = 0x26bd;\n        var var2 = arg2;\n        var1 = func_154B(var2);\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff != var0) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x2724;\n        var1 = arg2;\n        func_2A31(var1);\n        var0 = 0x276b;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var1 = keccak256(memory[0x00:0x40]);\n        func_2AF1(var1);\n        var0 = 0x27b2;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var1 = keccak256(memory[0x00:0x40]);\n        func_2A1B(var1);\n        var temp0 = arg1;\n        var temp1 = arg2;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + memory[0x40:0x60] - temp3], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1]]);\n    }\n    \n    function func_2864(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0x28bc;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = 0x01;\n        var1 = func_2B14(var2, var3);\n        var temp0 = var1;\n        var0 = temp0;\n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x06;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 == var0) {\n        label_29AF:\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var3 = 0x2a01;\n            var var5 = var2 - 0x01;\n            var var4 = keccak256(memory[0x00:0x40]);\n            func_2BB6(var4, var5);\n            return;\n        } else {\n            var2 = 0x00;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var3 = keccak256(memory[0x00:0x40]);\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n            var2 = storage[keccak256(memory[0x00:0x20]) + var4];\n            var3 = var2;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var4 = keccak256(memory[0x00:0x40]);\n            var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            storage[keccak256(memory[0x00:0x20]) + var5] = var3;\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x06;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            goto label_29AF;\n        }\n    }\n    \n    function func_2A08(var arg0) returns (var r0) { return address(arg0).code.length > 0x00; }\n    \n    function func_2A1B(var arg0) {\n        var temp0 = arg0;\n        storage[temp0] = storage[temp0] + 0x01;\n    }\n    \n    function func_2A31(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { return; }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff) | 0x00;\n    }\n    \n    function func_2AF1(var arg0) {\n        var var0 = 0x2b09;\n        var var1 = storage[arg0];\n        var var2 = 0x01;\n        var0 = func_2B14(var1, var2);\n        storage[arg0] = var0;\n    }\n    \n    function func_2B14(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2B36(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_2BA5:\n                var temp4 = arg1;\n                arg1 = 0x2bb2;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_2BE2(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_2BA4:\n                    goto label_2BA5;\n                } else {\n                label_2B92:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_2BA4; }\n                    else { goto label_2B92; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_2BA5;\n        }\n    }\n    \n    function func_2BB6(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_2BDD:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x2bdc;\n            var var1 = temp4;\n            var var2 = temp3 + arg1;\n            var0 = func_2BE2(var1, var2);\n            goto label_2BDD;\n        }\n    }\n    \n    function func_2BE2(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x2c04;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_2C00(arg1, var0); }\n    \n    label_2BF1:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_2BF1; }\n    \n        arg0 = func_2C00(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2C00(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_01D4:\n            var var0 = storage[0x0e];\n        \n            if (msg.value < var0) { stop(); }\n        \n            var var1 = 0xffffffffffffffffffffffffffffffffffffffff & 0x4257d02e2854c9c86d6975fcd14a1af4fa65a652;\n            var var2 = 0x08fc;\n            var var3 = 0x02;\n            var var4 = msg.value;\n        \n            if (!var3) { assert(); }\n        \n            var temp0 = var4 / var3;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(var1).call.gas(!temp0 * var2).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n            var1 = !temp2;\n        \n            if (!var1) {\n                var1 = 0xffffffffffffffffffffffffffffffffffffffff & 0x2ea533314069dc9b4df29e72bd1dfb64cc68456d;\n                var2 = 0x08fc;\n                var3 = 0x02;\n                var4 = msg.value;\n            \n                if (!var3) { assert(); }\n            \n                var temp3 = var4 / var3;\n                var temp4 = memory[0x40:0x60];\n                var temp5;\n                temp5, memory[temp4:temp4 + 0x00] = address(var1).call.gas(!temp3 * var2).value(temp3)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n                var1 = !temp5;\n            \n                if (!var1) {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = msg.sender;\n                    var temp7 = temp6 + 0x20;\n                    memory[temp7:temp7 + 0x20] = msg.value;\n                    var temp8 = memory[0x40:0x60];\n                    log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0x6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be770]);\n                    var1 = 0x0322;\n                    var2 = msg.sender;\n                    func_0FE6(var2);\n                    stop();\n                } else {\n                    var temp9 = returndata.length;\n                    memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp10 = returndata.length;\n                memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000;\n        \n            if (0x8da5cb5b > var0) {\n                if (0x2f745c59 > var0) {\n                    if (0x095ea7b3 > var0) {\n                        if (var0 == 0x01ffc9a7) {\n                            // Dispatch table entry for supportsInterface(bytes4)\n                            var1 = msg.value;\n                        \n                            if (var1) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = 0x037e;\n                            var2 = 0x04;\n                            var3 = msg.data.length - var2;\n                        \n                            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = supportsInterface(var2, var3);\n                            var temp11 = memory[0x40:0x60];\n                            memory[temp11:temp11 + 0x20] = !!var1;\n                            var temp12 = memory[0x40:0x60];\n                            return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n                        } else if (var0 == 0x06fdde03) {\n                            // Dispatch table entry for name()\n                            var1 = msg.value;\n                        \n                            if (var1) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = 0x03ad;\n                            var1 = name();\n                            var temp13 = memory[0x40:0x60];\n                            var2 = temp13;\n                            var3 = var2;\n                            var temp14 = var3 + 0x20;\n                            memory[var3:var3 + 0x20] = temp14 - var3;\n                            var temp15 = var1;\n                            memory[temp14:temp14 + 0x20] = memory[temp15:temp15 + 0x20];\n                            var4 = temp14 + 0x20;\n                            var var6 = memory[temp15:temp15 + 0x20];\n                            var var5 = temp15 + 0x20;\n                            var var7 = var6;\n                            var var8 = var4;\n                            var var9 = var5;\n                            var var10 = 0x00;\n                        \n                            if (var10 >= var7) {\n                            label_03ED:\n                                var temp16 = var6;\n                                var4 = temp16 + var4;\n                                var5 = temp16 & 0x1f;\n                            \n                                if (!var5) {\n                                    var temp17 = memory[0x40:0x60];\n                                    return memory[temp17:temp17 + var4 - temp17];\n                                } else {\n                                    var temp18 = var5;\n                                    var temp19 = var4 - temp18;\n                                    memory[temp19:temp19 + 0x20] = ~(0x0100 ** (0x20 - temp18) - 0x01) & memory[temp19:temp19 + 0x20];\n                                    var temp20 = memory[0x40:0x60];\n                                    return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n                                }\n                            } else {\n                            label_03DB:\n                                var temp21 = var10;\n                                memory[var8 + temp21:var8 + temp21 + 0x20] = memory[var9 + temp21:var9 + temp21 + 0x20];\n                                var10 = temp21 + 0x20;\n                            \n                                if (var10 >= var7) { goto label_03ED; }\n                                else { goto label_03DB; }\n                            }\n                        } else if (var0 == 0x081812fc) {\n                            // Dispatch table entry for getApproved(uint256)\n                            var1 = msg.value;\n                        \n                            if (var1) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = 0x0461;\n                            var2 = 0x04;\n                            var3 = msg.data.length - var2;\n                        \n                            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = getApproved(var2, var3);\n                            var temp22 = memory[0x40:0x60];\n                            memory[temp22:temp22 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var temp23 = memory[0x40:0x60];\n                            return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n                        } else { goto label_01D4; }\n                    } else if (var0 == 0x095ea7b3) {\n                        // Dispatch table entry for approve(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x04fc;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                    \n                        approve(var2, var3);\n                        stop();\n                    } else if (var0 == 0x18160ddd) {\n                        // Dispatch table entry for totalSupply()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0513;\n                        var1 = totalSupply();\n                        var temp24 = memory[0x40:0x60];\n                        memory[temp24:temp24 + 0x20] = var1;\n                        var temp25 = memory[0x40:0x60];\n                        return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n                    } else if (var0 == 0x19465953) {\n                        // Dispatch table entry for changeInfo(string)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x05ef;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        changeInfo(var2, var3);\n                        stop();\n                    } else if (var0 == 0x23b872dd) {\n                        // Dispatch table entry for transferFrom(address,address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x066a;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                    \n                        transferFrom(var2, var3);\n                        stop();\n                    } else { goto label_01D4; }\n                } else if (0x4f6ccce7 > var0) {\n                    if (var0 == 0x2f745c59) {\n                        // Dispatch table entry for tokenOfOwnerByIndex(address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x06c5;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = tokenOfOwnerByIndex(var2, var3);\n                        var temp26 = memory[0x40:0x60];\n                        memory[temp26:temp26 + 0x20] = var1;\n                        var temp27 = memory[0x40:0x60];\n                        return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n                    } else if (var0 == 0x370158ea) {\n                        // Dispatch table entry for info()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x06f0;\n                        var2 = info();\n                        var temp28 = memory[0x40:0x60];\n                        var3 = temp28;\n                        var4 = var3;\n                        var temp29 = var4 + 0x20;\n                        memory[var4:var4 + 0x20] = temp29 - var4;\n                        var temp30 = var2;\n                        memory[temp29:temp29 + 0x20] = memory[temp30:temp30 + 0x20];\n                        var5 = temp29 + 0x20;\n                        var6 = temp30 + 0x20;\n                        var7 = memory[temp30:temp30 + 0x20];\n                        var8 = var7;\n                        var9 = var5;\n                        var10 = var6;\n                        var var11 = 0x00;\n                    \n                        if (var11 >= var8) {\n                        label_0730:\n                            var temp31 = var7;\n                            var5 = temp31 + var5;\n                            var6 = temp31 & 0x1f;\n                        \n                            if (!var6) {\n                                var temp32 = memory[0x40:0x60];\n                                return memory[temp32:temp32 + var5 - temp32];\n                            } else {\n                                var temp33 = var6;\n                                var temp34 = var5 - temp33;\n                                memory[temp34:temp34 + 0x20] = ~(0x0100 ** (0x20 - temp33) - 0x01) & memory[temp34:temp34 + 0x20];\n                                var temp35 = memory[0x40:0x60];\n                                return memory[temp35:temp35 + (temp34 + 0x20) - temp35];\n                            }\n                        } else {\n                        label_071E:\n                            var temp36 = var11;\n                            memory[var9 + temp36:var9 + temp36 + 0x20] = memory[var10 + temp36:var10 + temp36 + 0x20];\n                            var11 = temp36 + 0x20;\n                        \n                            if (var11 >= var8) { goto label_0730; }\n                            else { goto label_071E; }\n                        }\n                    } else if (var0 == 0x42842e0e) {\n                        // Dispatch table entry for safeTransferFrom(address,address,uint256)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x07e4;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                    \n                        safeTransferFrom(var2, var3);\n                        stop();\n                    } else { goto label_01D4; }\n                } else if (var0 == 0x4f6ccce7) {\n                    // Dispatch table entry for tokenByIndex(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x081f;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = tokenByIndex(var2, var3);\n                    var temp37 = memory[0x40:0x60];\n                    memory[temp37:temp37 + 0x20] = var1;\n                    var temp38 = memory[0x40:0x60];\n                    return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n                } else if (var0 == 0x6352211e) {\n                    // Dispatch table entry for ownerOf(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x086e;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = ownerOf(var2, var3);\n                    var temp39 = memory[0x40:0x60];\n                    memory[temp39:temp39 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp40 = memory[0x40:0x60];\n                    return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n                } else if (var0 == 0x70a08231) {\n                    // Dispatch table entry for balanceOf(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x08ff;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = balanceOf(var2, var3);\n                    var temp41 = memory[0x40:0x60];\n                    memory[temp41:temp41 + 0x20] = var1;\n                    var temp42 = memory[0x40:0x60];\n                    return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n                } else if (var0 == 0x715018a6) {\n                    // Dispatch table entry for renounceOwnership()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x092a;\n                    renounceOwnership();\n                    stop();\n                } else { goto label_01D4; }\n            } else if (0xbf4abd3f > var0) {\n                if (0xa035b1fe > var0) {\n                    if (var0 == 0x8da5cb5b) {\n                        // Dispatch table entry for owner()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0941;\n                        var1 = owner();\n                        var temp43 = memory[0x40:0x60];\n                        memory[temp43:temp43 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var temp44 = memory[0x40:0x60];\n                        return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n                    } else if (var0 == 0x8f32d59b) {\n                        // Dispatch table entry for isOwner()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x0998;\n                        var1 = isOwner();\n                        var temp45 = memory[0x40:0x60];\n                        memory[temp45:temp45 + 0x20] = !!var1;\n                        var temp46 = memory[0x40:0x60];\n                        return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n                    } else if (var0 == 0x95d89b41) {\n                        // Dispatch table entry for symbol()\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x09c7;\n                        var1 = symbol();\n                        var temp47 = memory[0x40:0x60];\n                        var2 = temp47;\n                        var3 = var2;\n                        var temp48 = var3 + 0x20;\n                        memory[var3:var3 + 0x20] = temp48 - var3;\n                        var temp49 = var1;\n                        memory[temp48:temp48 + 0x20] = memory[temp49:temp49 + 0x20];\n                        var4 = temp48 + 0x20;\n                        var6 = memory[temp49:temp49 + 0x20];\n                        var5 = temp49 + 0x20;\n                        var7 = var6;\n                        var8 = var4;\n                        var9 = var5;\n                        var10 = 0x00;\n                    \n                        if (var10 >= var7) {\n                        label_0A07:\n                            var temp50 = var6;\n                            var4 = temp50 + var4;\n                            var5 = temp50 & 0x1f;\n                        \n                            if (!var5) {\n                                var temp51 = memory[0x40:0x60];\n                                return memory[temp51:temp51 + var4 - temp51];\n                            } else {\n                                var temp52 = var5;\n                                var temp53 = var4 - temp52;\n                                memory[temp53:temp53 + 0x20] = ~(0x0100 ** (0x20 - temp52) - 0x01) & memory[temp53:temp53 + 0x20];\n                                var temp54 = memory[0x40:0x60];\n                                return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n                            }\n                        } else {\n                        label_09F5:\n                            var temp55 = var10;\n                            memory[var8 + temp55:var8 + temp55 + 0x20] = memory[var9 + temp55:var9 + temp55 + 0x20];\n                            var10 = temp55 + 0x20;\n                        \n                            if (var10 >= var7) { goto label_0A07; }\n                            else { goto label_09F5; }\n                        }\n                    } else { goto label_01D4; }\n                } else if (var0 == 0xa035b1fe) {\n                    // Dispatch table entry for price()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0a57;\n                    var2 = price();\n                    var temp56 = memory[0x40:0x60];\n                    memory[temp56:temp56 + 0x20] = var2;\n                    var temp57 = memory[0x40:0x60];\n                    return memory[temp57:temp57 + (temp56 + 0x20) - temp57];\n                } else if (var0 == 0xa22cb465) {\n                    // Dispatch table entry for setApprovalForAll(address,bool)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0ac8;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    setApprovalForAll(var2, var3);\n                    stop();\n                } else if (var0 == 0xaf9fefbf) {\n                    // Dispatch table entry for infohasnotbeenset()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0adf;\n                    var2 = infohasnotbeenset();\n                    var temp58 = memory[0x40:0x60];\n                    memory[temp58:temp58 + 0x20] = !!var2;\n                    var temp59 = memory[0x40:0x60];\n                    return memory[temp59:temp59 + (temp58 + 0x20) - temp59];\n                } else if (var0 == 0xb88d4fde) {\n                    // Dispatch table entry for safeTransferFrom(address,address,uint256,bytes)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0c09;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n                \n                    safeTransferFrom(var2, var3);\n                    stop();\n                } else { goto label_01D4; }\n            } else if (0xd547cfb7 > var0) {\n                if (var0 == 0xbf4abd3f) {\n                    // Dispatch table entry for 0xbf4abd3f (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0c20;\n                    var2 = func_19C9();\n                    var temp60 = memory[0x40:0x60];\n                    memory[temp60:temp60 + 0x20] = var2;\n                    var temp61 = memory[0x40:0x60];\n                    return memory[temp61:temp61 + (temp60 + 0x20) - temp61];\n                } else if (var0 == 0xc21ab7f9) {\n                    // Dispatch table entry for createToken(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0c85;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = createToken(var2, var3);\n                    var temp62 = memory[0x40:0x60];\n                    var2 = temp62;\n                    var3 = var2;\n                    var temp63 = var3 + 0x20;\n                    memory[var3:var3 + 0x20] = temp63 - var3;\n                    var temp64 = var1;\n                    memory[temp63:temp63 + 0x20] = memory[temp64:temp64 + 0x20];\n                    var4 = temp63 + 0x20;\n                    var5 = temp64 + 0x20;\n                    var6 = memory[temp64:temp64 + 0x20];\n                    var7 = var6;\n                    var8 = var4;\n                    var9 = var5;\n                    var10 = 0x00;\n                \n                    if (var10 >= var7) {\n                    label_0CC5:\n                        var temp65 = var6;\n                        var4 = temp65 + var4;\n                        var5 = temp65 & 0x1f;\n                    \n                        if (!var5) {\n                            var temp66 = memory[0x40:0x60];\n                            return memory[temp66:temp66 + var4 - temp66];\n                        } else {\n                            var temp67 = var5;\n                            var temp68 = var4 - temp67;\n                            memory[temp68:temp68 + 0x20] = ~(0x0100 ** (0x20 - temp67) - 0x01) & memory[temp68:temp68 + 0x20];\n                            var temp69 = memory[0x40:0x60];\n                            return memory[temp69:temp69 + (temp68 + 0x20) - temp69];\n                        }\n                    } else {\n                    label_0CB3:\n                        var temp70 = var10;\n                        memory[var8 + temp70:var8 + temp70 + 0x20] = memory[var9 + temp70:var9 + temp70 + 0x20];\n                        var10 = temp70 + 0x20;\n                    \n                        if (var10 >= var7) { goto label_0CC5; }\n                        else { goto label_0CB3; }\n                    }\n                } else if (var0 == 0xc87b56dd) {\n                    // Dispatch table entry for tokenURI(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0d39;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = tokenURI(var2, var3);\n                    var temp71 = memory[0x40:0x60];\n                    var2 = temp71;\n                    var3 = var2;\n                    var temp72 = var3 + 0x20;\n                    memory[var3:var3 + 0x20] = temp72 - var3;\n                    var temp73 = var1;\n                    memory[temp72:temp72 + 0x20] = memory[temp73:temp73 + 0x20];\n                    var4 = temp72 + 0x20;\n                    var6 = memory[temp73:temp73 + 0x20];\n                    var5 = temp73 + 0x20;\n                    var7 = var6;\n                    var8 = var4;\n                    var9 = var5;\n                    var10 = 0x00;\n                \n                    if (var10 >= var7) {\n                    label_0D79:\n                        var temp74 = var6;\n                        var4 = temp74 + var4;\n                        var5 = temp74 & 0x1f;\n                    \n                        if (!var5) {\n                            var temp75 = memory[0x40:0x60];\n                            return memory[temp75:temp75 + var4 - temp75];\n                        } else {\n                            var temp76 = var5;\n                            var temp77 = var4 - temp76;\n                            memory[temp77:temp77 + 0x20] = ~(0x0100 ** (0x20 - temp76) - 0x01) & memory[temp77:temp77 + 0x20];\n                            var temp78 = memory[0x40:0x60];\n                            return memory[temp78:temp78 + (temp77 + 0x20) - temp78];\n                        }\n                    } else {\n                    label_0D67:\n                        var temp79 = var10;\n                        memory[var8 + temp79:var8 + temp79 + 0x20] = memory[var9 + temp79:var9 + temp79 + 0x20];\n                        var10 = temp79 + 0x20;\n                    \n                        if (var10 >= var7) { goto label_0D79; }\n                        else { goto label_0D67; }\n                    }\n                } else { goto label_01D4; }\n            } else if (var0 == 0xd547cfb7) {\n                // Dispatch table entry for baseTokenURI()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0dc9;\n                var2 = baseTokenURI();\n                var temp80 = memory[0x40:0x60];\n                var3 = temp80;\n                var4 = var3;\n                var temp81 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp81 - var4;\n                var temp82 = var2;\n                memory[temp81:temp81 + 0x20] = memory[temp82:temp82 + 0x20];\n                var5 = temp81 + 0x20;\n                var7 = memory[temp82:temp82 + 0x20];\n                var6 = temp82 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0E09:\n                    var temp83 = var7;\n                    var5 = temp83 + var5;\n                    var6 = temp83 & 0x1f;\n                \n                    if (!var6) {\n                        var temp84 = memory[0x40:0x60];\n                        return memory[temp84:temp84 + var5 - temp84];\n                    } else {\n                        var temp85 = var6;\n                        var temp86 = var5 - temp85;\n                        memory[temp86:temp86 + 0x20] = ~(0x0100 ** (0x20 - temp85) - 0x01) & memory[temp86:temp86 + 0x20];\n                        var temp87 = memory[0x40:0x60];\n                        return memory[temp87:temp87 + (temp86 + 0x20) - temp87];\n                    }\n                } else {\n                label_0DF7:\n                    var temp88 = var11;\n                    memory[var9 + temp88:var9 + temp88 + 0x20] = memory[var10 + temp88:var10 + temp88 + 0x20];\n                    var11 = temp88 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0E09; }\n                    else { goto label_0DF7; }\n                }\n            } else if (var0 == 0xe40e97a7) {\n                // Dispatch table entry for changeBaseTokenURI(string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0f0a;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                changeBaseTokenURI(var2, var3);\n                stop();\n            } else if (var0 == 0xe985e9c5) {\n                // Dispatch table entry for isApprovedForAll(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0f7b;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = isApprovedForAll(var2, var3);\n                var temp89 = memory[0x40:0x60];\n                memory[temp89:temp89 + 0x20] = !!var1;\n                var temp90 = memory[0x40:0x60];\n                return memory[temp90:temp90 + (temp89 + 0x20) - temp90];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0fe4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                transferOwnership(var2, var3);\n                stop();\n            } else { goto label_01D4; }\n        }\n    }\n    \n    function supportsInterface(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = arg0 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getApproved(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_11B2(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function approve(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x120e;\n        var var2 = arg1;\n        var1 = func_154B(var2);\n        var0 = var1;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender == var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n        label_128B:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n            var temp1 = arg0;\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (temp1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-2]]);\n            return;\n        } else {\n            var1 = 0x128a;\n            var2 = var0;\n            var var3 = msg.sender;\n            var1 = func_1BD0(var2, var3);\n            goto label_128B;\n        }\n    }\n    \n    function changeInfo(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var1;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + temp6] = msg.data[var0:var0 + temp6];\n        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00;\n        arg0 = temp7;\n        arg1 = 0x135d;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x10] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = arg0;\n        arg1 = 0x1399;\n        var0 = 0x0f;\n        var2 = memory[temp9:temp9 + 0x20];\n        var1 = temp9 + 0x20;\n        arg1 = func_2B36(var0, var1, var2);\n        storage[0x10] = (storage[0x10] & ~0xff) | 0x00;\n    }\n    \n    function transferFrom(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp1:temp1 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        func_13B8(arg0, arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function tokenOfOwnerByIndex(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x13e8;\n        var var2 = arg0;\n        var1 = func_15C9(var2);\n    \n        if (arg1 >= var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var1 = keccak256(memory[0x00:0x40]);\n        var2 = arg1;\n    \n        if (var2 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var1;\n        return storage[keccak256(memory[0x00:0x20]) + var2];\n    }\n    \n    function safeTransferFrom(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp1:temp1 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var1 = 0x150e;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = var0;\n        var temp2 = memory[0x40:0x60];\n        var var5 = temp2;\n        memory[0x40:0x60] = var5 + 0x20;\n        memory[var5:var5 + 0x20] = 0x00;\n        func_19A1(var2, var3, var4, var5);\n    }\n    \n    function tokenByIndex(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x00;\n        var var0 = 0x151d;\n        var0 = totalSupply();\n    \n        if (arg0 >= var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x07;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1];\n    }\n    \n    function ownerOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_154B(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r0 = func_15C9(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setApprovalForAll(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = !!msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0;\n        memory[0x00:0x20] = temp3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = !!temp1 | (storage[temp4] & ~0xff);\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = !!temp1;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function safeTransferFrom(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        var temp2 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp3 = temp2 + 0x20;\n        arg1 = msg.data[temp2:temp2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp4 = temp3 + 0x20;\n        var var0 = msg.data[temp3:temp3 + 0x20];\n        var var1 = temp1;\n        var var2 = temp0;\n        var var3 = temp4 + 0x20;\n        var var4 = msg.data[temp4:temp4 + 0x20];\n    \n        if (var4 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2 + var4;\n        var4 = temp5;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var4;\n        var temp7 = msg.data[temp6:temp6 + 0x20];\n        var4 = temp7;\n        var var5 = var3;\n        var3 = temp6 + 0x20;\n    \n        if ((var4 > 0x0100000000) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = var4;\n        var temp9 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp9 + (temp8 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp9:temp9 + 0x20] = temp8;\n        var temp10 = temp9 + 0x20;\n        memory[temp10:temp10 + temp8] = msg.data[var3:var3 + temp8];\n        memory[temp10 + temp8:temp10 + temp8 + 0x20] = 0x00;\n        var1 = temp9;\n        func_19A1(arg0, arg1, var0, var1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function createToken(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x60;\n        var var0 = msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x1003d51fef31e52262b1e699f03c789ca6dbefdc;\n    \n        if (var0) {\n        label_1A23:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x1a37;\n            var var1 = arg0;\n            func_0FE6(var1);\n            return arg1;\n        } else {\n            var0 = 0x1a22;\n            var0 = isOwner();\n            goto label_1A23;\n        }\n    }\n    \n    function tokenURI(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x60;\n        var var0 = 0x1a47;\n        var var1 = arg0;\n        var0 = func_1E53(var1);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x1afe;\n        var temp0 = storage[0x11];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var1 = temp2;\n        var var2 = 0x11;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (var6) { return func_1AA5(arg0, var1, var2, var3, var4, var5, var6); }\n    \n        var2 = 0x1af9;\n        var3 = arg0;\n        var2 = func_21AF(var3);\n        var3 = 0x60;\n        var temp4 = var1;\n        var4 = temp4;\n        var5 = var2;\n        var6 = memory[0x40:0x60] + 0x20;\n        var var7 = var6;\n        var var8 = var4 + 0x20;\n        var var9 = memory[var4:var4 + 0x20];\n        var var10 = var9;\n        var var11 = var7;\n        var var12 = var8;\n    \n        if (var10 < 0x20) {\n        label_22B4:\n            var temp5 = 0x0100 ** (0x20 - var10) - 0x01;\n            var temp6 = var11;\n            memory[temp6:temp6 + 0x20] = (memory[var12:var12 + 0x20] & ~temp5) | (memory[temp6:temp6 + 0x20] & temp5);\n            var temp7 = var9 + var7;\n            var7 = temp7;\n            var temp8 = var5;\n            var8 = temp8 + 0x20;\n            var9 = memory[temp8:temp8 + 0x20];\n            var10 = var9;\n            var11 = var7;\n            var12 = var8;\n        \n            if (var10 < 0x20) {\n            label_2307:\n                var temp9 = 0x0100 ** (0x20 - var10) - 0x01;\n                var temp10 = var11;\n                memory[temp10:temp10 + 0x20] = (memory[var12:var12 + 0x20] & ~temp9) | (memory[temp10:temp10 + 0x20] & temp9);\n                var temp11 = var9 + var7;\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = temp11 - temp12 - 0x20;\n                memory[0x40:0x60] = temp11;\n                var0 = temp12;\n                // Error: Could not resolve jump destination!\n            } else {\n            label_22ED:\n                var temp13 = var12;\n                var temp14 = var11;\n                memory[temp14:temp14 + 0x20] = memory[temp13:temp13 + 0x20];\n                var11 = temp14 + 0x20;\n                var12 = temp13 + 0x20;\n                var10 = var10 - 0x20;\n            \n                if (var10 < 0x20) { goto label_2307; }\n                else { goto label_22ED; }\n            }\n        } else {\n        label_229A:\n            var temp15 = var12;\n            var temp16 = var11;\n            memory[temp16:temp16 + 0x20] = memory[temp15:temp15 + 0x20];\n            var11 = temp16 + 0x20;\n            var12 = temp15 + 0x20;\n            var10 = var10 - 0x20;\n        \n            if (var10 < 0x20) { goto label_22B4; }\n            else { goto label_229A; }\n        }\n    }\n    \n    function changeBaseTokenURI(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var1;\n        var temp7 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + temp6] = msg.data[var0:var0 + temp6];\n        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00;\n        arg0 = temp7;\n        arg1 = 0x1bab;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = arg0;\n        arg1 = 0x1bcc;\n        var0 = 0x11;\n        var2 = memory[temp9:temp9 + 0x20];\n        var1 = temp9 + 0x20;\n        arg1 = func_2B36(var0, var1, var2);\n    }\n    \n    function isApprovedForAll(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r0 = func_1BD0(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function transferOwnership(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x1c6c;\n        arg1 = isOwner();\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x1c80;\n        var var0 = arg0;\n        func_2344(var0);\n    }\n    \n    function func_0FE6(var arg0) {\n        if (storage[0x0d] > 0x0168) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x00;\n        var var1 = 0x1003;\n        var1 = func_1C83();\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x100f;\n        var var2 = arg0;\n        var var3 = var0;\n        func_1C99(var2, var3);\n        var1 = 0x1021;\n        var2 = var0;\n        var3 = 0x101c;\n        var var4 = var2;\n        var3 = func_1CBA(var4);\n        func_101C(var2, var3);\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = var0;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0xb9144c96c86541f6fa89c9f2f02495cccf4b08cd6643e26d34ee00aa586558a8]);\n        var1 = 0x4b;\n        var2 = storage[0x0e];\n    \n        if (!var1) { assert(); }\n    \n        storage[0x0e] = storage[0x0e] + var2 / var1;\n    }\n    \n    function func_101C(var arg0, var arg1) {\n        var var0 = 0x1e1c;\n        var var1 = arg0;\n        var0 = func_1E53(var1);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0b;\n        var0 = 0x1e4e;\n        var1 = keccak256(memory[0x00:0x40]);\n        var var3 = memory[temp0:temp0 + 0x20];\n        var var2 = temp0 + 0x20;\n        var0 = func_2B36(var1, var2, var3);\n    }\n    \n    function name() returns (var r0) {\n        var var0 = 0x60;\n        var temp0 = storage[0x09];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x09;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_11A8:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_119F; }\n        \n        label_118B:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_118B; }\n        \n        label_119F:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_11A8;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp11 + 0x20;\n            var6 = var6;\n            goto label_11A8;\n        }\n    }\n    \n    function func_11B2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x11bd;\n        var var2 = arg0;\n        var1 = func_1E53(var2);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x07]; }\n    \n    function func_13B8(var arg0, var arg1, var arg2) {\n        var var0 = 0x13c2;\n        var var1 = msg.sender;\n        var var2 = arg2;\n        var0 = func_1EC5(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x13d8;\n        var1 = arg0;\n        var2 = arg1;\n        var var3 = arg2;\n        func_1F5A(var1, var2, var3);\n    }\n    \n    function info() returns (var r0) {\n        var temp0 = storage[0x0f];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x0f;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_14EA:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_14E1; }\n        \n        label_14CD:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_14CD; }\n        \n        label_14E1:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_14EA;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_14EA;\n        }\n    }\n    \n    function func_154B(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_15C9(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x164d;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var var2 = keccak256(memory[0x00:0x40]);\n        return func_1F7E(var2);\n    }\n    \n    function renounceOwnership() {\n        var var0 = 0x165c;\n        var0 = isOwner();\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x0c] & 0xffffffffffffffffffffffffffffffffffffffff, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n        storage[0x0c] = (storage[0x0c] & ~0xffffffffffffffffffffffffffffffffffffffff) | 0x00;\n    }\n    \n    function owner() returns (var r0) { return storage[0x0c] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function isOwner() returns (var r0) { return msg.sender == storage[0x0c] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x60;\n        var temp0 = storage[0x0a];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x0a;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_1842:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_1839; }\n        \n        label_1825:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_1825; }\n        \n        label_1839:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_1842;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp11 + 0x20;\n            var6 = var6;\n            goto label_1842;\n        }\n    }\n    \n    function price() returns (var r0) { return storage[0x0e]; }\n    \n    function infohasnotbeenset() returns (var r0) { return storage[0x10] & 0xff; }\n    \n    function func_19A1(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = 0x19ac;\n        var var1 = arg0;\n        var var2 = arg1;\n        var var3 = arg2;\n        func_13B8(var1, var2, var3);\n        var0 = 0x19b8;\n        var1 = arg0;\n        var2 = arg1;\n        var3 = arg2;\n        var var4 = arg3;\n        var0 = func_1F8C(var1, var2, var3, var4);\n    \n        if (var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_19C9() returns (var r0) { return storage[0x0d]; }\n    \n    function func_1AA5(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) returns (var r0) {\n        if (0x1f < arg6) {\n            var temp0 = arg4;\n            var temp1 = temp0 + arg6;\n            arg4 = temp1;\n            memory[0x00:0x20] = arg5;\n            var temp2 = keccak256(memory[0x00:0x20]);\n            memory[temp0:temp0 + 0x20] = storage[temp2];\n            arg5 = temp2 + 0x01;\n            arg6 = temp0 + 0x20;\n        \n            if (arg4 <= arg6) { goto label_1AE2; }\n        \n        label_1ACE:\n            var temp3 = arg5;\n            var temp4 = arg6;\n            memory[temp4:temp4 + 0x20] = storage[temp3];\n            arg5 = temp3 + 0x01;\n            arg6 = temp4 + 0x20;\n        \n            if (arg4 > arg6) { goto label_1ACE; }\n        \n        label_1AE2:\n            var temp5 = arg4;\n            var temp6 = temp5 + (arg6 - temp5 & 0x1f);\n            arg6 = temp5;\n            arg4 = temp6;\n        \n        label_1AEB:\n            arg2 = 0x1af9;\n            arg3 = arg0;\n            arg2 = func_21AF(arg3);\n            arg3 = 0x60;\n            var temp7 = arg1;\n            arg4 = temp7;\n            arg5 = arg2;\n            arg6 = memory[0x40:0x60] + 0x20;\n            var var0 = arg6;\n            var var1 = arg4 + 0x20;\n            var var2 = memory[arg4:arg4 + 0x20];\n            var var3 = var2;\n            var var4 = var0;\n            var var5 = var1;\n        \n            if (var3 < 0x20) {\n            label_22B4:\n                var temp8 = 0x0100 ** (0x20 - var3) - 0x01;\n                var temp9 = var4;\n                memory[temp9:temp9 + 0x20] = (memory[var5:var5 + 0x20] & ~temp8) | (memory[temp9:temp9 + 0x20] & temp8);\n                var temp10 = var2 + var0;\n                var0 = temp10;\n                var temp11 = arg5;\n                var1 = temp11 + 0x20;\n                var2 = memory[temp11:temp11 + 0x20];\n                var3 = var2;\n                var4 = var0;\n                var5 = var1;\n            \n                if (var3 < 0x20) {\n                label_2307:\n                    var temp12 = 0x0100 ** (0x20 - var3) - 0x01;\n                    var temp13 = var4;\n                    memory[temp13:temp13 + 0x20] = (memory[var5:var5 + 0x20] & ~temp12) | (memory[temp13:temp13 + 0x20] & temp12);\n                    var temp14 = var2 + var0;\n                    var temp15 = memory[0x40:0x60];\n                    memory[temp15:temp15 + 0x20] = temp14 - temp15 - 0x20;\n                    memory[0x40:0x60] = temp14;\n                    return temp15;\n                } else {\n                label_22ED:\n                    var temp16 = var5;\n                    var temp17 = var4;\n                    memory[temp17:temp17 + 0x20] = memory[temp16:temp16 + 0x20];\n                    var4 = temp17 + 0x20;\n                    var5 = temp16 + 0x20;\n                    var3 = var3 - 0x20;\n                \n                    if (var3 < 0x20) { goto label_2307; }\n                    else { goto label_22ED; }\n                }\n            } else {\n            label_229A:\n                var temp18 = var5;\n                var temp19 = var4;\n                memory[temp19:temp19 + 0x20] = memory[temp18:temp18 + 0x20];\n                var4 = temp19 + 0x20;\n                var5 = temp18 + 0x20;\n                var3 = var3 - 0x20;\n            \n                if (var3 < 0x20) { goto label_22B4; }\n                else { goto label_229A; }\n            }\n        } else {\n            var temp20 = arg4;\n            memory[temp20:temp20 + 0x20] = storage[arg5] / 0x0100 * 0x0100;\n            arg4 = temp20 + 0x20;\n            arg6 = arg6;\n            goto label_1AEB;\n        }\n    }\n    \n    function baseTokenURI() returns (var r0) {\n        var temp0 = storage[0x11];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x11;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1B9B:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_1B92; }\n        \n        label_1B7E:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1B7E; }\n        \n        label_1B92:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1B9B;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1B9B;\n        }\n    }\n    \n    function func_1BD0(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_1C83() returns (var r0) {\n        storage[0x0d] = storage[0x0d] + 0x01;\n        return storage[0x0d];\n    }\n    \n    function func_1C99(var arg0, var arg1) {\n        var var0 = 0x1ca3;\n        var var1 = arg0;\n        var var2 = arg1;\n        func_2440(var1, var2);\n        var0 = 0x1cad;\n        var1 = arg0;\n        var2 = arg1;\n        func_258A(var1, var2);\n        var0 = 0x1cb6;\n        var1 = arg1;\n        func_2651(var1);\n    }\n    \n    function func_1CBA(var arg0) returns (var r0) {\n        var var0 = 0x60;\n    \n        if (arg0 != 0x00) {\n            var var1 = arg0;\n            var var2 = 0x00;\n        \n            if (var1 == 0x00) {\n            label_1D30:\n                var var3 = 0x60;\n                var temp0 = var2;\n                var temp1 = memory[0x40:0x60];\n                var var4 = temp1;\n                var var5 = temp0;\n                memory[var4:var4 + 0x20] = var5;\n                memory[0x40:0x60] = var4 + (var5 + 0x1f & ~0x1f) + 0x20;\n            \n                if (!var5) {\n                    var3 = var4;\n                    var4 = var2 - 0x01;\n                \n                    if (arg0 == 0x00) {\n                    label_1E06:\n                        return var3;\n                    } else {\n                    label_1D7C:\n                        var5 = 0x0a;\n                        var var6 = arg0;\n                    \n                        if (!var5) { assert(); }\n                    \n                        var5 = (var6 % var5 + 0x30) * 0x0100000000000000000000000000000000000000000000000000000000000000;\n                        var6 = var3;\n                        var temp2 = var4;\n                        var var7 = temp2;\n                        var4 = var7 - 0x01;\n                    \n                        if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                    \n                        memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x01] = byte(var5 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x00);\n                        var5 = 0x0a;\n                        var6 = arg0;\n                    \n                        if (!var5) { assert(); }\n                    \n                        arg0 = var6 / var5;\n                    \n                        if (arg0 == 0x00) { goto label_1E06; }\n                        else { goto label_1D7C; }\n                    }\n                } else {\n                    var temp3 = var5;\n                    memory[var4 + 0x20:var4 + 0x20 + temp3] = code[code.length:code.length + temp3];\n                    var3 = var4;\n                    var4 = var2 - 0x01;\n                \n                    if (arg0 == 0x00) { goto label_1E06; }\n                    else { goto label_1D7C; }\n                }\n            } else {\n            label_1D15:\n                var2 = var2 + 0x01;\n                var3 = 0x0a;\n                var4 = var1;\n            \n                if (!var3) { assert(); }\n            \n                var1 = var4 / var3;\n            \n                if (var1 == 0x00) { goto label_1D30; }\n                else { goto label_1D15; }\n            }\n        } else {\n            var temp4 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp4 + 0x40;\n            memory[temp4:temp4 + 0x20] = 0x01;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = 0x3000000000000000000000000000000000000000000000000000000000000000;\n            return temp4;\n        }\n    }\n    \n    function func_1E53(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n    }\n    \n    function func_1EC5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x1ed1;\n        var var3 = arg1;\n        var2 = func_154B(var3);\n        var1 = var2;\n        var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var2) {\n        label_1F40:\n        \n            if (var2) {\n            label_1F51:\n                return var2;\n            } else {\n                var2 = 0x1f50;\n                var3 = var1;\n                var var4 = arg0;\n                var2 = func_1BD0(var3, var4);\n                goto label_1F51;\n            }\n        } else {\n            var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0x1f28;\n            var4 = arg1;\n            var3 = func_11B2(var4);\n            var2 = var3 & 0xffffffffffffffffffffffffffffffffffffffff == var2;\n            goto label_1F40;\n        }\n    }\n    \n    function func_1F5A(var arg0, var arg1, var arg2) {\n        var var0 = 0x1f65;\n        var var1 = arg0;\n        var var2 = arg1;\n        var var3 = arg2;\n        func_269D(var1, var2, var3);\n        var0 = 0x1f6f;\n        var1 = arg0;\n        var2 = arg2;\n        func_2864(var1, var2);\n        var0 = 0x1f79;\n        var1 = arg1;\n        var2 = arg2;\n        func_258A(var1, var2);\n    }\n    \n    function func_1F7E(var arg0) returns (var r0) { return storage[arg0]; }\n    \n    function func_1F8C(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1fad;\n        var var2 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var1 = func_2A08(var2);\n    \n        if (var1) {\n            var1 = 0x00;\n            var2 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = 0x150b7a02;\n            var var4 = msg.sender;\n            var var5 = arg0;\n            var var6 = arg2;\n            var temp0 = arg3;\n            var var7 = temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp2 = temp1 + 0x04;\n            var var8 = temp2;\n            memory[var8:var8 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp3 = var8 + 0x20;\n            memory[temp3:temp3 + 0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = var6;\n            var temp5 = temp4 + 0x20;\n            var var9 = temp5;\n            var temp6 = var9 + 0x20;\n            memory[var9:var9 + 0x20] = temp6 - var8;\n            memory[temp6:temp6 + 0x20] = memory[var7:var7 + 0x20];\n            var var10 = temp6 + 0x20;\n            var var11 = var7 + 0x20;\n            var var12 = memory[var7:var7 + 0x20];\n            var var13 = var12;\n            var var14 = var10;\n            var var15 = var11;\n            var var16 = 0x00;\n        \n            if (var16 >= var13) {\n            label_20B3:\n                var temp7 = var12;\n                var10 = temp7 + var10;\n                var11 = temp7 & 0x1f;\n            \n                if (!var11) {\n                    var4 = var10;\n                    var5 = 0x20;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = 0x00;\n                    var10 = var2;\n                    var11 = !address(var10).code.length;\n                \n                    if (var11) { revert(memory[0x00:0x00]); }\n                \n                label_2102:\n                    var temp8;\n                    temp8, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n                    var5 = !temp8;\n                \n                    if (!var5) {\n                        var2 = memory[0x40:0x60];\n                        var3 = returndata.length;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = memory[var2:var2 + 0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff == ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & 0x0100000000000000000000000000000000000000000000000000000000 * 0x150b7a02;\n                    \n                    label_21A7:\n                        return var0;\n                    } else {\n                        var temp9 = returndata.length;\n                        memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp10 = var11;\n                    var temp11 = var10 - temp10;\n                    memory[temp11:temp11 + 0x20] = ~(0x0100 ** (0x20 - temp10) - 0x01) & memory[temp11:temp11 + 0x20];\n                    var4 = temp11 + 0x20;\n                    var5 = 0x20;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = 0x00;\n                    var10 = var2;\n                    var11 = !address(var10).code.length;\n                \n                    if (!var11) { goto label_2102; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_20A1:\n                var temp12 = var16;\n                memory[var14 + temp12:var14 + temp12 + 0x20] = memory[var15 + temp12:var15 + temp12 + 0x20];\n                var16 = temp12 + 0x20;\n            \n                if (var16 >= var13) { goto label_20B3; }\n                else { goto label_20A1; }\n            }\n        } else {\n            var0 = 0x01;\n            goto label_21A7;\n        }\n    }\n    \n    function func_21AF(var arg0) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x21ba;\n        var var2 = arg0;\n        var1 = func_1E53(var2);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0b;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var1 = temp3;\n        var2 = temp0;\n        var var3 = temp2;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp4 = storage[var5];\n        var var6 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var6) {\n        label_226C:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp5 = var4;\n            var temp6 = temp5 + var6;\n            var4 = temp6;\n            memory[0x00:0x20] = var5;\n            var temp7 = keccak256(memory[0x00:0x20]);\n            memory[temp5:temp5 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp5 + 0x20;\n        \n            if (var4 <= var6) { goto label_2263; }\n        \n        label_224F:\n            var temp8 = var5;\n            var temp9 = var6;\n            memory[temp9:temp9 + 0x20] = storage[temp8];\n            var5 = temp8 + 0x01;\n            var6 = temp9 + 0x20;\n        \n            if (var4 > var6) { goto label_224F; }\n        \n        label_2263:\n            var temp10 = var4;\n            var temp11 = temp10 + (var6 - temp10 & 0x1f);\n            var6 = temp10;\n            var4 = temp11;\n            goto label_226C;\n        } else {\n            var temp12 = var4;\n            memory[temp12:temp12 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp12 + 0x20;\n            var6 = var6;\n            goto label_226C;\n        }\n    }\n    \n    function func_2344(var arg0) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x0c] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x0c] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x0c] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_2440(var arg0, var arg1) {\n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x2485;\n        var var1 = arg1;\n        var0 = func_1E53(var1);\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var0 = 0x252a;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var1 = keccak256(memory[0x00:0x40]);\n        func_2A1B(var1);\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + memory[0x40:0x60] - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0xffffffffffffffffffffffffffffffffffffffff & 0x00, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1]]);\n    }\n    \n    function func_258A(var arg0, var arg1) {\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        var temp2 = arg1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = temp1;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3] + 0x01;\n        storage[temp3] = temp4;\n        memory[0x00:0x20] = temp3;\n        storage[keccak256(memory[0x00:0x20]) + (temp4 - 0x01)] = temp2;\n    }\n    \n    function func_2651(var arg0) {\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = storage[0x07];\n        var temp1 = storage[0x07] + 0x01;\n        storage[0x07] = temp1;\n        memory[0x00:0x20] = 0x07;\n        storage[keccak256(memory[0x00:0x20]) + (temp1 - 0x01)] = temp0;\n    }\n    \n    function func_269D(var arg0, var arg1, var arg2) {\n        var var0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var1 = 0x26bd;\n        var var2 = arg2;\n        var1 = func_154B(var2);\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff != var0) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x2724;\n        var1 = arg2;\n        func_2A31(var1);\n        var0 = 0x276b;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var1 = keccak256(memory[0x00:0x40]);\n        func_2AF1(var1);\n        var0 = 0x27b2;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var1 = keccak256(memory[0x00:0x40]);\n        func_2A1B(var1);\n        var temp0 = arg1;\n        var temp1 = arg2;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + memory[0x40:0x60] - temp3], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1]]);\n    }\n    \n    function func_2864(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0x28bc;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = 0x01;\n        var1 = func_2B14(var2, var3);\n        var temp0 = var1;\n        var0 = temp0;\n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x06;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 == var0) {\n        label_29AF:\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var3 = 0x2a01;\n            var var5 = var2 - 0x01;\n            var var4 = keccak256(memory[0x00:0x40]);\n            func_2BB6(var4, var5);\n            return;\n        } else {\n            var2 = 0x00;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var3 = keccak256(memory[0x00:0x40]);\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n            var2 = storage[keccak256(memory[0x00:0x20]) + var4];\n            var3 = var2;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var4 = keccak256(memory[0x00:0x40]);\n            var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            storage[keccak256(memory[0x00:0x20]) + var5] = var3;\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x06;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            goto label_29AF;\n        }\n    }\n    \n    function func_2A08(var arg0) returns (var r0) { return address(arg0).code.length > 0x00; }\n    \n    function func_2A1B(var arg0) {\n        var temp0 = arg0;\n        storage[temp0] = storage[temp0] + 0x01;\n    }\n    \n    function func_2A31(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { return; }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff) | 0x00;\n    }\n    \n    function func_2AF1(var arg0) {\n        var var0 = 0x2b09;\n        var var1 = storage[arg0];\n        var var2 = 0x01;\n        var0 = func_2B14(var1, var2);\n        storage[arg0] = var0;\n    }\n    \n    function func_2B14(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2B36(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_2BA5:\n                var temp4 = arg1;\n                arg1 = 0x2bb2;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_2BE2(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_2BA4:\n                    goto label_2BA5;\n                } else {\n                label_2B92:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_2BA4; }\n                    else { goto label_2B92; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_2BA5;\n        }\n    }\n    \n    function func_2BB6(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_2BDD:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x2bdc;\n            var var1 = temp4;\n            var var2 = temp3 + arg1;\n            var0 = func_2BE2(var1, var2);\n            goto label_2BDD;\n        }\n    }\n    \n    function func_2BE2(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x2c04;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_2C00(arg1, var0); }\n    \n    label_2BF1:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_2BF1; }\n    \n        arg0 = func_2C00(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2C00(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 73.5550582408905,
	"usage": {
		"completion_tokens": 555,
		"prompt_tokens": 25050,
		"total_tokens": 25605
	}
}