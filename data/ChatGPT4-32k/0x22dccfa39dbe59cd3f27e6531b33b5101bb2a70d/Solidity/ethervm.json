{
	"address": "0x22dccfa39dbe59cd3f27e6531b33b5101bb2a70d",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity contract for the given decompiled code could look something like this:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Contract {\n    uint256 public totalCards;\n    uint256 public precisionFactor;\n    uint256 public totalCardValue;\n    uint256 public totalEthereumBalance;\n    uint256 public distDivRate;\n    uint256 public ownerDivRate;\n    uint256 public referralRate;\n    \n    address public owner;\n    bool public allowReferral;\n    \n    struct Card {\n        uint256 price;\n        address owner;\n        uint256 cardDivs;\n    }\n    \n    Card[] public cards;\n    \n    mapping(address => uint256) public balances;\n    \n    function buyCard(uint256 _cardId, address _referrer) public payable {\n        require(_cardId < totalCards, \"Card does not exist\");\n        require(msg.value == cards[_cardId].price, \"Incorrect value sent\");\n\n        Card storage card = cards[_cardId];\n\n        require(msg.sender != card.owner, \"Cannot buy own card\");\n\n        // Update balances\n        balances[card.owner] += card.price;\n\n        // Update card divs\n        card.cardDivs += (card.price * distDivRate) / 100;\n        \n        if (allowReferral && _referrer != address(0)) {\n            balances[_referrer] += (card.price * referralRate) / 100;\n        }\n\n        // Update card ownership and price\n        card.owner = msg.sender;\n        card.price = (card.price * ownerDivRate) / 100;\n\n        // Update contract's total Ethereum balance\n        totalEthereumBalance += msg.value;\n    }\n    \n    function withdraw() public {\n        uint256 balance = balances[msg.sender];\n        require(balance > 0, \"No funds available for withdrawal\");\n\n        balances[msg.sender] = 0;\n        payable(msg.sender).transfer(balance);\n    }\n    \n    function addCard(uint256 _price) public {\n        require(msg.sender == owner, \"Only owner can add cards\");\n        \n        cards.push(Card({\n            price: _price,\n            owner: owner,\n            cardDivs: 0\n        }));\n        \n        totalCards++;\n    }\n    \n    function setAllowReferral(bool _allowReferral) public {\n        require(msg.sender == owner, \"Only owner can set referral allowance\");\n        \n        allowReferral = _allowReferral;\n    }\n    \n    // Other functions...\n}\n```\n\nNote: This code is a simplified version of the decompiled code with some assumptions made about the original code. It doesn't fully correspond to the decompiled code but it should give you an idea of how the original contract might have looked.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473891,
	"id": "chatcmpl-8MvEBD0HjNd9K6F6wIpBnOmN91oLi",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x04dd2dea) {\n            // Dispatch table entry for getCardDivShare(uint256)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var var2 = msg.data[0x04:0x24];\n            var1 = getCardDivShare(var2);\n        \n        label_0191:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01b8;\n            var2 = name();\n        \n        label_01B8:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x20;\n            var temp3 = var2;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n            var var3 = temp2;\n            var var4 = var3;\n            var var5 = var4 + 0x40;\n            var var7 = memory[temp3:temp3 + 0x20];\n            var var6 = temp3 + 0x20;\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n            var var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_01F2:\n                var temp4 = var7;\n                var5 = temp4 + var5;\n                var6 = temp4 & 0x1f;\n            \n                if (!var6) {\n                    var temp5 = memory[0x40:0x60];\n                    return memory[temp5:temp5 + var5 - temp5];\n                } else {\n                    var temp6 = var6;\n                    var temp7 = var5 - temp6;\n                    memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                    var temp8 = memory[0x40:0x60];\n                    return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                }\n            } else {\n            label_01E3:\n                var temp9 = var11;\n                memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                var11 = temp9 + 0x20;\n            \n                if (var11 >= var8) { goto label_01F2; }\n                else { goto label_01E3; }\n            }\n        } else if (var0 == 0x1ae4dfb7) {\n            // Dispatch table entry for getcardPrice(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = msg.data[0x04:0x24];\n            var1 = getcardPrice(var2);\n            goto label_0191;\n        } else if (var0 == 0x1b7e0902) {\n            // Dispatch table entry for getcardOwner(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x025d;\n            var2 = msg.data[0x04:0x24];\n            var1 = getcardOwner(var2);\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n        } else if (var0 == 0x287ad8fa) {\n            // Dispatch table entry for cardPrice(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = msg.data[0x04:0x24];\n            var2 = cardPrice(var2);\n            goto label_0191;\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = decimals();\n        \n        label_02A6:\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var2 & 0xff;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x3ccfd60b) {\n            // Dispatch table entry for withdraw()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d1;\n            withdraw();\n            stop();\n        } else if (var0 == 0x4b419b5f) {\n            // Dispatch table entry for setcardPrice(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d1;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            setcardPrice(var2, var3);\n            stop();\n        } else if (var0 == 0x4c738909) {\n            // Dispatch table entry for getMyBalance()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var1 = getMyBalance();\n            goto label_0191;\n        } else if (var0 == 0x4e3c2f47) {\n            // Dispatch table entry for getCardDivs(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = 0x00;\n            var5 = var4;\n            var6 = 0x07cb;\n            var7 = var2;\n            var6 = getCardDivShare(var7);\n            var temp14 = var6;\n            var5 = temp14;\n            var6 = 0x07e5;\n            var7 = 0x07da;\n            var8 = var5;\n            var9 = var3;\n            var7 = func_0CF8(var8, var9);\n            var6 = func_07DA(var7);\n            var4 = var6;\n            var1 = var4;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x53ba3d43) {\n            // Dispatch table entry for cardsDivRate()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = cardsDivRate();\n            goto label_02A6;\n        } else if (var0 == 0x5bdff855) {\n            // Dispatch table entry for gettotalCardDivs(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = msg.data[0x04:0x24];\n            var1 = gettotalCardDivs(var2);\n            goto label_0191;\n        } else if (var0 == 0x6b2f4632) {\n            // Dispatch table entry for totalEthereumBalance()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var1 = totalEthereumBalance();\n            goto label_0191;\n        } else if (var0 == 0x763f337e) {\n            // Dispatch table entry for setAllowReferral(bool)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d1;\n            var2 = !!msg.data[0x04:0x24];\n            setAllowReferral(var2);\n            stop();\n        } else if (var0 == 0x7deb6025) {\n            // Dispatch table entry for buy(uint256,address)\n            var1 = 0x02d1;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n            buy(var2, var3);\n            stop();\n        } else if (var0 == 0x7fcf440a) {\n            // Dispatch table entry for getOwnerBalance(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = getOwnerBalance(var2);\n            goto label_0191;\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01b8;\n            var2 = symbol();\n            goto label_01B8;\n        } else if (var0 == 0x9ba65fff) {\n            // Dispatch table entry for addNewcard(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d1;\n            var2 = msg.data[0x04:0x24];\n            addNewcard(var2);\n            stop();\n        } else if (var0 == 0x9d902fc0) {\n            // Dispatch table entry for precisionFactor()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = precisionFactor();\n            goto label_0191;\n        } else if (var0 == 0xa053ce1f) {\n            // Dispatch table entry for referralRate()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = referralRate();\n            goto label_02A6;\n        } else if (var0 == 0xae882412) {\n            // Dispatch table entry for getTotalDivsProduced()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var1 = getTotalDivsProduced();\n            goto label_0191;\n        } else if (var0 == 0xaf392206) {\n            // Dispatch table entry for totalCardValue()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = totalCardValue();\n            goto label_0191;\n        } else if (var0 == 0xb84c8246) {\n            // Dispatch table entry for setSymbol(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp15 = memory[0x40:0x60];\n            var temp16 = msg.data[0x04:0x24];\n            var temp17 = msg.data[temp16 + 0x04:temp16 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp15 + (temp17 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp15:temp15 + 0x20] = temp17;\n            var1 = 0x02d1;\n            memory[temp15 + 0x20:temp15 + 0x20 + temp17] = msg.data[temp16 + 0x24:temp16 + 0x24 + temp17];\n            var2 = temp15;\n        \n            if (msg.sender != storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n        \n            var temp18 = var2;\n            var3 = 0x0ca9;\n            var4 = 0x01;\n            var5 = temp18 + 0x20;\n            var6 = memory[temp18:temp18 + 0x20];\n        \n        label_0E3D:\n            var temp19 = var4;\n            var temp20 = storage[temp19];\n            memory[0x00:0x20] = temp19;\n            var7 = keccak256(memory[0x00:0x20]);\n            var temp21 = var5;\n            var5 = var7 + ((!(temp20 & 0x01) * 0x0100 - 0x01 & temp20) / 0x02 + 0x1f) / 0x20;\n            var8 = temp21;\n        \n            if (0x1f < var6) {\n                var temp22 = var6;\n                storage[var4] = temp22 + temp22 + 0x01;\n            \n                if (!temp22) {\n                label_0EAB:\n                    var temp23 = var5;\n                    var5 = 0x0eb7;\n                    var6 = temp23;\n                    var5 = func_0EBB(var6, var7);\n                    var3 = func_0EB7(var4, var5);\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp24 = var6;\n                    var temp25 = var8;\n                    var6 = temp25;\n                    var8 = var6 + temp24;\n                \n                    if (var8 <= var6) { goto label_0EAB; }\n                \n                label_0E99:\n                    var temp26 = var6;\n                    var temp27 = var7;\n                    storage[temp27] = memory[temp26:temp26 + 0x20];\n                    var6 = temp26 + 0x20;\n                    var7 = temp27 + 0x01;\n                    var8 = var8;\n                \n                    if (var8 <= var6) { goto label_0EAB; }\n                    else { goto label_0E99; }\n                }\n            } else {\n                var temp28 = var6;\n                storage[var4] = temp28 + temp28 | (memory[var8:var8 + 0x20] & ~0xff);\n                goto label_0EAB;\n            }\n        } else if (var0 == 0xb987f688) {\n            // Dispatch table entry for gettotalCards()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var1 = gettotalCards();\n            goto label_0191;\n        } else if (var0 == 0xbaf3a4d4) {\n            // Dispatch table entry for distDivRate()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = distDivRate();\n            goto label_02A6;\n        } else if (var0 == 0xc47f0027) {\n            // Dispatch table entry for setName(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp29 = memory[0x40:0x60];\n            var temp30 = msg.data[0x04:0x24];\n            var temp31 = msg.data[temp30 + 0x04:temp30 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp29 + (temp31 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp29:temp29 + 0x20] = temp31;\n            var1 = 0x02d1;\n            memory[temp29 + 0x20:temp29 + 0x20 + temp31] = msg.data[temp30 + 0x24:temp30 + 0x24 + temp31];\n            var2 = temp29;\n        \n            if (msg.sender != storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n        \n            var temp32 = var2;\n            var3 = 0x0ca9;\n            var4 = 0x00;\n            var6 = memory[temp32:temp32 + 0x20];\n            var5 = temp32 + 0x20;\n            goto label_0E3D;\n        } else if (var0 == 0xd5c96b36) {\n            // Dispatch table entry for gettotalCardValue()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var1 = gettotalCardValue();\n            goto label_0191;\n        } else if (var0 == 0xe994c15d) {\n            // Dispatch table entry for totalCards()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = totalCards();\n            goto label_0191;\n        } else if (var0 == 0xfd01d4a1) {\n            // Dispatch table entry for ownerDivRate()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = ownerDivRate();\n            goto label_02A6;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getCardDivShare(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x059c;\n        var var2 = 0x0592;\n        var var3 = 0x058a;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x06;\n        var var4 = storage[keccak256(memory[0x00:0x40])];\n        var var5 = 0x0a ** (storage[0x03] + 0x01);\n        var3 = func_0CF8(var4, var5);\n        var2 = func_058A(var3);\n        return func_0592(var2);\n    }\n    \n    function func_058A(var arg0) returns (var r0) {\n        var var0 = storage[0x02];\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_0592(var arg0) returns (var r0) {\n        arg0 = arg0 + 0x05;\n        var var0 = 0x0a;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x00;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0628:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_061F; }\n        \n        label_060B:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_060B; }\n        \n        label_061F:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0628;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0628;\n        }\n    }\n    \n    function getcardPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function getcardOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function cardPrice(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = msg.sender;\n        var var1 = 0x00;\n        memory[var1:var1 + 0x20] = var0;\n        memory[0x20:0x40] = 0x07;\n    \n        if (0x038d7ea4c68000 > storage[keccak256(memory[var1:var1 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1];\n        storage[temp1] = 0x00;\n        var temp3 = memory[0x40:0x60];\n        var1 = temp2;\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp0).call.gas(!var1 * 0x08fc).value(var1)(memory[temp3:temp3 + 0x00]);\n        var var2 = !temp4;\n    \n        if (!var2) {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var1;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x40], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc]);\n            return;\n        } else {\n            var temp7 = returndata.length;\n            memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function setcardPrice(var arg0, var arg1) {\n        if (msg.sender != storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] / 0x0100 & temp0 != temp0 & storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = arg1;\n    }\n    \n    function getMyBalance() returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_07DA(var arg0) returns (var r0) {\n        var var0 = 0x0a ** storage[0x03];\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function cardsDivRate() returns (var r0) { return 0x0a; }\n    \n    function gettotalCardDivs(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x08;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function setAllowReferral(var arg0) {\n        if (msg.sender != storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0c] = !!arg0 | (storage[0x0c] & ~0xff);\n    }\n    \n    function buy(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n    \n        if (arg0 >= storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n    \n        if (msg.value != storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x04;\n    \n        if (msg.sender == storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x06;\n        var var8 = 0x08c0;\n        var var9 = msg.value;\n        var var10 = storage[keccak256(memory[0x00:0x40])];\n        func_0D41(var9, var10);\n        var8 = 0x08d6;\n        var9 = 0x08cf;\n        var10 = msg.value;\n        var var11 = storage[0x09];\n        var9 = func_0CF8(var10, var11);\n        var8 = func_08CF(var9);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x06;\n        var0 = var8;\n        var8 = 0x08f3;\n        var9 = msg.value;\n        var10 = storage[keccak256(memory[0x00:0x40])];\n        var8 = func_0D71(var9, var10);\n        var temp0 = var8;\n        var1 = temp0;\n        var8 = 0x0901;\n        var9 = storage[0x0a];\n        var10 = var1;\n        var8 = func_0D83(var9, var10);\n        storage[0x0a] = var8;\n        var8 = 0x0915;\n        var9 = 0x08cf;\n        var11 = 0x0a;\n        var10 = var1;\n        var9 = func_0CF8(var10, var11);\n        var8 = func_08CF(var9);\n        var2 = var8;\n        var8 = 0x0925;\n        var9 = 0x08cf;\n        var10 = var1;\n        var11 = 0x32;\n        var9 = func_0CF8(var10, var11);\n        var8 = func_08CF(var9);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = var8;\n        var3 = temp1;\n        var9 = storage[keccak256(memory[0x00:0x40])];\n        var8 = 0x0941;\n        var10 = var3;\n        var8 = func_0D83(var9, var10);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = var8;\n        memory[0x20:0x40] = 0x06;\n        var8 = 0x0967;\n        var10 = storage[keccak256(memory[0x00:0x40])];\n        var9 = var3;\n        var8 = func_0D83(var9, var10);\n        var3 = var8;\n        var8 = 0x0977;\n        var9 = 0x08cf;\n        var10 = var1;\n        var11 = 0x28;\n        var9 = func_0CF8(var10, var11);\n        var8 = func_08CF(var9);\n        var4 = var8;\n        var8 = storage[0x0c] & 0xff;\n    \n        if (var8) {\n            var8 = msg.sender != arg1 & 0x02 ** 0xa0 - 0x01;\n        \n            if (!var8) { goto label_09A9; }\n            else { goto label_099C; }\n        } else if (!var8) {\n        label_09A9:\n        \n            if (!var8) {\n            label_0A08:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x04;\n                var temp2 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp2;\n                memory[0x20:0x40] = 0x07;\n                var6 = temp2;\n                var7 = msg.sender;\n                var9 = storage[keccak256(memory[0x00:0x40])];\n                var8 = 0x0a3d;\n                var10 = var3;\n                var8 = func_0D83(var9, var10);\n                var temp3 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = var6 & temp3;\n                memory[0x20:0x40] = 0x07;\n                storage[keccak256(memory[0x00:0x40])] = var8;\n                var temp4 = memory[0x40:0x60];\n                var temp5 = var2;\n                var temp6;\n                temp6, memory[temp4:temp4 + 0x00] = address(temp3 & storage[0x11]).call.gas(!temp5 * 0x08fc).value(temp5)(memory[temp4:temp4 + 0x00]);\n                var8 = !temp6;\n            \n                if (!var8) {\n                    var8 = 0x0a96;\n                    var9 = var4;\n                    func_0D92(var9);\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x06;\n                    storage[keccak256(memory[0x00:0x40])] = msg.value;\n                    memory[0x20:0x40] = 0x05;\n                    storage[keccak256(memory[0x00:0x40])] = var0;\n                    memory[0x20:0x40] = 0x04;\n                    var temp7 = keccak256(memory[0x00:0x40]);\n                    storage[temp7] = (var7 & 0x02 ** 0xa0 - 0x01) | (storage[temp7] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                    var10 = msg.value;\n                    var8 = 0xb6058ac11d669cce504a48b05012e6920f1058599371108c7eacf6dfa9b976bb;\n                    var9 = msg.sender;\n                    var11 = arg0;\n                    var var12 = 0x0b1c;\n                    var var13 = 0x08cf;\n                    var var15 = storage[0x09];\n                    var var14 = var10;\n                    var13 = func_0CF8(var14, var15);\n                    var12 = func_08CF(var13);\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = var9 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = var10;\n                    memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = var11;\n                    memory[temp8 + 0x60:temp8 + 0x60 + 0x20] = var12;\n                    var temp9 = memory[0x40:0x60];\n                    log(memory[temp9:temp9 + temp8 - temp9 + 0x80], [stack[-5]]);\n                    return;\n                } else {\n                    var temp10 = returndata.length;\n                    memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n            label_09AF:\n                var8 = 0x09bc;\n                var9 = 0x08cf;\n                var10 = var1;\n                var11 = 0x05;\n                var9 = func_0CF8(var10, var11);\n                var8 = func_08CF(var9);\n                var temp11 = var8;\n                var5 = temp11;\n                var8 = 0x09c8;\n                var9 = var4;\n                var10 = var5;\n                var8 = func_0D71(var9, var10);\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x07;\n                var4 = var8;\n                var9 = storage[keccak256(memory[0x00:0x40])];\n                var8 = 0x09ee;\n                var10 = var5;\n                var8 = func_0D83(var9, var10);\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x07;\n                storage[keccak256(memory[0x00:0x40])] = var8;\n                goto label_0A08;\n            }\n        } else {\n        label_099C:\n        \n            if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { goto label_0A08; }\n            else { goto label_09AF; }\n        }\n    }\n    \n    function func_08CF(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function getOwnerBalance(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0628:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_061F; }\n        \n        label_060B:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_060B; }\n        \n        label_061F:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0628;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0628;\n        }\n    }\n    \n    function addNewcard(var arg0) {\n        if (msg.sender != storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = ~0x00;\n        memory[0x00:0x20] = temp0 + storage[0x0b];\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = arg0;\n        memory[0x00:0x20] = temp0 + storage[0x0b];\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01);\n        memory[0x00:0x20] = temp0 + storage[0x0b];\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        storage[0x0b] = storage[0x0b] + 0x01;\n    }\n    \n    function precisionFactor() returns (var r0) { return storage[0x03]; }\n    \n    function referralRate() returns (var r0) { return 0x05; }\n    \n    function getTotalDivsProduced() returns (var r0) { return storage[0x0a]; }\n    \n    function totalCardValue() returns (var r0) { return storage[0x02]; }\n    \n    function gettotalCards() returns (var r0) { return storage[0x0b]; }\n    \n    function distDivRate() returns (var r0) { return 0x28; }\n    \n    function gettotalCardValue() returns (var r0) { return storage[0x02]; }\n    \n    function totalCards() returns (var r0) { return storage[0x0b]; }\n    \n    function ownerDivRate() returns (var r0) { return 0x32; }\n    \n    function func_0CF8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0D41(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0x0d52;\n        var var2 = 0x08cf;\n        var var3 = arg0;\n        var var4 = storage[0x09];\n        var2 = func_0CF8(var3, var4);\n        var1 = func_08CF(var2);\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x0d69;\n        var2 = storage[0x02];\n        var3 = 0x0d64;\n        var4 = var0;\n        var var5 = arg1;\n        var3 = func_0D71(var4, var5);\n        var1 = func_0D64(var2, var3);\n        storage[0x02] = var1;\n    }\n    \n    function func_0D64(var arg0, var arg1) returns (var r0) {\n        r0 = func_0D83(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0D71(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0D83(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0D92(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= storage[0x0b]) {\n        label_0E37:\n            return;\n        } else {\n        label_0DA2:\n            var var3 = 0x0dcc;\n            var var4 = 0x0592;\n            var var5 = 0x058a;\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x06;\n            var var6 = storage[keccak256(memory[0x00:0x40])];\n            var var7 = 0x0a ** (storage[0x03] + 0x01);\n            var5 = func_0CF8(var6, var7);\n            var4 = func_058A(var5);\n            var3 = func_0592(var4);\n            var temp0 = var3;\n            var1 = temp0;\n            var3 = 0x0ddb;\n            var4 = 0x07da;\n            var5 = arg0;\n            var6 = var1;\n            var4 = func_0CF8(var5, var6);\n            var3 = func_07DA(var4);\n            var temp1 = var0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x04;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x07;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = var3;\n            storage[temp2] = temp3 + storage[temp2];\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x08;\n            var2 = temp3;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var3 = 0x0e1d;\n            var5 = var2;\n            var3 = func_0D83(var4, var5);\n            var temp4 = var0;\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = 0x08;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var0 = temp4 + 0x01;\n            var2 = var2;\n        \n            if (var0 >= storage[0x0b]) { goto label_0E37; }\n            else { goto label_0DA2; }\n        }\n    }\n    \n    function func_0EB7(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_0EBB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x07bc;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_0EB7(arg1, var0); }\n    \n    label_0ECA:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_0ECA; }\n    \n        arg0 = func_0EB7(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x04dd2dea) {\n            // Dispatch table entry for getCardDivShare(uint256)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var var2 = msg.data[0x04:0x24];\n            var1 = getCardDivShare(var2);\n        \n        label_0191:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01b8;\n            var2 = name();\n        \n        label_01B8:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x20;\n            var temp3 = var2;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n            var var3 = temp2;\n            var var4 = var3;\n            var var5 = var4 + 0x40;\n            var var7 = memory[temp3:temp3 + 0x20];\n            var var6 = temp3 + 0x20;\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n            var var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_01F2:\n                var temp4 = var7;\n                var5 = temp4 + var5;\n                var6 = temp4 & 0x1f;\n            \n                if (!var6) {\n                    var temp5 = memory[0x40:0x60];\n                    return memory[temp5:temp5 + var5 - temp5];\n                } else {\n                    var temp6 = var6;\n                    var temp7 = var5 - temp6;\n                    memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                    var temp8 = memory[0x40:0x60];\n                    return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                }\n            } else {\n            label_01E3:\n                var temp9 = var11;\n                memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                var11 = temp9 + 0x20;\n            \n                if (var11 >= var8) { goto label_01F2; }\n                else { goto label_01E3; }\n            }\n        } else if (var0 == 0x1ae4dfb7) {\n            // Dispatch table entry for getcardPrice(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = msg.data[0x04:0x24];\n            var1 = getcardPrice(var2);\n            goto label_0191;\n        } else if (var0 == 0x1b7e0902) {\n            // Dispatch table entry for getcardOwner(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x025d;\n            var2 = msg.data[0x04:0x24];\n            var1 = getcardOwner(var2);\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n        } else if (var0 == 0x287ad8fa) {\n            // Dispatch table entry for cardPrice(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = msg.data[0x04:0x24];\n            var2 = cardPrice(var2);\n            goto label_0191;\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = decimals();\n        \n        label_02A6:\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var2 & 0xff;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x3ccfd60b) {\n            // Dispatch table entry for withdraw()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d1;\n            withdraw();\n            stop();\n        } else if (var0 == 0x4b419b5f) {\n            // Dispatch table entry for setcardPrice(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d1;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            setcardPrice(var2, var3);\n            stop();\n        } else if (var0 == 0x4c738909) {\n            // Dispatch table entry for getMyBalance()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var1 = getMyBalance();\n            goto label_0191;\n        } else if (var0 == 0x4e3c2f47) {\n            // Dispatch table entry for getCardDivs(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = 0x00;\n            var5 = var4;\n            var6 = 0x07cb;\n            var7 = var2;\n            var6 = getCardDivShare(var7);\n            var temp14 = var6;\n            var5 = temp14;\n            var6 = 0x07e5;\n            var7 = 0x07da;\n            var8 = var5;\n            var9 = var3;\n            var7 = func_0CF8(var8, var9);\n            var6 = func_07DA(var7);\n            var4 = var6;\n            var1 = var4;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x53ba3d43) {\n            // Dispatch table entry for cardsDivRate()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = cardsDivRate();\n            goto label_02A6;\n        } else if (var0 == 0x5bdff855) {\n            // Dispatch table entry for gettotalCardDivs(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = msg.data[0x04:0x24];\n            var1 = gettotalCardDivs(var2);\n            goto label_0191;\n        } else if (var0 == 0x6b2f4632) {\n            // Dispatch table entry for totalEthereumBalance()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var1 = totalEthereumBalance();\n            goto label_0191;\n        } else if (var0 == 0x763f337e) {\n            // Dispatch table entry for setAllowReferral(bool)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d1;\n            var2 = !!msg.data[0x04:0x24];\n            setAllowReferral(var2);\n            stop();\n        } else if (var0 == 0x7deb6025) {\n            // Dispatch table entry for buy(uint256,address)\n            var1 = 0x02d1;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n            buy(var2, var3);\n            stop();\n        } else if (var0 == 0x7fcf440a) {\n            // Dispatch table entry for getOwnerBalance(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = getOwnerBalance(var2);\n            goto label_0191;\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01b8;\n            var2 = symbol();\n            goto label_01B8;\n        } else if (var0 == 0x9ba65fff) {\n            // Dispatch table entry for addNewcard(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d1;\n            var2 = msg.data[0x04:0x24];\n            addNewcard(var2);\n            stop();\n        } else if (var0 == 0x9d902fc0) {\n            // Dispatch table entry for precisionFactor()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = precisionFactor();\n            goto label_0191;\n        } else if (var0 == 0xa053ce1f) {\n            // Dispatch table entry for referralRate()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = referralRate();\n            goto label_02A6;\n        } else if (var0 == 0xae882412) {\n            // Dispatch table entry for getTotalDivsProduced()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var1 = getTotalDivsProduced();\n            goto label_0191;\n        } else if (var0 == 0xaf392206) {\n            // Dispatch table entry for totalCardValue()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = totalCardValue();\n            goto label_0191;\n        } else if (var0 == 0xb84c8246) {\n            // Dispatch table entry for setSymbol(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp15 = memory[0x40:0x60];\n            var temp16 = msg.data[0x04:0x24];\n            var temp17 = msg.data[temp16 + 0x04:temp16 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp15 + (temp17 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp15:temp15 + 0x20] = temp17;\n            var1 = 0x02d1;\n            memory[temp15 + 0x20:temp15 + 0x20 + temp17] = msg.data[temp16 + 0x24:temp16 + 0x24 + temp17];\n            var2 = temp15;\n        \n            if (msg.sender != storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n        \n            var temp18 = var2;\n            var3 = 0x0ca9;\n            var4 = 0x01;\n            var5 = temp18 + 0x20;\n            var6 = memory[temp18:temp18 + 0x20];\n        \n        label_0E3D:\n            var temp19 = var4;\n            var temp20 = storage[temp19];\n            memory[0x00:0x20] = temp19;\n            var7 = keccak256(memory[0x00:0x20]);\n            var temp21 = var5;\n            var5 = var7 + ((!(temp20 & 0x01) * 0x0100 - 0x01 & temp20) / 0x02 + 0x1f) / 0x20;\n            var8 = temp21;\n        \n            if (0x1f < var6) {\n                var temp22 = var6;\n                storage[var4] = temp22 + temp22 + 0x01;\n            \n                if (!temp22) {\n                label_0EAB:\n                    var temp23 = var5;\n                    var5 = 0x0eb7;\n                    var6 = temp23;\n                    var5 = func_0EBB(var6, var7);\n                    var3 = func_0EB7(var4, var5);\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp24 = var6;\n                    var temp25 = var8;\n                    var6 = temp25;\n                    var8 = var6 + temp24;\n                \n                    if (var8 <= var6) { goto label_0EAB; }\n                \n                label_0E99:\n                    var temp26 = var6;\n                    var temp27 = var7;\n                    storage[temp27] = memory[temp26:temp26 + 0x20];\n                    var6 = temp26 + 0x20;\n                    var7 = temp27 + 0x01;\n                    var8 = var8;\n                \n                    if (var8 <= var6) { goto label_0EAB; }\n                    else { goto label_0E99; }\n                }\n            } else {\n                var temp28 = var6;\n                storage[var4] = temp28 + temp28 | (memory[var8:var8 + 0x20] & ~0xff);\n                goto label_0EAB;\n            }\n        } else if (var0 == 0xb987f688) {\n            // Dispatch table entry for gettotalCards()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var1 = gettotalCards();\n            goto label_0191;\n        } else if (var0 == 0xbaf3a4d4) {\n            // Dispatch table entry for distDivRate()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = distDivRate();\n            goto label_02A6;\n        } else if (var0 == 0xc47f0027) {\n            // Dispatch table entry for setName(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp29 = memory[0x40:0x60];\n            var temp30 = msg.data[0x04:0x24];\n            var temp31 = msg.data[temp30 + 0x04:temp30 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp29 + (temp31 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp29:temp29 + 0x20] = temp31;\n            var1 = 0x02d1;\n            memory[temp29 + 0x20:temp29 + 0x20 + temp31] = msg.data[temp30 + 0x24:temp30 + 0x24 + temp31];\n            var2 = temp29;\n        \n            if (msg.sender != storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n        \n            var temp32 = var2;\n            var3 = 0x0ca9;\n            var4 = 0x00;\n            var6 = memory[temp32:temp32 + 0x20];\n            var5 = temp32 + 0x20;\n            goto label_0E3D;\n        } else if (var0 == 0xd5c96b36) {\n            // Dispatch table entry for gettotalCardValue()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var1 = gettotalCardValue();\n            goto label_0191;\n        } else if (var0 == 0xe994c15d) {\n            // Dispatch table entry for totalCards()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = totalCards();\n            goto label_0191;\n        } else if (var0 == 0xfd01d4a1) {\n            // Dispatch table entry for ownerDivRate()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = ownerDivRate();\n            goto label_02A6;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getCardDivShare(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x059c;\n        var var2 = 0x0592;\n        var var3 = 0x058a;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x06;\n        var var4 = storage[keccak256(memory[0x00:0x40])];\n        var var5 = 0x0a ** (storage[0x03] + 0x01);\n        var3 = func_0CF8(var4, var5);\n        var2 = func_058A(var3);\n        return func_0592(var2);\n    }\n    \n    function func_058A(var arg0) returns (var r0) {\n        var var0 = storage[0x02];\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_0592(var arg0) returns (var r0) {\n        arg0 = arg0 + 0x05;\n        var var0 = 0x0a;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x00;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0628:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_061F; }\n        \n        label_060B:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_060B; }\n        \n        label_061F:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0628;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0628;\n        }\n    }\n    \n    function getcardPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function getcardOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function cardPrice(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = msg.sender;\n        var var1 = 0x00;\n        memory[var1:var1 + 0x20] = var0;\n        memory[0x20:0x40] = 0x07;\n    \n        if (0x038d7ea4c68000 > storage[keccak256(memory[var1:var1 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1];\n        storage[temp1] = 0x00;\n        var temp3 = memory[0x40:0x60];\n        var1 = temp2;\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp0).call.gas(!var1 * 0x08fc).value(var1)(memory[temp3:temp3 + 0x00]);\n        var var2 = !temp4;\n    \n        if (!var2) {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var1;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x40], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc]);\n            return;\n        } else {\n            var temp7 = returndata.length;\n            memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function setcardPrice(var arg0, var arg1) {\n        if (msg.sender != storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] / 0x0100 & temp0 != temp0 & storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = arg1;\n    }\n    \n    function getMyBalance() returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_07DA(var arg0) returns (var r0) {\n        var var0 = 0x0a ** storage[0x03];\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function cardsDivRate() returns (var r0) { return 0x0a; }\n    \n    function gettotalCardDivs(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x08;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function setAllowReferral(var arg0) {\n        if (msg.sender != storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0c] = !!arg0 | (storage[0x0c] & ~0xff);\n    }\n    \n    function buy(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n    \n        if (arg0 >= storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n    \n        if (msg.value != storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x04;\n    \n        if (msg.sender == storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x06;\n        var var8 = 0x08c0;\n        var var9 = msg.value;\n        var var10 = storage[keccak256(memory[0x00:0x40])];\n        func_0D41(var9, var10);\n        var8 = 0x08d6;\n        var9 = 0x08cf;\n        var10 = msg.value;\n        var var11 = storage[0x09];\n        var9 = func_0CF8(var10, var11);\n        var8 = func_08CF(var9);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x06;\n        var0 = var8;\n        var8 = 0x08f3;\n        var9 = msg.value;\n        var10 = storage[keccak256(memory[0x00:0x40])];\n        var8 = func_0D71(var9, var10);\n        var temp0 = var8;\n        var1 = temp0;\n        var8 = 0x0901;\n        var9 = storage[0x0a];\n        var10 = var1;\n        var8 = func_0D83(var9, var10);\n        storage[0x0a] = var8;\n        var8 = 0x0915;\n        var9 = 0x08cf;\n        var11 = 0x0a;\n        var10 = var1;\n        var9 = func_0CF8(var10, var11);\n        var8 = func_08CF(var9);\n        var2 = var8;\n        var8 = 0x0925;\n        var9 = 0x08cf;\n        var10 = var1;\n        var11 = 0x32;\n        var9 = func_0CF8(var10, var11);\n        var8 = func_08CF(var9);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = var8;\n        var3 = temp1;\n        var9 = storage[keccak256(memory[0x00:0x40])];\n        var8 = 0x0941;\n        var10 = var3;\n        var8 = func_0D83(var9, var10);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = var8;\n        memory[0x20:0x40] = 0x06;\n        var8 = 0x0967;\n        var10 = storage[keccak256(memory[0x00:0x40])];\n        var9 = var3;\n        var8 = func_0D83(var9, var10);\n        var3 = var8;\n        var8 = 0x0977;\n        var9 = 0x08cf;\n        var10 = var1;\n        var11 = 0x28;\n        var9 = func_0CF8(var10, var11);\n        var8 = func_08CF(var9);\n        var4 = var8;\n        var8 = storage[0x0c] & 0xff;\n    \n        if (var8) {\n            var8 = msg.sender != arg1 & 0x02 ** 0xa0 - 0x01;\n        \n            if (!var8) { goto label_09A9; }\n            else { goto label_099C; }\n        } else if (!var8) {\n        label_09A9:\n        \n            if (!var8) {\n            label_0A08:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x04;\n                var temp2 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp2;\n                memory[0x20:0x40] = 0x07;\n                var6 = temp2;\n                var7 = msg.sender;\n                var9 = storage[keccak256(memory[0x00:0x40])];\n                var8 = 0x0a3d;\n                var10 = var3;\n                var8 = func_0D83(var9, var10);\n                var temp3 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = var6 & temp3;\n                memory[0x20:0x40] = 0x07;\n                storage[keccak256(memory[0x00:0x40])] = var8;\n                var temp4 = memory[0x40:0x60];\n                var temp5 = var2;\n                var temp6;\n                temp6, memory[temp4:temp4 + 0x00] = address(temp3 & storage[0x11]).call.gas(!temp5 * 0x08fc).value(temp5)(memory[temp4:temp4 + 0x00]);\n                var8 = !temp6;\n            \n                if (!var8) {\n                    var8 = 0x0a96;\n                    var9 = var4;\n                    func_0D92(var9);\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x06;\n                    storage[keccak256(memory[0x00:0x40])] = msg.value;\n                    memory[0x20:0x40] = 0x05;\n                    storage[keccak256(memory[0x00:0x40])] = var0;\n                    memory[0x20:0x40] = 0x04;\n                    var temp7 = keccak256(memory[0x00:0x40]);\n                    storage[temp7] = (var7 & 0x02 ** 0xa0 - 0x01) | (storage[temp7] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                    var10 = msg.value;\n                    var8 = 0xb6058ac11d669cce504a48b05012e6920f1058599371108c7eacf6dfa9b976bb;\n                    var9 = msg.sender;\n                    var11 = arg0;\n                    var var12 = 0x0b1c;\n                    var var13 = 0x08cf;\n                    var var15 = storage[0x09];\n                    var var14 = var10;\n                    var13 = func_0CF8(var14, var15);\n                    var12 = func_08CF(var13);\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = var9 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = var10;\n                    memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = var11;\n                    memory[temp8 + 0x60:temp8 + 0x60 + 0x20] = var12;\n                    var temp9 = memory[0x40:0x60];\n                    log(memory[temp9:temp9 + temp8 - temp9 + 0x80], [stack[-5]]);\n                    return;\n                } else {\n                    var temp10 = returndata.length;\n                    memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n            label_09AF:\n                var8 = 0x09bc;\n                var9 = 0x08cf;\n                var10 = var1;\n                var11 = 0x05;\n                var9 = func_0CF8(var10, var11);\n                var8 = func_08CF(var9);\n                var temp11 = var8;\n                var5 = temp11;\n                var8 = 0x09c8;\n                var9 = var4;\n                var10 = var5;\n                var8 = func_0D71(var9, var10);\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x07;\n                var4 = var8;\n                var9 = storage[keccak256(memory[0x00:0x40])];\n                var8 = 0x09ee;\n                var10 = var5;\n                var8 = func_0D83(var9, var10);\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x07;\n                storage[keccak256(memory[0x00:0x40])] = var8;\n                goto label_0A08;\n            }\n        } else {\n        label_099C:\n        \n            if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { goto label_0A08; }\n            else { goto label_09AF; }\n        }\n    }\n    \n    function func_08CF(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function getOwnerBalance(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0628:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_061F; }\n        \n        label_060B:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_060B; }\n        \n        label_061F:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0628;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0628;\n        }\n    }\n    \n    function addNewcard(var arg0) {\n        if (msg.sender != storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = ~0x00;\n        memory[0x00:0x20] = temp0 + storage[0x0b];\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = arg0;\n        memory[0x00:0x20] = temp0 + storage[0x0b];\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01);\n        memory[0x00:0x20] = temp0 + storage[0x0b];\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        storage[0x0b] = storage[0x0b] + 0x01;\n    }\n    \n    function precisionFactor() returns (var r0) { return storage[0x03]; }\n    \n    function referralRate() returns (var r0) { return 0x05; }\n    \n    function getTotalDivsProduced() returns (var r0) { return storage[0x0a]; }\n    \n    function totalCardValue() returns (var r0) { return storage[0x02]; }\n    \n    function gettotalCards() returns (var r0) { return storage[0x0b]; }\n    \n    function distDivRate() returns (var r0) { return 0x28; }\n    \n    function gettotalCardValue() returns (var r0) { return storage[0x02]; }\n    \n    function totalCards() returns (var r0) { return storage[0x0b]; }\n    \n    function ownerDivRate() returns (var r0) { return 0x32; }\n    \n    function func_0CF8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0D41(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0x0d52;\n        var var2 = 0x08cf;\n        var var3 = arg0;\n        var var4 = storage[0x09];\n        var2 = func_0CF8(var3, var4);\n        var1 = func_08CF(var2);\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x0d69;\n        var2 = storage[0x02];\n        var3 = 0x0d64;\n        var4 = var0;\n        var var5 = arg1;\n        var3 = func_0D71(var4, var5);\n        var1 = func_0D64(var2, var3);\n        storage[0x02] = var1;\n    }\n    \n    function func_0D64(var arg0, var arg1) returns (var r0) {\n        r0 = func_0D83(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0D71(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0D83(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0D92(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= storage[0x0b]) {\n        label_0E37:\n            return;\n        } else {\n        label_0DA2:\n            var var3 = 0x0dcc;\n            var var4 = 0x0592;\n            var var5 = 0x058a;\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x06;\n            var var6 = storage[keccak256(memory[0x00:0x40])];\n            var var7 = 0x0a ** (storage[0x03] + 0x01);\n            var5 = func_0CF8(var6, var7);\n            var4 = func_058A(var5);\n            var3 = func_0592(var4);\n            var temp0 = var3;\n            var1 = temp0;\n            var3 = 0x0ddb;\n            var4 = 0x07da;\n            var5 = arg0;\n            var6 = var1;\n            var4 = func_0CF8(var5, var6);\n            var3 = func_07DA(var4);\n            var temp1 = var0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x04;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x07;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = var3;\n            storage[temp2] = temp3 + storage[temp2];\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x08;\n            var2 = temp3;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var3 = 0x0e1d;\n            var5 = var2;\n            var3 = func_0D83(var4, var5);\n            var temp4 = var0;\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = 0x08;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var0 = temp4 + 0x01;\n            var2 = var2;\n        \n            if (var0 >= storage[0x0b]) { goto label_0E37; }\n            else { goto label_0DA2; }\n        }\n    }\n    \n    function func_0EB7(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_0EBB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x07bc;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_0EB7(arg1, var0); }\n    \n    label_0ECA:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_0ECA; }\n    \n        arg0 = func_0EB7(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x04dd2dea) {\n            // Dispatch table entry for getCardDivShare(uint256)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var var2 = msg.data[0x04:0x24];\n            var1 = getCardDivShare(var2);\n        \n        label_0191:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01b8;\n            var2 = name();\n        \n        label_01B8:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x20;\n            var temp3 = var2;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n            var var3 = temp2;\n            var var4 = var3;\n            var var5 = var4 + 0x40;\n            var var7 = memory[temp3:temp3 + 0x20];\n            var var6 = temp3 + 0x20;\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n            var var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_01F2:\n                var temp4 = var7;\n                var5 = temp4 + var5;\n                var6 = temp4 & 0x1f;\n            \n                if (!var6) {\n                    var temp5 = memory[0x40:0x60];\n                    return memory[temp5:temp5 + var5 - temp5];\n                } else {\n                    var temp6 = var6;\n                    var temp7 = var5 - temp6;\n                    memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                    var temp8 = memory[0x40:0x60];\n                    return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                }\n            } else {\n            label_01E3:\n                var temp9 = var11;\n                memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                var11 = temp9 + 0x20;\n            \n                if (var11 >= var8) { goto label_01F2; }\n                else { goto label_01E3; }\n            }\n        } else if (var0 == 0x1ae4dfb7) {\n            // Dispatch table entry for getcardPrice(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = msg.data[0x04:0x24];\n            var1 = getcardPrice(var2);\n            goto label_0191;\n        } else if (var0 == 0x1b7e0902) {\n            // Dispatch table entry for getcardOwner(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x025d;\n            var2 = msg.data[0x04:0x24];\n            var1 = getcardOwner(var2);\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n        } else if (var0 == 0x287ad8fa) {\n            // Dispatch table entry for cardPrice(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = msg.data[0x04:0x24];\n            var2 = cardPrice(var2);\n            goto label_0191;\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = decimals();\n        \n        label_02A6:\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var2 & 0xff;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x3ccfd60b) {\n            // Dispatch table entry for withdraw()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d1;\n            withdraw();\n            stop();\n        } else if (var0 == 0x4b419b5f) {\n            // Dispatch table entry for setcardPrice(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d1;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            setcardPrice(var2, var3);\n            stop();\n        } else if (var0 == 0x4c738909) {\n            // Dispatch table entry for getMyBalance()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var1 = getMyBalance();\n            goto label_0191;\n        } else if (var0 == 0x4e3c2f47) {\n            // Dispatch table entry for getCardDivs(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = 0x00;\n            var5 = var4;\n            var6 = 0x07cb;\n            var7 = var2;\n            var6 = getCardDivShare(var7);\n            var temp14 = var6;\n            var5 = temp14;\n            var6 = 0x07e5;\n            var7 = 0x07da;\n            var8 = var5;\n            var9 = var3;\n            var7 = func_0CF8(var8, var9);\n            var6 = func_07DA(var7);\n            var4 = var6;\n            var1 = var4;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x53ba3d43) {\n            // Dispatch table entry for cardsDivRate()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = cardsDivRate();\n            goto label_02A6;\n        } else if (var0 == 0x5bdff855) {\n            // Dispatch table entry for gettotalCardDivs(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = msg.data[0x04:0x24];\n            var1 = gettotalCardDivs(var2);\n            goto label_0191;\n        } else if (var0 == 0x6b2f4632) {\n            // Dispatch table entry for totalEthereumBalance()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var1 = totalEthereumBalance();\n            goto label_0191;\n        } else if (var0 == 0x763f337e) {\n            // Dispatch table entry for setAllowReferral(bool)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d1;\n            var2 = !!msg.data[0x04:0x24];\n            setAllowReferral(var2);\n            stop();\n        } else if (var0 == 0x7deb6025) {\n            // Dispatch table entry for buy(uint256,address)\n            var1 = 0x02d1;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n            buy(var2, var3);\n            stop();\n        } else if (var0 == 0x7fcf440a) {\n            // Dispatch table entry for getOwnerBalance(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = getOwnerBalance(var2);\n            goto label_0191;\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01b8;\n            var2 = symbol();\n            goto label_01B8;\n        } else if (var0 == 0x9ba65fff) {\n            // Dispatch table entry for addNewcard(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d1;\n            var2 = msg.data[0x04:0x24];\n            addNewcard(var2);\n            stop();\n        } else if (var0 == 0x9d902fc0) {\n            // Dispatch table entry for precisionFactor()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = precisionFactor();\n            goto label_0191;\n        } else if (var0 == 0xa053ce1f) {\n            // Dispatch table entry for referralRate()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = referralRate();\n            goto label_02A6;\n        } else if (var0 == 0xae882412) {\n            // Dispatch table entry for getTotalDivsProduced()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var1 = getTotalDivsProduced();\n            goto label_0191;\n        } else if (var0 == 0xaf392206) {\n            // Dispatch table entry for totalCardValue()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = totalCardValue();\n            goto label_0191;\n        } else if (var0 == 0xb84c8246) {\n            // Dispatch table entry for setSymbol(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp15 = memory[0x40:0x60];\n            var temp16 = msg.data[0x04:0x24];\n            var temp17 = msg.data[temp16 + 0x04:temp16 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp15 + (temp17 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp15:temp15 + 0x20] = temp17;\n            var1 = 0x02d1;\n            memory[temp15 + 0x20:temp15 + 0x20 + temp17] = msg.data[temp16 + 0x24:temp16 + 0x24 + temp17];\n            var2 = temp15;\n        \n            if (msg.sender != storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n        \n            var temp18 = var2;\n            var3 = 0x0ca9;\n            var4 = 0x01;\n            var5 = temp18 + 0x20;\n            var6 = memory[temp18:temp18 + 0x20];\n        \n        label_0E3D:\n            var temp19 = var4;\n            var temp20 = storage[temp19];\n            memory[0x00:0x20] = temp19;\n            var7 = keccak256(memory[0x00:0x20]);\n            var temp21 = var5;\n            var5 = var7 + ((!(temp20 & 0x01) * 0x0100 - 0x01 & temp20) / 0x02 + 0x1f) / 0x20;\n            var8 = temp21;\n        \n            if (0x1f < var6) {\n                var temp22 = var6;\n                storage[var4] = temp22 + temp22 + 0x01;\n            \n                if (!temp22) {\n                label_0EAB:\n                    var temp23 = var5;\n                    var5 = 0x0eb7;\n                    var6 = temp23;\n                    var5 = func_0EBB(var6, var7);\n                    var3 = func_0EB7(var4, var5);\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp24 = var6;\n                    var temp25 = var8;\n                    var6 = temp25;\n                    var8 = var6 + temp24;\n                \n                    if (var8 <= var6) { goto label_0EAB; }\n                \n                label_0E99:\n                    var temp26 = var6;\n                    var temp27 = var7;\n                    storage[temp27] = memory[temp26:temp26 + 0x20];\n                    var6 = temp26 + 0x20;\n                    var7 = temp27 + 0x01;\n                    var8 = var8;\n                \n                    if (var8 <= var6) { goto label_0EAB; }\n                    else { goto label_0E99; }\n                }\n            } else {\n                var temp28 = var6;\n                storage[var4] = temp28 + temp28 | (memory[var8:var8 + 0x20] & ~0xff);\n                goto label_0EAB;\n            }\n        } else if (var0 == 0xb987f688) {\n            // Dispatch table entry for gettotalCards()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var1 = gettotalCards();\n            goto label_0191;\n        } else if (var0 == 0xbaf3a4d4) {\n            // Dispatch table entry for distDivRate()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = distDivRate();\n            goto label_02A6;\n        } else if (var0 == 0xc47f0027) {\n            // Dispatch table entry for setName(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp29 = memory[0x40:0x60];\n            var temp30 = msg.data[0x04:0x24];\n            var temp31 = msg.data[temp30 + 0x04:temp30 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp29 + (temp31 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp29:temp29 + 0x20] = temp31;\n            var1 = 0x02d1;\n            memory[temp29 + 0x20:temp29 + 0x20 + temp31] = msg.data[temp30 + 0x24:temp30 + 0x24 + temp31];\n            var2 = temp29;\n        \n            if (msg.sender != storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n        \n            var temp32 = var2;\n            var3 = 0x0ca9;\n            var4 = 0x00;\n            var6 = memory[temp32:temp32 + 0x20];\n            var5 = temp32 + 0x20;\n            goto label_0E3D;\n        } else if (var0 == 0xd5c96b36) {\n            // Dispatch table entry for gettotalCardValue()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var1 = gettotalCardValue();\n            goto label_0191;\n        } else if (var0 == 0xe994c15d) {\n            // Dispatch table entry for totalCards()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0191;\n            var2 = totalCards();\n            goto label_0191;\n        } else if (var0 == 0xfd01d4a1) {\n            // Dispatch table entry for ownerDivRate()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = ownerDivRate();\n            goto label_02A6;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getCardDivShare(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x059c;\n        var var2 = 0x0592;\n        var var3 = 0x058a;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x06;\n        var var4 = storage[keccak256(memory[0x00:0x40])];\n        var var5 = 0x0a ** (storage[0x03] + 0x01);\n        var3 = func_0CF8(var4, var5);\n        var2 = func_058A(var3);\n        return func_0592(var2);\n    }\n    \n    function func_058A(var arg0) returns (var r0) {\n        var var0 = storage[0x02];\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_0592(var arg0) returns (var r0) {\n        arg0 = arg0 + 0x05;\n        var var0 = 0x0a;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x00;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0628:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_061F; }\n        \n        label_060B:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_060B; }\n        \n        label_061F:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0628;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0628;\n        }\n    }\n    \n    function getcardPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function getcardOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function cardPrice(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = msg.sender;\n        var var1 = 0x00;\n        memory[var1:var1 + 0x20] = var0;\n        memory[0x20:0x40] = 0x07;\n    \n        if (0x038d7ea4c68000 > storage[keccak256(memory[var1:var1 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1];\n        storage[temp1] = 0x00;\n        var temp3 = memory[0x40:0x60];\n        var1 = temp2;\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp0).call.gas(!var1 * 0x08fc).value(var1)(memory[temp3:temp3 + 0x00]);\n        var var2 = !temp4;\n    \n        if (!var2) {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var1;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x40], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc]);\n            return;\n        } else {\n            var temp7 = returndata.length;\n            memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function setcardPrice(var arg0, var arg1) {\n        if (msg.sender != storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] / 0x0100 & temp0 != temp0 & storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = arg1;\n    }\n    \n    function getMyBalance() returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_07DA(var arg0) returns (var r0) {\n        var var0 = 0x0a ** storage[0x03];\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function cardsDivRate() returns (var r0) { return 0x0a; }\n    \n    function gettotalCardDivs(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x08;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function setAllowReferral(var arg0) {\n        if (msg.sender != storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0c] = !!arg0 | (storage[0x0c] & ~0xff);\n    }\n    \n    function buy(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n    \n        if (arg0 >= storage[0x0b]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x05;\n    \n        if (msg.value != storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x04;\n    \n        if (msg.sender == storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x06;\n        var var8 = 0x08c0;\n        var var9 = msg.value;\n        var var10 = storage[keccak256(memory[0x00:0x40])];\n        func_0D41(var9, var10);\n        var8 = 0x08d6;\n        var9 = 0x08cf;\n        var10 = msg.value;\n        var var11 = storage[0x09];\n        var9 = func_0CF8(var10, var11);\n        var8 = func_08CF(var9);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x06;\n        var0 = var8;\n        var8 = 0x08f3;\n        var9 = msg.value;\n        var10 = storage[keccak256(memory[0x00:0x40])];\n        var8 = func_0D71(var9, var10);\n        var temp0 = var8;\n        var1 = temp0;\n        var8 = 0x0901;\n        var9 = storage[0x0a];\n        var10 = var1;\n        var8 = func_0D83(var9, var10);\n        storage[0x0a] = var8;\n        var8 = 0x0915;\n        var9 = 0x08cf;\n        var11 = 0x0a;\n        var10 = var1;\n        var9 = func_0CF8(var10, var11);\n        var8 = func_08CF(var9);\n        var2 = var8;\n        var8 = 0x0925;\n        var9 = 0x08cf;\n        var10 = var1;\n        var11 = 0x32;\n        var9 = func_0CF8(var10, var11);\n        var8 = func_08CF(var9);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = var8;\n        var3 = temp1;\n        var9 = storage[keccak256(memory[0x00:0x40])];\n        var8 = 0x0941;\n        var10 = var3;\n        var8 = func_0D83(var9, var10);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = var8;\n        memory[0x20:0x40] = 0x06;\n        var8 = 0x0967;\n        var10 = storage[keccak256(memory[0x00:0x40])];\n        var9 = var3;\n        var8 = func_0D83(var9, var10);\n        var3 = var8;\n        var8 = 0x0977;\n        var9 = 0x08cf;\n        var10 = var1;\n        var11 = 0x28;\n        var9 = func_0CF8(var10, var11);\n        var8 = func_08CF(var9);\n        var4 = var8;\n        var8 = storage[0x0c] & 0xff;\n    \n        if (var8) {\n            var8 = msg.sender != arg1 & 0x02 ** 0xa0 - 0x01;\n        \n            if (!var8) { goto label_09A9; }\n            else { goto label_099C; }\n        } else if (!var8) {\n        label_09A9:\n        \n            if (!var8) {\n            label_0A08:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x04;\n                var temp2 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp2;\n                memory[0x20:0x40] = 0x07;\n                var6 = temp2;\n                var7 = msg.sender;\n                var9 = storage[keccak256(memory[0x00:0x40])];\n                var8 = 0x0a3d;\n                var10 = var3;\n                var8 = func_0D83(var9, var10);\n                var temp3 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = var6 & temp3;\n                memory[0x20:0x40] = 0x07;\n                storage[keccak256(memory[0x00:0x40])] = var8;\n                var temp4 = memory[0x40:0x60];\n                var temp5 = var2;\n                var temp6;\n                temp6, memory[temp4:temp4 + 0x00] = address(temp3 & storage[0x11]).call.gas(!temp5 * 0x08fc).value(temp5)(memory[temp4:temp4 + 0x00]);\n                var8 = !temp6;\n            \n                if (!var8) {\n                    var8 = 0x0a96;\n                    var9 = var4;\n                    func_0D92(var9);\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x06;\n                    storage[keccak256(memory[0x00:0x40])] = msg.value;\n                    memory[0x20:0x40] = 0x05;\n                    storage[keccak256(memory[0x00:0x40])] = var0;\n                    memory[0x20:0x40] = 0x04;\n                    var temp7 = keccak256(memory[0x00:0x40]);\n                    storage[temp7] = (var7 & 0x02 ** 0xa0 - 0x01) | (storage[temp7] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                    var10 = msg.value;\n                    var8 = 0xb6058ac11d669cce504a48b05012e6920f1058599371108c7eacf6dfa9b976bb;\n                    var9 = msg.sender;\n                    var11 = arg0;\n                    var var12 = 0x0b1c;\n                    var var13 = 0x08cf;\n                    var var15 = storage[0x09];\n                    var var14 = var10;\n                    var13 = func_0CF8(var14, var15);\n                    var12 = func_08CF(var13);\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = var9 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = var10;\n                    memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = var11;\n                    memory[temp8 + 0x60:temp8 + 0x60 + 0x20] = var12;\n                    var temp9 = memory[0x40:0x60];\n                    log(memory[temp9:temp9 + temp8 - temp9 + 0x80], [stack[-5]]);\n                    return;\n                } else {\n                    var temp10 = returndata.length;\n                    memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n            label_09AF:\n                var8 = 0x09bc;\n                var9 = 0x08cf;\n                var10 = var1;\n                var11 = 0x05;\n                var9 = func_0CF8(var10, var11);\n                var8 = func_08CF(var9);\n                var temp11 = var8;\n                var5 = temp11;\n                var8 = 0x09c8;\n                var9 = var4;\n                var10 = var5;\n                var8 = func_0D71(var9, var10);\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x07;\n                var4 = var8;\n                var9 = storage[keccak256(memory[0x00:0x40])];\n                var8 = 0x09ee;\n                var10 = var5;\n                var8 = func_0D83(var9, var10);\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x07;\n                storage[keccak256(memory[0x00:0x40])] = var8;\n                goto label_0A08;\n            }\n        } else {\n        label_099C:\n        \n            if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { goto label_0A08; }\n            else { goto label_09AF; }\n        }\n    }\n    \n    function func_08CF(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function getOwnerBalance(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0628:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_061F; }\n        \n        label_060B:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_060B; }\n        \n        label_061F:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0628;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0628;\n        }\n    }\n    \n    function addNewcard(var arg0) {\n        if (msg.sender != storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = ~0x00;\n        memory[0x00:0x20] = temp0 + storage[0x0b];\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = arg0;\n        memory[0x00:0x20] = temp0 + storage[0x0b];\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x0c] / 0x0100 & 0x02 ** 0xa0 - 0x01);\n        memory[0x00:0x20] = temp0 + storage[0x0b];\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        storage[0x0b] = storage[0x0b] + 0x01;\n    }\n    \n    function precisionFactor() returns (var r0) { return storage[0x03]; }\n    \n    function referralRate() returns (var r0) { return 0x05; }\n    \n    function getTotalDivsProduced() returns (var r0) { return storage[0x0a]; }\n    \n    function totalCardValue() returns (var r0) { return storage[0x02]; }\n    \n    function gettotalCards() returns (var r0) { return storage[0x0b]; }\n    \n    function distDivRate() returns (var r0) { return 0x28; }\n    \n    function gettotalCardValue() returns (var r0) { return storage[0x02]; }\n    \n    function totalCards() returns (var r0) { return storage[0x0b]; }\n    \n    function ownerDivRate() returns (var r0) { return 0x32; }\n    \n    function func_0CF8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0D41(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0x0d52;\n        var var2 = 0x08cf;\n        var var3 = arg0;\n        var var4 = storage[0x09];\n        var2 = func_0CF8(var3, var4);\n        var1 = func_08CF(var2);\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x0d69;\n        var2 = storage[0x02];\n        var3 = 0x0d64;\n        var4 = var0;\n        var var5 = arg1;\n        var3 = func_0D71(var4, var5);\n        var1 = func_0D64(var2, var3);\n        storage[0x02] = var1;\n    }\n    \n    function func_0D64(var arg0, var arg1) returns (var r0) {\n        r0 = func_0D83(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0D71(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0D83(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0D92(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= storage[0x0b]) {\n        label_0E37:\n            return;\n        } else {\n        label_0DA2:\n            var var3 = 0x0dcc;\n            var var4 = 0x0592;\n            var var5 = 0x058a;\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x06;\n            var var6 = storage[keccak256(memory[0x00:0x40])];\n            var var7 = 0x0a ** (storage[0x03] + 0x01);\n            var5 = func_0CF8(var6, var7);\n            var4 = func_058A(var5);\n            var3 = func_0592(var4);\n            var temp0 = var3;\n            var1 = temp0;\n            var3 = 0x0ddb;\n            var4 = 0x07da;\n            var5 = arg0;\n            var6 = var1;\n            var4 = func_0CF8(var5, var6);\n            var3 = func_07DA(var4);\n            var temp1 = var0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x04;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x07;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = var3;\n            storage[temp2] = temp3 + storage[temp2];\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x08;\n            var2 = temp3;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var3 = 0x0e1d;\n            var5 = var2;\n            var3 = func_0D83(var4, var5);\n            var temp4 = var0;\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = 0x08;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var0 = temp4 + 0x01;\n            var2 = var2;\n        \n            if (var0 >= storage[0x0b]) { goto label_0E37; }\n            else { goto label_0DA2; }\n        }\n    }\n    \n    function func_0EB7(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_0EBB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x07bc;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_0EB7(arg1, var0); }\n    \n    label_0ECA:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_0ECA; }\n    \n        arg0 = func_0EB7(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 29.976309061050415,
	"usage": {
		"completion_tokens": 551,
		"prompt_tokens": 11920,
		"total_tokens": 12471
	}
}