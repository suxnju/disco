{
	"address": "0x5b8ad60798ec10ad36e52625ff881801240c491a",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here is the Solidity contract code equivalent to the given decompiled code. Note that without the original source code, it's hard to accurately reproduce the original variable or function names.\n\n```solidity\npragma solidity ^0.7.0;\n\ncontract DecompiledContract {\n    // Variables\n    uint256[] private _name;\n    uint256[] private _symbol;\n    uint256 private _stakingRequirement;\n    mapping (uint256 => uint256) private _exit;\n    mapping (uint256 => uint256) private owner_6;\n    mapping (uint256 => uint256) private _dividendsOf;\n    mapping (uint256 => uint256) private _referrals;\n    uint256 private _totalSupply;\n    uint256 private stor_a;\n    address private _owner;\n    uint160 private stor_3_0_19;\n    address private _relay;\n\n    // Events\n    event onTokenPurchase(address indexed buyer, uint256 ethereumSpent, uint256 tokensMinted, address indexed referrer, uint256 timestamp, uint256 currentPrice);\n    event onWithdraw(address indexed holder, uint256 ethereumWithdrawn);\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event onTokenSell(address indexed seller, uint256 tokensBurned, uint256 ethereumEarned, uint256 timestamp, uint256 currentPrice);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event onReinvestment(address indexed holder, uint256 ethereumReinvested, uint256 tokensMinted);\n\n    // Functions\n    constructor() {\n        _owner = msg.sender;\n    }\n\n    function name() public view returns (uint256[] memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (uint256[] memory) {\n        return _symbol;\n    }\n\n    //... other functions would go here ...\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner, \"Only the contract owner can call this function\");\n        require(newOwner != address(0), \"New owner address cannot be zero\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function owner() public view returns(address) {\n        return _owner;\n    }\n    \n    //... other functions would go here ...\n\n    fallback() external payable {\n        // handle incoming ether, logic would go here\n    }\n}\n```\n\nPlease note that this code is incomplete, and has been provided to give a general idea of how the contract might look in Solidity. The original contract likely includes more functionality, better variable names, comments, and more complex logic.",
				"role": "assistant"
			}
		}
	],
	"created": 1701457886,
	"id": "chatcmpl-8R3D4F4p67pSeSvRb4TUXypC9LCow",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 05:15 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _stakingRequirement; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _exit; // STORAGE[0x5]\nmapping (uint256 => [uint256]) owner_6; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _dividendsOf; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _referrals; // STORAGE[0x8]\nuint256 _totalSupply; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint160 stor_3_0_19; // STORAGE[0x3] bytes 0 to 19\naddress _relay; // STORAGE[0xb] bytes 0 to 19\n\n// Events\nonTokenPurchase(address, uint256, uint256, address, uint256, uint256);\nonWithdraw(address, uint256);\nTransfer(address, address, uint256);\nonTokenSell(address, uint256, uint256, uint256, uint256);\nOwnershipTransferred(address, address);\nonReinvestment(address, uint256, uint256);\n\nfunction 0x11ed(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction 0x1258(uint256 varg0) private { \n    assert(1000);\n    return varg0 / 1000;\n}\n\nfunction fallback() public payable { \n    v0 = 0x4b3(msg.value);\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    return _dividendsOf[varg0] * stor_a - _dividendsOf[varg0] >> 64;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction calculateTokensReceived(uint256 varg0) public nonPayable { \n    v0 = 0x11ed(15, varg0);\n    assert(100);\n    assert(v0 / 100 <= varg0);\n    v1 = 0x11ed(1000, varg0 - v0 / 100);\n    return v1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction calculateEthereumReceived(uint256 varg0) public nonPayable { \n    require(varg0 <= _totalSupply);\n    v0 = 0x1258(varg0);\n    v1 = 0x11ed(5, v0);\n    assert(100);\n    assert(v1 / 100 <= v0);\n    return v0 - v1 / 100;\n}\n\nfunction updateMaintenanceAddress(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    stor_3_0_19 = varg0;\n}\n\nfunction updateRelay(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _relay = varg0;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    0xa98();\n}\n\nfunction sellPrice() public nonPayable { \n    v0 = 0x1258(0xde0b6b3a7640000);\n    v1 = 0x11ed(5, v0);\n    assert(100);\n    assert(v1 / 100 <= v0);\n    return v0 - v1 / 100;\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction myDividends(bool varg0) public nonPayable { \n    v0 = 0xbac(varg0);\n    return v0;\n}\n\nfunction totalEthereumBalance() public nonPayable { \n    return this.balance;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _exit[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    v0 = 0xc0d();\n    return v0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction myTokens() public nonPayable { \n    return _exit[msg.sender];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction referrals(address varg0) public nonPayable { \n    return address(_referrals[varg0]);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(_exit[msg.sender] > 0);\n    require(varg1 <= _exit[msg.sender]);\n    v0 = 0xbac(1);\n    if (v0 > 0) {\n        0xa98();\n    }\n    v1 = 0x11ed(1, varg1);\n    assert(100);\n    assert(v1 / 100 <= varg1);\n    v2 = 0x1258(v1 / 100);\n    assert(v1 / 100 <= _totalSupply);\n    _totalSupply = _totalSupply - v1 / 100;\n    assert(varg1 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg1;\n    assert(varg1 - v1 / 100 + _exit[varg0] >= _exit[varg0]);\n    _exit[varg0] += varg1 - v1 / 100;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] - varg1 * stor_a;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] + (varg1 - v1 / 100) * stor_a;\n    assert(_totalSupply);\n    assert((v2 << 64) / _totalSupply + stor_a >= stor_a);\n    stor_a += (v2 << 64) / _totalSupply;\n    emit Transfer(msg.sender, varg0, varg1 - v1 / 100);\n    return 1;\n}\n\nfunction relay() public nonPayable { \n    return _relay;\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    0xe86(varg0);\n}\n\nfunction exit() public nonPayable { \n    if (_exit[msg.sender] > 0) {\n        0xe86(_exit[msg.sender]);\n    }\n    0xa98();\n}\n\nfunction buy(address varg0) public payable { \n    v0 = v1 = !address(_referrals[msg.sender]);\n    if (v1) {\n        v0 = address(_referrals[msg.sender]) != msg.sender;\n    }\n    if (v0) {\n        _referrals[msg.sender] = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _referrals[msg.sender];\n    }\n    v2 = 0x4b3(msg.value);\n    return v2;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction reinvest() public nonPayable { \n    v0 = 0xbac(1);\n    require(v0 > 0);\n    v1 = 0xbac(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    owner_6[msg.sender] = 0;\n    v2 = 0x4b3(v1 + owner_6[msg.sender]);\n    emit onReinvestment(msg.sender, v1 + owner_6[msg.sender], v2);\n}\n\nfunction 0x4b3(uint256 varg0) private { \n    v0 = v1 = 0;\n    v2 = v3 = 1261;\n    v4 = v5 = 0x11ed(15, varg0);\n    while (!100) {\n        assert(100);\n        assert(v0 + v0 >= v0);\n        assert(v0 + v0 <= v0);\n        v6 = v7 = v0 - (v0 + v0);\n        assert(v0 <= varg0);\n        v8 = 0x11ed(1000, varg0 - v0);\n        v9 = v10 = v7 << 64;\n        assert(2);\n        v11 = varg0 >> 1;\n        v12 = v13 = v8 > 0;\n        if (v13) {\n            assert(_totalSupply + v8 >= v8);\n            v12 = v14 = _totalSupply + v8 > _totalSupply;\n        }\n        require(v12);\n        assert(v0 + owner_6[stor_3_0_19] >= owner_6[stor_3_0_19]);\n        owner_6[stor_3_0_19] += v0;\n        v15 = v16 = address(_referrals[msg.sender]);\n        if (address(_referrals[msg.sender])) {\n            v15 = v17 = address(_referrals[msg.sender]) != msg.sender;\n        }\n        if (v15) {\n            v15 = v18 = _exit[address(_referrals[msg.sender])] >= _stakingRequirement;\n        }\n        if (!v15) {\n            v6 = v0 + v7;\n            assert(v6 >= v7);\n            v9 = v19 = v6 << 64;\n        } else {\n            assert(v0 + owner_6[address(_referrals[msg.sender])] >= owner_6[address(_referrals[msg.sender])]);\n            owner_6[address(_referrals[msg.sender])] += v0;\n        }\n        if (_totalSupply <= 0) {\n            _totalSupply = v8;\n        } else {\n            assert(v8 + _totalSupply >= _totalSupply);\n            _totalSupply += v8;\n            assert(v8 + _totalSupply);\n            stor_a = stor_a + (v6 << 64) / (v8 + _totalSupply);\n            assert(_totalSupply);\n            v9 = v20 = v9 - (v9 - v8 * ((v6 << 64) / _totalSupply));\n        }\n        assert(v8 + _exit[msg.sender] >= _exit[msg.sender]);\n        _exit[msg.sender] += v8;\n        _dividendsOf[msg.sender] += v8 * stor_a - v9;\n        require(_relay.code.size);\n        v21 = _relay.relay(stor_3_0_19, v11).gas(msg.gas);\n        require(v21); // checks call status, propagates error data on error\n        require(_relay.code.size);\n        v22 = _relay.relay(msg.sender, v11).gas(msg.gas);\n        require(v22); // checks call status, propagates error data on error\n        v23 = 0xc0d();\n        emit onTokenPurchase(msg.sender, address(_referrals[msg.sender]), varg0, v8, block.timestamp, v23);\n        return v8;\n        v0 = v4 / 100;\n        goto {'0x4fd', '0x4ed', '0x50d'};\n        v2 = v24 = 1277;\n        v4 = 0x11ed(20, v0);\n        v2 = v25 = 1293;\n        v4 = 0x11ed(30, v0);\n    }\n}\n\nfunction 0xa98() private { \n    v0 = 0xbac(1);\n    require(v0 > 0);\n    v1 = 0xbac(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    owner_6[msg.sender] = 0;\n    v2 = msg.sender.call().value(v1 + owner_6[msg.sender]).gas(2300 * !(v1 + owner_6[msg.sender]));\n    require(v2); // checks call status, propagates error data on error\n    emit onWithdraw(msg.sender, v1 + owner_6[msg.sender]);\n    return ;\n}\n\nfunction 0xbac(uint256 varg0) private { \n    if (varg0) {\n        v0 = v1 = (_dividendsOf[msg.sender] * stor_a - _dividendsOf[msg.sender] >> 64) + owner_6[msg.sender];\n    } else {\n        v0 = _dividendsOf[msg.sender] * stor_a - _dividendsOf[msg.sender] >> 64;\n    }\n    return v0;\n}\n\nfunction 0xc0d() private { \n    v0 = 0x1258(0xde0b6b3a7640000);\n    v1 = 0x11ed(15, v0);\n    assert(100);\n    assert(v1 / 100 + v0 >= v0);\n    return v1 / 100 + v0;\n}\n\nfunction 0xe86(uint256 varg0) private { \n    require(_exit[msg.sender] > 0);\n    require(varg0 <= _exit[msg.sender]);\n    v0 = 0x1258(varg0);\n    v1 = 0x11ed(5, v0);\n    assert(100);\n    assert(v1 / 100 <= v0);\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    assert(varg0 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg0;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] - ((v0 - v1 / 100 << 64) + varg0 * stor_a);\n    if (0 < _totalSupply) {\n        assert(_totalSupply);\n        assert((v1 / 100 << 64) / _totalSupply + stor_a >= stor_a);\n        stor_a += (v1 / 100 << 64) / _totalSupply;\n    }\n    v2 = 0xc0d();\n    emit onTokenSell(msg.sender, varg0, v0 - v1 / 100, block.timestamp, v2);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x65318b) {\n            dividendsOf(address);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x10d0ffdd == function_selector) {\n            calculateTokensReceived(uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x22609373 == function_selector) {\n            calculateEthereumReceived(uint256);\n        } else if (0x275893a9 == function_selector) {\n            updateMaintenanceAddress(address);\n        } else if (0x29ca9dca == function_selector) {\n            updateRelay(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x688abbf7 == function_selector) {\n            myDividends(bool);\n        } else if (0x6b2f4632 == function_selector) {\n            totalEthereumBalance();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x949e8acd == function_selector) {\n            myTokens();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x9ca423b3 == function_selector) {\n            referrals(address);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb59589d1 == function_selector) {\n            relay();\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe9fad8ee == function_selector) {\n            exit();\n        } else if (0xf088d547 == function_selector) {\n            buy(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 05:15 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _stakingRequirement; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _exit; // STORAGE[0x5]\nmapping (uint256 => [uint256]) owner_6; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _dividendsOf; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _referrals; // STORAGE[0x8]\nuint256 _totalSupply; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint160 stor_3_0_19; // STORAGE[0x3] bytes 0 to 19\naddress _relay; // STORAGE[0xb] bytes 0 to 19\n\n// Events\nonTokenPurchase(address, uint256, uint256, address, uint256, uint256);\nonWithdraw(address, uint256);\nTransfer(address, address, uint256);\nonTokenSell(address, uint256, uint256, uint256, uint256);\nOwnershipTransferred(address, address);\nonReinvestment(address, uint256, uint256);\n\nfunction 0x11ed(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction 0x1258(uint256 varg0) private { \n    assert(1000);\n    return varg0 / 1000;\n}\n\nfunction fallback() public payable { \n    v0 = 0x4b3(msg.value);\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    return _dividendsOf[varg0] * stor_a - _dividendsOf[varg0] >> 64;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction calculateTokensReceived(uint256 varg0) public nonPayable { \n    v0 = 0x11ed(15, varg0);\n    assert(100);\n    assert(v0 / 100 <= varg0);\n    v1 = 0x11ed(1000, varg0 - v0 / 100);\n    return v1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction calculateEthereumReceived(uint256 varg0) public nonPayable { \n    require(varg0 <= _totalSupply);\n    v0 = 0x1258(varg0);\n    v1 = 0x11ed(5, v0);\n    assert(100);\n    assert(v1 / 100 <= v0);\n    return v0 - v1 / 100;\n}\n\nfunction updateMaintenanceAddress(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    stor_3_0_19 = varg0;\n}\n\nfunction updateRelay(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _relay = varg0;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    0xa98();\n}\n\nfunction sellPrice() public nonPayable { \n    v0 = 0x1258(0xde0b6b3a7640000);\n    v1 = 0x11ed(5, v0);\n    assert(100);\n    assert(v1 / 100 <= v0);\n    return v0 - v1 / 100;\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction myDividends(bool varg0) public nonPayable { \n    v0 = 0xbac(varg0);\n    return v0;\n}\n\nfunction totalEthereumBalance() public nonPayable { \n    return this.balance;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _exit[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    v0 = 0xc0d();\n    return v0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction myTokens() public nonPayable { \n    return _exit[msg.sender];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction referrals(address varg0) public nonPayable { \n    return address(_referrals[varg0]);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(_exit[msg.sender] > 0);\n    require(varg1 <= _exit[msg.sender]);\n    v0 = 0xbac(1);\n    if (v0 > 0) {\n        0xa98();\n    }\n    v1 = 0x11ed(1, varg1);\n    assert(100);\n    assert(v1 / 100 <= varg1);\n    v2 = 0x1258(v1 / 100);\n    assert(v1 / 100 <= _totalSupply);\n    _totalSupply = _totalSupply - v1 / 100;\n    assert(varg1 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg1;\n    assert(varg1 - v1 / 100 + _exit[varg0] >= _exit[varg0]);\n    _exit[varg0] += varg1 - v1 / 100;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] - varg1 * stor_a;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] + (varg1 - v1 / 100) * stor_a;\n    assert(_totalSupply);\n    assert((v2 << 64) / _totalSupply + stor_a >= stor_a);\n    stor_a += (v2 << 64) / _totalSupply;\n    emit Transfer(msg.sender, varg0, varg1 - v1 / 100);\n    return 1;\n}\n\nfunction relay() public nonPayable { \n    return _relay;\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    0xe86(varg0);\n}\n\nfunction exit() public nonPayable { \n    if (_exit[msg.sender] > 0) {\n        0xe86(_exit[msg.sender]);\n    }\n    0xa98();\n}\n\nfunction buy(address varg0) public payable { \n    v0 = v1 = !address(_referrals[msg.sender]);\n    if (v1) {\n        v0 = address(_referrals[msg.sender]) != msg.sender;\n    }\n    if (v0) {\n        _referrals[msg.sender] = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _referrals[msg.sender];\n    }\n    v2 = 0x4b3(msg.value);\n    return v2;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction reinvest() public nonPayable { \n    v0 = 0xbac(1);\n    require(v0 > 0);\n    v1 = 0xbac(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    owner_6[msg.sender] = 0;\n    v2 = 0x4b3(v1 + owner_6[msg.sender]);\n    emit onReinvestment(msg.sender, v1 + owner_6[msg.sender], v2);\n}\n\nfunction 0x4b3(uint256 varg0) private { \n    v0 = v1 = 0;\n    v2 = v3 = 1261;\n    v4 = v5 = 0x11ed(15, varg0);\n    while (!100) {\n        assert(100);\n        assert(v0 + v0 >= v0);\n        assert(v0 + v0 <= v0);\n        v6 = v7 = v0 - (v0 + v0);\n        assert(v0 <= varg0);\n        v8 = 0x11ed(1000, varg0 - v0);\n        v9 = v10 = v7 << 64;\n        assert(2);\n        v11 = varg0 >> 1;\n        v12 = v13 = v8 > 0;\n        if (v13) {\n            assert(_totalSupply + v8 >= v8);\n            v12 = v14 = _totalSupply + v8 > _totalSupply;\n        }\n        require(v12);\n        assert(v0 + owner_6[stor_3_0_19] >= owner_6[stor_3_0_19]);\n        owner_6[stor_3_0_19] += v0;\n        v15 = v16 = address(_referrals[msg.sender]);\n        if (address(_referrals[msg.sender])) {\n            v15 = v17 = address(_referrals[msg.sender]) != msg.sender;\n        }\n        if (v15) {\n            v15 = v18 = _exit[address(_referrals[msg.sender])] >= _stakingRequirement;\n        }\n        if (!v15) {\n            v6 = v0 + v7;\n            assert(v6 >= v7);\n            v9 = v19 = v6 << 64;\n        } else {\n            assert(v0 + owner_6[address(_referrals[msg.sender])] >= owner_6[address(_referrals[msg.sender])]);\n            owner_6[address(_referrals[msg.sender])] += v0;\n        }\n        if (_totalSupply <= 0) {\n            _totalSupply = v8;\n        } else {\n            assert(v8 + _totalSupply >= _totalSupply);\n            _totalSupply += v8;\n            assert(v8 + _totalSupply);\n            stor_a = stor_a + (v6 << 64) / (v8 + _totalSupply);\n            assert(_totalSupply);\n            v9 = v20 = v9 - (v9 - v8 * ((v6 << 64) / _totalSupply));\n        }\n        assert(v8 + _exit[msg.sender] >= _exit[msg.sender]);\n        _exit[msg.sender] += v8;\n        _dividendsOf[msg.sender] += v8 * stor_a - v9;\n        require(_relay.code.size);\n        v21 = _relay.relay(stor_3_0_19, v11).gas(msg.gas);\n        require(v21); // checks call status, propagates error data on error\n        require(_relay.code.size);\n        v22 = _relay.relay(msg.sender, v11).gas(msg.gas);\n        require(v22); // checks call status, propagates error data on error\n        v23 = 0xc0d();\n        emit onTokenPurchase(msg.sender, address(_referrals[msg.sender]), varg0, v8, block.timestamp, v23);\n        return v8;\n        v0 = v4 / 100;\n        goto {'0x4fd', '0x4ed', '0x50d'};\n        v2 = v24 = 1277;\n        v4 = 0x11ed(20, v0);\n        v2 = v25 = 1293;\n        v4 = 0x11ed(30, v0);\n    }\n}\n\nfunction 0xa98() private { \n    v0 = 0xbac(1);\n    require(v0 > 0);\n    v1 = 0xbac(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    owner_6[msg.sender] = 0;\n    v2 = msg.sender.call().value(v1 + owner_6[msg.sender]).gas(2300 * !(v1 + owner_6[msg.sender]));\n    require(v2); // checks call status, propagates error data on error\n    emit onWithdraw(msg.sender, v1 + owner_6[msg.sender]);\n    return ;\n}\n\nfunction 0xbac(uint256 varg0) private { \n    if (varg0) {\n        v0 = v1 = (_dividendsOf[msg.sender] * stor_a - _dividendsOf[msg.sender] >> 64) + owner_6[msg.sender];\n    } else {\n        v0 = _dividendsOf[msg.sender] * stor_a - _dividendsOf[msg.sender] >> 64;\n    }\n    return v0;\n}\n\nfunction 0xc0d() private { \n    v0 = 0x1258(0xde0b6b3a7640000);\n    v1 = 0x11ed(15, v0);\n    assert(100);\n    assert(v1 / 100 + v0 >= v0);\n    return v1 / 100 + v0;\n}\n\nfunction 0xe86(uint256 varg0) private { \n    require(_exit[msg.sender] > 0);\n    require(varg0 <= _exit[msg.sender]);\n    v0 = 0x1258(varg0);\n    v1 = 0x11ed(5, v0);\n    assert(100);\n    assert(v1 / 100 <= v0);\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    assert(varg0 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg0;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] - ((v0 - v1 / 100 << 64) + varg0 * stor_a);\n    if (0 < _totalSupply) {\n        assert(_totalSupply);\n        assert((v1 / 100 << 64) / _totalSupply + stor_a >= stor_a);\n        stor_a += (v1 / 100 << 64) / _totalSupply;\n    }\n    v2 = 0xc0d();\n    emit onTokenSell(msg.sender, varg0, v0 - v1 / 100, block.timestamp, v2);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x65318b) {\n            dividendsOf(address);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x10d0ffdd == function_selector) {\n            calculateTokensReceived(uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x22609373 == function_selector) {\n            calculateEthereumReceived(uint256);\n        } else if (0x275893a9 == function_selector) {\n            updateMaintenanceAddress(address);\n        } else if (0x29ca9dca == function_selector) {\n            updateRelay(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x688abbf7 == function_selector) {\n            myDividends(bool);\n        } else if (0x6b2f4632 == function_selector) {\n            totalEthereumBalance();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x949e8acd == function_selector) {\n            myTokens();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x9ca423b3 == function_selector) {\n            referrals(address);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb59589d1 == function_selector) {\n            relay();\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe9fad8ee == function_selector) {\n            exit();\n        } else if (0xf088d547 == function_selector) {\n            buy(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 05:15 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _stakingRequirement; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _exit; // STORAGE[0x5]\nmapping (uint256 => [uint256]) owner_6; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _dividendsOf; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _referrals; // STORAGE[0x8]\nuint256 _totalSupply; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint160 stor_3_0_19; // STORAGE[0x3] bytes 0 to 19\naddress _relay; // STORAGE[0xb] bytes 0 to 19\n\n// Events\nonTokenPurchase(address, uint256, uint256, address, uint256, uint256);\nonWithdraw(address, uint256);\nTransfer(address, address, uint256);\nonTokenSell(address, uint256, uint256, uint256, uint256);\nOwnershipTransferred(address, address);\nonReinvestment(address, uint256, uint256);\n\nfunction 0x11ed(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction 0x1258(uint256 varg0) private { \n    assert(1000);\n    return varg0 / 1000;\n}\n\nfunction fallback() public payable { \n    v0 = 0x4b3(msg.value);\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    return _dividendsOf[varg0] * stor_a - _dividendsOf[varg0] >> 64;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction calculateTokensReceived(uint256 varg0) public nonPayable { \n    v0 = 0x11ed(15, varg0);\n    assert(100);\n    assert(v0 / 100 <= varg0);\n    v1 = 0x11ed(1000, varg0 - v0 / 100);\n    return v1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction calculateEthereumReceived(uint256 varg0) public nonPayable { \n    require(varg0 <= _totalSupply);\n    v0 = 0x1258(varg0);\n    v1 = 0x11ed(5, v0);\n    assert(100);\n    assert(v1 / 100 <= v0);\n    return v0 - v1 / 100;\n}\n\nfunction updateMaintenanceAddress(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    stor_3_0_19 = varg0;\n}\n\nfunction updateRelay(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _relay = varg0;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    0xa98();\n}\n\nfunction sellPrice() public nonPayable { \n    v0 = 0x1258(0xde0b6b3a7640000);\n    v1 = 0x11ed(5, v0);\n    assert(100);\n    assert(v1 / 100 <= v0);\n    return v0 - v1 / 100;\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction myDividends(bool varg0) public nonPayable { \n    v0 = 0xbac(varg0);\n    return v0;\n}\n\nfunction totalEthereumBalance() public nonPayable { \n    return this.balance;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _exit[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    v0 = 0xc0d();\n    return v0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction myTokens() public nonPayable { \n    return _exit[msg.sender];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction referrals(address varg0) public nonPayable { \n    return address(_referrals[varg0]);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(_exit[msg.sender] > 0);\n    require(varg1 <= _exit[msg.sender]);\n    v0 = 0xbac(1);\n    if (v0 > 0) {\n        0xa98();\n    }\n    v1 = 0x11ed(1, varg1);\n    assert(100);\n    assert(v1 / 100 <= varg1);\n    v2 = 0x1258(v1 / 100);\n    assert(v1 / 100 <= _totalSupply);\n    _totalSupply = _totalSupply - v1 / 100;\n    assert(varg1 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg1;\n    assert(varg1 - v1 / 100 + _exit[varg0] >= _exit[varg0]);\n    _exit[varg0] += varg1 - v1 / 100;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] - varg1 * stor_a;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] + (varg1 - v1 / 100) * stor_a;\n    assert(_totalSupply);\n    assert((v2 << 64) / _totalSupply + stor_a >= stor_a);\n    stor_a += (v2 << 64) / _totalSupply;\n    emit Transfer(msg.sender, varg0, varg1 - v1 / 100);\n    return 1;\n}\n\nfunction relay() public nonPayable { \n    return _relay;\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    0xe86(varg0);\n}\n\nfunction exit() public nonPayable { \n    if (_exit[msg.sender] > 0) {\n        0xe86(_exit[msg.sender]);\n    }\n    0xa98();\n}\n\nfunction buy(address varg0) public payable { \n    v0 = v1 = !address(_referrals[msg.sender]);\n    if (v1) {\n        v0 = address(_referrals[msg.sender]) != msg.sender;\n    }\n    if (v0) {\n        _referrals[msg.sender] = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _referrals[msg.sender];\n    }\n    v2 = 0x4b3(msg.value);\n    return v2;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction reinvest() public nonPayable { \n    v0 = 0xbac(1);\n    require(v0 > 0);\n    v1 = 0xbac(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    owner_6[msg.sender] = 0;\n    v2 = 0x4b3(v1 + owner_6[msg.sender]);\n    emit onReinvestment(msg.sender, v1 + owner_6[msg.sender], v2);\n}\n\nfunction 0x4b3(uint256 varg0) private { \n    v0 = v1 = 0;\n    v2 = v3 = 1261;\n    v4 = v5 = 0x11ed(15, varg0);\n    while (!100) {\n        assert(100);\n        assert(v0 + v0 >= v0);\n        assert(v0 + v0 <= v0);\n        v6 = v7 = v0 - (v0 + v0);\n        assert(v0 <= varg0);\n        v8 = 0x11ed(1000, varg0 - v0);\n        v9 = v10 = v7 << 64;\n        assert(2);\n        v11 = varg0 >> 1;\n        v12 = v13 = v8 > 0;\n        if (v13) {\n            assert(_totalSupply + v8 >= v8);\n            v12 = v14 = _totalSupply + v8 > _totalSupply;\n        }\n        require(v12);\n        assert(v0 + owner_6[stor_3_0_19] >= owner_6[stor_3_0_19]);\n        owner_6[stor_3_0_19] += v0;\n        v15 = v16 = address(_referrals[msg.sender]);\n        if (address(_referrals[msg.sender])) {\n            v15 = v17 = address(_referrals[msg.sender]) != msg.sender;\n        }\n        if (v15) {\n            v15 = v18 = _exit[address(_referrals[msg.sender])] >= _stakingRequirement;\n        }\n        if (!v15) {\n            v6 = v0 + v7;\n            assert(v6 >= v7);\n            v9 = v19 = v6 << 64;\n        } else {\n            assert(v0 + owner_6[address(_referrals[msg.sender])] >= owner_6[address(_referrals[msg.sender])]);\n            owner_6[address(_referrals[msg.sender])] += v0;\n        }\n        if (_totalSupply <= 0) {\n            _totalSupply = v8;\n        } else {\n            assert(v8 + _totalSupply >= _totalSupply);\n            _totalSupply += v8;\n            assert(v8 + _totalSupply);\n            stor_a = stor_a + (v6 << 64) / (v8 + _totalSupply);\n            assert(_totalSupply);\n            v9 = v20 = v9 - (v9 - v8 * ((v6 << 64) / _totalSupply));\n        }\n        assert(v8 + _exit[msg.sender] >= _exit[msg.sender]);\n        _exit[msg.sender] += v8;\n        _dividendsOf[msg.sender] += v8 * stor_a - v9;\n        require(_relay.code.size);\n        v21 = _relay.relay(stor_3_0_19, v11).gas(msg.gas);\n        require(v21); // checks call status, propagates error data on error\n        require(_relay.code.size);\n        v22 = _relay.relay(msg.sender, v11).gas(msg.gas);\n        require(v22); // checks call status, propagates error data on error\n        v23 = 0xc0d();\n        emit onTokenPurchase(msg.sender, address(_referrals[msg.sender]), varg0, v8, block.timestamp, v23);\n        return v8;\n        v0 = v4 / 100;\n        goto {'0x4fd', '0x4ed', '0x50d'};\n        v2 = v24 = 1277;\n        v4 = 0x11ed(20, v0);\n        v2 = v25 = 1293;\n        v4 = 0x11ed(30, v0);\n    }\n}\n\nfunction 0xa98() private { \n    v0 = 0xbac(1);\n    require(v0 > 0);\n    v1 = 0xbac(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    owner_6[msg.sender] = 0;\n    v2 = msg.sender.call().value(v1 + owner_6[msg.sender]).gas(2300 * !(v1 + owner_6[msg.sender]));\n    require(v2); // checks call status, propagates error data on error\n    emit onWithdraw(msg.sender, v1 + owner_6[msg.sender]);\n    return ;\n}\n\nfunction 0xbac(uint256 varg0) private { \n    if (varg0) {\n        v0 = v1 = (_dividendsOf[msg.sender] * stor_a - _dividendsOf[msg.sender] >> 64) + owner_6[msg.sender];\n    } else {\n        v0 = _dividendsOf[msg.sender] * stor_a - _dividendsOf[msg.sender] >> 64;\n    }\n    return v0;\n}\n\nfunction 0xc0d() private { \n    v0 = 0x1258(0xde0b6b3a7640000);\n    v1 = 0x11ed(15, v0);\n    assert(100);\n    assert(v1 / 100 + v0 >= v0);\n    return v1 / 100 + v0;\n}\n\nfunction 0xe86(uint256 varg0) private { \n    require(_exit[msg.sender] > 0);\n    require(varg0 <= _exit[msg.sender]);\n    v0 = 0x1258(varg0);\n    v1 = 0x11ed(5, v0);\n    assert(100);\n    assert(v1 / 100 <= v0);\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    assert(varg0 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg0;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] - ((v0 - v1 / 100 << 64) + varg0 * stor_a);\n    if (0 < _totalSupply) {\n        assert(_totalSupply);\n        assert((v1 / 100 << 64) / _totalSupply + stor_a >= stor_a);\n        stor_a += (v1 / 100 << 64) / _totalSupply;\n    }\n    v2 = 0xc0d();\n    emit onTokenSell(msg.sender, varg0, v0 - v1 / 100, block.timestamp, v2);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x65318b) {\n            dividendsOf(address);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x10d0ffdd == function_selector) {\n            calculateTokensReceived(uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x22609373 == function_selector) {\n            calculateEthereumReceived(uint256);\n        } else if (0x275893a9 == function_selector) {\n            updateMaintenanceAddress(address);\n        } else if (0x29ca9dca == function_selector) {\n            updateRelay(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x688abbf7 == function_selector) {\n            myDividends(bool);\n        } else if (0x6b2f4632 == function_selector) {\n            totalEthereumBalance();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x949e8acd == function_selector) {\n            myTokens();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x9ca423b3 == function_selector) {\n            referrals(address);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb59589d1 == function_selector) {\n            relay();\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe9fad8ee == function_selector) {\n            exit();\n        } else if (0xf088d547 == function_selector) {\n            buy(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 25.01530408859253,
	"usage": {
		"completion_tokens": 544,
		"prompt_tokens": 4452,
		"total_tokens": 4996
	}
}