{
	"address": "0x47841c761b02a8c33e3ff2b13d6497d72e539eb6",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is your Solidity smart contract code that matches the decompiled code:\n\n```solidity\npragma solidity >=0.5.0 <0.7.0;\n\ncontract MyContract {\n    uint256 private _priceOfToken;\n    uint256 private stor_3;\n    address private _owner;\n    address private stor_2_0_19;\n    bool private _paused;\n\n    event Unpause();\n    event Pause();\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    function priceOfToken() public view returns (uint256) {\n        return _priceOfToken;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    function unpause() public {\n        require(msg.sender == _owner);\n        require(_paused);\n        _paused = false;\n        emit Unpause();\n    }\n\n    function transferLimitedFundToAccount(address varg0, uint256 varg1) public {\n        require(msg.sender == _owner);\n        require(stor_3 > varg1);\n        (bool success,) = varg0.call.value(varg1)(\"\");\n        require(success);\n        stor_3 = stor_3 - varg1;\n    }\n\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    function updateTokenAddress(address varg0) public {\n        require(msg.sender == _owner);\n        stor_2_0_19 = varg0;\n    }\n\n    function destroy() public {\n        require(msg.sender == _owner);\n        selfdestruct(_owner);\n    }\n\n    function pause() public {\n        require(msg.sender == _owner);\n        require(!_paused);\n        _paused = true;\n        emit Pause();\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function updatePriceOfToken(uint256 varg0) public {\n        require(msg.sender == _owner);\n        _priceOfToken = varg0;\n    }\n\n    function transferFundToAccount(address varg0) public {\n        require(msg.sender == _owner);\n        require(stor_3 > 0);\n        (bool success,) = varg0.call.value(stor_3)(\"\");\n        require(success);\n        stor_3 = 0;\n    }\n\n    function transferOwnership(address varg0) public {\n        require(msg.sender == _owner);\n        require(varg0 != address(0));\n        emit OwnershipTransferred(_owner, varg0);\n        _owner = varg0;\n    }\n\n    function destroyAndSend(address varg0) public {\n        require(msg.sender == _owner);\n        selfdestruct(varg0);\n    }\n\n    function () external payable {\n        require(!_paused);\n        require(msg.value > 0);\n        require(_priceOfToken > 0);\n        require(stor_2_0_19 != address(0));\n        (bool success,) = stor_2_0_19.call.value(msg.value)(\"\");\n        require(success);\n        stor_3 = stor_3 + msg.value;\n    }\n}\n```\nPlease note that the `__function_selector__` function is not represented in this Solidity code, because Solidity has built-in function dispatching based on function selectors. It also does not include the equivalent of the `v0`, `v1`, and `varg` variables from the original decompiled code, as these are intermediate variables used in the EVM bytecode and not needed in the higher-level Solidity code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701466035,
	"id": "chatcmpl-8R5KV7hdfxPTBvzg0sgciYeFrGL6K",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.24 01:23 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _priceOfToken; // STORAGE[0x1]\nuint256 stor_3; // STORAGE[0x3]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress stor_2_0_19; // STORAGE[0x2] bytes 0 to 19\nuint8 _paused; // STORAGE[0x0] bytes 20 to 20\n\n// Events\nUnpause();\nPause();\nOwnershipTransferred(address, address);\n\nfunction priceOfToken() public nonPayable { \n    return _priceOfToken;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction unpause() public nonPayable { \n    require(msg.sender == _owner);\n    require(_paused);\n    _paused = 0;\n    emit Unpause();\n}\n\nfunction transferLimitedFundToAccount(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    require(stor_3 > varg1);\n    v0 = varg0.call().value(varg1).gas(!varg1 * 2300);\n    require(v0);\n    assert(varg1 <= stor_3);\n    stor_3 = stor_3 - varg1;\n}\n\nfunction paused() public nonPayable { \n    return _paused;\n}\n\nfunction updateTokenAddress(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    stor_2_0_19 = varg0;\n}\n\nfunction destroy() public nonPayable { \n    require(msg.sender == _owner);\n    selfdestruct(_owner);\n}\n\nfunction pause() public nonPayable { \n    require(msg.sender == _owner);\n    require(!_paused);\n    _paused = 1;\n    emit Pause();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction updatePriceOfToken(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _priceOfToken = varg0;\n}\n\nfunction transferFundToAccount(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(stor_3 > 0);\n    v0 = varg0.call().value(stor_3).gas(!stor_3 * 2300);\n    require(v0);\n    stor_3 = 0;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction destroyAndSend(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    selfdestruct(varg0);\n}\n\nfunction fallback() public payable { \n    require(!_paused);\n    require(msg.value > 0);\n    assert(_priceOfToken);\n    require(stor_2_0_19.code.size);\n    v0, v1 = stor_2_0_19.transfer(msg.sender, msg.value * 0xde0b6b3a7640000 / _priceOfToken).gas(msg.gas);\n    require(v0);\n    stor_3 = stor_3 + msg.value;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x1b9cbdfb == function_selector) {\n            priceOfToken();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3f4ba83a == function_selector) {\n            unpause();\n        } else if (0x42498389 == function_selector) {\n            transferLimitedFundToAccount(address,uint256);\n        } else if (0x5c975abb == function_selector) {\n            paused();\n        } else if (0x6691461a == function_selector) {\n            updateTokenAddress(address);\n        } else if (0x83197ef0 == function_selector) {\n            destroy();\n        } else if (0x8456cb59 == function_selector) {\n            pause();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xe45499c1 == function_selector) {\n            updatePriceOfToken(uint256);\n        } else if (0xea8d103f == function_selector) {\n            transferFundToAccount(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf5074f41 == function_selector) {\n            destroyAndSend(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 01:23 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _priceOfToken; // STORAGE[0x1]\nuint256 stor_3; // STORAGE[0x3]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress stor_2_0_19; // STORAGE[0x2] bytes 0 to 19\nuint8 _paused; // STORAGE[0x0] bytes 20 to 20\n\n// Events\nUnpause();\nPause();\nOwnershipTransferred(address, address);\n\nfunction priceOfToken() public nonPayable { \n    return _priceOfToken;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction unpause() public nonPayable { \n    require(msg.sender == _owner);\n    require(_paused);\n    _paused = 0;\n    emit Unpause();\n}\n\nfunction transferLimitedFundToAccount(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    require(stor_3 > varg1);\n    v0 = varg0.call().value(varg1).gas(!varg1 * 2300);\n    require(v0);\n    assert(varg1 <= stor_3);\n    stor_3 = stor_3 - varg1;\n}\n\nfunction paused() public nonPayable { \n    return _paused;\n}\n\nfunction updateTokenAddress(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    stor_2_0_19 = varg0;\n}\n\nfunction destroy() public nonPayable { \n    require(msg.sender == _owner);\n    selfdestruct(_owner);\n}\n\nfunction pause() public nonPayable { \n    require(msg.sender == _owner);\n    require(!_paused);\n    _paused = 1;\n    emit Pause();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction updatePriceOfToken(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _priceOfToken = varg0;\n}\n\nfunction transferFundToAccount(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(stor_3 > 0);\n    v0 = varg0.call().value(stor_3).gas(!stor_3 * 2300);\n    require(v0);\n    stor_3 = 0;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction destroyAndSend(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    selfdestruct(varg0);\n}\n\nfunction fallback() public payable { \n    require(!_paused);\n    require(msg.value > 0);\n    assert(_priceOfToken);\n    require(stor_2_0_19.code.size);\n    v0, v1 = stor_2_0_19.transfer(msg.sender, msg.value * 0xde0b6b3a7640000 / _priceOfToken).gas(msg.gas);\n    require(v0);\n    stor_3 = stor_3 + msg.value;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x1b9cbdfb == function_selector) {\n            priceOfToken();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3f4ba83a == function_selector) {\n            unpause();\n        } else if (0x42498389 == function_selector) {\n            transferLimitedFundToAccount(address,uint256);\n        } else if (0x5c975abb == function_selector) {\n            paused();\n        } else if (0x6691461a == function_selector) {\n            updateTokenAddress(address);\n        } else if (0x83197ef0 == function_selector) {\n            destroy();\n        } else if (0x8456cb59 == function_selector) {\n            pause();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xe45499c1 == function_selector) {\n            updatePriceOfToken(uint256);\n        } else if (0xea8d103f == function_selector) {\n            transferFundToAccount(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf5074f41 == function_selector) {\n            destroyAndSend(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 01:23 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _priceOfToken; // STORAGE[0x1]\nuint256 stor_3; // STORAGE[0x3]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress stor_2_0_19; // STORAGE[0x2] bytes 0 to 19\nuint8 _paused; // STORAGE[0x0] bytes 20 to 20\n\n// Events\nUnpause();\nPause();\nOwnershipTransferred(address, address);\n\nfunction priceOfToken() public nonPayable { \n    return _priceOfToken;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction unpause() public nonPayable { \n    require(msg.sender == _owner);\n    require(_paused);\n    _paused = 0;\n    emit Unpause();\n}\n\nfunction transferLimitedFundToAccount(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    require(stor_3 > varg1);\n    v0 = varg0.call().value(varg1).gas(!varg1 * 2300);\n    require(v0);\n    assert(varg1 <= stor_3);\n    stor_3 = stor_3 - varg1;\n}\n\nfunction paused() public nonPayable { \n    return _paused;\n}\n\nfunction updateTokenAddress(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    stor_2_0_19 = varg0;\n}\n\nfunction destroy() public nonPayable { \n    require(msg.sender == _owner);\n    selfdestruct(_owner);\n}\n\nfunction pause() public nonPayable { \n    require(msg.sender == _owner);\n    require(!_paused);\n    _paused = 1;\n    emit Pause();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction updatePriceOfToken(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _priceOfToken = varg0;\n}\n\nfunction transferFundToAccount(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(stor_3 > 0);\n    v0 = varg0.call().value(stor_3).gas(!stor_3 * 2300);\n    require(v0);\n    stor_3 = 0;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction destroyAndSend(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    selfdestruct(varg0);\n}\n\nfunction fallback() public payable { \n    require(!_paused);\n    require(msg.value > 0);\n    assert(_priceOfToken);\n    require(stor_2_0_19.code.size);\n    v0, v1 = stor_2_0_19.transfer(msg.sender, msg.value * 0xde0b6b3a7640000 / _priceOfToken).gas(msg.gas);\n    require(v0);\n    stor_3 = stor_3 + msg.value;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x1b9cbdfb == function_selector) {\n            priceOfToken();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3f4ba83a == function_selector) {\n            unpause();\n        } else if (0x42498389 == function_selector) {\n            transferLimitedFundToAccount(address,uint256);\n        } else if (0x5c975abb == function_selector) {\n            paused();\n        } else if (0x6691461a == function_selector) {\n            updateTokenAddress(address);\n        } else if (0x83197ef0 == function_selector) {\n            destroy();\n        } else if (0x8456cb59 == function_selector) {\n            pause();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xe45499c1 == function_selector) {\n            updatePriceOfToken(uint256);\n        } else if (0xea8d103f == function_selector) {\n            transferFundToAccount(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf5074f41 == function_selector) {\n            destroyAndSend(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 38.16623282432556,
	"usage": {
		"completion_tokens": 736,
		"prompt_tokens": 1121,
		"total_tokens": 1857
	}
}