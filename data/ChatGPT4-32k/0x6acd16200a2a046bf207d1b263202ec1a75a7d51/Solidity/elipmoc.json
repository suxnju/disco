{
	"address": "0x6acd16200a2a046bf207d1b263202ec1a75a7d51",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code based on your decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    mapping (uint256 => uint256) private _totals;\n    address private _contractOwner;\n    address private _lastAddress;\n\n    function getTotalHeartsByDappId(uint256 varg0) public view returns (uint256) { \n        return _totals[varg0];\n    }\n\n    function update(uint256 varg0) public payable { \n        require(msg.value > 0x6c00a3912c000);\n        _totals[varg0] += msg.value;\n\n        (bool success,) = _lastAddress.call{value: msg.value >> 1}(\"\");\n        require(success);\n        _lastAddress = msg.sender;\n    }\n\n    function lastAddress() public view returns (address) { \n        return _lastAddress;\n    }\n\n    function contractOwner() public view returns (address) { \n        return _contractOwner;\n    }\n\n    receive() external payable { \n        revert();\n    }\n\n    function getBalance() public view returns (uint256) { \n        return address(this).balance;\n    }\n\n    function totals(uint256 varg0) public view returns (uint256) { \n        return _totals[varg0];\n    }\n\n    function withdraw() public { \n        require(msg.sender == _contractOwner);\n        (bool success,) = _contractOwner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n}\n```\n\nPlease note that the `__function_selector__` function is not included in the Solidity code since this is a low-level operation typically managed by the EVM, and not something you'd specify in a Solidity contract. Also, the `fallback()` function in Solidity 0.6.0 and above has been split into a `receive() external payable` function (for empty calldata) and a `fallback() external payable` function (for non-empty calldata). Here, since your `fallback()` function is non-payable and simply reverts, I've interpreted this as a `receive()` function that reverts.",
				"role": "assistant"
			}
		}
	],
	"created": 1701460102,
	"id": "chatcmpl-8R3moQivo6HHbIpgicLhPgns24tXF",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 16:15 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _totals; // STORAGE[0x2]\naddress _contractOwner; // STORAGE[0x0] bytes 0 to 19\naddress _lastAddress; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction getTotalHeartsByDappId(uint256 varg0) public nonPayable { \n    return _totals[varg0];\n}\n\nfunction update(uint256 varg0) public payable { \n    require(msg.value > 0x6c00a3912c000);\n    _totals[varg0] = _totals[varg0] + msg.value;\n    assert(2);\n    v0 = _lastAddress.call().value(msg.value >> 1).gas(!(msg.value >> 1) * 2300);\n    require(v0); // checks call status, propagates error data on error\n    _lastAddress = msg.sender;\n}\n\nfunction lastAddress() public nonPayable { \n    return _lastAddress;\n}\n\nfunction contractOwner() public nonPayable { \n    return _contractOwner;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction getBalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction totals(uint256 varg0) public nonPayable { \n    return _totals[varg0];\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _contractOwner);\n    v0 = _contractOwner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x12065fe0 == function_selector) {\n            getBalance();\n        } else if (0x1b338710 == function_selector) {\n            totals(uint256);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x72d475db == function_selector) {\n            getTotalHeartsByDappId(uint256);\n        } else if (0x82ab890a == function_selector) {\n            update(uint256);\n        } else if (0xcd68100c == function_selector) {\n            lastAddress();\n        } else if (0xce606ee0 == function_selector) {\n            contractOwner();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 16:15 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _totals; // STORAGE[0x2]\naddress _contractOwner; // STORAGE[0x0] bytes 0 to 19\naddress _lastAddress; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction getTotalHeartsByDappId(uint256 varg0) public nonPayable { \n    return _totals[varg0];\n}\n\nfunction update(uint256 varg0) public payable { \n    require(msg.value > 0x6c00a3912c000);\n    _totals[varg0] = _totals[varg0] + msg.value;\n    assert(2);\n    v0 = _lastAddress.call().value(msg.value >> 1).gas(!(msg.value >> 1) * 2300);\n    require(v0); // checks call status, propagates error data on error\n    _lastAddress = msg.sender;\n}\n\nfunction lastAddress() public nonPayable { \n    return _lastAddress;\n}\n\nfunction contractOwner() public nonPayable { \n    return _contractOwner;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction getBalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction totals(uint256 varg0) public nonPayable { \n    return _totals[varg0];\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _contractOwner);\n    v0 = _contractOwner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x12065fe0 == function_selector) {\n            getBalance();\n        } else if (0x1b338710 == function_selector) {\n            totals(uint256);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x72d475db == function_selector) {\n            getTotalHeartsByDappId(uint256);\n        } else if (0x82ab890a == function_selector) {\n            update(uint256);\n        } else if (0xcd68100c == function_selector) {\n            lastAddress();\n        } else if (0xce606ee0 == function_selector) {\n            contractOwner();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 16:15 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _totals; // STORAGE[0x2]\naddress _contractOwner; // STORAGE[0x0] bytes 0 to 19\naddress _lastAddress; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction getTotalHeartsByDappId(uint256 varg0) public nonPayable { \n    return _totals[varg0];\n}\n\nfunction update(uint256 varg0) public payable { \n    require(msg.value > 0x6c00a3912c000);\n    _totals[varg0] = _totals[varg0] + msg.value;\n    assert(2);\n    v0 = _lastAddress.call().value(msg.value >> 1).gas(!(msg.value >> 1) * 2300);\n    require(v0); // checks call status, propagates error data on error\n    _lastAddress = msg.sender;\n}\n\nfunction lastAddress() public nonPayable { \n    return _lastAddress;\n}\n\nfunction contractOwner() public nonPayable { \n    return _contractOwner;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction getBalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction totals(uint256 varg0) public nonPayable { \n    return _totals[varg0];\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _contractOwner);\n    v0 = _contractOwner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x12065fe0 == function_selector) {\n            getBalance();\n        } else if (0x1b338710 == function_selector) {\n            totals(uint256);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x72d475db == function_selector) {\n            getTotalHeartsByDappId(uint256);\n        } else if (0x82ab890a == function_selector) {\n            update(uint256);\n        } else if (0xcd68100c == function_selector) {\n            lastAddress();\n        } else if (0xce606ee0 == function_selector) {\n            contractOwner();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 26.330981731414795,
	"usage": {
		"completion_tokens": 443,
		"prompt_tokens": 644,
		"total_tokens": 1087
	}
}