{
	"address": "0x47423b0fdb181ecab813c908307e9795c0272db7",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the decompiled code translated into a Solidity contract:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract token {\n\n    uint256 public _totalSupply;\n    mapping (address => uint256) public _balanceOf;\n    mapping (address => mapping (address => uint256)) public _allowance;\n    address public _owner;\n    address public _safetyWallet;\n    bool public _fallback;\n\n    event Issuance(uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Destruction(uint256);\n\n    function fallback() external payable {\n        require(_fallback, \"Fallback not allowed\");\n        _deposit(msg.sender);\n    }\n\n    function name() external pure returns(string memory) {\n        return \"Ether Token\";\n    }\n\n    function approve(address spender, uint256 value) external returns (bool) {\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function withdrawTo(address to, uint256 value) external {\n        _withdraw(value, to);\n    }\n\n    function enabled() external view returns (bool) {\n        return _fallback;\n    }\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\n        require(_allowance[from][msg.sender] >= value, \"Not enough allowance\");\n        require(_balanceOf[from] >= value, \"Not enough balance\");\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        if (_allowance[from][msg.sender] < type(uint256).max) {\n            _allowance[from][msg.sender] -= value;\n        }\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function withdraw(uint256 value) external {\n        _withdraw(value, msg.sender);\n    }\n\n    function decimals() external pure returns(uint8) {\n        return 18;\n    }\n\n    function safetyWallet() external view returns(address) {\n        return _safetyWallet;\n    }\n\n    function decreaseApproval(address spender, uint256 value) external returns (bool) {\n        if (value <= _allowance[msg.sender][spender]) {\n            _allowance[msg.sender][spender] -= value;\n        } else {\n            _allowance[msg.sender][spender] = 0;\n        }\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n        return true;\n    }\n\n    function balanceOf(address account) external view returns (uint256) {\n        return _balanceOf[account];\n    }\n\n    function owner() external view returns(address) {\n        return _owner;\n    }\n\n    function symbol() external pure returns(string memory) {\n        return \"WXETH\";\n    }\n\n    function transfer(address to, uint256 value) external returns (bool) {\n        require(to != address(0), \"Cannot transfer to zero address\");\n        require(_balanceOf[msg.sender] >= value, \"Not enough balance\");\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function moveToSafetyWallet() external {\n        require(msg.sender == _owner, \"Only owner can perform this action\");\n        require(!_fallback, \"Fallback is enabled\");\n        require(_totalSupply > 0, \"No tokens to move\");\n        require(_safetyWallet != address(0), \"No safety wallet defined\");\n        uint256 totalSupplyToMove = _totalSupply;\n        _totalSupply = 0;\n        emit Transfer(_safetyWallet, address(this), totalSupplyToMove);\n        emit Destruction(totalSupplyToMove);\n        (bool success,) = _safetyWallet.call{value: totalSupplyToMove}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    function blockTx(bool block) external {\n        require(msg.sender == _owner, \"Only owner can perform this action\");\n        _fallback = !block;\n    }\n\n    function increaseApproval(address spender, uint256 addedValue) external returns (bool) {\n        _allowance[msg.sender][spender] += addedValue;\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n        return true;\n    }\n\n    function allowance(address owner, address spender) external view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function deposit(address account) external payable {\n        _deposit(account);\n    }\n\n    function _deposit(address account) private {\n        require(_fallback, \"Deposits not allowed\");\n        require(account != address(0), \"Cannot deposit for zero address\");\n        require(msg.value > 0, \"No value to deposit\");\n        _balanceOf[account] += msg.value;\n        _totalSupply += msg.value;\n        emit Issuance(msg.value);\n        emit Transfer(address(this), account, msg.value);\n    }\n\n    function _withdraw(uint256 value, address to) private {\n        require(_fallback, \"Withdrawals not allowed\");\n        require(to != address(0), \"Cannot withdraw to zero address\");\n        require(value > 0, \"No value to withdraw\");\n        require(value <= _balanceOf[msg.sender], \"Not enough balance to withdraw\");\n        _balanceOf[msg.sender] -= value;\n        _totalSupply -= value;\n        emit Transfer(msg.sender, address(this), value);\n        emit Destruction(value);\n        (bool success,) = to.call{value: value}(\"\");\n        require(success, \"Transfer failed\");\n    }\n}\n```\n\nPlease note that the original code had some unspecified functions (0x6d9 and 0x9aa) which have been translated into private helper functions (_deposit and _withdraw). Also, function selector is not applicable in Solidity so it was omitted. The contract also does not specify how to set the _owner and _safetyWallet addresses, these will need to be added depending on your use case.",
				"role": "assistant"
			}
		}
	],
	"created": 1701457514,
	"id": "chatcmpl-8R374L6ywxDYNcF3Dq9GuL47Gw0XK",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.14 06:42 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\naddress _owner; // STORAGE[0x3] bytes 0 to 19\naddress _safetyWallet; // STORAGE[0x4] bytes 0 to 19\nuint8 _fallback; // STORAGE[0x3] bytes 20 to 20\n\n// Events\nIssuance(uint256);\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nDestruction(uint256);\n\nfunction fallback() public payable { \n    require(_fallback);\n    0x6d9(msg.sender);\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (11) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffff & 'Ether Token';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction withdrawTo(address varg0, uint256 varg1) public nonPayable { \n    0x9aa(varg1, varg0);\n}\n\nfunction enabled() public nonPayable { \n    return _fallback;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(_allowance[varg0] >= varg2);\n    require(_allowance[msg.sender] >= varg2);\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    require(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    if (_allowance[msg.sender] < 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n        assert(varg2 <= _allowance[msg.sender]);\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    }\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_fallback);\n    0x9aa(varg0, msg.sender);\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction safetyWallet() public nonPayable { \n    return _safetyWallet;\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'WXETH';\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction moveToSafetyWallet() public nonPayable { \n    require(msg.sender == _owner);\n    require(!_fallback);\n    require(_totalSupply > 0);\n    require(_safetyWallet != 0);\n    assert(_totalSupply <= _totalSupply);\n    _totalSupply = _totalSupply - _totalSupply;\n    emit Transfer(_safetyWallet, address(this), _totalSupply);\n    emit Destruction(_totalSupply);\n    v0 = _safetyWallet.call().value(_totalSupply).gas(!_totalSupply * 2300);\n    require(v0);\n}\n\nfunction blockTx(bool varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _fallback = !varg0;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction deposit(address varg0) public payable { \n    0x6d9(varg0);\n}\n\nfunction 0x6d9(uint256 varg0) private { \n    require(_fallback);\n    require(address(varg0) != 0);\n    require(msg.value != 0);\n    v0 = address(varg0);\n    assert(_balanceOf[v0] + msg.value >= _balanceOf[v0]);\n    v1 = address(varg0);\n    _balanceOf[v1] = _balanceOf[v0] + msg.value;\n    assert(_totalSupply + msg.value >= _totalSupply);\n    _totalSupply = _totalSupply + msg.value;\n    emit Issuance(msg.value);\n    emit Transfer(address(this), address(varg0), msg.value);\n    return ;\n}\n\nfunction 0x9aa(uint256 varg0, uint256 varg1) private { \n    require(_fallback);\n    require(address(varg1) != 0);\n    require(varg0 != 0);\n    v0 = address(varg1);\n    require(varg0 <= _balanceOf[v0]);\n    require(address(this) != address(varg1));\n    v1 = address(varg1);\n    assert(varg0 <= _balanceOf[v1]);\n    v2 = address(varg1);\n    _balanceOf[v2] = _balanceOf[v1] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit Transfer(msg.sender, address(this), varg0);\n    emit Destruction(varg0);\n    v3 = address(varg1).call().value(varg0).gas(!varg0 * 2300);\n    require(v3);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x205c2878 == function_selector) {\n            withdrawTo(address,uint256);\n        } else if (0x238dafe0 == function_selector) {\n            enabled();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x607b9f97 == function_selector) {\n            safetyWallet();\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb9b1c90c == function_selector) {\n            moveToSafetyWallet();\n        } else if (0xbcb60fa9 == function_selector) {\n            blockTx(bool);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.14 06:42 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\naddress _owner; // STORAGE[0x3] bytes 0 to 19\naddress _safetyWallet; // STORAGE[0x4] bytes 0 to 19\nuint8 _fallback; // STORAGE[0x3] bytes 20 to 20\n\n// Events\nIssuance(uint256);\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nDestruction(uint256);\n\nfunction fallback() public payable { \n    require(_fallback);\n    0x6d9(msg.sender);\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (11) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffff & 'Ether Token';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction withdrawTo(address varg0, uint256 varg1) public nonPayable { \n    0x9aa(varg1, varg0);\n}\n\nfunction enabled() public nonPayable { \n    return _fallback;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(_allowance[varg0] >= varg2);\n    require(_allowance[msg.sender] >= varg2);\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    require(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    if (_allowance[msg.sender] < 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n        assert(varg2 <= _allowance[msg.sender]);\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    }\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_fallback);\n    0x9aa(varg0, msg.sender);\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction safetyWallet() public nonPayable { \n    return _safetyWallet;\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'WXETH';\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction moveToSafetyWallet() public nonPayable { \n    require(msg.sender == _owner);\n    require(!_fallback);\n    require(_totalSupply > 0);\n    require(_safetyWallet != 0);\n    assert(_totalSupply <= _totalSupply);\n    _totalSupply = _totalSupply - _totalSupply;\n    emit Transfer(_safetyWallet, address(this), _totalSupply);\n    emit Destruction(_totalSupply);\n    v0 = _safetyWallet.call().value(_totalSupply).gas(!_totalSupply * 2300);\n    require(v0);\n}\n\nfunction blockTx(bool varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _fallback = !varg0;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction deposit(address varg0) public payable { \n    0x6d9(varg0);\n}\n\nfunction 0x6d9(uint256 varg0) private { \n    require(_fallback);\n    require(address(varg0) != 0);\n    require(msg.value != 0);\n    v0 = address(varg0);\n    assert(_balanceOf[v0] + msg.value >= _balanceOf[v0]);\n    v1 = address(varg0);\n    _balanceOf[v1] = _balanceOf[v0] + msg.value;\n    assert(_totalSupply + msg.value >= _totalSupply);\n    _totalSupply = _totalSupply + msg.value;\n    emit Issuance(msg.value);\n    emit Transfer(address(this), address(varg0), msg.value);\n    return ;\n}\n\nfunction 0x9aa(uint256 varg0, uint256 varg1) private { \n    require(_fallback);\n    require(address(varg1) != 0);\n    require(varg0 != 0);\n    v0 = address(varg1);\n    require(varg0 <= _balanceOf[v0]);\n    require(address(this) != address(varg1));\n    v1 = address(varg1);\n    assert(varg0 <= _balanceOf[v1]);\n    v2 = address(varg1);\n    _balanceOf[v2] = _balanceOf[v1] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit Transfer(msg.sender, address(this), varg0);\n    emit Destruction(varg0);\n    v3 = address(varg1).call().value(varg0).gas(!varg0 * 2300);\n    require(v3);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x205c2878 == function_selector) {\n            withdrawTo(address,uint256);\n        } else if (0x238dafe0 == function_selector) {\n            enabled();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x607b9f97 == function_selector) {\n            safetyWallet();\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb9b1c90c == function_selector) {\n            moveToSafetyWallet();\n        } else if (0xbcb60fa9 == function_selector) {\n            blockTx(bool);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.14 06:42 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\naddress _owner; // STORAGE[0x3] bytes 0 to 19\naddress _safetyWallet; // STORAGE[0x4] bytes 0 to 19\nuint8 _fallback; // STORAGE[0x3] bytes 20 to 20\n\n// Events\nIssuance(uint256);\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nDestruction(uint256);\n\nfunction fallback() public payable { \n    require(_fallback);\n    0x6d9(msg.sender);\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (11) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffff & 'Ether Token';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction withdrawTo(address varg0, uint256 varg1) public nonPayable { \n    0x9aa(varg1, varg0);\n}\n\nfunction enabled() public nonPayable { \n    return _fallback;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(_allowance[varg0] >= varg2);\n    require(_allowance[msg.sender] >= varg2);\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    require(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    if (_allowance[msg.sender] < 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n        assert(varg2 <= _allowance[msg.sender]);\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    }\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_fallback);\n    0x9aa(varg0, msg.sender);\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction safetyWallet() public nonPayable { \n    return _safetyWallet;\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'WXETH';\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction moveToSafetyWallet() public nonPayable { \n    require(msg.sender == _owner);\n    require(!_fallback);\n    require(_totalSupply > 0);\n    require(_safetyWallet != 0);\n    assert(_totalSupply <= _totalSupply);\n    _totalSupply = _totalSupply - _totalSupply;\n    emit Transfer(_safetyWallet, address(this), _totalSupply);\n    emit Destruction(_totalSupply);\n    v0 = _safetyWallet.call().value(_totalSupply).gas(!_totalSupply * 2300);\n    require(v0);\n}\n\nfunction blockTx(bool varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _fallback = !varg0;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction deposit(address varg0) public payable { \n    0x6d9(varg0);\n}\n\nfunction 0x6d9(uint256 varg0) private { \n    require(_fallback);\n    require(address(varg0) != 0);\n    require(msg.value != 0);\n    v0 = address(varg0);\n    assert(_balanceOf[v0] + msg.value >= _balanceOf[v0]);\n    v1 = address(varg0);\n    _balanceOf[v1] = _balanceOf[v0] + msg.value;\n    assert(_totalSupply + msg.value >= _totalSupply);\n    _totalSupply = _totalSupply + msg.value;\n    emit Issuance(msg.value);\n    emit Transfer(address(this), address(varg0), msg.value);\n    return ;\n}\n\nfunction 0x9aa(uint256 varg0, uint256 varg1) private { \n    require(_fallback);\n    require(address(varg1) != 0);\n    require(varg0 != 0);\n    v0 = address(varg1);\n    require(varg0 <= _balanceOf[v0]);\n    require(address(this) != address(varg1));\n    v1 = address(varg1);\n    assert(varg0 <= _balanceOf[v1]);\n    v2 = address(varg1);\n    _balanceOf[v2] = _balanceOf[v1] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit Transfer(msg.sender, address(this), varg0);\n    emit Destruction(varg0);\n    v3 = address(varg1).call().value(varg0).gas(!varg0 * 2300);\n    require(v3);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x205c2878 == function_selector) {\n            withdrawTo(address,uint256);\n        } else if (0x238dafe0 == function_selector) {\n            enabled();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x607b9f97 == function_selector) {\n            safetyWallet();\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb9b1c90c == function_selector) {\n            moveToSafetyWallet();\n        } else if (0xbcb60fa9 == function_selector) {\n            blockTx(bool);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 113.50135350227356,
	"usage": {
		"completion_tokens": 1256,
		"prompt_tokens": 2281,
		"total_tokens": 3537
	}
}