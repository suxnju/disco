{
	"address": "0xe9c2851dadbb1bb34bceb54473a0e428a50d8845",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sorry, but the provided code is not proper Solidity code. It seems to be a pseudocode generated from a decompiler and it's not possible to reproduce the exact Solidity code from this. However, I can provide an example of how a typical solidity contract looks like:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    mapping(address => uint256) private balances;\n    uint256 private totalSupply;\n    address private owner;\n\n    constructor(uint256 initialSupply) {\n        totalSupply = initialSupply;\n        balances[msg.sender] = totalSupply;\n        owner = msg.sender;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public {\n        require(balances[msg.sender] >= amount, \"Insufficient balance.\");\n        balances[msg.sender] -= amount;\n        balances[recipient] += amount;\n    }\n\n    function mint(uint256 amount) public {\n        require(msg.sender == owner, \"Only contract owner can mint.\");\n        totalSupply += amount;\n        balances[owner] += amount;\n    }\n\n    function getTotalSupply() public view returns (uint256) {\n        return totalSupply;\n    }\n}\n```\nThis contract has a `balances` mapping to keep track of the token balance for each address, a `totalSupply` to track the total number of tokens, and an `owner` to keep track of who deployed the contract. It has functions to check balance of an account (`balanceOf`), transfer tokens from sender to recipient (`transfer`), mint new tokens (`mint`), and get the total supply of tokens (`getTotalSupply`).",
				"role": "assistant"
			}
		}
	],
	"created": 1702473440,
	"id": "chatcmpl-8VJOyDbW5aASb1GZ5qilhB4KSSBnc",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.23 04:18 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _fwithdrawal; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 _getprice; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _setinfo; // STORAGE[0xc]\nmapping (uint256 => [uint256]) owner_d; // STORAGE[0xd]\nmapping (uint256 => [uint256]) _getinfo; // STORAGE[0xe]\nmapping (uint256 => [uint256]) owner_f; // STORAGE[0xf]\nmapping (uint256 => [uint256]) _iwithdrawal; // STORAGE[0x10]\nmapping (uint256 => [uint256]) owner_11; // STORAGE[0x11]\nmapping (uint256 => [uint256]) _gettimeback; // STORAGE[0x12]\nmapping (uint256 => [uint256]) _aDeposit; // STORAGE[0x13]\nmapping (uint256 => [uint256]) _referral; // STORAGE[0x14]\nmapping (uint256 => [uint256]) _total; // STORAGE[0x15]\nmapping (uint256 => [uint256]) owner_16; // STORAGE[0x16]\nmapping (uint256 => [uint256]) owner_17; // STORAGE[0x17]\nmapping (uint256 => [uint256]) owner_18; // STORAGE[0x18]\nuint8 _initialized; // STORAGE[0x3] bytes 0 to 0\nuint160 _owner; // STORAGE[0x3] bytes 1 to 20\naddress _sendabr; // STORAGE[0x4] bytes 0 to 19\naddress _setcoe; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction 0x157f(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 / varg1;\n    assert(v0 <= _balanceOf[this]);\n    return _balanceOf[this] - v0;\n}\n\nfunction 0x18ff(uint256 varg0, uint256 varg1) private { \n    require(address(varg1));\n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = address(varg1);\n    v1 = varg0 + _balanceOf[v0];\n    assert(v1 >= _balanceOf[v0]);\n    v2 = address(varg1);\n    _balanceOf[v2] = v1;\n    emit Transfer(msg.sender, v2, varg0);\n    return 1;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x4162726900000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction 0x1e62(uint256 varg0) private { \n    v0 = v1 = 0;\n    v2 = v3 = varg0 >= 0x3b9aca00;\n    if (v3) {\n        v2 = v4 = varg0 <= 0x174876e800;\n    }\n    if (!v2) {\n        v5 = v6 = varg0 >= 0x174e6cc900;\n        if (v6) {\n            v5 = v7 = varg0 <= 0x746a528800;\n        }\n        if (!v5) {\n            v8 = v9 = varg0 >= 0x7470486900;\n            if (v9) {\n                v8 = v10 = varg0 <= 0xe8d4a51000;\n            }\n            if (!v8) {\n                v11 = v12 = varg0 >= 0xe8da9af100;\n                if (v12) {\n                    v11 = v13 = varg0 <= 0x48c27395000;\n                }\n                if (!v11) {\n                    v14 = v15 = varg0 >= 0x48c2d2f3100;\n                    if (v15) {\n                        v14 = v16 = varg0 <= 0x9184e72a000;\n                    }\n                    if (v14) {\n                        v0 = v17 = 120;\n                    }\n                } else {\n                    v0 = v18 = 150;\n                }\n            } else {\n                v0 = v19 = 180;\n            }\n        } else {\n            v0 = v20 = 210;\n        }\n    } else {\n        v0 = v21 = 240;\n    }\n    return v0;\n}\n\nfunction 0x1f48(uint256 varg0) private { \n    v0 = v1 = 0;\n    v2 = v3 = varg0 >= 0x3b9aca00;\n    if (v3) {\n        v2 = v4 = varg0 <= 0x174876e800;\n    }\n    if (!v2) {\n        v5 = v6 = varg0 >= 0x174e6cc900;\n        if (v6) {\n            v5 = v7 = varg0 <= 0x746a528800;\n        }\n        if (!v5) {\n            v8 = v9 = varg0 >= 0x7470486900;\n            if (v9) {\n                v8 = v10 = varg0 <= 0xe8d4a51000;\n            }\n            if (!v8) {\n                v11 = v12 = varg0 >= 0xe8da9af100;\n                if (v12) {\n                    v11 = v13 = varg0 <= 0x48c27395000;\n                }\n                if (!v11) {\n                    v14 = v15 = varg0 >= 0x48c2d2f3100;\n                    if (v15) {\n                        v14 = v16 = varg0 <= 0x9184e72a000;\n                    }\n                    if (v14) {\n                        v0 = v17 = 30;\n                    }\n                } else {\n                    v0 = v18 = 25;\n                }\n            } else {\n                v0 = v19 = 20;\n            }\n        } else {\n            v0 = v20 = 12;\n        }\n    } else {\n        v0 = v21 = 5;\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction getprice() public nonPayable { \n    return _getprice;\n}\n\nfunction support() public nonPayable { \n    v0 = new bytes[](v1);\n    v1 = (_referral[address(_referral[msg.sender])] & ~0 + (!(_referral[address(_referral[msg.sender])] & 0x1) << 8)) >> 1;\n    v2 = v3 = v0.data;\n    if (v1) {\n        if (31 < v1) {\n            do {\n                MEM[v2] = STORAGE[v4];\n                v4 += 1;\n                v2 += 32;\n            } while (v3 + v1 <= v2);\n        } else {\n            MEM[v3] = _referral[address(_referral[msg.sender])] >> 8 << 8;\n        }\n    }\n    v5 = new bytes[](v6);\n    v6 = (_referral[address(_referral[msg.sender])] & ~0 + (!(_referral[address(_referral[msg.sender])] & 0x1) << 8)) >> 1;\n    v7 = v8 = v5.data;\n    if (v6) {\n        if (31 < v6) {\n            do {\n                MEM[v7] = STORAGE[v9];\n                v9 += 1;\n                v7 += 32;\n            } while (v8 + v6 <= v7);\n        } else {\n            MEM[v8] = _referral[address(_referral[msg.sender])] >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](v11);\n    v11 = (_getinfo[address(_referral[msg.sender])] & ~0 + (!(_getinfo[address(_referral[msg.sender])] & 0x1) << 8)) >> 1;\n    v12 = v13 = v10.data;\n    if (v11) {\n        if (31 < v11) {\n            do {\n                MEM[v12] = STORAGE[v14];\n                v14 += 1;\n                v12 += 32;\n            } while (v13 + v11 <= v12);\n        } else {\n            MEM[v13] = _getinfo[address(_referral[msg.sender])] >> 8 << 8;\n        }\n    }\n    v15 = new array[](v0.length);\n    v16 = v17 = 0;\n    while (v16 < v0.length) {\n        MEM[v16 + v15.data] = MEM[v16 + v0.data];\n        v16 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v15.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v15.data - (0x1f & v0.length)];\n    }\n    v18 = new array[](v5.length);\n    v19 = v20 = 0;\n    while (v19 < v5.length) {\n        MEM[v19 + v18.data] = MEM[v19 + v5.data];\n        v19 += 32;\n    }\n    if (0x1f & v5.length) {\n        MEM[v5.length + v18.data - (0x1f & v5.length)] = ~(256 ** (32 - (0x1f & v5.length)) - 1) & MEM[v5.length + v18.data - (0x1f & v5.length)];\n    }\n    v21 = new array[](v10.length);\n    v22 = v23 = 0;\n    while (v22 < v10.length) {\n        MEM[v22 + v21.data] = MEM[v22 + v10.data];\n        v22 += 32;\n    }\n    v24 = v25 = v10.length + v21.data;\n    if (0x1f & v10.length) {\n        MEM[v25 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v25 - (0x1f & v10.length)];\n    }\n    return v15, v18, v21;\n}\n\nfunction initialized() public nonPayable { \n    return _initialized;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction TOKEN_NAME() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x4162726900000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction getinfo() public nonPayable { \n    v0 = new bytes[](v1);\n    v1 = (_getinfo[msg.sender] & (!(_getinfo[msg.sender] & 0x1) << 8) + ~0) >> 1;\n    v2 = v3 = v0.data;\n    if (v1) {\n        if (31 < v1) {\n            do {\n                MEM[v2] = STORAGE[v4];\n                v4 += 1;\n                v2 += 32;\n            } while (v3 + v1 <= v2);\n        }\n    }\n    v5 = new array[](v0.length);\n    if (0 < v0.length) {\n        v6 = v0.data;\n        MEM[v5.data] = _getinfo[msg.sender] >> 8 << 8;\n        v7 = v8 = 32;\n        while (v7 < v0.length) {\n            MEM[v7 + v5.data] = MEM[v7 + v0.data];\n            v7 += 32;\n        }\n    }\n    v9 = v10 = v0.length + v5.data;\n    if (0x1f & v0.length) {\n        MEM[v10 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v10 - (0x1f & v0.length)];\n    }\n    return v5, _aDeposit[msg.sender], owner_f[msg.sender], owner_11[msg.sender], _iwithdrawal[msg.sender];\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction fwithdrawal(uint256 varg0) public nonPayable { \n    v0 = 0x1e62(owner_f[msg.sender]);\n    require(v0 == _gettimeback[msg.sender]);\n    if (owner_f[msg.sender] / 100 * stor_9 >= varg0 * _fwithdrawal) {\n        owner_f[msg.sender] = owner_f[msg.sender] - varg0 * _fwithdrawal;\n        assert(varg0 <= owner_f[this]);\n        _balanceOf[this] = owner_f[this] - varg0;\n        assert(varg0 + _balanceOf[this] >= _balanceOf[this]);\n        _balanceOf[msg.sender] = varg0 + _balanceOf[this];\n    }\n}\n\nfunction TOKEN_SYMBOL() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4142520000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction total() public nonPayable { \n    return _total[msg.sender], owner_17[msg.sender];\n}\n\nfunction decimals() public nonPayable { \n    return 4;\n}\n\nfunction setdaily(uint256 varg0) public nonPayable { \n    require(msg.sender == _setcoe, 32, 0);\n    stor_b += 1;\n    stor_a = varg0;\n}\n\nfunction claim() public nonPayable { \n    if (stor_b - _aDeposit[msg.sender] != _gettimeback[msg.sender] + 1) {\n        if (stor_b - _aDeposit[msg.sender] > _gettimeback[msg.sender] + 1) {\n            _aDeposit[msg.sender] = stor_b - _aDeposit[msg.sender];\n        }\n    } else {\n        _gettimeback[msg.sender] += 1;\n        v0 = 0x1f48(owner_f[msg.sender]);\n        owner_11[msg.sender] = owner_f[msg.sender] / 10000 * (v0 + stor_a);\n        assert(_fwithdrawal);\n        _iwithdrawal[msg.sender] += owner_f[msg.sender] / 10000 * (v0 + stor_a) / _fwithdrawal;\n    }\n    v1 = new array[](MEM[96]);\n    v2 = v3 = 0;\n    while (v2 < MEM[96]) {\n        MEM[v2 + v1.data] = MEM[v2 + 128];\n        v2 += 32;\n    }\n    v4 = v5 = MEM[96] + v1.data;\n    if (0x1f & MEM[96]) {\n        MEM[v5 - (0x1f & MEM[96])] = ~(256 ** (32 - (0x1f & MEM[96])) - 1) & MEM[v5 - (0x1f & MEM[96])];\n    }\n    return v1;\n}\n\nfunction iwithdrawal(uint256 varg0) public nonPayable { \n    if (varg0 < _iwithdrawal[msg.sender]) {\n        _iwithdrawal[msg.sender] = _iwithdrawal[msg.sender] - varg0;\n        assert(varg0 <= _iwithdrawal[this]);\n        _balanceOf[this] = _iwithdrawal[this] - varg0;\n        assert(varg0 + _balanceOf[this] >= _balanceOf[this]);\n        _balanceOf[msg.sender] = varg0 + _balanceOf[this];\n    }\n}\n\nfunction TOKEN_DECIMAL_MULTIPLIER() public nonPayable { \n    return 10000;\n}\n\nfunction setinfo(string varg0, string varg1, string varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    v2 = new bytes[]((?).length);\n    CALLDATACOPY(v2.data, 36 + varg1, (?).length);\n    v3 = new bytes[]((?).length);\n    CALLDATACOPY(v3.data, 36 + varg2, (?).length);\n    v4 = v5 = v0.data;\n    if (31 < v0.length) {\n        _setinfo[msg.sender] = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v5 + v0.length > v4) {\n                STORAGE[v6] = MEM[v4];\n                v4 += 32;\n                v6 += 1;\n            }\n        }\n    } else {\n        _setinfo[msg.sender] = v0.length + v0.length | ~0xff & MEM[v5];\n    }\n    while (v7 + (31 + (((!(0x1 & _setinfo[msg.sender]) << 8) - 1 & _setinfo[msg.sender]) >> 1) >> 5) > v6) {\n        STORAGE[v6] = 0;\n        v6 += 1;\n    }\n    v8 = v9 = v2.data;\n    if (31 < v2.length) {\n        owner_d[msg.sender] = 1 + (v2.length + v2.length);\n        if (v2.length) {\n            while (v9 + v2.length > v8) {\n                STORAGE[v10] = MEM[v8];\n                v8 += 32;\n                v10 += 1;\n            }\n        }\n    } else {\n        owner_d[msg.sender] = v2.length + v2.length | ~0xff & MEM[v9];\n    }\n    while (v11 + (31 + (((!(0x1 & owner_d[msg.sender]) << 8) - 1 & owner_d[msg.sender]) >> 1) >> 5) > v10) {\n        STORAGE[v10] = 0;\n        v10 += 1;\n    }\n    v12 = v13 = v3.data;\n    if (31 < v3.length) {\n        _getinfo[msg.sender] = 1 + (v3.length + v3.length);\n        if (v3.length) {\n            while (v13 + v3.length > v12) {\n                STORAGE[v14] = MEM[v12];\n                v12 += 32;\n                v14 += 1;\n            }\n        }\n    } else {\n        _getinfo[msg.sender] = v3.length + v3.length | ~0xff & MEM[v13];\n    }\n    while (v15 + (31 + (((!(0x1 & _getinfo[msg.sender]) << 8) - 1 & _getinfo[msg.sender]) >> 1) >> 5) > v14) {\n        STORAGE[v14] = 0;\n        v14 += 1;\n    }\n}\n\nfunction TOKEN_DECIMALS() public nonPayable { \n    return 4;\n}\n\nfunction setcoe(uint256 varg0) public nonPayable { \n    require(msg.sender == _setcoe, 32, 0);\n    stor_9 = varg0;\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction Withdrawal() public nonPayable { \n    require(msg.sender == _setcoe, 32, 0);\n    v0 = _setcoe.call().value(this.balance + ~0xde0b6b3a763ffff).gas(2300 * !(this.balance + ~0xde0b6b3a763ffff));\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction referral(address varg0) public nonPayable { \n    if (!(0xff & owner_16[msg.sender])) {\n        _referral[msg.sender] = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _referral[msg.sender];\n        _referral[varg0] += 1;\n        owner_18[varg0] += 1;\n        STORAGE[keccak256(keccak256(varg0, 24)) + owner_18[varg0]] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[keccak256(keccak256(varg0, 24)) + owner_18[varg0]];\n        owner_16[keccak256(varg0, 24)] = 0x1 | ~0xff & owner_16[keccak256(varg0, 24)];\n        goto 0x5080x72e;\n    }\n}\n\nfunction setprice(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _setcoe, 32, 0);\n    _getprice = varg1;\n    stor_7 = varg0;\n    assert(varg1);\n    _fwithdrawal = varg0 / varg1;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction swap(uint256 varg0) public payable { \n    assert(varg0 * _getprice <= _balanceOf[_owner]);\n    _balanceOf[_owner] = _balanceOf[_owner] - varg0 * _getprice;\n    assert(varg0 * _getprice + _balanceOf[msg.sender] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] += varg0 * _getprice;\n}\n\nfunction aDeposit(uint256 varg0) public nonPayable { \n    if (0xff & owner_16[msg.sender]) {\n        if (!_aDeposit[msg.sender]) {\n            _aDeposit[msg.sender] = stor_b;\n        }\n        owner_f[msg.sender] = owner_f[msg.sender] + varg0 * _fwithdrawal;\n        owner_f[address(owner_f[msg.sender])] += owner_f[msg.sender] + varg0 * _fwithdrawal;\n        v0 = 0x1f48(owner_f[msg.sender]);\n        v1 = 0x1f48(owner_f[msg.sender]);\n        if (v0 - v1) {\n            v2 = v3 = 1;\n            goto 0xab60x2024B0x151fB0x7b2;\n        } else {\n            v2 = v4 = 0;\n        }\n        if (v2) {\n            _aDeposit[msg.sender] = stor_b;\n            _aDeposit[msg.sender] = 0;\n        }\n        v5 = 0x18ff(varg0, this);\n        if (owner_f[msg.sender]) {\n            v6 = 0x157f(varg0, 20);\n            _balanceOf[this] = v6;\n            assert(varg0 + _balanceOf[address(_referral[msg.sender])] >= _balanceOf[address(_referral[msg.sender])]);\n            _balanceOf[address(_referral[msg.sender])] += varg0;\n        } else {\n            assert(varg0 <= _balanceOf[this]);\n            _balanceOf[this] = _balanceOf[this] - varg0;\n            assert(varg0 + _balanceOf[address(_referral[msg.sender])] >= _balanceOf[address(_referral[msg.sender])]);\n            _balanceOf[address(_referral[msg.sender])] += varg0;\n            v7 = 0x157f(varg0 * 3, 100);\n            _balanceOf[this] = v7;\n            assert(varg0 * 3 / 100 + _balanceOf[address(_referral[address(address(_referral[msg.sender]))])] >= _balanceOf[address(_referral[address(address(_referral[msg.sender]))])]);\n            v8 = address(_referral[address(address(_referral[msg.sender]))]);\n            _balanceOf[v8] = varg0 * 3 / 100 + _balanceOf[address(_referral[address(address(_referral[msg.sender]))])];\n            if (1 < _referral[address(_referral[v8])]) {\n                v9 = 0x157f(varg0, 50);\n                _balanceOf[this] = v9;\n                assert(varg0 + _balanceOf[address(_referral[v8])] >= _balanceOf[address(_referral[v8])]);\n                _balanceOf[address(_referral[v8])] += varg0;\n            }\n            v10 = address(_referral[address(address(_referral[v8]))]);\n            if (2 < _referral[v10]) {\n                v11 = 0x157f(varg0, 100);\n                _balanceOf[this] = v11;\n                assert(varg0 + _balanceOf[address(v10)] >= _balanceOf[address(v10)]);\n                _balanceOf[address(v10)] += varg0;\n            }\n            if (3 < _referral[address(_referral[address(v10)])]) {\n                v12 = 0x157f(varg0, 200);\n                _balanceOf[this] = v12;\n                assert(varg0 + _balanceOf[address(_referral[address(v10)])] >= _balanceOf[address(_referral[address(v10)])]);\n                _balanceOf[address(_referral[address(v10)])] += varg0;\n            }\n            v13 = address(_referral[address(address(_referral[address(v10)]))]);\n            if (4 < _referral[v13]) {\n                v14 = 0x157f(varg0, 200);\n                _balanceOf[this] = v14;\n                assert(varg0 + _balanceOf[address(v13)] >= _balanceOf[address(v13)]);\n                _balanceOf[address(v13)] += varg0;\n            }\n        }\n    }\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4142520000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0x18ff(varg1, varg0);\n    return v0;\n}\n\nfunction SUPPLY() public nonPayable { \n    return 0xbebc200;\n}\n\nfunction care(uint256 varg0) public nonPayable { \n    assert(varg0 < owner_18[msg.sender]);\n    v0 = address(STORAGE[keccak256(keccak256(msg.sender, 24)) + varg0]);\n    v1 = new bytes[](v2);\n    v2 = (_setinfo[v0] & ~0 + (!(_setinfo[v0] & 0x1) << 8)) >> 1;\n    v3 = v4 = v1.data;\n    if (v2) {\n        if (31 < v2) {\n            do {\n                MEM[v3] = STORAGE[v5];\n                v5 += 1;\n                v3 += 32;\n            } while (v4 + v2 <= v3);\n        } else {\n            MEM[v4] = _setinfo[v0] >> 8 << 8;\n        }\n    }\n    v6 = new bytes[](v7);\n    v7 = (_setinfo[v0] & ~0 + (!(_setinfo[v0] & 0x1) << 8)) >> 1;\n    v8 = v9 = v6.data;\n    if (v7) {\n        if (31 < v7) {\n            do {\n                MEM[v8] = STORAGE[v10];\n                v10 += 1;\n                v8 += 32;\n            } while (v9 + v7 <= v8);\n        } else {\n            MEM[v9] = _setinfo[v0] >> 8 << 8;\n        }\n    }\n    v11 = new bytes[](v12);\n    v12 = (_getinfo[v0] & ~0 + (!(_getinfo[v0] & 0x1) << 8)) >> 1;\n    v13 = v14 = v11.data;\n    if (v12) {\n        if (31 < v12) {\n            do {\n                MEM[v13] = STORAGE[v15];\n                v15 += 1;\n                v13 += 32;\n            } while (v14 + v12 <= v13);\n        } else {\n            MEM[v14] = _getinfo[v0] >> 8 << 8;\n        }\n    }\n    v16 = new array[](v1.length);\n    v17 = v18 = 0;\n    while (v17 < v1.length) {\n        MEM[v17 + v16.data] = MEM[v17 + v1.data];\n        v17 += 32;\n    }\n    if (0x1f & v1.length) {\n        MEM[v1.length + v16.data - (0x1f & v1.length)] = ~(256 ** (32 - (0x1f & v1.length)) - 1) & MEM[v1.length + v16.data - (0x1f & v1.length)];\n    }\n    v19 = new array[](v6.length);\n    v20 = v21 = 0;\n    while (v20 < v6.length) {\n        MEM[v20 + v19.data] = MEM[v20 + v6.data];\n        v20 += 32;\n    }\n    if (0x1f & v6.length) {\n        MEM[v6.length + v19.data - (0x1f & v6.length)] = ~(256 ** (32 - (0x1f & v6.length)) - 1) & MEM[v6.length + v19.data - (0x1f & v6.length)];\n    }\n    v22 = new array[](v11.length);\n    v23 = v24 = 0;\n    while (v23 < v11.length) {\n        MEM[v23 + v22.data] = MEM[v23 + v11.data];\n        v23 += 32;\n    }\n    v25 = v26 = v11.length + v22.data;\n    if (0x1f & v11.length) {\n        MEM[v26 - (0x1f & v11.length)] = ~(256 ** (32 - (0x1f & v11.length)) - 1) & MEM[v26 - (0x1f & v11.length)];\n    }\n    return v16, v19, v22, owner_f[v0];\n}\n\nfunction TOKEN_DECIMALS_UINT8() public nonPayable { \n    return 4;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(varg1 + _allowance[varg0] >= _allowance[varg0]);\n    _allowance[varg0] += varg1;\n    emit Approval(msg.sender, varg0, varg1 + _allowance[varg0]);\n    return 1;\n}\n\nfunction gettimeback() public nonPayable { \n    v0 = 0x1e62(owner_f[msg.sender]);\n    assert(_gettimeback[msg.sender] <= v0);\n    return v0 - _gettimeback[msg.sender];\n}\n\nfunction sendabr(uint256 varg0) public nonPayable { \n    require(msg.sender == _sendabr, 32, 0);\n    v0 = 0x18ff(varg0, this);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction setadmin(address varg0) public nonPayable { \n    require(msg.sender == _sendabr, 32, 0);\n    _setcoe = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xfcb5984 == function_selector) {\n            getprice();\n        } else if (0x119f8747 == function_selector) {\n            support();\n        } else if (0x158ef93e == function_selector) {\n            initialized();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x18821400 == function_selector) {\n            TOKEN_NAME();\n        } else if (0x1a2d8629 == function_selector) {\n            getinfo();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x25630c9f == function_selector) {\n            fwithdrawal(uint256);\n        } else if (0x2a905318 == function_selector) {\n            TOKEN_SYMBOL();\n        } else if (0x2ddbd13a == function_selector) {\n            total();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3d2ce522 == function_selector) {\n            setdaily(uint256);\n        } else if (0x4e71d92d == function_selector) {\n            claim();\n        } else if (0x54aca207 == function_selector) {\n            iwithdrawal(uint256);\n        } else if (0x56780085 == function_selector) {\n            TOKEN_DECIMAL_MULTIPLIER();\n        } else if (0x5b624b6e == function_selector) {\n            setinfo(string,string,string);\n        } else if (0x5b7f415c == function_selector) {\n            TOKEN_DECIMALS();\n        } else if (0x60f2f673 == function_selector) {\n            setcoe(uint256);\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x70e44c6a == function_selector) {\n            Withdrawal();\n        } else if (0x7247959a == function_selector) {\n            referral(address);\n        } else if (0x84317008 == function_selector) {\n            setprice(uint256,uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x94b918de == function_selector) {\n            swap(uint256);\n        } else if (0x9519e398 == function_selector) {\n            aDeposit(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xc50497ae == function_selector) {\n            SUPPLY();\n        } else if (0xc803f981 == function_selector) {\n            care(uint256);\n        } else if (0xcf3b1967 == function_selector) {\n            TOKEN_DECIMALS_UINT8();\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdb21fc9c == function_selector) {\n            gettimeback();\n        } else if (0xdd17e151 == function_selector) {\n            sendabr(uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xdded49cb == function_selector) {\n            setadmin(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 04:18 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _fwithdrawal; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 _getprice; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _setinfo; // STORAGE[0xc]\nmapping (uint256 => [uint256]) owner_d; // STORAGE[0xd]\nmapping (uint256 => [uint256]) _getinfo; // STORAGE[0xe]\nmapping (uint256 => [uint256]) owner_f; // STORAGE[0xf]\nmapping (uint256 => [uint256]) _iwithdrawal; // STORAGE[0x10]\nmapping (uint256 => [uint256]) owner_11; // STORAGE[0x11]\nmapping (uint256 => [uint256]) _gettimeback; // STORAGE[0x12]\nmapping (uint256 => [uint256]) _aDeposit; // STORAGE[0x13]\nmapping (uint256 => [uint256]) _referral; // STORAGE[0x14]\nmapping (uint256 => [uint256]) _total; // STORAGE[0x15]\nmapping (uint256 => [uint256]) owner_16; // STORAGE[0x16]\nmapping (uint256 => [uint256]) owner_17; // STORAGE[0x17]\nmapping (uint256 => [uint256]) owner_18; // STORAGE[0x18]\nuint8 _initialized; // STORAGE[0x3] bytes 0 to 0\nuint160 _owner; // STORAGE[0x3] bytes 1 to 20\naddress _sendabr; // STORAGE[0x4] bytes 0 to 19\naddress _setcoe; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction 0x157f(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 / varg1;\n    assert(v0 <= _balanceOf[this]);\n    return _balanceOf[this] - v0;\n}\n\nfunction 0x18ff(uint256 varg0, uint256 varg1) private { \n    require(address(varg1));\n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = address(varg1);\n    v1 = varg0 + _balanceOf[v0];\n    assert(v1 >= _balanceOf[v0]);\n    v2 = address(varg1);\n    _balanceOf[v2] = v1;\n    emit Transfer(msg.sender, v2, varg0);\n    return 1;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x4162726900000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction 0x1e62(uint256 varg0) private { \n    v0 = v1 = 0;\n    v2 = v3 = varg0 >= 0x3b9aca00;\n    if (v3) {\n        v2 = v4 = varg0 <= 0x174876e800;\n    }\n    if (!v2) {\n        v5 = v6 = varg0 >= 0x174e6cc900;\n        if (v6) {\n            v5 = v7 = varg0 <= 0x746a528800;\n        }\n        if (!v5) {\n            v8 = v9 = varg0 >= 0x7470486900;\n            if (v9) {\n                v8 = v10 = varg0 <= 0xe8d4a51000;\n            }\n            if (!v8) {\n                v11 = v12 = varg0 >= 0xe8da9af100;\n                if (v12) {\n                    v11 = v13 = varg0 <= 0x48c27395000;\n                }\n                if (!v11) {\n                    v14 = v15 = varg0 >= 0x48c2d2f3100;\n                    if (v15) {\n                        v14 = v16 = varg0 <= 0x9184e72a000;\n                    }\n                    if (v14) {\n                        v0 = v17 = 120;\n                    }\n                } else {\n                    v0 = v18 = 150;\n                }\n            } else {\n                v0 = v19 = 180;\n            }\n        } else {\n            v0 = v20 = 210;\n        }\n    } else {\n        v0 = v21 = 240;\n    }\n    return v0;\n}\n\nfunction 0x1f48(uint256 varg0) private { \n    v0 = v1 = 0;\n    v2 = v3 = varg0 >= 0x3b9aca00;\n    if (v3) {\n        v2 = v4 = varg0 <= 0x174876e800;\n    }\n    if (!v2) {\n        v5 = v6 = varg0 >= 0x174e6cc900;\n        if (v6) {\n            v5 = v7 = varg0 <= 0x746a528800;\n        }\n        if (!v5) {\n            v8 = v9 = varg0 >= 0x7470486900;\n            if (v9) {\n                v8 = v10 = varg0 <= 0xe8d4a51000;\n            }\n            if (!v8) {\n                v11 = v12 = varg0 >= 0xe8da9af100;\n                if (v12) {\n                    v11 = v13 = varg0 <= 0x48c27395000;\n                }\n                if (!v11) {\n                    v14 = v15 = varg0 >= 0x48c2d2f3100;\n                    if (v15) {\n                        v14 = v16 = varg0 <= 0x9184e72a000;\n                    }\n                    if (v14) {\n                        v0 = v17 = 30;\n                    }\n                } else {\n                    v0 = v18 = 25;\n                }\n            } else {\n                v0 = v19 = 20;\n            }\n        } else {\n            v0 = v20 = 12;\n        }\n    } else {\n        v0 = v21 = 5;\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction getprice() public nonPayable { \n    return _getprice;\n}\n\nfunction support() public nonPayable { \n    v0 = new bytes[](v1);\n    v1 = (_referral[address(_referral[msg.sender])] & ~0 + (!(_referral[address(_referral[msg.sender])] & 0x1) << 8)) >> 1;\n    v2 = v3 = v0.data;\n    if (v1) {\n        if (31 < v1) {\n            do {\n                MEM[v2] = STORAGE[v4];\n                v4 += 1;\n                v2 += 32;\n            } while (v3 + v1 <= v2);\n        } else {\n            MEM[v3] = _referral[address(_referral[msg.sender])] >> 8 << 8;\n        }\n    }\n    v5 = new bytes[](v6);\n    v6 = (_referral[address(_referral[msg.sender])] & ~0 + (!(_referral[address(_referral[msg.sender])] & 0x1) << 8)) >> 1;\n    v7 = v8 = v5.data;\n    if (v6) {\n        if (31 < v6) {\n            do {\n                MEM[v7] = STORAGE[v9];\n                v9 += 1;\n                v7 += 32;\n            } while (v8 + v6 <= v7);\n        } else {\n            MEM[v8] = _referral[address(_referral[msg.sender])] >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](v11);\n    v11 = (_getinfo[address(_referral[msg.sender])] & ~0 + (!(_getinfo[address(_referral[msg.sender])] & 0x1) << 8)) >> 1;\n    v12 = v13 = v10.data;\n    if (v11) {\n        if (31 < v11) {\n            do {\n                MEM[v12] = STORAGE[v14];\n                v14 += 1;\n                v12 += 32;\n            } while (v13 + v11 <= v12);\n        } else {\n            MEM[v13] = _getinfo[address(_referral[msg.sender])] >> 8 << 8;\n        }\n    }\n    v15 = new array[](v0.length);\n    v16 = v17 = 0;\n    while (v16 < v0.length) {\n        MEM[v16 + v15.data] = MEM[v16 + v0.data];\n        v16 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v15.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v15.data - (0x1f & v0.length)];\n    }\n    v18 = new array[](v5.length);\n    v19 = v20 = 0;\n    while (v19 < v5.length) {\n        MEM[v19 + v18.data] = MEM[v19 + v5.data];\n        v19 += 32;\n    }\n    if (0x1f & v5.length) {\n        MEM[v5.length + v18.data - (0x1f & v5.length)] = ~(256 ** (32 - (0x1f & v5.length)) - 1) & MEM[v5.length + v18.data - (0x1f & v5.length)];\n    }\n    v21 = new array[](v10.length);\n    v22 = v23 = 0;\n    while (v22 < v10.length) {\n        MEM[v22 + v21.data] = MEM[v22 + v10.data];\n        v22 += 32;\n    }\n    v24 = v25 = v10.length + v21.data;\n    if (0x1f & v10.length) {\n        MEM[v25 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v25 - (0x1f & v10.length)];\n    }\n    return v15, v18, v21;\n}\n\nfunction initialized() public nonPayable { \n    return _initialized;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction TOKEN_NAME() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x4162726900000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction getinfo() public nonPayable { \n    v0 = new bytes[](v1);\n    v1 = (_getinfo[msg.sender] & (!(_getinfo[msg.sender] & 0x1) << 8) + ~0) >> 1;\n    v2 = v3 = v0.data;\n    if (v1) {\n        if (31 < v1) {\n            do {\n                MEM[v2] = STORAGE[v4];\n                v4 += 1;\n                v2 += 32;\n            } while (v3 + v1 <= v2);\n        }\n    }\n    v5 = new array[](v0.length);\n    if (0 < v0.length) {\n        v6 = v0.data;\n        MEM[v5.data] = _getinfo[msg.sender] >> 8 << 8;\n        v7 = v8 = 32;\n        while (v7 < v0.length) {\n            MEM[v7 + v5.data] = MEM[v7 + v0.data];\n            v7 += 32;\n        }\n    }\n    v9 = v10 = v0.length + v5.data;\n    if (0x1f & v0.length) {\n        MEM[v10 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v10 - (0x1f & v0.length)];\n    }\n    return v5, _aDeposit[msg.sender], owner_f[msg.sender], owner_11[msg.sender], _iwithdrawal[msg.sender];\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction fwithdrawal(uint256 varg0) public nonPayable { \n    v0 = 0x1e62(owner_f[msg.sender]);\n    require(v0 == _gettimeback[msg.sender]);\n    if (owner_f[msg.sender] / 100 * stor_9 >= varg0 * _fwithdrawal) {\n        owner_f[msg.sender] = owner_f[msg.sender] - varg0 * _fwithdrawal;\n        assert(varg0 <= owner_f[this]);\n        _balanceOf[this] = owner_f[this] - varg0;\n        assert(varg0 + _balanceOf[this] >= _balanceOf[this]);\n        _balanceOf[msg.sender] = varg0 + _balanceOf[this];\n    }\n}\n\nfunction TOKEN_SYMBOL() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4142520000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction total() public nonPayable { \n    return _total[msg.sender], owner_17[msg.sender];\n}\n\nfunction decimals() public nonPayable { \n    return 4;\n}\n\nfunction setdaily(uint256 varg0) public nonPayable { \n    require(msg.sender == _setcoe, 32, 0);\n    stor_b += 1;\n    stor_a = varg0;\n}\n\nfunction claim() public nonPayable { \n    if (stor_b - _aDeposit[msg.sender] != _gettimeback[msg.sender] + 1) {\n        if (stor_b - _aDeposit[msg.sender] > _gettimeback[msg.sender] + 1) {\n            _aDeposit[msg.sender] = stor_b - _aDeposit[msg.sender];\n        }\n    } else {\n        _gettimeback[msg.sender] += 1;\n        v0 = 0x1f48(owner_f[msg.sender]);\n        owner_11[msg.sender] = owner_f[msg.sender] / 10000 * (v0 + stor_a);\n        assert(_fwithdrawal);\n        _iwithdrawal[msg.sender] += owner_f[msg.sender] / 10000 * (v0 + stor_a) / _fwithdrawal;\n    }\n    v1 = new array[](MEM[96]);\n    v2 = v3 = 0;\n    while (v2 < MEM[96]) {\n        MEM[v2 + v1.data] = MEM[v2 + 128];\n        v2 += 32;\n    }\n    v4 = v5 = MEM[96] + v1.data;\n    if (0x1f & MEM[96]) {\n        MEM[v5 - (0x1f & MEM[96])] = ~(256 ** (32 - (0x1f & MEM[96])) - 1) & MEM[v5 - (0x1f & MEM[96])];\n    }\n    return v1;\n}\n\nfunction iwithdrawal(uint256 varg0) public nonPayable { \n    if (varg0 < _iwithdrawal[msg.sender]) {\n        _iwithdrawal[msg.sender] = _iwithdrawal[msg.sender] - varg0;\n        assert(varg0 <= _iwithdrawal[this]);\n        _balanceOf[this] = _iwithdrawal[this] - varg0;\n        assert(varg0 + _balanceOf[this] >= _balanceOf[this]);\n        _balanceOf[msg.sender] = varg0 + _balanceOf[this];\n    }\n}\n\nfunction TOKEN_DECIMAL_MULTIPLIER() public nonPayable { \n    return 10000;\n}\n\nfunction setinfo(string varg0, string varg1, string varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    v2 = new bytes[]((?).length);\n    CALLDATACOPY(v2.data, 36 + varg1, (?).length);\n    v3 = new bytes[]((?).length);\n    CALLDATACOPY(v3.data, 36 + varg2, (?).length);\n    v4 = v5 = v0.data;\n    if (31 < v0.length) {\n        _setinfo[msg.sender] = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v5 + v0.length > v4) {\n                STORAGE[v6] = MEM[v4];\n                v4 += 32;\n                v6 += 1;\n            }\n        }\n    } else {\n        _setinfo[msg.sender] = v0.length + v0.length | ~0xff & MEM[v5];\n    }\n    while (v7 + (31 + (((!(0x1 & _setinfo[msg.sender]) << 8) - 1 & _setinfo[msg.sender]) >> 1) >> 5) > v6) {\n        STORAGE[v6] = 0;\n        v6 += 1;\n    }\n    v8 = v9 = v2.data;\n    if (31 < v2.length) {\n        owner_d[msg.sender] = 1 + (v2.length + v2.length);\n        if (v2.length) {\n            while (v9 + v2.length > v8) {\n                STORAGE[v10] = MEM[v8];\n                v8 += 32;\n                v10 += 1;\n            }\n        }\n    } else {\n        owner_d[msg.sender] = v2.length + v2.length | ~0xff & MEM[v9];\n    }\n    while (v11 + (31 + (((!(0x1 & owner_d[msg.sender]) << 8) - 1 & owner_d[msg.sender]) >> 1) >> 5) > v10) {\n        STORAGE[v10] = 0;\n        v10 += 1;\n    }\n    v12 = v13 = v3.data;\n    if (31 < v3.length) {\n        _getinfo[msg.sender] = 1 + (v3.length + v3.length);\n        if (v3.length) {\n            while (v13 + v3.length > v12) {\n                STORAGE[v14] = MEM[v12];\n                v12 += 32;\n                v14 += 1;\n            }\n        }\n    } else {\n        _getinfo[msg.sender] = v3.length + v3.length | ~0xff & MEM[v13];\n    }\n    while (v15 + (31 + (((!(0x1 & _getinfo[msg.sender]) << 8) - 1 & _getinfo[msg.sender]) >> 1) >> 5) > v14) {\n        STORAGE[v14] = 0;\n        v14 += 1;\n    }\n}\n\nfunction TOKEN_DECIMALS() public nonPayable { \n    return 4;\n}\n\nfunction setcoe(uint256 varg0) public nonPayable { \n    require(msg.sender == _setcoe, 32, 0);\n    stor_9 = varg0;\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction Withdrawal() public nonPayable { \n    require(msg.sender == _setcoe, 32, 0);\n    v0 = _setcoe.call().value(this.balance + ~0xde0b6b3a763ffff).gas(2300 * !(this.balance + ~0xde0b6b3a763ffff));\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction referral(address varg0) public nonPayable { \n    if (!(0xff & owner_16[msg.sender])) {\n        _referral[msg.sender] = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _referral[msg.sender];\n        _referral[varg0] += 1;\n        owner_18[varg0] += 1;\n        STORAGE[keccak256(keccak256(varg0, 24)) + owner_18[varg0]] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[keccak256(keccak256(varg0, 24)) + owner_18[varg0]];\n        owner_16[keccak256(varg0, 24)] = 0x1 | ~0xff & owner_16[keccak256(varg0, 24)];\n        goto 0x5080x72e;\n    }\n}\n\nfunction setprice(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _setcoe, 32, 0);\n    _getprice = varg1;\n    stor_7 = varg0;\n    assert(varg1);\n    _fwithdrawal = varg0 / varg1;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction swap(uint256 varg0) public payable { \n    assert(varg0 * _getprice <= _balanceOf[_owner]);\n    _balanceOf[_owner] = _balanceOf[_owner] - varg0 * _getprice;\n    assert(varg0 * _getprice + _balanceOf[msg.sender] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] += varg0 * _getprice;\n}\n\nfunction aDeposit(uint256 varg0) public nonPayable { \n    if (0xff & owner_16[msg.sender]) {\n        if (!_aDeposit[msg.sender]) {\n            _aDeposit[msg.sender] = stor_b;\n        }\n        owner_f[msg.sender] = owner_f[msg.sender] + varg0 * _fwithdrawal;\n        owner_f[address(owner_f[msg.sender])] += owner_f[msg.sender] + varg0 * _fwithdrawal;\n        v0 = 0x1f48(owner_f[msg.sender]);\n        v1 = 0x1f48(owner_f[msg.sender]);\n        if (v0 - v1) {\n            v2 = v3 = 1;\n            goto 0xab60x2024B0x151fB0x7b2;\n        } else {\n            v2 = v4 = 0;\n        }\n        if (v2) {\n            _aDeposit[msg.sender] = stor_b;\n            _aDeposit[msg.sender] = 0;\n        }\n        v5 = 0x18ff(varg0, this);\n        if (owner_f[msg.sender]) {\n            v6 = 0x157f(varg0, 20);\n            _balanceOf[this] = v6;\n            assert(varg0 + _balanceOf[address(_referral[msg.sender])] >= _balanceOf[address(_referral[msg.sender])]);\n            _balanceOf[address(_referral[msg.sender])] += varg0;\n        } else {\n            assert(varg0 <= _balanceOf[this]);\n            _balanceOf[this] = _balanceOf[this] - varg0;\n            assert(varg0 + _balanceOf[address(_referral[msg.sender])] >= _balanceOf[address(_referral[msg.sender])]);\n            _balanceOf[address(_referral[msg.sender])] += varg0;\n            v7 = 0x157f(varg0 * 3, 100);\n            _balanceOf[this] = v7;\n            assert(varg0 * 3 / 100 + _balanceOf[address(_referral[address(address(_referral[msg.sender]))])] >= _balanceOf[address(_referral[address(address(_referral[msg.sender]))])]);\n            v8 = address(_referral[address(address(_referral[msg.sender]))]);\n            _balanceOf[v8] = varg0 * 3 / 100 + _balanceOf[address(_referral[address(address(_referral[msg.sender]))])];\n            if (1 < _referral[address(_referral[v8])]) {\n                v9 = 0x157f(varg0, 50);\n                _balanceOf[this] = v9;\n                assert(varg0 + _balanceOf[address(_referral[v8])] >= _balanceOf[address(_referral[v8])]);\n                _balanceOf[address(_referral[v8])] += varg0;\n            }\n            v10 = address(_referral[address(address(_referral[v8]))]);\n            if (2 < _referral[v10]) {\n                v11 = 0x157f(varg0, 100);\n                _balanceOf[this] = v11;\n                assert(varg0 + _balanceOf[address(v10)] >= _balanceOf[address(v10)]);\n                _balanceOf[address(v10)] += varg0;\n            }\n            if (3 < _referral[address(_referral[address(v10)])]) {\n                v12 = 0x157f(varg0, 200);\n                _balanceOf[this] = v12;\n                assert(varg0 + _balanceOf[address(_referral[address(v10)])] >= _balanceOf[address(_referral[address(v10)])]);\n                _balanceOf[address(_referral[address(v10)])] += varg0;\n            }\n            v13 = address(_referral[address(address(_referral[address(v10)]))]);\n            if (4 < _referral[v13]) {\n                v14 = 0x157f(varg0, 200);\n                _balanceOf[this] = v14;\n                assert(varg0 + _balanceOf[address(v13)] >= _balanceOf[address(v13)]);\n                _balanceOf[address(v13)] += varg0;\n            }\n        }\n    }\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4142520000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0x18ff(varg1, varg0);\n    return v0;\n}\n\nfunction SUPPLY() public nonPayable { \n    return 0xbebc200;\n}\n\nfunction care(uint256 varg0) public nonPayable { \n    assert(varg0 < owner_18[msg.sender]);\n    v0 = address(STORAGE[keccak256(keccak256(msg.sender, 24)) + varg0]);\n    v1 = new bytes[](v2);\n    v2 = (_setinfo[v0] & ~0 + (!(_setinfo[v0] & 0x1) << 8)) >> 1;\n    v3 = v4 = v1.data;\n    if (v2) {\n        if (31 < v2) {\n            do {\n                MEM[v3] = STORAGE[v5];\n                v5 += 1;\n                v3 += 32;\n            } while (v4 + v2 <= v3);\n        } else {\n            MEM[v4] = _setinfo[v0] >> 8 << 8;\n        }\n    }\n    v6 = new bytes[](v7);\n    v7 = (_setinfo[v0] & ~0 + (!(_setinfo[v0] & 0x1) << 8)) >> 1;\n    v8 = v9 = v6.data;\n    if (v7) {\n        if (31 < v7) {\n            do {\n                MEM[v8] = STORAGE[v10];\n                v10 += 1;\n                v8 += 32;\n            } while (v9 + v7 <= v8);\n        } else {\n            MEM[v9] = _setinfo[v0] >> 8 << 8;\n        }\n    }\n    v11 = new bytes[](v12);\n    v12 = (_getinfo[v0] & ~0 + (!(_getinfo[v0] & 0x1) << 8)) >> 1;\n    v13 = v14 = v11.data;\n    if (v12) {\n        if (31 < v12) {\n            do {\n                MEM[v13] = STORAGE[v15];\n                v15 += 1;\n                v13 += 32;\n            } while (v14 + v12 <= v13);\n        } else {\n            MEM[v14] = _getinfo[v0] >> 8 << 8;\n        }\n    }\n    v16 = new array[](v1.length);\n    v17 = v18 = 0;\n    while (v17 < v1.length) {\n        MEM[v17 + v16.data] = MEM[v17 + v1.data];\n        v17 += 32;\n    }\n    if (0x1f & v1.length) {\n        MEM[v1.length + v16.data - (0x1f & v1.length)] = ~(256 ** (32 - (0x1f & v1.length)) - 1) & MEM[v1.length + v16.data - (0x1f & v1.length)];\n    }\n    v19 = new array[](v6.length);\n    v20 = v21 = 0;\n    while (v20 < v6.length) {\n        MEM[v20 + v19.data] = MEM[v20 + v6.data];\n        v20 += 32;\n    }\n    if (0x1f & v6.length) {\n        MEM[v6.length + v19.data - (0x1f & v6.length)] = ~(256 ** (32 - (0x1f & v6.length)) - 1) & MEM[v6.length + v19.data - (0x1f & v6.length)];\n    }\n    v22 = new array[](v11.length);\n    v23 = v24 = 0;\n    while (v23 < v11.length) {\n        MEM[v23 + v22.data] = MEM[v23 + v11.data];\n        v23 += 32;\n    }\n    v25 = v26 = v11.length + v22.data;\n    if (0x1f & v11.length) {\n        MEM[v26 - (0x1f & v11.length)] = ~(256 ** (32 - (0x1f & v11.length)) - 1) & MEM[v26 - (0x1f & v11.length)];\n    }\n    return v16, v19, v22, owner_f[v0];\n}\n\nfunction TOKEN_DECIMALS_UINT8() public nonPayable { \n    return 4;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(varg1 + _allowance[varg0] >= _allowance[varg0]);\n    _allowance[varg0] += varg1;\n    emit Approval(msg.sender, varg0, varg1 + _allowance[varg0]);\n    return 1;\n}\n\nfunction gettimeback() public nonPayable { \n    v0 = 0x1e62(owner_f[msg.sender]);\n    assert(_gettimeback[msg.sender] <= v0);\n    return v0 - _gettimeback[msg.sender];\n}\n\nfunction sendabr(uint256 varg0) public nonPayable { \n    require(msg.sender == _sendabr, 32, 0);\n    v0 = 0x18ff(varg0, this);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction setadmin(address varg0) public nonPayable { \n    require(msg.sender == _sendabr, 32, 0);\n    _setcoe = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xfcb5984 == function_selector) {\n            getprice();\n        } else if (0x119f8747 == function_selector) {\n            support();\n        } else if (0x158ef93e == function_selector) {\n            initialized();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x18821400 == function_selector) {\n            TOKEN_NAME();\n        } else if (0x1a2d8629 == function_selector) {\n            getinfo();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x25630c9f == function_selector) {\n            fwithdrawal(uint256);\n        } else if (0x2a905318 == function_selector) {\n            TOKEN_SYMBOL();\n        } else if (0x2ddbd13a == function_selector) {\n            total();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3d2ce522 == function_selector) {\n            setdaily(uint256);\n        } else if (0x4e71d92d == function_selector) {\n            claim();\n        } else if (0x54aca207 == function_selector) {\n            iwithdrawal(uint256);\n        } else if (0x56780085 == function_selector) {\n            TOKEN_DECIMAL_MULTIPLIER();\n        } else if (0x5b624b6e == function_selector) {\n            setinfo(string,string,string);\n        } else if (0x5b7f415c == function_selector) {\n            TOKEN_DECIMALS();\n        } else if (0x60f2f673 == function_selector) {\n            setcoe(uint256);\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x70e44c6a == function_selector) {\n            Withdrawal();\n        } else if (0x7247959a == function_selector) {\n            referral(address);\n        } else if (0x84317008 == function_selector) {\n            setprice(uint256,uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x94b918de == function_selector) {\n            swap(uint256);\n        } else if (0x9519e398 == function_selector) {\n            aDeposit(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xc50497ae == function_selector) {\n            SUPPLY();\n        } else if (0xc803f981 == function_selector) {\n            care(uint256);\n        } else if (0xcf3b1967 == function_selector) {\n            TOKEN_DECIMALS_UINT8();\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdb21fc9c == function_selector) {\n            gettimeback();\n        } else if (0xdd17e151 == function_selector) {\n            sendabr(uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xdded49cb == function_selector) {\n            setadmin(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 04:18 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _fwithdrawal; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 _getprice; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _setinfo; // STORAGE[0xc]\nmapping (uint256 => [uint256]) owner_d; // STORAGE[0xd]\nmapping (uint256 => [uint256]) _getinfo; // STORAGE[0xe]\nmapping (uint256 => [uint256]) owner_f; // STORAGE[0xf]\nmapping (uint256 => [uint256]) _iwithdrawal; // STORAGE[0x10]\nmapping (uint256 => [uint256]) owner_11; // STORAGE[0x11]\nmapping (uint256 => [uint256]) _gettimeback; // STORAGE[0x12]\nmapping (uint256 => [uint256]) _aDeposit; // STORAGE[0x13]\nmapping (uint256 => [uint256]) _referral; // STORAGE[0x14]\nmapping (uint256 => [uint256]) _total; // STORAGE[0x15]\nmapping (uint256 => [uint256]) owner_16; // STORAGE[0x16]\nmapping (uint256 => [uint256]) owner_17; // STORAGE[0x17]\nmapping (uint256 => [uint256]) owner_18; // STORAGE[0x18]\nuint8 _initialized; // STORAGE[0x3] bytes 0 to 0\nuint160 _owner; // STORAGE[0x3] bytes 1 to 20\naddress _sendabr; // STORAGE[0x4] bytes 0 to 19\naddress _setcoe; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction 0x157f(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 / varg1;\n    assert(v0 <= _balanceOf[this]);\n    return _balanceOf[this] - v0;\n}\n\nfunction 0x18ff(uint256 varg0, uint256 varg1) private { \n    require(address(varg1));\n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = address(varg1);\n    v1 = varg0 + _balanceOf[v0];\n    assert(v1 >= _balanceOf[v0]);\n    v2 = address(varg1);\n    _balanceOf[v2] = v1;\n    emit Transfer(msg.sender, v2, varg0);\n    return 1;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x4162726900000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction 0x1e62(uint256 varg0) private { \n    v0 = v1 = 0;\n    v2 = v3 = varg0 >= 0x3b9aca00;\n    if (v3) {\n        v2 = v4 = varg0 <= 0x174876e800;\n    }\n    if (!v2) {\n        v5 = v6 = varg0 >= 0x174e6cc900;\n        if (v6) {\n            v5 = v7 = varg0 <= 0x746a528800;\n        }\n        if (!v5) {\n            v8 = v9 = varg0 >= 0x7470486900;\n            if (v9) {\n                v8 = v10 = varg0 <= 0xe8d4a51000;\n            }\n            if (!v8) {\n                v11 = v12 = varg0 >= 0xe8da9af100;\n                if (v12) {\n                    v11 = v13 = varg0 <= 0x48c27395000;\n                }\n                if (!v11) {\n                    v14 = v15 = varg0 >= 0x48c2d2f3100;\n                    if (v15) {\n                        v14 = v16 = varg0 <= 0x9184e72a000;\n                    }\n                    if (v14) {\n                        v0 = v17 = 120;\n                    }\n                } else {\n                    v0 = v18 = 150;\n                }\n            } else {\n                v0 = v19 = 180;\n            }\n        } else {\n            v0 = v20 = 210;\n        }\n    } else {\n        v0 = v21 = 240;\n    }\n    return v0;\n}\n\nfunction 0x1f48(uint256 varg0) private { \n    v0 = v1 = 0;\n    v2 = v3 = varg0 >= 0x3b9aca00;\n    if (v3) {\n        v2 = v4 = varg0 <= 0x174876e800;\n    }\n    if (!v2) {\n        v5 = v6 = varg0 >= 0x174e6cc900;\n        if (v6) {\n            v5 = v7 = varg0 <= 0x746a528800;\n        }\n        if (!v5) {\n            v8 = v9 = varg0 >= 0x7470486900;\n            if (v9) {\n                v8 = v10 = varg0 <= 0xe8d4a51000;\n            }\n            if (!v8) {\n                v11 = v12 = varg0 >= 0xe8da9af100;\n                if (v12) {\n                    v11 = v13 = varg0 <= 0x48c27395000;\n                }\n                if (!v11) {\n                    v14 = v15 = varg0 >= 0x48c2d2f3100;\n                    if (v15) {\n                        v14 = v16 = varg0 <= 0x9184e72a000;\n                    }\n                    if (v14) {\n                        v0 = v17 = 30;\n                    }\n                } else {\n                    v0 = v18 = 25;\n                }\n            } else {\n                v0 = v19 = 20;\n            }\n        } else {\n            v0 = v20 = 12;\n        }\n    } else {\n        v0 = v21 = 5;\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction getprice() public nonPayable { \n    return _getprice;\n}\n\nfunction support() public nonPayable { \n    v0 = new bytes[](v1);\n    v1 = (_referral[address(_referral[msg.sender])] & ~0 + (!(_referral[address(_referral[msg.sender])] & 0x1) << 8)) >> 1;\n    v2 = v3 = v0.data;\n    if (v1) {\n        if (31 < v1) {\n            do {\n                MEM[v2] = STORAGE[v4];\n                v4 += 1;\n                v2 += 32;\n            } while (v3 + v1 <= v2);\n        } else {\n            MEM[v3] = _referral[address(_referral[msg.sender])] >> 8 << 8;\n        }\n    }\n    v5 = new bytes[](v6);\n    v6 = (_referral[address(_referral[msg.sender])] & ~0 + (!(_referral[address(_referral[msg.sender])] & 0x1) << 8)) >> 1;\n    v7 = v8 = v5.data;\n    if (v6) {\n        if (31 < v6) {\n            do {\n                MEM[v7] = STORAGE[v9];\n                v9 += 1;\n                v7 += 32;\n            } while (v8 + v6 <= v7);\n        } else {\n            MEM[v8] = _referral[address(_referral[msg.sender])] >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](v11);\n    v11 = (_getinfo[address(_referral[msg.sender])] & ~0 + (!(_getinfo[address(_referral[msg.sender])] & 0x1) << 8)) >> 1;\n    v12 = v13 = v10.data;\n    if (v11) {\n        if (31 < v11) {\n            do {\n                MEM[v12] = STORAGE[v14];\n                v14 += 1;\n                v12 += 32;\n            } while (v13 + v11 <= v12);\n        } else {\n            MEM[v13] = _getinfo[address(_referral[msg.sender])] >> 8 << 8;\n        }\n    }\n    v15 = new array[](v0.length);\n    v16 = v17 = 0;\n    while (v16 < v0.length) {\n        MEM[v16 + v15.data] = MEM[v16 + v0.data];\n        v16 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v15.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v15.data - (0x1f & v0.length)];\n    }\n    v18 = new array[](v5.length);\n    v19 = v20 = 0;\n    while (v19 < v5.length) {\n        MEM[v19 + v18.data] = MEM[v19 + v5.data];\n        v19 += 32;\n    }\n    if (0x1f & v5.length) {\n        MEM[v5.length + v18.data - (0x1f & v5.length)] = ~(256 ** (32 - (0x1f & v5.length)) - 1) & MEM[v5.length + v18.data - (0x1f & v5.length)];\n    }\n    v21 = new array[](v10.length);\n    v22 = v23 = 0;\n    while (v22 < v10.length) {\n        MEM[v22 + v21.data] = MEM[v22 + v10.data];\n        v22 += 32;\n    }\n    v24 = v25 = v10.length + v21.data;\n    if (0x1f & v10.length) {\n        MEM[v25 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v25 - (0x1f & v10.length)];\n    }\n    return v15, v18, v21;\n}\n\nfunction initialized() public nonPayable { \n    return _initialized;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction TOKEN_NAME() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x4162726900000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction getinfo() public nonPayable { \n    v0 = new bytes[](v1);\n    v1 = (_getinfo[msg.sender] & (!(_getinfo[msg.sender] & 0x1) << 8) + ~0) >> 1;\n    v2 = v3 = v0.data;\n    if (v1) {\n        if (31 < v1) {\n            do {\n                MEM[v2] = STORAGE[v4];\n                v4 += 1;\n                v2 += 32;\n            } while (v3 + v1 <= v2);\n        }\n    }\n    v5 = new array[](v0.length);\n    if (0 < v0.length) {\n        v6 = v0.data;\n        MEM[v5.data] = _getinfo[msg.sender] >> 8 << 8;\n        v7 = v8 = 32;\n        while (v7 < v0.length) {\n            MEM[v7 + v5.data] = MEM[v7 + v0.data];\n            v7 += 32;\n        }\n    }\n    v9 = v10 = v0.length + v5.data;\n    if (0x1f & v0.length) {\n        MEM[v10 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v10 - (0x1f & v0.length)];\n    }\n    return v5, _aDeposit[msg.sender], owner_f[msg.sender], owner_11[msg.sender], _iwithdrawal[msg.sender];\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction fwithdrawal(uint256 varg0) public nonPayable { \n    v0 = 0x1e62(owner_f[msg.sender]);\n    require(v0 == _gettimeback[msg.sender]);\n    if (owner_f[msg.sender] / 100 * stor_9 >= varg0 * _fwithdrawal) {\n        owner_f[msg.sender] = owner_f[msg.sender] - varg0 * _fwithdrawal;\n        assert(varg0 <= owner_f[this]);\n        _balanceOf[this] = owner_f[this] - varg0;\n        assert(varg0 + _balanceOf[this] >= _balanceOf[this]);\n        _balanceOf[msg.sender] = varg0 + _balanceOf[this];\n    }\n}\n\nfunction TOKEN_SYMBOL() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4142520000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction total() public nonPayable { \n    return _total[msg.sender], owner_17[msg.sender];\n}\n\nfunction decimals() public nonPayable { \n    return 4;\n}\n\nfunction setdaily(uint256 varg0) public nonPayable { \n    require(msg.sender == _setcoe, 32, 0);\n    stor_b += 1;\n    stor_a = varg0;\n}\n\nfunction claim() public nonPayable { \n    if (stor_b - _aDeposit[msg.sender] != _gettimeback[msg.sender] + 1) {\n        if (stor_b - _aDeposit[msg.sender] > _gettimeback[msg.sender] + 1) {\n            _aDeposit[msg.sender] = stor_b - _aDeposit[msg.sender];\n        }\n    } else {\n        _gettimeback[msg.sender] += 1;\n        v0 = 0x1f48(owner_f[msg.sender]);\n        owner_11[msg.sender] = owner_f[msg.sender] / 10000 * (v0 + stor_a);\n        assert(_fwithdrawal);\n        _iwithdrawal[msg.sender] += owner_f[msg.sender] / 10000 * (v0 + stor_a) / _fwithdrawal;\n    }\n    v1 = new array[](MEM[96]);\n    v2 = v3 = 0;\n    while (v2 < MEM[96]) {\n        MEM[v2 + v1.data] = MEM[v2 + 128];\n        v2 += 32;\n    }\n    v4 = v5 = MEM[96] + v1.data;\n    if (0x1f & MEM[96]) {\n        MEM[v5 - (0x1f & MEM[96])] = ~(256 ** (32 - (0x1f & MEM[96])) - 1) & MEM[v5 - (0x1f & MEM[96])];\n    }\n    return v1;\n}\n\nfunction iwithdrawal(uint256 varg0) public nonPayable { \n    if (varg0 < _iwithdrawal[msg.sender]) {\n        _iwithdrawal[msg.sender] = _iwithdrawal[msg.sender] - varg0;\n        assert(varg0 <= _iwithdrawal[this]);\n        _balanceOf[this] = _iwithdrawal[this] - varg0;\n        assert(varg0 + _balanceOf[this] >= _balanceOf[this]);\n        _balanceOf[msg.sender] = varg0 + _balanceOf[this];\n    }\n}\n\nfunction TOKEN_DECIMAL_MULTIPLIER() public nonPayable { \n    return 10000;\n}\n\nfunction setinfo(string varg0, string varg1, string varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    v2 = new bytes[]((?).length);\n    CALLDATACOPY(v2.data, 36 + varg1, (?).length);\n    v3 = new bytes[]((?).length);\n    CALLDATACOPY(v3.data, 36 + varg2, (?).length);\n    v4 = v5 = v0.data;\n    if (31 < v0.length) {\n        _setinfo[msg.sender] = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v5 + v0.length > v4) {\n                STORAGE[v6] = MEM[v4];\n                v4 += 32;\n                v6 += 1;\n            }\n        }\n    } else {\n        _setinfo[msg.sender] = v0.length + v0.length | ~0xff & MEM[v5];\n    }\n    while (v7 + (31 + (((!(0x1 & _setinfo[msg.sender]) << 8) - 1 & _setinfo[msg.sender]) >> 1) >> 5) > v6) {\n        STORAGE[v6] = 0;\n        v6 += 1;\n    }\n    v8 = v9 = v2.data;\n    if (31 < v2.length) {\n        owner_d[msg.sender] = 1 + (v2.length + v2.length);\n        if (v2.length) {\n            while (v9 + v2.length > v8) {\n                STORAGE[v10] = MEM[v8];\n                v8 += 32;\n                v10 += 1;\n            }\n        }\n    } else {\n        owner_d[msg.sender] = v2.length + v2.length | ~0xff & MEM[v9];\n    }\n    while (v11 + (31 + (((!(0x1 & owner_d[msg.sender]) << 8) - 1 & owner_d[msg.sender]) >> 1) >> 5) > v10) {\n        STORAGE[v10] = 0;\n        v10 += 1;\n    }\n    v12 = v13 = v3.data;\n    if (31 < v3.length) {\n        _getinfo[msg.sender] = 1 + (v3.length + v3.length);\n        if (v3.length) {\n            while (v13 + v3.length > v12) {\n                STORAGE[v14] = MEM[v12];\n                v12 += 32;\n                v14 += 1;\n            }\n        }\n    } else {\n        _getinfo[msg.sender] = v3.length + v3.length | ~0xff & MEM[v13];\n    }\n    while (v15 + (31 + (((!(0x1 & _getinfo[msg.sender]) << 8) - 1 & _getinfo[msg.sender]) >> 1) >> 5) > v14) {\n        STORAGE[v14] = 0;\n        v14 += 1;\n    }\n}\n\nfunction TOKEN_DECIMALS() public nonPayable { \n    return 4;\n}\n\nfunction setcoe(uint256 varg0) public nonPayable { \n    require(msg.sender == _setcoe, 32, 0);\n    stor_9 = varg0;\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction Withdrawal() public nonPayable { \n    require(msg.sender == _setcoe, 32, 0);\n    v0 = _setcoe.call().value(this.balance + ~0xde0b6b3a763ffff).gas(2300 * !(this.balance + ~0xde0b6b3a763ffff));\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction referral(address varg0) public nonPayable { \n    if (!(0xff & owner_16[msg.sender])) {\n        _referral[msg.sender] = varg0 | ~0xffffffffffffffffffffffffffffffffffffffff & _referral[msg.sender];\n        _referral[varg0] += 1;\n        owner_18[varg0] += 1;\n        STORAGE[keccak256(keccak256(varg0, 24)) + owner_18[varg0]] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[keccak256(keccak256(varg0, 24)) + owner_18[varg0]];\n        owner_16[keccak256(varg0, 24)] = 0x1 | ~0xff & owner_16[keccak256(varg0, 24)];\n        goto 0x5080x72e;\n    }\n}\n\nfunction setprice(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _setcoe, 32, 0);\n    _getprice = varg1;\n    stor_7 = varg0;\n    assert(varg1);\n    _fwithdrawal = varg0 / varg1;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction swap(uint256 varg0) public payable { \n    assert(varg0 * _getprice <= _balanceOf[_owner]);\n    _balanceOf[_owner] = _balanceOf[_owner] - varg0 * _getprice;\n    assert(varg0 * _getprice + _balanceOf[msg.sender] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] += varg0 * _getprice;\n}\n\nfunction aDeposit(uint256 varg0) public nonPayable { \n    if (0xff & owner_16[msg.sender]) {\n        if (!_aDeposit[msg.sender]) {\n            _aDeposit[msg.sender] = stor_b;\n        }\n        owner_f[msg.sender] = owner_f[msg.sender] + varg0 * _fwithdrawal;\n        owner_f[address(owner_f[msg.sender])] += owner_f[msg.sender] + varg0 * _fwithdrawal;\n        v0 = 0x1f48(owner_f[msg.sender]);\n        v1 = 0x1f48(owner_f[msg.sender]);\n        if (v0 - v1) {\n            v2 = v3 = 1;\n            goto 0xab60x2024B0x151fB0x7b2;\n        } else {\n            v2 = v4 = 0;\n        }\n        if (v2) {\n            _aDeposit[msg.sender] = stor_b;\n            _aDeposit[msg.sender] = 0;\n        }\n        v5 = 0x18ff(varg0, this);\n        if (owner_f[msg.sender]) {\n            v6 = 0x157f(varg0, 20);\n            _balanceOf[this] = v6;\n            assert(varg0 + _balanceOf[address(_referral[msg.sender])] >= _balanceOf[address(_referral[msg.sender])]);\n            _balanceOf[address(_referral[msg.sender])] += varg0;\n        } else {\n            assert(varg0 <= _balanceOf[this]);\n            _balanceOf[this] = _balanceOf[this] - varg0;\n            assert(varg0 + _balanceOf[address(_referral[msg.sender])] >= _balanceOf[address(_referral[msg.sender])]);\n            _balanceOf[address(_referral[msg.sender])] += varg0;\n            v7 = 0x157f(varg0 * 3, 100);\n            _balanceOf[this] = v7;\n            assert(varg0 * 3 / 100 + _balanceOf[address(_referral[address(address(_referral[msg.sender]))])] >= _balanceOf[address(_referral[address(address(_referral[msg.sender]))])]);\n            v8 = address(_referral[address(address(_referral[msg.sender]))]);\n            _balanceOf[v8] = varg0 * 3 / 100 + _balanceOf[address(_referral[address(address(_referral[msg.sender]))])];\n            if (1 < _referral[address(_referral[v8])]) {\n                v9 = 0x157f(varg0, 50);\n                _balanceOf[this] = v9;\n                assert(varg0 + _balanceOf[address(_referral[v8])] >= _balanceOf[address(_referral[v8])]);\n                _balanceOf[address(_referral[v8])] += varg0;\n            }\n            v10 = address(_referral[address(address(_referral[v8]))]);\n            if (2 < _referral[v10]) {\n                v11 = 0x157f(varg0, 100);\n                _balanceOf[this] = v11;\n                assert(varg0 + _balanceOf[address(v10)] >= _balanceOf[address(v10)]);\n                _balanceOf[address(v10)] += varg0;\n            }\n            if (3 < _referral[address(_referral[address(v10)])]) {\n                v12 = 0x157f(varg0, 200);\n                _balanceOf[this] = v12;\n                assert(varg0 + _balanceOf[address(_referral[address(v10)])] >= _balanceOf[address(_referral[address(v10)])]);\n                _balanceOf[address(_referral[address(v10)])] += varg0;\n            }\n            v13 = address(_referral[address(address(_referral[address(v10)]))]);\n            if (4 < _referral[v13]) {\n                v14 = 0x157f(varg0, 200);\n                _balanceOf[this] = v14;\n                assert(varg0 + _balanceOf[address(v13)] >= _balanceOf[address(v13)]);\n                _balanceOf[address(v13)] += varg0;\n            }\n        }\n    }\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4142520000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0x18ff(varg1, varg0);\n    return v0;\n}\n\nfunction SUPPLY() public nonPayable { \n    return 0xbebc200;\n}\n\nfunction care(uint256 varg0) public nonPayable { \n    assert(varg0 < owner_18[msg.sender]);\n    v0 = address(STORAGE[keccak256(keccak256(msg.sender, 24)) + varg0]);\n    v1 = new bytes[](v2);\n    v2 = (_setinfo[v0] & ~0 + (!(_setinfo[v0] & 0x1) << 8)) >> 1;\n    v3 = v4 = v1.data;\n    if (v2) {\n        if (31 < v2) {\n            do {\n                MEM[v3] = STORAGE[v5];\n                v5 += 1;\n                v3 += 32;\n            } while (v4 + v2 <= v3);\n        } else {\n            MEM[v4] = _setinfo[v0] >> 8 << 8;\n        }\n    }\n    v6 = new bytes[](v7);\n    v7 = (_setinfo[v0] & ~0 + (!(_setinfo[v0] & 0x1) << 8)) >> 1;\n    v8 = v9 = v6.data;\n    if (v7) {\n        if (31 < v7) {\n            do {\n                MEM[v8] = STORAGE[v10];\n                v10 += 1;\n                v8 += 32;\n            } while (v9 + v7 <= v8);\n        } else {\n            MEM[v9] = _setinfo[v0] >> 8 << 8;\n        }\n    }\n    v11 = new bytes[](v12);\n    v12 = (_getinfo[v0] & ~0 + (!(_getinfo[v0] & 0x1) << 8)) >> 1;\n    v13 = v14 = v11.data;\n    if (v12) {\n        if (31 < v12) {\n            do {\n                MEM[v13] = STORAGE[v15];\n                v15 += 1;\n                v13 += 32;\n            } while (v14 + v12 <= v13);\n        } else {\n            MEM[v14] = _getinfo[v0] >> 8 << 8;\n        }\n    }\n    v16 = new array[](v1.length);\n    v17 = v18 = 0;\n    while (v17 < v1.length) {\n        MEM[v17 + v16.data] = MEM[v17 + v1.data];\n        v17 += 32;\n    }\n    if (0x1f & v1.length) {\n        MEM[v1.length + v16.data - (0x1f & v1.length)] = ~(256 ** (32 - (0x1f & v1.length)) - 1) & MEM[v1.length + v16.data - (0x1f & v1.length)];\n    }\n    v19 = new array[](v6.length);\n    v20 = v21 = 0;\n    while (v20 < v6.length) {\n        MEM[v20 + v19.data] = MEM[v20 + v6.data];\n        v20 += 32;\n    }\n    if (0x1f & v6.length) {\n        MEM[v6.length + v19.data - (0x1f & v6.length)] = ~(256 ** (32 - (0x1f & v6.length)) - 1) & MEM[v6.length + v19.data - (0x1f & v6.length)];\n    }\n    v22 = new array[](v11.length);\n    v23 = v24 = 0;\n    while (v23 < v11.length) {\n        MEM[v23 + v22.data] = MEM[v23 + v11.data];\n        v23 += 32;\n    }\n    v25 = v26 = v11.length + v22.data;\n    if (0x1f & v11.length) {\n        MEM[v26 - (0x1f & v11.length)] = ~(256 ** (32 - (0x1f & v11.length)) - 1) & MEM[v26 - (0x1f & v11.length)];\n    }\n    return v16, v19, v22, owner_f[v0];\n}\n\nfunction TOKEN_DECIMALS_UINT8() public nonPayable { \n    return 4;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(varg1 + _allowance[varg0] >= _allowance[varg0]);\n    _allowance[varg0] += varg1;\n    emit Approval(msg.sender, varg0, varg1 + _allowance[varg0]);\n    return 1;\n}\n\nfunction gettimeback() public nonPayable { \n    v0 = 0x1e62(owner_f[msg.sender]);\n    assert(_gettimeback[msg.sender] <= v0);\n    return v0 - _gettimeback[msg.sender];\n}\n\nfunction sendabr(uint256 varg0) public nonPayable { \n    require(msg.sender == _sendabr, 32, 0);\n    v0 = 0x18ff(varg0, this);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction setadmin(address varg0) public nonPayable { \n    require(msg.sender == _sendabr, 32, 0);\n    _setcoe = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xfcb5984 == function_selector) {\n            getprice();\n        } else if (0x119f8747 == function_selector) {\n            support();\n        } else if (0x158ef93e == function_selector) {\n            initialized();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x18821400 == function_selector) {\n            TOKEN_NAME();\n        } else if (0x1a2d8629 == function_selector) {\n            getinfo();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x25630c9f == function_selector) {\n            fwithdrawal(uint256);\n        } else if (0x2a905318 == function_selector) {\n            TOKEN_SYMBOL();\n        } else if (0x2ddbd13a == function_selector) {\n            total();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3d2ce522 == function_selector) {\n            setdaily(uint256);\n        } else if (0x4e71d92d == function_selector) {\n            claim();\n        } else if (0x54aca207 == function_selector) {\n            iwithdrawal(uint256);\n        } else if (0x56780085 == function_selector) {\n            TOKEN_DECIMAL_MULTIPLIER();\n        } else if (0x5b624b6e == function_selector) {\n            setinfo(string,string,string);\n        } else if (0x5b7f415c == function_selector) {\n            TOKEN_DECIMALS();\n        } else if (0x60f2f673 == function_selector) {\n            setcoe(uint256);\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x70e44c6a == function_selector) {\n            Withdrawal();\n        } else if (0x7247959a == function_selector) {\n            referral(address);\n        } else if (0x84317008 == function_selector) {\n            setprice(uint256,uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x94b918de == function_selector) {\n            swap(uint256);\n        } else if (0x9519e398 == function_selector) {\n            aDeposit(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xc50497ae == function_selector) {\n            SUPPLY();\n        } else if (0xc803f981 == function_selector) {\n            care(uint256);\n        } else if (0xcf3b1967 == function_selector) {\n            TOKEN_DECIMALS_UINT8();\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdb21fc9c == function_selector) {\n            gettimeback();\n        } else if (0xdd17e151 == function_selector) {\n            sendabr(uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xdded49cb == function_selector) {\n            setadmin(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 15.112263917922974,
	"usage": {
		"completion_tokens": 354,
		"prompt_tokens": 8578,
		"total_tokens": 8932
	}
}