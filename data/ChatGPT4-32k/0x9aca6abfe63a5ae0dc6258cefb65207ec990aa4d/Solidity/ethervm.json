{
	"address": "0x9aca6abfe63a5ae0dc6258cefb65207ec990aa4d",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code for the decompiled code:\n\n```Solidity\npragma solidity >=0.4.22 <0.8.0;\n\ncontract Contract {\n    string public name = \"DigiPulse\";\n    string public symbol = \"DGT\";\n    uint8 public decimals = 8;\n    uint256 public totalSupply;\n    address public owner;\n    bool public finalised = false;\n    mapping(address => uint256) public balances;\n    mapping(address => uint256) public ethBalances; \n    \n    function withdrawFundsToOwner(uint256 amount) public {\n        require(finalised); \n        require(amount <= address(this).balance);\n        msg.sender.transfer(amount);\n    }\n    \n    function refundEther() public {\n        uint256 ethBalance = ethBalances[msg.sender];\n        require(finalised);\n        require(ethBalance > 0);\n        msg.sender.transfer(ethBalance);\n        ethBalances[msg.sender] = 0;\n    }\n    \n    function balanceOf(address _account) public view returns (uint256) {\n        return balances[_account];\n    }\n    \n    function getBalanceInEth(address _account) public view returns (uint256) {\n        return ethBalances[_account];\n    }\n    \n    function finalise() public {\n        require(!finalised);\n        require(totalSupply >= 0x05ba8f69b34800);\n        finalised = true;\n    }\n    \n    function transfer(address _to, uint256 _value) public {\n        require(balances[msg.sender] >= _value);\n        require(balances[_to] + _value >= balances[_to]);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n    }\n    \n    function getRemainingSupply() public view returns (uint256) {\n        return 0x05ba8f69b34800 - totalSupply;\n    }\n}\n```\nThis contract is a simplified version of a token contract. It includes basic functions like `transfer`, `balanceOf` and `getBalanceInEth`. It also includes functions to withdraw funds to the owner and refund ether to users. The `finalise` function is used to make the contract immutable after certain conditions are met.\n\nPlease note that the provided decompiled code is incomplete and complex, so this contract might not fully represent the original one. It's also worth mentioning that the contract makes use of low-level operations and direct memory access, which is not common or recommended in high-level Solidity programming.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471957,
	"id": "chatcmpl-8MuizN2wRd5vgLhaG9zgpEouHVDS5",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00AC:\n            var var0 = 0x020c;\n            var var1 = 0x00;\n            var var2 = var1;\n            var var3 = var2;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = var5;\n            var var7 = var6;\n        \n            if (block.timestamp <= 0x59842980) { revert(memory[0x00:0x00]); }\n        \n            func_00C8(var1, var2, var3, var4, var5, var6, var7);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0221;\n                var2 = name();\n            \n            label_0221:\n                var temp0 = memory[0x40:0x60];\n                var3 = temp0;\n                memory[var3:var3 + 0x20] = 0x20;\n                var4 = var3;\n                var temp1 = var4 + 0x20;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var5 = temp1 + 0x20;\n                var6 = temp2 + 0x20;\n                var7 = memory[temp2:temp2 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_025E:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_024E:\n                    var temp8 = var11;\n                    memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                    var11 = temp8 + 0x20;\n                \n                    if (var11 >= var8) { goto label_025E; }\n                    else { goto label_024E; }\n                }\n            } else if (var0 == 0x12f20e2a) {\n                // Dispatch table entry for withdrawFundsToOwner(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020c;\n                var2 = msg.data[0x04:0x24];\n                withdrawFundsToOwner(var2);\n                stop();\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c4;\n                var1 = totalSupply();\n            \n            label_02C4:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var1;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02e9;\n                var2 = decimals();\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2 & 0xff;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x560ed6a1) {\n                // Dispatch table entry for refundEther()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020c;\n                refundEther();\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_02C4;\n            } else if (var0 == 0x7bd703e8) {\n                // Dispatch table entry for getBalanceInEth(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = getBalanceInEth(var2);\n                goto label_02C4;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0221;\n                var2 = symbol();\n                goto label_0221;\n            } else if (var0 == 0xa4399263) {\n                // Dispatch table entry for finalise()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020c;\n                finalise();\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020c;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                transfer(var2, var3);\n                stop();\n            } else if (var0 == 0xe4b7fb73) {\n                // Dispatch table entry for getRemainingSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c4;\n                var1 = getRemainingSupply();\n                goto label_02C4;\n            } else { goto label_00AC; }\n        }\n    }\n    \n    function func_00C8(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) {\n        if (block.timestamp >= 0x59a8a2ff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x04] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!msg.value) { revert(memory[0x00:0x00]); }\n    \n        arg0 = msg.value / 0x02540be400 * 0xfa;\n    \n        if (arg0 >= 0x05ba8f69b34800 - storage[0x03]) { revert(memory[0x00:0x00]); }\n    \n        arg3 = 0x00;\n    \n        if (arg3 & 0xff >= 0x04) {\n        label_01AB:\n            var temp0 = arg1;\n            storage[0x03] = temp0 + storage[0x03];\n            var temp1 = msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x01;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = msg.value + storage[temp2];\n            memory[0x20:0x40] = 0x00;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = temp0 + storage[temp3];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x08a4:0x08c4];\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp0;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [memory[0x00:0x20], 0x00, msg.sender]);\n            return;\n        } else {\n        label_0132:\n            var temp8 = arg2 + 0x01550f7dca7000;\n            arg2 = temp8;\n            arg4 = 0x01550f7dca7000;\n            arg5 = 0x73 - arg3 * 0x05;\n        \n            if (storage[0x03] >= arg2) { goto label_019F; }\n        \n            if (!arg0) { goto label_01AB; }\n        \n            arg6 = arg0 - arg2 + storage[0x03];\n        \n            if (arg6 i<= 0x00) {\n                arg1 = arg1 + (arg0 * (arg5 & 0xff)) / 0x64;\n                arg0 = 0x00;\n                arg3 = arg3 + 0x01;\n                arg6 = arg6;\n            \n            label_0125:\n            \n                if (arg3 & 0xff >= 0x04) { goto label_01AB; }\n                else { goto label_0132; }\n            } else {\n                arg1 = arg1 + ((arg5 & 0xff) * (arg0 - arg6)) / 0x64;\n                arg0 = arg6;\n            \n            label_019F:\n                arg6 = arg6;\n                arg3 = arg3 + 0x01;\n                goto label_0125;\n            }\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x09;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4469676950756c73650000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function withdrawFundsToOwner(var arg0) {\n        if (!(storage[0x04] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (address(this).balance < arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(storage[0x02] & 0x02 ** 0xa0 - 0x01).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x03]; }\n    \n    function decimals() returns (var r0) { return 0x08; }\n    \n    function refundEther() {\n        var var0 = 0x00;\n    \n        if (!(storage[0x04] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = var0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(temp0).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d, msg.sender]);\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function getBalanceInEth(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4447540000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function finalise() {\n        if (storage[0x04] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x04] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = block.timestamp > 0x59a8a2ff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_0686:\n        \n            if (address(this).balance >= 0x01b1ae4d6e2ef5000000) {\n                var0 = 0x06bc;\n                func_078B();\n                var0 = 0x06c4;\n                func_0805();\n                storage[0x04] = (storage[0x04] & ~0xff00) | 0x0100;\n            \n            label_06D4:\n                return;\n            } else {\n                storage[0x04] = (storage[0x04] & ~0xff) | 0x01;\n                goto label_06D4;\n            }\n        } else if (storage[0x03] >= 0x05ba8f69b34800) { goto label_0686; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transfer(var arg0, var arg1) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (temp0 + arg1 <= temp0) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = temp1 & msg.sender;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x00;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = arg1;\n        storage[temp3] = storage[temp3] - temp4;\n        var temp5 = arg0 & temp1;\n        memory[0x00:0x20] = temp5;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        storage[temp6] = temp4 + storage[temp6];\n        var temp7 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x08a4:0x08c4];\n        var temp8 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp7;\n        var temp9 = memory[0x40:0x60];\n        memory[temp9:temp9 + 0x20] = temp4;\n        var temp10 = memory[0x40:0x60];\n        log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [memory[0x00:0x20], msg.sender, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function getRemainingSupply() returns (var r0) { return 0x05ba8f69b34800 - storage[0x03]; }\n    \n    function func_078B() {\n        memory[0x00:0x20] = 0x8776a6fa922e65efcea2371692fefe4ab7c933ab;\n        memory[0x20:0x40] = 0x00;\n        storage[0x54b86b24e0739953f0796bb6750fe9b0cc308d045b20e7ada7524ca2b1c4aa81] = storage[0x54b86b24e0739953f0796bb6750fe9b0cc308d045b20e7ada7524ca2b1c4aa81] + 0xdfebe4bc15;\n        storage[0x03] = storage[0x03] + 0xdfebe4bc15;\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x08a4:0x08c4];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = 0xdfebe4bc15;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [memory[0x00:0x20], 0x00, 0x8776a6fa922e65efcea2371692fefe4ab7c933ab]);\n    }\n    \n    function func_0805() {\n        var var0 = 0x00;\n        var var1 = 0x64;\n        var var2 = 0x62;\n        var var3 = storage[0x03] * 0x64;\n    \n        if (!var2) { assert(); }\n    \n        var2 = var3 / var2 * 0x02;\n    \n        if (!var1) { assert(); }\n    \n        memory[0x00:0x20] = 0x663f98e9c37b9bba460d4d80ca48ef039eae4052;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = var2 / var1;\n        storage[0x9515311a1bc0dcec2209378e0cc30da473dc304936bce99a2a09e48741c7647e] = temp0 + storage[0x9515311a1bc0dcec2209378e0cc30da473dc304936bce99a2a09e48741c7647e];\n        storage[0x03] = temp0 + storage[0x03];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x08a4:0x08c4];\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp1;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [memory[0x00:0x20], 0x00, 0x663f98e9c37b9bba460d4d80ca48ef039eae4052]);\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00AC:\n            var var0 = 0x020c;\n            var var1 = 0x00;\n            var var2 = var1;\n            var var3 = var2;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = var5;\n            var var7 = var6;\n        \n            if (block.timestamp <= 0x59842980) { revert(memory[0x00:0x00]); }\n        \n            func_00C8(var1, var2, var3, var4, var5, var6, var7);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0221;\n                var2 = name();\n            \n            label_0221:\n                var temp0 = memory[0x40:0x60];\n                var3 = temp0;\n                memory[var3:var3 + 0x20] = 0x20;\n                var4 = var3;\n                var temp1 = var4 + 0x20;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var5 = temp1 + 0x20;\n                var6 = temp2 + 0x20;\n                var7 = memory[temp2:temp2 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_025E:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_024E:\n                    var temp8 = var11;\n                    memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                    var11 = temp8 + 0x20;\n                \n                    if (var11 >= var8) { goto label_025E; }\n                    else { goto label_024E; }\n                }\n            } else if (var0 == 0x12f20e2a) {\n                // Dispatch table entry for withdrawFundsToOwner(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020c;\n                var2 = msg.data[0x04:0x24];\n                withdrawFundsToOwner(var2);\n                stop();\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c4;\n                var1 = totalSupply();\n            \n            label_02C4:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var1;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02e9;\n                var2 = decimals();\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2 & 0xff;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x560ed6a1) {\n                // Dispatch table entry for refundEther()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020c;\n                refundEther();\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_02C4;\n            } else if (var0 == 0x7bd703e8) {\n                // Dispatch table entry for getBalanceInEth(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = getBalanceInEth(var2);\n                goto label_02C4;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0221;\n                var2 = symbol();\n                goto label_0221;\n            } else if (var0 == 0xa4399263) {\n                // Dispatch table entry for finalise()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020c;\n                finalise();\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020c;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                transfer(var2, var3);\n                stop();\n            } else if (var0 == 0xe4b7fb73) {\n                // Dispatch table entry for getRemainingSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c4;\n                var1 = getRemainingSupply();\n                goto label_02C4;\n            } else { goto label_00AC; }\n        }\n    }\n    \n    function func_00C8(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) {\n        if (block.timestamp >= 0x59a8a2ff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x04] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!msg.value) { revert(memory[0x00:0x00]); }\n    \n        arg0 = msg.value / 0x02540be400 * 0xfa;\n    \n        if (arg0 >= 0x05ba8f69b34800 - storage[0x03]) { revert(memory[0x00:0x00]); }\n    \n        arg3 = 0x00;\n    \n        if (arg3 & 0xff >= 0x04) {\n        label_01AB:\n            var temp0 = arg1;\n            storage[0x03] = temp0 + storage[0x03];\n            var temp1 = msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x01;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = msg.value + storage[temp2];\n            memory[0x20:0x40] = 0x00;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = temp0 + storage[temp3];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x08a4:0x08c4];\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp0;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [memory[0x00:0x20], 0x00, msg.sender]);\n            return;\n        } else {\n        label_0132:\n            var temp8 = arg2 + 0x01550f7dca7000;\n            arg2 = temp8;\n            arg4 = 0x01550f7dca7000;\n            arg5 = 0x73 - arg3 * 0x05;\n        \n            if (storage[0x03] >= arg2) { goto label_019F; }\n        \n            if (!arg0) { goto label_01AB; }\n        \n            arg6 = arg0 - arg2 + storage[0x03];\n        \n            if (arg6 i<= 0x00) {\n                arg1 = arg1 + (arg0 * (arg5 & 0xff)) / 0x64;\n                arg0 = 0x00;\n                arg3 = arg3 + 0x01;\n                arg6 = arg6;\n            \n            label_0125:\n            \n                if (arg3 & 0xff >= 0x04) { goto label_01AB; }\n                else { goto label_0132; }\n            } else {\n                arg1 = arg1 + ((arg5 & 0xff) * (arg0 - arg6)) / 0x64;\n                arg0 = arg6;\n            \n            label_019F:\n                arg6 = arg6;\n                arg3 = arg3 + 0x01;\n                goto label_0125;\n            }\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x09;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4469676950756c73650000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function withdrawFundsToOwner(var arg0) {\n        if (!(storage[0x04] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (address(this).balance < arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(storage[0x02] & 0x02 ** 0xa0 - 0x01).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x03]; }\n    \n    function decimals() returns (var r0) { return 0x08; }\n    \n    function refundEther() {\n        var var0 = 0x00;\n    \n        if (!(storage[0x04] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = var0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(temp0).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d, msg.sender]);\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function getBalanceInEth(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4447540000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function finalise() {\n        if (storage[0x04] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x04] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = block.timestamp > 0x59a8a2ff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_0686:\n        \n            if (address(this).balance >= 0x01b1ae4d6e2ef5000000) {\n                var0 = 0x06bc;\n                func_078B();\n                var0 = 0x06c4;\n                func_0805();\n                storage[0x04] = (storage[0x04] & ~0xff00) | 0x0100;\n            \n            label_06D4:\n                return;\n            } else {\n                storage[0x04] = (storage[0x04] & ~0xff) | 0x01;\n                goto label_06D4;\n            }\n        } else if (storage[0x03] >= 0x05ba8f69b34800) { goto label_0686; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transfer(var arg0, var arg1) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (temp0 + arg1 <= temp0) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = temp1 & msg.sender;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x00;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = arg1;\n        storage[temp3] = storage[temp3] - temp4;\n        var temp5 = arg0 & temp1;\n        memory[0x00:0x20] = temp5;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        storage[temp6] = temp4 + storage[temp6];\n        var temp7 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x08a4:0x08c4];\n        var temp8 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp7;\n        var temp9 = memory[0x40:0x60];\n        memory[temp9:temp9 + 0x20] = temp4;\n        var temp10 = memory[0x40:0x60];\n        log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [memory[0x00:0x20], msg.sender, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function getRemainingSupply() returns (var r0) { return 0x05ba8f69b34800 - storage[0x03]; }\n    \n    function func_078B() {\n        memory[0x00:0x20] = 0x8776a6fa922e65efcea2371692fefe4ab7c933ab;\n        memory[0x20:0x40] = 0x00;\n        storage[0x54b86b24e0739953f0796bb6750fe9b0cc308d045b20e7ada7524ca2b1c4aa81] = storage[0x54b86b24e0739953f0796bb6750fe9b0cc308d045b20e7ada7524ca2b1c4aa81] + 0xdfebe4bc15;\n        storage[0x03] = storage[0x03] + 0xdfebe4bc15;\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x08a4:0x08c4];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = 0xdfebe4bc15;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [memory[0x00:0x20], 0x00, 0x8776a6fa922e65efcea2371692fefe4ab7c933ab]);\n    }\n    \n    function func_0805() {\n        var var0 = 0x00;\n        var var1 = 0x64;\n        var var2 = 0x62;\n        var var3 = storage[0x03] * 0x64;\n    \n        if (!var2) { assert(); }\n    \n        var2 = var3 / var2 * 0x02;\n    \n        if (!var1) { assert(); }\n    \n        memory[0x00:0x20] = 0x663f98e9c37b9bba460d4d80ca48ef039eae4052;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = var2 / var1;\n        storage[0x9515311a1bc0dcec2209378e0cc30da473dc304936bce99a2a09e48741c7647e] = temp0 + storage[0x9515311a1bc0dcec2209378e0cc30da473dc304936bce99a2a09e48741c7647e];\n        storage[0x03] = temp0 + storage[0x03];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x08a4:0x08c4];\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp1;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [memory[0x00:0x20], 0x00, 0x663f98e9c37b9bba460d4d80ca48ef039eae4052]);\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00AC:\n            var var0 = 0x020c;\n            var var1 = 0x00;\n            var var2 = var1;\n            var var3 = var2;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = var5;\n            var var7 = var6;\n        \n            if (block.timestamp <= 0x59842980) { revert(memory[0x00:0x00]); }\n        \n            func_00C8(var1, var2, var3, var4, var5, var6, var7);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0221;\n                var2 = name();\n            \n            label_0221:\n                var temp0 = memory[0x40:0x60];\n                var3 = temp0;\n                memory[var3:var3 + 0x20] = 0x20;\n                var4 = var3;\n                var temp1 = var4 + 0x20;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var5 = temp1 + 0x20;\n                var6 = temp2 + 0x20;\n                var7 = memory[temp2:temp2 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_025E:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_024E:\n                    var temp8 = var11;\n                    memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                    var11 = temp8 + 0x20;\n                \n                    if (var11 >= var8) { goto label_025E; }\n                    else { goto label_024E; }\n                }\n            } else if (var0 == 0x12f20e2a) {\n                // Dispatch table entry for withdrawFundsToOwner(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020c;\n                var2 = msg.data[0x04:0x24];\n                withdrawFundsToOwner(var2);\n                stop();\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c4;\n                var1 = totalSupply();\n            \n            label_02C4:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var1;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02e9;\n                var2 = decimals();\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2 & 0xff;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x560ed6a1) {\n                // Dispatch table entry for refundEther()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020c;\n                refundEther();\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_02C4;\n            } else if (var0 == 0x7bd703e8) {\n                // Dispatch table entry for getBalanceInEth(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = getBalanceInEth(var2);\n                goto label_02C4;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0221;\n                var2 = symbol();\n                goto label_0221;\n            } else if (var0 == 0xa4399263) {\n                // Dispatch table entry for finalise()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020c;\n                finalise();\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020c;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                transfer(var2, var3);\n                stop();\n            } else if (var0 == 0xe4b7fb73) {\n                // Dispatch table entry for getRemainingSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c4;\n                var1 = getRemainingSupply();\n                goto label_02C4;\n            } else { goto label_00AC; }\n        }\n    }\n    \n    function func_00C8(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) {\n        if (block.timestamp >= 0x59a8a2ff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x04] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!msg.value) { revert(memory[0x00:0x00]); }\n    \n        arg0 = msg.value / 0x02540be400 * 0xfa;\n    \n        if (arg0 >= 0x05ba8f69b34800 - storage[0x03]) { revert(memory[0x00:0x00]); }\n    \n        arg3 = 0x00;\n    \n        if (arg3 & 0xff >= 0x04) {\n        label_01AB:\n            var temp0 = arg1;\n            storage[0x03] = temp0 + storage[0x03];\n            var temp1 = msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x01;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = msg.value + storage[temp2];\n            memory[0x20:0x40] = 0x00;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = temp0 + storage[temp3];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x08a4:0x08c4];\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp0;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [memory[0x00:0x20], 0x00, msg.sender]);\n            return;\n        } else {\n        label_0132:\n            var temp8 = arg2 + 0x01550f7dca7000;\n            arg2 = temp8;\n            arg4 = 0x01550f7dca7000;\n            arg5 = 0x73 - arg3 * 0x05;\n        \n            if (storage[0x03] >= arg2) { goto label_019F; }\n        \n            if (!arg0) { goto label_01AB; }\n        \n            arg6 = arg0 - arg2 + storage[0x03];\n        \n            if (arg6 i<= 0x00) {\n                arg1 = arg1 + (arg0 * (arg5 & 0xff)) / 0x64;\n                arg0 = 0x00;\n                arg3 = arg3 + 0x01;\n                arg6 = arg6;\n            \n            label_0125:\n            \n                if (arg3 & 0xff >= 0x04) { goto label_01AB; }\n                else { goto label_0132; }\n            } else {\n                arg1 = arg1 + ((arg5 & 0xff) * (arg0 - arg6)) / 0x64;\n                arg0 = arg6;\n            \n            label_019F:\n                arg6 = arg6;\n                arg3 = arg3 + 0x01;\n                goto label_0125;\n            }\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x09;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4469676950756c73650000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function withdrawFundsToOwner(var arg0) {\n        if (!(storage[0x04] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (address(this).balance < arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(storage[0x02] & 0x02 ** 0xa0 - 0x01).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x03]; }\n    \n    function decimals() returns (var r0) { return 0x08; }\n    \n    function refundEther() {\n        var var0 = 0x00;\n    \n        if (!(storage[0x04] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = var0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(temp0).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d, msg.sender]);\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function getBalanceInEth(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4447540000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function finalise() {\n        if (storage[0x04] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x04] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = block.timestamp > 0x59a8a2ff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_0686:\n        \n            if (address(this).balance >= 0x01b1ae4d6e2ef5000000) {\n                var0 = 0x06bc;\n                func_078B();\n                var0 = 0x06c4;\n                func_0805();\n                storage[0x04] = (storage[0x04] & ~0xff00) | 0x0100;\n            \n            label_06D4:\n                return;\n            } else {\n                storage[0x04] = (storage[0x04] & ~0xff) | 0x01;\n                goto label_06D4;\n            }\n        } else if (storage[0x03] >= 0x05ba8f69b34800) { goto label_0686; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transfer(var arg0, var arg1) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (temp0 + arg1 <= temp0) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = temp1 & msg.sender;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x00;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = arg1;\n        storage[temp3] = storage[temp3] - temp4;\n        var temp5 = arg0 & temp1;\n        memory[0x00:0x20] = temp5;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        storage[temp6] = temp4 + storage[temp6];\n        var temp7 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x08a4:0x08c4];\n        var temp8 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp7;\n        var temp9 = memory[0x40:0x60];\n        memory[temp9:temp9 + 0x20] = temp4;\n        var temp10 = memory[0x40:0x60];\n        log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [memory[0x00:0x20], msg.sender, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function getRemainingSupply() returns (var r0) { return 0x05ba8f69b34800 - storage[0x03]; }\n    \n    function func_078B() {\n        memory[0x00:0x20] = 0x8776a6fa922e65efcea2371692fefe4ab7c933ab;\n        memory[0x20:0x40] = 0x00;\n        storage[0x54b86b24e0739953f0796bb6750fe9b0cc308d045b20e7ada7524ca2b1c4aa81] = storage[0x54b86b24e0739953f0796bb6750fe9b0cc308d045b20e7ada7524ca2b1c4aa81] + 0xdfebe4bc15;\n        storage[0x03] = storage[0x03] + 0xdfebe4bc15;\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x08a4:0x08c4];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = 0xdfebe4bc15;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [memory[0x00:0x20], 0x00, 0x8776a6fa922e65efcea2371692fefe4ab7c933ab]);\n    }\n    \n    function func_0805() {\n        var var0 = 0x00;\n        var var1 = 0x64;\n        var var2 = 0x62;\n        var var3 = storage[0x03] * 0x64;\n    \n        if (!var2) { assert(); }\n    \n        var2 = var3 / var2 * 0x02;\n    \n        if (!var1) { assert(); }\n    \n        memory[0x00:0x20] = 0x663f98e9c37b9bba460d4d80ca48ef039eae4052;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = var2 / var1;\n        storage[0x9515311a1bc0dcec2209378e0cc30da473dc304936bce99a2a09e48741c7647e] = temp0 + storage[0x9515311a1bc0dcec2209378e0cc30da473dc304936bce99a2a09e48741c7647e];\n        storage[0x03] = temp0 + storage[0x03];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x08a4:0x08c4];\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp1;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [memory[0x00:0x20], 0x00, 0x663f98e9c37b9bba460d4d80ca48ef039eae4052]);\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 32.95258951187134,
	"usage": {
		"completion_tokens": 512,
		"prompt_tokens": 5365,
		"total_tokens": 5877
	}
}