{
	"address": "0xe5f1c08e024388fa5925c5f64e9d2dc97f1d9855",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the decompiled code provided, it appears that the original Solidity contract may have been a type of ERC721 token contract. However, it's important to note that the decompiler used for this task has added a number of additional checks and conditions that are not typically present in standard token contracts, and certain elements of the original contract (such as the function names) cannot be accurately determined from the decompiled code. \n\nThe below is an attempt to represent the contract in Solidity:\n\n``` solidity\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract MyContract is ERC721 {\n    event Immutable_Multihash(address indexed owner, bytes data, uint256 id);\n\n    mapping (uint256 => uint256) private _function_selector;\n    mapping (address => uint256) private _owner_e;\n    mapping (address => uint256) private _owner_f;\n\n    constructor() ERC721(\"MyToken\", \"MTK\") {}\n\n    function someFunction(bytes4 function_selector, uint256 varg1, uint256 varg2, uint256 varg3, uint256 varg4) public payable {\n        require(msg.data.length >= 4);\n        \n        // The rest of the function body should contain the logic determined by the function_selector.\n        // This could be a series of if/else statements or a switch statement.\n        // From the provided decompiled code, it's unclear what these conditions are meant to do.\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner_e[msg.sender]);\n        _owner_f[msg.sender] = 1;\n        _owner_e[msg.sender] = 0;\n        _owner_e[newOwner] = 1;\n    }\n\n    function _mint(address to, uint256 tokenId) internal override {\n        super._mint(to, tokenId);\n        _function_selector[tokenId] = 1;\n    }\n}\n```\nPlease note that this code is not complete and is a rough translation of the decompiled code. It should not be used without a thorough understanding of what each function is supposed to do.",
				"role": "assistant"
			}
		}
	],
	"created": 1701486067,
	"id": "chatcmpl-8RAXbpxmASYXTGimDdalo1lovhspx",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2022.11.21 05:17 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] array_0; // STORAGE[0x0]\nuint256[] array_1; // STORAGE[0x1]\nuint256[] array_2; // STORAGE[0x2]\nuint256[] array_5; // STORAGE[0x5]\nuint256[] array_6; // STORAGE[0x6]\nuint256 owner_e; // STORAGE[0xe]\nuint256 owner_f; // STORAGE[0xf]\nuint256 ___function_selector__; // STORAGE[0x10]\n\n// Events\nApproval(address, address, uint256);\nApprovalForAll(address, address, bool);\nImmutable_Multihash(address, bytes, uint256);\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector, uint256 varg1, uint256 varg2, uint256 varg3, uint256 varg4) public payable { \n    if (msg.data.length >= 4) {\n        MEM[96] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        MEM[128] = 0x12a05f1fffffffffffffffffffffffffdabf41c00;\n        MEM[160] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n        if (function_selector != 0x18160ddd) {\n            if (function_selector != 0xf1753550) {\n                if (function_selector != 0x70a08231) {\n                    if (function_selector != 0x6352211e) {\n                        if (function_selector != 0x4f6ccce7) {\n                            if (function_selector != 0x2f745c59) {\n                                if (function_selector != 0x81812fc) {\n                                    if (function_selector != 0x3bd18a3b) {\n                                        if (function_selector != 0x6efacc1c) {\n                                            if (function_selector != 0x12d81afb) {\n                                                if (function_selector != 0xe985e9c5) {\n                                                    if (function_selector != 0x23b872dd) {\n                                                        if (function_selector != 0x42842e0e) {\n                                                            if (function_selector != 0xb88d4fde) {\n                                                                if (function_selector != 0x95ea7b3) {\n                                                                    if (function_selector != 0x6de53001) {\n                                                                        if (function_selector != 0xa22cb465) {\n                                                                            if (function_selector != 0x51927028) {\n                                                                                if (function_selector != 0x6ebd4607) {\n                                                                                    if (function_selector != 0x98cd6153) {\n                                                                                        if (function_selector != 0xfe475f6b) {\n                                                                                            if (function_selector != 0xbc04f0af) {\n                                                                                                if (function_selector != 0x6fdde03) {\n                                                                                                    if (function_selector != 0x95d89b41) {\n                                                                                                        if (function_selector == 0x3c130d90) {\n                                                                                                            require(!msg.value);\n                                                                                                            while (0 > STORAGE[keccak256(2)] + 32) {\n                                                                                                                MEM[384] = array_2[0];\n                                                                                                                MEM[288] = 1;\n                                                                                                                if (3 != 1) {\n                                                                                                                    break;\n                                                                                                                }\n                                                                                                            }\n                                                                                                            CALLDATACOPY(416 + MEM[384], msg.data.length, MEM[384] + 31 - (MEM[384] - 1) % 32 - MEM[384]);\n                                                                                                            return 32;\n                                                                                                        }\n                                                                                                    } else {\n                                                                                                        require(!msg.value);\n                                                                                                        while (0 > STORAGE[keccak256(1)] + 32) {\n                                                                                                            MEM[384] = array_1[0];\n                                                                                                            MEM[288] = 1;\n                                                                                                            if (2 != 1) {\n                                                                                                                break;\n                                                                                                            }\n                                                                                                        }\n                                                                                                        CALLDATACOPY(416 + MEM[384], msg.data.length, MEM[384] + 31 - (MEM[384] - 1) % 32 - MEM[384]);\n                                                                                                        return 32;\n                                                                                                    }\n                                                                                                } else {\n                                                                                                    require(!msg.value);\n                                                                                                    while (0 > STORAGE[keccak256(0)] + 32) {\n                                                                                                        MEM[384] = array_0[0];\n                                                                                                        MEM[288] = 1;\n                                                                                                        if (3 != 1) {\n                                                                                                            break;\n                                                                                                        }\n                                                                                                    }\n                                                                                                    CALLDATACOPY(416 + MEM[384], msg.data.length, MEM[384] + 31 - (MEM[384] - 1) % 32 - MEM[384]);\n                                                                                                    return 32;\n                                                                                                }\n                                                                                            } else {\n                                                                                                require(!msg.value);\n                                                                                                require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                                                                require(msg.sender == owner_e);\n                                                                                                require(varg2 >= 40);\n                                                                                                require(varg2 >= varg2 / 40);\n                                                                                                require(owner_e.code.size);\n                                                                                                require(this ^ owner_e);\n                                                                                                v0 = owner_e.transfer(owner_f, varg2 / 40).gas(msg.gas);\n                                                                                                require(v0);\n                                                                                                require(owner_e.code.size);\n                                                                                                require(this ^ owner_e);\n                                                                                                v1 = owner_e.burn(varg2 - varg2 / 40).gas(msg.gas);\n                                                                                                require(v1);\n                                                                                                require(MEM[576]);\n                                                                                                require(___function_selector__ + 1 >= ___function_selector__);\n                                                                                                ___function_selector__ = ___function_selector__ + 1;\n                                                                                                STORAGE[keccak256(7, ___function_selector__)] = varg2 - varg2 / 40;\n                                                                                                while (352 < 736) {\n                                                                                                }\n                                                                                                MEM[768] = 0xff5ce378;\n                                                                                                require(!STORAGE[keccak256(3, ___function_selector__)]);\n                                                                                                STORAGE[keccak256(3, ___function_selector__)] = varg1;\n                                                                                                STORAGE[keccak256(8, ___function_selector__)] = STORAGE[keccak256(11, varg1)];\n                                                                                                STORAGE[keccak256(keccak256(10, varg1), STORAGE[keccak256(11, varg1)])] = ___function_selector__;\n                                                                                                require(STORAGE[keccak256(11, varg1)] + 1 >= STORAGE[keccak256(11, varg1)]);\n                                                                                                STORAGE[keccak256(11, varg1)] = STORAGE[keccak256(11, varg1)] + 1;\n                                                                                            }\n                                                                                        } else {\n                                                                                            require(!msg.value);\n                                                                                            require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                                                            require(msg.sender == owner_f);\n                                                                                            owner_f = varg1;\n                                                                                            exit;\n                                                                                        }\n                                                                                    } else {\n                                                                                        require(!msg.value);\n                                                                                        CALLDATACOPY(320, 4 + varg1, 96);\n                                                                                        require(varg1.length <= 64);\n                                                                                        require(msg.sender == owner_f);\n                                                                                        while (0 > MEM[320] + 32) {\n                                                                                            array_2[0] = MEM[320];\n                                                                                            MEM[288] = 1;\n                                                                                            if (3 != 1) {\n                                                                                                break;\n                                                                                            }\n                                                                                        }\n                                                                                        exit;\n                                                                                    }\n                                                                                } else {\n                                                                                    require(!msg.value);\n                                                                                    CALLDATACOPY(320, 4 + varg1, 288);\n                                                                                    require(varg1.length <= 256);\n                                                                                    MEM[672] = 0x4cdc9549;\n                                                                                    v2 = v3 = 4659;\n                                                                                }\n                                                                            } else {\n                                                                                require(!msg.value);\n                                                                                require(varg1.length <= 256);\n                                                                                require(STORAGE[keccak256(3, varg2)] == msg.sender);\n                                                                                require(keccak256(MEM[0x160 len (MEM[0x140])]) ^ keccak256(MEM[0x2e0 len 0x0]));\n                                                                                while (0 > STORAGE[keccak256(keccak256(5, varg2))] + 32) {\n                                                                                    MEM[896] = array_5[0];\n                                                                                    MEM[288] = 1;\n                                                                                    if (9 != 1) {\n                                                                                        break;\n                                                                                    }\n                                                                                }\n                                                                                require(keccak256(MEM[928 len (STORAGE[keccak256(keccak256(5, varg2))])]) == keccak256(MEM[864 len 0]));\n                                                                                require(!STORAGE[keccak256(9, keccak256(MEM[352 len (MEM[320])]))]);\n                                                                                while (0 > MEM[320] + 32) {\n                                                                                    array_5[0] = MEM[320];\n                                                                                    MEM[288] = 1;\n                                                                                    if (9 != 1) {\n                                                                                        break;\n                                                                                    }\n                                                                                }\n                                                                                v4 = dataCopy(v5, v5, v5, v5, v5, v5, v5, v5, v5, v5, v5, v5, 0, v5, v5, v5, 0, v5, v5, v5, v5, v5, v5, v5, v5, v5, v5, v5, 32, v5, 32);\n                                                                                require(v4);\n                                                                                CALLDATACOPY(1344 + MEM[1312], msg.data.length, MEM[1312] + 31 - (MEM[1312] - 1) % 32 - MEM[1312]);\n                                                                                emit Immutable_Multihash(msg.sender, varg2);\n                                                                                exit;\n                                                                            }\n                                                                        } else {\n                                                                            require(!msg.value);\n                                                                            require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                                            require(varg2 < 2);\n                                                                            require(varg1 ^ msg.sender);\n                                                                            STORAGE[keccak256(keccak256(12, msg.sender), varg1)] = varg2;\n                                                                            emit ApprovalForAll(msg.sender, varg1, varg2);\n                                                                            exit;\n                                                                        }\n                                                                    } else {\n                                                                        require(!msg.value);\n                                                                        require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                                        require(STORAGE[keccak256(3, varg2)] ^ 0x0);\n                                                                        require(STORAGE[keccak256(3, varg2)] == msg.sender);\n                                                                        MEM[384] = 0x91127c1f;\n                                                                        require(STORAGE[keccak256(3, varg2)] == varg1);\n                                                                        if (STORAGE[keccak256(0x4, varg2)] ^ 0x0) {\n                                                                            STORAGE[keccak256(4, varg2)] = 0;\n                                                                        }\n                                                                    }\n                                                                } else {\n                                                                    require(!msg.value);\n                                                                    require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                                    require(STORAGE[keccak256(3, varg2)] ^ 0x0);\n                                                                    require(varg1 ^ STORAGE[keccak256(3, varg2)]);\n                                                                    require((STORAGE[keccak256(3, varg2)] == msg.sender) | STORAGE[keccak256(keccak256(0xc, STORAGE[keccak256(3, varg2)]), msg.sender)]);\n                                                                    STORAGE[keccak256(4, varg2)] = varg1;\n                                                                    emit Approval(STORAGE[keccak256(3, varg2)], varg1, varg2);\n                                                                    exit;\n                                                                }\n                                                            } else {\n                                                                CALLDATACOPY(320, 4 + varg4, 1056);\n                                                                require(varg4.length <= 1024);\n                                                                CALLDATACOPY(320, 4 + varg4, 1088);\n                                                            }\n                                                        } else {\n                                                            v6 = dataCopy();\n                                                            require(v6);\n                                                        }\n                                                        require(!msg.value);\n                                                        require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                        require(varg2 < 0x10000000000000000000000000000000000000000);\n                                                        while (352 < 1472) {\n                                                        }\n                                                        MEM[1504] = 0x92863fe;\n                                                        v7 = v8 = 3146;\n                                                    } else {\n                                                        require(!msg.value);\n                                                        require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                        require(varg2 < 0x10000000000000000000000000000000000000000);\n                                                        MEM[320] = 0x92863fe;\n                                                        v7 = v9 = 2859;\n                                                    }\n                                                    MEM[512] = 0x4cdc9549;\n                                                    v2 = v10 = 2239;\n                                                    v11 = (STORAGE[keccak256(3, v12)] == v13) | (v13 == STORAGE[keccak256(4, v12)]) | STORAGE[keccak256(keccak256(0xc, STORAGE[keccak256(3, v12)]), v13)];\n                                                } else {\n                                                    require(!msg.value);\n                                                    require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                    require(varg2 < 0x10000000000000000000000000000000000000000);\n                                                    return STORAGE[keccak256(keccak256(12, varg1), varg2)];\n                                                }\n                                            } else {\n                                                require(!msg.value);\n                                                require(STORAGE[keccak256(0x3, varg1)] ^ 0x0);\n                                                while (0 > STORAGE[keccak256(keccak256(6, varg1))] + 32) {\n                                                    MEM[416] = array_6[0];\n                                                    MEM[288] = 1;\n                                                    if (9 != 1) {\n                                                        break;\n                                                    }\n                                                }\n                                                CALLDATACOPY(448 + MEM[416], msg.data.length, MEM[416] + 31 - (MEM[416] - 1) % 32 - MEM[416]);\n                                                return 32;\n                                            }\n                                        } else {\n                                            require(!msg.value);\n                                            require(STORAGE[keccak256(0x3, varg1)] ^ 0x0);\n                                            while (0 > STORAGE[keccak256(keccak256(5, varg1))] + 32) {\n                                                MEM[416] = array_5[0];\n                                                MEM[288] = 1;\n                                                if (9 != 1) {\n                                                    break;\n                                                }\n                                            }\n                                            CALLDATACOPY(448 + MEM[416], msg.data.length, MEM[416] + 31 - (MEM[416] - 1) % 32 - MEM[416]);\n                                            return 32;\n                                        }\n                                    } else {\n                                        require(!msg.value);\n                                        require(STORAGE[keccak256(0x3, varg1)] ^ 0x0);\n                                        return STORAGE[keccak256(7, varg1)];\n                                    }\n                                } else {\n                                    require(!msg.value);\n                                    require(STORAGE[keccak256(0x3, varg1)] ^ 0x0);\n                                    return STORAGE[keccak256(4, varg1)];\n                                }\n                            } else {\n                                require(!msg.value);\n                                require(varg1 < 0x10000000000000000000000000000000000000000);\n                                require(varg1 ^ 0x0);\n                                require(varg2 < STORAGE[keccak256(11, varg1)]);\n                                return STORAGE[keccak256(keccak256(10, varg1), varg2)];\n                            }\n                        } else {\n                            require(!msg.value);\n                            require(varg1 < ___function_selector__);\n                            require(varg1 + 1 >= varg1);\n                            return varg1 + 1;\n                        }\n                    } else {\n                        require(!msg.value);\n                        require(STORAGE[keccak256(3, varg1)] ^ 0x0);\n                        return STORAGE[keccak256(3, varg1)];\n                    }\n                } else {\n                    require(!msg.value);\n                    require(varg1 < 0x10000000000000000000000000000000000000000);\n                    require(varg1 ^ 0x0);\n                    return STORAGE[keccak256(11, varg1)];\n                }\n            } else {\n                require(!msg.value);\n                return STORAGE[keccak256(13, varg1)];\n            }\n        } else {\n            require(!msg.value);\n            return ___function_selector__;\n        }\n    }\n    revert();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.11.21 05:17 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] array_0; // STORAGE[0x0]\nuint256[] array_1; // STORAGE[0x1]\nuint256[] array_2; // STORAGE[0x2]\nuint256[] array_5; // STORAGE[0x5]\nuint256[] array_6; // STORAGE[0x6]\nuint256 owner_e; // STORAGE[0xe]\nuint256 owner_f; // STORAGE[0xf]\nuint256 ___function_selector__; // STORAGE[0x10]\n\n// Events\nApproval(address, address, uint256);\nApprovalForAll(address, address, bool);\nImmutable_Multihash(address, bytes, uint256);\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector, uint256 varg1, uint256 varg2, uint256 varg3, uint256 varg4) public payable { \n    if (msg.data.length >= 4) {\n        MEM[96] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        MEM[128] = 0x12a05f1fffffffffffffffffffffffffdabf41c00;\n        MEM[160] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n        if (function_selector != 0x18160ddd) {\n            if (function_selector != 0xf1753550) {\n                if (function_selector != 0x70a08231) {\n                    if (function_selector != 0x6352211e) {\n                        if (function_selector != 0x4f6ccce7) {\n                            if (function_selector != 0x2f745c59) {\n                                if (function_selector != 0x81812fc) {\n                                    if (function_selector != 0x3bd18a3b) {\n                                        if (function_selector != 0x6efacc1c) {\n                                            if (function_selector != 0x12d81afb) {\n                                                if (function_selector != 0xe985e9c5) {\n                                                    if (function_selector != 0x23b872dd) {\n                                                        if (function_selector != 0x42842e0e) {\n                                                            if (function_selector != 0xb88d4fde) {\n                                                                if (function_selector != 0x95ea7b3) {\n                                                                    if (function_selector != 0x6de53001) {\n                                                                        if (function_selector != 0xa22cb465) {\n                                                                            if (function_selector != 0x51927028) {\n                                                                                if (function_selector != 0x6ebd4607) {\n                                                                                    if (function_selector != 0x98cd6153) {\n                                                                                        if (function_selector != 0xfe475f6b) {\n                                                                                            if (function_selector != 0xbc04f0af) {\n                                                                                                if (function_selector != 0x6fdde03) {\n                                                                                                    if (function_selector != 0x95d89b41) {\n                                                                                                        if (function_selector == 0x3c130d90) {\n                                                                                                            require(!msg.value);\n                                                                                                            while (0 > STORAGE[keccak256(2)] + 32) {\n                                                                                                                MEM[384] = array_2[0];\n                                                                                                                MEM[288] = 1;\n                                                                                                                if (3 != 1) {\n                                                                                                                    break;\n                                                                                                                }\n                                                                                                            }\n                                                                                                            CALLDATACOPY(416 + MEM[384], msg.data.length, MEM[384] + 31 - (MEM[384] - 1) % 32 - MEM[384]);\n                                                                                                            return 32;\n                                                                                                        }\n                                                                                                    } else {\n                                                                                                        require(!msg.value);\n                                                                                                        while (0 > STORAGE[keccak256(1)] + 32) {\n                                                                                                            MEM[384] = array_1[0];\n                                                                                                            MEM[288] = 1;\n                                                                                                            if (2 != 1) {\n                                                                                                                break;\n                                                                                                            }\n                                                                                                        }\n                                                                                                        CALLDATACOPY(416 + MEM[384], msg.data.length, MEM[384] + 31 - (MEM[384] - 1) % 32 - MEM[384]);\n                                                                                                        return 32;\n                                                                                                    }\n                                                                                                } else {\n                                                                                                    require(!msg.value);\n                                                                                                    while (0 > STORAGE[keccak256(0)] + 32) {\n                                                                                                        MEM[384] = array_0[0];\n                                                                                                        MEM[288] = 1;\n                                                                                                        if (3 != 1) {\n                                                                                                            break;\n                                                                                                        }\n                                                                                                    }\n                                                                                                    CALLDATACOPY(416 + MEM[384], msg.data.length, MEM[384] + 31 - (MEM[384] - 1) % 32 - MEM[384]);\n                                                                                                    return 32;\n                                                                                                }\n                                                                                            } else {\n                                                                                                require(!msg.value);\n                                                                                                require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                                                                require(msg.sender == owner_e);\n                                                                                                require(varg2 >= 40);\n                                                                                                require(varg2 >= varg2 / 40);\n                                                                                                require(owner_e.code.size);\n                                                                                                require(this ^ owner_e);\n                                                                                                v0 = owner_e.transfer(owner_f, varg2 / 40).gas(msg.gas);\n                                                                                                require(v0);\n                                                                                                require(owner_e.code.size);\n                                                                                                require(this ^ owner_e);\n                                                                                                v1 = owner_e.burn(varg2 - varg2 / 40).gas(msg.gas);\n                                                                                                require(v1);\n                                                                                                require(MEM[576]);\n                                                                                                require(___function_selector__ + 1 >= ___function_selector__);\n                                                                                                ___function_selector__ = ___function_selector__ + 1;\n                                                                                                STORAGE[keccak256(7, ___function_selector__)] = varg2 - varg2 / 40;\n                                                                                                while (352 < 736) {\n                                                                                                }\n                                                                                                MEM[768] = 0xff5ce378;\n                                                                                                require(!STORAGE[keccak256(3, ___function_selector__)]);\n                                                                                                STORAGE[keccak256(3, ___function_selector__)] = varg1;\n                                                                                                STORAGE[keccak256(8, ___function_selector__)] = STORAGE[keccak256(11, varg1)];\n                                                                                                STORAGE[keccak256(keccak256(10, varg1), STORAGE[keccak256(11, varg1)])] = ___function_selector__;\n                                                                                                require(STORAGE[keccak256(11, varg1)] + 1 >= STORAGE[keccak256(11, varg1)]);\n                                                                                                STORAGE[keccak256(11, varg1)] = STORAGE[keccak256(11, varg1)] + 1;\n                                                                                            }\n                                                                                        } else {\n                                                                                            require(!msg.value);\n                                                                                            require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                                                            require(msg.sender == owner_f);\n                                                                                            owner_f = varg1;\n                                                                                            exit;\n                                                                                        }\n                                                                                    } else {\n                                                                                        require(!msg.value);\n                                                                                        CALLDATACOPY(320, 4 + varg1, 96);\n                                                                                        require(varg1.length <= 64);\n                                                                                        require(msg.sender == owner_f);\n                                                                                        while (0 > MEM[320] + 32) {\n                                                                                            array_2[0] = MEM[320];\n                                                                                            MEM[288] = 1;\n                                                                                            if (3 != 1) {\n                                                                                                break;\n                                                                                            }\n                                                                                        }\n                                                                                        exit;\n                                                                                    }\n                                                                                } else {\n                                                                                    require(!msg.value);\n                                                                                    CALLDATACOPY(320, 4 + varg1, 288);\n                                                                                    require(varg1.length <= 256);\n                                                                                    MEM[672] = 0x4cdc9549;\n                                                                                    v2 = v3 = 4659;\n                                                                                }\n                                                                            } else {\n                                                                                require(!msg.value);\n                                                                                require(varg1.length <= 256);\n                                                                                require(STORAGE[keccak256(3, varg2)] == msg.sender);\n                                                                                require(keccak256(MEM[0x160 len (MEM[0x140])]) ^ keccak256(MEM[0x2e0 len 0x0]));\n                                                                                while (0 > STORAGE[keccak256(keccak256(5, varg2))] + 32) {\n                                                                                    MEM[896] = array_5[0];\n                                                                                    MEM[288] = 1;\n                                                                                    if (9 != 1) {\n                                                                                        break;\n                                                                                    }\n                                                                                }\n                                                                                require(keccak256(MEM[928 len (STORAGE[keccak256(keccak256(5, varg2))])]) == keccak256(MEM[864 len 0]));\n                                                                                require(!STORAGE[keccak256(9, keccak256(MEM[352 len (MEM[320])]))]);\n                                                                                while (0 > MEM[320] + 32) {\n                                                                                    array_5[0] = MEM[320];\n                                                                                    MEM[288] = 1;\n                                                                                    if (9 != 1) {\n                                                                                        break;\n                                                                                    }\n                                                                                }\n                                                                                v4 = dataCopy(v5, v5, v5, v5, v5, v5, v5, v5, v5, v5, v5, v5, 0, v5, v5, v5, 0, v5, v5, v5, v5, v5, v5, v5, v5, v5, v5, v5, 32, v5, 32);\n                                                                                require(v4);\n                                                                                CALLDATACOPY(1344 + MEM[1312], msg.data.length, MEM[1312] + 31 - (MEM[1312] - 1) % 32 - MEM[1312]);\n                                                                                emit Immutable_Multihash(msg.sender, varg2);\n                                                                                exit;\n                                                                            }\n                                                                        } else {\n                                                                            require(!msg.value);\n                                                                            require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                                            require(varg2 < 2);\n                                                                            require(varg1 ^ msg.sender);\n                                                                            STORAGE[keccak256(keccak256(12, msg.sender), varg1)] = varg2;\n                                                                            emit ApprovalForAll(msg.sender, varg1, varg2);\n                                                                            exit;\n                                                                        }\n                                                                    } else {\n                                                                        require(!msg.value);\n                                                                        require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                                        require(STORAGE[keccak256(3, varg2)] ^ 0x0);\n                                                                        require(STORAGE[keccak256(3, varg2)] == msg.sender);\n                                                                        MEM[384] = 0x91127c1f;\n                                                                        require(STORAGE[keccak256(3, varg2)] == varg1);\n                                                                        if (STORAGE[keccak256(0x4, varg2)] ^ 0x0) {\n                                                                            STORAGE[keccak256(4, varg2)] = 0;\n                                                                        }\n                                                                    }\n                                                                } else {\n                                                                    require(!msg.value);\n                                                                    require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                                    require(STORAGE[keccak256(3, varg2)] ^ 0x0);\n                                                                    require(varg1 ^ STORAGE[keccak256(3, varg2)]);\n                                                                    require((STORAGE[keccak256(3, varg2)] == msg.sender) | STORAGE[keccak256(keccak256(0xc, STORAGE[keccak256(3, varg2)]), msg.sender)]);\n                                                                    STORAGE[keccak256(4, varg2)] = varg1;\n                                                                    emit Approval(STORAGE[keccak256(3, varg2)], varg1, varg2);\n                                                                    exit;\n                                                                }\n                                                            } else {\n                                                                CALLDATACOPY(320, 4 + varg4, 1056);\n                                                                require(varg4.length <= 1024);\n                                                                CALLDATACOPY(320, 4 + varg4, 1088);\n                                                            }\n                                                        } else {\n                                                            v6 = dataCopy();\n                                                            require(v6);\n                                                        }\n                                                        require(!msg.value);\n                                                        require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                        require(varg2 < 0x10000000000000000000000000000000000000000);\n                                                        while (352 < 1472) {\n                                                        }\n                                                        MEM[1504] = 0x92863fe;\n                                                        v7 = v8 = 3146;\n                                                    } else {\n                                                        require(!msg.value);\n                                                        require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                        require(varg2 < 0x10000000000000000000000000000000000000000);\n                                                        MEM[320] = 0x92863fe;\n                                                        v7 = v9 = 2859;\n                                                    }\n                                                    MEM[512] = 0x4cdc9549;\n                                                    v2 = v10 = 2239;\n                                                    v11 = (STORAGE[keccak256(3, v12)] == v13) | (v13 == STORAGE[keccak256(4, v12)]) | STORAGE[keccak256(keccak256(0xc, STORAGE[keccak256(3, v12)]), v13)];\n                                                } else {\n                                                    require(!msg.value);\n                                                    require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                    require(varg2 < 0x10000000000000000000000000000000000000000);\n                                                    return STORAGE[keccak256(keccak256(12, varg1), varg2)];\n                                                }\n                                            } else {\n                                                require(!msg.value);\n                                                require(STORAGE[keccak256(0x3, varg1)] ^ 0x0);\n                                                while (0 > STORAGE[keccak256(keccak256(6, varg1))] + 32) {\n                                                    MEM[416] = array_6[0];\n                                                    MEM[288] = 1;\n                                                    if (9 != 1) {\n                                                        break;\n                                                    }\n                                                }\n                                                CALLDATACOPY(448 + MEM[416], msg.data.length, MEM[416] + 31 - (MEM[416] - 1) % 32 - MEM[416]);\n                                                return 32;\n                                            }\n                                        } else {\n                                            require(!msg.value);\n                                            require(STORAGE[keccak256(0x3, varg1)] ^ 0x0);\n                                            while (0 > STORAGE[keccak256(keccak256(5, varg1))] + 32) {\n                                                MEM[416] = array_5[0];\n                                                MEM[288] = 1;\n                                                if (9 != 1) {\n                                                    break;\n                                                }\n                                            }\n                                            CALLDATACOPY(448 + MEM[416], msg.data.length, MEM[416] + 31 - (MEM[416] - 1) % 32 - MEM[416]);\n                                            return 32;\n                                        }\n                                    } else {\n                                        require(!msg.value);\n                                        require(STORAGE[keccak256(0x3, varg1)] ^ 0x0);\n                                        return STORAGE[keccak256(7, varg1)];\n                                    }\n                                } else {\n                                    require(!msg.value);\n                                    require(STORAGE[keccak256(0x3, varg1)] ^ 0x0);\n                                    return STORAGE[keccak256(4, varg1)];\n                                }\n                            } else {\n                                require(!msg.value);\n                                require(varg1 < 0x10000000000000000000000000000000000000000);\n                                require(varg1 ^ 0x0);\n                                require(varg2 < STORAGE[keccak256(11, varg1)]);\n                                return STORAGE[keccak256(keccak256(10, varg1), varg2)];\n                            }\n                        } else {\n                            require(!msg.value);\n                            require(varg1 < ___function_selector__);\n                            require(varg1 + 1 >= varg1);\n                            return varg1 + 1;\n                        }\n                    } else {\n                        require(!msg.value);\n                        require(STORAGE[keccak256(3, varg1)] ^ 0x0);\n                        return STORAGE[keccak256(3, varg1)];\n                    }\n                } else {\n                    require(!msg.value);\n                    require(varg1 < 0x10000000000000000000000000000000000000000);\n                    require(varg1 ^ 0x0);\n                    return STORAGE[keccak256(11, varg1)];\n                }\n            } else {\n                require(!msg.value);\n                return STORAGE[keccak256(13, varg1)];\n            }\n        } else {\n            require(!msg.value);\n            return ___function_selector__;\n        }\n    }\n    revert();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.11.21 05:17 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] array_0; // STORAGE[0x0]\nuint256[] array_1; // STORAGE[0x1]\nuint256[] array_2; // STORAGE[0x2]\nuint256[] array_5; // STORAGE[0x5]\nuint256[] array_6; // STORAGE[0x6]\nuint256 owner_e; // STORAGE[0xe]\nuint256 owner_f; // STORAGE[0xf]\nuint256 ___function_selector__; // STORAGE[0x10]\n\n// Events\nApproval(address, address, uint256);\nApprovalForAll(address, address, bool);\nImmutable_Multihash(address, bytes, uint256);\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector, uint256 varg1, uint256 varg2, uint256 varg3, uint256 varg4) public payable { \n    if (msg.data.length >= 4) {\n        MEM[96] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        MEM[128] = 0x12a05f1fffffffffffffffffffffffffdabf41c00;\n        MEM[160] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n        if (function_selector != 0x18160ddd) {\n            if (function_selector != 0xf1753550) {\n                if (function_selector != 0x70a08231) {\n                    if (function_selector != 0x6352211e) {\n                        if (function_selector != 0x4f6ccce7) {\n                            if (function_selector != 0x2f745c59) {\n                                if (function_selector != 0x81812fc) {\n                                    if (function_selector != 0x3bd18a3b) {\n                                        if (function_selector != 0x6efacc1c) {\n                                            if (function_selector != 0x12d81afb) {\n                                                if (function_selector != 0xe985e9c5) {\n                                                    if (function_selector != 0x23b872dd) {\n                                                        if (function_selector != 0x42842e0e) {\n                                                            if (function_selector != 0xb88d4fde) {\n                                                                if (function_selector != 0x95ea7b3) {\n                                                                    if (function_selector != 0x6de53001) {\n                                                                        if (function_selector != 0xa22cb465) {\n                                                                            if (function_selector != 0x51927028) {\n                                                                                if (function_selector != 0x6ebd4607) {\n                                                                                    if (function_selector != 0x98cd6153) {\n                                                                                        if (function_selector != 0xfe475f6b) {\n                                                                                            if (function_selector != 0xbc04f0af) {\n                                                                                                if (function_selector != 0x6fdde03) {\n                                                                                                    if (function_selector != 0x95d89b41) {\n                                                                                                        if (function_selector == 0x3c130d90) {\n                                                                                                            require(!msg.value);\n                                                                                                            while (0 > STORAGE[keccak256(2)] + 32) {\n                                                                                                                MEM[384] = array_2[0];\n                                                                                                                MEM[288] = 1;\n                                                                                                                if (3 != 1) {\n                                                                                                                    break;\n                                                                                                                }\n                                                                                                            }\n                                                                                                            CALLDATACOPY(416 + MEM[384], msg.data.length, MEM[384] + 31 - (MEM[384] - 1) % 32 - MEM[384]);\n                                                                                                            return 32;\n                                                                                                        }\n                                                                                                    } else {\n                                                                                                        require(!msg.value);\n                                                                                                        while (0 > STORAGE[keccak256(1)] + 32) {\n                                                                                                            MEM[384] = array_1[0];\n                                                                                                            MEM[288] = 1;\n                                                                                                            if (2 != 1) {\n                                                                                                                break;\n                                                                                                            }\n                                                                                                        }\n                                                                                                        CALLDATACOPY(416 + MEM[384], msg.data.length, MEM[384] + 31 - (MEM[384] - 1) % 32 - MEM[384]);\n                                                                                                        return 32;\n                                                                                                    }\n                                                                                                } else {\n                                                                                                    require(!msg.value);\n                                                                                                    while (0 > STORAGE[keccak256(0)] + 32) {\n                                                                                                        MEM[384] = array_0[0];\n                                                                                                        MEM[288] = 1;\n                                                                                                        if (3 != 1) {\n                                                                                                            break;\n                                                                                                        }\n                                                                                                    }\n                                                                                                    CALLDATACOPY(416 + MEM[384], msg.data.length, MEM[384] + 31 - (MEM[384] - 1) % 32 - MEM[384]);\n                                                                                                    return 32;\n                                                                                                }\n                                                                                            } else {\n                                                                                                require(!msg.value);\n                                                                                                require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                                                                require(msg.sender == owner_e);\n                                                                                                require(varg2 >= 40);\n                                                                                                require(varg2 >= varg2 / 40);\n                                                                                                require(owner_e.code.size);\n                                                                                                require(this ^ owner_e);\n                                                                                                v0 = owner_e.transfer(owner_f, varg2 / 40).gas(msg.gas);\n                                                                                                require(v0);\n                                                                                                require(owner_e.code.size);\n                                                                                                require(this ^ owner_e);\n                                                                                                v1 = owner_e.burn(varg2 - varg2 / 40).gas(msg.gas);\n                                                                                                require(v1);\n                                                                                                require(MEM[576]);\n                                                                                                require(___function_selector__ + 1 >= ___function_selector__);\n                                                                                                ___function_selector__ = ___function_selector__ + 1;\n                                                                                                STORAGE[keccak256(7, ___function_selector__)] = varg2 - varg2 / 40;\n                                                                                                while (352 < 736) {\n                                                                                                }\n                                                                                                MEM[768] = 0xff5ce378;\n                                                                                                require(!STORAGE[keccak256(3, ___function_selector__)]);\n                                                                                                STORAGE[keccak256(3, ___function_selector__)] = varg1;\n                                                                                                STORAGE[keccak256(8, ___function_selector__)] = STORAGE[keccak256(11, varg1)];\n                                                                                                STORAGE[keccak256(keccak256(10, varg1), STORAGE[keccak256(11, varg1)])] = ___function_selector__;\n                                                                                                require(STORAGE[keccak256(11, varg1)] + 1 >= STORAGE[keccak256(11, varg1)]);\n                                                                                                STORAGE[keccak256(11, varg1)] = STORAGE[keccak256(11, varg1)] + 1;\n                                                                                            }\n                                                                                        } else {\n                                                                                            require(!msg.value);\n                                                                                            require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                                                            require(msg.sender == owner_f);\n                                                                                            owner_f = varg1;\n                                                                                            exit;\n                                                                                        }\n                                                                                    } else {\n                                                                                        require(!msg.value);\n                                                                                        CALLDATACOPY(320, 4 + varg1, 96);\n                                                                                        require(varg1.length <= 64);\n                                                                                        require(msg.sender == owner_f);\n                                                                                        while (0 > MEM[320] + 32) {\n                                                                                            array_2[0] = MEM[320];\n                                                                                            MEM[288] = 1;\n                                                                                            if (3 != 1) {\n                                                                                                break;\n                                                                                            }\n                                                                                        }\n                                                                                        exit;\n                                                                                    }\n                                                                                } else {\n                                                                                    require(!msg.value);\n                                                                                    CALLDATACOPY(320, 4 + varg1, 288);\n                                                                                    require(varg1.length <= 256);\n                                                                                    MEM[672] = 0x4cdc9549;\n                                                                                    v2 = v3 = 4659;\n                                                                                }\n                                                                            } else {\n                                                                                require(!msg.value);\n                                                                                require(varg1.length <= 256);\n                                                                                require(STORAGE[keccak256(3, varg2)] == msg.sender);\n                                                                                require(keccak256(MEM[0x160 len (MEM[0x140])]) ^ keccak256(MEM[0x2e0 len 0x0]));\n                                                                                while (0 > STORAGE[keccak256(keccak256(5, varg2))] + 32) {\n                                                                                    MEM[896] = array_5[0];\n                                                                                    MEM[288] = 1;\n                                                                                    if (9 != 1) {\n                                                                                        break;\n                                                                                    }\n                                                                                }\n                                                                                require(keccak256(MEM[928 len (STORAGE[keccak256(keccak256(5, varg2))])]) == keccak256(MEM[864 len 0]));\n                                                                                require(!STORAGE[keccak256(9, keccak256(MEM[352 len (MEM[320])]))]);\n                                                                                while (0 > MEM[320] + 32) {\n                                                                                    array_5[0] = MEM[320];\n                                                                                    MEM[288] = 1;\n                                                                                    if (9 != 1) {\n                                                                                        break;\n                                                                                    }\n                                                                                }\n                                                                                v4 = dataCopy(v5, v5, v5, v5, v5, v5, v5, v5, v5, v5, v5, v5, 0, v5, v5, v5, 0, v5, v5, v5, v5, v5, v5, v5, v5, v5, v5, v5, 32, v5, 32);\n                                                                                require(v4);\n                                                                                CALLDATACOPY(1344 + MEM[1312], msg.data.length, MEM[1312] + 31 - (MEM[1312] - 1) % 32 - MEM[1312]);\n                                                                                emit Immutable_Multihash(msg.sender, varg2);\n                                                                                exit;\n                                                                            }\n                                                                        } else {\n                                                                            require(!msg.value);\n                                                                            require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                                            require(varg2 < 2);\n                                                                            require(varg1 ^ msg.sender);\n                                                                            STORAGE[keccak256(keccak256(12, msg.sender), varg1)] = varg2;\n                                                                            emit ApprovalForAll(msg.sender, varg1, varg2);\n                                                                            exit;\n                                                                        }\n                                                                    } else {\n                                                                        require(!msg.value);\n                                                                        require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                                        require(STORAGE[keccak256(3, varg2)] ^ 0x0);\n                                                                        require(STORAGE[keccak256(3, varg2)] == msg.sender);\n                                                                        MEM[384] = 0x91127c1f;\n                                                                        require(STORAGE[keccak256(3, varg2)] == varg1);\n                                                                        if (STORAGE[keccak256(0x4, varg2)] ^ 0x0) {\n                                                                            STORAGE[keccak256(4, varg2)] = 0;\n                                                                        }\n                                                                    }\n                                                                } else {\n                                                                    require(!msg.value);\n                                                                    require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                                    require(STORAGE[keccak256(3, varg2)] ^ 0x0);\n                                                                    require(varg1 ^ STORAGE[keccak256(3, varg2)]);\n                                                                    require((STORAGE[keccak256(3, varg2)] == msg.sender) | STORAGE[keccak256(keccak256(0xc, STORAGE[keccak256(3, varg2)]), msg.sender)]);\n                                                                    STORAGE[keccak256(4, varg2)] = varg1;\n                                                                    emit Approval(STORAGE[keccak256(3, varg2)], varg1, varg2);\n                                                                    exit;\n                                                                }\n                                                            } else {\n                                                                CALLDATACOPY(320, 4 + varg4, 1056);\n                                                                require(varg4.length <= 1024);\n                                                                CALLDATACOPY(320, 4 + varg4, 1088);\n                                                            }\n                                                        } else {\n                                                            v6 = dataCopy();\n                                                            require(v6);\n                                                        }\n                                                        require(!msg.value);\n                                                        require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                        require(varg2 < 0x10000000000000000000000000000000000000000);\n                                                        while (352 < 1472) {\n                                                        }\n                                                        MEM[1504] = 0x92863fe;\n                                                        v7 = v8 = 3146;\n                                                    } else {\n                                                        require(!msg.value);\n                                                        require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                        require(varg2 < 0x10000000000000000000000000000000000000000);\n                                                        MEM[320] = 0x92863fe;\n                                                        v7 = v9 = 2859;\n                                                    }\n                                                    MEM[512] = 0x4cdc9549;\n                                                    v2 = v10 = 2239;\n                                                    v11 = (STORAGE[keccak256(3, v12)] == v13) | (v13 == STORAGE[keccak256(4, v12)]) | STORAGE[keccak256(keccak256(0xc, STORAGE[keccak256(3, v12)]), v13)];\n                                                } else {\n                                                    require(!msg.value);\n                                                    require(varg1 < 0x10000000000000000000000000000000000000000);\n                                                    require(varg2 < 0x10000000000000000000000000000000000000000);\n                                                    return STORAGE[keccak256(keccak256(12, varg1), varg2)];\n                                                }\n                                            } else {\n                                                require(!msg.value);\n                                                require(STORAGE[keccak256(0x3, varg1)] ^ 0x0);\n                                                while (0 > STORAGE[keccak256(keccak256(6, varg1))] + 32) {\n                                                    MEM[416] = array_6[0];\n                                                    MEM[288] = 1;\n                                                    if (9 != 1) {\n                                                        break;\n                                                    }\n                                                }\n                                                CALLDATACOPY(448 + MEM[416], msg.data.length, MEM[416] + 31 - (MEM[416] - 1) % 32 - MEM[416]);\n                                                return 32;\n                                            }\n                                        } else {\n                                            require(!msg.value);\n                                            require(STORAGE[keccak256(0x3, varg1)] ^ 0x0);\n                                            while (0 > STORAGE[keccak256(keccak256(5, varg1))] + 32) {\n                                                MEM[416] = array_5[0];\n                                                MEM[288] = 1;\n                                                if (9 != 1) {\n                                                    break;\n                                                }\n                                            }\n                                            CALLDATACOPY(448 + MEM[416], msg.data.length, MEM[416] + 31 - (MEM[416] - 1) % 32 - MEM[416]);\n                                            return 32;\n                                        }\n                                    } else {\n                                        require(!msg.value);\n                                        require(STORAGE[keccak256(0x3, varg1)] ^ 0x0);\n                                        return STORAGE[keccak256(7, varg1)];\n                                    }\n                                } else {\n                                    require(!msg.value);\n                                    require(STORAGE[keccak256(0x3, varg1)] ^ 0x0);\n                                    return STORAGE[keccak256(4, varg1)];\n                                }\n                            } else {\n                                require(!msg.value);\n                                require(varg1 < 0x10000000000000000000000000000000000000000);\n                                require(varg1 ^ 0x0);\n                                require(varg2 < STORAGE[keccak256(11, varg1)]);\n                                return STORAGE[keccak256(keccak256(10, varg1), varg2)];\n                            }\n                        } else {\n                            require(!msg.value);\n                            require(varg1 < ___function_selector__);\n                            require(varg1 + 1 >= varg1);\n                            return varg1 + 1;\n                        }\n                    } else {\n                        require(!msg.value);\n                        require(STORAGE[keccak256(3, varg1)] ^ 0x0);\n                        return STORAGE[keccak256(3, varg1)];\n                    }\n                } else {\n                    require(!msg.value);\n                    require(varg1 < 0x10000000000000000000000000000000000000000);\n                    require(varg1 ^ 0x0);\n                    return STORAGE[keccak256(11, varg1)];\n                }\n            } else {\n                require(!msg.value);\n                return STORAGE[keccak256(13, varg1)];\n            }\n        } else {\n            require(!msg.value);\n            return ___function_selector__;\n        }\n    }\n    revert();\n}\n.",
	"status": "1",
	"time_cost": 17.0540452003479,
	"usage": {
		"completion_tokens": 440,
		"prompt_tokens": 3699,
		"total_tokens": 4139
	}
}