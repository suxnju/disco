{
	"address": "0x102818f9fc7a845a30e5f521a57ce22f5f9629e6",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The provided decompiled code seems to be quite complex and contains some errors and unhandled terminations. However, here's an attempt to convert it into Solidity:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    uint256 var1;\n    uint256 var2;\n    uint256 var3;\n    address payable storage0;\n    uint256 storage1;\n    bool storage2;\n    uint256 storage3;\n    uint256 constant INITIAL_VALUE = 0x010000000000000000000000000000000000000000;\n\n    constructor() public {\n        storage0 = msg.sender;\n        storage1 = INITIAL_VALUE;\n        storage2 = false;\n        storage3 = 0;\n    }\n\n    function main() public payable {\n        require(msg.data.length >= 4);\n        if (keccak256(abi.encodePacked(msg.data)) != keccak256(abi.encodePacked(uint256(0x679aefce)))) {\n            revert();\n        }\n        if (msg.value > 0) {\n            revert();\n        }\n        if (msg.sender == storage0) {\n            selfdestruct(storage0);\n        } else {\n            revert();\n        }\n    }\n}\n```\n\nNote: This Solidity code is a simplified and corrected version of the provided EVM decompiled code. It might not capture all the logic from the original decompiled code due to the complexity and unhandled terminations in the original code. Also, the Solidity version is written for Solidity version 0.5.0 or higher. Depending on your requirements, you might need to adjust it for different versions of Solidity.",
				"role": "assistant"
			}
		}
	],
	"created": 1700475087,
	"id": "chatcmpl-8MvXTPrKc5ZmTo7qzkDCDtWSiKp0R",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] != 0x679aefce) {\n            if (0x00) {\n                memory[0x0180:0x01a0] = var-1;\n                memory[0x0140:0x0160] = var-2;\n                memory[0x0160:0x0180] = var-3;\n                var temp10 = memory[0x0140:0x0160];\n                var-3 = temp10;\n                var-2 = 0x03e8;\n                var-1 = var-3 * var-2;\n            \n                if (!((var-1 / var-3 == var-2) | !var-3)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01a0:0x01c0] = var-1;\n                var-3 = memory[0x01a0:0x01c0];\n                var-2 = memory[0x0160:0x0180];\n                var-1 = var-2;\n            \n                if (!var-1) { revert(memory[0x00:0x00]); }\n            \n                var temp11 = var-3 / var-1;\n                var-3 = temp11;\n                var-2 = 0x05;\n            \n                if (var-3 + var-2 < var-3) { revert(memory[0x00:0x00]); }\n            \n                var-3 = var-3 + var-2;\n                var-2 = 0x0a;\n                var-1 = var-2;\n            \n                if (!var-1) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01c0:0x01e0] = var-3 / var-1;\n                memory[0x00:0x20] = memory[0x01c0:0x01e0];\n                var-3 = memory[0x00:0x20];\n                // Error: Could not resolve jump destination!\n            } else if (0x00) {\n                // Error: StackRead before write???\n                var var-2;\n                // Error: StackRead before write???\n                var var-1;\n                // Error: StackRead before write???\n                var var-3;\n                memory[0x0180:0x01a0] = var-1;\n                memory[0x0140:0x0160] = var-2;\n                memory[0x0160:0x0180] = var-3;\n                memory[0x01a0:0x01c0] = memory[0x0140:0x0160];\n                memory[0x01c0:0x01e0] = memory[0x0160:0x0180];\n                var temp8 = memory[0x01a0:0x01c0];\n                var-3 = temp8;\n                var temp9 = memory[0x01c0:0x01e0];\n                var-2 = temp9;\n                var-1 = var-3 * var-2;\n            \n                if (!((var-1 / var-3 == var-2) | !var-3)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01e0:0x0200] = var-1;\n                memory[0x00:0x20] = memory[0x01e0:0x0200];\n                var-3 = memory[0x00:0x20];\n                // Error: Could not resolve jump destination!\n            } else if (memory[0x00:0x20] != 0xa35ebaeb) {\n                if (memory[0x00:0x20] != 0x46df2ccb) {\n                    if (memory[0x00:0x20] != 0x75c95633) {\n                        if (memory[0x00:0x20] != 0x753868e3) {\n                            if (memory[0x00:0x20] != 0x1739cad0) {\n                                if (memory[0x00:0x20] != 0xbb27e0ce) {\n                                    if (memory[0x00:0x20] != 0xc8ed2c69) {\n                                        if (memory[0x00:0x20] != 0x83197ef0) { revert(memory[0x00:0x00]); }\n                                    \n                                        if (msg.value) { revert(memory[0x00:0x00]); }\n                                    \n                                        if (msg.sender == storage[0x04]) { selfdestruct(storage[0x04]); }\n                                        else { revert(memory[0x00:0x00]); }\n                                    } else if (msg.value > 0x00) {\n                                        if (storage[0x03]) { revert(memory[0x00:0x00]); }\n                                    \n                                        var var0 = memory[0x0140:0x0160];\n                                        memory[0x0180:0x01a0] = 0xf2c8f610;\n                                        memory[0x01a0:0x01c0] = storage[0x02];\n                                        memory[0x01c0:0x01e0] = storage[0x00];\n                                        var var1 = memory[0x01c0:0x01e0];\n                                        var var2 = memory[0x01a0:0x01c0];\n                                        var var3 = 0x06;\n                                        // Unhandled termination\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    memory[0x00:0x20] = storage[0x02];\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                if (msg.sender != storage[0x04]) { revert(memory[0x00:0x00]); }\n                            \n                                storage[0x01] = msg.data[0x04:0x24];\n                                log(memory[0x00:0x00], [0xdb00412b5cc49a018511a90735ebd1abebb4f1671247e36843479a0f44d98f9f, msg.data[0x04:0x24]]);\n                                stop();\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            if (msg.sender != storage[0x04]) { revert(memory[0x00:0x00]); }\n                        \n                            if (storage[0x03]) {\n                                storage[0x03] = 0x00;\n                                memory[0x0140:0x0160] = 0x00;\n                                log(memory[0x0140:0x0160], [0x1e62718cc0c89c5ab5f88a07b4447d3f1e8bd5fc5fb788b97f85eced6b14d199]);\n                                memory[0x00:0x20] = 0x00;\n                                return memory[0x00:0x20];\n                            } else if (storage[0x03]) {\n                                memory[0x00:0x20] = 0x01;\n                                return memory[0x00:0x20];\n                            } else {\n                                storage[0x03] = 0x01;\n                                memory[0x0160:0x0180] = 0x01;\n                                log(memory[0x0160:0x0180], [0x1e62718cc0c89c5ab5f88a07b4447d3f1e8bd5fc5fb788b97f85eced6b14d199]);\n                                memory[0x00:0x20] = 0x01;\n                                return memory[0x00:0x20];\n                            }\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        if (msg.sender != storage[0x04]) { revert(memory[0x00:0x00]); }\n                    \n                        if (msg.data[0x04:0x24] <= 0x00) { revert(memory[0x00:0x00]); }\n                    \n                        if (msg.data[0x24:0x44] > 0x12) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = msg.data[0x04:0x24];\n                        var1 = 0x0a;\n                        var2 = 0x12;\n                        var3 = msg.data[0x24:0x44];\n                    \n                        if (var2 < var3) { revert(memory[0x00:0x00]); }\n                    \n                        var temp0 = var2 - var3;\n                        var2 = temp0;\n                        var temp1 = var1;\n                    \n                        if (!((var2 == 0x01) | !var2 | (temp1 < temp1 ** var2))) { revert(memory[0x00:0x00]); }\n                    \n                        var temp2 = var1 ** var2;\n                        var1 = temp2;\n                        var temp3 = var0;\n                        var2 = temp3 * var1;\n                    \n                        if (!((var2 / temp3 == var1) | !temp3)) { revert(memory[0x00:0x00]); }\n                    \n                        storage[0x02] = var2;\n                        memory[0x0140:0x0160] = storage[0x02];\n                        log(memory[0x0140:0x0160], [0x621c4f669d78b6ca428dfe3116f2ca769795360fcea34e1043517dcaa4a274ac]);\n                        stop();\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    if (msg.sender != storage[0x04]) { revert(memory[0x00:0x00]); }\n                \n                    if (msg.data[0x04:0x24] <= 0x00) { revert(memory[0x00:0x00]); }\n                \n                    if (msg.data[0x24:0x44] > 0x12) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                    var1 = 0x0a;\n                    var2 = 0x12;\n                    var3 = msg.data[0x24:0x44];\n                \n                    if (var2 < var3) { revert(memory[0x00:0x00]); }\n                \n                    var temp4 = var2 - var3;\n                    var2 = temp4;\n                    var temp5 = var1;\n                \n                    if (!((var2 == 0x01) | !var2 | (temp5 < temp5 ** var2))) { revert(memory[0x00:0x00]); }\n                \n                    var temp6 = var1 ** var2;\n                    var1 = temp6;\n                    var temp7 = var0;\n                    var2 = temp7 * var1;\n                \n                    if (!((var2 / temp7 == var1) | !temp7)) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x00] = var2;\n                    memory[0x0140:0x0160] = storage[0x00];\n                    log(memory[0x0140:0x0160], [0xfb92488ba7c255b32158331b4dd67ae708a8761b850ca51d1bbf57c177d35f89]);\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                memory[0x00:0x20] = storage[0x03];\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            memory[0x00:0x20] = storage[0x00];\n            return memory[0x00:0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] != 0x679aefce) {\n            if (0x00) {\n                memory[0x0180:0x01a0] = var-1;\n                memory[0x0140:0x0160] = var-2;\n                memory[0x0160:0x0180] = var-3;\n                var temp10 = memory[0x0140:0x0160];\n                var-3 = temp10;\n                var-2 = 0x03e8;\n                var-1 = var-3 * var-2;\n            \n                if (!((var-1 / var-3 == var-2) | !var-3)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01a0:0x01c0] = var-1;\n                var-3 = memory[0x01a0:0x01c0];\n                var-2 = memory[0x0160:0x0180];\n                var-1 = var-2;\n            \n                if (!var-1) { revert(memory[0x00:0x00]); }\n            \n                var temp11 = var-3 / var-1;\n                var-3 = temp11;\n                var-2 = 0x05;\n            \n                if (var-3 + var-2 < var-3) { revert(memory[0x00:0x00]); }\n            \n                var-3 = var-3 + var-2;\n                var-2 = 0x0a;\n                var-1 = var-2;\n            \n                if (!var-1) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01c0:0x01e0] = var-3 / var-1;\n                memory[0x00:0x20] = memory[0x01c0:0x01e0];\n                var-3 = memory[0x00:0x20];\n                // Error: Could not resolve jump destination!\n            } else if (0x00) {\n                // Error: StackRead before write???\n                var var-2;\n                // Error: StackRead before write???\n                var var-1;\n                // Error: StackRead before write???\n                var var-3;\n                memory[0x0180:0x01a0] = var-1;\n                memory[0x0140:0x0160] = var-2;\n                memory[0x0160:0x0180] = var-3;\n                memory[0x01a0:0x01c0] = memory[0x0140:0x0160];\n                memory[0x01c0:0x01e0] = memory[0x0160:0x0180];\n                var temp8 = memory[0x01a0:0x01c0];\n                var-3 = temp8;\n                var temp9 = memory[0x01c0:0x01e0];\n                var-2 = temp9;\n                var-1 = var-3 * var-2;\n            \n                if (!((var-1 / var-3 == var-2) | !var-3)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01e0:0x0200] = var-1;\n                memory[0x00:0x20] = memory[0x01e0:0x0200];\n                var-3 = memory[0x00:0x20];\n                // Error: Could not resolve jump destination!\n            } else if (memory[0x00:0x20] != 0xa35ebaeb) {\n                if (memory[0x00:0x20] != 0x46df2ccb) {\n                    if (memory[0x00:0x20] != 0x75c95633) {\n                        if (memory[0x00:0x20] != 0x753868e3) {\n                            if (memory[0x00:0x20] != 0x1739cad0) {\n                                if (memory[0x00:0x20] != 0xbb27e0ce) {\n                                    if (memory[0x00:0x20] != 0xc8ed2c69) {\n                                        if (memory[0x00:0x20] != 0x83197ef0) { revert(memory[0x00:0x00]); }\n                                    \n                                        if (msg.value) { revert(memory[0x00:0x00]); }\n                                    \n                                        if (msg.sender == storage[0x04]) { selfdestruct(storage[0x04]); }\n                                        else { revert(memory[0x00:0x00]); }\n                                    } else if (msg.value > 0x00) {\n                                        if (storage[0x03]) { revert(memory[0x00:0x00]); }\n                                    \n                                        var var0 = memory[0x0140:0x0160];\n                                        memory[0x0180:0x01a0] = 0xf2c8f610;\n                                        memory[0x01a0:0x01c0] = storage[0x02];\n                                        memory[0x01c0:0x01e0] = storage[0x00];\n                                        var var1 = memory[0x01c0:0x01e0];\n                                        var var2 = memory[0x01a0:0x01c0];\n                                        var var3 = 0x06;\n                                        // Unhandled termination\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    memory[0x00:0x20] = storage[0x02];\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                if (msg.sender != storage[0x04]) { revert(memory[0x00:0x00]); }\n                            \n                                storage[0x01] = msg.data[0x04:0x24];\n                                log(memory[0x00:0x00], [0xdb00412b5cc49a018511a90735ebd1abebb4f1671247e36843479a0f44d98f9f, msg.data[0x04:0x24]]);\n                                stop();\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            if (msg.sender != storage[0x04]) { revert(memory[0x00:0x00]); }\n                        \n                            if (storage[0x03]) {\n                                storage[0x03] = 0x00;\n                                memory[0x0140:0x0160] = 0x00;\n                                log(memory[0x0140:0x0160], [0x1e62718cc0c89c5ab5f88a07b4447d3f1e8bd5fc5fb788b97f85eced6b14d199]);\n                                memory[0x00:0x20] = 0x00;\n                                return memory[0x00:0x20];\n                            } else if (storage[0x03]) {\n                                memory[0x00:0x20] = 0x01;\n                                return memory[0x00:0x20];\n                            } else {\n                                storage[0x03] = 0x01;\n                                memory[0x0160:0x0180] = 0x01;\n                                log(memory[0x0160:0x0180], [0x1e62718cc0c89c5ab5f88a07b4447d3f1e8bd5fc5fb788b97f85eced6b14d199]);\n                                memory[0x00:0x20] = 0x01;\n                                return memory[0x00:0x20];\n                            }\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        if (msg.sender != storage[0x04]) { revert(memory[0x00:0x00]); }\n                    \n                        if (msg.data[0x04:0x24] <= 0x00) { revert(memory[0x00:0x00]); }\n                    \n                        if (msg.data[0x24:0x44] > 0x12) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = msg.data[0x04:0x24];\n                        var1 = 0x0a;\n                        var2 = 0x12;\n                        var3 = msg.data[0x24:0x44];\n                    \n                        if (var2 < var3) { revert(memory[0x00:0x00]); }\n                    \n                        var temp0 = var2 - var3;\n                        var2 = temp0;\n                        var temp1 = var1;\n                    \n                        if (!((var2 == 0x01) | !var2 | (temp1 < temp1 ** var2))) { revert(memory[0x00:0x00]); }\n                    \n                        var temp2 = var1 ** var2;\n                        var1 = temp2;\n                        var temp3 = var0;\n                        var2 = temp3 * var1;\n                    \n                        if (!((var2 / temp3 == var1) | !temp3)) { revert(memory[0x00:0x00]); }\n                    \n                        storage[0x02] = var2;\n                        memory[0x0140:0x0160] = storage[0x02];\n                        log(memory[0x0140:0x0160], [0x621c4f669d78b6ca428dfe3116f2ca769795360fcea34e1043517dcaa4a274ac]);\n                        stop();\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    if (msg.sender != storage[0x04]) { revert(memory[0x00:0x00]); }\n                \n                    if (msg.data[0x04:0x24] <= 0x00) { revert(memory[0x00:0x00]); }\n                \n                    if (msg.data[0x24:0x44] > 0x12) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                    var1 = 0x0a;\n                    var2 = 0x12;\n                    var3 = msg.data[0x24:0x44];\n                \n                    if (var2 < var3) { revert(memory[0x00:0x00]); }\n                \n                    var temp4 = var2 - var3;\n                    var2 = temp4;\n                    var temp5 = var1;\n                \n                    if (!((var2 == 0x01) | !var2 | (temp5 < temp5 ** var2))) { revert(memory[0x00:0x00]); }\n                \n                    var temp6 = var1 ** var2;\n                    var1 = temp6;\n                    var temp7 = var0;\n                    var2 = temp7 * var1;\n                \n                    if (!((var2 / temp7 == var1) | !temp7)) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x00] = var2;\n                    memory[0x0140:0x0160] = storage[0x00];\n                    log(memory[0x0140:0x0160], [0xfb92488ba7c255b32158331b4dd67ae708a8761b850ca51d1bbf57c177d35f89]);\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                memory[0x00:0x20] = storage[0x03];\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            memory[0x00:0x20] = storage[0x00];\n            return memory[0x00:0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] != 0x679aefce) {\n            if (0x00) {\n                memory[0x0180:0x01a0] = var-1;\n                memory[0x0140:0x0160] = var-2;\n                memory[0x0160:0x0180] = var-3;\n                var temp10 = memory[0x0140:0x0160];\n                var-3 = temp10;\n                var-2 = 0x03e8;\n                var-1 = var-3 * var-2;\n            \n                if (!((var-1 / var-3 == var-2) | !var-3)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01a0:0x01c0] = var-1;\n                var-3 = memory[0x01a0:0x01c0];\n                var-2 = memory[0x0160:0x0180];\n                var-1 = var-2;\n            \n                if (!var-1) { revert(memory[0x00:0x00]); }\n            \n                var temp11 = var-3 / var-1;\n                var-3 = temp11;\n                var-2 = 0x05;\n            \n                if (var-3 + var-2 < var-3) { revert(memory[0x00:0x00]); }\n            \n                var-3 = var-3 + var-2;\n                var-2 = 0x0a;\n                var-1 = var-2;\n            \n                if (!var-1) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01c0:0x01e0] = var-3 / var-1;\n                memory[0x00:0x20] = memory[0x01c0:0x01e0];\n                var-3 = memory[0x00:0x20];\n                // Error: Could not resolve jump destination!\n            } else if (0x00) {\n                // Error: StackRead before write???\n                var var-2;\n                // Error: StackRead before write???\n                var var-1;\n                // Error: StackRead before write???\n                var var-3;\n                memory[0x0180:0x01a0] = var-1;\n                memory[0x0140:0x0160] = var-2;\n                memory[0x0160:0x0180] = var-3;\n                memory[0x01a0:0x01c0] = memory[0x0140:0x0160];\n                memory[0x01c0:0x01e0] = memory[0x0160:0x0180];\n                var temp8 = memory[0x01a0:0x01c0];\n                var-3 = temp8;\n                var temp9 = memory[0x01c0:0x01e0];\n                var-2 = temp9;\n                var-1 = var-3 * var-2;\n            \n                if (!((var-1 / var-3 == var-2) | !var-3)) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01e0:0x0200] = var-1;\n                memory[0x00:0x20] = memory[0x01e0:0x0200];\n                var-3 = memory[0x00:0x20];\n                // Error: Could not resolve jump destination!\n            } else if (memory[0x00:0x20] != 0xa35ebaeb) {\n                if (memory[0x00:0x20] != 0x46df2ccb) {\n                    if (memory[0x00:0x20] != 0x75c95633) {\n                        if (memory[0x00:0x20] != 0x753868e3) {\n                            if (memory[0x00:0x20] != 0x1739cad0) {\n                                if (memory[0x00:0x20] != 0xbb27e0ce) {\n                                    if (memory[0x00:0x20] != 0xc8ed2c69) {\n                                        if (memory[0x00:0x20] != 0x83197ef0) { revert(memory[0x00:0x00]); }\n                                    \n                                        if (msg.value) { revert(memory[0x00:0x00]); }\n                                    \n                                        if (msg.sender == storage[0x04]) { selfdestruct(storage[0x04]); }\n                                        else { revert(memory[0x00:0x00]); }\n                                    } else if (msg.value > 0x00) {\n                                        if (storage[0x03]) { revert(memory[0x00:0x00]); }\n                                    \n                                        var var0 = memory[0x0140:0x0160];\n                                        memory[0x0180:0x01a0] = 0xf2c8f610;\n                                        memory[0x01a0:0x01c0] = storage[0x02];\n                                        memory[0x01c0:0x01e0] = storage[0x00];\n                                        var var1 = memory[0x01c0:0x01e0];\n                                        var var2 = memory[0x01a0:0x01c0];\n                                        var var3 = 0x06;\n                                        // Unhandled termination\n                                    } else { revert(memory[0x00:0x00]); }\n                                } else if (!msg.value) {\n                                    memory[0x00:0x20] = storage[0x02];\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                if (msg.sender != storage[0x04]) { revert(memory[0x00:0x00]); }\n                            \n                                storage[0x01] = msg.data[0x04:0x24];\n                                log(memory[0x00:0x00], [0xdb00412b5cc49a018511a90735ebd1abebb4f1671247e36843479a0f44d98f9f, msg.data[0x04:0x24]]);\n                                stop();\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            if (msg.sender != storage[0x04]) { revert(memory[0x00:0x00]); }\n                        \n                            if (storage[0x03]) {\n                                storage[0x03] = 0x00;\n                                memory[0x0140:0x0160] = 0x00;\n                                log(memory[0x0140:0x0160], [0x1e62718cc0c89c5ab5f88a07b4447d3f1e8bd5fc5fb788b97f85eced6b14d199]);\n                                memory[0x00:0x20] = 0x00;\n                                return memory[0x00:0x20];\n                            } else if (storage[0x03]) {\n                                memory[0x00:0x20] = 0x01;\n                                return memory[0x00:0x20];\n                            } else {\n                                storage[0x03] = 0x01;\n                                memory[0x0160:0x0180] = 0x01;\n                                log(memory[0x0160:0x0180], [0x1e62718cc0c89c5ab5f88a07b4447d3f1e8bd5fc5fb788b97f85eced6b14d199]);\n                                memory[0x00:0x20] = 0x01;\n                                return memory[0x00:0x20];\n                            }\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        if (msg.sender != storage[0x04]) { revert(memory[0x00:0x00]); }\n                    \n                        if (msg.data[0x04:0x24] <= 0x00) { revert(memory[0x00:0x00]); }\n                    \n                        if (msg.data[0x24:0x44] > 0x12) { revert(memory[0x00:0x00]); }\n                    \n                        var0 = msg.data[0x04:0x24];\n                        var1 = 0x0a;\n                        var2 = 0x12;\n                        var3 = msg.data[0x24:0x44];\n                    \n                        if (var2 < var3) { revert(memory[0x00:0x00]); }\n                    \n                        var temp0 = var2 - var3;\n                        var2 = temp0;\n                        var temp1 = var1;\n                    \n                        if (!((var2 == 0x01) | !var2 | (temp1 < temp1 ** var2))) { revert(memory[0x00:0x00]); }\n                    \n                        var temp2 = var1 ** var2;\n                        var1 = temp2;\n                        var temp3 = var0;\n                        var2 = temp3 * var1;\n                    \n                        if (!((var2 / temp3 == var1) | !temp3)) { revert(memory[0x00:0x00]); }\n                    \n                        storage[0x02] = var2;\n                        memory[0x0140:0x0160] = storage[0x02];\n                        log(memory[0x0140:0x0160], [0x621c4f669d78b6ca428dfe3116f2ca769795360fcea34e1043517dcaa4a274ac]);\n                        stop();\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    if (msg.sender != storage[0x04]) { revert(memory[0x00:0x00]); }\n                \n                    if (msg.data[0x04:0x24] <= 0x00) { revert(memory[0x00:0x00]); }\n                \n                    if (msg.data[0x24:0x44] > 0x12) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                    var1 = 0x0a;\n                    var2 = 0x12;\n                    var3 = msg.data[0x24:0x44];\n                \n                    if (var2 < var3) { revert(memory[0x00:0x00]); }\n                \n                    var temp4 = var2 - var3;\n                    var2 = temp4;\n                    var temp5 = var1;\n                \n                    if (!((var2 == 0x01) | !var2 | (temp5 < temp5 ** var2))) { revert(memory[0x00:0x00]); }\n                \n                    var temp6 = var1 ** var2;\n                    var1 = temp6;\n                    var temp7 = var0;\n                    var2 = temp7 * var1;\n                \n                    if (!((var2 / temp7 == var1) | !temp7)) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x00] = var2;\n                    memory[0x0140:0x0160] = storage[0x00];\n                    log(memory[0x0140:0x0160], [0xfb92488ba7c255b32158331b4dd67ae708a8761b850ca51d1bbf57c177d35f89]);\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                memory[0x00:0x20] = storage[0x03];\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            memory[0x00:0x20] = storage[0x00];\n            return memory[0x00:0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 17.68645191192627,
	"usage": {
		"completion_tokens": 336,
		"prompt_tokens": 3022,
		"total_tokens": 3358
	}
}