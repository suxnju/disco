{
	"address": "0x44e081cac2406a4efe165178c2a4d77f7a7854d4",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, below is the Solidity version of the given pseudocode.\n\n```solidity\npragma solidity >=0.4.22 <0.7.0;\n\ncontract Contract {\n    mapping(address => uint256) private balances;\n    mapping(address => mapping(address => uint256)) private allowed;\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        require(_spender != address(0));\n\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(_to != address(0));\n\n        balances[_from] = balances[_from] - _value;\n        balances[_to] = balances[_to] + _value;\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function withdraw(uint256 _value) public {\n        require(_value <= balances[msg.sender]);\n\n        msg.sender.transfer(_value);\n        balances[msg.sender] = balances[msg.sender] - _value;\n        emit Withdrawal(msg.sender, _value);\n    }\n\n    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\n        require(_spender != address(0));\n\n        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender] + _addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transferToCelerWallet(address _to, bytes32 _data, uint256 _value) public returns (bool success) {\n        require(_value <= balances[msg.sender]);\n        require(_to != address(0));\n\n        balances[msg.sender] = balances[msg.sender] - _value;\n        balances[_to] = balances[_to] + _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\n        require(_spender != address(0));\n        require(_subtractedValue <= allowed[msg.sender][_spender]);\n\n        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender] - _subtractedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function deposit(address _to) public payable {\n        require(_to != address(0));\n        require(msg.value > 0);\n\n        balances[_to] = balances[_to] + msg.value;\n        emit Deposit(msg.sender, _to, msg.value);\n    }\n\n    //Additional helper functions\n    function name() public pure returns (string memory) {\n        return \"EthInPool\";\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"EthIP\";\n    }\n\n    //Events\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Withdrawal(address indexed owner, uint256 value);\n    event Deposit(address indexed sender, address indexed receiver, uint256 value);\n}\n```\nNote: This contract is a simple implementation of an ERC20 token. Please do your own research or consult with a blockchain developer before using this contract for production. The contract doesn't implement the full ERC20 standard.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472242,
	"id": "chatcmpl-8MunaSLPDAYjwRG3bPmU4SwGW0RNk",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000;\n    \n        if (0x70a08231 > var0) {\n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00de;\n                var var2 = name();\n            \n            label_00DE:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var2;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var var3 = temp0;\n                var var4 = var3;\n                var var5 = var4 + 0x40;\n                var var7 = memory[temp1:temp1 + 0x20];\n                var var6 = temp1 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0118:\n                    var temp2 = var7;\n                    var5 = temp2 + var5;\n                    var6 = temp2 & 0x1f;\n                \n                    if (!var6) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var5 - temp3];\n                    } else {\n                        var temp4 = var6;\n                        var temp5 = var5 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_0109:\n                    var temp7 = var11;\n                    memory[temp7 + var9:temp7 + var9 + 0x20] = memory[temp7 + var10:temp7 + var10 + 0x20];\n                    var11 = temp7 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0118; }\n                    else { goto label_0109; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018c;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = approve(var2, var3);\n            \n            label_018C:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018c;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = transferFrom(var2, var3);\n                goto label_018C;\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                withdraw(var2, var3);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0224;\n                var2 = decimals();\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2 & 0xff;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n            } else if (var0 == 0x39509351) {\n                // Dispatch table entry for increaseAllowance(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018c;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = increaseAllowance(var2, var3);\n                goto label_018C;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var1 = balanceOf(var2, var3);\n        \n        label_02A6:\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var1;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x7e1cd431) {\n            // Dispatch table entry for transferToCelerWallet(address,address,bytes32,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018c;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n        \n            var1 = transferToCelerWallet(var2, var3);\n            goto label_018C;\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00de;\n            var2 = symbol();\n            goto label_00DE;\n        } else if (var0 == 0xa457c2d7) {\n            // Dispatch table entry for decreaseAllowance(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018c;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = decreaseAllowance(var2, var3);\n            goto label_018C;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = allowance(var2, var3);\n            goto label_02A6;\n        } else if (var0 == 0xf340fa01) {\n            // Dispatch table entry for deposit(address)\n            var1 = 0x020d;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            deposit(var2, var3);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp1 = msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x01;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x0aeb:0x0b0b];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp7;\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [memory[0x00:0x20], msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x14;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x5370656e64657220616464726573732069732030000000000000000000000000;\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n        }\n    }\n    \n    function transferFrom(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var0 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n        var var1 = 0x00;\n        memory[var1:var1 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[var1:var1 + 0x40]);\n        memory[var1:var1 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var var3 = storage[keccak256(memory[var1:var1 + 0x40])];\n        var var2 = 0x04d2;\n        var var4 = var0;\n        var2 = func_09A2(var3, var4);\n        var temp3 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x01;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = msg.sender;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = temp4;\n        var temp6 = var2;\n        storage[keccak256(memory[0x00:0x40])] = temp6;\n        var temp7 = memory[0x40:0x60];\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = memory[0x40:0x60];\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0aeb:0x0b0b];\n        var temp10 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp9;\n        log(memory[temp8:temp8 + temp7 - temp8 + 0x20], [memory[0x00:0x20], stack[-5] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n        var2 = 0x0527;\n        var3 = arg0;\n        var4 = arg1;\n        var var5 = var0;\n        func_09B7(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function withdraw(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x053c;\n        var var0 = msg.sender;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        func_09B7(var0, var1, var2);\n    }\n    \n    function increaseAllowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = temp1;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var1 = 0x05d8;\n            var var3 = arg1;\n            var1 = func_0AD1(var2, var3);\n            var temp2 = msg.sender;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x01;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = temp3;\n            var temp5 = var1;\n            storage[keccak256(memory[0x00:0x40])] = temp5;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp5;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x0aeb:0x0b0b];\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp8;\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = 0x20;\n            memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = 0x14;\n            memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = 0x5370656e64657220616464726573732069732030000000000000000000000000;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp10 - temp11 + 0x64]);\n        }\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferToCelerWallet(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var0 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n        var var1 = msg.data[temp1 + 0x60:temp1 + 0x60 + 0x20];\n        var var2 = 0x00;\n        memory[var2:var2 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[var2:var2 + 0x40]);\n        memory[var2:var2 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var var3 = 0x067a;\n        var var4 = storage[keccak256(memory[var2:var2 + 0x40])];\n        var var5 = var1;\n        var3 = func_09A2(var4, var5);\n        var temp3 = arg0;\n        var temp4 = temp3 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp4;\n        memory[0x20:0x40] = 0x01;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        var temp6 = msg.sender;\n        memory[0x00:0x20] = temp6;\n        memory[0x20:0x40] = temp5;\n        var temp7 = var3;\n        storage[keccak256(memory[0x00:0x40])] = temp7;\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = memory[0x40:0x60];\n        var temp10 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0aeb:0x0b0b];\n        var temp11 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp10;\n        log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [memory[0x00:0x20], stack[-6] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n        memory[0x00:0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var3 = 0x06ed;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var5 = var1;\n        var3 = func_09A2(var4, var5);\n        var temp12 = 0x02 ** 0xa0 - 0x01;\n        var temp13 = arg0 & temp12;\n        memory[0x00:0x20] = temp13;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var temp14 = memory[0x40:0x60];\n        memory[temp14:temp14 + 0x20] = var1;\n        var temp15 = memory[0x40:0x60];\n        var temp16 = arg1;\n        log(memory[temp15:temp15 + temp14 - temp15 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-6] & 0x02 ** 0xa0 - 0x01, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n        var3 = temp16;\n        var4 = var3 & 0x02 ** 0xa0 - 0x01;\n        var5 = 0xd68d9d4e;\n        var var6 = var1;\n        var temp17 = memory[0x40:0x60];\n        memory[temp17:temp17 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp18 = temp17 + 0x04;\n        memory[temp18:temp18 + 0x20] = var0;\n        var var7 = temp18 + 0x20;\n        var var8 = 0x00;\n        var var9 = memory[0x40:0x60];\n        var var10 = var7 - var9;\n        var var11 = var9;\n        var var12 = var6;\n        var var13 = var4;\n        var var14 = !address(var13).code.length;\n    \n        if (var14) { revert(memory[0x00:0x00]); }\n    \n        var temp19;\n        temp19, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n        var8 = !temp19;\n    \n        if (!var8) { return 0x01; }\n    \n        var temp20 = returndata.length;\n        memory[0x00:0x00 + temp20] = returndata[0x00:0x00 + temp20];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function decreaseAllowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = temp1;\n            var var1 = 0x05d8;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = arg1;\n            var1 = func_09A2(var2, var3);\n            var temp2 = msg.sender;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x01;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = temp3;\n            var temp5 = var1;\n            storage[keccak256(memory[0x00:0x40])] = temp5;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp5;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x0aeb:0x0b0b];\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp8;\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = 0x20;\n            memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = 0x14;\n            memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = 0x5370656e64657220616464726573732069732030000000000000000000000000;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp10 - temp11 + 0x64]);\n        }\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20] & temp0;\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2 & arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & arg1;\n        memory[0x20:0x40] = temp3;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function deposit(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x00;\n            arg1 = 0x094f;\n            var var0 = storage[keccak256(memory[0x00:0x40])];\n            var var1 = msg.value;\n            arg1 = func_0AD1(var0, var1);\n            var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = arg1;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = msg.value;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x15;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x5265636569766572206164647265737320697320300000000000000000000000;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x09;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x457468496e506f6f6c0000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x05;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4574684950000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function func_09A2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_09B7(var arg0, var arg1, var arg2) {\n        if (arg1 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x00;\n            var var0 = 0x0a3e;\n            var var1 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = arg2;\n            var0 = func_09A2(var1, var2);\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var temp2 = memory[0x40:0x60];\n            var temp3 = arg2;\n            memory[temp2:temp2 + 0x20] = temp3;\n            var temp4 = memory[0x40:0x60];\n            var temp5 = arg1;\n            log(memory[temp4:temp4 + temp2 - temp4 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            var temp6 = memory[0x40:0x60];\n            var temp7;\n            temp7, memory[temp6:temp6 + 0x00] = address(temp5 & 0x02 ** 0xa0 - 0x01).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp6:temp6 + 0x00]);\n            var0 = !temp7;\n        \n            if (!var0) { return; }\n        \n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x0f;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x546f206164647265737320697320300000000000000000000000000000000000;\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n        }\n    }\n    \n    function func_0AD1(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000;\n    \n        if (0x70a08231 > var0) {\n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00de;\n                var var2 = name();\n            \n            label_00DE:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var2;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var var3 = temp0;\n                var var4 = var3;\n                var var5 = var4 + 0x40;\n                var var7 = memory[temp1:temp1 + 0x20];\n                var var6 = temp1 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0118:\n                    var temp2 = var7;\n                    var5 = temp2 + var5;\n                    var6 = temp2 & 0x1f;\n                \n                    if (!var6) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var5 - temp3];\n                    } else {\n                        var temp4 = var6;\n                        var temp5 = var5 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_0109:\n                    var temp7 = var11;\n                    memory[temp7 + var9:temp7 + var9 + 0x20] = memory[temp7 + var10:temp7 + var10 + 0x20];\n                    var11 = temp7 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0118; }\n                    else { goto label_0109; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018c;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = approve(var2, var3);\n            \n            label_018C:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018c;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = transferFrom(var2, var3);\n                goto label_018C;\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                withdraw(var2, var3);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0224;\n                var2 = decimals();\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2 & 0xff;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n            } else if (var0 == 0x39509351) {\n                // Dispatch table entry for increaseAllowance(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018c;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = increaseAllowance(var2, var3);\n                goto label_018C;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var1 = balanceOf(var2, var3);\n        \n        label_02A6:\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var1;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x7e1cd431) {\n            // Dispatch table entry for transferToCelerWallet(address,address,bytes32,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018c;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n        \n            var1 = transferToCelerWallet(var2, var3);\n            goto label_018C;\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00de;\n            var2 = symbol();\n            goto label_00DE;\n        } else if (var0 == 0xa457c2d7) {\n            // Dispatch table entry for decreaseAllowance(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018c;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = decreaseAllowance(var2, var3);\n            goto label_018C;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = allowance(var2, var3);\n            goto label_02A6;\n        } else if (var0 == 0xf340fa01) {\n            // Dispatch table entry for deposit(address)\n            var1 = 0x020d;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            deposit(var2, var3);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp1 = msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x01;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x0aeb:0x0b0b];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp7;\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [memory[0x00:0x20], msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x14;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x5370656e64657220616464726573732069732030000000000000000000000000;\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n        }\n    }\n    \n    function transferFrom(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var0 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n        var var1 = 0x00;\n        memory[var1:var1 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[var1:var1 + 0x40]);\n        memory[var1:var1 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var var3 = storage[keccak256(memory[var1:var1 + 0x40])];\n        var var2 = 0x04d2;\n        var var4 = var0;\n        var2 = func_09A2(var3, var4);\n        var temp3 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x01;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = msg.sender;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = temp4;\n        var temp6 = var2;\n        storage[keccak256(memory[0x00:0x40])] = temp6;\n        var temp7 = memory[0x40:0x60];\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = memory[0x40:0x60];\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0aeb:0x0b0b];\n        var temp10 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp9;\n        log(memory[temp8:temp8 + temp7 - temp8 + 0x20], [memory[0x00:0x20], stack[-5] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n        var2 = 0x0527;\n        var3 = arg0;\n        var4 = arg1;\n        var var5 = var0;\n        func_09B7(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function withdraw(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x053c;\n        var var0 = msg.sender;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        func_09B7(var0, var1, var2);\n    }\n    \n    function increaseAllowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = temp1;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var1 = 0x05d8;\n            var var3 = arg1;\n            var1 = func_0AD1(var2, var3);\n            var temp2 = msg.sender;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x01;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = temp3;\n            var temp5 = var1;\n            storage[keccak256(memory[0x00:0x40])] = temp5;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp5;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x0aeb:0x0b0b];\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp8;\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = 0x20;\n            memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = 0x14;\n            memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = 0x5370656e64657220616464726573732069732030000000000000000000000000;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp10 - temp11 + 0x64]);\n        }\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferToCelerWallet(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var0 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n        var var1 = msg.data[temp1 + 0x60:temp1 + 0x60 + 0x20];\n        var var2 = 0x00;\n        memory[var2:var2 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[var2:var2 + 0x40]);\n        memory[var2:var2 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var var3 = 0x067a;\n        var var4 = storage[keccak256(memory[var2:var2 + 0x40])];\n        var var5 = var1;\n        var3 = func_09A2(var4, var5);\n        var temp3 = arg0;\n        var temp4 = temp3 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp4;\n        memory[0x20:0x40] = 0x01;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        var temp6 = msg.sender;\n        memory[0x00:0x20] = temp6;\n        memory[0x20:0x40] = temp5;\n        var temp7 = var3;\n        storage[keccak256(memory[0x00:0x40])] = temp7;\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = memory[0x40:0x60];\n        var temp10 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0aeb:0x0b0b];\n        var temp11 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp10;\n        log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [memory[0x00:0x20], stack[-6] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n        memory[0x00:0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var3 = 0x06ed;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var5 = var1;\n        var3 = func_09A2(var4, var5);\n        var temp12 = 0x02 ** 0xa0 - 0x01;\n        var temp13 = arg0 & temp12;\n        memory[0x00:0x20] = temp13;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var temp14 = memory[0x40:0x60];\n        memory[temp14:temp14 + 0x20] = var1;\n        var temp15 = memory[0x40:0x60];\n        var temp16 = arg1;\n        log(memory[temp15:temp15 + temp14 - temp15 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-6] & 0x02 ** 0xa0 - 0x01, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n        var3 = temp16;\n        var4 = var3 & 0x02 ** 0xa0 - 0x01;\n        var5 = 0xd68d9d4e;\n        var var6 = var1;\n        var temp17 = memory[0x40:0x60];\n        memory[temp17:temp17 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp18 = temp17 + 0x04;\n        memory[temp18:temp18 + 0x20] = var0;\n        var var7 = temp18 + 0x20;\n        var var8 = 0x00;\n        var var9 = memory[0x40:0x60];\n        var var10 = var7 - var9;\n        var var11 = var9;\n        var var12 = var6;\n        var var13 = var4;\n        var var14 = !address(var13).code.length;\n    \n        if (var14) { revert(memory[0x00:0x00]); }\n    \n        var temp19;\n        temp19, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n        var8 = !temp19;\n    \n        if (!var8) { return 0x01; }\n    \n        var temp20 = returndata.length;\n        memory[0x00:0x00 + temp20] = returndata[0x00:0x00 + temp20];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function decreaseAllowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = temp1;\n            var var1 = 0x05d8;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = arg1;\n            var1 = func_09A2(var2, var3);\n            var temp2 = msg.sender;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x01;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = temp3;\n            var temp5 = var1;\n            storage[keccak256(memory[0x00:0x40])] = temp5;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp5;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x0aeb:0x0b0b];\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp8;\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = 0x20;\n            memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = 0x14;\n            memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = 0x5370656e64657220616464726573732069732030000000000000000000000000;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp10 - temp11 + 0x64]);\n        }\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20] & temp0;\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2 & arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & arg1;\n        memory[0x20:0x40] = temp3;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function deposit(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x00;\n            arg1 = 0x094f;\n            var var0 = storage[keccak256(memory[0x00:0x40])];\n            var var1 = msg.value;\n            arg1 = func_0AD1(var0, var1);\n            var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = arg1;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = msg.value;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x15;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x5265636569766572206164647265737320697320300000000000000000000000;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x09;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x457468496e506f6f6c0000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x05;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4574684950000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function func_09A2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_09B7(var arg0, var arg1, var arg2) {\n        if (arg1 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x00;\n            var var0 = 0x0a3e;\n            var var1 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = arg2;\n            var0 = func_09A2(var1, var2);\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var temp2 = memory[0x40:0x60];\n            var temp3 = arg2;\n            memory[temp2:temp2 + 0x20] = temp3;\n            var temp4 = memory[0x40:0x60];\n            var temp5 = arg1;\n            log(memory[temp4:temp4 + temp2 - temp4 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            var temp6 = memory[0x40:0x60];\n            var temp7;\n            temp7, memory[temp6:temp6 + 0x00] = address(temp5 & 0x02 ** 0xa0 - 0x01).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp6:temp6 + 0x00]);\n            var0 = !temp7;\n        \n            if (!var0) { return; }\n        \n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x0f;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x546f206164647265737320697320300000000000000000000000000000000000;\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n        }\n    }\n    \n    function func_0AD1(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000;\n    \n        if (0x70a08231 > var0) {\n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00de;\n                var var2 = name();\n            \n            label_00DE:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var2;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var var3 = temp0;\n                var var4 = var3;\n                var var5 = var4 + 0x40;\n                var var7 = memory[temp1:temp1 + 0x20];\n                var var6 = temp1 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0118:\n                    var temp2 = var7;\n                    var5 = temp2 + var5;\n                    var6 = temp2 & 0x1f;\n                \n                    if (!var6) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var5 - temp3];\n                    } else {\n                        var temp4 = var6;\n                        var temp5 = var5 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_0109:\n                    var temp7 = var11;\n                    memory[temp7 + var9:temp7 + var9 + 0x20] = memory[temp7 + var10:temp7 + var10 + 0x20];\n                    var11 = temp7 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0118; }\n                    else { goto label_0109; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018c;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = approve(var2, var3);\n            \n            label_018C:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018c;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = transferFrom(var2, var3);\n                goto label_018C;\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                withdraw(var2, var3);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0224;\n                var2 = decimals();\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2 & 0xff;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n            } else if (var0 == 0x39509351) {\n                // Dispatch table entry for increaseAllowance(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018c;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = increaseAllowance(var2, var3);\n                goto label_018C;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var1 = balanceOf(var2, var3);\n        \n        label_02A6:\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var1;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x7e1cd431) {\n            // Dispatch table entry for transferToCelerWallet(address,address,bytes32,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018c;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n        \n            var1 = transferToCelerWallet(var2, var3);\n            goto label_018C;\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00de;\n            var2 = symbol();\n            goto label_00DE;\n        } else if (var0 == 0xa457c2d7) {\n            // Dispatch table entry for decreaseAllowance(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018c;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = decreaseAllowance(var2, var3);\n            goto label_018C;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02a6;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = allowance(var2, var3);\n            goto label_02A6;\n        } else if (var0 == 0xf340fa01) {\n            // Dispatch table entry for deposit(address)\n            var1 = 0x020d;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            deposit(var2, var3);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp1 = msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x01;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x0aeb:0x0b0b];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp7;\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [memory[0x00:0x20], msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x14;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x5370656e64657220616464726573732069732030000000000000000000000000;\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n        }\n    }\n    \n    function transferFrom(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var0 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n        var var1 = 0x00;\n        memory[var1:var1 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[var1:var1 + 0x40]);\n        memory[var1:var1 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var var3 = storage[keccak256(memory[var1:var1 + 0x40])];\n        var var2 = 0x04d2;\n        var var4 = var0;\n        var2 = func_09A2(var3, var4);\n        var temp3 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x01;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = msg.sender;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = temp4;\n        var temp6 = var2;\n        storage[keccak256(memory[0x00:0x40])] = temp6;\n        var temp7 = memory[0x40:0x60];\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = memory[0x40:0x60];\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0aeb:0x0b0b];\n        var temp10 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp9;\n        log(memory[temp8:temp8 + temp7 - temp8 + 0x20], [memory[0x00:0x20], stack[-5] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n        var2 = 0x0527;\n        var3 = arg0;\n        var4 = arg1;\n        var var5 = var0;\n        func_09B7(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function withdraw(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x053c;\n        var var0 = msg.sender;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        func_09B7(var0, var1, var2);\n    }\n    \n    function increaseAllowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = temp1;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var1 = 0x05d8;\n            var var3 = arg1;\n            var1 = func_0AD1(var2, var3);\n            var temp2 = msg.sender;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x01;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = temp3;\n            var temp5 = var1;\n            storage[keccak256(memory[0x00:0x40])] = temp5;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp5;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x0aeb:0x0b0b];\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp8;\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = 0x20;\n            memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = 0x14;\n            memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = 0x5370656e64657220616464726573732069732030000000000000000000000000;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp10 - temp11 + 0x64]);\n        }\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferToCelerWallet(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var0 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n        var var1 = msg.data[temp1 + 0x60:temp1 + 0x60 + 0x20];\n        var var2 = 0x00;\n        memory[var2:var2 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[var2:var2 + 0x40]);\n        memory[var2:var2 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var var3 = 0x067a;\n        var var4 = storage[keccak256(memory[var2:var2 + 0x40])];\n        var var5 = var1;\n        var3 = func_09A2(var4, var5);\n        var temp3 = arg0;\n        var temp4 = temp3 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp4;\n        memory[0x20:0x40] = 0x01;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        var temp6 = msg.sender;\n        memory[0x00:0x20] = temp6;\n        memory[0x20:0x40] = temp5;\n        var temp7 = var3;\n        storage[keccak256(memory[0x00:0x40])] = temp7;\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = memory[0x40:0x60];\n        var temp10 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0aeb:0x0b0b];\n        var temp11 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp10;\n        log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [memory[0x00:0x20], stack[-6] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n        memory[0x00:0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var3 = 0x06ed;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var5 = var1;\n        var3 = func_09A2(var4, var5);\n        var temp12 = 0x02 ** 0xa0 - 0x01;\n        var temp13 = arg0 & temp12;\n        memory[0x00:0x20] = temp13;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var temp14 = memory[0x40:0x60];\n        memory[temp14:temp14 + 0x20] = var1;\n        var temp15 = memory[0x40:0x60];\n        var temp16 = arg1;\n        log(memory[temp15:temp15 + temp14 - temp15 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-6] & 0x02 ** 0xa0 - 0x01, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n        var3 = temp16;\n        var4 = var3 & 0x02 ** 0xa0 - 0x01;\n        var5 = 0xd68d9d4e;\n        var var6 = var1;\n        var temp17 = memory[0x40:0x60];\n        memory[temp17:temp17 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp18 = temp17 + 0x04;\n        memory[temp18:temp18 + 0x20] = var0;\n        var var7 = temp18 + 0x20;\n        var var8 = 0x00;\n        var var9 = memory[0x40:0x60];\n        var var10 = var7 - var9;\n        var var11 = var9;\n        var var12 = var6;\n        var var13 = var4;\n        var var14 = !address(var13).code.length;\n    \n        if (var14) { revert(memory[0x00:0x00]); }\n    \n        var temp19;\n        temp19, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n        var8 = !temp19;\n    \n        if (!var8) { return 0x01; }\n    \n        var temp20 = returndata.length;\n        memory[0x00:0x00 + temp20] = returndata[0x00:0x00 + temp20];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function decreaseAllowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = temp1;\n            var var1 = 0x05d8;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = arg1;\n            var1 = func_09A2(var2, var3);\n            var temp2 = msg.sender;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x01;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = temp3;\n            var temp5 = var1;\n            storage[keccak256(memory[0x00:0x40])] = temp5;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp5;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x0aeb:0x0b0b];\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp8;\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = 0x20;\n            memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = 0x14;\n            memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = 0x5370656e64657220616464726573732069732030000000000000000000000000;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp10 - temp11 + 0x64]);\n        }\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20] & temp0;\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2 & arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & arg1;\n        memory[0x20:0x40] = temp3;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function deposit(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x00;\n            arg1 = 0x094f;\n            var var0 = storage[keccak256(memory[0x00:0x40])];\n            var var1 = msg.value;\n            arg1 = func_0AD1(var0, var1);\n            var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = arg1;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = msg.value;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x15;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x5265636569766572206164647265737320697320300000000000000000000000;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x09;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x457468496e506f6f6c0000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x05;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4574684950000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function func_09A2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_09B7(var arg0, var arg1, var arg2) {\n        if (arg1 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x00;\n            var var0 = 0x0a3e;\n            var var1 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = arg2;\n            var0 = func_09A2(var1, var2);\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var temp2 = memory[0x40:0x60];\n            var temp3 = arg2;\n            memory[temp2:temp2 + 0x20] = temp3;\n            var temp4 = memory[0x40:0x60];\n            var temp5 = arg1;\n            log(memory[temp4:temp4 + temp2 - temp4 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            var temp6 = memory[0x40:0x60];\n            var temp7;\n            temp7, memory[temp6:temp6 + 0x00] = address(temp5 & 0x02 ** 0xa0 - 0x01).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp6:temp6 + 0x00]);\n            var0 = !temp7;\n        \n            if (!var0) { return; }\n        \n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x0f;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x546f206164647265737320697320300000000000000000000000000000000000;\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n        }\n    }\n    \n    function func_0AD1(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 48.98305058479309,
	"usage": {
		"completion_tokens": 819,
		"prompt_tokens": 8669,
		"total_tokens": 9488
	}
}