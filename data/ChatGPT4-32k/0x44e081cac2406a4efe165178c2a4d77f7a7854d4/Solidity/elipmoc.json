{
	"address": "0x44e081cac2406a4efe165178c2a4d77f7a7854d4",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Deposit(address indexed depositor, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0), 'Spender address is 0');\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(value <= _allowance[from][msg.sender]);\n        _allowance[from][msg.sender] -= value;\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowance[from][msg.sender]);\n        return true;\n    }\n\n    function withdraw(uint256 value) public {\n        _transfer(msg.sender, msg.sender, value);\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0), 'Spender address is 0');\n        _allowance[msg.sender][spender] += addedValue;\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n        return true;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balanceOf[owner];\n    }\n\n    function transferToCelerWallet(address from, address walletAddr, bytes32 walletId, uint256 value) public {\n        require(value <= _allowance[msg.sender][from]);\n        _allowance[msg.sender][from] -= value;\n        emit Approval(from, msg.sender, _allowance[msg.sender][from]);\n        _balanceOf[from] -= value;\n        emit Transfer(from, walletAddr, value);\n    }\n\n    function symbol() public pure returns (string memory) {\n        return 'EthIP';\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0), 'Spender address is 0');\n        require(subtractedValue <= _allowance[msg.sender][spender]);\n        _allowance[msg.sender][spender] -= subtractedValue;\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function deposit() public payable {\n        _balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function _transfer(address from, address to, uint256 value) private {\n        require(to != address(0), 'To address is 0');\n        require(value <= _balanceOf[from]);\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(from, to, value);\n    }\n\n    function name() public pure returns (string memory) {\n        return 'EthInPool';\n    }\n}\n```\n\nPlease note that this contract assumes that the `0x9b7` function in the decompiled code is a transfer function. This contract is also simplified and may not have all the functionality of the original bytecode, especially regarding the function selector logic.",
				"role": "assistant"
			}
		}
	],
	"created": 1701455576,
	"id": "chatcmpl-8R2boo8jqQjBqaQPJ1EochQRlrmNo",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 09:56 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\n\n// Events\nTransfer(address, address, uint256);\nDeposit(address, uint256);\nApproval(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0, 'Spender address is 0');\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Approval(varg0, msg.sender, _allowance[msg.sender] - varg2);\n    0x9b7(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    0x9b7(varg0, msg.sender, msg.sender);\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0, 'Spender address is 0');\n    require(varg1 + _allowance[varg0] >= _allowance[varg0]);\n    _allowance[msg.sender] = varg1 + _allowance[varg0];\n    emit Approval(msg.sender, varg0, varg1 + _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction transferToCelerWallet(address _from, address _walletAddr, bytes32 _walletId, uint256 _value) public nonPayable { \n    require(msg.data.length - 4 >= 128);\n    require(_value <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - _value;\n    emit Approval(_from, msg.sender, _allowance[msg.sender] - _value);\n    require(_value <= _allowance[_from]);\n    _balanceOf[_from] = _allowance[_from] - _value;\n    emit Transfer(_from, _walletAddr, _value);\n    require(_walletAddr.code.size);\n    v0 = _walletAddr.call(0xd68d9d4e, _walletId).value(_value).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    return 1;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'EthIP';\n    }\n    return v0;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0, 'Spender address is 0');\n    require(varg1 <= _allowance[varg0]);\n    _allowance[msg.sender] = _allowance[varg0] - varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0] - varg1);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction deposit(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0, 'Receiver address is 0');\n    require(msg.value + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += msg.value;\n    emit Deposit(varg0, msg.value);\n}\n\nfunction 0x9b7(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1), 'To address is 0');\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg2);\n    _balanceOf[v1] = _balanceOf[v0] - varg0;\n    emit Transfer(v1, address(varg1), varg0);\n    v2 = address(varg1).call().value(varg0).gas(2300 * !varg0);\n    require(v2); // checks call status, propagates error data on error\n    return ;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (9) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffff & 'EthInPool';\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x70a08231 > function_selector) {\n            if (0x6fdde03 == function_selector) {\n                name();\n            } else if (0x95ea7b3 == function_selector) {\n                approve(address,uint256);\n            } else if (0x23b872dd == function_selector) {\n                transferFrom(address,address,uint256);\n            } else if (0x2e1a7d4d == function_selector) {\n                withdraw(uint256);\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x39509351 == function_selector) {\n                increaseAllowance(address,uint256);\n            }\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7e1cd431 == function_selector) {\n            0x7e1cd431();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa457c2d7 == function_selector) {\n            decreaseAllowance(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 09:56 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\n\n// Events\nTransfer(address, address, uint256);\nDeposit(address, uint256);\nApproval(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0, 'Spender address is 0');\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Approval(varg0, msg.sender, _allowance[msg.sender] - varg2);\n    0x9b7(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    0x9b7(varg0, msg.sender, msg.sender);\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0, 'Spender address is 0');\n    require(varg1 + _allowance[varg0] >= _allowance[varg0]);\n    _allowance[msg.sender] = varg1 + _allowance[varg0];\n    emit Approval(msg.sender, varg0, varg1 + _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction transferToCelerWallet(address _from, address _walletAddr, bytes32 _walletId, uint256 _value) public nonPayable { \n    require(msg.data.length - 4 >= 128);\n    require(_value <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - _value;\n    emit Approval(_from, msg.sender, _allowance[msg.sender] - _value);\n    require(_value <= _allowance[_from]);\n    _balanceOf[_from] = _allowance[_from] - _value;\n    emit Transfer(_from, _walletAddr, _value);\n    require(_walletAddr.code.size);\n    v0 = _walletAddr.call(0xd68d9d4e, _walletId).value(_value).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    return 1;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'EthIP';\n    }\n    return v0;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0, 'Spender address is 0');\n    require(varg1 <= _allowance[varg0]);\n    _allowance[msg.sender] = _allowance[varg0] - varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0] - varg1);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction deposit(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0, 'Receiver address is 0');\n    require(msg.value + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += msg.value;\n    emit Deposit(varg0, msg.value);\n}\n\nfunction 0x9b7(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1), 'To address is 0');\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg2);\n    _balanceOf[v1] = _balanceOf[v0] - varg0;\n    emit Transfer(v1, address(varg1), varg0);\n    v2 = address(varg1).call().value(varg0).gas(2300 * !varg0);\n    require(v2); // checks call status, propagates error data on error\n    return ;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (9) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffff & 'EthInPool';\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x70a08231 > function_selector) {\n            if (0x6fdde03 == function_selector) {\n                name();\n            } else if (0x95ea7b3 == function_selector) {\n                approve(address,uint256);\n            } else if (0x23b872dd == function_selector) {\n                transferFrom(address,address,uint256);\n            } else if (0x2e1a7d4d == function_selector) {\n                withdraw(uint256);\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x39509351 == function_selector) {\n                increaseAllowance(address,uint256);\n            }\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7e1cd431 == function_selector) {\n            0x7e1cd431();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa457c2d7 == function_selector) {\n            decreaseAllowance(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 09:56 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\n\n// Events\nTransfer(address, address, uint256);\nDeposit(address, uint256);\nApproval(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0, 'Spender address is 0');\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Approval(varg0, msg.sender, _allowance[msg.sender] - varg2);\n    0x9b7(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    0x9b7(varg0, msg.sender, msg.sender);\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0, 'Spender address is 0');\n    require(varg1 + _allowance[varg0] >= _allowance[varg0]);\n    _allowance[msg.sender] = varg1 + _allowance[varg0];\n    emit Approval(msg.sender, varg0, varg1 + _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction transferToCelerWallet(address _from, address _walletAddr, bytes32 _walletId, uint256 _value) public nonPayable { \n    require(msg.data.length - 4 >= 128);\n    require(_value <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - _value;\n    emit Approval(_from, msg.sender, _allowance[msg.sender] - _value);\n    require(_value <= _allowance[_from]);\n    _balanceOf[_from] = _allowance[_from] - _value;\n    emit Transfer(_from, _walletAddr, _value);\n    require(_walletAddr.code.size);\n    v0 = _walletAddr.call(0xd68d9d4e, _walletId).value(_value).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    return 1;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'EthIP';\n    }\n    return v0;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0, 'Spender address is 0');\n    require(varg1 <= _allowance[varg0]);\n    _allowance[msg.sender] = _allowance[varg0] - varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0] - varg1);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction deposit(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0, 'Receiver address is 0');\n    require(msg.value + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += msg.value;\n    emit Deposit(varg0, msg.value);\n}\n\nfunction 0x9b7(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1), 'To address is 0');\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg2);\n    _balanceOf[v1] = _balanceOf[v0] - varg0;\n    emit Transfer(v1, address(varg1), varg0);\n    v2 = address(varg1).call().value(varg0).gas(2300 * !varg0);\n    require(v2); // checks call status, propagates error data on error\n    return ;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (9) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffff & 'EthInPool';\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x70a08231 > function_selector) {\n            if (0x6fdde03 == function_selector) {\n                name();\n            } else if (0x95ea7b3 == function_selector) {\n                approve(address,uint256);\n            } else if (0x23b872dd == function_selector) {\n                transferFrom(address,address,uint256);\n            } else if (0x2e1a7d4d == function_selector) {\n                withdraw(uint256);\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x39509351 == function_selector) {\n                increaseAllowance(address,uint256);\n            }\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7e1cd431 == function_selector) {\n            0x7e1cd431();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa457c2d7 == function_selector) {\n            decreaseAllowance(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 63.992480754852295,
	"usage": {
		"completion_tokens": 764,
		"prompt_tokens": 1696,
		"total_tokens": 2460
	}
}